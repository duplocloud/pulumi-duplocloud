{
    "name": "duplocloud",
    "displayName": "duplocloud",
    "description": "A Pulumi package for creating and managing duplocloud cloud resources.",
    "keywords": [
        "duplocloud",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`duplocloud` Terraform Provider](https://github.com/duplocloud/terraform-provider-duplocloud).",
    "repository": "https://github.com/duplocloud/pulumi-duplocloud",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing duplocloud cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/duplocloud/terraform-provider-duplocloud)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-duplocloud` repo](https://github.com/duplocloud/pulumi-duplocloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-duplocloud` repo](https://github.com/duplocloud/terraform-provider-duplocloud/issues).",
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/duplocloud/terraform-provider-duplocloud)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-duplocloud` repo](https://github.com/duplocloud/pulumi-duplocloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-duplocloud` repo](https://github.com/duplocloud/terraform-provider-duplocloud/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "duploHost": {
                "type": "string",
                "description": "This is the base URL to the Duplo REST API. It must be provided, but it can also be sourced from the `duplo_host`\nenvironment variable.\n"
            },
            "duploToken": {
                "type": "string",
                "description": "This is a bearer token used to authenticate to the Duplo REST API. It must be provided, but it can also be sourced from\nthe `duplo_token` environment variable.\n",
                "secret": true
            },
            "httpTimeout": {
                "type": "integer",
                "description": "Timeout for HTTP requests in seconds.\n"
            },
            "sslNoVerify": {
                "type": "boolean",
                "description": "Disable SSL certificate verification.\n"
            }
        }
    },
    "types": {
        "duplocloud:index/AsgProfileMetadata:AsgProfileMetadata": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AsgProfileMinionTag:AsgProfileMinionTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AsgProfileNetworkInterface:AsgProfileNetworkInterface": {
            "properties": {
                "associatePublicIp": {
                    "type": "boolean",
                    "description": "Whether or not to associate a public IP with the newly created ENI.  Cannot be specified if `network_interface_id` is specified.\n"
                },
                "deviceIndex": {
                    "type": "integer",
                    "description": "The device index to pass to AWS for attaching the ENI.  Starts at zero.\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AsgProfileNetworkInterfaceMetadata:AsgProfileNetworkInterfaceMetadata"
                    }
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The ID of an ENI to attach to this host.  Cannot be specified if `subnet_id` or `associate_public_ip` is specified.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of a subnet in which to create a new ENI.  Cannot be specified if `network_interface_id` is specified.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "associatePublicIp",
                        "deviceIndex",
                        "groups",
                        "metadatas",
                        "networkInterfaceId",
                        "subnetId"
                    ]
                }
            }
        },
        "duplocloud:index/AsgProfileNetworkInterfaceMetadata:AsgProfileNetworkInterfaceMetadata": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AsgProfileTag:AsgProfileTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AsgProfileTaint:AsgProfileTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Update strategy of the node. Effect types \u003cbr\u003e      - NoSchedule\u003cbr\u003e     - PreferNoSchedule\u003cbr\u003e     - NoExecute\n",
                    "willReplaceOnChanges": true
                },
                "key": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key"
            ]
        },
        "duplocloud:index/AsgProfileVolume:AsgProfileVolume": {
            "properties": {
                "iops": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "volumeId": {
                    "type": "string"
                },
                "volumeType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iops",
                        "name",
                        "size",
                        "volumeId",
                        "volumeType"
                    ]
                }
            }
        },
        "duplocloud:index/AwsApigatewayEventIntegration:AwsApigatewayEventIntegration": {
            "properties": {
                "timeout": {
                    "type": "integer",
                    "description": "Custom timeout between 50 and 300,000 milliseconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Integration input's type. Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration).\n"
                },
                "uri": {
                    "type": "string",
                    "description": "Input's URI. Required if type is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`. For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "uri"
            ]
        },
        "duplocloud:index/AwsAppautoscalingPolicyStepScalingPolicyConfiguration:AwsAppautoscalingPolicyStepScalingPolicyConfiguration": {
            "properties": {
                "adjustmentType": {
                    "type": "string",
                    "description": "Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.\n"
                },
                "cooldown": {
                    "type": "integer",
                    "description": "The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.\n"
                },
                "metricAggregationType": {
                    "type": "string",
                    "description": "The aggregation type for the policy's metrics. Valid values are \"Minimum\", \"Maximum\", and \"Average\". Without a value, AWS will treat the aggregation type as \"Average\".\n"
                },
                "minAdjustmentMagnitude": {
                    "type": "integer",
                    "description": "The minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.\n"
                },
                "stepAdjustments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsAppautoscalingPolicyStepScalingPolicyConfigurationStepAdjustment:AwsAppautoscalingPolicyStepScalingPolicyConfigurationStepAdjustment"
                    },
                    "description": "A set of adjustments that manage scaling.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/AwsAppautoscalingPolicyStepScalingPolicyConfigurationStepAdjustment:AwsAppautoscalingPolicyStepScalingPolicyConfigurationStepAdjustment": {
            "properties": {
                "metricIntervalLowerBound": {
                    "type": "string",
                    "description": "The lower bound for the difference between the alarm threshold and the CloudWatch metric.\n"
                },
                "metricIntervalUpperBound": {
                    "type": "string",
                    "description": "The upper bound for the difference between the alarm threshold and the CloudWatch metric.\n"
                },
                "scalingAdjustment": {
                    "type": "integer",
                    "description": "The number of members by which to scale, when the adjustment bounds are breached.\n"
                }
            },
            "type": "object",
            "required": [
                "scalingAdjustment"
            ]
        },
        "duplocloud:index/AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfiguration:AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfiguration": {
            "properties": {
                "customizedMetricSpecification": {
                    "$ref": "#/types/duplocloud:index/AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification:AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification"
                },
                "disableScaleIn": {
                    "type": "boolean",
                    "description": "Indicates whether scale in by the target tracking policy is disabled. Defaults to `false`.\n"
                },
                "predefinedMetricSpecification": {
                    "$ref": "#/types/duplocloud:index/AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification:AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification"
                },
                "scaleInCooldown": {
                    "type": "integer",
                    "description": "The amount of time, in seconds, after a scale in activity completes before another scale in activity can start.\n"
                },
                "scaleOutCooldown": {
                    "type": "integer",
                    "description": "The amount of time, in seconds, after a scale out activity completes before another scale out activity can start.\n"
                },
                "targetValue": {
                    "type": "number",
                    "description": "The target value for the metric.\n"
                }
            },
            "type": "object",
            "required": [
                "targetValue"
            ]
        },
        "duplocloud:index/AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification:AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification": {
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimension:AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimension"
                    }
                },
                "metricName": {
                    "type": "string",
                    "description": "The name of the metric.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace of the metric.\n"
                },
                "statistic": {
                    "type": "string",
                    "description": "The statistic of the metric. Valid values: `Average`, `Minimum`, `Maximum`, `SampleCount`, and `Sum`.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "The unit of the metric.\n"
                }
            },
            "type": "object",
            "required": [
                "metricName",
                "namespace",
                "statistic"
            ]
        },
        "duplocloud:index/AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimension:AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimension": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the dimension.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the dimension.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "duplocloud:index/AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification:AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification": {
            "properties": {
                "predefinedMetricType": {
                    "type": "string",
                    "description": "The metric type.\n"
                },
                "resourceLabel": {
                    "type": "string",
                    "description": "Reserved for future use. Must be less than or equal to 1023 characters in length.\n"
                }
            },
            "type": "object",
            "required": [
                "predefinedMetricType"
            ]
        },
        "duplocloud:index/AwsBatchComputeEnvironmentComputeResources:AwsBatchComputeEnvironmentComputeResources": {
            "properties": {
                "allocationStrategy": {
                    "type": "string",
                    "description": "The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Available allocation_strategy - `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED`, `BEST_FIT`, `SPOT_PRICE_CAPACITY_OPTIMIZED`\n",
                    "willReplaceOnChanges": true
                },
                "bidPercentage": {
                    "type": "integer",
                    "description": "Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched.\n",
                    "willReplaceOnChanges": true
                },
                "desiredVcpus": {
                    "type": "integer",
                    "description": "The desired number of EC2 vCPUS in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n"
                },
                "ec2Configuration": {
                    "$ref": "#/types/duplocloud:index/AwsBatchComputeEnvironmentComputeResourcesEc2Configuration:AwsBatchComputeEnvironmentComputeResourcesEc2Configuration",
                    "description": "Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment.\n"
                },
                "ec2KeyPair": {
                    "type": "string",
                    "description": "The EC2 key pair that is used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified. (Deprecated, use ec2_configuration `image_id_override` instead)\n",
                    "willReplaceOnChanges": true
                },
                "instanceRole": {
                    "type": "string",
                    "description": "The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n"
                },
                "instanceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of instance types that may be launched. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n",
                    "willReplaceOnChanges": true
                },
                "launchTemplate": {
                    "$ref": "#/types/duplocloud:index/AwsBatchComputeEnvironmentComputeResourcesLaunchTemplate:AwsBatchComputeEnvironmentComputeResourcesLaunchTemplate",
                    "description": "The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n",
                    "willReplaceOnChanges": true
                },
                "maxVcpus": {
                    "type": "integer",
                    "description": "The maximum number of EC2 vCPUs that an environment can reach.\n"
                },
                "minVcpus": {
                    "type": "integer",
                    "description": "The minimum number of EC2 vCPUs that an environment should maintain. For `EC2` or `SPOT` compute environments, if the parameter is not explicitly defined, a `0` default value will be set. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.\n"
                },
                "spotIamFleetRole": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.\n",
                    "willReplaceOnChanges": true
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of VPC subnets into which the compute resources are launched.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of compute environment. Valid items are `EC2`, `SPOT`, `FARGATE` or `FARGATE_SPOT`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "maxVcpus",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "desiredVcpus",
                        "ec2Configuration",
                        "ec2KeyPair",
                        "instanceRole",
                        "maxVcpus",
                        "securityGroupIds",
                        "subnets",
                        "tags",
                        "type"
                    ]
                }
            }
        },
        "duplocloud:index/AwsBatchComputeEnvironmentComputeResourcesEc2Configuration:AwsBatchComputeEnvironmentComputeResourcesEc2Configuration": {
            "properties": {
                "imageIdOverride": {
                    "type": "string",
                    "description": "The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the `image_id` argument in the `compute_resources` block.\n",
                    "willReplaceOnChanges": true
                },
                "imageType": {
                    "type": "string",
                    "description": "The image type to match with the instance type to select an AMI.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "imageIdOverride",
                        "imageType"
                    ]
                }
            }
        },
        "duplocloud:index/AwsBatchComputeEnvironmentComputeResourcesLaunchTemplate:AwsBatchComputeEnvironmentComputeResourcesLaunchTemplate": {
            "properties": {
                "launchTemplateId": {
                    "type": "string",
                    "description": "ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.\n",
                    "willReplaceOnChanges": true
                },
                "launchTemplateName": {
                    "type": "string",
                    "description": "Name of the launch template.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "The version number of the launch template. Default: The default version of the launch template.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/AwsBatchJobDefinitionRetryStrategy:AwsBatchJobDefinitionRetryStrategy": {
            "properties": {
                "attempts": {
                    "type": "integer",
                    "description": "The number of times to move a job to the RUNNABLE status. You may specify between `1` and `10` attempts.\n",
                    "willReplaceOnChanges": true
                },
                "evaluateOnExits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsBatchJobDefinitionRetryStrategyEvaluateOnExit:AwsBatchJobDefinitionRetryStrategyEvaluateOnExit"
                    },
                    "description": "The evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the attempts parameter must also be specified. You may specify up to 5 configuration blocks.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/AwsBatchJobDefinitionRetryStrategyEvaluateOnExit:AwsBatchJobDefinitionRetryStrategyEvaluateOnExit": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Specifies the action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: `RETRY`, `EXIT`.\n",
                    "willReplaceOnChanges": true
                },
                "onExitCode": {
                    "type": "string",
                    "description": "A glob pattern to match against the decimal representation of the exit code returned for a job.\n",
                    "willReplaceOnChanges": true
                },
                "onReason": {
                    "type": "string",
                    "description": "A glob pattern to match against the reason returned for a job.\n",
                    "willReplaceOnChanges": true
                },
                "onStatusReason": {
                    "type": "string",
                    "description": "A glob pattern to match against the status reason returned for a job.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "duplocloud:index/AwsBatchJobDefinitionTimeout:AwsBatchJobDefinitionTimeout": {
            "properties": {
                "attemptDurationSeconds": {
                    "type": "integer",
                    "description": "The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60`seconds.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/AwsBatchSchedulingPolicyFairSharePolicy:AwsBatchSchedulingPolicyFairSharePolicy": {
            "properties": {
                "computeReservation": {
                    "type": "integer",
                    "description": "A value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used.\n"
                },
                "shareDecaySeconds": {
                    "type": "integer",
                    "description": "The time period to use to calculate a fair share percentage for each fair share identifier in use, in seconds.\n"
                },
                "shareDistributions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsBatchSchedulingPolicyFairSharePolicyShareDistribution:AwsBatchSchedulingPolicyFairSharePolicyShareDistribution"
                    },
                    "description": "One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "computeReservation",
                        "shareDecaySeconds"
                    ]
                }
            }
        },
        "duplocloud:index/AwsBatchSchedulingPolicyFairSharePolicyShareDistribution:AwsBatchSchedulingPolicyFairSharePolicyShareDistribution": {
            "properties": {
                "shareIdentifier": {
                    "type": "string",
                    "description": "A fair share identifier or fair share identifier prefix.\n"
                },
                "weightFactor": {
                    "type": "number",
                    "description": "The weight factor for the fair share identifier.\n"
                }
            },
            "type": "object",
            "required": [
                "shareIdentifier"
            ]
        },
        "duplocloud:index/AwsCloudfrontDistributionCustomErrorResponse:AwsCloudfrontDistributionCustomErrorResponse": {
            "properties": {
                "errorCachingMinTtl": {
                    "type": "integer"
                },
                "errorCode": {
                    "type": "integer"
                },
                "responseCode": {
                    "type": "integer"
                },
                "responsePagePath": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "errorCode"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "errorCachingMinTtl",
                        "errorCode",
                        "responseCode",
                        "responsePagePath"
                    ]
                }
            }
        },
        "duplocloud:index/AwsCloudfrontDistributionDefaultCacheBehavior:AwsCloudfrontDistributionDefaultCacheBehavior": {
            "properties": {
                "allowedMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cachePolicyId": {
                    "type": "string",
                    "description": "\\n\\n\t\t\t\t\t\t\n| Policy name                                                                                                                                                                                  | Policy Id                            |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------|\n| Amplify                                                | 2e54312d-136d-493c-8eb9-b001f22f67d2 |\n| CachingDisabled                               | 4135ea2d-6df8-44a3-9df3-4b5a84be39ad |\n| CachingOptimized                                    | 658327ea-f89d-4fab-a63d-7e88639e58f6 |\n| CachingOptimizedForUncompressedObjects | b2884449-e4de-46a7-ac36-70bc7f1ddd6d |\n| Elemental-MediaPackage                            | 08627262-05a9-4f76-9ded-b50ca2e3a84f |\n\\n\\n\n"
                },
                "cachedMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "defaultTtl": {
                    "type": "integer",
                    "description": "default time to live: Not required when cache*policy*id is set\n"
                },
                "fieldLevelEncryptionId": {
                    "type": "string"
                },
                "forwardedValues": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValues:AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValues"
                },
                "functionAssociations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionDefaultCacheBehaviorFunctionAssociation:AwsCloudfrontDistributionDefaultCacheBehaviorFunctionAssociation"
                    }
                },
                "lambdaFunctionAssociations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociation:AwsCloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociation"
                    }
                },
                "maxTtl": {
                    "type": "integer",
                    "description": "Maximum time to live: Not required when cache*policy*id is set\n"
                },
                "minTtl": {
                    "type": "integer",
                    "description": "Minimum time to live: Not required when cache*policy*id is set Defaults to `0`.\n"
                },
                "originRequestPolicyId": {
                    "type": "string"
                },
                "realtimeLogConfigArn": {
                    "type": "string"
                },
                "responseHeadersPolicyId": {
                    "type": "string"
                },
                "smoothStreaming": {
                    "type": "boolean"
                },
                "targetOriginId": {
                    "type": "string"
                },
                "trustedKeyGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "trustedSigners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "viewerProtocolPolicy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "allowedMethods",
                "cachedMethods",
                "targetOriginId",
                "viewerProtocolPolicy"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedMethods",
                        "cachePolicyId",
                        "cachedMethods",
                        "defaultTtl",
                        "fieldLevelEncryptionId",
                        "maxTtl",
                        "originRequestPolicyId",
                        "realtimeLogConfigArn",
                        "responseHeadersPolicyId",
                        "smoothStreaming",
                        "targetOriginId",
                        "trustedKeyGroups",
                        "trustedSigners",
                        "viewerProtocolPolicy"
                    ]
                }
            }
        },
        "duplocloud:index/AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValues:AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValues": {
            "properties": {
                "cookies": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookies:AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookies"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "headers: Not required when cache*policy*id is set\n"
                },
                "queryString": {
                    "type": "boolean"
                },
                "queryStringCacheKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "query*string*cache*keys: Not required when cache*policy_id is set\n"
                }
            },
            "type": "object",
            "required": [
                "cookies",
                "queryString"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cookies",
                        "headers",
                        "queryString",
                        "queryStringCacheKeys"
                    ]
                }
            }
        },
        "duplocloud:index/AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookies:AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookies": {
            "properties": {
                "forward": {
                    "type": "string"
                },
                "whitelistedNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "forward"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "forward",
                        "whitelistedNames"
                    ]
                }
            }
        },
        "duplocloud:index/AwsCloudfrontDistributionDefaultCacheBehaviorFunctionAssociation:AwsCloudfrontDistributionDefaultCacheBehaviorFunctionAssociation": {
            "properties": {
                "eventType": {
                    "type": "string"
                },
                "functionArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "eventType",
                "functionArn"
            ]
        },
        "duplocloud:index/AwsCloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociation:AwsCloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociation": {
            "properties": {
                "eventType": {
                    "type": "string"
                },
                "includeBody": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "lambdaArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "eventType",
                "lambdaArn"
            ]
        },
        "duplocloud:index/AwsCloudfrontDistributionLoggingConfig:AwsCloudfrontDistributionLoggingConfig": {
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "includeCookies": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "Defaults to ``.\n"
                }
            },
            "type": "object",
            "required": [
                "bucket"
            ]
        },
        "duplocloud:index/AwsCloudfrontDistributionOrderedCacheBehavior:AwsCloudfrontDistributionOrderedCacheBehavior": {
            "properties": {
                "allowedMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cachePolicyId": {
                    "type": "string"
                },
                "cachedMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "defaultTtl": {
                    "type": "integer"
                },
                "fieldLevelEncryptionId": {
                    "type": "string"
                },
                "forwardedValues": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValues:AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValues"
                },
                "functionAssociations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOrderedCacheBehaviorFunctionAssociation:AwsCloudfrontDistributionOrderedCacheBehaviorFunctionAssociation"
                    }
                },
                "lambdaFunctionAssociations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociation:AwsCloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociation"
                    }
                },
                "maxTtl": {
                    "type": "integer"
                },
                "minTtl": {
                    "type": "integer",
                    "description": "Defaults to `0`.\n"
                },
                "originRequestPolicyId": {
                    "type": "string"
                },
                "pathPattern": {
                    "type": "string"
                },
                "realtimeLogConfigArn": {
                    "type": "string"
                },
                "responseHeadersPolicyId": {
                    "type": "string"
                },
                "smoothStreaming": {
                    "type": "boolean"
                },
                "targetOriginId": {
                    "type": "string"
                },
                "trustedKeyGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "trustedSigners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "viewerProtocolPolicy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "allowedMethods",
                "cachedMethods",
                "pathPattern",
                "targetOriginId",
                "viewerProtocolPolicy"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedMethods",
                        "cachePolicyId",
                        "cachedMethods",
                        "defaultTtl",
                        "fieldLevelEncryptionId",
                        "maxTtl",
                        "originRequestPolicyId",
                        "pathPattern",
                        "realtimeLogConfigArn",
                        "responseHeadersPolicyId",
                        "smoothStreaming",
                        "targetOriginId",
                        "trustedKeyGroups",
                        "trustedSigners",
                        "viewerProtocolPolicy"
                    ]
                }
            }
        },
        "duplocloud:index/AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValues:AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValues": {
            "properties": {
                "cookies": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookies:AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookies"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "queryString": {
                    "type": "boolean"
                },
                "queryStringCacheKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "cookies",
                "queryString"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cookies",
                        "headers",
                        "queryString",
                        "queryStringCacheKeys"
                    ]
                }
            }
        },
        "duplocloud:index/AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookies:AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookies": {
            "properties": {
                "forward": {
                    "type": "string"
                },
                "whitelistedNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "forward"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "forward",
                        "whitelistedNames"
                    ]
                }
            }
        },
        "duplocloud:index/AwsCloudfrontDistributionOrderedCacheBehaviorFunctionAssociation:AwsCloudfrontDistributionOrderedCacheBehaviorFunctionAssociation": {
            "properties": {
                "eventType": {
                    "type": "string"
                },
                "functionArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "eventType",
                "functionArn"
            ]
        },
        "duplocloud:index/AwsCloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociation:AwsCloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociation": {
            "properties": {
                "eventType": {
                    "type": "string"
                },
                "includeBody": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "lambdaArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "eventType",
                "lambdaArn"
            ]
        },
        "duplocloud:index/AwsCloudfrontDistributionOrigin:AwsCloudfrontDistributionOrigin": {
            "properties": {
                "connectionAttempts": {
                    "type": "integer",
                    "description": "Defaults to `3`.\n"
                },
                "connectionTimeout": {
                    "type": "integer",
                    "description": "Defaults to `10`.\n"
                },
                "customHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOriginCustomHeader:AwsCloudfrontDistributionOriginCustomHeader"
                    }
                },
                "customOriginConfig": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOriginCustomOriginConfig:AwsCloudfrontDistributionOriginCustomOriginConfig"
                },
                "domainName": {
                    "type": "string"
                },
                "originId": {
                    "type": "string"
                },
                "originPath": {
                    "type": "string",
                    "description": "Defaults to ``.\n"
                },
                "originShield": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOriginOriginShield:AwsCloudfrontDistributionOriginOriginShield"
                },
                "s3OriginConfig": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOriginS3OriginConfig:AwsCloudfrontDistributionOriginS3OriginConfig"
                }
            },
            "type": "object",
            "required": [
                "domainName",
                "originId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "domainName",
                        "originId",
                        "s3OriginConfig"
                    ]
                }
            }
        },
        "duplocloud:index/AwsCloudfrontDistributionOriginCustomHeader:AwsCloudfrontDistributionOriginCustomHeader": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "duplocloud:index/AwsCloudfrontDistributionOriginCustomOriginConfig:AwsCloudfrontDistributionOriginCustomOriginConfig": {
            "properties": {
                "httpPort": {
                    "type": "integer",
                    "description": "Defaults to `80`.\n"
                },
                "httpsPort": {
                    "type": "integer",
                    "description": "Defaults to `443`.\n"
                },
                "originKeepaliveTimeout": {
                    "type": "integer",
                    "description": "Defaults to `5`.\n"
                },
                "originProtocolPolicy": {
                    "type": "string"
                },
                "originReadTimeout": {
                    "type": "integer",
                    "description": "Defaults to `30`.\n"
                },
                "originSslProtocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "originProtocolPolicy",
                "originSslProtocols"
            ]
        },
        "duplocloud:index/AwsCloudfrontDistributionOriginGroup:AwsCloudfrontDistributionOriginGroup": {
            "properties": {
                "failoverCriteria": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOriginGroupFailoverCriteria:AwsCloudfrontDistributionOriginGroupFailoverCriteria"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOriginGroupMember:AwsCloudfrontDistributionOriginGroupMember"
                    }
                },
                "originId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "failoverCriteria",
                "members",
                "originId"
            ]
        },
        "duplocloud:index/AwsCloudfrontDistributionOriginGroupFailoverCriteria:AwsCloudfrontDistributionOriginGroupFailoverCriteria": {
            "properties": {
                "statusCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "type": "object",
            "required": [
                "statusCodes"
            ]
        },
        "duplocloud:index/AwsCloudfrontDistributionOriginGroupMember:AwsCloudfrontDistributionOriginGroupMember": {
            "properties": {
                "originId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "originId"
            ]
        },
        "duplocloud:index/AwsCloudfrontDistributionOriginOriginShield:AwsCloudfrontDistributionOriginOriginShield": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "originShieldRegion": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "originShieldRegion"
            ]
        },
        "duplocloud:index/AwsCloudfrontDistributionOriginS3OriginConfig:AwsCloudfrontDistributionOriginS3OriginConfig": {
            "properties": {
                "originAccessIdentity": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "originAccessIdentity"
                    ]
                }
            }
        },
        "duplocloud:index/AwsCloudfrontDistributionRestrictions:AwsCloudfrontDistributionRestrictions": {
            "properties": {
                "geoRestriction": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionRestrictionsGeoRestriction:AwsCloudfrontDistributionRestrictionsGeoRestriction"
                }
            },
            "type": "object",
            "required": [
                "geoRestriction"
            ]
        },
        "duplocloud:index/AwsCloudfrontDistributionRestrictionsGeoRestriction:AwsCloudfrontDistributionRestrictionsGeoRestriction": {
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "restrictionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "restrictionType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "locations",
                        "restrictionType"
                    ]
                }
            }
        },
        "duplocloud:index/AwsCloudfrontDistributionViewerCertificate:AwsCloudfrontDistributionViewerCertificate": {
            "properties": {
                "acmCertificateArn": {
                    "type": "string"
                },
                "cloudfrontDefaultCertificate": {
                    "type": "boolean"
                },
                "iamCertificateId": {
                    "type": "string"
                },
                "minimumProtocolVersion": {
                    "type": "string",
                    "description": "Defaults to `TLSv1.2_2021`.\n"
                },
                "sslSupportMethod": {
                    "type": "string",
                    "description": "Defaults to `sni-only`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "acmCertificateArn",
                        "cloudfrontDefaultCertificate",
                        "iamCertificateId"
                    ]
                }
            }
        },
        "duplocloud:index/AwsCloudwatchEventRuleTag:AwsCloudwatchEventRuleTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AwsCloudwatchMetricAlarmDimension:AwsCloudwatchMetricAlarmDimension": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AwsDynamodbTableV2Attribute:AwsDynamodbTableV2Attribute": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the attribute\n"
                },
                "type": {
                    "type": "string",
                    "description": "Attribute type, which must be a scalar type: `S`, `N`, or `B` for (S)tring, (N)umber or (B)inary data\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "duplocloud:index/AwsDynamodbTableV2GlobalSecondaryIndex:AwsDynamodbTableV2GlobalSecondaryIndex": {
            "properties": {
                "hashKey": {
                    "type": "string",
                    "description": "The name of the hash key in the index; must be defined as an attribute in the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the index.\n"
                },
                "nonKeyAttributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.\n"
                },
                "projectionType": {
                    "type": "string",
                    "description": "One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects just the hash and range key into the index, and `INCLUDE` projects only the keys specified in the `non_key_attributes` parameter.\n"
                },
                "rangeKey": {
                    "type": "string",
                    "description": "The name of the range key; must be defined.\n"
                },
                "readCapacity": {
                    "type": "integer",
                    "description": "The number of read units for this index. Must be set if `billing_mode` is set to `PROVISIONED`.\n"
                },
                "writeCapacity": {
                    "type": "integer",
                    "description": "The number of write units for this index. Must be set if `billing_mode` is set to `PROVISIONED`.\n"
                }
            },
            "type": "object",
            "required": [
                "hashKey",
                "name",
                "projectionType"
            ]
        },
        "duplocloud:index/AwsDynamodbTableV2KeySchema:AwsDynamodbTableV2KeySchema": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "The name of the attribute\n"
                },
                "keyType": {
                    "type": "string",
                    "description": "Applicable key types are `HASH` or `RANGE`.\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "keyType"
            ]
        },
        "duplocloud:index/AwsDynamodbTableV2LocalSecondaryIndex:AwsDynamodbTableV2LocalSecondaryIndex": {
            "properties": {
                "hashKey": {
                    "type": "string",
                    "description": "The name of the hash key in the index; must be defined as an attribute in the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the index.\n",
                    "willReplaceOnChanges": true
                },
                "nonKeyAttributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.\n",
                    "willReplaceOnChanges": true
                },
                "projectionType": {
                    "type": "string",
                    "description": "One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects just the hash and range key into the index, and `INCLUDE` projects only the keys specified in the `non_key_attributes` parameter.\n",
                    "willReplaceOnChanges": true
                },
                "rangeKey": {
                    "type": "string",
                    "description": "The name of the range key; must be defined.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "hashKey",
                "name",
                "projectionType",
                "rangeKey"
            ]
        },
        "duplocloud:index/AwsDynamodbTableV2ServerSideEncryption:AwsDynamodbTableV2ServerSideEncryption": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not to enable encryption at rest using an AWS managed KMS customer master key (CMK).\n"
                },
                "kmsKeyArn": {
                    "type": "string",
                    "description": "The ARN of the CMK that should be used for the AWS KMS encryption.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "kmsKeyArn"
                    ]
                }
            }
        },
        "duplocloud:index/AwsDynamodbTableV2Tag:AwsDynamodbTableV2Tag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AwsDynamodbTableV2Ttl:AwsDynamodbTableV2Ttl": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "The name of the attribute that will be stored in the ttl timestamp\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Status of the ttl\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "enabled"
            ]
        },
        "duplocloud:index/AwsEfsFileSystemLifecyclePolicy:AwsEfsFileSystemLifecyclePolicy": {
            "properties": {
                "transitionToArchive": {
                    "type": "string",
                    "description": "Indicates how long it takes to transition files to the archive storage class. Requires transition*to*ia, Elastic Throughput and General Purpose performance mode. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`\n"
                },
                "transitionToIa": {
                    "type": "string",
                    "description": "Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`\n"
                },
                "transitionToPrimaryStorageClass": {
                    "type": "string",
                    "description": "Describes the policy used to transition a file from infequent access storage to primary storage. Valid values: `AFTER_1_ACCESS`\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/AwsEfsFileSystemMountTarget:AwsEfsFileSystemMountTarget": {
            "properties": {
                "availabilityZone": {
                    "type": "string"
                },
                "ipAddress": {
                    "type": "string"
                },
                "lifecycleState": {
                    "type": "string"
                },
                "mountTargetId": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "availabilityZone",
                        "ipAddress",
                        "lifecycleState",
                        "mountTargetId",
                        "subnetId"
                    ]
                }
            }
        },
        "duplocloud:index/AwsEfsFileSystemTag:AwsEfsFileSystemTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AwsEfsLifecyclePolicyLifecyclePolicy:AwsEfsLifecyclePolicyLifecyclePolicy": {
            "properties": {
                "transitionToArchive": {
                    "type": "string",
                    "description": "Indicates how long it takes to transition files to the archive storage class. Requires transition*to*ia, Elastic Throughput and General Purpose performance mode. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`\n"
                },
                "transitionToIa": {
                    "type": "string",
                    "description": "Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`\n"
                },
                "transitionToPrimaryStorageClass": {
                    "type": "string",
                    "description": "Describes the policy used to transition a file from infequent access storage to primary storage. Valid values: `AFTER_1_ACCESS`\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/AwsElasticsearchClusterConfig:AwsElasticsearchClusterConfig": {
            "properties": {
                "coldStorageOptions": {
                    "$ref": "#/types/duplocloud:index/AwsElasticsearchClusterConfigColdStorageOptions:AwsElasticsearchClusterConfigColdStorageOptions"
                },
                "dedicatedMasterCount": {
                    "type": "integer",
                    "description": "Defaults to `0`.\n"
                },
                "dedicatedMasterEnabled": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "dedicatedMasterType": {
                    "type": "string",
                    "description": "Defaults to `t2.small.elasticsearch`.\n"
                },
                "instanceCount": {
                    "type": "integer",
                    "description": "Defaults to `1`.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "Defaults to `t2.small.elasticsearch`.\n"
                },
                "multiAzWithStandbyEnabled": {
                    "type": "boolean"
                },
                "warmCount": {
                    "type": "integer"
                },
                "warmEnabled": {
                    "type": "boolean"
                },
                "warmType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "coldStorageOptions"
                    ]
                }
            }
        },
        "duplocloud:index/AwsElasticsearchClusterConfigColdStorageOptions:AwsElasticsearchClusterConfigColdStorageOptions": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "duplocloud:index/AwsElasticsearchEbsOption:AwsElasticsearchEbsOption": {
            "properties": {
                "ebsEnabled": {
                    "type": "boolean"
                },
                "iops": {
                    "type": "integer"
                },
                "volumeSize": {
                    "type": "integer"
                },
                "volumeType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ebsEnabled",
                        "iops",
                        "volumeSize",
                        "volumeType"
                    ]
                }
            }
        },
        "duplocloud:index/AwsElasticsearchEncryptAtRest:AwsElasticsearchEncryptAtRest": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "The ID of a KMS key to use with the ElasticSearch instance.\n",
                    "willReplaceOnChanges": true
                },
                "kmsKeyName": {
                    "type": "string",
                    "description": "The name of a KMS key to use with the ElasticSearch instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "kmsKeyId",
                        "kmsKeyName"
                    ]
                }
            }
        },
        "duplocloud:index/AwsElasticsearchSnapshotOption:AwsElasticsearchSnapshotOption": {
            "properties": {
                "automatedSnapshotStartHour": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "automatedSnapshotStartHour"
            ]
        },
        "duplocloud:index/AwsElasticsearchVpcOption:AwsElasticsearchVpcOption": {
            "properties": {
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "vpcId": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "availabilityZones",
                        "securityGroupIds",
                        "subnetIds",
                        "vpcId"
                    ]
                }
            }
        },
        "duplocloud:index/AwsHostMetadata:AwsHostMetadata": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AwsHostMinionTag:AwsHostMinionTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AwsHostNetworkInterface:AwsHostNetworkInterface": {
            "properties": {
                "associatePublicIp": {
                    "type": "boolean",
                    "description": "Whether or not to associate a public IP with the newly created ENI.  Cannot be specified if `network_interface_id` is specified.\n"
                },
                "deviceIndex": {
                    "type": "integer",
                    "description": "The device index to pass to AWS for attaching the ENI.  Starts at zero.\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsHostNetworkInterfaceMetadata:AwsHostNetworkInterfaceMetadata"
                    }
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The ID of an ENI to attach to this host.  Cannot be specified if `subnet_id` or `associate_public_ip` is specified.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of a subnet in which to create a new ENI.  Cannot be specified if `network_interface_id` is specified.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "associatePublicIp",
                        "deviceIndex",
                        "groups",
                        "metadatas",
                        "networkInterfaceId",
                        "subnetId"
                    ]
                }
            }
        },
        "duplocloud:index/AwsHostNetworkInterfaceMetadata:AwsHostNetworkInterfaceMetadata": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AwsHostTag:AwsHostTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AwsHostTaint:AwsHostTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Update strategy of the node. Effect types \u003cbr\u003e      - NoSchedule\u003cbr\u003e     - PreferNoSchedule\u003cbr\u003e     - NoExecute\n",
                    "willReplaceOnChanges": true
                },
                "key": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key"
            ]
        },
        "duplocloud:index/AwsHostVolume:AwsHostVolume": {
            "properties": {
                "iops": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "volumeId": {
                    "type": "string"
                },
                "volumeType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iops",
                        "name",
                        "size",
                        "volumeId",
                        "volumeType"
                    ]
                }
            }
        },
        "duplocloud:index/AwsLambdaFunctionDeadLetterConfig:AwsLambdaFunctionDeadLetterConfig": {
            "properties": {
                "targetArn": {
                    "type": "string",
                    "description": "ARN of an SNS topic or SQS queue to notify when an invocation fails.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/AwsLambdaFunctionEnvironment:AwsLambdaFunctionEnvironment": {
            "properties": {
                "variables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of environment variables that are accessible from the function code during execution.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/AwsLambdaFunctionEventConfigDestinationConfig:AwsLambdaFunctionEventConfigDestinationConfig": {
            "properties": {
                "onFailure": {
                    "$ref": "#/types/duplocloud:index/AwsLambdaFunctionEventConfigDestinationConfigOnFailure:AwsLambdaFunctionEventConfigDestinationConfigOnFailure",
                    "description": "Configured destination for failed asynchronous invocations\n"
                },
                "onSuccess": {
                    "$ref": "#/types/duplocloud:index/AwsLambdaFunctionEventConfigDestinationConfigOnSuccess:AwsLambdaFunctionEventConfigDestinationConfigOnSuccess",
                    "description": "Configured destination for successful asynchronous invocations\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/AwsLambdaFunctionEventConfigDestinationConfigOnFailure:AwsLambdaFunctionEventConfigDestinationConfigOnFailure": {
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "The AWS ARN of the destination resource\n"
                }
            },
            "type": "object",
            "required": [
                "destination"
            ]
        },
        "duplocloud:index/AwsLambdaFunctionEventConfigDestinationConfigOnSuccess:AwsLambdaFunctionEventConfigDestinationConfigOnSuccess": {
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "The AWS ARN of the destination resource\n"
                }
            },
            "type": "object",
            "required": [
                "destination"
            ]
        },
        "duplocloud:index/AwsLambdaFunctionImageConfig:AwsLambdaFunctionImageConfig": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The command that is passed to the container.\n"
                },
                "entryPoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The entry point that is passed to the container.\n"
                },
                "workingDirectory": {
                    "type": "string",
                    "description": "The working directory that is passed to the container.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/AwsLambdaFunctionTracingConfig:AwsLambdaFunctionTracingConfig": {
            "properties": {
                "mode": {
                    "type": "string",
                    "description": "Whether to sample and trace a subset of incoming requests with AWS X-Ray. Valid values are `PassThrough` and `Active`.\n"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "duplocloud:index/AwsLbListenerRuleAction:AwsLbListenerRuleAction": {
            "properties": {
                "authenticateCognito": {
                    "$ref": "#/types/duplocloud:index/AwsLbListenerRuleActionAuthenticateCognito:AwsLbListenerRuleActionAuthenticateCognito",
                    "description": "Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.\n"
                },
                "authenticateOidc": {
                    "$ref": "#/types/duplocloud:index/AwsLbListenerRuleActionAuthenticateOidc:AwsLbListenerRuleActionAuthenticateOidc",
                    "description": "Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.\n"
                },
                "fixedResponse": {
                    "$ref": "#/types/duplocloud:index/AwsLbListenerRuleActionFixedResponse:AwsLbListenerRuleActionFixedResponse",
                    "description": "Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.\n"
                },
                "forward": {
                    "$ref": "#/types/duplocloud:index/AwsLbListenerRuleActionForward:AwsLbListenerRuleActionForward",
                    "description": "Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group.\n"
                },
                "order": {
                    "type": "integer"
                },
                "redirect": {
                    "$ref": "#/types/duplocloud:index/AwsLbListenerRuleActionRedirect:AwsLbListenerRuleActionRedirect",
                    "description": "Information for creating a redirect action. Required if `type` is `redirect`.\n"
                },
                "targetGroupArn": {
                    "type": "string",
                    "description": "The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of routing action. Valid values are `redirect`, `forward`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authenticateCognito",
                        "authenticateOidc",
                        "fixedResponse",
                        "forward",
                        "order",
                        "redirect",
                        "targetGroupArn",
                        "type"
                    ]
                }
            }
        },
        "duplocloud:index/AwsLbListenerRuleActionAuthenticateCognito:AwsLbListenerRuleActionAuthenticateCognito": {
            "properties": {
                "authenticationRequestExtraParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The query parameters to include in the redirect request to the authorization endpoint.\n"
                },
                "onUnauthenticatedRequest": {
                    "type": "string",
                    "description": "The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The set of user claims to be requested from the IdP. Defaults to `openid`.\n"
                },
                "sessionCookieName": {
                    "type": "string",
                    "description": "The name of the cookie used to maintain session information. Defaults to `AWSELBAuthSessionCookie`.\n"
                },
                "sessionTimeout": {
                    "type": "integer",
                    "description": "The maximum duration of the authentication session, in seconds. Defaults to `604800`.\n"
                },
                "userPoolArn": {
                    "type": "string",
                    "description": "The ARN of the Cognito user pool.\n"
                },
                "userPoolClientId": {
                    "type": "string",
                    "description": "The ID of the Cognito user pool client.\n"
                },
                "userPoolDomain": {
                    "type": "string",
                    "description": "The domain prefix or fully-qualified domain name of the Cognito user pool.\n"
                }
            },
            "type": "object",
            "required": [
                "userPoolArn",
                "userPoolClientId",
                "userPoolDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authenticationRequestExtraParams",
                        "onUnauthenticatedRequest",
                        "userPoolArn",
                        "userPoolClientId",
                        "userPoolDomain"
                    ]
                }
            }
        },
        "duplocloud:index/AwsLbListenerRuleActionAuthenticateOidc:AwsLbListenerRuleActionAuthenticateOidc": {
            "properties": {
                "authenticationRequestExtraParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The query parameters to include in the redirect request to the authorization endpoint. Max: 10\n"
                },
                "authorizationEndpoint": {
                    "type": "string",
                    "description": "The authorization endpoint of the IdP.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The OAuth 2.0 client identifier.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The OAuth 2.0 client secret.\n",
                    "secret": true
                },
                "issuer": {
                    "type": "string",
                    "description": "The OIDC issuer identifier of the IdP.\n"
                },
                "onUnauthenticatedRequest": {
                    "type": "string",
                    "description": "The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The set of user claims to be requested from the IdP. Defaults to `openid`.\n"
                },
                "sessionCookieName": {
                    "type": "string",
                    "description": "The name of the cookie used to maintain session information. Defaults to `AWSELBAuthSessionCookie`.\n"
                },
                "sessionTimeout": {
                    "type": "integer",
                    "description": "The maximum duration of the authentication session, in seconds. Defaults to `604800`.\n"
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "The token endpoint of the IdP.\n"
                },
                "userInfoEndpoint": {
                    "type": "string",
                    "description": "The user info endpoint of the IdP.\n"
                }
            },
            "type": "object",
            "required": [
                "authorizationEndpoint",
                "clientId",
                "clientSecret",
                "issuer",
                "tokenEndpoint",
                "userInfoEndpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authenticationRequestExtraParams",
                        "authorizationEndpoint",
                        "clientId",
                        "clientSecret",
                        "issuer",
                        "onUnauthenticatedRequest",
                        "tokenEndpoint",
                        "userInfoEndpoint"
                    ]
                }
            }
        },
        "duplocloud:index/AwsLbListenerRuleActionFixedResponse:AwsLbListenerRuleActionFixedResponse": {
            "properties": {
                "contentType": {
                    "type": "string",
                    "description": "The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`\n"
                },
                "messageBody": {
                    "type": "string",
                    "description": "The message body.\n"
                },
                "statusCode": {
                    "type": "string",
                    "description": "The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.\n"
                }
            },
            "type": "object",
            "required": [
                "contentType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "contentType",
                        "messageBody",
                        "statusCode"
                    ]
                }
            }
        },
        "duplocloud:index/AwsLbListenerRuleActionForward:AwsLbListenerRuleActionForward": {
            "properties": {
                "stickiness": {
                    "$ref": "#/types/duplocloud:index/AwsLbListenerRuleActionForwardStickiness:AwsLbListenerRuleActionForwardStickiness"
                },
                "targetGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsLbListenerRuleActionForwardTargetGroup:AwsLbListenerRuleActionForwardTargetGroup"
                    }
                }
            },
            "type": "object",
            "required": [
                "targetGroups"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "stickiness",
                        "targetGroups"
                    ]
                }
            }
        },
        "duplocloud:index/AwsLbListenerRuleActionForwardStickiness:AwsLbListenerRuleActionForwardStickiness": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "The time period, in seconds, during which requests from a client should be routed to the same target group.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether target group stickiness is enabled. Defaults to `false`.\n"
                }
            },
            "type": "object",
            "required": [
                "duration"
            ]
        },
        "duplocloud:index/AwsLbListenerRuleActionForwardTargetGroup:AwsLbListenerRuleActionForwardTargetGroup": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the target group.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight. The range is 0 to 999. Defaults to `1`.\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "duplocloud:index/AwsLbListenerRuleActionRedirect:AwsLbListenerRuleActionRedirect": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The absolute path, starting with the leading \"/\". Defaults to `/#{path}`.\n"
                },
                "port": {
                    "type": "string",
                    "description": "The port. Specify a value from `1` to `65535`. Defaults to `#{port}`.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.\n"
                },
                "query": {
                    "type": "string",
                    "description": "The query parameters, URL-encoded when necessary. Defaults to `#{query}`.\n"
                },
                "statusCode": {
                    "type": "string",
                    "description": "The HTTP redirect code. The redirect is either permanent or temporary\n"
                }
            },
            "type": "object",
            "required": [
                "statusCode"
            ]
        },
        "duplocloud:index/AwsLbListenerRuleCondition:AwsLbListenerRuleCondition": {
            "properties": {
                "hostHeader": {
                    "$ref": "#/types/duplocloud:index/AwsLbListenerRuleConditionHostHeader:AwsLbListenerRuleConditionHostHeader"
                },
                "httpHeader": {
                    "$ref": "#/types/duplocloud:index/AwsLbListenerRuleConditionHttpHeader:AwsLbListenerRuleConditionHttpHeader",
                    "description": "HTTP headers to match.\n"
                },
                "httpRequestMethod": {
                    "$ref": "#/types/duplocloud:index/AwsLbListenerRuleConditionHttpRequestMethod:AwsLbListenerRuleConditionHttpRequestMethod",
                    "description": "Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters.\n"
                },
                "pathPattern": {
                    "$ref": "#/types/duplocloud:index/AwsLbListenerRuleConditionPathPattern:AwsLbListenerRuleConditionPathPattern",
                    "description": "Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters.\n"
                },
                "queryStrings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsLbListenerRuleConditionQueryString:AwsLbListenerRuleConditionQueryString"
                    },
                    "description": "Query strings to match.\n"
                },
                "sourceIp": {
                    "$ref": "#/types/duplocloud:index/AwsLbListenerRuleConditionSourceIp:AwsLbListenerRuleConditionSourceIp",
                    "description": "Contains a single `values` item which is a list of source IP CIDR notations to match.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostHeader",
                        "httpHeader",
                        "httpRequestMethod",
                        "pathPattern",
                        "queryStrings",
                        "sourceIp"
                    ]
                }
            }
        },
        "duplocloud:index/AwsLbListenerRuleConditionHostHeader:AwsLbListenerRuleConditionHostHeader": {
            "properties": {
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters.\n"
                }
            },
            "type": "object",
            "required": [
                "values"
            ]
        },
        "duplocloud:index/AwsLbListenerRuleConditionHttpHeader:AwsLbListenerRuleConditionHttpHeader": {
            "properties": {
                "httpHeaderName": {
                    "type": "string",
                    "description": "Name of HTTP header to search. The maximum size is 40 characters.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of header value patterns to match. Maximum size of each pattern is 128 characters.\n"
                }
            },
            "type": "object",
            "required": [
                "httpHeaderName",
                "values"
            ]
        },
        "duplocloud:index/AwsLbListenerRuleConditionHttpRequestMethod:AwsLbListenerRuleConditionHttpRequestMethod": {
            "properties": {
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "values"
            ]
        },
        "duplocloud:index/AwsLbListenerRuleConditionPathPattern:AwsLbListenerRuleConditionPathPattern": {
            "properties": {
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "values"
            ]
        },
        "duplocloud:index/AwsLbListenerRuleConditionQueryString:AwsLbListenerRuleConditionQueryString": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Query string key pattern to match.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Query string value pattern to match.\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "value"
                    ]
                }
            }
        },
        "duplocloud:index/AwsLbListenerRuleConditionSourceIp:AwsLbListenerRuleConditionSourceIp": {
            "properties": {
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "values"
            ]
        },
        "duplocloud:index/AwsLbListenerRuleTag:AwsLbListenerRuleTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AwsLbTargetGroupHealthCheck:AwsLbTargetGroupHealthCheck": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether health checks are enabled. Defaults to `true`.\n"
                },
                "healthyThreshold": {
                    "type": "integer",
                    "description": "Number of consecutive health checks successes required before considering an unhealthy target healthy. Defaults to `3`.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds. For lambda target groups, it needs to be greater as the `timeout` of the underlying `lambda`. Defaults to `30`.\n"
                },
                "matcher": {
                    "type": "string",
                    "description": "Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, \"200,202\" for HTTP(s) or \"0,12\" for GRPC) or a range of values (for example, \"200-299\" or \"0-99\"). Required for HTTP/HTTPS/GRPC ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS/GRPC) not Network Load Balancers (i.e., TCP).\n"
                },
                "path": {
                    "type": "string",
                    "description": "Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Port to use to connect with the target. Valid values are either ports 1-65535, or traffic-port. Defaults to `traffic-port`.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol to use to connect with the target. Defaults to HTTP. Not applicable when target_type is lambda Defaults to `HTTP`.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, during which no response means a failed health check.\n"
                },
                "unhealthyThreshold": {
                    "type": "integer",
                    "description": "Number of consecutive health check failures required before considering the target unhealthy. Defaults to `3`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "matcher",
                        "path",
                        "timeout"
                    ]
                }
            }
        },
        "duplocloud:index/AwsLoadBalancerListenerCertificate:AwsLoadBalancerListenerCertificate": {
            "properties": {
                "arn": {
                    "type": "string"
                },
                "isDefault": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arn",
                        "isDefault"
                    ]
                }
            }
        },
        "duplocloud:index/AwsLoadBalancerListenerDefaultAction:AwsLoadBalancerListenerDefaultAction": {
            "properties": {
                "order": {
                    "type": "integer"
                },
                "targetGroupArn": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "order",
                        "targetGroupArn",
                        "type"
                    ]
                }
            }
        },
        "duplocloud:index/AwsLoadBalancerTag:AwsLoadBalancerTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AwsMwaaEnvironmentLastUpdated:AwsMwaaEnvironmentLastUpdated": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsMwaaEnvironmentLastUpdatedError:AwsMwaaEnvironmentLastUpdatedError"
                    }
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdAt",
                        "errors",
                        "status"
                    ]
                }
            }
        },
        "duplocloud:index/AwsMwaaEnvironmentLastUpdatedError:AwsMwaaEnvironmentLastUpdatedError": {
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "errorCode",
                        "errorMessage"
                    ]
                }
            }
        },
        "duplocloud:index/AwsMwaaEnvironmentLoggingConfiguration:AwsMwaaEnvironmentLoggingConfiguration": {
            "properties": {
                "dagProcessingLogs": {
                    "$ref": "#/types/duplocloud:index/AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogs:AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogs"
                },
                "schedulerLogs": {
                    "$ref": "#/types/duplocloud:index/AwsMwaaEnvironmentLoggingConfigurationSchedulerLogs:AwsMwaaEnvironmentLoggingConfigurationSchedulerLogs"
                },
                "taskLogs": {
                    "$ref": "#/types/duplocloud:index/AwsMwaaEnvironmentLoggingConfigurationTaskLogs:AwsMwaaEnvironmentLoggingConfigurationTaskLogs"
                },
                "webserverLogs": {
                    "$ref": "#/types/duplocloud:index/AwsMwaaEnvironmentLoggingConfigurationWebserverLogs:AwsMwaaEnvironmentLoggingConfigurationWebserverLogs"
                },
                "workerLogs": {
                    "$ref": "#/types/duplocloud:index/AwsMwaaEnvironmentLoggingConfigurationWorkerLogs:AwsMwaaEnvironmentLoggingConfigurationWorkerLogs"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dagProcessingLogs",
                        "schedulerLogs",
                        "taskLogs",
                        "webserverLogs",
                        "workerLogs"
                    ]
                }
            }
        },
        "duplocloud:index/AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogs:AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogs": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logLevel": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "logLevel"
                    ]
                }
            }
        },
        "duplocloud:index/AwsMwaaEnvironmentLoggingConfigurationSchedulerLogs:AwsMwaaEnvironmentLoggingConfigurationSchedulerLogs": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logLevel": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "logLevel"
                    ]
                }
            }
        },
        "duplocloud:index/AwsMwaaEnvironmentLoggingConfigurationTaskLogs:AwsMwaaEnvironmentLoggingConfigurationTaskLogs": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logLevel": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "logLevel"
                    ]
                }
            }
        },
        "duplocloud:index/AwsMwaaEnvironmentLoggingConfigurationWebserverLogs:AwsMwaaEnvironmentLoggingConfigurationWebserverLogs": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logLevel": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "logLevel"
                    ]
                }
            }
        },
        "duplocloud:index/AwsMwaaEnvironmentLoggingConfigurationWorkerLogs:AwsMwaaEnvironmentLoggingConfigurationWorkerLogs": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logLevel": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "logLevel"
                    ]
                }
            }
        },
        "duplocloud:index/AwsSqsQueueDeadLetterQueueConfiguration:AwsSqsQueueDeadLetterQueueConfiguration": {
            "properties": {
                "maxMessageReceiveAttempts": {
                    "type": "integer",
                    "description": "Maximum number of processing attempts for a given message before it is moved to the dead letter queue\n"
                },
                "targetSqsDlqName": {
                    "type": "string",
                    "description": "Name of the SQS queue meant to be the target dead letter queue for this SQS resource (queues must belong to same tenant)\n"
                }
            },
            "type": "object",
            "required": [
                "maxMessageReceiveAttempts",
                "targetSqsDlqName"
            ]
        },
        "duplocloud:index/AwsTargetGroupAttributesAttribute:AwsTargetGroupAttributesAttribute": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "value"
                    ]
                }
            }
        },
        "duplocloud:index/AwsTimestreamwriteDatabaseAllTag:AwsTimestreamwriteDatabaseAllTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AwsTimestreamwriteDatabaseTag:AwsTimestreamwriteDatabaseTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AwsTimestreamwriteTableAllTag:AwsTimestreamwriteTableAllTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AwsTimestreamwriteTableMagneticStoreWriteProperties:AwsTimestreamwriteTableMagneticStoreWriteProperties": {
            "properties": {
                "enableMagneticStoreWrites": {
                    "type": "boolean",
                    "description": "A flag to enable magnetic store writes. Defaults to `false`.\n"
                },
                "magneticStoreRejectedDataLocation": {
                    "$ref": "#/types/duplocloud:index/AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation:AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation",
                    "description": "The location to write error reports for records rejected asynchronously during magnetic store writes.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "magneticStoreRejectedDataLocation"
                    ]
                }
            }
        },
        "duplocloud:index/AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation:AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation": {
            "properties": {
                "s3Configuration": {
                    "$ref": "#/types/duplocloud:index/AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration:AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration",
                    "description": "Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "s3Configuration"
                    ]
                }
            }
        },
        "duplocloud:index/AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration:AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "Bucket name of the customer S3 bucket.\n"
                },
                "encryptionOption": {
                    "type": "string",
                    "description": "Encryption option for the customer s3 location. Options are S3 server side encryption with an S3-managed key or KMS managed key. Valid values are `SSE_KMS` and `SSE_S3`.\n"
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "KMS key arn for the customer s3 location when encrypting with a KMS managed key.\n"
                },
                "objectKeyPrefix": {
                    "type": "string",
                    "description": "Object key prefix for the customer S3 location.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bucketName",
                        "encryptionOption",
                        "kmsKeyId",
                        "objectKeyPrefix"
                    ]
                }
            }
        },
        "duplocloud:index/AwsTimestreamwriteTableRetentionProperties:AwsTimestreamwriteTableRetentionProperties": {
            "properties": {
                "magneticStoreRetentionPeriodInDays": {
                    "type": "integer",
                    "description": "The duration for which data must be stored in the magnetic store. Minimum value of 1. Maximum value of 73000.\n"
                },
                "memoryStoreRetentionPeriodInHours": {
                    "type": "integer",
                    "description": "The duration for which data must be stored in the memory store. Minimum value of 1. Maximum value of 8766.\n"
                }
            },
            "type": "object",
            "required": [
                "magneticStoreRetentionPeriodInDays",
                "memoryStoreRetentionPeriodInHours"
            ]
        },
        "duplocloud:index/AwsTimestreamwriteTableTag:AwsTimestreamwriteTableTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AzureAvailabilitySetVirtualMachine:AzureAvailabilitySetVirtualMachine": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "duplocloud:index/AzureK8NodePoolNodeLabel:AzureK8NodePoolNodeLabel": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AzureK8NodePoolScalePriority:AzureK8NodePoolScalePriority": {
            "properties": {
                "evictionPolicy": {
                    "type": "string",
                    "description": "eviction policies Delete/Deallocate. Default value is Delete\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "string",
                    "description": "priority levels Regular/Spot\n",
                    "willReplaceOnChanges": true
                },
                "spotMaxPrice": {
                    "type": "number",
                    "description": "for spot VMs sets the maximum price you're willing to pay, controlling costs, while priority.spot determines the scaling order of spot VM pools.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "evictionPolicy",
                        "priority",
                        "spotMaxPrice"
                    ]
                }
            }
        },
        "duplocloud:index/AzureMssqlDatabaseSku:AzureMssqlDatabaseSku": {
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "tier": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "capacity",
                        "name",
                        "tier"
                    ]
                }
            }
        },
        "duplocloud:index/AzureMssqlElasticpoolSku:AzureMssqlElasticpoolSku": {
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "tier": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "capacity",
                        "name",
                        "tier"
                    ]
                }
            }
        },
        "duplocloud:index/AzurePrivateEndpointPrivateLinkServiceConnection:AzurePrivateEndpointPrivateLinkServiceConnection": {
            "properties": {
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the Name of the Private Service Connection.\n",
                    "willReplaceOnChanges": true
                },
                "privateConnectionResourceId": {
                    "type": "string",
                    "description": "The ID of the Private Link Enabled Remote Resource which this Private Endpoint should be connected to.\n"
                }
            },
            "type": "object",
            "required": [
                "groupIds",
                "name",
                "privateConnectionResourceId"
            ]
        },
        "duplocloud:index/AzureVaultBackupPolicyBackup:AzureVaultBackupPolicyBackup": {
            "properties": {
                "frequency": {
                    "type": "string"
                },
                "hourDuration": {
                    "type": "integer"
                },
                "hourInterval": {
                    "type": "integer"
                },
                "time": {
                    "type": "string"
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "frequency",
                "time"
            ]
        },
        "duplocloud:index/AzureVaultBackupPolicyRetentionDaily:AzureVaultBackupPolicyRetentionDaily": {
            "properties": {
                "count": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "count"
            ]
        },
        "duplocloud:index/AzureVaultBackupPolicyRetentionMonthly:AzureVaultBackupPolicyRetentionMonthly": {
            "properties": {
                "count": {
                    "type": "integer"
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "weeks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "count",
                "weekdays",
                "weeks"
            ]
        },
        "duplocloud:index/AzureVaultBackupPolicyRetentionWeekly:AzureVaultBackupPolicyRetentionWeekly": {
            "properties": {
                "count": {
                    "type": "integer"
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "count",
                "weekdays"
            ]
        },
        "duplocloud:index/AzureVaultBackupPolicyRetentionYearly:AzureVaultBackupPolicyRetentionYearly": {
            "properties": {
                "count": {
                    "type": "integer"
                },
                "months": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "weeks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "count",
                "months",
                "weekdays",
                "weeks"
            ]
        },
        "duplocloud:index/AzureVirtualMachineMinionTag:AzureVirtualMachineMinionTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AzureVirtualMachineScaleSetBootDiagnostics:AzureVirtualMachineScaleSetBootDiagnostics": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable boot diagnostics for the virtual machine. Defaults to `true`.\n"
                },
                "storageUri": {
                    "type": "string",
                    "description": "Blob endpoint for the storage account to hold the virtual machine's diagnostic files.\n"
                }
            },
            "type": "object",
            "required": [
                "storageUri"
            ]
        },
        "duplocloud:index/AzureVirtualMachineScaleSetExtension:AzureVirtualMachineScaleSetExtension": {
            "properties": {
                "autoUpgradeMinorVersion": {
                    "type": "boolean",
                    "description": "Specifies whether or not to use the latest minor version available.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the extension.\n"
                },
                "protectedSettings": {
                    "type": "string",
                    "description": "The protected_settings passed to the extension, like settings, these are specified as a JSON object in a string.\n",
                    "secret": true
                },
                "provisionAfterExtensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a dependency array of extensions required to be executed before, the array stores the name of each extension.\n"
                },
                "publisher": {
                    "type": "string",
                    "description": "The publisher of the extension, available publishers can be found by using the Azure CLI..\n"
                },
                "settings": {
                    "type": "string",
                    "description": "The settings passed to the extension, these are specified as a JSON object in a string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of extension, available types for a publisher can be found using the Azure CLI.\n"
                },
                "typeHandlerVersion": {
                    "type": "string",
                    "description": "Specifies the version of the extension to use, available versions can be found using the Azure CLI.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "publisher",
                "type",
                "typeHandlerVersion"
            ]
        },
        "duplocloud:index/AzureVirtualMachineScaleSetIdentity:AzureVirtualMachineScaleSetIdentity": {
            "properties": {
                "identityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of user managed identity ids to be assigned to the VMSS. Required if `type` is `UserAssigned`.\n"
                },
                "principalId": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the identity type to be assigned to the scale set. Allowable values are `SystemAssigned` and `UserAssigned`.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "principalId",
                        "type"
                    ]
                }
            }
        },
        "duplocloud:index/AzureVirtualMachineScaleSetNetworkProfile:AzureVirtualMachineScaleSetNetworkProfile": {
            "properties": {
                "acceleratedNetworking": {
                    "type": "boolean",
                    "description": "Specifies whether to enable accelerated networking or not. Defaults to `false`.\n"
                },
                "dnsSettings": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetNetworkProfileDnsSettings:AzureVirtualMachineScaleSetNetworkProfileDnsSettings"
                },
                "ipConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetNetworkProfileIpConfiguration:AzureVirtualMachineScaleSetNetworkProfileIpConfiguration"
                    }
                },
                "ipForwarding": {
                    "type": "boolean",
                    "description": "Whether IP forwarding is enabled on this NIC. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the network interface configuration.\n"
                },
                "networkSecurityGroupId": {
                    "type": "string",
                    "description": "Specifies the identifier for the network security group.\n"
                },
                "primary": {
                    "type": "boolean",
                    "description": "Indicates whether network interfaces created from the network interface configuration will be the primary NIC of the VM.\n"
                }
            },
            "type": "object",
            "required": [
                "ipConfigurations",
                "name",
                "primary"
            ]
        },
        "duplocloud:index/AzureVirtualMachineScaleSetNetworkProfileDnsSettings:AzureVirtualMachineScaleSetNetworkProfileDnsSettings": {
            "properties": {
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies an array of dns servers.\n"
                }
            },
            "type": "object",
            "required": [
                "dnsServers"
            ]
        },
        "duplocloud:index/AzureVirtualMachineScaleSetNetworkProfileIpConfiguration:AzureVirtualMachineScaleSetNetworkProfileIpConfiguration": {
            "properties": {
                "applicationGatewayBackendAddressPoolIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies an array of references to backend address pools of application gateways.\n"
                },
                "applicationSecurityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies up to 20 application security group IDs.\n"
                },
                "loadBalancerBackendAddressPoolIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies an array of references to backend address pools of load balancers.\n"
                },
                "loadBalancerInboundNatRulesIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies an array of references to inbound NAT pools for load balancers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies name of the IP configuration.\n"
                },
                "primary": {
                    "type": "boolean",
                    "description": "Specifies if this ip_configuration is the primary one.\n"
                },
                "publicIpAddressConfiguration": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfiguration:AzureVirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfiguration",
                    "description": "Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Specifies the identifier of the subnet.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "loadBalancerInboundNatRulesIds",
                        "name",
                        "subnetId"
                    ]
                }
            }
        },
        "duplocloud:index/AzureVirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfiguration:AzureVirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfiguration": {
            "properties": {
                "domainNameLabel": {
                    "type": "string",
                    "description": "The domain name label for the dns settings.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "The idle timeout in minutes. This value must be between 4 and 30.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the public ip address configuration.\n"
                }
            },
            "type": "object",
            "required": [
                "domainNameLabel",
                "idleTimeout",
                "name"
            ]
        },
        "duplocloud:index/AzureVirtualMachineScaleSetOsProfile:AzureVirtualMachineScaleSetOsProfile": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "description": "Specifies the administrator password to use for all the instances of virtual machines in a scale set.\n",
                    "secret": true
                },
                "adminUsername": {
                    "type": "string",
                    "description": "Specifies the administrator account name to use for all the instances of virtual machines in the scale set.\n"
                },
                "computerNamePrefix": {
                    "type": "string",
                    "description": "Specifies the computer name prefix for all of the virtual machines in the scale set.\n",
                    "willReplaceOnChanges": true
                },
                "customData": {
                    "type": "string",
                    "description": "Specifies custom data to supply to the machine. On linux-based systems, this can be used as a cloud-init script. On other systems, this will be copied as a file on disk.\n"
                }
            },
            "type": "object",
            "required": [
                "adminUsername",
                "computerNamePrefix"
            ]
        },
        "duplocloud:index/AzureVirtualMachineScaleSetOsProfileLinuxConfig:AzureVirtualMachineScaleSetOsProfileLinuxConfig": {
            "properties": {
                "disablePasswordAuthentication": {
                    "type": "boolean",
                    "description": "Specifies whether password authentication should be disabled. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfileLinuxConfigSshKey:AzureVirtualMachineScaleSetOsProfileLinuxConfigSshKey"
                    },
                    "description": "Specifies a collection of `path` and `key_data` to be placed on the virtual machine.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/AzureVirtualMachineScaleSetOsProfileLinuxConfigSshKey:AzureVirtualMachineScaleSetOsProfileLinuxConfigSshKey": {
            "properties": {
                "keyData": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "duplocloud:index/AzureVirtualMachineScaleSetOsProfileSecret:AzureVirtualMachineScaleSetOsProfileSecret": {
            "properties": {
                "sourceVaultId": {
                    "type": "string",
                    "description": "Specifies the key vault to use.\n"
                },
                "vaultCertificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfileSecretVaultCertificate:AzureVirtualMachineScaleSetOsProfileSecretVaultCertificate"
                    },
                    "description": "A collection of Vault Certificates as documented below.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceVaultId"
            ]
        },
        "duplocloud:index/AzureVirtualMachineScaleSetOsProfileSecretVaultCertificate:AzureVirtualMachineScaleSetOsProfileSecretVaultCertificate": {
            "properties": {
                "certificateStore": {
                    "type": "string",
                    "description": "Specifies the certificate store on the Virtual Machine where the certificate should be added to.\n"
                },
                "certificateUrl": {
                    "type": "string",
                    "description": "It is the Base64 encoding of a JSON Object that which is encoded in UTF-8 of which the contents need to be `data`, `dataType` and `password`.\n"
                }
            },
            "type": "object",
            "required": [
                "certificateUrl"
            ]
        },
        "duplocloud:index/AzureVirtualMachineScaleSetOsProfileWindowsConfig:AzureVirtualMachineScaleSetOsProfileWindowsConfig": {
            "properties": {
                "additionalUnattendConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfig:AzureVirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfig"
                    }
                },
                "enableAutomaticUpgrades": {
                    "type": "boolean",
                    "description": "Indicates whether virtual machines in the scale set are enabled for automatic updates.\n"
                },
                "provisionVmAgent": {
                    "type": "boolean",
                    "description": "Indicates whether virtual machine agent should be provisioned on the virtual machines in the scale set.\n"
                },
                "winrms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfileWindowsConfigWinrm:AzureVirtualMachineScaleSetOsProfileWindowsConfigWinrm"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableAutomaticUpgrades",
                        "provisionVmAgent"
                    ]
                }
            }
        },
        "duplocloud:index/AzureVirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfig:AzureVirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfig": {
            "properties": {
                "component": {
                    "type": "string",
                    "description": "Specifies the name of the component to configure with the added content. The only allowable value is `Microsoft-Windows-Shell-Setup`.\n"
                },
                "content": {
                    "type": "string",
                    "description": "Specifies the base-64 encoded XML formatted content that is added to the unattend.xml file for the specified path and component.\n",
                    "secret": true
                },
                "pass": {
                    "type": "string",
                    "description": "Specifies the name of the pass that the content applies to. The only allowable value is `oobeSystem`.\n"
                },
                "settingName": {
                    "type": "string",
                    "description": "Specifies the name of the setting to which the content applies. Possible values are: `FirstLogonCommands` and `AutoLogon`.\n"
                }
            },
            "type": "object",
            "required": [
                "component",
                "content",
                "pass",
                "settingName"
            ]
        },
        "duplocloud:index/AzureVirtualMachineScaleSetOsProfileWindowsConfigWinrm:AzureVirtualMachineScaleSetOsProfileWindowsConfigWinrm": {
            "properties": {
                "certificateUrl": {
                    "type": "string",
                    "description": "Specifies URL of the certificate with which new Virtual Machines is provisioned.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Specifies the protocol of listener.\n"
                }
            },
            "type": "object",
            "required": [
                "protocol"
            ]
        },
        "duplocloud:index/AzureVirtualMachineScaleSetPlan:AzureVirtualMachineScaleSetPlan": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the image from the marketplace.\n"
                },
                "product": {
                    "type": "string",
                    "description": "Specifies the product of the image from the marketplace.\n"
                },
                "publisher": {
                    "type": "string",
                    "description": "Specifies the publisher of the image.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "product",
                "publisher"
            ]
        },
        "duplocloud:index/AzureVirtualMachineScaleSetRollingUpgradePolicy:AzureVirtualMachineScaleSetRollingUpgradePolicy": {
            "properties": {
                "maxBatchInstancePercent": {
                    "type": "integer",
                    "description": "The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade. Defaults to `20`.\n"
                },
                "maxUnhealthyInstancePercent": {
                    "type": "integer",
                    "description": "The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy. Defaults to `20`.\n"
                },
                "maxUnhealthyUpgradedInstancePercent": {
                    "type": "integer",
                    "description": "The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. Defaults to `20`.\n"
                },
                "pauseTimeBetweenBatches": {
                    "type": "string",
                    "description": "The wait time between completing the update for all virtual machines in one batch and starting the next batch. Defaults to `PT0S`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/AzureVirtualMachineScaleSetSku:AzureVirtualMachineScaleSetSku": {
            "properties": {
                "capacity": {
                    "type": "integer",
                    "description": "Specifies the number of virtual machines in the scale set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the size of virtual machines in a scale set.\n"
                },
                "tier": {
                    "type": "string",
                    "description": "Specifies the tier of virtual machines in a scale set. Possible values, `standard` or `basic`.\n"
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "capacity",
                        "name",
                        "tier"
                    ]
                }
            }
        },
        "duplocloud:index/AzureVirtualMachineScaleSetStorageProfileDataDisk:AzureVirtualMachineScaleSetStorageProfileDataDisk": {
            "properties": {
                "caching": {
                    "type": "string",
                    "description": "Specifies the caching requirements. Possible values include: `None` (default), `ReadOnly`, `ReadWrite`.\n"
                },
                "createOption": {
                    "type": "string",
                    "description": "Specifies how the data disk should be created. The only possible options are `FromImage` and `Empty`.\n"
                },
                "diskSizeGb": {
                    "type": "integer",
                    "description": "Specifies the size of the disk in GB. This element is required when creating an empty disk. Defaults to `128`.\n"
                },
                "lun": {
                    "type": "integer",
                    "description": "Specifies the Logical Unit Number of the disk in each virtual machine in the scale set.\n"
                },
                "managedDiskType": {
                    "type": "string",
                    "description": "Specifies the type of managed disk to create. Value must be either `Standard_LRS`, `StandardSSD_LRS` or `Premium_LRS`.\n"
                }
            },
            "type": "object",
            "required": [
                "createOption",
                "lun"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "caching",
                        "createOption",
                        "lun",
                        "managedDiskType"
                    ]
                }
            }
        },
        "duplocloud:index/AzureVirtualMachineScaleSetStorageProfileImageReference:AzureVirtualMachineScaleSetStorageProfileImageReference": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Specifies the ID of the (custom) image to use to create the virtual machine scale set.\n"
                },
                "offer": {
                    "type": "string",
                    "description": "Specifies the offer of the image used to create the virtual machines.\n"
                },
                "publisher": {
                    "type": "string",
                    "description": "Specifies the publisher of the image used to create the virtual machines.\n"
                },
                "sku": {
                    "type": "string",
                    "description": "Specifies the SKU of the image used to create the virtual machines.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Specifies the version of the image used to create the virtual machines.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/AzureVirtualMachineScaleSetStorageProfileOsDisk:AzureVirtualMachineScaleSetStorageProfileOsDisk": {
            "properties": {
                "caching": {
                    "type": "string",
                    "description": "Specifies the caching requirements. Possible values include: `None` (default), `ReadOnly`, `ReadWrite`.\n"
                },
                "createOption": {
                    "type": "string",
                    "description": "Specifies how the virtual machine should be created. The only possible option is `FromImage`.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Specifies the blob uri for user image. A virtual machine scale set creates an os disk in the same container as the user image.\n"
                },
                "managedDiskType": {
                    "type": "string",
                    "description": "Specifies the type of managed disk to create. Value you must be either `Standard_LRS`, `StandardSSD_LRS` or `Premium_LRS`. Cannot be used when `vhd_containers` or `image` is specified.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the disk name. Must be specified when using unmanaged disk ('managed*disk*type' property not set).\n"
                },
                "osType": {
                    "type": "string",
                    "description": "Specifies the operating system Type, valid values are `windows`, `linux`.\n"
                },
                "vhdContainers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the vhd uri. Cannot be used when `image` or `managed_disk_type` is specified.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "caching",
                        "createOption",
                        "image",
                        "managedDiskType",
                        "name",
                        "osType",
                        "vhdContainers"
                    ]
                }
            }
        },
        "duplocloud:index/AzureVirtualMachineTag:AzureVirtualMachineTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/AzureVirtualMachineVolume:AzureVirtualMachineVolume": {
            "properties": {
                "iops": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "volumeId": {
                    "type": "string"
                },
                "volumeType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iops",
                        "name",
                        "size",
                        "volumeId",
                        "volumeType"
                    ]
                }
            }
        },
        "duplocloud:index/AzureVmMaintenanceConfigurationWindow:AzureVmMaintenanceConfigurationWindow": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "The duration of the maintenance window in HH:mm format.\n"
                },
                "expirationTime": {
                    "type": "string",
                    "description": "Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format.\n"
                },
                "recurEvery": {
                    "type": "string",
                    "description": "he rate at which a maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "Effective start date of the maintenance window in YYYY-MM-DD HH:MM format.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The timezone on which maintenance should be scheduled.\n"
                }
            },
            "type": "object",
            "required": [
                "startTime",
                "timeZone"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "duration",
                        "expirationTime",
                        "recurEvery",
                        "startTime",
                        "timeZone"
                    ]
                }
            }
        },
        "duplocloud:index/ByohTag:ByohTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/DuploServiceLbconfigsLbconfig:DuploServiceLbconfigsLbconfig": {
            "properties": {
                "allowGlobalAccess": {
                    "type": "boolean",
                    "description": "Applicable for internal lb.\n"
                },
                "backendProtocolVersion": {
                    "type": "string"
                },
                "certificateArn": {
                    "type": "string",
                    "description": "The ARN of an ACM certificate to associate with this load balancer.  Only applicable for HTTPS.\n"
                },
                "cloudName": {
                    "type": "string",
                    "description": "The name of the cloud load balancer (if applicable).\n"
                },
                "customCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify CIDR Values. This is applicable only for Network Load Balancer if `lb_type` is `6`.\n"
                },
                "dnsName": {
                    "type": "string",
                    "description": "The DNS name of the cloud load balancer (if applicable).\n"
                },
                "externalPort": {
                    "type": "integer",
                    "description": "The frontend port associated with this load balancer configuration. Required if `lb_type` is not `7`.\n"
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "Only for K8S Node Port (`lb_type = 4`) or load balancers in Kubernetes.  Set the kubernetes service `externalTrafficPolicy` attribute.\n"
                },
                "extraSelectorLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/DuploServiceLbconfigsLbconfigExtraSelectorLabel:DuploServiceLbconfigsLbconfigExtraSelectorLabel"
                    },
                    "description": "Only for K8S services or load balancers in Kubernetes.  Sets an additional selector label to narrow which pods can receive traffic.\n"
                },
                "frontendIp": {
                    "type": "string"
                },
                "healthCheck": {
                    "$ref": "#/types/duplocloud:index/DuploServiceLbconfigsLbconfigHealthCheck:DuploServiceLbconfigsLbconfigHealthCheck",
                    "description": "Health Check configuration block.\n"
                },
                "healthCheckUrl": {
                    "type": "string",
                    "description": "The health check URL to associate with this load balancer configuration.\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "(Azure Only) Set only if Azure Shared Application Gateway is used (`lb_type = 5`).\n"
                },
                "hostPort": {
                    "type": "integer",
                    "description": "The automatically assigned host port.\n"
                },
                "index": {
                    "type": "integer",
                    "description": "The load balancer Index.\n"
                },
                "isInfraDeployment": {
                    "type": "boolean"
                },
                "isInternal": {
                    "type": "boolean",
                    "description": "Whether or not to create an internal load balancer.\n"
                },
                "isNative": {
                    "type": "boolean",
                    "description": "Set to true if the service for which the load balancer is being created is hosted on a docker native host, which is managed directly by DuploCloud, or false if the service is hosted on a cloud-provided platform like EKS, AKS, GKE, ECS, etc. The `duplocloud.getNativeHosts` data source lists the native hosts in a DuploCloud Tenant\n"
                },
                "lbType": {
                    "type": "integer",
                    "description": "The numerical index of the type of load balancer configuration to create.\nShould be one of:\n\n   - `0` : ELB (Classic Load Balancer)\n   - `1` : ALB (Application Load Balancer)\n   - `2` : Health-check Only (No Load Balancer)\n   - `3` : K8S Service w/ Cluster IP (No Load Balancer)\n   - `4` : K8S Service w/ Node Port (No Load Balancer)\n   - `5` : Azure Shared Application Gateway\n   - `6` : NLB (Network Load Balancer)\n   - `7` : Target Group Only\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the duplo service.\n"
                },
                "port": {
                    "type": "string",
                    "description": "The backend port associated with this load balancer configuration.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The backend protocol associated with this load balancer configuration.\n"
                },
                "replicationControllerName": {
                    "type": "string",
                    "description": "The name of the duplo service.\n"
                },
                "setIngressHealthCheck": {
                    "type": "boolean",
                    "description": "Only for K8S services or load balancers in Kubernetes.  Set to `true` to set health check annotations for ingress.\n"
                },
                "skipHttpToHttps": {
                    "type": "boolean",
                    "description": "Skip http to https.\n"
                },
                "targetGroupArn": {
                    "type": "string",
                    "description": "The ARN of the Target Group to which to route traffic.\n"
                }
            },
            "type": "object",
            "required": [
                "lbType",
                "port",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowGlobalAccess",
                        "backendProtocolVersion",
                        "certificateArn",
                        "cloudName",
                        "customCidrs",
                        "dnsName",
                        "externalPort",
                        "externalTrafficPolicy",
                        "extraSelectorLabels",
                        "frontendIp",
                        "healthCheck",
                        "healthCheckUrl",
                        "hostName",
                        "hostPort",
                        "index",
                        "isInfraDeployment",
                        "isInternal",
                        "isNative",
                        "lbType",
                        "name",
                        "port",
                        "protocol",
                        "replicationControllerName",
                        "setIngressHealthCheck",
                        "skipHttpToHttps",
                        "targetGroupArn"
                    ]
                }
            }
        },
        "duplocloud:index/DuploServiceLbconfigsLbconfigExtraSelectorLabel:DuploServiceLbconfigsLbconfigExtraSelectorLabel": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/DuploServiceLbconfigsLbconfigHealthCheck:DuploServiceLbconfigsLbconfigHealthCheck": {
            "properties": {
                "grpcSuccessCodes": {
                    "type": "string",
                    "description": "Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, \"0,12\" for GRPC) or a range of values (for example, \"0-99\"). Required for GRPC ALB. Only applies to Application Load Balancers (i.e., GRPC) not Network Load Balancers (i.e., TCP).\n"
                },
                "healthyThreshold": {
                    "type": "integer",
                    "description": "Number of consecutive health checks successes required before considering an unhealthy target healthy.\n"
                },
                "httpSuccessCodes": {
                    "type": "string",
                    "description": "Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, \"200,202\" for HTTP(s)) or a range of values (for example, \"200-299\"). Required for HTTP/HTTPS ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS) not Network Load Balancers (i.e., TCP).\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, during which no response means a failed health check.\n"
                },
                "unhealthyThreshold": {
                    "type": "integer",
                    "description": "Number of consecutive health check failures required before considering the target unhealthy.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "grpcSuccessCodes",
                        "httpSuccessCodes",
                        "timeout"
                    ]
                }
            }
        },
        "duplocloud:index/DuploServiceTag:DuploServiceTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/EcacheInstanceLogDeliveryConfiguration:EcacheInstanceLogDeliveryConfiguration": {
            "properties": {
                "destinationType": {
                    "type": "string",
                    "description": "destination type : must be cloudwatch-logs.\n"
                },
                "logFormat": {
                    "type": "string",
                    "description": "log_format: Value must be one of the ['json', 'text']\n"
                },
                "logGroup": {
                    "type": "string",
                    "description": "cloudwatch log_group\n"
                },
                "logType": {
                    "type": "string",
                    "description": "log_type: Value must be one of the ['slow-log', 'engine-log']\n"
                }
            },
            "type": "object",
            "required": [
                "destinationType",
                "logFormat",
                "logType"
            ]
        },
        "duplocloud:index/EcsServiceCapacityProviderStrategy:EcsServiceCapacityProviderStrategy": {
            "properties": {
                "base": {
                    "type": "integer",
                    "description": "The number of tasks, at a minimum, to run on the specified capacity provider.\n"
                },
                "capacityProvider": {
                    "type": "string",
                    "description": "Name of the capacity provider.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The relative percentage of the total number of launched tasks that should use the specified capacity provider.\n"
                }
            },
            "type": "object",
            "required": [
                "capacityProvider"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "base",
                        "capacityProvider",
                        "weight"
                    ]
                }
            }
        },
        "duplocloud:index/EcsServiceLoadBalancer:EcsServiceLoadBalancer": {
            "properties": {
                "backendProtocol": {
                    "type": "string",
                    "description": "The backend protocol associated with this load balancer configuration.\n",
                    "deprecationMessage": "Use 'backend_protocol_version' instead."
                },
                "backendProtocolVersion": {
                    "type": "string",
                    "description": "The backend protocol version associated with this load balancer configuration.\n"
                },
                "certificateArn": {
                    "type": "string",
                    "description": "The ARN of an ACM certificate to associate with this load balancer.  Only applicable for HTTPS.\n"
                },
                "dropInvalidHeaders": {
                    "type": "boolean",
                    "description": "Whether or not to drop invalid HTTP headers received by the load balancer.\n"
                },
                "enableAccessLogs": {
                    "type": "boolean",
                    "description": "Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan\n"
                },
                "externalPort": {
                    "type": "integer",
                    "description": "The frontend port associated with this load balancer configuration.\n"
                },
                "healthCheckConfig": {
                    "$ref": "#/types/duplocloud:index/EcsServiceLoadBalancerHealthCheckConfig:EcsServiceLoadBalancerHealthCheckConfig",
                    "description": "Health check configuration for this load balancer.\n"
                },
                "healthCheckUrl": {
                    "type": "string",
                    "description": "The health check URL to associate with this load balancer configuration.\n"
                },
                "httpToHttpsRedirect": {
                    "type": "boolean",
                    "description": "Whether or not the load balancer should redirect HTTP to HTTPS.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.\n"
                },
                "index": {
                    "type": "integer",
                    "description": "The load balancer Index.\n"
                },
                "isInternal": {
                    "type": "boolean",
                    "description": "Whether or not to create an internal load balancer.\n"
                },
                "lbType": {
                    "type": "integer",
                    "description": "The numerical index of the type of load balancer configuration to create.\nShould be one of:\n\n   - `0` : ELB (Classic Load Balancer)\n   - `1` : ALB (Application Load Balancer)\n   - `2` : Health-check Only (No Load Balancer)\n"
                },
                "loadBalancerArn": {
                    "type": "string",
                    "description": "The load balancer ARN.\n"
                },
                "loadBalancerName": {
                    "type": "string",
                    "description": "The load balancer name.\n"
                },
                "port": {
                    "type": "string",
                    "description": "The backend port associated with this load balancer configuration.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The frontend protocol associated with this load balancer configuration.\n"
                },
                "replicationControllerName": {
                    "type": "string"
                },
                "targetGroupCount": {
                    "type": "integer",
                    "description": "Number of Load Balancer target group to associate with the service.\n"
                },
                "webaclid": {
                    "type": "string",
                    "description": "The ARN of a web application firewall to associate this load balancer.\n"
                }
            },
            "type": "object",
            "required": [
                "externalPort",
                "lbType",
                "port",
                "protocol",
                "targetGroupCount"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "backendProtocol",
                        "backendProtocolVersion",
                        "dropInvalidHeaders",
                        "enableAccessLogs",
                        "externalPort",
                        "httpToHttpsRedirect",
                        "idleTimeout",
                        "index",
                        "lbType",
                        "loadBalancerArn",
                        "loadBalancerName",
                        "port",
                        "protocol",
                        "replicationControllerName",
                        "targetGroupCount",
                        "webaclid"
                    ]
                }
            }
        },
        "duplocloud:index/EcsServiceLoadBalancerHealthCheckConfig:EcsServiceLoadBalancerHealthCheckConfig": {
            "properties": {
                "grpcSuccessCode": {
                    "type": "string"
                },
                "healthCheckIntervalSeconds": {
                    "type": "integer"
                },
                "healthCheckTimeoutSeconds": {
                    "type": "integer"
                },
                "healthyThresholdCount": {
                    "type": "integer"
                },
                "httpSuccessCode": {
                    "type": "string"
                },
                "unhealthyThresholdCount": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "grpcSuccessCode",
                        "healthCheckIntervalSeconds",
                        "healthCheckTimeoutSeconds",
                        "healthyThresholdCount",
                        "httpSuccessCode",
                        "unhealthyThresholdCount"
                    ]
                }
            }
        },
        "duplocloud:index/EcsTaskDefinitionInferenceAccelerator:EcsTaskDefinitionInferenceAccelerator": {
            "properties": {
                "deviceName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "deviceType": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "deviceName",
                "deviceType"
            ]
        },
        "duplocloud:index/EcsTaskDefinitionPlacementConstraint:EcsTaskDefinitionPlacementConstraint": {
            "properties": {
                "expression": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "duplocloud:index/EcsTaskDefinitionProxyConfiguration:EcsTaskDefinitionProxyConfiguration": {
            "properties": {
                "containerName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Defaults to `APPMESH`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "containerName"
            ]
        },
        "duplocloud:index/EcsTaskDefinitionRequiresAttribute:EcsTaskDefinitionRequiresAttribute": {
            "properties": {
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/EcsTaskDefinitionRuntimePlatform:EcsTaskDefinitionRuntimePlatform": {
            "properties": {
                "cpuArchitecture": {
                    "type": "string",
                    "description": "Valid values are 'X86_64','ARM64'\n"
                },
                "operatingSystemFamily": {
                    "type": "string",
                    "description": "Valid values are \\n\\nFor FARGATE: 'LINUX','WINDOWS*SERVER*2019*FULL','WINDOWS*SERVER*2019*CORE','WINDOWS*SERVER*2022*FULL','WINDOWS*SERVER*2022*CORE'\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/EcsTaskDefinitionTag:EcsTaskDefinitionTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/GcpCloudFunctionEventTrigger:GcpCloudFunctionEventTrigger": {
            "properties": {
                "eventType": {
                    "type": "string",
                    "description": "The type of event that will trigger the function\n"
                },
                "resource": {
                    "type": "string",
                    "description": "The resource that will trigger the function\n"
                },
                "service": {
                    "type": "string",
                    "description": "The service that will trigger the function\n"
                }
            },
            "type": "object",
            "required": [
                "eventType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "eventType",
                        "resource",
                        "service"
                    ]
                }
            }
        },
        "duplocloud:index/GcpCloudFunctionHttpsTrigger:GcpCloudFunctionHttpsTrigger": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Must be set to `true`.\n"
                },
                "securityLevel": {
                    "type": "string",
                    "description": "The security level of the HTTPS trigger\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the HTTPS trigger\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "securityLevel",
                        "url"
                    ]
                }
            }
        },
        "duplocloud:index/GcpInfraMaintenanceWindowExclusion:GcpInfraMaintenanceWindowExclusion": {
            "properties": {
                "endTime": {
                    "type": "string"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of automatic upgrades to restrict in the exclusion window. One of: NO*UPGRADES | NO*MINOR*UPGRADES | NO*MINOR*OR*NODE_UPGRADES Defaults to `NO_UPGRADES`.\n"
                },
                "startTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "endTime",
                "startTime"
            ]
        },
        "duplocloud:index/GcpInfraMaintenanceWindowRecurringWindow:GcpInfraMaintenanceWindowRecurringWindow": {
            "properties": {
                "endTime": {
                    "type": "string"
                },
                "recurrence": {
                    "type": "string",
                    "description": "Specify recurrence in RFC5545 RRULE format, to specify when this recurs.\n"
                },
                "startTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "endTime",
                "recurrence",
                "startTime"
            ]
        },
        "duplocloud:index/GcpInfraSecurityRulePortsAndProtocol:GcpInfraSecurityRulePortsAndProtocol": {
            "properties": {
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ports to which this rule applies. This field is only applicable for UDP, TCP and SCTP protocol.\n"
                },
                "serviceProtocol": {
                    "type": "string",
                    "description": "The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, sctp, ipip, all), or the IP protocol number.\n"
                }
            },
            "type": "object",
            "required": [
                "serviceProtocol"
            ]
        },
        "duplocloud:index/GcpNodePoolAccelerator:GcpNodePoolAccelerator": {
            "properties": {
                "acceleratorCount": {
                    "type": "string",
                    "description": "The number of the accelerator cards exposed to an instance.\n"
                },
                "acceleratorType": {
                    "type": "string",
                    "description": "The accelerator type resource name.\n"
                },
                "gpuDriverInstallationConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpNodePoolAcceleratorGpuDriverInstallationConfig:GcpNodePoolAcceleratorGpuDriverInstallationConfig"
                    }
                },
                "gpuPartitionSize": {
                    "type": "string",
                    "description": "Size of partitions to create on the GPU\n"
                },
                "gpuSharingConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpNodePoolAcceleratorGpuSharingConfig:GcpNodePoolAcceleratorGpuSharingConfig"
                    }
                },
                "maxTimeSharedClientsPerGpu": {
                    "type": "string",
                    "description": "The number of time-shared GPU resources to expose for each physical GPU.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "acceleratorCount",
                        "gpuDriverInstallationConfigs",
                        "gpuPartitionSize",
                        "gpuSharingConfigs",
                        "maxTimeSharedClientsPerGpu"
                    ]
                }
            }
        },
        "duplocloud:index/GcpNodePoolAcceleratorGpuDriverInstallationConfig:GcpNodePoolAcceleratorGpuDriverInstallationConfig": {
            "properties": {
                "gpuDriverVersion": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "gpuDriverVersion"
                    ]
                }
            }
        },
        "duplocloud:index/GcpNodePoolAcceleratorGpuSharingConfig:GcpNodePoolAcceleratorGpuSharingConfig": {
            "properties": {
                "gpuSharingStrategy": {
                    "type": "string",
                    "description": "The configuration for GPU sharing options.\n"
                },
                "maxSharedClientsPerGpu": {
                    "type": "string",
                    "description": "The max number of containers that can share a physical GPU.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "gpuSharingStrategy",
                        "maxSharedClientsPerGpu"
                    ]
                }
            }
        },
        "duplocloud:index/GcpNodePoolLinuxNodeConfig:GcpNodePoolLinuxNodeConfig": {
            "properties": {
                "cgroupMode": {
                    "type": "string",
                    "description": "cgroupMode specifies the cgroup mode to be used on the node.\n"
                },
                "sysctls": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The Linux kernel parameters to be applied to the nodes and all pods running on the nodes.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cgroupMode",
                        "sysctls"
                    ]
                }
            }
        },
        "duplocloud:index/GcpNodePoolNodePoolLoggingConfig:GcpNodePoolNodePoolLoggingConfig": {
            "properties": {
                "variantConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "variantConfig"
                    ]
                }
            }
        },
        "duplocloud:index/GcpNodePoolTaint:GcpNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Update strategy of the node pool. Supported effect's are : \n\t- EFFECT_UNSPECIFIED \n\t- NO_SCHEDULE \n\t- PREFER_NO_SCHEDULE\n\t- NO_EXECUTE\n"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "duplocloud:index/GcpNodePoolUpgradeSetting:GcpNodePoolUpgradeSetting": {
            "properties": {
                "blueGreenSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpNodePoolUpgradeSettingBlueGreenSetting:GcpNodePoolUpgradeSettingBlueGreenSetting"
                    }
                },
                "maxSurge": {
                    "type": "integer",
                    "description": "The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.\n"
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Update strategy of the node pool.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blueGreenSettings",
                        "maxSurge",
                        "maxUnavailable",
                        "strategy"
                    ]
                }
            }
        },
        "duplocloud:index/GcpNodePoolUpgradeSettingBlueGreenSetting:GcpNodePoolUpgradeSettingBlueGreenSetting": {
            "properties": {
                "nodePoolSoakDuration": {
                    "type": "string",
                    "description": "Note: The node_pool_soak_duration should not be used along with standard_rollout_policy\n"
                },
                "standardRolloutPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicy:GcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicy"
                    },
                    "description": "Note: The standard_rollout_policy should not be used along with node_pool_soak_duration\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nodePoolSoakDuration"
                    ]
                }
            }
        },
        "duplocloud:index/GcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicy:GcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicy": {
            "properties": {
                "batchNodeCount": {
                    "type": "integer",
                    "description": "Note: The batch_node_count should not be used along with batch_percentage\n"
                },
                "batchPercentage": {
                    "type": "number",
                    "description": "Note: The batch_percentage should not be used along with batch_node_count\n"
                },
                "batchSoakDuration": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "batchNodeCount",
                        "batchPercentage",
                        "batchSoakDuration"
                    ]
                }
            }
        },
        "duplocloud:index/GcpSchedulerJobAppEngineTarget:GcpSchedulerJobAppEngineTarget": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The HTTP request body to send.\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The HTTP headers to send.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to use.\n"
                },
                "relativeUri": {
                    "type": "string",
                    "description": "The relative URI.\n"
                },
                "routing": {
                    "$ref": "#/types/duplocloud:index/GcpSchedulerJobAppEngineTargetRouting:GcpSchedulerJobAppEngineTargetRouting",
                    "description": "Specifies App Engine routing.\n"
                }
            },
            "type": "object",
            "required": [
                "method",
                "relativeUri"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "body",
                        "headers",
                        "method",
                        "relativeUri"
                    ]
                }
            }
        },
        "duplocloud:index/GcpSchedulerJobAppEngineTargetRouting:GcpSchedulerJobAppEngineTargetRouting": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The App Engine host.\n"
                },
                "instance": {
                    "type": "string",
                    "description": "The App Engine instance.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The App Engine service.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The App Engine service version.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "host",
                        "instance",
                        "service",
                        "version"
                    ]
                }
            }
        },
        "duplocloud:index/GcpSchedulerJobHttpTarget:GcpSchedulerJobHttpTarget": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The HTTP request body to send.\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The HTTP headers to send.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to use.\n"
                },
                "oauthToken": {
                    "$ref": "#/types/duplocloud:index/GcpSchedulerJobHttpTargetOauthToken:GcpSchedulerJobHttpTargetOauthToken",
                    "description": "Specifies OAuth authentication.\n"
                },
                "oidcToken": {
                    "$ref": "#/types/duplocloud:index/GcpSchedulerJobHttpTargetOidcToken:GcpSchedulerJobHttpTargetOidcToken",
                    "description": "Specifies OIDC authentication.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The request URI.\n"
                }
            },
            "type": "object",
            "required": [
                "method",
                "uri"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "body",
                        "headers",
                        "method",
                        "uri"
                    ]
                }
            }
        },
        "duplocloud:index/GcpSchedulerJobHttpTargetOauthToken:GcpSchedulerJobHttpTargetOauthToken": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Must be set to `true`. Defaults to `true`.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The OAuth token scope.\n"
                },
                "serviceAccountEmail": {
                    "type": "string",
                    "description": "The OAuth token service account email.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "scope",
                        "serviceAccountEmail"
                    ]
                }
            }
        },
        "duplocloud:index/GcpSchedulerJobHttpTargetOidcToken:GcpSchedulerJobHttpTargetOidcToken": {
            "properties": {
                "audience": {
                    "type": "string",
                    "description": "The OIDC token audience.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Must be set to `true`. Defaults to `true`.\n"
                },
                "serviceAccountEmail": {
                    "type": "string",
                    "description": "The OIDC token service account email.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "audience",
                        "serviceAccountEmail"
                    ]
                }
            }
        },
        "duplocloud:index/GcpSchedulerJobPubsubTarget:GcpSchedulerJobPubsubTarget": {
            "properties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The attributes to send to the pubsub target.\n"
                },
                "data": {
                    "type": "string",
                    "description": "The data to send to the pubsub topic.\n"
                },
                "topicName": {
                    "type": "string",
                    "description": "The name of the topic to target\n"
                }
            },
            "type": "object",
            "required": [
                "topicName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "data",
                        "topicName"
                    ]
                }
            }
        },
        "duplocloud:index/GcpStorageBucketV2DefaultEncryption:GcpStorageBucketV2DefaultEncryption": {
            "properties": {
                "method": {
                    "type": "string",
                    "description": "Default encryption method.  Must be one of: `None`, `Sse`, `AwsKms`, `TenantKms`. Defaults to `Sse`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/GcpTenantSecurityRulePortsAndProtocol:GcpTenantSecurityRulePortsAndProtocol": {
            "properties": {
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ports to which this rule applies. This field is only applicable for UDP, TCP and SCTP protocol.\n"
                },
                "serviceProtocol": {
                    "type": "string",
                    "description": "The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, sctp, ipip, all), or the IP protocol number.\n"
                }
            },
            "type": "object",
            "required": [
                "serviceProtocol"
            ]
        },
        "duplocloud:index/InfrastructureAllSetting:InfrastructureAllSetting": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/InfrastructureCustomData:InfrastructureCustomData": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/InfrastructureOnpremCustomData:InfrastructureOnpremCustomData": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/InfrastructureOnpremEksConfig:InfrastructureOnpremEksConfig": {
            "properties": {
                "ingressSecurityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group IDs\n",
                    "willReplaceOnChanges": true
                },
                "privateSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The private subnets for the VPC.\n",
                    "willReplaceOnChanges": true
                },
                "publicSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The public subnets for the VPC.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "The the ID of a Virtual Private Cloud\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "ingressSecurityGroupIds",
                "privateSubnets",
                "publicSubnets",
                "vpcId"
            ]
        },
        "duplocloud:index/InfrastructurePrivateSubnet:InfrastructurePrivateSubnet": {
            "properties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "The subnet CIDR block.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The subnet ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The subnet name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructurePrivateSubnetTag:InfrastructurePrivateSubnetTag"
                    },
                    "description": "The subnet's tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of subnet.  Will be one of: `\"public\"` or `\"private\"`.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The Duplo zone that the subnet resides in.  Will be one of:  `\"A\"`, `\"B\"`, `\"C\"`, or `\"D\"`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cidrBlock",
                        "id",
                        "name",
                        "tags",
                        "type",
                        "zone"
                    ]
                }
            }
        },
        "duplocloud:index/InfrastructurePrivateSubnetTag:InfrastructurePrivateSubnetTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/InfrastructurePublicSubnet:InfrastructurePublicSubnet": {
            "properties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "The subnet CIDR block.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The subnet ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The subnet name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructurePublicSubnetTag:InfrastructurePublicSubnetTag"
                    },
                    "description": "The subnet's tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of subnet.  Will be one of: `\"public\"` or `\"private\"`.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The Duplo zone that the subnet resides in.  Will be one of:  `\"A\"`, `\"B\"`, `\"C\"`, or `\"D\"`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cidrBlock",
                        "id",
                        "name",
                        "tags",
                        "type",
                        "zone"
                    ]
                }
            }
        },
        "duplocloud:index/InfrastructurePublicSubnetTag:InfrastructurePublicSubnetTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/InfrastructureSecurityGroup:InfrastructureSecurityGroup": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The security group ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The security group name.\n"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructureSecurityGroupRule:InfrastructureSecurityGroupRule"
                    },
                    "description": "Security group rules\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of security group.  Will be one of: `\"host\"` or `\"lb\"`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name",
                        "readOnly",
                        "rules",
                        "type"
                    ]
                }
            }
        },
        "duplocloud:index/InfrastructureSecurityGroupRule:InfrastructureSecurityGroupRule": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "destinationRuleType": {
                    "type": "integer"
                },
                "direction": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "sourceAddressPrefix": {
                    "type": "string"
                },
                "sourcePortRange": {
                    "type": "string"
                },
                "sourceRuleType": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "destinationRuleType",
                        "direction",
                        "priority",
                        "protocol",
                        "sourceAddressPrefix",
                        "sourcePortRange",
                        "sourceRuleType"
                    ]
                }
            }
        },
        "duplocloud:index/InfrastructureSetting:InfrastructureSetting": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/InfrastructureSettingCustomData:InfrastructureSettingCustomData": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/InfrastructureSettingSetting:InfrastructureSettingSetting": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/K8HelmReleaseChart:K8HelmReleaseChart": {
            "properties": {
                "interval": {
                    "type": "string",
                    "description": "The interval associated to helm chart Defaults to `5m0s`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Provide unique name for the helm chart.\n",
                    "willReplaceOnChanges": true
                },
                "reconcileStrategy": {
                    "type": "string",
                    "description": "The reconcile strategy should be chosen from ChartVersion or Revision. No new chart artifact is produced on updates to the source unless the version is changed in HelmRepository. Use `Revision` to produce new chart artifact on change in source revision. Defaults to `ChartVersion`.\n"
                },
                "sourceName": {
                    "type": "string",
                    "description": "The name of the source, referred from helm repository resource.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "The helm chart source, currently only HelmRepository as source is supported Defaults to `HelmRepository`.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The helm chart version\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "sourceName",
                "version"
            ]
        },
        "duplocloud:index/K8IngressLbconfig:K8IngressLbconfig": {
            "properties": {
                "certificateArn": {
                    "type": "string",
                    "description": "The ARN of an ACM certificate to associate with this load balancer.  Only applicable for HTTPS.\n"
                },
                "dnsPrefix": {
                    "type": "string",
                    "description": "The DNS prefix to expose services using Route53 domain.\n"
                },
                "httpPort": {
                    "type": "integer",
                    "description": "HTTP Listener Port.\n"
                },
                "httpsPort": {
                    "type": "integer",
                    "description": "HTTPS Listener Port.\n"
                },
                "isInternal": {
                    "type": "boolean",
                    "description": "Whether or not to create an internal load balancer.\n"
                }
            },
            "type": "object",
            "required": [
                "dnsPrefix",
                "isInternal"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "certificateArn",
                        "dnsPrefix",
                        "isInternal"
                    ]
                }
            }
        },
        "duplocloud:index/K8IngressRule:K8IngressRule": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "If a host is provided (for e.g. example, foo.bar.com), the rules apply to that host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Specify the path (for e.g. /api /v1/api/) to do a path base routing. If host is specified then both path and host should be match for the incoming request.\n"
                },
                "pathType": {
                    "type": "string",
                    "description": "Type of the path to be used.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port from the kubernetes service that ingress will use as backend port to serve the requests.\n"
                },
                "portName": {
                    "type": "string",
                    "description": "Port name from the kubernetes service that ingress will use as backend port to serve the requests.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Name of the kubernetes service which Ingress will use as backend to serve the request.\n"
                }
            },
            "type": "object",
            "required": [
                "path",
                "pathType",
                "serviceName"
            ]
        },
        "duplocloud:index/K8IngressTl:K8IngressTl": {
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of hosts included in the TLS certificate. Each value in this list must match the name(s) specified in the TLS secret. If not specified, it defaults to the wildcard host setting for the load balancer controller managing this Ingress.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "The name of the secret used to terminate TLS traffic on port 443. This field is optional, enabling TLS routing based solely on the SNI hostname. If the SNI host in a listener conflicts with the 'Host' header in an IngressRule, the SNI host is used for termination, while the 'Host' header value is used for routing.\n"
                }
            },
            "type": "object",
            "required": [
                "hosts",
                "secretName"
            ]
        },
        "duplocloud:index/K8PersistentVolumeClaimSpec:K8PersistentVolumeClaimSpec": {
            "properties": {
                "accessModes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1\n",
                    "willReplaceOnChanges": true
                },
                "resources": {
                    "$ref": "#/types/duplocloud:index/K8PersistentVolumeClaimSpecResources:K8PersistentVolumeClaimSpecResources",
                    "description": "A list of the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources\n"
                },
                "storageClassName": {
                    "type": "string",
                    "description": "Name of the storage class requested by the claim\n",
                    "willReplaceOnChanges": true
                },
                "volumeMode": {
                    "type": "string",
                    "description": "Kubernetes supports two volumeModes of PersistentVolumes: `Filesystem` and `Block`.\n"
                },
                "volumeName": {
                    "type": "string",
                    "description": "The binding reference to the PersistentVolume backing this claim.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "accessModes",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessModes",
                        "resources",
                        "storageClassName",
                        "volumeMode",
                        "volumeName"
                    ]
                }
            }
        },
        "duplocloud:index/K8PersistentVolumeClaimSpecResources:K8PersistentVolumeClaimSpecResources": {
            "properties": {
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/\n",
                    "willReplaceOnChanges": true
                },
                "requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "requests"
                    ]
                }
            }
        },
        "duplocloud:index/K8SecretProviderClassSecretObject:K8SecretProviderClassSecretObject": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the secret object that may be used to store arbitrary metadata.\n"
                },
                "datas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8SecretProviderClassSecretObjectData:K8SecretProviderClassSecretObjectData"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the secret object.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the secret object.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "annotations",
                        "datas",
                        "labels",
                        "name",
                        "type"
                    ]
                }
            }
        },
        "duplocloud:index/K8SecretProviderClassSecretObjectData:K8SecretProviderClassSecretObjectData": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "objectName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "objectName"
            ]
        },
        "duplocloud:index/K8StorageClassAllowedTopologies:K8StorageClassAllowedTopologies": {
            "properties": {
                "matchLabelExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8StorageClassAllowedTopologiesMatchLabelExpression:K8StorageClassAllowedTopologiesMatchLabelExpression"
                    },
                    "description": "A list of topology selector requirements by labels.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8StorageClassAllowedTopologiesMatchLabelExpression:K8StorageClassAllowedTopologiesMatchLabelExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. One value must match the label to be selected.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobMetadata:K8sCronJobMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the cronjob that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n"
                },
                "generateName": {
                    "type": "string",
                    "description": "Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency\n",
                    "willReplaceOnChanges": true
                },
                "generation": {
                    "type": "integer",
                    "description": "A sequence number representing a specific generation of the desired state.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the cronjob. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cronjob, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n",
                    "willReplaceOnChanges": true
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace defines the space within which name of the cronjob must be unique.\n",
                    "willReplaceOnChanges": true
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "An opaque value that represents the internal version of this cronjob that can be used by clients to determine when cronjob has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique in time and space value for this cronjob. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "annotations",
                        "generation",
                        "labels",
                        "name",
                        "namespace",
                        "resourceVersion",
                        "uid"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpec:K8sCronJobSpec": {
            "properties": {
                "concurrencyPolicy": {
                    "type": "string",
                    "description": "Specifies how to treat concurrent executions of a Job. Defaults to Allow. Defaults to `Allow`.\n"
                },
                "failedJobsHistoryLimit": {
                    "type": "integer",
                    "description": "The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1. Defaults to `1`.\n"
                },
                "jobTemplate": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplate:K8sCronJobSpecJobTemplate",
                    "description": "Describes the pod that will be created when executing a cron job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "Cron format string, e.g. 0 * * * * or @hourly, as schedule time of its jobs to be created and executed.\n"
                },
                "startingDeadlineSeconds": {
                    "type": "integer",
                    "description": "Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones. Defaults to `0`.\n"
                },
                "successfulJobsHistoryLimit": {
                    "type": "integer",
                    "description": "The number of successful finished jobs to retain. Defaults to 3. Defaults to `3`.\n"
                },
                "suspend": {
                    "type": "boolean",
                    "description": "This flag tells the controller to suspend subsequent executions, it does not apply to already started executions. Defaults to false. Defaults to `false`.\n"
                }
            },
            "type": "object",
            "required": [
                "jobTemplate",
                "schedule"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplate:K8sCronJobSpecJobTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateMetadata:K8sCronJobSpecJobTemplateMetadata",
                    "description": "Standard jobTemplateSpec's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                },
                "spec": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpec:K8sCronJobSpecJobTemplateSpec",
                    "description": "Specification of the desired behavior of the job\n"
                }
            },
            "type": "object",
            "required": [
                "spec"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "metadata",
                        "spec"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateMetadata:K8sCronJobSpecJobTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the jobTemplateSpec that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n"
                },
                "generateName": {
                    "type": "string",
                    "description": "Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency\n",
                    "willReplaceOnChanges": true
                },
                "generation": {
                    "type": "integer",
                    "description": "A sequence number representing a specific generation of the desired state.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the jobTemplateSpec. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the jobTemplateSpec, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n",
                    "willReplaceOnChanges": true
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "An opaque value that represents the internal version of this jobTemplateSpec that can be used by clients to determine when jobTemplateSpec has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique in time and space value for this jobTemplateSpec. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "annotations",
                        "generation",
                        "labels",
                        "name",
                        "resourceVersion",
                        "uid"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpec:K8sCronJobSpecJobTemplateSpec": {
            "properties": {
                "activeDeadlineSeconds": {
                    "type": "integer",
                    "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n"
                },
                "backoffLimit": {
                    "type": "integer",
                    "description": "Specifies the number of retries before marking this job failed. Defaults to 6 Defaults to `6`.\n"
                },
                "completionMode": {
                    "type": "string",
                    "description": "Specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`. More info: https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode\n",
                    "willReplaceOnChanges": true
                },
                "completions": {
                    "type": "integer",
                    "description": "Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.\n",
                    "willReplaceOnChanges": true
                },
                "manualSelector": {
                    "type": "boolean",
                    "description": "Controls generation of pod labels and pod selectors. Leave unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md\n"
                },
                "parallelism": {
                    "type": "integer",
                    "description": "Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) \u003c .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.\n"
                },
                "selector": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecSelector:K8sCronJobSpecJobTemplateSpecSelector",
                    "description": "A label query over volumes to consider for binding.\n",
                    "willReplaceOnChanges": true
                },
                "template": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplate:K8sCronJobSpecJobTemplateSpecTemplate",
                    "description": "Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n",
                    "willReplaceOnChanges": true
                },
                "ttlSecondsAfterFinished": {
                    "type": "string",
                    "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.\n"
                }
            },
            "type": "object",
            "required": [
                "template"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "activeDeadlineSeconds",
                        "completionMode",
                        "manualSelector",
                        "selector",
                        "template"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecSelector:K8sCronJobSpecJobTemplateSpecSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecSelectorMatchExpression:K8sCronJobSpecJobTemplateSpecSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n",
                    "willReplaceOnChanges": true
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "matchLabels"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecSelectorMatchExpression:K8sCronJobSpecJobTemplateSpecSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n",
                    "willReplaceOnChanges": true
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n",
                    "willReplaceOnChanges": true
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplate:K8sCronJobSpecJobTemplateSpecTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateMetadata:K8sCronJobSpecJobTemplateSpecTemplateMetadata",
                    "description": "Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                },
                "spec": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpec:K8sCronJobSpecJobTemplateSpecTemplateSpec",
                    "description": "Spec of the pods owned by the job\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "metadata"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateMetadata:K8sCronJobSpecJobTemplateSpecTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n"
                },
                "generateName": {
                    "type": "string",
                    "description": "Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency\n",
                    "willReplaceOnChanges": true
                },
                "generation": {
                    "type": "integer",
                    "description": "A sequence number representing a specific generation of the desired state.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n",
                    "willReplaceOnChanges": true
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "annotations",
                        "generation",
                        "labels",
                        "name",
                        "resourceVersion",
                        "uid"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpec:K8sCronJobSpecJobTemplateSpecTemplateSpec": {
            "properties": {
                "activeDeadlineSeconds": {
                    "type": "integer",
                    "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n"
                },
                "affinity": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinity:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinity",
                    "description": "Optional pod scheduling constraints.\n"
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted. Defaults to `true`.\n"
                },
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainer:K8sCronJobSpecJobTemplateSpecTemplateSpecContainer"
                    },
                    "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/\n"
                },
                "dnsConfig": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfig:K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfig",
                    "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty\n"
                },
                "dnsPolicy": {
                    "type": "string",
                    "description": "Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy\n"
                },
                "enableServiceLinks": {
                    "type": "boolean",
                    "description": "Enables generating environment variables for service discovery. Defaults to true. Defaults to `true`.\n"
                },
                "hostAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecHostAlias:K8sCronJobSpecJobTemplateSpecTemplateSpecHostAlias"
                    },
                    "description": "List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.\n"
                },
                "hostIpc": {
                    "type": "boolean",
                    "description": "Use the host's ipc namespace. Optional: Defaults to false.\n"
                },
                "hostNetwork": {
                    "type": "boolean",
                    "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.\n"
                },
                "hostPid": {
                    "type": "boolean",
                    "description": "Use the host's pid namespace.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n"
                },
                "imagePullSecrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecret:K8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecret"
                    },
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod\n"
                },
                "initContainers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainer:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainer"
                    },
                    "description": "List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.\n"
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.\n"
                },
                "readinessGates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGate:K8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGate"
                    },
                    "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md\n"
                },
                "restartPolicy": {
                    "type": "string",
                    "description": "Restart policy for all containers within the pod. One of OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy. Defaults to `Never`.\n"
                },
                "runtimeClassName": {
                    "type": "string",
                    "description": "RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class\n"
                },
                "schedulerName": {
                    "type": "string",
                    "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n"
                },
                "securityContext": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContext:K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContext",
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty\n"
                },
                "serviceAccountName": {
                    "type": "string",
                    "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.\n"
                },
                "shareProcessNamespace": {
                    "type": "boolean",
                    "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false. Defaults to `false`.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "If specified, the fully qualified Pod hostname will be \"...svc.\". If not specified, the pod will not have a domainname at all..\n"
                },
                "terminationGracePeriodSeconds": {
                    "type": "integer",
                    "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.\n"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecToleration:K8sCronJobSpecJobTemplateSpecTemplateSpecToleration"
                    },
                    "description": "If specified, the pod's toleration. Optional: Defaults to empty\n"
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraint:K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraint"
                    },
                    "description": "describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolume:K8sCronJobSpecJobTemplateSpecTemplateSpecVolume"
                    },
                    "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "activeDeadlineSeconds",
                        "dnsPolicy",
                        "hostAliases",
                        "hostIpc",
                        "hostNetwork",
                        "hostPid",
                        "hostname",
                        "imagePullSecrets",
                        "nodeName",
                        "nodeSelector",
                        "priorityClassName",
                        "readinessGates",
                        "runtimeClassName",
                        "schedulerName",
                        "securityContext",
                        "serviceAccountName",
                        "subdomain",
                        "terminationGracePeriodSeconds"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinity:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinity": {
            "properties": {
                "nodeAffinity": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinity:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinity",
                    "description": "Node affinity scheduling rules for the pod.\n"
                },
                "podAffinity": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinity:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinity",
                    "description": "Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)\n"
                },
                "podAntiAffinity": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinity:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinity",
                    "description": "Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinity:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinity": {
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.\n"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution",
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "preferredDuringSchedulingIgnoredDuringExecutions"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "preference": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference",
                    "description": "A node selector term, associated with the corresponding weight.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "weight is in the range 1-100\n"
                }
            },
            "type": "object",
            "required": [
                "preference"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "preference",
                        "weight"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression"
                    },
                    "description": "List of node selector requirements. The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "nodeSelectorTerms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm"
                    },
                    "description": "List of node selector terms. The terms are ORed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression"
                    },
                    "description": "List of node selector requirements. The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinity:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinity": {
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.\n"
                },
                "requiredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "preferredDuringSchedulingIgnoredDuringExecutions"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "podAffinityTerm": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm",
                    "description": "A pod affinity term, associated with the corresponding weight\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100\n"
                }
            },
            "type": "object",
            "required": [
                "podAffinityTerm",
                "weight"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labelSelectors",
                        "namespaces",
                        "topologyKey"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labelSelectors",
                        "namespaces",
                        "topologyKey"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinity:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinity": {
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.\n"
                },
                "requiredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "preferredDuringSchedulingIgnoredDuringExecutions"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "podAffinityTerm": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm",
                    "description": "A pod affinity term, associated with the corresponding weight\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100\n"
                }
            },
            "type": "object",
            "required": [
                "podAffinityTerm",
                "weight"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labelSelectors",
                        "namespaces",
                        "topologyKey"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labelSelectors",
                        "namespaces",
                        "topologyKey"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainer:K8sCronJobSpecJobTemplateSpecTemplateSpecContainer": {
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n"
                },
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n"
                },
                "envFroms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFrom:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFrom"
                    },
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.\n"
                },
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnv:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnv"
                    },
                    "description": "List of environment variables to set in the container. Cannot be updated.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/\n"
                },
                "imagePullPolicy": {
                    "type": "string",
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images\n"
                },
                "lifecycle": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycle:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycle",
                    "description": "Actions that the management system should take in response to container lifecycle events\n"
                },
                "livenessProbe": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbe:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbe",
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerPort:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerPort"
                    },
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.\n"
                },
                "readinessProbe": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbe:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbe",
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "resources": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerResources:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerResources",
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n"
                },
                "securityContext": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContext:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContext",
                    "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n"
                },
                "startupProbe": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbe:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbe",
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n"
                },
                "stdin": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.\n"
                },
                "stdinOnce": {
                    "type": "boolean",
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.\n"
                },
                "terminationMessagePath": {
                    "type": "string",
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.\n"
                },
                "terminationMessagePolicy": {
                    "type": "string",
                    "description": "Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n"
                },
                "tty": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a TTY for itself Defaults to `false`.\n"
                },
                "volumeMounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMount:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMount"
                    },
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.\n"
                },
                "workingDir": {
                    "type": "string",
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "imagePullPolicy",
                        "name",
                        "resources",
                        "terminationMessagePolicy"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnv:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER\n"
                },
                "value": {
                    "type": "string",
                    "description": "Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".\n"
                },
                "valueFrom": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFrom:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFrom",
                    "description": "Source for the environment variable's value\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFrom:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFrom": {
            "properties": {
                "configMapRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRef:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRef",
                    "description": "The ConfigMap to select from\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRef:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRef",
                    "description": "The Secret to select from\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRef:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap must be defined\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRef:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret must be defined\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFrom:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFrom": {
            "properties": {
                "configMapKeyRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef",
                    "description": "Selects a key of a ConfigMap.\n"
                },
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRef",
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n"
                },
                "secretKeyRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRef:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRef",
                    "description": "Selects a key of a secret in the pod's namespace.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to select.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap or its key must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\". Defaults to `v1`.\n"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "divisor": {
                    "type": "string",
                    "description": "Defaults to `1`.\n"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n"
                }
            },
            "type": "object",
            "required": [
                "resource"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRef:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the secret to select from. Must be a valid secret key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret or its key must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycle:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycle": {
            "properties": {
                "postStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStart:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStart"
                    },
                    "description": "post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n"
                },
                "preStops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStop:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStop"
                    },
                    "description": "pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStart:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStart": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExec:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExec:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStop:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStop": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExec:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExec:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbe:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExec:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpc:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe Defaults to `10`.\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExec:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpc:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerPort:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerPort": {
            "properties": {
                "containerPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536.\n"
                },
                "hostIp": {
                    "type": "string",
                    "description": "What host IP to bind the external port to.\n"
                },
                "hostPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.\n"
                },
                "name": {
                    "type": "string",
                    "description": "If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\". Defaults to `TCP`.\n"
                }
            },
            "type": "object",
            "required": [
                "containerPort"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbe:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExec:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpc:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe Defaults to `10`.\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExec:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpc:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerResources:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerResources": {
            "properties": {
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n"
                },
                "requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "limits",
                        "requests"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContext:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContext": {
            "properties": {
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.\n"
                },
                "capabilities": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilities:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilities",
                    "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.\n"
                },
                "privileged": {
                    "type": "boolean",
                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.\n"
                },
                "readOnlyRootFilesystem": {
                    "type": "boolean",
                    "description": "Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.\n"
                },
                "runAsGroup": {
                    "type": "string",
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "runAsUser": {
                    "type": "string",
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "seLinuxOptions": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptions:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptions",
                    "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "seccompProfile": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfile:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfile",
                    "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilities:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilities": {
            "properties": {
                "adds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Added capabilities\n"
                },
                "drops": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Removed capabilities\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptions:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptions": {
            "properties": {
                "level": {
                    "type": "string",
                    "description": "Level is SELinux level label that applies to the container.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role is a SELinux role label that applies to the container.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type is a SELinux type label that applies to the container.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User is a SELinux user label that applies to the container.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfile:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfile": {
            "properties": {
                "localhostProfile": {
                    "type": "string",
                    "description": "Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbe:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExec:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpc:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe Defaults to `10`.\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExec:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpc:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMount:K8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMount": {
            "properties": {
                "mountPath": {
                    "type": "string",
                    "description": "Path within the container at which the volume should be mounted. Must not contain ':'.\n"
                },
                "mountPropagation": {
                    "type": "string",
                    "description": "Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "This must match the Name of a Volume.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.\n"
                },
                "subPath": {
                    "type": "string",
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).\n"
                }
            },
            "type": "object",
            "required": [
                "mountPath",
                "name"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfig:K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfig": {
            "properties": {
                "nameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.\n"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOption:K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOption"
                    },
                    "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.\n"
                },
                "searches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOption:K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOption": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the option.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the option. Optional: Defaults to empty.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecHostAlias:K8sCronJobSpecJobTemplateSpecTemplateSpecHostAlias": {
            "properties": {
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Hostnames for the IP address.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP address of the host file entry.\n"
                }
            },
            "type": "object",
            "required": [
                "hostnames",
                "ip"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecret:K8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecret": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainer:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainer": {
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n"
                },
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n"
                },
                "envFroms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFrom:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFrom"
                    },
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.\n"
                },
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnv:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnv"
                    },
                    "description": "List of environment variables to set in the container. Cannot be updated.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/\n"
                },
                "imagePullPolicy": {
                    "type": "string",
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images\n"
                },
                "lifecycle": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycle:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycle",
                    "description": "Actions that the management system should take in response to container lifecycle events\n"
                },
                "livenessProbe": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbe:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbe",
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPort:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPort"
                    },
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.\n"
                },
                "readinessProbe": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbe:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbe",
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "resources": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResources:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResources",
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n"
                },
                "securityContext": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContext:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContext",
                    "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n"
                },
                "startupProbe": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbe:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbe",
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n"
                },
                "stdin": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.\n"
                },
                "stdinOnce": {
                    "type": "boolean",
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.\n"
                },
                "terminationMessagePath": {
                    "type": "string",
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.\n"
                },
                "terminationMessagePolicy": {
                    "type": "string",
                    "description": "Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n"
                },
                "tty": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a TTY for itself Defaults to `false`.\n"
                },
                "volumeMounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMount:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMount"
                    },
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.\n"
                },
                "workingDir": {
                    "type": "string",
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "imagePullPolicy",
                        "name",
                        "resources",
                        "terminationMessagePolicy"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnv:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER\n"
                },
                "value": {
                    "type": "string",
                    "description": "Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".\n"
                },
                "valueFrom": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFrom:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFrom",
                    "description": "Source for the environment variable's value\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFrom:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFrom": {
            "properties": {
                "configMapRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRef:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRef",
                    "description": "The ConfigMap to select from\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRef:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRef",
                    "description": "The Secret to select from\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRef:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap must be defined\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRef:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret must be defined\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFrom:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFrom": {
            "properties": {
                "configMapKeyRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef",
                    "description": "Selects a key of a ConfigMap.\n"
                },
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRef",
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n"
                },
                "secretKeyRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef",
                    "description": "Selects a key of a secret in the pod's namespace.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to select.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap or its key must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\". Defaults to `v1`.\n"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "divisor": {
                    "type": "string",
                    "description": "Defaults to `1`.\n"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n"
                }
            },
            "type": "object",
            "required": [
                "resource"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the secret to select from. Must be a valid secret key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret or its key must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycle:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycle": {
            "properties": {
                "postStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStart:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStart"
                    },
                    "description": "post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n"
                },
                "preStops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStop:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStop"
                    },
                    "description": "pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStart:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStart": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExec:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExec:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStop:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStop": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExec:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExec:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbe:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExec:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpc:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe Defaults to `10`.\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExec:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpc:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPort:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPort": {
            "properties": {
                "containerPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536.\n"
                },
                "hostIp": {
                    "type": "string",
                    "description": "What host IP to bind the external port to.\n"
                },
                "hostPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.\n"
                },
                "name": {
                    "type": "string",
                    "description": "If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\". Defaults to `TCP`.\n"
                }
            },
            "type": "object",
            "required": [
                "containerPort"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbe:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExec:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpc:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe Defaults to `10`.\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExec:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpc:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResources:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResources": {
            "properties": {
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n"
                },
                "requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "limits",
                        "requests"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContext:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContext": {
            "properties": {
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.\n"
                },
                "capabilities": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilities:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilities",
                    "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.\n"
                },
                "privileged": {
                    "type": "boolean",
                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.\n"
                },
                "readOnlyRootFilesystem": {
                    "type": "boolean",
                    "description": "Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.\n"
                },
                "runAsGroup": {
                    "type": "string",
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "runAsUser": {
                    "type": "string",
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "seLinuxOptions": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions",
                    "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "seccompProfile": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfile:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfile",
                    "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilities:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilities": {
            "properties": {
                "adds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Added capabilities\n"
                },
                "drops": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Removed capabilities\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions": {
            "properties": {
                "level": {
                    "type": "string",
                    "description": "Level is SELinux level label that applies to the container.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role is a SELinux role label that applies to the container.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type is a SELinux type label that applies to the container.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User is a SELinux user label that applies to the container.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfile:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfile": {
            "properties": {
                "localhostProfile": {
                    "type": "string",
                    "description": "Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbe:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExec:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpc:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe Defaults to `10`.\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExec:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpc:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGet:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocket:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMount:K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMount": {
            "properties": {
                "mountPath": {
                    "type": "string",
                    "description": "Path within the container at which the volume should be mounted. Must not contain ':'.\n"
                },
                "mountPropagation": {
                    "type": "string",
                    "description": "Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "This must match the Name of a Volume.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.\n"
                },
                "subPath": {
                    "type": "string",
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).\n"
                }
            },
            "type": "object",
            "required": [
                "mountPath",
                "name"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGate:K8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGate": {
            "properties": {
                "conditionType": {
                    "type": "string",
                    "description": "refers to a condition in the pod's condition list with matching type.\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContext:K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContext": {
            "properties": {
                "fsGroup": {
                    "type": "string",
                    "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.\n"
                },
                "fsGroupChangePolicy": {
                    "type": "string",
                    "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.\n"
                },
                "runAsGroup": {
                    "type": "string",
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n"
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "runAsUser": {
                    "type": "string",
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n"
                },
                "seLinuxOptions": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptions:K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptions",
                    "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n"
                },
                "seccompProfile": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfile:K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfile",
                    "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.\n"
                },
                "supplementalGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.\n"
                },
                "sysctls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctl:K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctl"
                    },
                    "description": "holds a list of namespaced sysctls used for the pod.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptions:K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptions": {
            "properties": {
                "level": {
                    "type": "string",
                    "description": "Level is SELinux level label that applies to the container.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role is a SELinux role label that applies to the container.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type is a SELinux type label that applies to the container.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User is a SELinux user label that applies to the container.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfile:K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfile": {
            "properties": {
                "localhostProfile": {
                    "type": "string",
                    "description": "Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctl:K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctl": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of a property to set.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of a property to set.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecToleration:K8sCronJobSpecJobTemplateSpecTemplateSpecToleration": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category. Defaults to `Equal`.\n"
                },
                "tolerationSeconds": {
                    "type": "string",
                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraint:K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraint": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelector:K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "maxSkew": {
                    "type": "integer",
                    "description": "describes the degree to which pods may be unevenly distributed. Defaults to `1`.\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.\n"
                },
                "whenUnsatisfiable": {
                    "type": "string",
                    "description": "indicates how to deal with a pod if it doesn't satisfy the spread constraint. Defaults to `DoNotSchedule`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labelSelectors"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelector:K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression:K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression:K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolume:K8sCronJobSpecJobTemplateSpecTemplateSpecVolume": {
            "properties": {
                "awsElasticBlockStore": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStore:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStore",
                    "description": "Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                },
                "azureDisk": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDisk:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDisk",
                    "description": "Represents an Azure Data Disk mount on the host and bind mount to the pod.\n"
                },
                "azureFile": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFile:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFile",
                    "description": "Represents an Azure File Service mount on the host and bind mount to the pod.\n"
                },
                "cephFs": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFs:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFs",
                    "description": "Represents a Ceph FS mount on the host that shares a pod's lifetime\n"
                },
                "cinder": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinder:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinder",
                    "description": "Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                },
                "configMap": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMap:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMap",
                    "description": "ConfigMap represents a configMap that should populate this volume\n"
                },
                "csi": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsi:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsi",
                    "description": "Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi\n"
                },
                "downwardApi": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApi:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApi",
                    "description": "DownwardAPI represents downward API about the pod that should populate this volume\n"
                },
                "emptyDir": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDir:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDir",
                    "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n"
                },
                "ephemeral": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeral:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeral",
                    "description": "Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes\n"
                },
                "fc": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFc:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFc",
                    "description": "Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n"
                },
                "flexVolume": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolume:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolume",
                    "description": "Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.\n"
                },
                "flocker": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlocker:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlocker",
                    "description": "Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running\n"
                },
                "gcePersistentDisk": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDisk:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDisk",
                    "description": "Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "gitRepo": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepo:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepo",
                    "description": "GitRepo represents a git repository at a particular revision.\n"
                },
                "glusterfs": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfs:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfs",
                    "description": "Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md\n"
                },
                "hostPath": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPath:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPath",
                    "description": "Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n"
                },
                "iscsi": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsi:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsi",
                    "description": "Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.\n"
                },
                "local": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocal:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocal",
                    "description": "Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local\n"
                },
                "name": {
                    "type": "string",
                    "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "nfs": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfs:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfs",
                    "description": "Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                },
                "persistentVolumeClaim": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaim:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaim",
                    "description": "The specification of a persistent volume.\n"
                },
                "photonPersistentDisk": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDisk:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDisk",
                    "description": "Represents a PhotonController persistent disk attached and mounted on kubelets host machine\n"
                },
                "projected": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjected:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjected",
                    "description": "Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected\n"
                },
                "quobyte": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyte:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyte",
                    "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n"
                },
                "rbd": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbd:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbd",
                    "description": "Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md\n"
                },
                "secret": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecret:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecret",
                    "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                },
                "vsphereVolume": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolume:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolume",
                    "description": "Represents a vSphere volume attached and mounted on kubelets host machine\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStore:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStore": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                },
                "partition": {
                    "type": "integer",
                    "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to set the read-only property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                }
            },
            "type": "object",
            "required": [
                "volumeId"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDisk:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDisk": {
            "properties": {
                "cachingMode": {
                    "type": "string",
                    "description": "Host Caching mode: None, Read Only, Read Write.\n"
                },
                "dataDiskUri": {
                    "type": "string",
                    "description": "The URI the data disk in the blob storage\n"
                },
                "diskName": {
                    "type": "string",
                    "description": "The Name of the data disk in the blob storage\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). Defaults to `false`.\n"
                }
            },
            "type": "object",
            "required": [
                "cachingMode",
                "dataDiskUri",
                "diskName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cachingMode",
                        "dataDiskUri",
                        "diskName",
                        "kind"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFile:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFile": {
            "properties": {
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "The name of secret that contains Azure Storage Account Name and Key\n"
                },
                "secretNamespace": {
                    "type": "string",
                    "description": "The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is \"default\" namespace.\n",
                    "willReplaceOnChanges": true
                },
                "shareName": {
                    "type": "string",
                    "description": "Share Name\n"
                }
            },
            "type": "object",
            "required": [
                "secretName",
                "shareName"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFs:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFs": {
            "properties": {
                "monitors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "path": {
                    "type": "string",
                    "description": "Used as the mounted root, rather than the full Ceph tree, default is /\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "secretFile": {
                    "type": "string",
                    "description": "The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRef",
                    "description": "Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "user": {
                    "type": "string",
                    "description": "User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                }
            },
            "type": "object",
            "required": [
                "monitors"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "namespace"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinder:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinder": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                }
            },
            "type": "object",
            "required": [
                "volumeId"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMap:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMap": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItem:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the ConfigMap or its keys must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItem:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsi:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsi": {
            "properties": {
                "driver": {
                    "type": "string",
                    "description": "the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "nodePublishSecretRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRef",
                    "description": "A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to set the read-only property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi\n"
                },
                "volumeAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Attributes of the volume to publish.\n"
                }
            },
            "type": "object",
            "required": [
                "driver"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApi:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApi": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItem:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItem:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItem": {
            "properties": {
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRef",
                    "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n"
                }
            },
            "type": "object",
            "required": [
                "fieldRef",
                "path"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\". Defaults to `v1`.\n"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "divisor": {
                    "type": "string",
                    "description": "Defaults to `1`.\n"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n"
                }
            },
            "type": "object",
            "required": [
                "containerName",
                "resource"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDir:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDir": {
            "properties": {
                "medium": {
                    "type": "string",
                    "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir Defaults to ``.\n"
                },
                "sizeLimit": {
                    "type": "string",
                    "description": "Total amount of local storage required for this EmptyDir volume.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeral:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeral": {
            "properties": {
                "volumeClaimTemplate": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate",
                    "description": "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.\n"
                }
            },
            "type": "object",
            "required": [
                "volumeClaimTemplate"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata",
                    "description": "May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.\n"
                },
                "spec": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec",
                    "description": "The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.\n"
                }
            },
            "type": "object",
            "required": [
                "spec"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labels"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec": {
            "properties": {
                "accessModes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1\n",
                    "willReplaceOnChanges": true
                },
                "resources": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources",
                    "description": "A list of the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources\n"
                },
                "storageClassName": {
                    "type": "string",
                    "description": "Name of the storage class requested by the claim\n",
                    "willReplaceOnChanges": true
                },
                "volumeMode": {
                    "type": "string",
                    "description": "Kubernetes supports two volumeModes of PersistentVolumes: `Filesystem` and `Block`.\n"
                },
                "volumeName": {
                    "type": "string",
                    "description": "The binding reference to the PersistentVolume backing this claim.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "accessModes",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessModes",
                        "resources",
                        "storageClassName",
                        "volumeMode",
                        "volumeName"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources": {
            "properties": {
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/\n",
                    "willReplaceOnChanges": true
                },
                "requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "requests"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFc:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFc": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "lun": {
                    "type": "integer",
                    "description": "FC target lun number\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).\n"
                },
                "targetWwNs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "FC target worldwide names (WWNs)\n"
                }
            },
            "type": "object",
            "required": [
                "lun",
                "targetWwNs"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolume:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolume": {
            "properties": {
                "driver": {
                    "type": "string",
                    "description": "Driver is the name of the driver to use for this volume.\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Extra command options if any.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRef",
                    "description": "Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.\n"
                }
            },
            "type": "object",
            "required": [
                "driver"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "namespace"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlocker:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlocker": {
            "properties": {
                "datasetName": {
                    "type": "string",
                    "description": "Name of the dataset stored as metadata \u003e name on the dataset for Flocker should be considered as deprecated\n"
                },
                "datasetUuid": {
                    "type": "string",
                    "description": "UUID of the dataset. This is unique identifier of a Flocker dataset\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDisk:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDisk": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "partition": {
                    "type": "integer",
                    "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "pdName": {
                    "type": "string",
                    "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                }
            },
            "type": "object",
            "required": [
                "pdName"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepo:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepo": {
            "properties": {
                "directory": {
                    "type": "string",
                    "description": "Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Repository URL\n"
                },
                "revision": {
                    "type": "string",
                    "description": "Commit hash for the specified revision.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfs:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfs": {
            "properties": {
                "endpointsName": {
                    "type": "string",
                    "description": "The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n"
                },
                "path": {
                    "type": "string",
                    "description": "The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n"
                }
            },
            "type": "object",
            "required": [
                "endpointsName",
                "path"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPath:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPath": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type for HostPath volume. Allowed values are \"\" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsi:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsi": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\n"
                },
                "iqn": {
                    "type": "string",
                    "description": "Target iSCSI Qualified Name.\n"
                },
                "iscsiInterface": {
                    "type": "string",
                    "description": "iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp). Defaults to `default`.\n"
                },
                "lun": {
                    "type": "integer",
                    "description": "iSCSI target lun number.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false.\n"
                },
                "targetPortal": {
                    "type": "string",
                    "description": "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n"
                }
            },
            "type": "object",
            "required": [
                "iqn",
                "targetPortal"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocal:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocal": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfs:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfs": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                }
            },
            "type": "object",
            "required": [
                "path",
                "server"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaim:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaim": {
            "properties": {
                "claimName": {
                    "type": "string",
                    "description": "ClaimName is the name of a PersistentVolumeClaim in the same\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Will force the ReadOnly setting in VolumeMounts. Defaults to `false`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDisk:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDisk": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "pdId": {
                    "type": "string",
                    "description": "ID that identifies Photon Controller persistent disk\n"
                }
            },
            "type": "object",
            "required": [
                "pdId"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjected:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjected": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSource:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSource"
                    },
                    "description": "Source of the volume to project in the directory.\n"
                }
            },
            "type": "object",
            "required": [
                "sources"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSource:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSource": {
            "properties": {
                "configMaps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMap:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMap"
                    },
                    "description": "ConfigMap represents a configMap that should populate this volume\n"
                },
                "downwardApi": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApi:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApi",
                    "description": "DownwardAPI represents downward API about the pod that should populate this volume\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecret:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecret"
                    },
                    "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                },
                "serviceAccountToken": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountToken:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountToken",
                    "description": "A projected service account token volume\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMap:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMap": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItem:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the ConfigMap or it's keys must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItem:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApi:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApi": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItem:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItem"
                    },
                    "description": "Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItem:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItem": {
            "properties": {
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef",
                    "description": "Selects a field of the pod: only annotations, labels, name and namespace are supported.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to 'v1'. Defaults to `v1`.\n"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "divisor": {
                    "type": "string",
                    "description": "Defaults to `1`.\n"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n"
                }
            },
            "type": "object",
            "required": [
                "containerName",
                "resource"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecret:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecret": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItem:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the Secret or it's keys must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItem:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountToken:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountToken": {
            "properties": {
                "audience": {
                    "type": "string",
                    "description": "Audience is the intended audience of the token\n"
                },
                "expirationSeconds": {
                    "type": "integer",
                    "description": "ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds). Defaults to `3600`.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path specifies a relative path to the mount point of the projected volume.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyte:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyte": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "Group to map volume access to Default is no group\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.\n"
                },
                "registry": {
                    "type": "string",
                    "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes\n"
                },
                "user": {
                    "type": "string",
                    "description": "User to map volume access to Defaults to serivceaccount user\n"
                },
                "volume": {
                    "type": "string",
                    "description": "Volume is a string that references an already created Quobyte volume by name.\n"
                }
            },
            "type": "object",
            "required": [
                "registry",
                "volume"
            ]
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbd:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbd": {
            "properties": {
                "cephMonitors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\n"
                },
                "keyring": {
                    "type": "string",
                    "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "radosUser": {
                    "type": "string",
                    "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `admin`.\n"
                },
                "rbdImage": {
                    "type": "string",
                    "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "rbdPool": {
                    "type": "string",
                    "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it. Defaults to `rbd`.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `false`.\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRef",
                    "description": "Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                }
            },
            "type": "object",
            "required": [
                "cephMonitors",
                "rbdImage"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cephMonitors",
                        "keyring",
                        "rbdImage"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRef:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "namespace"
                    ]
                }
            }
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecret:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecret": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItem:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the Secret or its keys must be defined.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItem:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolume:K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolume": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "volumePath": {
                    "type": "string",
                    "description": "Path that identifies vSphere volume vmdk\n"
                }
            },
            "type": "object",
            "required": [
                "volumePath"
            ]
        },
        "duplocloud:index/K8sJobMetadata:K8sJobMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n"
                },
                "generateName": {
                    "type": "string",
                    "description": "Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency\n",
                    "willReplaceOnChanges": true
                },
                "generation": {
                    "type": "integer",
                    "description": "A sequence number representing a specific generation of the desired state.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n",
                    "willReplaceOnChanges": true
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace defines the space within which name of the job must be unique.\n",
                    "willReplaceOnChanges": true
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "annotations",
                        "generation",
                        "labels",
                        "name",
                        "namespace",
                        "resourceVersion",
                        "uid"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpec:K8sJobSpec": {
            "properties": {
                "activeDeadlineSeconds": {
                    "type": "integer",
                    "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n"
                },
                "backoffLimit": {
                    "type": "integer",
                    "description": "Specifies the number of retries before marking this job failed. Defaults to 6 Defaults to `6`.\n"
                },
                "completionMode": {
                    "type": "string",
                    "description": "Specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`. More info: https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode\n",
                    "willReplaceOnChanges": true
                },
                "completions": {
                    "type": "integer",
                    "description": "Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.\n",
                    "willReplaceOnChanges": true
                },
                "manualSelector": {
                    "type": "boolean",
                    "description": "Controls generation of pod labels and pod selectors. Leave unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md\n"
                },
                "parallelism": {
                    "type": "integer",
                    "description": "Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) \u003c .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.\n"
                },
                "selector": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecSelector:K8sJobSpecSelector",
                    "description": "A label query over volumes to consider for binding.\n",
                    "willReplaceOnChanges": true
                },
                "template": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplate:K8sJobSpecTemplate",
                    "description": "Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n",
                    "willReplaceOnChanges": true
                },
                "ttlSecondsAfterFinished": {
                    "type": "string",
                    "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.\n"
                }
            },
            "type": "object",
            "required": [
                "template"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "activeDeadlineSeconds",
                        "completionMode",
                        "manualSelector",
                        "selector",
                        "template"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecSelector:K8sJobSpecSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecSelectorMatchExpression:K8sJobSpecSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n",
                    "willReplaceOnChanges": true
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "matchLabels"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecSelectorMatchExpression:K8sJobSpecSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n",
                    "willReplaceOnChanges": true
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n",
                    "willReplaceOnChanges": true
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplate:K8sJobSpecTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateMetadata:K8sJobSpecTemplateMetadata",
                    "description": "Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                },
                "spec": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpec:K8sJobSpecTemplateSpec",
                    "description": "Spec of the pods owned by the job\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "metadata"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateMetadata:K8sJobSpecTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n"
                },
                "generateName": {
                    "type": "string",
                    "description": "Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency\n",
                    "willReplaceOnChanges": true
                },
                "generation": {
                    "type": "integer",
                    "description": "A sequence number representing a specific generation of the desired state.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n",
                    "willReplaceOnChanges": true
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "annotations",
                        "generation",
                        "labels",
                        "name",
                        "resourceVersion",
                        "uid"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpec:K8sJobSpecTemplateSpec": {
            "properties": {
                "activeDeadlineSeconds": {
                    "type": "integer",
                    "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n"
                },
                "affinity": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinity:K8sJobSpecTemplateSpecAffinity",
                    "description": "Optional pod scheduling constraints.\n",
                    "willReplaceOnChanges": true
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted. Defaults to `true`.\n",
                    "willReplaceOnChanges": true
                },
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainer:K8sJobSpecTemplateSpecContainer"
                    },
                    "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/\n"
                },
                "dnsConfig": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecDnsConfig:K8sJobSpecTemplateSpecDnsConfig",
                    "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty\n"
                },
                "dnsPolicy": {
                    "type": "string",
                    "description": "Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy\n",
                    "willReplaceOnChanges": true
                },
                "enableServiceLinks": {
                    "type": "boolean",
                    "description": "Enables generating environment variables for service discovery. Defaults to true. Defaults to `true`.\n",
                    "willReplaceOnChanges": true
                },
                "hostAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecHostAlias:K8sJobSpecTemplateSpecHostAlias"
                    },
                    "description": "List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.\n",
                    "willReplaceOnChanges": true
                },
                "hostIpc": {
                    "type": "boolean",
                    "description": "Use the host's ipc namespace. Optional: Defaults to false.\n",
                    "willReplaceOnChanges": true
                },
                "hostNetwork": {
                    "type": "boolean",
                    "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.\n",
                    "willReplaceOnChanges": true
                },
                "hostPid": {
                    "type": "boolean",
                    "description": "Use the host's pid namespace.\n",
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n",
                    "willReplaceOnChanges": true
                },
                "imagePullSecrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecImagePullSecret:K8sJobSpecTemplateSpecImagePullSecret"
                    },
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod\n"
                },
                "initContainers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainer:K8sJobSpecTemplateSpecInitContainer"
                    },
                    "description": "List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n",
                    "willReplaceOnChanges": true
                },
                "nodeName": {
                    "type": "string",
                    "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n",
                    "willReplaceOnChanges": true
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.\n",
                    "willReplaceOnChanges": true
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.\n",
                    "willReplaceOnChanges": true
                },
                "readinessGates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecReadinessGate:K8sJobSpecTemplateSpecReadinessGate"
                    },
                    "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md\n"
                },
                "restartPolicy": {
                    "type": "string",
                    "description": "Restart policy for all containers within the pod. One of OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy. Defaults to `Never`.\n",
                    "willReplaceOnChanges": true
                },
                "runtimeClassName": {
                    "type": "string",
                    "description": "RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class\n",
                    "willReplaceOnChanges": true
                },
                "schedulerName": {
                    "type": "string",
                    "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n",
                    "willReplaceOnChanges": true
                },
                "securityContext": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecSecurityContext:K8sJobSpecTemplateSpecSecurityContext",
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty\n"
                },
                "serviceAccountName": {
                    "type": "string",
                    "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.\n",
                    "willReplaceOnChanges": true
                },
                "shareProcessNamespace": {
                    "type": "boolean",
                    "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "If specified, the fully qualified Pod hostname will be \"...svc.\". If not specified, the pod will not have a domainname at all..\n",
                    "willReplaceOnChanges": true
                },
                "terminationGracePeriodSeconds": {
                    "type": "integer",
                    "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.\n",
                    "willReplaceOnChanges": true
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecToleration:K8sJobSpecTemplateSpecToleration"
                    },
                    "description": "If specified, the pod's toleration. Optional: Defaults to empty\n"
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecTopologySpreadConstraint:K8sJobSpecTemplateSpecTopologySpreadConstraint"
                    },
                    "description": "describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolume:K8sJobSpecTemplateSpecVolume"
                    },
                    "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "activeDeadlineSeconds",
                        "dnsPolicy",
                        "hostAliases",
                        "hostIpc",
                        "hostNetwork",
                        "hostPid",
                        "hostname",
                        "imagePullSecrets",
                        "nodeName",
                        "nodeSelector",
                        "priorityClassName",
                        "readinessGates",
                        "runtimeClassName",
                        "schedulerName",
                        "securityContext",
                        "serviceAccountName",
                        "subdomain",
                        "terminationGracePeriodSeconds"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinity:K8sJobSpecTemplateSpecAffinity": {
            "properties": {
                "nodeAffinity": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityNodeAffinity:K8sJobSpecTemplateSpecAffinityNodeAffinity",
                    "description": "Node affinity scheduling rules for the pod.\n"
                },
                "podAffinity": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinity:K8sJobSpecTemplateSpecAffinityPodAffinity",
                    "description": "Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)\n"
                },
                "podAntiAffinity": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinity:K8sJobSpecTemplateSpecAffinityPodAntiAffinity",
                    "description": "Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityNodeAffinity:K8sJobSpecTemplateSpecAffinityNodeAffinity": {
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution:K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.\n"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution",
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "preferredDuringSchedulingIgnoredDuringExecutions"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution:K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "preference": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference:K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference",
                    "description": "A node selector term, associated with the corresponding weight.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "weight is in the range 1-100\n"
                }
            },
            "type": "object",
            "required": [
                "preference"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "preference",
                        "weight"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference:K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression:K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression"
                    },
                    "description": "List of node selector requirements. The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression:K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "nodeSelectorTerms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm:K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm"
                    },
                    "description": "List of node selector terms. The terms are ORed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm:K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression:K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression"
                    },
                    "description": "List of node selector requirements. The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression:K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinity:K8sJobSpecTemplateSpecAffinityPodAffinity": {
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution:K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.\n"
                },
                "requiredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution:K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "preferredDuringSchedulingIgnoredDuringExecutions"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution:K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "podAffinityTerm": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm",
                    "description": "A pod affinity term, associated with the corresponding weight\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100\n"
                }
            },
            "type": "object",
            "required": [
                "podAffinityTerm",
                "weight"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labelSelectors",
                        "namespaces",
                        "topologyKey"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution:K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labelSelectors",
                        "namespaces",
                        "topologyKey"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinity:K8sJobSpecTemplateSpecAffinityPodAntiAffinity": {
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution:K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.\n"
                },
                "requiredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution:K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "preferredDuringSchedulingIgnoredDuringExecutions"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution:K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "podAffinityTerm": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm",
                    "description": "A pod affinity term, associated with the corresponding weight\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100\n"
                }
            },
            "type": "object",
            "required": [
                "podAffinityTerm",
                "weight"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labelSelectors",
                        "namespaces",
                        "topologyKey"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution:K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labelSelectors",
                        "namespaces",
                        "topologyKey"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainer:K8sJobSpecTemplateSpecContainer": {
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n",
                    "willReplaceOnChanges": true
                },
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n",
                    "willReplaceOnChanges": true
                },
                "envFroms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerEnvFrom:K8sJobSpecTemplateSpecContainerEnvFrom"
                    },
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.\n"
                },
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerEnv:K8sJobSpecTemplateSpecContainerEnv"
                    },
                    "description": "List of environment variables to set in the container. Cannot be updated.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/\n",
                    "willReplaceOnChanges": true
                },
                "imagePullPolicy": {
                    "type": "string",
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images\n",
                    "willReplaceOnChanges": true
                },
                "lifecycle": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLifecycle:K8sJobSpecTemplateSpecContainerLifecycle",
                    "description": "Actions that the management system should take in response to container lifecycle events\n"
                },
                "livenessProbe": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLivenessProbe:K8sJobSpecTemplateSpecContainerLivenessProbe",
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.\n",
                    "willReplaceOnChanges": true
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerPort:K8sJobSpecTemplateSpecContainerPort"
                    },
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.\n"
                },
                "readinessProbe": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerReadinessProbe:K8sJobSpecTemplateSpecContainerReadinessProbe",
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n",
                    "willReplaceOnChanges": true
                },
                "resources": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerResources:K8sJobSpecTemplateSpecContainerResources",
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n",
                    "willReplaceOnChanges": true
                },
                "securityContext": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerSecurityContext:K8sJobSpecTemplateSpecContainerSecurityContext",
                    "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n",
                    "willReplaceOnChanges": true
                },
                "startupProbe": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerStartupProbe:K8sJobSpecTemplateSpecContainerStartupProbe",
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n",
                    "willReplaceOnChanges": true
                },
                "stdin": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "stdinOnce": {
                    "type": "boolean",
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "terminationMessagePath": {
                    "type": "string",
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.\n",
                    "willReplaceOnChanges": true
                },
                "terminationMessagePolicy": {
                    "type": "string",
                    "description": "Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n",
                    "willReplaceOnChanges": true
                },
                "tty": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a TTY for itself Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "volumeMounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerVolumeMount:K8sJobSpecTemplateSpecContainerVolumeMount"
                    },
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.\n",
                    "willReplaceOnChanges": true
                },
                "workingDir": {
                    "type": "string",
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "imagePullPolicy",
                        "name",
                        "resources",
                        "terminationMessagePolicy"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerEnv:K8sJobSpecTemplateSpecContainerEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".\n",
                    "willReplaceOnChanges": true
                },
                "valueFrom": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerEnvValueFrom:K8sJobSpecTemplateSpecContainerEnvValueFrom",
                    "description": "Source for the environment variable's value\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerEnvFrom:K8sJobSpecTemplateSpecContainerEnvFrom": {
            "properties": {
                "configMapRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerEnvFromConfigMapRef:K8sJobSpecTemplateSpecContainerEnvFromConfigMapRef",
                    "description": "The ConfigMap to select from\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n",
                    "willReplaceOnChanges": true
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerEnvFromSecretRef:K8sJobSpecTemplateSpecContainerEnvFromSecretRef",
                    "description": "The Secret to select from\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerEnvFromConfigMapRef:K8sJobSpecTemplateSpecContainerEnvFromConfigMapRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n",
                    "willReplaceOnChanges": true
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap must be defined\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerEnvFromSecretRef:K8sJobSpecTemplateSpecContainerEnvFromSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n",
                    "willReplaceOnChanges": true
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret must be defined\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerEnvValueFrom:K8sJobSpecTemplateSpecContainerEnvValueFrom": {
            "properties": {
                "configMapKeyRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef:K8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef",
                    "description": "Selects a key of a ConfigMap.\n"
                },
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerEnvValueFromFieldRef:K8sJobSpecTemplateSpecContainerEnvValueFromFieldRef",
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRef:K8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n"
                },
                "secretKeyRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRef:K8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRef",
                    "description": "Selects a key of a secret in the pod's namespace.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef:K8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to select.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n",
                    "willReplaceOnChanges": true
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap or its key must be defined.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerEnvValueFromFieldRef:K8sJobSpecTemplateSpecContainerEnvValueFromFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\". Defaults to `v1`.\n",
                    "willReplaceOnChanges": true
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRef:K8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "divisor": {
                    "type": "string",
                    "description": "Defaults to `1`.\n"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "resource"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRef:K8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the secret to select from. Must be a valid secret key.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n",
                    "willReplaceOnChanges": true
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret or its key must be defined.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLifecycle:K8sJobSpecTemplateSpecContainerLifecycle": {
            "properties": {
                "postStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePostStart:K8sJobSpecTemplateSpecContainerLifecyclePostStart"
                    },
                    "description": "post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n",
                    "willReplaceOnChanges": true
                },
                "preStops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePreStop:K8sJobSpecTemplateSpecContainerLifecyclePreStop"
                    },
                    "description": "pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePostStart:K8sJobSpecTemplateSpecContainerLifecyclePostStart": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePostStartExec:K8sJobSpecTemplateSpecContainerLifecyclePostStartExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGet:K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocket:K8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePostStartExec:K8sJobSpecTemplateSpecContainerLifecyclePostStartExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGet:K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader:K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader:K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocket:K8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePreStop:K8sJobSpecTemplateSpecContainerLifecyclePreStop": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePreStopExec:K8sJobSpecTemplateSpecContainerLifecyclePreStopExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGet:K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocket:K8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePreStopExec:K8sJobSpecTemplateSpecContainerLifecyclePreStopExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGet:K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader:K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader:K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocket:K8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLivenessProbe:K8sJobSpecTemplateSpecContainerLivenessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLivenessProbeExec:K8sJobSpecTemplateSpecContainerLivenessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLivenessProbeGrpc:K8sJobSpecTemplateSpecContainerLivenessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLivenessProbeHttpGet:K8sJobSpecTemplateSpecContainerLivenessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe Defaults to `10`.\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLivenessProbeTcpSocket:K8sJobSpecTemplateSpecContainerLivenessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLivenessProbeExec:K8sJobSpecTemplateSpecContainerLivenessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLivenessProbeGrpc:K8sJobSpecTemplateSpecContainerLivenessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLivenessProbeHttpGet:K8sJobSpecTemplateSpecContainerLivenessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader:K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader:K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerLivenessProbeTcpSocket:K8sJobSpecTemplateSpecContainerLivenessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerPort:K8sJobSpecTemplateSpecContainerPort": {
            "properties": {
                "containerPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536.\n",
                    "willReplaceOnChanges": true
                },
                "hostIp": {
                    "type": "string",
                    "description": "What host IP to bind the external port to.\n",
                    "willReplaceOnChanges": true
                },
                "hostPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\". Defaults to `TCP`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "containerPort"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerReadinessProbe:K8sJobSpecTemplateSpecContainerReadinessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerReadinessProbeExec:K8sJobSpecTemplateSpecContainerReadinessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerReadinessProbeGrpc:K8sJobSpecTemplateSpecContainerReadinessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerReadinessProbeHttpGet:K8sJobSpecTemplateSpecContainerReadinessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe Defaults to `10`.\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerReadinessProbeTcpSocket:K8sJobSpecTemplateSpecContainerReadinessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerReadinessProbeExec:K8sJobSpecTemplateSpecContainerReadinessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerReadinessProbeGrpc:K8sJobSpecTemplateSpecContainerReadinessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerReadinessProbeHttpGet:K8sJobSpecTemplateSpecContainerReadinessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader:K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader:K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerReadinessProbeTcpSocket:K8sJobSpecTemplateSpecContainerReadinessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerResources:K8sJobSpecTemplateSpecContainerResources": {
            "properties": {
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n",
                    "willReplaceOnChanges": true
                },
                "requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "limits",
                        "requests"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerSecurityContext:K8sJobSpecTemplateSpecContainerSecurityContext": {
            "properties": {
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.\n",
                    "willReplaceOnChanges": true
                },
                "capabilities": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerSecurityContextCapabilities:K8sJobSpecTemplateSpecContainerSecurityContextCapabilities",
                    "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.\n"
                },
                "privileged": {
                    "type": "boolean",
                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "readOnlyRootFilesystem": {
                    "type": "boolean",
                    "description": "Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "runAsGroup": {
                    "type": "string",
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n",
                    "willReplaceOnChanges": true
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n",
                    "willReplaceOnChanges": true
                },
                "runAsUser": {
                    "type": "string",
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n",
                    "willReplaceOnChanges": true
                },
                "seLinuxOptions": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptions:K8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptions",
                    "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "seccompProfile": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerSecurityContextSeccompProfile:K8sJobSpecTemplateSpecContainerSecurityContextSeccompProfile",
                    "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerSecurityContextCapabilities:K8sJobSpecTemplateSpecContainerSecurityContextCapabilities": {
            "properties": {
                "adds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Added capabilities\n",
                    "willReplaceOnChanges": true
                },
                "drops": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Removed capabilities\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptions:K8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptions": {
            "properties": {
                "level": {
                    "type": "string",
                    "description": "Level is SELinux level label that applies to the container.\n",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "description": "Role is a SELinux role label that applies to the container.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type is a SELinux type label that applies to the container.\n",
                    "willReplaceOnChanges": true
                },
                "user": {
                    "type": "string",
                    "description": "User is a SELinux user label that applies to the container.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerSecurityContextSeccompProfile:K8sJobSpecTemplateSpecContainerSecurityContextSeccompProfile": {
            "properties": {
                "localhostProfile": {
                    "type": "string",
                    "description": "Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerStartupProbe:K8sJobSpecTemplateSpecContainerStartupProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerStartupProbeExec:K8sJobSpecTemplateSpecContainerStartupProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerStartupProbeGrpc:K8sJobSpecTemplateSpecContainerStartupProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerStartupProbeHttpGet:K8sJobSpecTemplateSpecContainerStartupProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe Defaults to `10`.\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerStartupProbeTcpSocket:K8sJobSpecTemplateSpecContainerStartupProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerStartupProbeExec:K8sJobSpecTemplateSpecContainerStartupProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerStartupProbeGrpc:K8sJobSpecTemplateSpecContainerStartupProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerStartupProbeHttpGet:K8sJobSpecTemplateSpecContainerStartupProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader:K8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader:K8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerStartupProbeTcpSocket:K8sJobSpecTemplateSpecContainerStartupProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecContainerVolumeMount:K8sJobSpecTemplateSpecContainerVolumeMount": {
            "properties": {
                "mountPath": {
                    "type": "string",
                    "description": "Path within the container at which the volume should be mounted. Must not contain ':'.\n"
                },
                "mountPropagation": {
                    "type": "string",
                    "description": "Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "This must match the Name of a Volume.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.\n"
                },
                "subPath": {
                    "type": "string",
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).\n"
                }
            },
            "type": "object",
            "required": [
                "mountPath",
                "name"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecDnsConfig:K8sJobSpecTemplateSpecDnsConfig": {
            "properties": {
                "nameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.\n",
                    "willReplaceOnChanges": true
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecDnsConfigOption:K8sJobSpecTemplateSpecDnsConfigOption"
                    },
                    "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.\n"
                },
                "searches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecDnsConfigOption:K8sJobSpecTemplateSpecDnsConfigOption": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the option.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Value of the option. Optional: Defaults to empty.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecHostAlias:K8sJobSpecTemplateSpecHostAlias": {
            "properties": {
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Hostnames for the IP address.\n",
                    "willReplaceOnChanges": true
                },
                "ip": {
                    "type": "string",
                    "description": "IP address of the host file entry.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "hostnames",
                "ip"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecImagePullSecret:K8sJobSpecTemplateSpecImagePullSecret": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainer:K8sJobSpecTemplateSpecInitContainer": {
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n",
                    "willReplaceOnChanges": true
                },
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n",
                    "willReplaceOnChanges": true
                },
                "envFroms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvFrom:K8sJobSpecTemplateSpecInitContainerEnvFrom"
                    },
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.\n"
                },
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnv:K8sJobSpecTemplateSpecInitContainerEnv"
                    },
                    "description": "List of environment variables to set in the container. Cannot be updated.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/\n",
                    "willReplaceOnChanges": true
                },
                "imagePullPolicy": {
                    "type": "string",
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images\n",
                    "willReplaceOnChanges": true
                },
                "lifecycle": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecycle:K8sJobSpecTemplateSpecInitContainerLifecycle",
                    "description": "Actions that the management system should take in response to container lifecycle events\n"
                },
                "livenessProbe": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLivenessProbe:K8sJobSpecTemplateSpecInitContainerLivenessProbe",
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.\n",
                    "willReplaceOnChanges": true
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerPort:K8sJobSpecTemplateSpecInitContainerPort"
                    },
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.\n"
                },
                "readinessProbe": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerReadinessProbe:K8sJobSpecTemplateSpecInitContainerReadinessProbe",
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n",
                    "willReplaceOnChanges": true
                },
                "resources": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerResources:K8sJobSpecTemplateSpecInitContainerResources",
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n",
                    "willReplaceOnChanges": true
                },
                "securityContext": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerSecurityContext:K8sJobSpecTemplateSpecInitContainerSecurityContext",
                    "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n",
                    "willReplaceOnChanges": true
                },
                "startupProbe": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerStartupProbe:K8sJobSpecTemplateSpecInitContainerStartupProbe",
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n",
                    "willReplaceOnChanges": true
                },
                "stdin": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "stdinOnce": {
                    "type": "boolean",
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "terminationMessagePath": {
                    "type": "string",
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.\n",
                    "willReplaceOnChanges": true
                },
                "terminationMessagePolicy": {
                    "type": "string",
                    "description": "Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n",
                    "willReplaceOnChanges": true
                },
                "tty": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a TTY for itself Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "volumeMounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerVolumeMount:K8sJobSpecTemplateSpecInitContainerVolumeMount"
                    },
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.\n",
                    "willReplaceOnChanges": true
                },
                "workingDir": {
                    "type": "string",
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "imagePullPolicy",
                        "name",
                        "resources",
                        "terminationMessagePolicy"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnv:K8sJobSpecTemplateSpecInitContainerEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".\n",
                    "willReplaceOnChanges": true
                },
                "valueFrom": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvValueFrom:K8sJobSpecTemplateSpecInitContainerEnvValueFrom",
                    "description": "Source for the environment variable's value\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvFrom:K8sJobSpecTemplateSpecInitContainerEnvFrom": {
            "properties": {
                "configMapRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRef:K8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRef",
                    "description": "The ConfigMap to select from\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n",
                    "willReplaceOnChanges": true
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvFromSecretRef:K8sJobSpecTemplateSpecInitContainerEnvFromSecretRef",
                    "description": "The Secret to select from\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRef:K8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n",
                    "willReplaceOnChanges": true
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap must be defined\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvFromSecretRef:K8sJobSpecTemplateSpecInitContainerEnvFromSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n",
                    "willReplaceOnChanges": true
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret must be defined\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvValueFrom:K8sJobSpecTemplateSpecInitContainerEnvValueFrom": {
            "properties": {
                "configMapKeyRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef:K8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef",
                    "description": "Selects a key of a ConfigMap.\n"
                },
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRef:K8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRef",
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef:K8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n"
                },
                "secretKeyRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef:K8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef",
                    "description": "Selects a key of a secret in the pod's namespace.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef:K8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to select.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n",
                    "willReplaceOnChanges": true
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap or its key must be defined.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRef:K8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\". Defaults to `v1`.\n",
                    "willReplaceOnChanges": true
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef:K8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "divisor": {
                    "type": "string",
                    "description": "Defaults to `1`.\n"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "resource"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef:K8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the secret to select from. Must be a valid secret key.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n",
                    "willReplaceOnChanges": true
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret or its key must be defined.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecycle:K8sJobSpecTemplateSpecInitContainerLifecycle": {
            "properties": {
                "postStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePostStart:K8sJobSpecTemplateSpecInitContainerLifecyclePostStart"
                    },
                    "description": "post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n",
                    "willReplaceOnChanges": true
                },
                "preStops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePreStop:K8sJobSpecTemplateSpecInitContainerLifecyclePreStop"
                    },
                    "description": "pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePostStart:K8sJobSpecTemplateSpecInitContainerLifecyclePostStart": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePostStartExec:K8sJobSpecTemplateSpecInitContainerLifecyclePostStartExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGet:K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket:K8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePostStartExec:K8sJobSpecTemplateSpecInitContainerLifecyclePostStartExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGet:K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader:K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader:K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket:K8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePreStop:K8sJobSpecTemplateSpecInitContainerLifecyclePreStop": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePreStopExec:K8sJobSpecTemplateSpecInitContainerLifecyclePreStopExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGet:K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket:K8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePreStopExec:K8sJobSpecTemplateSpecInitContainerLifecyclePreStopExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGet:K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader:K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader:K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket:K8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLivenessProbe:K8sJobSpecTemplateSpecInitContainerLivenessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLivenessProbeExec:K8sJobSpecTemplateSpecInitContainerLivenessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLivenessProbeGrpc:K8sJobSpecTemplateSpecInitContainerLivenessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGet:K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe Defaults to `10`.\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocket:K8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLivenessProbeExec:K8sJobSpecTemplateSpecInitContainerLivenessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLivenessProbeGrpc:K8sJobSpecTemplateSpecInitContainerLivenessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGet:K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader:K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader:K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocket:K8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerPort:K8sJobSpecTemplateSpecInitContainerPort": {
            "properties": {
                "containerPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536.\n",
                    "willReplaceOnChanges": true
                },
                "hostIp": {
                    "type": "string",
                    "description": "What host IP to bind the external port to.\n",
                    "willReplaceOnChanges": true
                },
                "hostPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\". Defaults to `TCP`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "containerPort"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerReadinessProbe:K8sJobSpecTemplateSpecInitContainerReadinessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerReadinessProbeExec:K8sJobSpecTemplateSpecInitContainerReadinessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerReadinessProbeGrpc:K8sJobSpecTemplateSpecInitContainerReadinessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGet:K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe Defaults to `10`.\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocket:K8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerReadinessProbeExec:K8sJobSpecTemplateSpecInitContainerReadinessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerReadinessProbeGrpc:K8sJobSpecTemplateSpecInitContainerReadinessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGet:K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader:K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader:K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocket:K8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerResources:K8sJobSpecTemplateSpecInitContainerResources": {
            "properties": {
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n",
                    "willReplaceOnChanges": true
                },
                "requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "limits",
                        "requests"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerSecurityContext:K8sJobSpecTemplateSpecInitContainerSecurityContext": {
            "properties": {
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.\n",
                    "willReplaceOnChanges": true
                },
                "capabilities": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerSecurityContextCapabilities:K8sJobSpecTemplateSpecInitContainerSecurityContextCapabilities",
                    "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.\n"
                },
                "privileged": {
                    "type": "boolean",
                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "readOnlyRootFilesystem": {
                    "type": "boolean",
                    "description": "Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "runAsGroup": {
                    "type": "string",
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n",
                    "willReplaceOnChanges": true
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n",
                    "willReplaceOnChanges": true
                },
                "runAsUser": {
                    "type": "string",
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n",
                    "willReplaceOnChanges": true
                },
                "seLinuxOptions": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions:K8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions",
                    "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "seccompProfile": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfile:K8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfile",
                    "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerSecurityContextCapabilities:K8sJobSpecTemplateSpecInitContainerSecurityContextCapabilities": {
            "properties": {
                "adds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Added capabilities\n",
                    "willReplaceOnChanges": true
                },
                "drops": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Removed capabilities\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions:K8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions": {
            "properties": {
                "level": {
                    "type": "string",
                    "description": "Level is SELinux level label that applies to the container.\n",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "description": "Role is a SELinux role label that applies to the container.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type is a SELinux type label that applies to the container.\n",
                    "willReplaceOnChanges": true
                },
                "user": {
                    "type": "string",
                    "description": "User is a SELinux user label that applies to the container.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfile:K8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfile": {
            "properties": {
                "localhostProfile": {
                    "type": "string",
                    "description": "Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerStartupProbe:K8sJobSpecTemplateSpecInitContainerStartupProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerStartupProbeExec:K8sJobSpecTemplateSpecInitContainerStartupProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerStartupProbeGrpc:K8sJobSpecTemplateSpecInitContainerStartupProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGet:K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe Defaults to `10`.\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocket:K8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerStartupProbeExec:K8sJobSpecTemplateSpecInitContainerStartupProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerStartupProbeGrpc:K8sJobSpecTemplateSpecInitContainerStartupProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGet:K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader:K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host. Defaults to `HTTP`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader:K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocket:K8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecInitContainerVolumeMount:K8sJobSpecTemplateSpecInitContainerVolumeMount": {
            "properties": {
                "mountPath": {
                    "type": "string",
                    "description": "Path within the container at which the volume should be mounted. Must not contain ':'.\n"
                },
                "mountPropagation": {
                    "type": "string",
                    "description": "Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "This must match the Name of a Volume.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.\n"
                },
                "subPath": {
                    "type": "string",
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).\n"
                }
            },
            "type": "object",
            "required": [
                "mountPath",
                "name"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecReadinessGate:K8sJobSpecTemplateSpecReadinessGate": {
            "properties": {
                "conditionType": {
                    "type": "string",
                    "description": "refers to a condition in the pod's condition list with matching type.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecSecurityContext:K8sJobSpecTemplateSpecSecurityContext": {
            "properties": {
                "fsGroup": {
                    "type": "string",
                    "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.\n",
                    "willReplaceOnChanges": true
                },
                "fsGroupChangePolicy": {
                    "type": "string",
                    "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.\n",
                    "willReplaceOnChanges": true
                },
                "runAsGroup": {
                    "type": "string",
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n",
                    "willReplaceOnChanges": true
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n",
                    "willReplaceOnChanges": true
                },
                "runAsUser": {
                    "type": "string",
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n",
                    "willReplaceOnChanges": true
                },
                "seLinuxOptions": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecSecurityContextSeLinuxOptions:K8sJobSpecTemplateSpecSecurityContextSeLinuxOptions",
                    "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n"
                },
                "seccompProfile": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecSecurityContextSeccompProfile:K8sJobSpecTemplateSpecSecurityContextSeccompProfile",
                    "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.\n"
                },
                "supplementalGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.\n",
                    "willReplaceOnChanges": true
                },
                "sysctls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecSecurityContextSysctl:K8sJobSpecTemplateSpecSecurityContextSysctl"
                    },
                    "description": "holds a list of namespaced sysctls used for the pod.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecSecurityContextSeLinuxOptions:K8sJobSpecTemplateSpecSecurityContextSeLinuxOptions": {
            "properties": {
                "level": {
                    "type": "string",
                    "description": "Level is SELinux level label that applies to the container.\n",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "description": "Role is a SELinux role label that applies to the container.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type is a SELinux type label that applies to the container.\n",
                    "willReplaceOnChanges": true
                },
                "user": {
                    "type": "string",
                    "description": "User is a SELinux user label that applies to the container.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecSecurityContextSeccompProfile:K8sJobSpecTemplateSpecSecurityContextSeccompProfile": {
            "properties": {
                "localhostProfile": {
                    "type": "string",
                    "description": "Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecSecurityContextSysctl:K8sJobSpecTemplateSpecSecurityContextSysctl": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of a property to set.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Value of a property to set.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecToleration:K8sJobSpecTemplateSpecToleration": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n",
                    "willReplaceOnChanges": true
                },
                "key": {
                    "type": "string",
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\n",
                    "willReplaceOnChanges": true
                },
                "operator": {
                    "type": "string",
                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category. Defaults to `Equal`.\n",
                    "willReplaceOnChanges": true
                },
                "tolerationSeconds": {
                    "type": "string",
                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecTopologySpreadConstraint:K8sJobSpecTemplateSpecTopologySpreadConstraint": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelector:K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "maxSkew": {
                    "type": "integer",
                    "description": "describes the degree to which pods may be unevenly distributed. Defaults to `1`.\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.\n"
                },
                "whenUnsatisfiable": {
                    "type": "string",
                    "description": "indicates how to deal with a pod if it doesn't satisfy the spread constraint. Defaults to `DoNotSchedule`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labelSelectors"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelector:K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression:K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression:K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolume:K8sJobSpecTemplateSpecVolume": {
            "properties": {
                "awsElasticBlockStore": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeAwsElasticBlockStore:K8sJobSpecTemplateSpecVolumeAwsElasticBlockStore",
                    "description": "Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                },
                "azureDisk": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeAzureDisk:K8sJobSpecTemplateSpecVolumeAzureDisk",
                    "description": "Represents an Azure Data Disk mount on the host and bind mount to the pod.\n"
                },
                "azureFile": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeAzureFile:K8sJobSpecTemplateSpecVolumeAzureFile",
                    "description": "Represents an Azure File Service mount on the host and bind mount to the pod.\n"
                },
                "cephFs": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeCephFs:K8sJobSpecTemplateSpecVolumeCephFs",
                    "description": "Represents a Ceph FS mount on the host that shares a pod's lifetime\n"
                },
                "cinder": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeCinder:K8sJobSpecTemplateSpecVolumeCinder",
                    "description": "Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                },
                "configMap": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeConfigMap:K8sJobSpecTemplateSpecVolumeConfigMap",
                    "description": "ConfigMap represents a configMap that should populate this volume\n"
                },
                "csi": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeCsi:K8sJobSpecTemplateSpecVolumeCsi",
                    "description": "Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi\n"
                },
                "downwardApi": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeDownwardApi:K8sJobSpecTemplateSpecVolumeDownwardApi",
                    "description": "DownwardAPI represents downward API about the pod that should populate this volume\n"
                },
                "emptyDir": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeEmptyDir:K8sJobSpecTemplateSpecVolumeEmptyDir",
                    "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n"
                },
                "ephemeral": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeEphemeral:K8sJobSpecTemplateSpecVolumeEphemeral",
                    "description": "Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes\n"
                },
                "fc": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeFc:K8sJobSpecTemplateSpecVolumeFc",
                    "description": "Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n"
                },
                "flexVolume": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeFlexVolume:K8sJobSpecTemplateSpecVolumeFlexVolume",
                    "description": "Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.\n"
                },
                "flocker": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeFlocker:K8sJobSpecTemplateSpecVolumeFlocker",
                    "description": "Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running\n"
                },
                "gcePersistentDisk": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeGcePersistentDisk:K8sJobSpecTemplateSpecVolumeGcePersistentDisk",
                    "description": "Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "gitRepo": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeGitRepo:K8sJobSpecTemplateSpecVolumeGitRepo",
                    "description": "GitRepo represents a git repository at a particular revision.\n"
                },
                "glusterfs": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeGlusterfs:K8sJobSpecTemplateSpecVolumeGlusterfs",
                    "description": "Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md\n"
                },
                "hostPath": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeHostPath:K8sJobSpecTemplateSpecVolumeHostPath",
                    "description": "Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n"
                },
                "iscsi": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeIscsi:K8sJobSpecTemplateSpecVolumeIscsi",
                    "description": "Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.\n"
                },
                "local": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeLocal:K8sJobSpecTemplateSpecVolumeLocal",
                    "description": "Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local\n"
                },
                "name": {
                    "type": "string",
                    "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "nfs": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeNfs:K8sJobSpecTemplateSpecVolumeNfs",
                    "description": "Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                },
                "persistentVolumeClaim": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumePersistentVolumeClaim:K8sJobSpecTemplateSpecVolumePersistentVolumeClaim",
                    "description": "The specification of a persistent volume.\n"
                },
                "photonPersistentDisk": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumePhotonPersistentDisk:K8sJobSpecTemplateSpecVolumePhotonPersistentDisk",
                    "description": "Represents a PhotonController persistent disk attached and mounted on kubelets host machine\n"
                },
                "projected": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeProjected:K8sJobSpecTemplateSpecVolumeProjected",
                    "description": "Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected\n"
                },
                "quobyte": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeQuobyte:K8sJobSpecTemplateSpecVolumeQuobyte",
                    "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n"
                },
                "rbd": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeRbd:K8sJobSpecTemplateSpecVolumeRbd",
                    "description": "Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md\n"
                },
                "secret": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeSecret:K8sJobSpecTemplateSpecVolumeSecret",
                    "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                },
                "vsphereVolume": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeVsphereVolume:K8sJobSpecTemplateSpecVolumeVsphereVolume",
                    "description": "Represents a vSphere volume attached and mounted on kubelets host machine\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeAwsElasticBlockStore:K8sJobSpecTemplateSpecVolumeAwsElasticBlockStore": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                },
                "partition": {
                    "type": "integer",
                    "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to set the read-only property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                }
            },
            "type": "object",
            "required": [
                "volumeId"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeAzureDisk:K8sJobSpecTemplateSpecVolumeAzureDisk": {
            "properties": {
                "cachingMode": {
                    "type": "string",
                    "description": "Host Caching mode: None, Read Only, Read Write.\n"
                },
                "dataDiskUri": {
                    "type": "string",
                    "description": "The URI the data disk in the blob storage\n"
                },
                "diskName": {
                    "type": "string",
                    "description": "The Name of the data disk in the blob storage\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). Defaults to `false`.\n"
                }
            },
            "type": "object",
            "required": [
                "cachingMode",
                "dataDiskUri",
                "diskName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cachingMode",
                        "dataDiskUri",
                        "diskName",
                        "kind"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeAzureFile:K8sJobSpecTemplateSpecVolumeAzureFile": {
            "properties": {
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "The name of secret that contains Azure Storage Account Name and Key\n"
                },
                "secretNamespace": {
                    "type": "string",
                    "description": "The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is \"default\" namespace.\n",
                    "willReplaceOnChanges": true
                },
                "shareName": {
                    "type": "string",
                    "description": "Share Name\n"
                }
            },
            "type": "object",
            "required": [
                "secretName",
                "shareName"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeCephFs:K8sJobSpecTemplateSpecVolumeCephFs": {
            "properties": {
                "monitors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "path": {
                    "type": "string",
                    "description": "Used as the mounted root, rather than the full Ceph tree, default is /\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "secretFile": {
                    "type": "string",
                    "description": "The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeCephFsSecretRef:K8sJobSpecTemplateSpecVolumeCephFsSecretRef",
                    "description": "Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "user": {
                    "type": "string",
                    "description": "User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                }
            },
            "type": "object",
            "required": [
                "monitors"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeCephFsSecretRef:K8sJobSpecTemplateSpecVolumeCephFsSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "namespace"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeCinder:K8sJobSpecTemplateSpecVolumeCinder": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                }
            },
            "type": "object",
            "required": [
                "volumeId"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeConfigMap:K8sJobSpecTemplateSpecVolumeConfigMap": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeConfigMapItem:K8sJobSpecTemplateSpecVolumeConfigMapItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the ConfigMap or its keys must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeConfigMapItem:K8sJobSpecTemplateSpecVolumeConfigMapItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeCsi:K8sJobSpecTemplateSpecVolumeCsi": {
            "properties": {
                "driver": {
                    "type": "string",
                    "description": "the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "nodePublishSecretRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRef:K8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRef",
                    "description": "A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to set the read-only property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi\n"
                },
                "volumeAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Attributes of the volume to publish.\n"
                }
            },
            "type": "object",
            "required": [
                "driver"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRef:K8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeDownwardApi:K8sJobSpecTemplateSpecVolumeDownwardApi": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeDownwardApiItem:K8sJobSpecTemplateSpecVolumeDownwardApiItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeDownwardApiItem:K8sJobSpecTemplateSpecVolumeDownwardApiItem": {
            "properties": {
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRef:K8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRef",
                    "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef:K8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n"
                }
            },
            "type": "object",
            "required": [
                "fieldRef",
                "path"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRef:K8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\". Defaults to `v1`.\n"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef:K8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "divisor": {
                    "type": "string",
                    "description": "Defaults to `1`.\n"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n"
                }
            },
            "type": "object",
            "required": [
                "containerName",
                "resource"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeEmptyDir:K8sJobSpecTemplateSpecVolumeEmptyDir": {
            "properties": {
                "medium": {
                    "type": "string",
                    "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir Defaults to ``.\n",
                    "willReplaceOnChanges": true
                },
                "sizeLimit": {
                    "type": "string",
                    "description": "Total amount of local storage required for this EmptyDir volume.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeEphemeral:K8sJobSpecTemplateSpecVolumeEphemeral": {
            "properties": {
                "volumeClaimTemplate": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate:K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate",
                    "description": "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.\n"
                }
            },
            "type": "object",
            "required": [
                "volumeClaimTemplate"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate:K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata:K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata",
                    "description": "May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.\n"
                },
                "spec": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec:K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec",
                    "description": "The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.\n"
                }
            },
            "type": "object",
            "required": [
                "spec"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata:K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labels"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec:K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec": {
            "properties": {
                "accessModes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1\n",
                    "willReplaceOnChanges": true
                },
                "resources": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources:K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources",
                    "description": "A list of the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources\n"
                },
                "storageClassName": {
                    "type": "string",
                    "description": "Name of the storage class requested by the claim\n",
                    "willReplaceOnChanges": true
                },
                "volumeMode": {
                    "type": "string",
                    "description": "Kubernetes supports two volumeModes of PersistentVolumes: `Filesystem` and `Block`.\n"
                },
                "volumeName": {
                    "type": "string",
                    "description": "The binding reference to the PersistentVolume backing this claim.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "accessModes",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessModes",
                        "resources",
                        "storageClassName",
                        "volumeMode",
                        "volumeName"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources:K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources": {
            "properties": {
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/\n",
                    "willReplaceOnChanges": true
                },
                "requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "requests"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeFc:K8sJobSpecTemplateSpecVolumeFc": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "lun": {
                    "type": "integer",
                    "description": "FC target lun number\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).\n"
                },
                "targetWwNs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "FC target worldwide names (WWNs)\n"
                }
            },
            "type": "object",
            "required": [
                "lun",
                "targetWwNs"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeFlexVolume:K8sJobSpecTemplateSpecVolumeFlexVolume": {
            "properties": {
                "driver": {
                    "type": "string",
                    "description": "Driver is the name of the driver to use for this volume.\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Extra command options if any.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeFlexVolumeSecretRef:K8sJobSpecTemplateSpecVolumeFlexVolumeSecretRef",
                    "description": "Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.\n"
                }
            },
            "type": "object",
            "required": [
                "driver"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeFlexVolumeSecretRef:K8sJobSpecTemplateSpecVolumeFlexVolumeSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "namespace"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeFlocker:K8sJobSpecTemplateSpecVolumeFlocker": {
            "properties": {
                "datasetName": {
                    "type": "string",
                    "description": "Name of the dataset stored as metadata \u003e name on the dataset for Flocker should be considered as deprecated\n"
                },
                "datasetUuid": {
                    "type": "string",
                    "description": "UUID of the dataset. This is unique identifier of a Flocker dataset\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeGcePersistentDisk:K8sJobSpecTemplateSpecVolumeGcePersistentDisk": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "partition": {
                    "type": "integer",
                    "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "pdName": {
                    "type": "string",
                    "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                }
            },
            "type": "object",
            "required": [
                "pdName"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeGitRepo:K8sJobSpecTemplateSpecVolumeGitRepo": {
            "properties": {
                "directory": {
                    "type": "string",
                    "description": "Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Repository URL\n"
                },
                "revision": {
                    "type": "string",
                    "description": "Commit hash for the specified revision.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeGlusterfs:K8sJobSpecTemplateSpecVolumeGlusterfs": {
            "properties": {
                "endpointsName": {
                    "type": "string",
                    "description": "The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n"
                },
                "path": {
                    "type": "string",
                    "description": "The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n"
                }
            },
            "type": "object",
            "required": [
                "endpointsName",
                "path"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeHostPath:K8sJobSpecTemplateSpecVolumeHostPath": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type for HostPath volume. Allowed values are \"\" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeIscsi:K8sJobSpecTemplateSpecVolumeIscsi": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\n"
                },
                "iqn": {
                    "type": "string",
                    "description": "Target iSCSI Qualified Name.\n"
                },
                "iscsiInterface": {
                    "type": "string",
                    "description": "iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp). Defaults to `default`.\n"
                },
                "lun": {
                    "type": "integer",
                    "description": "iSCSI target lun number.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false.\n"
                },
                "targetPortal": {
                    "type": "string",
                    "description": "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n"
                }
            },
            "type": "object",
            "required": [
                "iqn",
                "targetPortal"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeLocal:K8sJobSpecTemplateSpecVolumeLocal": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeNfs:K8sJobSpecTemplateSpecVolumeNfs": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                }
            },
            "type": "object",
            "required": [
                "path",
                "server"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumePersistentVolumeClaim:K8sJobSpecTemplateSpecVolumePersistentVolumeClaim": {
            "properties": {
                "claimName": {
                    "type": "string",
                    "description": "ClaimName is the name of a PersistentVolumeClaim in the same\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Will force the ReadOnly setting in VolumeMounts. Defaults to `false`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumePhotonPersistentDisk:K8sJobSpecTemplateSpecVolumePhotonPersistentDisk": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "pdId": {
                    "type": "string",
                    "description": "ID that identifies Photon Controller persistent disk\n"
                }
            },
            "type": "object",
            "required": [
                "pdId"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeProjected:K8sJobSpecTemplateSpecVolumeProjected": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSource:K8sJobSpecTemplateSpecVolumeProjectedSource"
                    },
                    "description": "Source of the volume to project in the directory.\n"
                }
            },
            "type": "object",
            "required": [
                "sources"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSource:K8sJobSpecTemplateSpecVolumeProjectedSource": {
            "properties": {
                "configMaps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMap:K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMap"
                    },
                    "description": "ConfigMap represents a configMap that should populate this volume\n"
                },
                "downwardApi": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApi:K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApi",
                    "description": "DownwardAPI represents downward API about the pod that should populate this volume\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceSecret:K8sJobSpecTemplateSpecVolumeProjectedSourceSecret"
                    },
                    "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                },
                "serviceAccountToken": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountToken:K8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountToken",
                    "description": "A projected service account token volume\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMap:K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMap": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItem:K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the ConfigMap or it's keys must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItem:K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApi:K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApi": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItem:K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItem"
                    },
                    "description": "Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItem:K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItem": {
            "properties": {
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef:K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef",
                    "description": "Selects a field of the pod: only annotations, labels, name and namespace are supported.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef:K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef:K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to 'v1'. Defaults to `v1`.\n"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef:K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "divisor": {
                    "type": "string",
                    "description": "Defaults to `1`.\n"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n"
                }
            },
            "type": "object",
            "required": [
                "containerName",
                "resource"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceSecret:K8sJobSpecTemplateSpecVolumeProjectedSourceSecret": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceSecretItem:K8sJobSpecTemplateSpecVolumeProjectedSourceSecretItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the Secret or it's keys must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceSecretItem:K8sJobSpecTemplateSpecVolumeProjectedSourceSecretItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountToken:K8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountToken": {
            "properties": {
                "audience": {
                    "type": "string",
                    "description": "Audience is the intended audience of the token\n"
                },
                "expirationSeconds": {
                    "type": "integer",
                    "description": "ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds). Defaults to `3600`.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path specifies a relative path to the mount point of the projected volume.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeQuobyte:K8sJobSpecTemplateSpecVolumeQuobyte": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "Group to map volume access to Default is no group\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.\n"
                },
                "registry": {
                    "type": "string",
                    "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes\n"
                },
                "user": {
                    "type": "string",
                    "description": "User to map volume access to Defaults to serivceaccount user\n"
                },
                "volume": {
                    "type": "string",
                    "description": "Volume is a string that references an already created Quobyte volume by name.\n"
                }
            },
            "type": "object",
            "required": [
                "registry",
                "volume"
            ]
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeRbd:K8sJobSpecTemplateSpecVolumeRbd": {
            "properties": {
                "cephMonitors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\n"
                },
                "keyring": {
                    "type": "string",
                    "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "radosUser": {
                    "type": "string",
                    "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `admin`.\n"
                },
                "rbdImage": {
                    "type": "string",
                    "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "rbdPool": {
                    "type": "string",
                    "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it. Defaults to `rbd`.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `false`.\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeRbdSecretRef:K8sJobSpecTemplateSpecVolumeRbdSecretRef",
                    "description": "Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                }
            },
            "type": "object",
            "required": [
                "cephMonitors",
                "rbdImage"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cephMonitors",
                        "keyring",
                        "rbdImage"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeRbdSecretRef:K8sJobSpecTemplateSpecVolumeRbdSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "namespace"
                    ]
                }
            }
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeSecret:K8sJobSpecTemplateSpecVolumeSecret": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpecTemplateSpecVolumeSecretItem:K8sJobSpecTemplateSpecVolumeSecretItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the Secret or its keys must be defined.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeSecretItem:K8sJobSpecTemplateSpecVolumeSecretItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/K8sJobSpecTemplateSpecVolumeVsphereVolume:K8sJobSpecTemplateSpecVolumeVsphereVolume": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "volumePath": {
                    "type": "string",
                    "description": "Path that identifies vSphere volume vmdk\n"
                }
            },
            "type": "object",
            "required": [
                "volumePath"
            ]
        },
        "duplocloud:index/OciContainerengineNodePoolInitialNodeLabel:OciContainerengineNodePoolInitialNodeLabel": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "value"
                    ]
                }
            }
        },
        "duplocloud:index/OciContainerengineNodePoolNode:OciContainerengineNodePoolNode": {
            "properties": {
                "availabilityDomain": {
                    "type": "string"
                },
                "definedTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "faultDomain": {
                    "type": "string"
                },
                "freeformTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "kubernetesVersion": {
                    "type": "string"
                },
                "lifecycleDetails": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nodePoolId": {
                    "type": "string"
                },
                "privateIp": {
                    "type": "string"
                },
                "publicIp": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "string"
                },
                "systemTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "availabilityDomain",
                        "definedTags",
                        "faultDomain",
                        "freeformTags",
                        "id",
                        "kubernetesVersion",
                        "lifecycleDetails",
                        "name",
                        "nodePoolId",
                        "privateIp",
                        "publicIp",
                        "state",
                        "subnetId",
                        "systemTags"
                    ]
                }
            }
        },
        "duplocloud:index/OciContainerengineNodePoolNodeConfigDetails:OciContainerengineNodePoolNodeConfigDetails": {
            "properties": {
                "definedTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "freeformTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "isPvEncryptionInTransitEnabled": {
                    "type": "boolean"
                },
                "kmsKeyId": {
                    "type": "string"
                },
                "nsgIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "placementConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolNodeConfigDetailsPlacementConfig:OciContainerengineNodePoolNodeConfigDetailsPlacementConfig"
                    }
                },
                "size": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "placementConfigs",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isPvEncryptionInTransitEnabled",
                        "kmsKeyId",
                        "placementConfigs",
                        "size"
                    ]
                }
            }
        },
        "duplocloud:index/OciContainerengineNodePoolNodeConfigDetailsPlacementConfig:OciContainerengineNodePoolNodeConfigDetailsPlacementConfig": {
            "properties": {
                "availabilityDomain": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "capacityReservationId": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "availabilityDomain",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "availabilityDomain",
                        "capacityReservationId",
                        "subnetId"
                    ]
                }
            }
        },
        "duplocloud:index/OciContainerengineNodePoolNodeShapeConfig:OciContainerengineNodePoolNodeShapeConfig": {
            "properties": {
                "memoryInGbs": {
                    "type": "number",
                    "willReplaceOnChanges": true
                },
                "ocpus": {
                    "type": "number",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "duplocloud:index/OciContainerengineNodePoolNodeSourceDetails:OciContainerengineNodePoolNodeSourceDetails": {
            "properties": {
                "bootVolumeSizeInGbs": {
                    "type": "string"
                },
                "imageId": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "imageId",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bootVolumeSizeInGbs",
                        "imageId",
                        "sourceType"
                    ]
                }
            }
        },
        "duplocloud:index/OtherAgentsAgent:OtherAgentsAgent": {
            "properties": {
                "agentLinuxPackagePath": {
                    "type": "string"
                },
                "agentName": {
                    "type": "string"
                },
                "agentWindowsPackagePath": {
                    "type": "string"
                },
                "executionCount": {
                    "type": "integer"
                },
                "linuxAgentInstallStatusCmd": {
                    "type": "string"
                },
                "linuxAgentServiceName": {
                    "type": "string"
                },
                "linuxAgentUninstallStatusCmd": {
                    "type": "string"
                },
                "linuxInstallCmd": {
                    "type": "string"
                },
                "userRequestResetIsPending": {
                    "type": "boolean"
                },
                "windowsAgentServiceName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "agentName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "agentLinuxPackagePath",
                        "agentName",
                        "agentWindowsPackagePath",
                        "executionCount",
                        "linuxAgentInstallStatusCmd",
                        "linuxAgentServiceName",
                        "linuxAgentUninstallStatusCmd",
                        "linuxInstallCmd",
                        "userRequestResetIsPending",
                        "windowsAgentServiceName"
                    ]
                }
            }
        },
        "duplocloud:index/PlanCertificatesCertificate:PlanCertificatesCertificate": {
            "properties": {
                "arn": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arn",
                        "id",
                        "name"
                    ]
                }
            }
        },
        "duplocloud:index/PlanConfigsConfig:PlanConfigsConfig": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/PlanImagesImage:PlanImagesImage": {
            "properties": {
                "imageId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanImagesImageTag:PlanImagesImageTag"
                    }
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "imageId",
                "name",
                "os",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "imageId",
                        "name",
                        "os",
                        "tags",
                        "username"
                    ]
                }
            }
        },
        "duplocloud:index/PlanImagesImageTag:PlanImagesImageTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/PlanKmsV2Km:PlanKmsV2Km": {
            "properties": {
                "arn": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "id",
                "name"
            ]
        },
        "duplocloud:index/PlanKmsV2KmsKey:PlanKmsV2KmsKey": {
            "properties": {
                "arn": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "id",
                "name"
            ]
        },
        "duplocloud:index/PlanSettingsAllMetadata:PlanSettingsAllMetadata": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/PlanSettingsDnsSetting:PlanSettingsDnsSetting": {
            "properties": {
                "domainId": {
                    "type": "string"
                },
                "externalDnsSuffix": {
                    "type": "string"
                },
                "ignoreGlobalDns": {
                    "type": "boolean"
                },
                "internalDnsSuffix": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "domainId",
                        "externalDnsSuffix",
                        "ignoreGlobalDns",
                        "internalDnsSuffix"
                    ]
                }
            }
        },
        "duplocloud:index/PlanSettingsMetadata:PlanSettingsMetadata": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/PlanWafV2Waf:PlanWafV2Waf": {
            "properties": {
                "arn": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arn",
                        "dashboardUrl",
                        "name"
                    ]
                }
            }
        },
        "duplocloud:index/RdsInstancePerformanceInsights:RdsInstancePerformanceInsights": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Turn on or off Performance Insights\n"
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "Specify ARN for the KMS key to encrypt Performance Insights data.\n"
                },
                "retentionPeriod": {
                    "type": "integer",
                    "description": "Specify retention period in Days. Valid values are 7, 731 (2 years) or a multiple of 31. For Document DB retention period is 7\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kmsKeyId"
                    ]
                }
            }
        },
        "duplocloud:index/RdsInstanceV2ScalingConfiguration:RdsInstanceV2ScalingConfiguration": {
            "properties": {
                "maxCapacity": {
                    "type": "number",
                    "description": "Specifies max scalling capacity.\n"
                },
                "minCapacity": {
                    "type": "number",
                    "description": "Specifies min scalling capacity.\n"
                }
            },
            "type": "object",
            "required": [
                "maxCapacity",
                "minCapacity"
            ]
        },
        "duplocloud:index/RdsReadReplicaPerformanceInsights:RdsReadReplicaPerformanceInsights": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Turn on or off Performance Insights Defaults to `false`.\n"
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "Specify ARN for the KMS key to encrypt Performance Insights data.\n"
                },
                "retentionPeriod": {
                    "type": "integer",
                    "description": "Specify retention period in Days. Valid values are 7, 731 (2 years) or a multiple of 31. For Document DB retention period is 7 Defaults to `7`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kmsKeyId"
                    ]
                }
            }
        },
        "duplocloud:index/S3BucketDefaultEncryption:S3BucketDefaultEncryption": {
            "properties": {
                "method": {
                    "type": "string",
                    "description": "Default encryption method.  Must be one of: `None`, `Sse`, `AwsKms`, `TenantKms`.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/S3BucketReplicationRule:S3BucketReplicationRule": {
            "properties": {
                "deleteMarkerReplication": {
                    "type": "boolean",
                    "description": "Whether or not to enable delete marker on replication. Defaults to `false`.\n"
                },
                "destinationArn": {
                    "type": "string",
                    "description": "destination bucket arn\n"
                },
                "destinationBucket": {
                    "type": "string",
                    "description": "fullname of the destination bucket.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "replication rule fullname for s3 source bucket\n"
                },
                "name": {
                    "type": "string",
                    "description": "replication rule name for s3 source bucket\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "replication priority. Priority must be unique between multiple rules.\n"
                },
                "storageClass": {
                    "type": "string",
                    "description": "storage*class type: STANDARD, INTELLIGENT*TIERING, STANDARD*IA, ONEZONE*IA, GLACIER*IR, GLACIER, DEEP*ARCHIVE, REDUCED_REDUNDANCY.\n"
                }
            },
            "type": "object",
            "required": [
                "destinationBucket",
                "name",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "destinationArn",
                        "destinationBucket",
                        "fullname",
                        "name",
                        "priority",
                        "storageClass"
                    ]
                }
            }
        },
        "duplocloud:index/S3BucketTag:S3BucketTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/TenantConfigMetadata:TenantConfigMetadata": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/TenantConfigSetting:TenantConfigSetting": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/TenantPolicy:TenantPolicy": {
            "properties": {
                "allowVolumeMapping": {
                    "type": "boolean"
                },
                "blockExternalEp": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowVolumeMapping",
                        "blockExternalEp"
                    ]
                }
            }
        },
        "duplocloud:index/TenantSecretTag:TenantSecretTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/TenantTag:TenantTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "duplocloud:index/getAsgProfilesAsgProfile:getAsgProfilesAsgProfile": {
            "properties": {
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent pool that this host is added to.\n"
                },
                "allocatedPublicIp": {
                    "type": "boolean",
                    "description": "Whether or not to allocate a public IP.\n"
                },
                "base64UserData": {
                    "type": "string",
                    "description": "Base64 encoded EC2 user data to associated with the host.\n"
                },
                "canScaleFromZero": {
                    "type": "boolean",
                    "description": "Whether or not ASG should leverage duplocloud's scale from 0 feature\n"
                },
                "capacity": {
                    "type": "string",
                    "description": "The AWS EC2 instance type.\n"
                },
                "cloud": {
                    "type": "integer",
                    "description": "The numeric ID of the cloud provider to launch the host in.\n"
                },
                "customNodeLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specify the labels to attach to the nodes.\n"
                },
                "enabledMetrics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of metrics to collect for the ASG Specify one or more of the following metrics.`GroupMinSize`,`GroupMaxSize`,`GroupDesiredCapacity`,`GroupInServiceInstances`,`GroupPendingInstances`,`GroupStandbyInstances`,`GroupTerminatingInstances`,`GroupTotalInstances`,`GroupInServiceCapacity`,`GroupPendingCapacity`,`GroupStandbyCapacity`,`GroupTerminatingCapacity`,`GroupTotalCapacity`,`WarmPoolDesiredCapacity`,`WarmPoolWarmedCapacity`,`WarmPoolPendingCapacity`,`WarmPoolTerminatingCapacity`,`WarmPoolTotalCapacity`,`GroupAndWarmPoolDesiredCapacity`,`GroupAndWarmPoolTotalCapacity`.\n"
                },
                "encryptDisk": {
                    "type": "boolean"
                },
                "friendlyName": {
                    "type": "string",
                    "description": "The short name of the host.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the ASG profile.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The AMI ID to use.\n"
                },
                "initialBase64UserData": {
                    "type": "string"
                },
                "instanceCount": {
                    "type": "integer",
                    "description": "The number of instances that should be running in the group.\n"
                },
                "isClusterAutoscaled": {
                    "type": "boolean",
                    "description": "Whether or not to enable cluster autoscaler.\n"
                },
                "isEbsOptimized": {
                    "type": "boolean"
                },
                "isMinion": {
                    "type": "boolean"
                },
                "keypairType": {
                    "type": "integer",
                    "description": "The numeric ID of the keypair type being used.Should be one of:\n\n   - `0` : Default\n   - `1` : ED25519\n   - `2` : RSA (deprecated - some operating systems no longer support it)\n"
                },
                "maxInstanceCount": {
                    "type": "integer",
                    "description": "The maximum size of the Auto Scaling Group.\n"
                },
                "maxSpotPrice": {
                    "type": "string",
                    "description": "Maximum price to pay for a spot instance in dollars per unit hour.\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getAsgProfilesAsgProfileMetadata:getAsgProfilesAsgProfileMetadata"
                    },
                    "description": "Configuration metadata used when creating the host.\u003cbr\u003e*Note: To configure OS disk size OsDiskSize can be specified as Key and its size as value, size value should be atleast 10*\n"
                },
                "minInstanceCount": {
                    "type": "integer",
                    "description": "The minimum size of the Auto Scaling Group.\n"
                },
                "minionTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getAsgProfilesAsgProfileMinionTag:getAsgProfilesAsgProfileMinionTag"
                    },
                    "description": "A map of tags to assign to the resource. Example - `AllocationTags` can be passed as tag key with any value.\n"
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getAsgProfilesAsgProfileNetworkInterface:getAsgProfilesAsgProfileNetworkInterface"
                    },
                    "description": "An optional list of custom network interface configurations to use when creating the host.\n"
                },
                "prependUserData": {
                    "type": "boolean",
                    "description": "Bootstrap an EKS host with Duplo's user data, prepending it to custom user data if also provided.\n"
                },
                "publicIpAddress": {
                    "type": "string",
                    "description": "The primary public IP address assigned to the host.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getAsgProfilesAsgProfileTag:getAsgProfilesAsgProfileTag"
                    }
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getAsgProfilesAsgProfileTaint:getAsgProfilesAsgProfileTaint"
                    },
                    "description": "Specify taints to attach to the nodes, to repel other nodes with different toleration\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the host will be created in.\n"
                },
                "useSpotInstances": {
                    "type": "boolean",
                    "description": "Whether or not to use spot instances.\n"
                },
                "userAccount": {
                    "type": "string",
                    "description": "The name of the tenant that the host will be created in.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getAsgProfilesAsgProfileVolume:getAsgProfilesAsgProfileVolume"
                    },
                    "description": "Block to specify additional or secondary volume beyond the root device\n"
                },
                "waitForCapacity": {
                    "type": "boolean",
                    "description": "Whether or not to wait until ASG instances to be healthy, after creation.\n"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The multi availability zone to launch the asg in, expressed as a number and starting at 0\n"
                }
            },
            "type": "object",
            "required": [
                "base64UserData",
                "canScaleFromZero",
                "capacity",
                "friendlyName",
                "fullname",
                "imageId",
                "initialBase64UserData",
                "instanceCount",
                "isClusterAutoscaled",
                "keypairType",
                "maxInstanceCount",
                "metadatas",
                "minInstanceCount",
                "minionTags",
                "networkInterfaces",
                "publicIpAddress",
                "tags",
                "tenantId",
                "userAccount",
                "volumes",
                "zones"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getAsgProfilesAsgProfileMetadata:getAsgProfilesAsgProfileMetadata": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getAsgProfilesAsgProfileMinionTag:getAsgProfilesAsgProfileMinionTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getAsgProfilesAsgProfileNetworkInterface:getAsgProfilesAsgProfileNetworkInterface": {
            "properties": {
                "associatePublicIp": {
                    "type": "boolean",
                    "description": "Whether or not to associate a public IP with the newly created ENI.  Cannot be specified if `network_interface_id` is specified.\n"
                },
                "deviceIndex": {
                    "type": "integer",
                    "description": "The device index to pass to AWS for attaching the ENI.  Starts at zero.\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getAsgProfilesAsgProfileNetworkInterfaceMetadata:getAsgProfilesAsgProfileNetworkInterfaceMetadata"
                    }
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The ID of an ENI to attach to this host.  Cannot be specified if `subnet_id` or `associate_public_ip` is specified.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of a subnet in which to create a new ENI.  Cannot be specified if `network_interface_id` is specified.\n"
                }
            },
            "type": "object",
            "required": [
                "associatePublicIp",
                "deviceIndex",
                "groups",
                "metadatas",
                "networkInterfaceId",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getAsgProfilesAsgProfileNetworkInterfaceMetadata:getAsgProfilesAsgProfileNetworkInterfaceMetadata": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getAsgProfilesAsgProfileTag:getAsgProfilesAsgProfileTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getAsgProfilesAsgProfileTaint:getAsgProfilesAsgProfileTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Update strategy of the node. Effect types \u003cbr\u003e      - NoSchedule\u003cbr\u003e     - PreferNoSchedule\u003cbr\u003e     - NoExecute\n"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getAsgProfilesAsgProfileVolume:getAsgProfilesAsgProfileVolume": {
            "properties": {
                "iops": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "volumeId": {
                    "type": "string"
                },
                "volumeType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "iops",
                "name",
                "size",
                "volumeId",
                "volumeType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getAwsLbListenersListener:getAwsLbListenersListener": {
            "properties": {
                "arn": {
                    "type": "string"
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getAwsLbListenersListenerCertificate:getAwsLbListenersListenerCertificate"
                    }
                },
                "defaultActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getAwsLbListenersListenerDefaultAction:getAwsLbListenersListenerDefaultAction"
                    }
                },
                "loadBalancerArn": {
                    "type": "string"
                },
                "loadBalancerName": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "sslPolicy": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "certificates",
                "defaultActions",
                "loadBalancerArn",
                "loadBalancerName",
                "port",
                "protocol",
                "sslPolicy",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getAwsLbListenersListenerCertificate:getAwsLbListenersListenerCertificate": {
            "properties": {
                "arn": {
                    "type": "string"
                },
                "isDefault": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "isDefault"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getAwsLbListenersListenerDefaultAction:getAwsLbListenersListenerDefaultAction": {
            "properties": {
                "order": {
                    "type": "integer"
                },
                "targetGroupArn": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "order",
                "targetGroupArn",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getAwsLbTargetGroupsTargetGroup:getAwsLbTargetGroupsTargetGroup": {
            "properties": {
                "arn": {
                    "type": "string"
                },
                "healthChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getAwsLbTargetGroupsTargetGroupHealthCheck:getAwsLbTargetGroupsTargetGroupHealthCheck"
                    }
                },
                "loadBalancerArns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "protocolVersion": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string"
                },
                "vpcId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "healthChecks",
                "loadBalancerArns",
                "name",
                "protocol",
                "protocolVersion",
                "targetType",
                "tenantId",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getAwsLbTargetGroupsTargetGroupHealthCheck:getAwsLbTargetGroupsTargetGroupHealthCheck": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "healthyThreshold": {
                    "type": "integer"
                },
                "interval": {
                    "type": "integer"
                },
                "matchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getAwsLbTargetGroupsTargetGroupHealthCheckMatcher:getAwsLbTargetGroupsTargetGroupHealthCheckMatcher"
                    }
                },
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "timeout": {
                    "type": "integer"
                },
                "unhealthyThreshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "healthyThreshold",
                "interval",
                "matchers",
                "path",
                "port",
                "protocol",
                "timeout",
                "unhealthyThreshold"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getAwsLbTargetGroupsTargetGroupHealthCheckMatcher:getAwsLbTargetGroupsTargetGroupHealthCheckMatcher": {
            "properties": {
                "grpcCode": {
                    "type": "string"
                },
                "httpCode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "grpcCode",
                "httpCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getAwsSsmParametersParameter:getAwsSsmParametersParameter": {
            "properties": {
                "allowedPattern": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "keyId": {
                    "type": "string"
                },
                "lastModifiedDate": {
                    "type": "string"
                },
                "lastModifiedUser": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "allowedPattern",
                "description",
                "keyId",
                "lastModifiedDate",
                "lastModifiedUser",
                "name",
                "tenantId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getAzureAvailabilitySetVirtualMachine:getAzureAvailabilitySetVirtualMachine": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getDuploServiceLbconfigsService:getDuploServiceLbconfigsService": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN (or ID) of the cloud load balancer (if applicable).\n"
                },
                "lbconfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getDuploServiceLbconfigsServiceLbconfig:getDuploServiceLbconfigsServiceLbconfig"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the duplo service.\n"
                },
                "replicationControllerName": {
                    "type": "string",
                    "description": "The name of the duplo service.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cloud load balancer (if applicable).\n"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "lbconfigs",
                "name",
                "replicationControllerName",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getDuploServiceLbconfigsServiceLbconfig:getDuploServiceLbconfigsServiceLbconfig": {
            "properties": {
                "allowGlobalAccess": {
                    "type": "boolean",
                    "description": "Applicable for internal lb.\n"
                },
                "backendProtocolVersion": {
                    "type": "string"
                },
                "certificateArn": {
                    "type": "string",
                    "description": "The ARN of an ACM certificate to associate with this load balancer.  Only applicable for HTTPS.\n"
                },
                "cloudName": {
                    "type": "string",
                    "description": "The name of the cloud load balancer (if applicable).\n"
                },
                "customCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify CIDR Values. This is applicable only for Network Load Balancer if `lb_type` is `6`.\n"
                },
                "dnsName": {
                    "type": "string",
                    "description": "The DNS name of the cloud load balancer (if applicable).\n"
                },
                "externalPort": {
                    "type": "integer",
                    "description": "The frontend port associated with this load balancer configuration. Required if `lb_type` is not `7`.\n"
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "Only for K8S Node Port (`lb_type = 4`) or load balancers in Kubernetes.  Set the kubernetes service `externalTrafficPolicy` attribute.\n"
                },
                "extraSelectorLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getDuploServiceLbconfigsServiceLbconfigExtraSelectorLabel:getDuploServiceLbconfigsServiceLbconfigExtraSelectorLabel"
                    },
                    "description": "Only for K8S services or load balancers in Kubernetes.  Sets an additional selector label to narrow which pods can receive traffic.\n"
                },
                "frontendIp": {
                    "type": "string"
                },
                "healthCheck": {
                    "$ref": "#/types/duplocloud:index/getDuploServiceLbconfigsServiceLbconfigHealthCheck:getDuploServiceLbconfigsServiceLbconfigHealthCheck",
                    "description": "Health Check configuration block.\n"
                },
                "healthCheckUrl": {
                    "type": "string",
                    "description": "The health check URL to associate with this load balancer configuration.\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "(Azure Only) Set only if Azure Shared Application Gateway is used (`lb_type = 5`).\n"
                },
                "hostPort": {
                    "type": "integer",
                    "description": "The automatically assigned host port.\n"
                },
                "index": {
                    "type": "integer",
                    "description": "The load balancer Index.\n"
                },
                "isInfraDeployment": {
                    "type": "boolean"
                },
                "isInternal": {
                    "type": "boolean",
                    "description": "Whether or not to create an internal load balancer.\n"
                },
                "isNative": {
                    "type": "boolean",
                    "description": "Set to true if the service for which the load balancer is being created is hosted on a docker native host, which is managed directly by DuploCloud, or false if the service is hosted on a cloud-provided platform like EKS, AKS, GKE, ECS, etc. The `duplocloud.getNativeHosts` data source lists the native hosts in a DuploCloud Tenant\n"
                },
                "lbType": {
                    "type": "integer",
                    "description": "The numerical index of the type of load balancer configuration to create.\nShould be one of:\n\n   - `0` : ELB (Classic Load Balancer)\n   - `1` : ALB (Application Load Balancer)\n   - `2` : Health-check Only (No Load Balancer)\n   - `3` : K8S Service w/ Cluster IP (No Load Balancer)\n   - `4` : K8S Service w/ Node Port (No Load Balancer)\n   - `5` : Azure Shared Application Gateway\n   - `6` : NLB (Network Load Balancer)\n   - `7` : Target Group Only\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the duplo service.\n"
                },
                "port": {
                    "type": "string",
                    "description": "The backend port associated with this load balancer configuration.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The backend protocol associated with this load balancer configuration.\n"
                },
                "replicationControllerName": {
                    "type": "string",
                    "description": "The name of the duplo service.\n"
                },
                "setIngressHealthCheck": {
                    "type": "boolean",
                    "description": "Only for K8S services or load balancers in Kubernetes.  Set to `true` to set health check annotations for ingress.\n"
                },
                "skipHttpToHttps": {
                    "type": "boolean",
                    "description": "Skip http to https.\n"
                },
                "targetGroupArn": {
                    "type": "string",
                    "description": "The ARN of the Target Group to which to route traffic.\n"
                }
            },
            "type": "object",
            "required": [
                "allowGlobalAccess",
                "backendProtocolVersion",
                "certificateArn",
                "cloudName",
                "customCidrs",
                "dnsName",
                "externalPort",
                "externalTrafficPolicy",
                "extraSelectorLabels",
                "frontendIp",
                "healthCheck",
                "healthCheckUrl",
                "hostName",
                "hostPort",
                "index",
                "isInfraDeployment",
                "isInternal",
                "isNative",
                "lbType",
                "name",
                "port",
                "protocol",
                "replicationControllerName",
                "setIngressHealthCheck",
                "skipHttpToHttps",
                "targetGroupArn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getDuploServiceLbconfigsServiceLbconfigExtraSelectorLabel:getDuploServiceLbconfigsServiceLbconfigExtraSelectorLabel": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getDuploServiceLbconfigsServiceLbconfigHealthCheck:getDuploServiceLbconfigsServiceLbconfigHealthCheck": {
            "properties": {
                "grpcSuccessCodes": {
                    "type": "string",
                    "description": "Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, \"0,12\" for GRPC) or a range of values (for example, \"0-99\"). Required for GRPC ALB. Only applies to Application Load Balancers (i.e., GRPC) not Network Load Balancers (i.e., TCP).\n"
                },
                "healthyThreshold": {
                    "type": "integer",
                    "description": "Number of consecutive health checks successes required before considering an unhealthy target healthy.\n"
                },
                "httpSuccessCodes": {
                    "type": "string",
                    "description": "Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, \"200,202\" for HTTP(s)) or a range of values (for example, \"200-299\"). Required for HTTP/HTTPS ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS) not Network Load Balancers (i.e., TCP).\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, during which no response means a failed health check.\n"
                },
                "unhealthyThreshold": {
                    "type": "integer",
                    "description": "Number of consecutive health check failures required before considering the target unhealthy.\n"
                }
            },
            "type": "object",
            "required": [
                "grpcSuccessCodes",
                "httpSuccessCodes",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getDuploServiceParamsResult:getDuploServiceParamsResult": {
            "properties": {
                "dnsPrfx": {
                    "type": "string"
                },
                "replicationControllerName": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string"
                },
                "webaclid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dnsPrfx",
                "replicationControllerName",
                "tenantId",
                "webaclid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getDuploServiceTag:getDuploServiceTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getDuploServicesService:getDuploServicesService": {
            "properties": {
                "agentPlatform": {
                    "type": "integer"
                },
                "allocationTags": {
                    "type": "string"
                },
                "anyHostAllowed": {
                    "type": "boolean"
                },
                "cloud": {
                    "type": "integer"
                },
                "cloudCredsFromK8sServiceAccount": {
                    "type": "boolean"
                },
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dockerImage": {
                    "type": "string"
                },
                "domain": {
                    "type": "string",
                    "description": "The service domain (whichever fqdn_ex or fqdn which is non empty)\n"
                },
                "extraConfig": {
                    "type": "string"
                },
                "forceStatefulSet": {
                    "type": "boolean"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain associated with the service\n"
                },
                "fqdnEx": {
                    "type": "string",
                    "description": "External fully qualified domain associated with the service\n"
                },
                "hpaSpecs": {
                    "type": "string"
                },
                "isDaemonset": {
                    "type": "boolean"
                },
                "isUniqueK8sNodeRequired": {
                    "type": "boolean",
                    "description": "Whether or not the replicas must be scheduled on separate Kubernetes nodes.  Only supported on Kubernetes.\n"
                },
                "lbSyncedDeployment": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "otherDockerConfig": {
                    "type": "string"
                },
                "otherDockerHostConfig": {
                    "type": "string"
                },
                "parentDomain": {
                    "type": "string",
                    "description": "The service's parent domain\n"
                },
                "replicaCollocationAllowed": {
                    "type": "boolean"
                },
                "replicas": {
                    "type": "integer"
                },
                "replicasMatchingAsgName": {
                    "type": "string"
                },
                "shouldSpreadAcrossZones": {
                    "type": "boolean",
                    "description": "Whether or not the replicas must be spread across availability zones.  Only supported on Kubernetes.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getDuploServicesServiceTag:getDuploServicesServiceTag"
                    }
                },
                "tenantId": {
                    "type": "string"
                },
                "volumes": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "agentPlatform",
                "allocationTags",
                "anyHostAllowed",
                "cloud",
                "cloudCredsFromK8sServiceAccount",
                "commands",
                "dockerImage",
                "domain",
                "extraConfig",
                "forceStatefulSet",
                "fqdn",
                "fqdnEx",
                "hpaSpecs",
                "isDaemonset",
                "isUniqueK8sNodeRequired",
                "lbSyncedDeployment",
                "name",
                "otherDockerConfig",
                "otherDockerHostConfig",
                "parentDomain",
                "replicaCollocationAllowed",
                "replicas",
                "replicasMatchingAsgName",
                "shouldSpreadAcrossZones",
                "tags",
                "tenantId",
                "volumes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getDuploServicesServiceTag:getDuploServicesServiceTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getEcsServiceCapacityProviderStrategy:getEcsServiceCapacityProviderStrategy": {
            "properties": {
                "base": {
                    "type": "integer",
                    "description": "The number of tasks, at a minimum, to run on the specified capacity provider.\n"
                },
                "capacityProvider": {
                    "type": "string",
                    "description": "Name of the capacity provider.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The relative percentage of the total number of launched tasks that should use the specified capacity provider.\n"
                }
            },
            "type": "object",
            "required": [
                "base",
                "capacityProvider",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getEcsServiceLoadBalancer:getEcsServiceLoadBalancer": {
            "properties": {
                "backendProtocol": {
                    "type": "string",
                    "description": "The backend protocol associated with this load balancer configuration.\n",
                    "deprecationMessage": "Use 'backend_protocol_version' instead."
                },
                "backendProtocolVersion": {
                    "type": "string",
                    "description": "The backend protocol version associated with this load balancer configuration.\n"
                },
                "certificateArn": {
                    "type": "string",
                    "description": "The ARN of an ACM certificate to associate with this load balancer.  Only applicable for HTTPS.\n"
                },
                "dropInvalidHeaders": {
                    "type": "boolean",
                    "description": "Whether or not to drop invalid HTTP headers received by the load balancer.\n"
                },
                "enableAccessLogs": {
                    "type": "boolean",
                    "description": "Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan\n"
                },
                "externalPort": {
                    "type": "integer",
                    "description": "The frontend port associated with this load balancer configuration.\n"
                },
                "healthCheckConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getEcsServiceLoadBalancerHealthCheckConfig:getEcsServiceLoadBalancerHealthCheckConfig"
                    },
                    "description": "Health check configuration for this load balancer.\n"
                },
                "healthCheckUrl": {
                    "type": "string",
                    "description": "The health check URL to associate with this load balancer configuration.\n"
                },
                "httpToHttpsRedirect": {
                    "type": "boolean",
                    "description": "Whether or not the load balancer should redirect HTTP to HTTPS.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.\n"
                },
                "index": {
                    "type": "integer",
                    "description": "The load balancer Index.\n"
                },
                "isInternal": {
                    "type": "boolean",
                    "description": "Whether or not to create an internal load balancer.\n"
                },
                "lbType": {
                    "type": "integer",
                    "description": "The numerical index of the type of load balancer configuration to create.\nShould be one of:\n\n   - `0` : ELB (Classic Load Balancer)\n   - `1` : ALB (Application Load Balancer)\n   - `2` : Health-check Only (No Load Balancer)\n"
                },
                "loadBalancerArn": {
                    "type": "string",
                    "description": "The load balancer ARN.\n"
                },
                "loadBalancerName": {
                    "type": "string",
                    "description": "The load balancer name.\n"
                },
                "port": {
                    "type": "string",
                    "description": "The backend port associated with this load balancer configuration.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The frontend protocol associated with this load balancer configuration.\n"
                },
                "replicationControllerName": {
                    "type": "string"
                },
                "targetGroupCount": {
                    "type": "integer",
                    "description": "Number of Load Balancer target group to associate with the service.\n"
                },
                "webaclid": {
                    "type": "string",
                    "description": "The ARN of a web application firewall to associate this load balancer.\n"
                }
            },
            "type": "object",
            "required": [
                "backendProtocol",
                "backendProtocolVersion",
                "certificateArn",
                "dropInvalidHeaders",
                "enableAccessLogs",
                "externalPort",
                "healthCheckConfigs",
                "healthCheckUrl",
                "httpToHttpsRedirect",
                "idleTimeout",
                "index",
                "isInternal",
                "lbType",
                "loadBalancerArn",
                "loadBalancerName",
                "port",
                "protocol",
                "replicationControllerName",
                "targetGroupCount",
                "webaclid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getEcsServiceLoadBalancerHealthCheckConfig:getEcsServiceLoadBalancerHealthCheckConfig": {
            "properties": {
                "grpcSuccessCode": {
                    "type": "string"
                },
                "healthCheckIntervalSeconds": {
                    "type": "integer"
                },
                "healthCheckTimeoutSeconds": {
                    "type": "integer"
                },
                "healthyThresholdCount": {
                    "type": "integer"
                },
                "httpSuccessCode": {
                    "type": "string"
                },
                "unhealthyThresholdCount": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "grpcSuccessCode",
                "healthCheckIntervalSeconds",
                "healthCheckTimeoutSeconds",
                "healthyThresholdCount",
                "httpSuccessCode",
                "unhealthyThresholdCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getEcsServicesService:getEcsServicesService": {
            "properties": {
                "capacityProviderStrategies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getEcsServicesServiceCapacityProviderStrategy:getEcsServicesServiceCapacityProviderStrategy"
                    }
                },
                "dnsPrfx": {
                    "type": "string",
                    "description": "The DNS prefix to assign to this service's load balancer.\n"
                },
                "healthCheckGracePeriodSeconds": {
                    "type": "integer"
                },
                "index": {
                    "type": "integer",
                    "description": "The index of the ecs service.\n"
                },
                "isTargetGroupOnly": {
                    "type": "boolean"
                },
                "loadBalancers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getEcsServicesServiceLoadBalancer:getEcsServicesServiceLoadBalancer"
                    },
                    "description": "Zero or more load balancer configurations to associate with this service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service to create.\n"
                },
                "oldTaskDefinitionBufferSize": {
                    "type": "integer",
                    "description": "The number of older task definitions to retain in AWS.\n"
                },
                "replicas": {
                    "type": "integer",
                    "description": "The number of container replicas to create.\n"
                },
                "targetGroupArns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "taskDefinition": {
                    "type": "string",
                    "description": "The ARN of the task definition to use.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the service will be created in.\n"
                }
            },
            "type": "object",
            "required": [
                "capacityProviderStrategies",
                "dnsPrfx",
                "healthCheckGracePeriodSeconds",
                "index",
                "isTargetGroupOnly",
                "loadBalancers",
                "name",
                "oldTaskDefinitionBufferSize",
                "replicas",
                "targetGroupArns",
                "taskDefinition",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getEcsServicesServiceCapacityProviderStrategy:getEcsServicesServiceCapacityProviderStrategy": {
            "properties": {
                "base": {
                    "type": "integer",
                    "description": "The number of tasks, at a minimum, to run on the specified capacity provider.\n"
                },
                "capacityProvider": {
                    "type": "string",
                    "description": "Name of the capacity provider.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The relative percentage of the total number of launched tasks that should use the specified capacity provider.\n"
                }
            },
            "type": "object",
            "required": [
                "base",
                "capacityProvider",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getEcsServicesServiceLoadBalancer:getEcsServicesServiceLoadBalancer": {
            "properties": {
                "backendProtocol": {
                    "type": "string",
                    "description": "The backend protocol associated with this load balancer configuration.\n",
                    "deprecationMessage": "Use 'backend_protocol_version' instead."
                },
                "backendProtocolVersion": {
                    "type": "string",
                    "description": "The backend protocol version associated with this load balancer configuration.\n"
                },
                "certificateArn": {
                    "type": "string",
                    "description": "The ARN of an ACM certificate to associate with this load balancer.  Only applicable for HTTPS.\n"
                },
                "dropInvalidHeaders": {
                    "type": "boolean",
                    "description": "Whether or not to drop invalid HTTP headers received by the load balancer.\n"
                },
                "enableAccessLogs": {
                    "type": "boolean",
                    "description": "Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan\n"
                },
                "externalPort": {
                    "type": "integer",
                    "description": "The frontend port associated with this load balancer configuration.\n"
                },
                "healthCheckConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getEcsServicesServiceLoadBalancerHealthCheckConfig:getEcsServicesServiceLoadBalancerHealthCheckConfig"
                    },
                    "description": "Health check configuration for this load balancer.\n"
                },
                "healthCheckUrl": {
                    "type": "string",
                    "description": "The health check URL to associate with this load balancer configuration.\n"
                },
                "httpToHttpsRedirect": {
                    "type": "boolean",
                    "description": "Whether or not the load balancer should redirect HTTP to HTTPS.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.\n"
                },
                "index": {
                    "type": "integer",
                    "description": "The load balancer Index.\n"
                },
                "isInternal": {
                    "type": "boolean",
                    "description": "Whether or not to create an internal load balancer.\n"
                },
                "lbType": {
                    "type": "integer",
                    "description": "The numerical index of the type of load balancer configuration to create.\nShould be one of:\n\n   - `0` : ELB (Classic Load Balancer)\n   - `1` : ALB (Application Load Balancer)\n   - `2` : Health-check Only (No Load Balancer)\n"
                },
                "loadBalancerArn": {
                    "type": "string",
                    "description": "The load balancer ARN.\n"
                },
                "loadBalancerName": {
                    "type": "string",
                    "description": "The load balancer name.\n"
                },
                "port": {
                    "type": "string",
                    "description": "The backend port associated with this load balancer configuration.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The frontend protocol associated with this load balancer configuration.\n"
                },
                "replicationControllerName": {
                    "type": "string"
                },
                "targetGroupCount": {
                    "type": "integer",
                    "description": "Number of Load Balancer target group to associate with the service.\n"
                },
                "webaclid": {
                    "type": "string",
                    "description": "The ARN of a web application firewall to associate this load balancer.\n"
                }
            },
            "type": "object",
            "required": [
                "backendProtocol",
                "backendProtocolVersion",
                "certificateArn",
                "dropInvalidHeaders",
                "enableAccessLogs",
                "externalPort",
                "healthCheckConfigs",
                "healthCheckUrl",
                "httpToHttpsRedirect",
                "idleTimeout",
                "index",
                "isInternal",
                "lbType",
                "loadBalancerArn",
                "loadBalancerName",
                "port",
                "protocol",
                "replicationControllerName",
                "targetGroupCount",
                "webaclid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getEcsServicesServiceLoadBalancerHealthCheckConfig:getEcsServicesServiceLoadBalancerHealthCheckConfig": {
            "properties": {
                "grpcSuccessCode": {
                    "type": "string"
                },
                "healthCheckIntervalSeconds": {
                    "type": "integer"
                },
                "healthCheckTimeoutSeconds": {
                    "type": "integer"
                },
                "healthyThresholdCount": {
                    "type": "integer"
                },
                "httpSuccessCode": {
                    "type": "string"
                },
                "unhealthyThresholdCount": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "grpcSuccessCode",
                "healthCheckIntervalSeconds",
                "healthCheckTimeoutSeconds",
                "healthyThresholdCount",
                "httpSuccessCode",
                "unhealthyThresholdCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getEcsTaskDefinitionInferenceAccelerator:getEcsTaskDefinitionInferenceAccelerator": {
            "properties": {
                "deviceName": {
                    "type": "string"
                },
                "deviceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "deviceName",
                "deviceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getEcsTaskDefinitionPlacementConstraint:getEcsTaskDefinitionPlacementConstraint": {
            "properties": {
                "expression": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "expression",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getEcsTaskDefinitionProxyConfiguration:getEcsTaskDefinitionProxyConfiguration": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "containerName",
                "properties",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getEcsTaskDefinitionRequiresAttribute:getEcsTaskDefinitionRequiresAttribute": {
            "properties": {
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getEcsTaskDefinitionRuntimePlatform:getEcsTaskDefinitionRuntimePlatform": {
            "properties": {
                "cpuArchitecture": {
                    "type": "string",
                    "description": "Valid values are 'X86_64','ARM64'\n"
                },
                "operatingSystemFamily": {
                    "type": "string",
                    "description": "Valid values are \u003cbr\u003eFor FARGATE: 'LINUX','WINDOWS_SERVER_2019_FULL','WINDOWS_SERVER_2019_CORE','WINDOWS_SERVER_2022_FULL','WINDOWS_SERVER_2022_CORE'\n"
                }
            },
            "type": "object",
            "required": [
                "cpuArchitecture",
                "operatingSystemFamily"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getEcsTaskDefinitionTag:getEcsTaskDefinitionTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getEcsTaskDefinitionsTaskDefinition:getEcsTaskDefinitionsTaskDefinition": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN of the task definition.\n"
                },
                "family": {
                    "type": "string",
                    "description": "The family the task definition.\n"
                },
                "latest": {
                    "type": "boolean",
                    "description": "The current revision of the task definition.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the task definition.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "The current revision of the task definition.\n"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "family",
                "latest",
                "name",
                "revision"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getEmrClusterData:getEmrClusterData": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN of the emrCluster.\n"
                },
                "jobFlowId": {
                    "type": "string",
                    "description": "The job flow id of the emrCluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The  name of the emrCluster.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the emrCluster.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the emrCluster will be created in.\n"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "jobFlowId",
                "name",
                "status",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpFirestoresFirestore:getGcpFirestoresFirestore": {
            "properties": {
                "appEngineIntegrationMode": {
                    "type": "string"
                },
                "concurrencyMode": {
                    "type": "string"
                },
                "earliestVersionTime": {
                    "type": "string"
                },
                "enableDeleteProtection": {
                    "type": "boolean",
                    "description": "Delete protection prevents accidental deletion of firestore.\n"
                },
                "enablePointInTimeRecovery": {
                    "type": "boolean",
                    "description": "Restores data to a specific moment in time, enhancing data protection and recovery capabilities.\n"
                },
                "etag": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the firestore.\n"
                },
                "locationId": {
                    "type": "string",
                    "description": "Location for firestore\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Firestore type\n"
                },
                "uid": {
                    "type": "string"
                },
                "versionRetentionPeriod": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "appEngineIntegrationMode",
                "concurrencyMode",
                "earliestVersionTime",
                "enableDeleteProtection",
                "enablePointInTimeRecovery",
                "etag",
                "fullname",
                "locationId",
                "name",
                "type",
                "uid",
                "versionRetentionPeriod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolAccelerator:getGcpNodePoolAccelerator": {
            "properties": {
                "acceleratorCount": {
                    "type": "string",
                    "description": "The number of the accelerator cards exposed to an instance.\n"
                },
                "acceleratorType": {
                    "type": "string",
                    "description": "The accelerator type resource name.\n"
                },
                "gpuDriverInstallationConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getGcpNodePoolAcceleratorGpuDriverInstallationConfig:getGcpNodePoolAcceleratorGpuDriverInstallationConfig"
                    }
                },
                "gpuPartitionSize": {
                    "type": "string",
                    "description": "Size of partitions to create on the GPU\n"
                },
                "gpuSharingConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getGcpNodePoolAcceleratorGpuSharingConfig:getGcpNodePoolAcceleratorGpuSharingConfig"
                    }
                },
                "maxTimeSharedClientsPerGpu": {
                    "type": "string",
                    "description": "The number of time-shared GPU resources to expose for each physical GPU.\n"
                }
            },
            "type": "object",
            "required": [
                "acceleratorCount",
                "acceleratorType",
                "gpuDriverInstallationConfigs",
                "gpuPartitionSize",
                "gpuSharingConfigs",
                "maxTimeSharedClientsPerGpu"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolAcceleratorGpuDriverInstallationConfig:getGcpNodePoolAcceleratorGpuDriverInstallationConfig": {
            "properties": {
                "gpuDriverVersion": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "gpuDriverVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolAcceleratorGpuSharingConfig:getGcpNodePoolAcceleratorGpuSharingConfig": {
            "properties": {
                "gpuSharingStrategy": {
                    "type": "string",
                    "description": "The configuration for GPU sharing options.\n"
                },
                "maxSharedClientsPerGpu": {
                    "type": "string",
                    "description": "The max number of containers that can share a physical GPU.\n"
                }
            },
            "type": "object",
            "required": [
                "gpuSharingStrategy",
                "maxSharedClientsPerGpu"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolLinuxNodeConfig:getGcpNodePoolLinuxNodeConfig": {
            "properties": {
                "cgroupMode": {
                    "type": "string",
                    "description": "cgroupMode specifies the cgroup mode to be used on the node.\n"
                },
                "sysctls": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The Linux kernel parameters to be applied to the nodes and all pods running on the nodes.\n"
                }
            },
            "type": "object",
            "required": [
                "cgroupMode",
                "sysctls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolNodePoolLoggingConfig:getGcpNodePoolNodePoolLoggingConfig": {
            "properties": {
                "variantConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "variantConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolTaint:getGcpNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Update strategy of the node pool.\n"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolUpgradeSetting:getGcpNodePoolUpgradeSetting": {
            "properties": {
                "blueGreenSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getGcpNodePoolUpgradeSettingBlueGreenSetting:getGcpNodePoolUpgradeSettingBlueGreenSetting"
                    }
                },
                "maxSurge": {
                    "type": "integer"
                },
                "maxUnavailable": {
                    "type": "integer"
                },
                "strategy": {
                    "type": "string",
                    "description": "Update strategy of the node pool.\n"
                }
            },
            "type": "object",
            "required": [
                "blueGreenSettings",
                "maxSurge",
                "maxUnavailable",
                "strategy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolUpgradeSettingBlueGreenSetting:getGcpNodePoolUpgradeSettingBlueGreenSetting": {
            "properties": {
                "nodePoolSoakDuration": {
                    "type": "string"
                },
                "standardRolloutPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getGcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicy:getGcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicy"
                    }
                }
            },
            "type": "object",
            "required": [
                "nodePoolSoakDuration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicy:getGcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicy": {
            "properties": {
                "batchNodeCount": {
                    "type": "integer"
                },
                "batchPercentage": {
                    "type": "number"
                },
                "batchSoakDuration": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "batchNodeCount",
                "batchPercentage",
                "batchSoakDuration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolsNodePool:getGcpNodePoolsNodePool": {
            "properties": {
                "accelerators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getGcpNodePoolsNodePoolAccelerator:getGcpNodePoolsNodePoolAccelerator"
                    }
                },
                "autoRepair": {
                    "type": "boolean",
                    "description": "Whether the nodes will be automatically repaired.\n"
                },
                "autoUpgrade": {
                    "type": "boolean",
                    "description": "Whether the nodes will be automatically upgraded.\n"
                },
                "discSizeGb": {
                    "type": "integer",
                    "description": "Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.\n\t\t\t\tIf unspecified, the default disk size is 100GB.\n"
                },
                "discType": {
                    "type": "string",
                    "description": "Type of the disk attached to each node\n\t\t\t\tIf unspecified, the default disk type is 'pd-standard'\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the node pool.\n"
                },
                "imageType": {
                    "type": "string",
                    "description": "The image type to use for this node. Note that for a given image type, the latest version of it will be used\n"
                },
                "initialNodeCount": {
                    "type": "integer",
                    "description": "The initial node count for the pool\n"
                },
                "isAutoscalingEnabled": {
                    "type": "boolean",
                    "description": "Is autoscaling enabled for this node pool.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The map of Kubernetes labels (key/value pairs) to be applied to each node.\n"
                },
                "linuxNodeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getGcpNodePoolsNodePoolLinuxNodeConfig:getGcpNodePoolsNodePoolLinuxNodeConfig"
                    },
                    "description": "Parameters that can be configured on Linux nodes\n"
                },
                "locationPolicy": {
                    "type": "string",
                    "description": "Update strategy of the node pool.\n"
                },
                "machineType": {
                    "type": "string",
                    "description": "The name of a Google Compute Engine machine type.\n\t\t\t\tIf unspecified, the default machine type is e2-medium.\n"
                },
                "maxNodeCount": {
                    "type": "integer",
                    "description": "Maximum number of nodes for one location in the NodePool. Must be \u003e= minNodeCount.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The metadata key/value pairs assigned to instances in the cluster.\n"
                },
                "minNodeCount": {
                    "type": "integer",
                    "description": "Minimum number of nodes for one location in the NodePool. Must be \u003e= 1 and \u003c= maxNodeCount.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the node pool.\n"
                },
                "nodePoolLoggingConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getGcpNodePoolsNodePoolNodePoolLoggingConfig:getGcpNodePoolsNodePoolNodePoolLoggingConfig"
                    },
                    "description": "Logging configuration.\n"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of Google API scopes to be made available on all of the node VMs under the default service account.\n"
                },
                "resourceLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Resource labels associated to node pool.\n"
                },
                "spot": {
                    "type": "boolean",
                    "description": "Spot flag for enabling Spot VM\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of instance tags applied to all nodes.\n\t\t\t\tTags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation.\n\t\t\t\tEach tag within the list must comply with RFC1035.\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getGcpNodePoolsNodePoolTaint:getGcpNodePoolsNodePoolTaint"
                    }
                },
                "totalMaxNodeCount": {
                    "type": "integer",
                    "description": "Maximum number of nodes for one location in the NodePool. Must be \u003e= minNodeCount.\n"
                },
                "totalMinNodeCount": {
                    "type": "integer",
                    "description": "Minimum number of nodes for one location in the NodePool. Must be \u003e= 1 and \u003c= maxNodeCount.\n"
                },
                "upgradeSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getGcpNodePoolsNodePoolUpgradeSetting:getGcpNodePoolsNodePoolUpgradeSetting"
                    },
                    "description": "Upgrade settings control disruption and speed of the upgrade.\n"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Google Compute Engine zones in which the NodePool's nodes should be located.\n"
                }
            },
            "type": "object",
            "required": [
                "autoRepair",
                "autoUpgrade",
                "discSizeGb",
                "discType",
                "fullname",
                "imageType",
                "initialNodeCount",
                "isAutoscalingEnabled",
                "labels",
                "linuxNodeConfigs",
                "locationPolicy",
                "machineType",
                "maxNodeCount",
                "metadata",
                "minNodeCount",
                "name",
                "nodePoolLoggingConfigs",
                "oauthScopes",
                "resourceLabels",
                "spot",
                "tags",
                "totalMaxNodeCount",
                "totalMinNodeCount",
                "upgradeSettings",
                "zones"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolsNodePoolAccelerator:getGcpNodePoolsNodePoolAccelerator": {
            "properties": {
                "acceleratorCount": {
                    "type": "string",
                    "description": "The number of the accelerator cards exposed to an instance.\n"
                },
                "acceleratorType": {
                    "type": "string",
                    "description": "The accelerator type resource name.\n"
                },
                "gpuDriverInstallationConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getGcpNodePoolsNodePoolAcceleratorGpuDriverInstallationConfig:getGcpNodePoolsNodePoolAcceleratorGpuDriverInstallationConfig"
                    }
                },
                "gpuPartitionSize": {
                    "type": "string",
                    "description": "Size of partitions to create on the GPU\n"
                },
                "gpuSharingConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getGcpNodePoolsNodePoolAcceleratorGpuSharingConfig:getGcpNodePoolsNodePoolAcceleratorGpuSharingConfig"
                    }
                },
                "maxTimeSharedClientsPerGpu": {
                    "type": "string",
                    "description": "The number of time-shared GPU resources to expose for each physical GPU.\n"
                }
            },
            "type": "object",
            "required": [
                "acceleratorCount",
                "acceleratorType",
                "gpuDriverInstallationConfigs",
                "gpuPartitionSize",
                "gpuSharingConfigs",
                "maxTimeSharedClientsPerGpu"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolsNodePoolAcceleratorGpuDriverInstallationConfig:getGcpNodePoolsNodePoolAcceleratorGpuDriverInstallationConfig": {
            "properties": {
                "gpuDriverVersion": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "gpuDriverVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolsNodePoolAcceleratorGpuSharingConfig:getGcpNodePoolsNodePoolAcceleratorGpuSharingConfig": {
            "properties": {
                "gpuSharingStrategy": {
                    "type": "string",
                    "description": "The configuration for GPU sharing options.\n"
                },
                "maxSharedClientsPerGpu": {
                    "type": "string",
                    "description": "The max number of containers that can share a physical GPU.\n"
                }
            },
            "type": "object",
            "required": [
                "gpuSharingStrategy",
                "maxSharedClientsPerGpu"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolsNodePoolLinuxNodeConfig:getGcpNodePoolsNodePoolLinuxNodeConfig": {
            "properties": {
                "cgroupModes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "cgroupMode specifies the cgroup mode to be used on the node.\n"
                },
                "sysctls": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The Linux kernel parameters to be applied to the nodes and all pods running on the nodes.\n"
                }
            },
            "type": "object",
            "required": [
                "cgroupModes",
                "sysctls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolsNodePoolNodePoolLoggingConfig:getGcpNodePoolsNodePoolNodePoolLoggingConfig": {
            "properties": {
                "variantConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "variantConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolsNodePoolTaint:getGcpNodePoolsNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Update strategy of the node pool.\n"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolsNodePoolUpgradeSetting:getGcpNodePoolsNodePoolUpgradeSetting": {
            "properties": {
                "blueGreenSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getGcpNodePoolsNodePoolUpgradeSettingBlueGreenSetting:getGcpNodePoolsNodePoolUpgradeSettingBlueGreenSetting"
                    }
                },
                "maxSurge": {
                    "type": "integer"
                },
                "maxUnavailable": {
                    "type": "integer"
                },
                "strategy": {
                    "type": "string",
                    "description": "Update strategy of the node pool.\n"
                }
            },
            "type": "object",
            "required": [
                "blueGreenSettings",
                "maxSurge",
                "maxUnavailable",
                "strategy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolsNodePoolUpgradeSettingBlueGreenSetting:getGcpNodePoolsNodePoolUpgradeSettingBlueGreenSetting": {
            "properties": {
                "nodePoolSoakDuration": {
                    "type": "string"
                },
                "standardRolloutPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getGcpNodePoolsNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicy:getGcpNodePoolsNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicy"
                    }
                }
            },
            "type": "object",
            "required": [
                "nodePoolSoakDuration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpNodePoolsNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicy:getGcpNodePoolsNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicy": {
            "properties": {
                "batchNodeCount": {
                    "type": "integer"
                },
                "batchPercentage": {
                    "type": "number"
                },
                "batchSoakDuration": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "batchNodeCount",
                "batchPercentage",
                "batchSoakDuration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getGcpSqlDatabaseInstancesDatabase:getGcpSqlDatabaseInstancesDatabase": {
            "properties": {
                "connectionName": {
                    "type": "string",
                    "description": "Connection name  of the database.\n"
                },
                "databaseVersion": {
                    "type": "string",
                    "description": "The MySQL, PostgreSQL orSQL Server version to use.Supported values include `MYSQL_5_6`,`MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`,`POSTGRES_11`,`POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `POSTGRES_15`, `SQLSERVER_2017_STANDARD`,`SQLSERVER_2017_ENTERPRISE`,`SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.`SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,`SQLSERVER_2019_WEB`.[Database Version Policies](https://cloud.google.com/sql/docs/db-versions)includes an up-to-date reference of supported versions.\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP address of the database.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the sql database.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "The SelfLink of the sql database.\n"
                },
                "tier": {
                    "type": "string",
                    "description": "The machine type to use. See tiers for more details and supported versions. Postgres supports only shared-core machine types, and custom machine types such as `db-custom-2-13312`.See the [Custom Machine Type Documentation](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) to learn about specifying custom machine types.\n"
                }
            },
            "type": "object",
            "required": [
                "connectionName",
                "databaseVersion",
                "diskSize",
                "ipAddresses",
                "labels",
                "name",
                "selfLink",
                "tier"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getInfrastructurePrivateSubnet:getInfrastructurePrivateSubnet": {
            "properties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "The subnet CIDR block.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The subnet ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The subnet name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getInfrastructurePrivateSubnetTag:getInfrastructurePrivateSubnetTag"
                    },
                    "description": "The subnet's tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of subnet.  Will be one of: `\"public\"` or `\"private\"`.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The Duplo zone that the subnet resides in.  Will be one of:  `\"A\"`, `\"B\"`, `\"C\"`, or `\"D\"`\n"
                }
            },
            "type": "object",
            "required": [
                "cidrBlock",
                "id",
                "name",
                "tags",
                "type",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getInfrastructurePrivateSubnetTag:getInfrastructurePrivateSubnetTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getInfrastructurePublicSubnet:getInfrastructurePublicSubnet": {
            "properties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "The subnet CIDR block.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The subnet ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The subnet name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getInfrastructurePublicSubnetTag:getInfrastructurePublicSubnetTag"
                    },
                    "description": "The subnet's tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of subnet.  Will be one of: `\"public\"` or `\"private\"`.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The Duplo zone that the subnet resides in.  Will be one of:  `\"A\"`, `\"B\"`, `\"C\"`, or `\"D\"`\n"
                }
            },
            "type": "object",
            "required": [
                "cidrBlock",
                "id",
                "name",
                "tags",
                "type",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getInfrastructurePublicSubnetTag:getInfrastructurePublicSubnetTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getInfrastructureSecurityGroup:getInfrastructureSecurityGroup": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The security group ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The security group name.\n"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getInfrastructureSecurityGroupRule:getInfrastructureSecurityGroupRule"
                    },
                    "description": "Security group rules\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of security group.  Will be one of: `\"host\"` or `\"lb\"`.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "readOnly",
                "rules",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getInfrastructureSecurityGroupRule:getInfrastructureSecurityGroupRule": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "destinationRuleType": {
                    "type": "integer"
                },
                "direction": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "sourceAddressPrefix": {
                    "type": "string"
                },
                "sourcePortRange": {
                    "type": "string"
                },
                "sourceRuleType": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "action",
                "destinationRuleType",
                "direction",
                "priority",
                "protocol",
                "sourceAddressPrefix",
                "sourcePortRange",
                "sourceRuleType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getInfrastructuresData:getInfrastructuresData": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The cloud account ID.\n"
                },
                "addressPrefix": {
                    "type": "string",
                    "description": "The CIDR for the VPC or VNet.\n"
                },
                "azcount": {
                    "type": "integer",
                    "description": "The number of availability zones.  Will be one of: `2`, `3`, or `4`.\n"
                },
                "cloud": {
                    "type": "integer",
                    "description": "The numerical index of cloud provider to use for the infrastructure.\nWill be one of:\n\n   - `0` : AWS\n   - `2` : Azure\n"
                },
                "enableK8Cluster": {
                    "type": "boolean",
                    "description": "Whether or not a kubernetes cluster is provisioned.\n"
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud provider region.  The Duplo portal must have already been configured to support this region.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the infrastructure.\n"
                },
                "subnetCidr": {
                    "type": "integer",
                    "description": "The CIDR subnet size (in bits) of the automatically created subnets.\n"
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "addressPrefix",
                "azcount",
                "cloud",
                "enableK8Cluster",
                "infraName",
                "region",
                "status",
                "subnetCidr"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8ConfigMapsConfigMap:getK8ConfigMapsConfigMap": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "A JSON encoded string representing the configmap data. You can use the `jsondecode()` function to parse this, if needed.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "A JSON encoded string representing the configmap metadata. You can use the `jsondecode()` function to parse this, if needed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the configmap.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the configmap will be created in.\n"
                }
            },
            "type": "object",
            "required": [
                "data",
                "metadata",
                "name",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8SecretsSecret:getK8SecretsSecret": {
            "properties": {
                "clientSecretVersion": {
                    "type": "string"
                },
                "secretAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "secretData": {
                    "type": "string",
                    "secret": true
                },
                "secretLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "secretName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                },
                "secretVersion": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientSecretVersion",
                "secretAnnotations",
                "secretData",
                "secretLabels",
                "secretName",
                "secretType",
                "secretVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobMetadata:getK8sCronJobMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the cronjob that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n"
                },
                "generateName": {
                    "type": "string",
                    "description": "Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency\n"
                },
                "generation": {
                    "type": "integer",
                    "description": "A sequence number representing a specific generation of the desired state.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the cronjob. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cronjob, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace defines the space within which name of the cronjob must be unique.\n"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "An opaque value that represents the internal version of this cronjob that can be used by clients to determine when cronjob has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique in time and space value for this cronjob. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n"
                }
            },
            "type": "object",
            "required": [
                "annotations",
                "generation",
                "labels",
                "name",
                "namespace",
                "resourceVersion",
                "uid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpec:getK8sCronJobSpec": {
            "properties": {
                "concurrencyPolicy": {
                    "type": "string",
                    "description": "Specifies how to treat concurrent executions of a Job. Defaults to Allow.\n"
                },
                "failedJobsHistoryLimit": {
                    "type": "integer",
                    "description": "The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.\n"
                },
                "jobTemplate": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplate:getK8sCronJobSpecJobTemplate",
                    "description": "Describes the pod that will be created when executing a cron job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "Cron format string, e.g. 0 * * * * or @hourly, as schedule time of its jobs to be created and executed.\n"
                },
                "startingDeadlineSeconds": {
                    "type": "integer",
                    "description": "Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones.\n"
                },
                "successfulJobsHistoryLimit": {
                    "type": "integer",
                    "description": "The number of successful finished jobs to retain. Defaults to 3.\n"
                },
                "suspend": {
                    "type": "boolean",
                    "description": "This flag tells the controller to suspend subsequent executions, it does not apply to already started executions. Defaults to false.\n"
                }
            },
            "type": "object",
            "required": [
                "jobTemplate",
                "schedule"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplate:getK8sCronJobSpecJobTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateMetadata:getK8sCronJobSpecJobTemplateMetadata",
                    "description": "Standard jobTemplateSpec's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                },
                "spec": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpec:getK8sCronJobSpecJobTemplateSpec",
                    "description": "Specification of the desired behavior of the job\n"
                }
            },
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateMetadata:getK8sCronJobSpecJobTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the jobTemplateSpec that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n"
                },
                "generateName": {
                    "type": "string",
                    "description": "Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency\n"
                },
                "generation": {
                    "type": "integer",
                    "description": "A sequence number representing a specific generation of the desired state.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the jobTemplateSpec. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the jobTemplateSpec, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "An opaque value that represents the internal version of this jobTemplateSpec that can be used by clients to determine when jobTemplateSpec has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique in time and space value for this jobTemplateSpec. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n"
                }
            },
            "type": "object",
            "required": [
                "annotations",
                "generation",
                "labels",
                "name",
                "resourceVersion",
                "uid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpec:getK8sCronJobSpecJobTemplateSpec": {
            "properties": {
                "activeDeadlineSeconds": {
                    "type": "integer",
                    "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n"
                },
                "backoffLimit": {
                    "type": "integer",
                    "description": "Specifies the number of retries before marking this job failed. Defaults to 6\n"
                },
                "completionMode": {
                    "type": "string",
                    "description": "Specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`. More info: https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode\n"
                },
                "completions": {
                    "type": "integer",
                    "description": "Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n"
                },
                "manualSelector": {
                    "type": "boolean",
                    "description": "Controls generation of pod labels and pod selectors. Leave unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md\n"
                },
                "parallelism": {
                    "type": "integer",
                    "description": "Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) \u003c .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n"
                },
                "selector": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecSelector:getK8sCronJobSpecJobTemplateSpecSelector",
                    "description": "A label query over volumes to consider for binding.\n"
                },
                "template": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplate:getK8sCronJobSpecJobTemplateSpecTemplate",
                    "description": "Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n"
                },
                "ttlSecondsAfterFinished": {
                    "type": "string",
                    "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.\n"
                }
            },
            "type": "object",
            "required": [
                "activeDeadlineSeconds",
                "completionMode",
                "manualSelector",
                "selector",
                "template"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecSelector:getK8sCronJobSpecJobTemplateSpecSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecSelectorMatchExpression:getK8sCronJobSpecJobTemplateSpecSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object",
            "required": [
                "matchLabels"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecSelectorMatchExpression:getK8sCronJobSpecJobTemplateSpecSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplate:getK8sCronJobSpecJobTemplateSpecTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateMetadata:getK8sCronJobSpecJobTemplateSpecTemplateMetadata",
                    "description": "Standard cronjob's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                },
                "spec": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpec:getK8sCronJobSpecJobTemplateSpecTemplateSpec",
                    "description": "Spec of the cron job owned by the cluster\n"
                }
            },
            "type": "object",
            "required": [
                "metadata"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateMetadata:getK8sCronJobSpecJobTemplateSpecTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the cronjob that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n"
                },
                "generateName": {
                    "type": "string",
                    "description": "Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency\n"
                },
                "generation": {
                    "type": "integer",
                    "description": "A sequence number representing a specific generation of the desired state.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the cronjob. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cronjob, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "An opaque value that represents the internal version of this cronjob that can be used by clients to determine when cronjob has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique in time and space value for this cronjob. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n"
                }
            },
            "type": "object",
            "required": [
                "annotations",
                "generation",
                "labels",
                "name",
                "resourceVersion",
                "uid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpec:getK8sCronJobSpecJobTemplateSpecTemplateSpec": {
            "properties": {
                "activeDeadlineSeconds": {
                    "type": "integer",
                    "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n"
                },
                "affinity": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinity:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinity",
                    "description": "Optional pod scheduling constraints.\n"
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n"
                },
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainer:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainer"
                    },
                    "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/\n"
                },
                "dnsConfig": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfig:getK8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfig",
                    "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty\n"
                },
                "dnsPolicy": {
                    "type": "string",
                    "description": "Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy\n"
                },
                "enableServiceLinks": {
                    "type": "boolean",
                    "description": "Enables generating environment variables for service discovery. Defaults to true.\n"
                },
                "hostAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecHostAlias:getK8sCronJobSpecJobTemplateSpecTemplateSpecHostAlias"
                    },
                    "description": "List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.\n"
                },
                "hostIpc": {
                    "type": "boolean",
                    "description": "Use the host's ipc namespace. Optional: Defaults to false.\n"
                },
                "hostNetwork": {
                    "type": "boolean",
                    "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.\n"
                },
                "hostPid": {
                    "type": "boolean",
                    "description": "Use the host's pid namespace.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n"
                },
                "imagePullSecrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecret:getK8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecret"
                    },
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod\n"
                },
                "initContainers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainer:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainer"
                    },
                    "description": "List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.\n"
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.\n"
                },
                "readinessGates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGate:getK8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGate"
                    },
                    "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md\n"
                },
                "restartPolicy": {
                    "type": "string",
                    "description": "Restart policy for all containers within the pod. One of OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.\n"
                },
                "runtimeClassName": {
                    "type": "string",
                    "description": "RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class\n"
                },
                "schedulerName": {
                    "type": "string",
                    "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n"
                },
                "securityContext": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContext:getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContext",
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty\n"
                },
                "serviceAccountName": {
                    "type": "string",
                    "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.\n"
                },
                "shareProcessNamespace": {
                    "type": "boolean",
                    "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "If specified, the fully qualified Pod hostname will be \"...svc.\". If not specified, the pod will not have a domainname at all..\n"
                },
                "terminationGracePeriodSeconds": {
                    "type": "integer",
                    "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.\n"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecToleration:getK8sCronJobSpecJobTemplateSpecTemplateSpecToleration"
                    },
                    "description": "If specified, the pod's toleration. Optional: Defaults to empty\n"
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraint:getK8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraint"
                    },
                    "description": "describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolume:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolume"
                    },
                    "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n"
                }
            },
            "type": "object",
            "required": [
                "activeDeadlineSeconds",
                "dnsPolicy",
                "hostAliases",
                "hostIpc",
                "hostNetwork",
                "hostPid",
                "hostname",
                "imagePullSecrets",
                "nodeName",
                "nodeSelector",
                "priorityClassName",
                "readinessGates",
                "runtimeClassName",
                "schedulerName",
                "securityContext",
                "serviceAccountName",
                "subdomain",
                "terminationGracePeriodSeconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinity:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinity": {
            "properties": {
                "nodeAffinity": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinity:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinity",
                    "description": "Node affinity scheduling rules for the pod.\n"
                },
                "podAffinity": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinity:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinity",
                    "description": "Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)\n"
                },
                "podAntiAffinity": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinity:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinity",
                    "description": "Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinity:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinity": {
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.\n"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution",
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.\n"
                }
            },
            "type": "object",
            "required": [
                "preferredDuringSchedulingIgnoredDuringExecutions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "preference": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference",
                    "description": "A node selector term, associated with the corresponding weight.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "weight is in the range 1-100\n"
                }
            },
            "type": "object",
            "required": [
                "preference",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression"
                    },
                    "description": "List of node selector requirements. The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "nodeSelectorTerms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm"
                    },
                    "description": "List of node selector terms. The terms are ORed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression"
                    },
                    "description": "List of node selector requirements. The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinity:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinity": {
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.\n"
                },
                "requiredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.\n"
                }
            },
            "type": "object",
            "required": [
                "preferredDuringSchedulingIgnoredDuringExecutions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "podAffinityTerm": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm",
                    "description": "A pod affinity term, associated with the corresponding weight\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100\n"
                }
            },
            "type": "object",
            "required": [
                "podAffinityTerm",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "required": [
                "labelSelectors",
                "namespaces",
                "topologyKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "required": [
                "labelSelectors",
                "namespaces",
                "topologyKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinity:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinity": {
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.\n"
                },
                "requiredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.\n"
                }
            },
            "type": "object",
            "required": [
                "preferredDuringSchedulingIgnoredDuringExecutions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "podAffinityTerm": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm",
                    "description": "A pod affinity term, associated with the corresponding weight\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100\n"
                }
            },
            "type": "object",
            "required": [
                "podAffinityTerm",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "required": [
                "labelSelectors",
                "namespaces",
                "topologyKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "required": [
                "labelSelectors",
                "namespaces",
                "topologyKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:getK8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainer:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainer": {
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n"
                },
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n"
                },
                "envFroms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFrom:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFrom"
                    },
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.\n"
                },
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnv:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnv"
                    },
                    "description": "List of environment variables to set in the container. Cannot be updated.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/\n"
                },
                "imagePullPolicy": {
                    "type": "string",
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images\n"
                },
                "lifecycle": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycle:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycle",
                    "description": "Actions that the management system should take in response to container lifecycle events\n"
                },
                "livenessProbe": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbe:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbe",
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerPort:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerPort"
                    },
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.\n"
                },
                "readinessProbe": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbe:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbe",
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "resources": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerResources:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerResources",
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n"
                },
                "securityContext": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContext:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContext",
                    "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n"
                },
                "startupProbe": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbe:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbe",
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n"
                },
                "stdin": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.\n"
                },
                "stdinOnce": {
                    "type": "boolean",
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.\n"
                },
                "terminationMessagePath": {
                    "type": "string",
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.\n"
                },
                "terminationMessagePolicy": {
                    "type": "string",
                    "description": "Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n"
                },
                "tty": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a TTY for itself\n"
                },
                "volumeMounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMount:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMount"
                    },
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.\n"
                },
                "workingDir": {
                    "type": "string",
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.\n"
                }
            },
            "type": "object",
            "required": [
                "imagePullPolicy",
                "name",
                "resources",
                "terminationMessagePolicy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnv:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER\n"
                },
                "value": {
                    "type": "string",
                    "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".\n"
                },
                "valueFrom": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFrom:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFrom",
                    "description": "Source for the environment variable's value\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFrom:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFrom": {
            "properties": {
                "configMapRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRef",
                    "description": "The ConfigMap to select from\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRef",
                    "description": "The Secret to select from\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap must be defined\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret must be defined\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFrom:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFrom": {
            "properties": {
                "configMapKeyRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef",
                    "description": "Selects a key of a ConfigMap.\n"
                },
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRef",
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n"
                },
                "secretKeyRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRef",
                    "description": "Selects a key of a secret in the pod's namespace.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to select.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap or its key must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "divisor": {
                    "type": "string"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n"
                }
            },
            "type": "object",
            "required": [
                "resource"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the secret to select from. Must be a valid secret key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret or its key must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycle:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycle": {
            "properties": {
                "postStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStart:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStart"
                    },
                    "description": "post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n"
                },
                "preStops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStop:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStop"
                    },
                    "description": "pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStart:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStart": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStop:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStop": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbe:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpc:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpc:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerPort:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerPort": {
            "properties": {
                "containerPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536.\n"
                },
                "hostIp": {
                    "type": "string",
                    "description": "What host IP to bind the external port to.\n"
                },
                "hostPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.\n"
                },
                "name": {
                    "type": "string",
                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\".\n"
                }
            },
            "type": "object",
            "required": [
                "containerPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbe:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpc:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpc:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerResources:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerResources": {
            "properties": {
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n"
                },
                "requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n"
                }
            },
            "type": "object",
            "required": [
                "limits",
                "requests"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContext:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContext": {
            "properties": {
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN\n"
                },
                "capabilities": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilities:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilities",
                    "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.\n"
                },
                "privileged": {
                    "type": "boolean",
                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.\n"
                },
                "readOnlyRootFilesystem": {
                    "type": "boolean",
                    "description": "Whether this container has a read-only root filesystem. Default is false.\n"
                },
                "runAsGroup": {
                    "type": "string",
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "runAsUser": {
                    "type": "string",
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "seLinuxOptions": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptions:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptions",
                    "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "seccompProfile": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfile:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfile",
                    "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilities:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilities": {
            "properties": {
                "adds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Added capabilities\n"
                },
                "drops": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Removed capabilities\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptions:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptions": {
            "properties": {
                "level": {
                    "type": "string",
                    "description": "Level is SELinux level label that applies to the container.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role is a SELinux role label that applies to the container.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type is a SELinux type label that applies to the container.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User is a SELinux user label that applies to the container.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfile:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfile": {
            "properties": {
                "localhostProfile": {
                    "type": "string",
                    "description": "Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbe:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpc:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpc:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMount:getK8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMount": {
            "properties": {
                "mountPath": {
                    "type": "string",
                    "description": "Path within the container at which the volume should be mounted. Must not contain ':'.\n"
                },
                "mountPropagation": {
                    "type": "string",
                    "description": "Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.\n"
                },
                "name": {
                    "type": "string",
                    "description": "This must match the Name of a Volume.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.\n"
                },
                "subPath": {
                    "type": "string",
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).\n"
                }
            },
            "type": "object",
            "required": [
                "mountPath",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfig:getK8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfig": {
            "properties": {
                "nameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.\n"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOption:getK8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOption"
                    },
                    "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.\n"
                },
                "searches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOption:getK8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOption": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the option.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the option. Optional: Defaults to empty.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecHostAlias:getK8sCronJobSpecJobTemplateSpecTemplateSpecHostAlias": {
            "properties": {
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Hostnames for the IP address.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP address of the host file entry.\n"
                }
            },
            "type": "object",
            "required": [
                "hostnames",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecret:getK8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecret": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainer:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainer": {
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n"
                },
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n"
                },
                "envFroms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFrom:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFrom"
                    },
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.\n"
                },
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnv:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnv"
                    },
                    "description": "List of environment variables to set in the container. Cannot be updated.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/\n"
                },
                "imagePullPolicy": {
                    "type": "string",
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images\n"
                },
                "lifecycle": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycle:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycle",
                    "description": "Actions that the management system should take in response to container lifecycle events\n"
                },
                "livenessProbe": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbe:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbe",
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPort:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPort"
                    },
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.\n"
                },
                "readinessProbe": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbe:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbe",
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "resources": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResources:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResources",
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n"
                },
                "securityContext": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContext:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContext",
                    "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n"
                },
                "startupProbe": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbe:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbe",
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n"
                },
                "stdin": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.\n"
                },
                "stdinOnce": {
                    "type": "boolean",
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.\n"
                },
                "terminationMessagePath": {
                    "type": "string",
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.\n"
                },
                "terminationMessagePolicy": {
                    "type": "string",
                    "description": "Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n"
                },
                "tty": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a TTY for itself\n"
                },
                "volumeMounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMount:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMount"
                    },
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.\n"
                },
                "workingDir": {
                    "type": "string",
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.\n"
                }
            },
            "type": "object",
            "required": [
                "imagePullPolicy",
                "name",
                "resources",
                "terminationMessagePolicy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnv:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER\n"
                },
                "value": {
                    "type": "string",
                    "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".\n"
                },
                "valueFrom": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFrom:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFrom",
                    "description": "Source for the environment variable's value\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFrom:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFrom": {
            "properties": {
                "configMapRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRef",
                    "description": "The ConfigMap to select from\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRef",
                    "description": "The Secret to select from\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap must be defined\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret must be defined\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFrom:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFrom": {
            "properties": {
                "configMapKeyRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef",
                    "description": "Selects a key of a ConfigMap.\n"
                },
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRef",
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n"
                },
                "secretKeyRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef",
                    "description": "Selects a key of a secret in the pod's namespace.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to select.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap or its key must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "divisor": {
                    "type": "string"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n"
                }
            },
            "type": "object",
            "required": [
                "resource"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the secret to select from. Must be a valid secret key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret or its key must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycle:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycle": {
            "properties": {
                "postStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStart:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStart"
                    },
                    "description": "post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n"
                },
                "preStops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStop:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStop"
                    },
                    "description": "pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStart:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStart": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStop:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStop": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbe:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpc:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpc:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPort:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPort": {
            "properties": {
                "containerPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536.\n"
                },
                "hostIp": {
                    "type": "string",
                    "description": "What host IP to bind the external port to.\n"
                },
                "hostPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.\n"
                },
                "name": {
                    "type": "string",
                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\".\n"
                }
            },
            "type": "object",
            "required": [
                "containerPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbe:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpc:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpc:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResources:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResources": {
            "properties": {
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n"
                },
                "requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n"
                }
            },
            "type": "object",
            "required": [
                "limits",
                "requests"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContext:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContext": {
            "properties": {
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN\n"
                },
                "capabilities": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilities:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilities",
                    "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.\n"
                },
                "privileged": {
                    "type": "boolean",
                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.\n"
                },
                "readOnlyRootFilesystem": {
                    "type": "boolean",
                    "description": "Whether this container has a read-only root filesystem. Default is false.\n"
                },
                "runAsGroup": {
                    "type": "string",
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "runAsUser": {
                    "type": "string",
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "seLinuxOptions": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions",
                    "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "seccompProfile": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfile:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfile",
                    "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilities:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilities": {
            "properties": {
                "adds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Added capabilities\n"
                },
                "drops": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Removed capabilities\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions": {
            "properties": {
                "level": {
                    "type": "string",
                    "description": "Level is SELinux level label that applies to the container.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role is a SELinux role label that applies to the container.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type is a SELinux type label that applies to the container.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User is a SELinux user label that applies to the container.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfile:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfile": {
            "properties": {
                "localhostProfile": {
                    "type": "string",
                    "description": "Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbe:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpc:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExec:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpc:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGet:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocket:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMount:getK8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMount": {
            "properties": {
                "mountPath": {
                    "type": "string",
                    "description": "Path within the container at which the volume should be mounted. Must not contain ':'.\n"
                },
                "mountPropagation": {
                    "type": "string",
                    "description": "Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.\n"
                },
                "name": {
                    "type": "string",
                    "description": "This must match the Name of a Volume.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.\n"
                },
                "subPath": {
                    "type": "string",
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).\n"
                }
            },
            "type": "object",
            "required": [
                "mountPath",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGate:getK8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGate": {
            "properties": {
                "conditionType": {
                    "type": "string",
                    "description": "refers to a condition in the pod's condition list with matching type.\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContext:getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContext": {
            "properties": {
                "fsGroup": {
                    "type": "string",
                    "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.\n"
                },
                "fsGroupChangePolicy": {
                    "type": "string",
                    "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.\n"
                },
                "runAsGroup": {
                    "type": "string",
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n"
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "runAsUser": {
                    "type": "string",
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n"
                },
                "seLinuxOptions": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptions:getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptions",
                    "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n"
                },
                "seccompProfile": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfile:getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfile",
                    "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.\n"
                },
                "supplementalGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.\n"
                },
                "sysctls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctl:getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctl"
                    },
                    "description": "holds a list of namespaced sysctls used for the pod.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptions:getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptions": {
            "properties": {
                "level": {
                    "type": "string",
                    "description": "Level is SELinux level label that applies to the container.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role is a SELinux role label that applies to the container.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type is a SELinux type label that applies to the container.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User is a SELinux user label that applies to the container.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfile:getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfile": {
            "properties": {
                "localhostProfile": {
                    "type": "string",
                    "description": "Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctl:getK8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctl": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of a property to set.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of a property to set.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecToleration:getK8sCronJobSpecJobTemplateSpecTemplateSpecToleration": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\n"
                },
                "tolerationSeconds": {
                    "type": "string",
                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraint:getK8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraint": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelector:getK8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "maxSkew": {
                    "type": "integer",
                    "description": "describes the degree to which pods may be unevenly distributed.\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.\n"
                },
                "whenUnsatisfiable": {
                    "type": "string",
                    "description": "indicates how to deal with a pod if it doesn't satisfy the spread constraint.\n"
                }
            },
            "type": "object",
            "required": [
                "labelSelectors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelector:getK8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression:getK8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression:getK8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolume:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolume": {
            "properties": {
                "awsElasticBlockStore": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStore:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStore",
                    "description": "Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                },
                "azureDisk": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDisk:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDisk",
                    "description": "Represents an Azure Data Disk mount on the host and bind mount to the pod.\n"
                },
                "azureFile": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFile:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFile",
                    "description": "Represents an Azure File Service mount on the host and bind mount to the pod.\n"
                },
                "cephFs": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFs:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFs",
                    "description": "Represents a Ceph FS mount on the host that shares a pod's lifetime\n"
                },
                "cinder": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinder:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinder",
                    "description": "Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                },
                "configMap": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMap:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMap",
                    "description": "ConfigMap represents a configMap that should populate this volume\n"
                },
                "csi": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsi:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsi",
                    "description": "Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi\n"
                },
                "downwardApi": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApi:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApi",
                    "description": "DownwardAPI represents downward API about the pod that should populate this volume\n"
                },
                "emptyDir": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDir:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDir",
                    "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n"
                },
                "ephemeral": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeral:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeral",
                    "description": "Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes\n"
                },
                "fc": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFc:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFc",
                    "description": "Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n"
                },
                "flexVolume": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolume:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolume",
                    "description": "Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.\n"
                },
                "flocker": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlocker:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlocker",
                    "description": "Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running\n"
                },
                "gcePersistentDisk": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDisk:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDisk",
                    "description": "Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "gitRepo": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepo:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepo",
                    "description": "GitRepo represents a git repository at a particular revision.\n"
                },
                "glusterfs": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfs:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfs",
                    "description": "Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md\n"
                },
                "hostPath": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPath:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPath",
                    "description": "Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n"
                },
                "iscsi": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsi:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsi",
                    "description": "Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.\n"
                },
                "local": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocal:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocal",
                    "description": "Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local\n"
                },
                "name": {
                    "type": "string",
                    "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "nfs": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfs:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfs",
                    "description": "Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                },
                "persistentVolumeClaim": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaim:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaim",
                    "description": "The specification of a persistent volume.\n"
                },
                "photonPersistentDisk": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDisk:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDisk",
                    "description": "Represents a PhotonController persistent disk attached and mounted on kubelets host machine\n"
                },
                "projected": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjected:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjected",
                    "description": "Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected\n"
                },
                "quobyte": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyte:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyte",
                    "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n"
                },
                "rbd": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbd:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbd",
                    "description": "Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md\n"
                },
                "secret": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecret:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecret",
                    "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                },
                "vsphereVolume": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolume:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolume",
                    "description": "Represents a vSphere volume attached and mounted on kubelets host machine\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStore:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStore": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                },
                "partition": {
                    "type": "integer",
                    "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to set the read-only property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                }
            },
            "type": "object",
            "required": [
                "volumeId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDisk:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDisk": {
            "properties": {
                "cachingMode": {
                    "type": "string",
                    "description": "Host Caching mode: None, Read Only, Read Write.\n"
                },
                "dataDiskUri": {
                    "type": "string",
                    "description": "The URI the data disk in the blob storage\n"
                },
                "diskName": {
                    "type": "string",
                    "description": "The Name of the data disk in the blob storage\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).\n"
                }
            },
            "type": "object",
            "required": [
                "cachingMode",
                "dataDiskUri",
                "diskName",
                "kind"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFile:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFile": {
            "properties": {
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "The name of secret that contains Azure Storage Account Name and Key\n"
                },
                "secretNamespace": {
                    "type": "string",
                    "description": "The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is \"default\" namespace.\n"
                },
                "shareName": {
                    "type": "string",
                    "description": "Share Name\n"
                }
            },
            "type": "object",
            "required": [
                "secretName",
                "shareName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFs:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFs": {
            "properties": {
                "monitors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "path": {
                    "type": "string",
                    "description": "Used as the mounted root, rather than the full Ceph tree, default is /\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "secretFile": {
                    "type": "string",
                    "description": "The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRef",
                    "description": "Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "user": {
                    "type": "string",
                    "description": "User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                }
            },
            "type": "object",
            "required": [
                "monitors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinder:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinder": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                }
            },
            "type": "object",
            "required": [
                "volumeId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMap:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMap": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItem:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the ConfigMap or its keys must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItem:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsi:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsi": {
            "properties": {
                "driver": {
                    "type": "string",
                    "description": "the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "nodePublishSecretRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRef",
                    "description": "A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to set the read-only property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi\n"
                },
                "volumeAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Attributes of the volume to publish.\n"
                }
            },
            "type": "object",
            "required": [
                "driver"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApi:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApi": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItem:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItem:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItem": {
            "properties": {
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRef",
                    "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n"
                }
            },
            "type": "object",
            "required": [
                "fieldRef",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "divisor": {
                    "type": "string"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n"
                }
            },
            "type": "object",
            "required": [
                "containerName",
                "resource"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDir:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDir": {
            "properties": {
                "medium": {
                    "type": "string",
                    "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n"
                },
                "sizeLimit": {
                    "type": "string",
                    "description": "Total amount of local storage required for this EmptyDir volume.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeral:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeral": {
            "properties": {
                "volumeClaimTemplate": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate",
                    "description": "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.\n"
                }
            },
            "type": "object",
            "required": [
                "volumeClaimTemplate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata",
                    "description": "Standard cronjob's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                },
                "spec": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec",
                    "description": "Spec of the cron job owned by the cluster\n"
                }
            },
            "type": "object",
            "required": [
                "spec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the cronjob that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the cronjob. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n"
                }
            },
            "type": "object",
            "required": [
                "labels"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec": {
            "properties": {
                "accessModes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1\n"
                },
                "resources": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources",
                    "description": "A list of the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources\n"
                },
                "storageClassName": {
                    "type": "string",
                    "description": "Name of the storage class requested by the claim\n"
                },
                "volumeMode": {
                    "type": "string",
                    "description": "Kubernetes supports two volumeModes of PersistentVolumes: `Filesystem` and `Block`.\n"
                },
                "volumeName": {
                    "type": "string",
                    "description": "The binding reference to the PersistentVolume backing this claim.\n"
                }
            },
            "type": "object",
            "required": [
                "accessModes",
                "resources",
                "storageClassName",
                "volumeMode",
                "volumeName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources": {
            "properties": {
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/\n"
                },
                "requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/\n"
                }
            },
            "type": "object",
            "required": [
                "requests"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFc:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFc": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "lun": {
                    "type": "integer",
                    "description": "FC target lun number\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).\n"
                },
                "targetWwNs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "FC target worldwide names (WWNs)\n"
                }
            },
            "type": "object",
            "required": [
                "lun",
                "targetWwNs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolume:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolume": {
            "properties": {
                "driver": {
                    "type": "string",
                    "description": "Driver is the name of the driver to use for this volume.\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Extra command options if any.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRef",
                    "description": "Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.\n"
                }
            },
            "type": "object",
            "required": [
                "driver"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlocker:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlocker": {
            "properties": {
                "datasetName": {
                    "type": "string",
                    "description": "Name of the dataset stored as metadata \u003e name on the dataset for Flocker should be considered as deprecated\n"
                },
                "datasetUuid": {
                    "type": "string",
                    "description": "UUID of the dataset. This is unique identifier of a Flocker dataset\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDisk:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDisk": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "partition": {
                    "type": "integer",
                    "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "pdName": {
                    "type": "string",
                    "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                }
            },
            "type": "object",
            "required": [
                "pdName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepo:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepo": {
            "properties": {
                "directory": {
                    "type": "string",
                    "description": "Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Repository URL\n"
                },
                "revision": {
                    "type": "string",
                    "description": "Commit hash for the specified revision.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfs:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfs": {
            "properties": {
                "endpointsName": {
                    "type": "string",
                    "description": "The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n"
                },
                "path": {
                    "type": "string",
                    "description": "The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n"
                }
            },
            "type": "object",
            "required": [
                "endpointsName",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPath:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPath": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type for HostPath volume. Allowed values are \"\" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsi:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsi": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\n"
                },
                "iqn": {
                    "type": "string",
                    "description": "Target iSCSI Qualified Name.\n"
                },
                "iscsiInterface": {
                    "type": "string",
                    "description": "iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).\n"
                },
                "lun": {
                    "type": "integer",
                    "description": "iSCSI target lun number.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false.\n"
                },
                "targetPortal": {
                    "type": "string",
                    "description": "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n"
                }
            },
            "type": "object",
            "required": [
                "iqn",
                "targetPortal"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocal:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocal": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfs:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfs": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                }
            },
            "type": "object",
            "required": [
                "path",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaim:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaim": {
            "properties": {
                "claimName": {
                    "type": "string",
                    "description": "ClaimName is the name of a PersistentVolumeClaim in the same\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Will force the ReadOnly setting in VolumeMounts.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDisk:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDisk": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "pdId": {
                    "type": "string",
                    "description": "ID that identifies Photon Controller persistent disk\n"
                }
            },
            "type": "object",
            "required": [
                "pdId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjected:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjected": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSource:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSource"
                    },
                    "description": "Source of the volume to project in the directory.\n"
                }
            },
            "type": "object",
            "required": [
                "sources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSource:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSource": {
            "properties": {
                "configMaps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMap:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMap"
                    },
                    "description": "ConfigMap represents a configMap that should populate this volume\n"
                },
                "downwardApi": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApi:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApi",
                    "description": "DownwardAPI represents downward API about the pod that should populate this volume\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecret:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecret"
                    },
                    "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                },
                "serviceAccountToken": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountToken:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountToken",
                    "description": "A projected service account token volume\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMap:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMap": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItem:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the ConfigMap or it's keys must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItem:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApi:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApi": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItem:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItem"
                    },
                    "description": "Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItem:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItem": {
            "properties": {
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef",
                    "description": "Selects a field of the pod: only annotations, labels, name and namespace are supported.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to 'v1'.\n"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "divisor": {
                    "type": "string"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n"
                }
            },
            "type": "object",
            "required": [
                "containerName",
                "resource"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecret:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecret": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItem:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the Secret or it's keys must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItem:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountToken:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountToken": {
            "properties": {
                "audience": {
                    "type": "string",
                    "description": "Audience is the intended audience of the token\n"
                },
                "expirationSeconds": {
                    "type": "integer",
                    "description": "ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path specifies a relative path to the mount point of the projected volume.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyte:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyte": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "Group to map volume access to Default is no group\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.\n"
                },
                "registry": {
                    "type": "string",
                    "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes\n"
                },
                "user": {
                    "type": "string",
                    "description": "User to map volume access to Defaults to serivceaccount user\n"
                },
                "volume": {
                    "type": "string",
                    "description": "Volume is a string that references an already created Quobyte volume by name.\n"
                }
            },
            "type": "object",
            "required": [
                "registry",
                "volume"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbd:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbd": {
            "properties": {
                "cephMonitors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\n"
                },
                "keyring": {
                    "type": "string",
                    "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "radosUser": {
                    "type": "string",
                    "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "rbdImage": {
                    "type": "string",
                    "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "rbdPool": {
                    "type": "string",
                    "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRef",
                    "description": "Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                }
            },
            "type": "object",
            "required": [
                "cephMonitors",
                "keyring",
                "rbdImage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRef:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecret:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecret": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItem:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the Secret or its keys must be defined.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItem:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolume:getK8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolume": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "volumePath": {
                    "type": "string",
                    "description": "Path that identifies vSphere volume vmdk\n"
                }
            },
            "type": "object",
            "required": [
                "volumePath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobMetadata:getK8sJobMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n"
                },
                "generateName": {
                    "type": "string",
                    "description": "Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency\n"
                },
                "generation": {
                    "type": "integer",
                    "description": "A sequence number representing a specific generation of the desired state.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace defines the space within which name of the job must be unique.\n"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n"
                }
            },
            "type": "object",
            "required": [
                "annotations",
                "generation",
                "labels",
                "name",
                "namespace",
                "resourceVersion",
                "uid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpec:getK8sJobSpec": {
            "properties": {
                "activeDeadlineSeconds": {
                    "type": "integer",
                    "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n"
                },
                "backoffLimit": {
                    "type": "integer",
                    "description": "Specifies the number of retries before marking this job failed. Defaults to 6\n"
                },
                "completionMode": {
                    "type": "string",
                    "description": "Specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`. More info: https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode\n"
                },
                "completions": {
                    "type": "integer",
                    "description": "Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n"
                },
                "manualSelector": {
                    "type": "boolean",
                    "description": "Controls generation of pod labels and pod selectors. Leave unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md\n"
                },
                "parallelism": {
                    "type": "integer",
                    "description": "Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) \u003c .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n"
                },
                "selector": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecSelector:getK8sJobSpecSelector",
                    "description": "A label query over volumes to consider for binding.\n"
                },
                "template": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplate:getK8sJobSpecTemplate",
                    "description": "Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n"
                },
                "ttlSecondsAfterFinished": {
                    "type": "string",
                    "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.\n"
                }
            },
            "type": "object",
            "required": [
                "activeDeadlineSeconds",
                "completionMode",
                "manualSelector",
                "selector",
                "template"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecSelector:getK8sJobSpecSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecSelectorMatchExpression:getK8sJobSpecSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object",
            "required": [
                "matchLabels"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecSelectorMatchExpression:getK8sJobSpecSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplate:getK8sJobSpecTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateMetadata:getK8sJobSpecTemplateMetadata",
                    "description": "Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                },
                "spec": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpec:getK8sJobSpecTemplateSpec",
                    "description": "Spec of the pods owned by the job\n"
                }
            },
            "type": "object",
            "required": [
                "metadata"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateMetadata:getK8sJobSpecTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n"
                },
                "generateName": {
                    "type": "string",
                    "description": "Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency\n"
                },
                "generation": {
                    "type": "integer",
                    "description": "A sequence number representing a specific generation of the desired state.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n"
                }
            },
            "type": "object",
            "required": [
                "annotations",
                "generation",
                "labels",
                "name",
                "resourceVersion",
                "uid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpec:getK8sJobSpecTemplateSpec": {
            "properties": {
                "activeDeadlineSeconds": {
                    "type": "integer",
                    "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n"
                },
                "affinity": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinity:getK8sJobSpecTemplateSpecAffinity",
                    "description": "Optional pod scheduling constraints.\n"
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n"
                },
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainer:getK8sJobSpecTemplateSpecContainer"
                    },
                    "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/\n"
                },
                "dnsConfig": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecDnsConfig:getK8sJobSpecTemplateSpecDnsConfig",
                    "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty\n"
                },
                "dnsPolicy": {
                    "type": "string",
                    "description": "Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy\n"
                },
                "enableServiceLinks": {
                    "type": "boolean",
                    "description": "Enables generating environment variables for service discovery. Defaults to true.\n"
                },
                "hostAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecHostAlias:getK8sJobSpecTemplateSpecHostAlias"
                    },
                    "description": "List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.\n"
                },
                "hostIpc": {
                    "type": "boolean",
                    "description": "Use the host's ipc namespace. Optional: Defaults to false.\n"
                },
                "hostNetwork": {
                    "type": "boolean",
                    "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.\n"
                },
                "hostPid": {
                    "type": "boolean",
                    "description": "Use the host's pid namespace.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n"
                },
                "imagePullSecrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecImagePullSecret:getK8sJobSpecTemplateSpecImagePullSecret"
                    },
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod\n"
                },
                "initContainers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainer:getK8sJobSpecTemplateSpecInitContainer"
                    },
                    "description": "List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.\n"
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.\n"
                },
                "readinessGates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecReadinessGate:getK8sJobSpecTemplateSpecReadinessGate"
                    },
                    "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md\n"
                },
                "restartPolicy": {
                    "type": "string",
                    "description": "Restart policy for all containers within the pod. One of OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.\n"
                },
                "runtimeClassName": {
                    "type": "string",
                    "description": "RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class\n"
                },
                "schedulerName": {
                    "type": "string",
                    "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n"
                },
                "securityContext": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecSecurityContext:getK8sJobSpecTemplateSpecSecurityContext",
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty\n"
                },
                "serviceAccountName": {
                    "type": "string",
                    "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.\n"
                },
                "shareProcessNamespace": {
                    "type": "boolean",
                    "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "If specified, the fully qualified Pod hostname will be \"...svc.\". If not specified, the pod will not have a domainname at all..\n"
                },
                "terminationGracePeriodSeconds": {
                    "type": "integer",
                    "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.\n"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecToleration:getK8sJobSpecTemplateSpecToleration"
                    },
                    "description": "If specified, the pod's toleration. Optional: Defaults to empty\n"
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecTopologySpreadConstraint:getK8sJobSpecTemplateSpecTopologySpreadConstraint"
                    },
                    "description": "describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolume:getK8sJobSpecTemplateSpecVolume"
                    },
                    "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n"
                }
            },
            "type": "object",
            "required": [
                "activeDeadlineSeconds",
                "dnsPolicy",
                "hostAliases",
                "hostIpc",
                "hostNetwork",
                "hostPid",
                "hostname",
                "imagePullSecrets",
                "nodeName",
                "nodeSelector",
                "priorityClassName",
                "readinessGates",
                "runtimeClassName",
                "schedulerName",
                "securityContext",
                "serviceAccountName",
                "subdomain",
                "terminationGracePeriodSeconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinity:getK8sJobSpecTemplateSpecAffinity": {
            "properties": {
                "nodeAffinity": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityNodeAffinity:getK8sJobSpecTemplateSpecAffinityNodeAffinity",
                    "description": "Node affinity scheduling rules for the pod.\n"
                },
                "podAffinity": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinity:getK8sJobSpecTemplateSpecAffinityPodAffinity",
                    "description": "Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)\n"
                },
                "podAntiAffinity": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinity:getK8sJobSpecTemplateSpecAffinityPodAntiAffinity",
                    "description": "Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityNodeAffinity:getK8sJobSpecTemplateSpecAffinityNodeAffinity": {
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution:getK8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.\n"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:getK8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution",
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.\n"
                }
            },
            "type": "object",
            "required": [
                "preferredDuringSchedulingIgnoredDuringExecutions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution:getK8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "preference": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference:getK8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference",
                    "description": "A node selector term, associated with the corresponding weight.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "weight is in the range 1-100\n"
                }
            },
            "type": "object",
            "required": [
                "preference",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference:getK8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression:getK8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression"
                    },
                    "description": "List of node selector requirements. The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression:getK8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:getK8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "nodeSelectorTerms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm:getK8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm"
                    },
                    "description": "List of node selector terms. The terms are ORed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm:getK8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression:getK8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression"
                    },
                    "description": "List of node selector requirements. The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression:getK8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinity:getK8sJobSpecTemplateSpecAffinityPodAffinity": {
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution:getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.\n"
                },
                "requiredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution:getK8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.\n"
                }
            },
            "type": "object",
            "required": [
                "preferredDuringSchedulingIgnoredDuringExecutions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution:getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "podAffinityTerm": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm",
                    "description": "A pod affinity term, associated with the corresponding weight\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100\n"
                }
            },
            "type": "object",
            "required": [
                "podAffinityTerm",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "required": [
                "labelSelectors",
                "namespaces",
                "topologyKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:getK8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution:getK8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:getK8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "required": [
                "labelSelectors",
                "namespaces",
                "topologyKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:getK8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:getK8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:getK8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinity:getK8sJobSpecTemplateSpecAffinityPodAntiAffinity": {
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution:getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.\n"
                },
                "requiredDuringSchedulingIgnoredDuringExecutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution:getK8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution"
                    },
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.\n"
                }
            },
            "type": "object",
            "required": [
                "preferredDuringSchedulingIgnoredDuringExecutions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution:getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "podAffinityTerm": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm",
                    "description": "A pod affinity term, associated with the corresponding weight\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100\n"
                }
            },
            "type": "object",
            "required": [
                "podAffinityTerm",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm:getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "required": [
                "labelSelectors",
                "namespaces",
                "topologyKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector:getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression:getK8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution:getK8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:getK8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "empty topology key is interpreted by the scheduler as 'all topologies'\n"
                }
            },
            "type": "object",
            "required": [
                "labelSelectors",
                "namespaces",
                "topologyKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector:getK8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:getK8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression:getK8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainer:getK8sJobSpecTemplateSpecContainer": {
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n"
                },
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n"
                },
                "envFroms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvFrom:getK8sJobSpecTemplateSpecContainerEnvFrom"
                    },
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.\n"
                },
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerEnv:getK8sJobSpecTemplateSpecContainerEnv"
                    },
                    "description": "List of environment variables to set in the container. Cannot be updated.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/\n"
                },
                "imagePullPolicy": {
                    "type": "string",
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images\n"
                },
                "lifecycle": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecycle:getK8sJobSpecTemplateSpecContainerLifecycle",
                    "description": "Actions that the management system should take in response to container lifecycle events\n"
                },
                "livenessProbe": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLivenessProbe:getK8sJobSpecTemplateSpecContainerLivenessProbe",
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerPort:getK8sJobSpecTemplateSpecContainerPort"
                    },
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.\n"
                },
                "readinessProbe": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerReadinessProbe:getK8sJobSpecTemplateSpecContainerReadinessProbe",
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "resources": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerResources:getK8sJobSpecTemplateSpecContainerResources",
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n"
                },
                "securityContext": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerSecurityContext:getK8sJobSpecTemplateSpecContainerSecurityContext",
                    "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n"
                },
                "startupProbe": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerStartupProbe:getK8sJobSpecTemplateSpecContainerStartupProbe",
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n"
                },
                "stdin": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.\n"
                },
                "stdinOnce": {
                    "type": "boolean",
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.\n"
                },
                "terminationMessagePath": {
                    "type": "string",
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.\n"
                },
                "terminationMessagePolicy": {
                    "type": "string",
                    "description": "Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n"
                },
                "tty": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a TTY for itself\n"
                },
                "volumeMounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerVolumeMount:getK8sJobSpecTemplateSpecContainerVolumeMount"
                    },
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.\n"
                },
                "workingDir": {
                    "type": "string",
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.\n"
                }
            },
            "type": "object",
            "required": [
                "imagePullPolicy",
                "name",
                "resources",
                "terminationMessagePolicy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerEnv:getK8sJobSpecTemplateSpecContainerEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER\n"
                },
                "value": {
                    "type": "string",
                    "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".\n"
                },
                "valueFrom": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvValueFrom:getK8sJobSpecTemplateSpecContainerEnvValueFrom",
                    "description": "Source for the environment variable's value\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvFrom:getK8sJobSpecTemplateSpecContainerEnvFrom": {
            "properties": {
                "configMapRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvFromConfigMapRef:getK8sJobSpecTemplateSpecContainerEnvFromConfigMapRef",
                    "description": "The ConfigMap to select from\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvFromSecretRef:getK8sJobSpecTemplateSpecContainerEnvFromSecretRef",
                    "description": "The Secret to select from\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvFromConfigMapRef:getK8sJobSpecTemplateSpecContainerEnvFromConfigMapRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap must be defined\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvFromSecretRef:getK8sJobSpecTemplateSpecContainerEnvFromSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret must be defined\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvValueFrom:getK8sJobSpecTemplateSpecContainerEnvValueFrom": {
            "properties": {
                "configMapKeyRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef:getK8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef",
                    "description": "Selects a key of a ConfigMap.\n"
                },
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvValueFromFieldRef:getK8sJobSpecTemplateSpecContainerEnvValueFromFieldRef",
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRef:getK8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n"
                },
                "secretKeyRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRef:getK8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRef",
                    "description": "Selects a key of a secret in the pod's namespace.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef:getK8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to select.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap or its key must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvValueFromFieldRef:getK8sJobSpecTemplateSpecContainerEnvValueFromFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRef:getK8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "divisor": {
                    "type": "string"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n"
                }
            },
            "type": "object",
            "required": [
                "resource"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRef:getK8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the secret to select from. Must be a valid secret key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret or its key must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecycle:getK8sJobSpecTemplateSpecContainerLifecycle": {
            "properties": {
                "postStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePostStart:getK8sJobSpecTemplateSpecContainerLifecyclePostStart"
                    },
                    "description": "post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n"
                },
                "preStops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePreStop:getK8sJobSpecTemplateSpecContainerLifecyclePreStop"
                    },
                    "description": "pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePostStart:getK8sJobSpecTemplateSpecContainerLifecyclePostStart": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePostStartExec:getK8sJobSpecTemplateSpecContainerLifecyclePostStartExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGet:getK8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocket:getK8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePostStartExec:getK8sJobSpecTemplateSpecContainerLifecyclePostStartExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGet:getK8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader:getK8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader:getK8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocket:getK8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePreStop:getK8sJobSpecTemplateSpecContainerLifecyclePreStop": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePreStopExec:getK8sJobSpecTemplateSpecContainerLifecyclePreStopExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGet:getK8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocket:getK8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePreStopExec:getK8sJobSpecTemplateSpecContainerLifecyclePreStopExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGet:getK8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader:getK8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader:getK8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocket:getK8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLivenessProbe:getK8sJobSpecTemplateSpecContainerLivenessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLivenessProbeExec:getK8sJobSpecTemplateSpecContainerLivenessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLivenessProbeGrpc:getK8sJobSpecTemplateSpecContainerLivenessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLivenessProbeHttpGet:getK8sJobSpecTemplateSpecContainerLivenessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLivenessProbeTcpSocket:getK8sJobSpecTemplateSpecContainerLivenessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLivenessProbeExec:getK8sJobSpecTemplateSpecContainerLivenessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLivenessProbeGrpc:getK8sJobSpecTemplateSpecContainerLivenessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLivenessProbeHttpGet:getK8sJobSpecTemplateSpecContainerLivenessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader:getK8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader:getK8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerLivenessProbeTcpSocket:getK8sJobSpecTemplateSpecContainerLivenessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerPort:getK8sJobSpecTemplateSpecContainerPort": {
            "properties": {
                "containerPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536.\n"
                },
                "hostIp": {
                    "type": "string",
                    "description": "What host IP to bind the external port to.\n"
                },
                "hostPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.\n"
                },
                "name": {
                    "type": "string",
                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\".\n"
                }
            },
            "type": "object",
            "required": [
                "containerPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerReadinessProbe:getK8sJobSpecTemplateSpecContainerReadinessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerReadinessProbeExec:getK8sJobSpecTemplateSpecContainerReadinessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerReadinessProbeGrpc:getK8sJobSpecTemplateSpecContainerReadinessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerReadinessProbeHttpGet:getK8sJobSpecTemplateSpecContainerReadinessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerReadinessProbeTcpSocket:getK8sJobSpecTemplateSpecContainerReadinessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerReadinessProbeExec:getK8sJobSpecTemplateSpecContainerReadinessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerReadinessProbeGrpc:getK8sJobSpecTemplateSpecContainerReadinessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerReadinessProbeHttpGet:getK8sJobSpecTemplateSpecContainerReadinessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader:getK8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader:getK8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerReadinessProbeTcpSocket:getK8sJobSpecTemplateSpecContainerReadinessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerResources:getK8sJobSpecTemplateSpecContainerResources": {
            "properties": {
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n"
                },
                "requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n"
                }
            },
            "type": "object",
            "required": [
                "limits",
                "requests"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerSecurityContext:getK8sJobSpecTemplateSpecContainerSecurityContext": {
            "properties": {
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN\n"
                },
                "capabilities": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerSecurityContextCapabilities:getK8sJobSpecTemplateSpecContainerSecurityContextCapabilities",
                    "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.\n"
                },
                "privileged": {
                    "type": "boolean",
                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.\n"
                },
                "readOnlyRootFilesystem": {
                    "type": "boolean",
                    "description": "Whether this container has a read-only root filesystem. Default is false.\n"
                },
                "runAsGroup": {
                    "type": "string",
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "runAsUser": {
                    "type": "string",
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "seLinuxOptions": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptions:getK8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptions",
                    "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "seccompProfile": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerSecurityContextSeccompProfile:getK8sJobSpecTemplateSpecContainerSecurityContextSeccompProfile",
                    "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerSecurityContextCapabilities:getK8sJobSpecTemplateSpecContainerSecurityContextCapabilities": {
            "properties": {
                "adds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Added capabilities\n"
                },
                "drops": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Removed capabilities\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptions:getK8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptions": {
            "properties": {
                "level": {
                    "type": "string",
                    "description": "Level is SELinux level label that applies to the container.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role is a SELinux role label that applies to the container.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type is a SELinux type label that applies to the container.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User is a SELinux user label that applies to the container.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerSecurityContextSeccompProfile:getK8sJobSpecTemplateSpecContainerSecurityContextSeccompProfile": {
            "properties": {
                "localhostProfile": {
                    "type": "string",
                    "description": "Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerStartupProbe:getK8sJobSpecTemplateSpecContainerStartupProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerStartupProbeExec:getK8sJobSpecTemplateSpecContainerStartupProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerStartupProbeGrpc:getK8sJobSpecTemplateSpecContainerStartupProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerStartupProbeHttpGet:getK8sJobSpecTemplateSpecContainerStartupProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerStartupProbeTcpSocket:getK8sJobSpecTemplateSpecContainerStartupProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerStartupProbeExec:getK8sJobSpecTemplateSpecContainerStartupProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerStartupProbeGrpc:getK8sJobSpecTemplateSpecContainerStartupProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerStartupProbeHttpGet:getK8sJobSpecTemplateSpecContainerStartupProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader:getK8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader:getK8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerStartupProbeTcpSocket:getK8sJobSpecTemplateSpecContainerStartupProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecContainerVolumeMount:getK8sJobSpecTemplateSpecContainerVolumeMount": {
            "properties": {
                "mountPath": {
                    "type": "string",
                    "description": "Path within the container at which the volume should be mounted. Must not contain ':'.\n"
                },
                "mountPropagation": {
                    "type": "string",
                    "description": "Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.\n"
                },
                "name": {
                    "type": "string",
                    "description": "This must match the Name of a Volume.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.\n"
                },
                "subPath": {
                    "type": "string",
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).\n"
                }
            },
            "type": "object",
            "required": [
                "mountPath",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecDnsConfig:getK8sJobSpecTemplateSpecDnsConfig": {
            "properties": {
                "nameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.\n"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecDnsConfigOption:getK8sJobSpecTemplateSpecDnsConfigOption"
                    },
                    "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.\n"
                },
                "searches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecDnsConfigOption:getK8sJobSpecTemplateSpecDnsConfigOption": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the option.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the option. Optional: Defaults to empty.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecHostAlias:getK8sJobSpecTemplateSpecHostAlias": {
            "properties": {
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Hostnames for the IP address.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP address of the host file entry.\n"
                }
            },
            "type": "object",
            "required": [
                "hostnames",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecImagePullSecret:getK8sJobSpecTemplateSpecImagePullSecret": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainer:getK8sJobSpecTemplateSpecInitContainer": {
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n"
                },
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n"
                },
                "envFroms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvFrom:getK8sJobSpecTemplateSpecInitContainerEnvFrom"
                    },
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.\n"
                },
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnv:getK8sJobSpecTemplateSpecInitContainerEnv"
                    },
                    "description": "List of environment variables to set in the container. Cannot be updated.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/\n"
                },
                "imagePullPolicy": {
                    "type": "string",
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images\n"
                },
                "lifecycle": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecycle:getK8sJobSpecTemplateSpecInitContainerLifecycle",
                    "description": "Actions that the management system should take in response to container lifecycle events\n"
                },
                "livenessProbe": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLivenessProbe:getK8sJobSpecTemplateSpecInitContainerLivenessProbe",
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerPort:getK8sJobSpecTemplateSpecInitContainerPort"
                    },
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.\n"
                },
                "readinessProbe": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerReadinessProbe:getK8sJobSpecTemplateSpecInitContainerReadinessProbe",
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "resources": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerResources:getK8sJobSpecTemplateSpecInitContainerResources",
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n"
                },
                "securityContext": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerSecurityContext:getK8sJobSpecTemplateSpecInitContainerSecurityContext",
                    "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n"
                },
                "startupProbe": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerStartupProbe:getK8sJobSpecTemplateSpecInitContainerStartupProbe",
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n"
                },
                "stdin": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.\n"
                },
                "stdinOnce": {
                    "type": "boolean",
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.\n"
                },
                "terminationMessagePath": {
                    "type": "string",
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.\n"
                },
                "terminationMessagePolicy": {
                    "type": "string",
                    "description": "Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n"
                },
                "tty": {
                    "type": "boolean",
                    "description": "Whether this container should allocate a TTY for itself\n"
                },
                "volumeMounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerVolumeMount:getK8sJobSpecTemplateSpecInitContainerVolumeMount"
                    },
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.\n"
                },
                "workingDir": {
                    "type": "string",
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.\n"
                }
            },
            "type": "object",
            "required": [
                "imagePullPolicy",
                "name",
                "resources",
                "terminationMessagePolicy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnv:getK8sJobSpecTemplateSpecInitContainerEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER\n"
                },
                "value": {
                    "type": "string",
                    "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".\n"
                },
                "valueFrom": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvValueFrom:getK8sJobSpecTemplateSpecInitContainerEnvValueFrom",
                    "description": "Source for the environment variable's value\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvFrom:getK8sJobSpecTemplateSpecInitContainerEnvFrom": {
            "properties": {
                "configMapRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRef:getK8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRef",
                    "description": "The ConfigMap to select from\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvFromSecretRef:getK8sJobSpecTemplateSpecInitContainerEnvFromSecretRef",
                    "description": "The Secret to select from\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRef:getK8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap must be defined\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvFromSecretRef:getK8sJobSpecTemplateSpecInitContainerEnvFromSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret must be defined\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvValueFrom:getK8sJobSpecTemplateSpecInitContainerEnvValueFrom": {
            "properties": {
                "configMapKeyRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef:getK8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef",
                    "description": "Selects a key of a ConfigMap.\n"
                },
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRef:getK8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRef",
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef:getK8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n"
                },
                "secretKeyRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef:getK8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef",
                    "description": "Selects a key of a secret in the pod's namespace.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef:getK8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to select.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the ConfigMap or its key must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRef:getK8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef:getK8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "divisor": {
                    "type": "string"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n"
                }
            },
            "type": "object",
            "required": [
                "resource"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef:getK8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the secret to select from. Must be a valid secret key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Specify whether the Secret or its key must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecycle:getK8sJobSpecTemplateSpecInitContainerLifecycle": {
            "properties": {
                "postStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePostStart:getK8sJobSpecTemplateSpecInitContainerLifecyclePostStart"
                    },
                    "description": "post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n"
                },
                "preStops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePreStop:getK8sJobSpecTemplateSpecInitContainerLifecyclePreStop"
                    },
                    "description": "pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePostStart:getK8sJobSpecTemplateSpecInitContainerLifecyclePostStart": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartExec:getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGet:getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket:getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartExec:getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGet:getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader:getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader:getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket:getK8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePreStop:getK8sJobSpecTemplateSpecInitContainerLifecyclePreStop": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopExec:getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopExec",
                    "description": "exec specifies the action to take.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGet:getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket:getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopExec:getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGet:getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader:getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader:getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket:getK8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLivenessProbe:getK8sJobSpecTemplateSpecInitContainerLivenessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLivenessProbeExec:getK8sJobSpecTemplateSpecInitContainerLivenessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLivenessProbeGrpc:getK8sJobSpecTemplateSpecInitContainerLivenessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGet:getK8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocket:getK8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLivenessProbeExec:getK8sJobSpecTemplateSpecInitContainerLivenessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLivenessProbeGrpc:getK8sJobSpecTemplateSpecInitContainerLivenessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGet:getK8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader:getK8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader:getK8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocket:getK8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerPort:getK8sJobSpecTemplateSpecInitContainerPort": {
            "properties": {
                "containerPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536.\n"
                },
                "hostIp": {
                    "type": "string",
                    "description": "What host IP to bind the external port to.\n"
                },
                "hostPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.\n"
                },
                "name": {
                    "type": "string",
                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\".\n"
                }
            },
            "type": "object",
            "required": [
                "containerPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerReadinessProbe:getK8sJobSpecTemplateSpecInitContainerReadinessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerReadinessProbeExec:getK8sJobSpecTemplateSpecInitContainerReadinessProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerReadinessProbeGrpc:getK8sJobSpecTemplateSpecInitContainerReadinessProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGet:getK8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocket:getK8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerReadinessProbeExec:getK8sJobSpecTemplateSpecInitContainerReadinessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerReadinessProbeGrpc:getK8sJobSpecTemplateSpecInitContainerReadinessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGet:getK8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader:getK8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader:getK8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocket:getK8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerResources:getK8sJobSpecTemplateSpecInitContainerResources": {
            "properties": {
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n"
                },
                "requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n"
                }
            },
            "type": "object",
            "required": [
                "limits",
                "requests"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerSecurityContext:getK8sJobSpecTemplateSpecInitContainerSecurityContext": {
            "properties": {
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN\n"
                },
                "capabilities": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerSecurityContextCapabilities:getK8sJobSpecTemplateSpecInitContainerSecurityContextCapabilities",
                    "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.\n"
                },
                "privileged": {
                    "type": "boolean",
                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.\n"
                },
                "readOnlyRootFilesystem": {
                    "type": "boolean",
                    "description": "Whether this container has a read-only root filesystem. Default is false.\n"
                },
                "runAsGroup": {
                    "type": "string",
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "runAsUser": {
                    "type": "string",
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "seLinuxOptions": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions:getK8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions",
                    "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "seccompProfile": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfile:getK8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfile",
                    "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerSecurityContextCapabilities:getK8sJobSpecTemplateSpecInitContainerSecurityContextCapabilities": {
            "properties": {
                "adds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Added capabilities\n"
                },
                "drops": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Removed capabilities\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions:getK8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions": {
            "properties": {
                "level": {
                    "type": "string",
                    "description": "Level is SELinux level label that applies to the container.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role is a SELinux role label that applies to the container.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type is a SELinux type label that applies to the container.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User is a SELinux user label that applies to the container.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfile:getK8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfile": {
            "properties": {
                "localhostProfile": {
                    "type": "string",
                    "description": "Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerStartupProbe:getK8sJobSpecTemplateSpecInitContainerStartupProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerStartupProbeExec:getK8sJobSpecTemplateSpecInitContainerStartupProbeExec",
                    "description": "exec specifies the action to take.\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\n"
                },
                "grpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerStartupProbeGrpc:getK8sJobSpecTemplateSpecInitContainerStartupProbeGrpc"
                    },
                    "description": "GRPC specifies an action involving a GRPC port.\n"
                },
                "httpGet": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerStartupProbeHttpGet:getK8sJobSpecTemplateSpecInitContainerStartupProbeHttpGet",
                    "description": "Specifies the http request to perform.\n"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                },
                "periodSeconds": {
                    "type": "integer",
                    "description": "How often (in seconds) to perform the probe\n"
                },
                "successThreshold": {
                    "type": "integer",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\n"
                },
                "tcpSockets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocket:getK8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocket"
                    },
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerStartupProbeExec:getK8sJobSpecTemplateSpecInitContainerStartupProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerStartupProbeGrpc:getK8sJobSpecTemplateSpecInitContainerStartupProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Number of the port to access on the container. Number must be in the range 1 to 65535.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerStartupProbeHttpGet:getK8sJobSpecTemplateSpecInitContainerStartupProbeHttpGet": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader:getK8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader"
                    },
                    "description": "Scheme to use for connecting to the host.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to access on the HTTP server.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Scheme to use for connecting to the host.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader:getK8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The header field name\n"
                },
                "value": {
                    "type": "string",
                    "description": "The header field value\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocket:getK8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "string",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n"
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecInitContainerVolumeMount:getK8sJobSpecTemplateSpecInitContainerVolumeMount": {
            "properties": {
                "mountPath": {
                    "type": "string",
                    "description": "Path within the container at which the volume should be mounted. Must not contain ':'.\n"
                },
                "mountPropagation": {
                    "type": "string",
                    "description": "Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.\n"
                },
                "name": {
                    "type": "string",
                    "description": "This must match the Name of a Volume.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.\n"
                },
                "subPath": {
                    "type": "string",
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).\n"
                }
            },
            "type": "object",
            "required": [
                "mountPath",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecReadinessGate:getK8sJobSpecTemplateSpecReadinessGate": {
            "properties": {
                "conditionType": {
                    "type": "string",
                    "description": "refers to a condition in the pod's condition list with matching type.\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecSecurityContext:getK8sJobSpecTemplateSpecSecurityContext": {
            "properties": {
                "fsGroup": {
                    "type": "string",
                    "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.\n"
                },
                "fsGroupChangePolicy": {
                    "type": "string",
                    "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.\n"
                },
                "runAsGroup": {
                    "type": "string",
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n"
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n"
                },
                "runAsUser": {
                    "type": "string",
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n"
                },
                "seLinuxOptions": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecSecurityContextSeLinuxOptions:getK8sJobSpecTemplateSpecSecurityContextSeLinuxOptions",
                    "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n"
                },
                "seccompProfile": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecSecurityContextSeccompProfile:getK8sJobSpecTemplateSpecSecurityContextSeccompProfile",
                    "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.\n"
                },
                "supplementalGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.\n"
                },
                "sysctls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecSecurityContextSysctl:getK8sJobSpecTemplateSpecSecurityContextSysctl"
                    },
                    "description": "holds a list of namespaced sysctls used for the pod.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecSecurityContextSeLinuxOptions:getK8sJobSpecTemplateSpecSecurityContextSeLinuxOptions": {
            "properties": {
                "level": {
                    "type": "string",
                    "description": "Level is SELinux level label that applies to the container.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role is a SELinux role label that applies to the container.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type is a SELinux type label that applies to the container.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User is a SELinux user label that applies to the container.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecSecurityContextSeccompProfile:getK8sJobSpecTemplateSpecSecurityContextSeccompProfile": {
            "properties": {
                "localhostProfile": {
                    "type": "string",
                    "description": "Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecSecurityContextSysctl:getK8sJobSpecTemplateSpecSecurityContextSysctl": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of a property to set.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of a property to set.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecToleration:getK8sJobSpecTemplateSpecToleration": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\n"
                },
                "tolerationSeconds": {
                    "type": "string",
                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecTopologySpreadConstraint:getK8sJobSpecTemplateSpecTopologySpreadConstraint": {
            "properties": {
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelector:getK8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelector"
                    },
                    "description": "A label query over a set of resources, in this case pods.\n"
                },
                "maxSkew": {
                    "type": "integer",
                    "description": "describes the degree to which pods may be unevenly distributed.\n"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.\n"
                },
                "whenUnsatisfiable": {
                    "type": "string",
                    "description": "indicates how to deal with a pod if it doesn't satisfy the spread constraint.\n"
                }
            },
            "type": "object",
            "required": [
                "labelSelectors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelector:getK8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression:getK8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression:getK8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolume:getK8sJobSpecTemplateSpecVolume": {
            "properties": {
                "awsElasticBlockStore": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeAwsElasticBlockStore:getK8sJobSpecTemplateSpecVolumeAwsElasticBlockStore",
                    "description": "Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                },
                "azureDisk": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeAzureDisk:getK8sJobSpecTemplateSpecVolumeAzureDisk",
                    "description": "Represents an Azure Data Disk mount on the host and bind mount to the pod.\n"
                },
                "azureFile": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeAzureFile:getK8sJobSpecTemplateSpecVolumeAzureFile",
                    "description": "Represents an Azure File Service mount on the host and bind mount to the pod.\n"
                },
                "cephFs": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeCephFs:getK8sJobSpecTemplateSpecVolumeCephFs",
                    "description": "Represents a Ceph FS mount on the host that shares a pod's lifetime\n"
                },
                "cinder": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeCinder:getK8sJobSpecTemplateSpecVolumeCinder",
                    "description": "Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                },
                "configMap": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeConfigMap:getK8sJobSpecTemplateSpecVolumeConfigMap",
                    "description": "ConfigMap represents a configMap that should populate this volume\n"
                },
                "csi": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeCsi:getK8sJobSpecTemplateSpecVolumeCsi",
                    "description": "Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi\n"
                },
                "downwardApi": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeDownwardApi:getK8sJobSpecTemplateSpecVolumeDownwardApi",
                    "description": "DownwardAPI represents downward API about the pod that should populate this volume\n"
                },
                "emptyDir": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeEmptyDir:getK8sJobSpecTemplateSpecVolumeEmptyDir",
                    "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n"
                },
                "ephemeral": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeEphemeral:getK8sJobSpecTemplateSpecVolumeEphemeral",
                    "description": "Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes\n"
                },
                "fc": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeFc:getK8sJobSpecTemplateSpecVolumeFc",
                    "description": "Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n"
                },
                "flexVolume": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeFlexVolume:getK8sJobSpecTemplateSpecVolumeFlexVolume",
                    "description": "Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.\n"
                },
                "flocker": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeFlocker:getK8sJobSpecTemplateSpecVolumeFlocker",
                    "description": "Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running\n"
                },
                "gcePersistentDisk": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeGcePersistentDisk:getK8sJobSpecTemplateSpecVolumeGcePersistentDisk",
                    "description": "Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "gitRepo": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeGitRepo:getK8sJobSpecTemplateSpecVolumeGitRepo",
                    "description": "GitRepo represents a git repository at a particular revision.\n"
                },
                "glusterfs": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeGlusterfs:getK8sJobSpecTemplateSpecVolumeGlusterfs",
                    "description": "Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md\n"
                },
                "hostPath": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeHostPath:getK8sJobSpecTemplateSpecVolumeHostPath",
                    "description": "Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n"
                },
                "iscsi": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeIscsi:getK8sJobSpecTemplateSpecVolumeIscsi",
                    "description": "Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.\n"
                },
                "local": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeLocal:getK8sJobSpecTemplateSpecVolumeLocal",
                    "description": "Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local\n"
                },
                "name": {
                    "type": "string",
                    "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "nfs": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeNfs:getK8sJobSpecTemplateSpecVolumeNfs",
                    "description": "Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                },
                "persistentVolumeClaim": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumePersistentVolumeClaim:getK8sJobSpecTemplateSpecVolumePersistentVolumeClaim",
                    "description": "The specification of a persistent volume.\n"
                },
                "photonPersistentDisk": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumePhotonPersistentDisk:getK8sJobSpecTemplateSpecVolumePhotonPersistentDisk",
                    "description": "Represents a PhotonController persistent disk attached and mounted on kubelets host machine\n"
                },
                "projected": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjected:getK8sJobSpecTemplateSpecVolumeProjected",
                    "description": "Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected\n"
                },
                "quobyte": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeQuobyte:getK8sJobSpecTemplateSpecVolumeQuobyte",
                    "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n"
                },
                "rbd": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeRbd:getK8sJobSpecTemplateSpecVolumeRbd",
                    "description": "Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md\n"
                },
                "secret": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeSecret:getK8sJobSpecTemplateSpecVolumeSecret",
                    "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                },
                "vsphereVolume": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeVsphereVolume:getK8sJobSpecTemplateSpecVolumeVsphereVolume",
                    "description": "Represents a vSphere volume attached and mounted on kubelets host machine\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeAwsElasticBlockStore:getK8sJobSpecTemplateSpecVolumeAwsElasticBlockStore": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                },
                "partition": {
                    "type": "integer",
                    "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to set the read-only property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"
                }
            },
            "type": "object",
            "required": [
                "volumeId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeAzureDisk:getK8sJobSpecTemplateSpecVolumeAzureDisk": {
            "properties": {
                "cachingMode": {
                    "type": "string",
                    "description": "Host Caching mode: None, Read Only, Read Write.\n"
                },
                "dataDiskUri": {
                    "type": "string",
                    "description": "The URI the data disk in the blob storage\n"
                },
                "diskName": {
                    "type": "string",
                    "description": "The Name of the data disk in the blob storage\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).\n"
                }
            },
            "type": "object",
            "required": [
                "cachingMode",
                "dataDiskUri",
                "diskName",
                "kind"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeAzureFile:getK8sJobSpecTemplateSpecVolumeAzureFile": {
            "properties": {
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "The name of secret that contains Azure Storage Account Name and Key\n"
                },
                "secretNamespace": {
                    "type": "string",
                    "description": "The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is \"default\" namespace.\n"
                },
                "shareName": {
                    "type": "string",
                    "description": "Share Name\n"
                }
            },
            "type": "object",
            "required": [
                "secretName",
                "shareName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeCephFs:getK8sJobSpecTemplateSpecVolumeCephFs": {
            "properties": {
                "monitors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "path": {
                    "type": "string",
                    "description": "Used as the mounted root, rather than the full Ceph tree, default is /\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "secretFile": {
                    "type": "string",
                    "description": "The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeCephFsSecretRef:getK8sJobSpecTemplateSpecVolumeCephFsSecretRef",
                    "description": "Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                },
                "user": {
                    "type": "string",
                    "description": "User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n"
                }
            },
            "type": "object",
            "required": [
                "monitors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeCephFsSecretRef:getK8sJobSpecTemplateSpecVolumeCephFsSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeCinder:getK8sJobSpecTemplateSpecVolumeCinder": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n"
                }
            },
            "type": "object",
            "required": [
                "volumeId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeConfigMap:getK8sJobSpecTemplateSpecVolumeConfigMap": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeConfigMapItem:getK8sJobSpecTemplateSpecVolumeConfigMapItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the ConfigMap or its keys must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeConfigMapItem:getK8sJobSpecTemplateSpecVolumeConfigMapItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeCsi:getK8sJobSpecTemplateSpecVolumeCsi": {
            "properties": {
                "driver": {
                    "type": "string",
                    "description": "the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "nodePublishSecretRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRef:getK8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRef",
                    "description": "A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to set the read-only property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi\n"
                },
                "volumeAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Attributes of the volume to publish.\n"
                }
            },
            "type": "object",
            "required": [
                "driver"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRef:getK8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeDownwardApi:getK8sJobSpecTemplateSpecVolumeDownwardApi": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeDownwardApiItem:getK8sJobSpecTemplateSpecVolumeDownwardApiItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeDownwardApiItem:getK8sJobSpecTemplateSpecVolumeDownwardApiItem": {
            "properties": {
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRef:getK8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRef",
                    "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef:getK8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n"
                }
            },
            "type": "object",
            "required": [
                "fieldRef",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRef:getK8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef:getK8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "divisor": {
                    "type": "string"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n"
                }
            },
            "type": "object",
            "required": [
                "containerName",
                "resource"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeEmptyDir:getK8sJobSpecTemplateSpecVolumeEmptyDir": {
            "properties": {
                "medium": {
                    "type": "string",
                    "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n"
                },
                "sizeLimit": {
                    "type": "string",
                    "description": "Total amount of local storage required for this EmptyDir volume.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeEphemeral:getK8sJobSpecTemplateSpecVolumeEphemeral": {
            "properties": {
                "volumeClaimTemplate": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate:getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate",
                    "description": "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.\n"
                }
            },
            "type": "object",
            "required": [
                "volumeClaimTemplate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate:getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata:getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata",
                    "description": "May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.\n"
                },
                "spec": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec:getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec",
                    "description": "The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.\n"
                }
            },
            "type": "object",
            "required": [
                "spec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata:getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n"
                }
            },
            "type": "object",
            "required": [
                "labels"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec:getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec": {
            "properties": {
                "accessModes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1\n"
                },
                "resources": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources:getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources",
                    "description": "A list of the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources\n"
                },
                "storageClassName": {
                    "type": "string",
                    "description": "Name of the storage class requested by the claim\n"
                },
                "volumeMode": {
                    "type": "string",
                    "description": "Kubernetes supports two volumeModes of PersistentVolumes: `Filesystem` and `Block`.\n"
                },
                "volumeName": {
                    "type": "string",
                    "description": "The binding reference to the PersistentVolume backing this claim.\n"
                }
            },
            "type": "object",
            "required": [
                "accessModes",
                "resources",
                "storageClassName",
                "volumeMode",
                "volumeName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources:getK8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources": {
            "properties": {
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/\n"
                },
                "requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/\n"
                }
            },
            "type": "object",
            "required": [
                "requests"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeFc:getK8sJobSpecTemplateSpecVolumeFc": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "lun": {
                    "type": "integer",
                    "description": "FC target lun number\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).\n"
                },
                "targetWwNs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "FC target worldwide names (WWNs)\n"
                }
            },
            "type": "object",
            "required": [
                "lun",
                "targetWwNs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeFlexVolume:getK8sJobSpecTemplateSpecVolumeFlexVolume": {
            "properties": {
                "driver": {
                    "type": "string",
                    "description": "Driver is the name of the driver to use for this volume.\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Extra command options if any.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeFlexVolumeSecretRef:getK8sJobSpecTemplateSpecVolumeFlexVolumeSecretRef",
                    "description": "Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.\n"
                }
            },
            "type": "object",
            "required": [
                "driver"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeFlexVolumeSecretRef:getK8sJobSpecTemplateSpecVolumeFlexVolumeSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeFlocker:getK8sJobSpecTemplateSpecVolumeFlocker": {
            "properties": {
                "datasetName": {
                    "type": "string",
                    "description": "Name of the dataset stored as metadata \u003e name on the dataset for Flocker should be considered as deprecated\n"
                },
                "datasetUuid": {
                    "type": "string",
                    "description": "UUID of the dataset. This is unique identifier of a Flocker dataset\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeGcePersistentDisk:getK8sJobSpecTemplateSpecVolumeGcePersistentDisk": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "partition": {
                    "type": "integer",
                    "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "pdName": {
                    "type": "string",
                    "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n"
                }
            },
            "type": "object",
            "required": [
                "pdName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeGitRepo:getK8sJobSpecTemplateSpecVolumeGitRepo": {
            "properties": {
                "directory": {
                    "type": "string",
                    "description": "Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Repository URL\n"
                },
                "revision": {
                    "type": "string",
                    "description": "Commit hash for the specified revision.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeGlusterfs:getK8sJobSpecTemplateSpecVolumeGlusterfs": {
            "properties": {
                "endpointsName": {
                    "type": "string",
                    "description": "The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n"
                },
                "path": {
                    "type": "string",
                    "description": "The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n"
                }
            },
            "type": "object",
            "required": [
                "endpointsName",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeHostPath:getK8sJobSpecTemplateSpecVolumeHostPath": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type for HostPath volume. Allowed values are \"\" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeIscsi:getK8sJobSpecTemplateSpecVolumeIscsi": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\n"
                },
                "iqn": {
                    "type": "string",
                    "description": "Target iSCSI Qualified Name.\n"
                },
                "iscsiInterface": {
                    "type": "string",
                    "description": "iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).\n"
                },
                "lun": {
                    "type": "integer",
                    "description": "iSCSI target lun number.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false.\n"
                },
                "targetPortal": {
                    "type": "string",
                    "description": "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n"
                }
            },
            "type": "object",
            "required": [
                "iqn",
                "targetPortal"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeLocal:getK8sJobSpecTemplateSpecVolumeLocal": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeNfs:getK8sJobSpecTemplateSpecVolumeNfs": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n"
                }
            },
            "type": "object",
            "required": [
                "path",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumePersistentVolumeClaim:getK8sJobSpecTemplateSpecVolumePersistentVolumeClaim": {
            "properties": {
                "claimName": {
                    "type": "string",
                    "description": "ClaimName is the name of a PersistentVolumeClaim in the same\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Will force the ReadOnly setting in VolumeMounts.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumePhotonPersistentDisk:getK8sJobSpecTemplateSpecVolumePhotonPersistentDisk": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "pdId": {
                    "type": "string",
                    "description": "ID that identifies Photon Controller persistent disk\n"
                }
            },
            "type": "object",
            "required": [
                "pdId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjected:getK8sJobSpecTemplateSpecVolumeProjected": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSource:getK8sJobSpecTemplateSpecVolumeProjectedSource"
                    },
                    "description": "Source of the volume to project in the directory.\n"
                }
            },
            "type": "object",
            "required": [
                "sources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSource:getK8sJobSpecTemplateSpecVolumeProjectedSource": {
            "properties": {
                "configMaps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceConfigMap:getK8sJobSpecTemplateSpecVolumeProjectedSourceConfigMap"
                    },
                    "description": "ConfigMap represents a configMap that should populate this volume\n"
                },
                "downwardApi": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApi:getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApi",
                    "description": "DownwardAPI represents downward API about the pod that should populate this volume\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceSecret:getK8sJobSpecTemplateSpecVolumeProjectedSourceSecret"
                    },
                    "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                },
                "serviceAccountToken": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountToken:getK8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountToken",
                    "description": "A projected service account token volume\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceConfigMap:getK8sJobSpecTemplateSpecVolumeProjectedSourceConfigMap": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItem:getK8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the ConfigMap or it's keys must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItem:getK8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApi:getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApi": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItem:getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItem"
                    },
                    "description": "Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItem:getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItem": {
            "properties": {
                "fieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef:getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef",
                    "description": "Selects a field of the pod: only annotations, labels, name and namespace are supported.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'\n"
                },
                "resourceFieldRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef:getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef:getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to 'v1'.\n"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef:getK8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "divisor": {
                    "type": "string"
                },
                "resource": {
                    "type": "string",
                    "description": "Resource to select\n"
                }
            },
            "type": "object",
            "required": [
                "containerName",
                "resource"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceSecret:getK8sJobSpecTemplateSpecVolumeProjectedSourceSecret": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceSecretItem:getK8sJobSpecTemplateSpecVolumeProjectedSourceSecretItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the Secret or it's keys must be defined.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceSecretItem:getK8sJobSpecTemplateSpecVolumeProjectedSourceSecretItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountToken:getK8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountToken": {
            "properties": {
                "audience": {
                    "type": "string",
                    "description": "Audience is the intended audience of the token\n"
                },
                "expirationSeconds": {
                    "type": "integer",
                    "description": "ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path specifies a relative path to the mount point of the projected volume.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeQuobyte:getK8sJobSpecTemplateSpecVolumeQuobyte": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "Group to map volume access to Default is no group\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.\n"
                },
                "registry": {
                    "type": "string",
                    "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes\n"
                },
                "user": {
                    "type": "string",
                    "description": "User to map volume access to Defaults to serivceaccount user\n"
                },
                "volume": {
                    "type": "string",
                    "description": "Volume is a string that references an already created Quobyte volume by name.\n"
                }
            },
            "type": "object",
            "required": [
                "registry",
                "volume"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeRbd:getK8sJobSpecTemplateSpecVolumeRbd": {
            "properties": {
                "cephMonitors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\n"
                },
                "keyring": {
                    "type": "string",
                    "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "radosUser": {
                    "type": "string",
                    "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "rbdImage": {
                    "type": "string",
                    "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "rbdPool": {
                    "type": "string",
                    "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                },
                "secretRef": {
                    "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeRbdSecretRef:getK8sJobSpecTemplateSpecVolumeRbdSecretRef",
                    "description": "Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n"
                }
            },
            "type": "object",
            "required": [
                "cephMonitors",
                "keyring",
                "rbdImage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeRbdSecretRef:getK8sJobSpecTemplateSpecVolumeRbdSecretRef": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n"
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeSecret:getK8sJobSpecTemplateSpecVolumeSecret": {
            "properties": {
                "defaultMode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getK8sJobSpecTemplateSpecVolumeSecretItem:getK8sJobSpecTemplateSpecVolumeSecretItem"
                    },
                    "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Optional: Specify whether the Secret or its keys must be defined.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeSecretItem:getK8sJobSpecTemplateSpecVolumeSecretItem": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n"
                }
            },
            "type": "object"
        },
        "duplocloud:index/getK8sJobSpecTemplateSpecVolumeVsphereVolume:getK8sJobSpecTemplateSpecVolumeVsphereVolume": {
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n"
                },
                "volumePath": {
                    "type": "string",
                    "description": "Path that identifies vSphere volume vmdk\n"
                }
            },
            "type": "object",
            "required": [
                "volumePath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getNativeHostImageTag:getNativeHostImageTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getNativeHostImagesImage:getNativeHostImagesImage": {
            "properties": {
                "arch": {
                    "type": "string"
                },
                "imageId": {
                    "type": "string"
                },
                "isKubernetes": {
                    "type": "boolean"
                },
                "k8sVersion": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getNativeHostImagesImageTag:getNativeHostImagesImageTag"
                    }
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "arch",
                "imageId",
                "isKubernetes",
                "k8sVersion",
                "name",
                "os",
                "region",
                "tags",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getNativeHostImagesImageTag:getNativeHostImagesImageTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getNativeHostsHost:getNativeHostsHost": {
            "properties": {
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent pool that this host is added to.\n"
                },
                "allocatedPublicIp": {
                    "type": "boolean",
                    "description": "Whether or not to allocate a public IP.\n"
                },
                "base64UserData": {
                    "type": "string",
                    "description": "Base64 encoded EC2 user data to associated with the host.\n"
                },
                "capacity": {
                    "type": "string",
                    "description": "The AWS EC2 instance type.\n"
                },
                "cloud": {
                    "type": "integer",
                    "description": "The numeric ID of the cloud provider to launch the host in.\n"
                },
                "customNodeLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specify the labels to attach to the nodes.\n"
                },
                "encryptDisk": {
                    "type": "boolean"
                },
                "friendlyName": {
                    "type": "string",
                    "description": "The short name of the host.\n"
                },
                "identityRole": {
                    "type": "string",
                    "description": "The name of the IAM role associated with this host.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The AMI ID to use.\n"
                },
                "initialBase64UserData": {
                    "type": "string"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The AWS EC2 instance ID of the host.\n"
                },
                "isEbsOptimized": {
                    "type": "boolean"
                },
                "isMinion": {
                    "type": "boolean"
                },
                "keypairType": {
                    "type": "integer",
                    "description": "The numeric ID of the keypair type being used.Should be one of:\n\n   - `0` : Default\n   - `1` : ED25519\n   - `2` : RSA (deprecated - some operating systems no longer support it)\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getNativeHostsHostMetadata:getNativeHostsHostMetadata"
                    },
                    "description": "Configuration metadata used when creating the host.\u003cbr\u003e*Note: To configure OS disk size OsDiskSize can be specified as Key and its size as value, size value should be atleast 10*\n"
                },
                "minionTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getNativeHostsHostMinionTag:getNativeHostsHostMinionTag"
                    },
                    "description": "A map of tags to assign to the resource. Example - `AllocationTags` can be passed as tag key with any value.\n"
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getNativeHostsHostNetworkInterface:getNativeHostsHostNetworkInterface"
                    },
                    "description": "An optional list of custom network interface configurations to use when creating the host.\n"
                },
                "prependUserData": {
                    "type": "boolean",
                    "description": "Bootstrap an EKS host with Duplo's user data, prepending it to custom user data if also provided.\n"
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "The primary private IP address assigned to the host.\n"
                },
                "publicIpAddress": {
                    "type": "string",
                    "description": "The primary public IP address assigned to the host.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the host.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getNativeHostsHostTag:getNativeHostsHostTag"
                    }
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getNativeHostsHostTaint:getNativeHostsHostTaint"
                    },
                    "description": "Specify taints to attach to the nodes, to repel other nodes with different toleration\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the host will be created in.\n"
                },
                "userAccount": {
                    "type": "string",
                    "description": "The name of the tenant that the host will be created in.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getNativeHostsHostVolume:getNativeHostsHostVolume"
                    },
                    "description": "Block to specify additional or secondary volume beyond the root device\n"
                },
                "zone": {
                    "type": "integer",
                    "description": "The availability zone to launch the host in, expressed as a number and starting at 0.\n"
                }
            },
            "type": "object",
            "required": [
                "base64UserData",
                "capacity",
                "friendlyName",
                "identityRole",
                "imageId",
                "initialBase64UserData",
                "instanceId",
                "keypairType",
                "metadatas",
                "minionTags",
                "networkInterfaces",
                "privateIpAddress",
                "publicIpAddress",
                "status",
                "tags",
                "tenantId",
                "userAccount",
                "volumes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getNativeHostsHostMetadata:getNativeHostsHostMetadata": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getNativeHostsHostMinionTag:getNativeHostsHostMinionTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getNativeHostsHostNetworkInterface:getNativeHostsHostNetworkInterface": {
            "properties": {
                "associatePublicIp": {
                    "type": "boolean",
                    "description": "Whether or not to associate a public IP with the newly created ENI.  Cannot be specified if `network_interface_id` is specified.\n"
                },
                "deviceIndex": {
                    "type": "integer",
                    "description": "The device index to pass to AWS for attaching the ENI.  Starts at zero.\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getNativeHostsHostNetworkInterfaceMetadata:getNativeHostsHostNetworkInterfaceMetadata"
                    }
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The ID of an ENI to attach to this host.  Cannot be specified if `subnet_id` or `associate_public_ip` is specified.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of a subnet in which to create a new ENI.  Cannot be specified if `network_interface_id` is specified.\n"
                }
            },
            "type": "object",
            "required": [
                "associatePublicIp",
                "deviceIndex",
                "groups",
                "metadatas",
                "networkInterfaceId",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getNativeHostsHostNetworkInterfaceMetadata:getNativeHostsHostNetworkInterfaceMetadata": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getNativeHostsHostTag:getNativeHostsHostTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getNativeHostsHostTaint:getNativeHostsHostTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Update strategy of the node. Effect types \u003cbr\u003e      - NoSchedule\u003cbr\u003e     - PreferNoSchedule\u003cbr\u003e     - NoExecute\n"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getNativeHostsHostVolume:getNativeHostsHostVolume": {
            "properties": {
                "iops": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "volumeId": {
                    "type": "string"
                },
                "volumeType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "iops",
                "name",
                "size",
                "volumeId",
                "volumeType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanCertificate:getPlanCertificate": {
            "properties": {
                "arn": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanCertificatesCertificate:getPlanCertificatesCertificate": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN of the certificate\n"
                },
                "name": {
                    "type": "string",
                    "description": "A domain name for which the certificate should be issued\n"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanConfig:getPlanConfig": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanImage:getPlanImage": {
            "properties": {
                "imageId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getPlanImageTag:getPlanImageTag"
                    }
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "imageId",
                "name",
                "os",
                "tags",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanImageTag:getPlanImageTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanImagesImage:getPlanImagesImage": {
            "properties": {
                "imageId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getPlanImagesImageTag:getPlanImagesImageTag"
                    }
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "imageId",
                "name",
                "os",
                "tags",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanImagesImageTag:getPlanImagesImageTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanKmsKey:getPlanKmsKey": {
            "properties": {
                "arn": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanKmsKeyData:getPlanKmsKeyData": {
            "properties": {
                "kmsArn": {
                    "type": "string"
                },
                "kmsId": {
                    "type": "string"
                },
                "kmsName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "kmsArn",
                "kmsId",
                "kmsName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanKmsKeyV2KmsKey:getPlanKmsKeyV2KmsKey": {
            "properties": {
                "arn": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanKubernetesConfig:getPlanKubernetesConfig": {
            "properties": {
                "apiServer": {
                    "type": "string"
                },
                "certificateAuthorityData": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "provider": {
                    "type": "integer"
                },
                "region": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiServer",
                "certificateAuthorityData",
                "name",
                "provider",
                "region",
                "token",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanMetadata:getPlanMetadata": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanNatGatewaysNatGateway:getPlanNatGatewaysNatGateway": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getPlanNatGatewaysNatGatewayAddress:getPlanNatGatewaysNatGatewayAddress"
                    }
                },
                "id": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getPlanNatGatewaysNatGatewayTag:getPlanNatGatewaysNatGatewayTag"
                    }
                },
                "vpcId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "addresses",
                "id",
                "state",
                "subnetId",
                "tags",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanNatGatewaysNatGatewayAddress:getPlanNatGatewaysNatGatewayAddress": {
            "properties": {
                "allocationId": {
                    "type": "string"
                },
                "networkInterfaceId": {
                    "type": "string"
                },
                "privateIp": {
                    "type": "string"
                },
                "publicIp": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "allocationId",
                "networkInterfaceId",
                "privateIp",
                "publicIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanNatGatewaysNatGatewayTag:getPlanNatGatewaysNatGatewayTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanSettingsDnsSetting:getPlanSettingsDnsSetting": {
            "properties": {
                "domainId": {
                    "type": "string"
                },
                "externalDnsSuffix": {
                    "type": "string"
                },
                "ignoreGlobalDns": {
                    "type": "boolean"
                },
                "internalDnsSuffix": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domainId",
                "externalDnsSuffix",
                "ignoreGlobalDns",
                "internalDnsSuffix"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanSettingsMetadata:getPlanSettingsMetadata": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanWafInfo:getPlanWafInfo": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanWafsData:getPlanWafsData": {
            "properties": {
                "dashboardUrl": {
                    "type": "string"
                },
                "wafArn": {
                    "type": "string"
                },
                "wafName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dashboardUrl",
                "wafArn",
                "wafName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlanWafsV2Waf:getPlanWafsV2Waf": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN of the waf\n"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The dashboard url associated to waf\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the waf  issued\n"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "dashboardUrl",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlansData:getPlansData": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The cloud account ID.\n"
                },
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the Availability Zones available to the plan.\n"
                },
                "capabilities": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Map of capability flags\n"
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getPlansDataCertificate:getPlansDataCertificate"
                    },
                    "description": "Plan certificates that can be attached to load balancers\n"
                },
                "cloud": {
                    "type": "integer",
                    "description": "The numerical index of the cloud provider for this planWill be one of:\n\n   - `0` : AWS\n   - `2` : Azure\n   - `3` : GCP\n"
                },
                "cloudConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Cloud-specific plan configuration data\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getPlansDataConfig:getPlansDataConfig"
                    },
                    "description": "Plan configuration data\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getPlansDataImage:getPlansDataImage"
                    },
                    "description": "Plan images that can be used to launch native hosts\n"
                },
                "kmsKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getPlansDataKmsKey:getPlansDataKmsKey"
                    },
                    "description": "Plan KMS keys that can be used for cloud-based encryption\n"
                },
                "kubernetesConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getPlansDataKubernetesConfig:getPlansDataKubernetesConfig"
                    },
                    "description": "Kubernetes-specific plan configuration data\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getPlansDataMetadata:getPlansDataMetadata"
                    },
                    "description": "Plan metadata\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The plan ID\n"
                },
                "privateSubnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The private subnets for the VPC or VNet.\n"
                },
                "publicSubnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The public subnets for the VPC or VNet.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud provider region.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC or VNet ID.\n"
                },
                "wafInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getPlansDataWafInfo:getPlansDataWafInfo"
                    },
                    "description": "Plan web application firewalls that can be attached to load balancers\n"
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "availabilityZones",
                "capabilities",
                "certificates",
                "cloud",
                "cloudConfig",
                "configs",
                "images",
                "kmsKeys",
                "kubernetesConfigs",
                "metadatas",
                "planId",
                "privateSubnetIds",
                "publicSubnetIds",
                "region",
                "vpcId",
                "wafInfos"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlansDataCertificate:getPlansDataCertificate": {
            "properties": {
                "arn": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlansDataConfig:getPlansDataConfig": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlansDataImage:getPlansDataImage": {
            "properties": {
                "imageId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getPlansDataImageTag:getPlansDataImageTag"
                    }
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "imageId",
                "name",
                "os",
                "tags",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlansDataImageTag:getPlansDataImageTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlansDataKmsKey:getPlansDataKmsKey": {
            "properties": {
                "arn": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlansDataKubernetesConfig:getPlansDataKubernetesConfig": {
            "properties": {
                "apiServer": {
                    "type": "string"
                },
                "certificateAuthorityData": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "provider": {
                    "type": "integer"
                },
                "region": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiServer",
                "certificateAuthorityData",
                "name",
                "provider",
                "region",
                "token",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlansDataMetadata:getPlansDataMetadata": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getPlansDataWafInfo:getPlansDataWafInfo": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getTenantAwsKmsKeysKey:getTenantAwsKmsKeysKey": {
            "properties": {
                "keyArn": {
                    "type": "string"
                },
                "keyId": {
                    "type": "string"
                },
                "keyName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "keyArn",
                "keyId",
                "keyName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getTenantConfigMetadata:getTenantConfigMetadata": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getTenantPolicy:getTenantPolicy": {
            "properties": {
                "allowVolumeMapping": {
                    "type": "boolean"
                },
                "blockExternalEp": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "allowVolumeMapping",
                "blockExternalEp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getTenantSecretTag:getTenantSecretTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getTenantSecretsSecret:getTenantSecretsSecret": {
            "properties": {
                "arn": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nameSuffix": {
                    "type": "string"
                },
                "rotationEnabled": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getTenantSecretsSecretTag:getTenantSecretsSecretTag"
                    }
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "arn",
                "name",
                "nameSuffix",
                "rotationEnabled",
                "tags",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getTenantSecretsSecretTag:getTenantSecretsSecretTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getTenantTag:getTenantTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getTenantsTenant:getTenantsTenant": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "infraOwner": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "planId": {
                    "type": "string"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getTenantsTenantPolicy:getTenantsTenantPolicy"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/getTenantsTenantTag:getTenantsTenantTag"
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "infraOwner",
                "name",
                "planId",
                "policies",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getTenantsTenantPolicy:getTenantsTenantPolicy": {
            "properties": {
                "allowVolumeMapping": {
                    "type": "boolean"
                },
                "blockExternalEp": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "allowVolumeMapping",
                "blockExternalEp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:index/getTenantsTenantTag:getTenantsTenantTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "duplocloud:region/region:Region": {
            "type": "string",
            "enum": [
                {
                    "name": "here",
                    "value": "HERE"
                },
                {
                    "name": "overThere",
                    "value": "OVER_THERE"
                }
            ]
        }
    },
    "provider": {
        "description": "The provider type for the duplocloud package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "duploHost": {
                "type": "string",
                "description": "This is the base URL to the Duplo REST API. It must be provided, but it can also be sourced from the `duplo_host`\nenvironment variable.\n"
            },
            "duploToken": {
                "type": "string",
                "description": "This is a bearer token used to authenticate to the Duplo REST API. It must be provided, but it can also be sourced from\nthe `duplo_token` environment variable.\n",
                "secret": true
            },
            "httpTimeout": {
                "type": "integer",
                "description": "Timeout for HTTP requests in seconds.\n"
            },
            "sslNoVerify": {
                "type": "boolean",
                "description": "Disable SSL certificate verification.\n"
            }
        },
        "inputProperties": {
            "duploHost": {
                "type": "string",
                "description": "This is the base URL to the Duplo REST API. It must be provided, but it can also be sourced from the `duplo_host`\nenvironment variable.\n"
            },
            "duploToken": {
                "type": "string",
                "description": "This is a bearer token used to authenticate to the Duplo REST API. It must be provided, but it can also be sourced from\nthe `duplo_token` environment variable.\n",
                "secret": true
            },
            "httpTimeout": {
                "type": "integer",
                "description": "Timeout for HTTP requests in seconds.\n"
            },
            "sslNoVerify": {
                "type": "boolean",
                "description": "Disable SSL certificate verification.\n"
            }
        }
    },
    "resources": {
        "duplocloud:index/adminSystemSetting:AdminSystemSetting": {
            "description": "`duplocloud.AdminSystemSetting` manages an admin system setting in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst test_setting = new duplocloud.AdminSystemSetting(\"test-setting\", {\n    key: \"EnableVPN\",\n    value: \"true\",\n    type: \"Flags\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntest_setting = duplocloud.AdminSystemSetting(\"test-setting\",\n    key=\"EnableVPN\",\n    value=\"true\",\n    type=\"Flags\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_setting = new Duplocloud.AdminSystemSetting(\"test-setting\", new()\n    {\n        Key = \"EnableVPN\",\n        Value = \"true\",\n        Type = \"Flags\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewAdminSystemSetting(ctx, \"test-setting\", \u0026duplocloud.AdminSystemSettingArgs{\n\t\t\tKey:   pulumi.String(\"EnableVPN\"),\n\t\t\tValue: pulumi.String(\"true\"),\n\t\t\tType:  pulumi.String(\"Flags\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.AdminSystemSetting;\nimport com.pulumi.duplocloud.AdminSystemSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_setting = new AdminSystemSetting(\"test-setting\", AdminSystemSettingArgs.builder()\n            .key(\"EnableVPN\")\n            .value(\"true\")\n            .type(\"Flags\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-setting:\n    type: duplocloud:AdminSystemSetting\n    properties:\n      key: EnableVPN\n      value: 'true'\n      type: Flags\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing duplo admin setting\n\n - *KEY_TYPE* is the type of setting key. Replace any occurrences of '/' with '_SLASH_' if they exist within the KEY_TYPE.\n\n - *KEY* is the key name\n\n#\n\n```sh\n$ pulumi import duplocloud:index/adminSystemSetting:AdminSystemSetting mySetting *KEY_TYPE*/*KEY*\n```\n\n",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key name for the system setting.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the system setting.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for the system setting.\n"
                }
            },
            "required": [
                "key",
                "type",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Key name for the system setting.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of the system setting.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for the system setting.\n"
                }
            },
            "requiredInputs": [
                "key",
                "type",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AdminSystemSetting resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key name for the system setting.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the system setting.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value for the system setting.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/asgProfile:AsgProfile": {
            "description": "`duplocloud.AsgProfile` manages a ASG Profile in Duplo.\n\n## Import\n\nExample: Importing an existing AWS ASG\n\n - *TENANT_ID* is the tenant GUID\n\n - *FRIENDLY_NAME* is the duploservices-\u003caccount_name\u003e-\u003cfriendly_name\u003e\n\n#\n\n```sh\n$ pulumi import duplocloud:index/asgProfile:AsgProfile myAsgProfile *TENANT_ID*/*FRIENDLY_NAME*\n```\n\n",
            "properties": {
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent pool that this host is added to.\n"
                },
                "allocatedPublicIp": {
                    "type": "boolean",
                    "description": "Whether or not to allocate a public IP.\n"
                },
                "base64UserData": {
                    "type": "string",
                    "description": "Base64 encoded EC2 user data to associated with the host.\n"
                },
                "canScaleFromZero": {
                    "type": "boolean",
                    "description": "Whether or not ASG should leverage duplocloud's scale from 0 feature\n"
                },
                "capacity": {
                    "type": "string",
                    "description": "The AWS EC2 instance type.\n"
                },
                "cloud": {
                    "type": "integer",
                    "description": "The numeric ID of the cloud provider to launch the host in.\n"
                },
                "customNodeLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specify the labels to attach to the nodes.\n"
                },
                "enabledMetrics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of metrics to collect for the ASG Specify one or more of the following\nmetrics.`GroupMinSize`,`GroupMaxSize`,`GroupDesiredCapacity`,`GroupInServiceInstances`,`GroupPendingInstances`,`GroupStandbyInstances`,`GroupTerminatingInstances`,`GroupTotalInstances`,`GroupInServiceCapacity`,`GroupPendingCapacity`,`GroupStandbyCapacity`,`GroupTerminatingCapacity`,`GroupTotalCapacity`,`WarmPoolDesiredCapacity`,`WarmPoolWarmedCapacity`,`WarmPoolPendingCapacity`,`WarmPoolTerminatingCapacity`,`WarmPoolTotalCapacity`,`GroupAndWarmPoolDesiredCapacity`,`GroupAndWarmPoolTotalCapacity`.\n"
                },
                "encryptDisk": {
                    "type": "boolean"
                },
                "friendlyName": {
                    "type": "string",
                    "description": "The short name of the host.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the ASG profile.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The AMI ID to use.\n"
                },
                "initialBase64UserData": {
                    "type": "string"
                },
                "instanceCount": {
                    "type": "integer",
                    "description": "The number of instances that should be running in the group.\n"
                },
                "isClusterAutoscaled": {
                    "type": "boolean",
                    "description": "Whether or not to enable cluster autoscaler.\n"
                },
                "isEbsOptimized": {
                    "type": "boolean"
                },
                "isMinion": {
                    "type": "boolean"
                },
                "keypairType": {
                    "type": "integer",
                    "description": "The numeric ID of the keypair type being used.Should be one of: - `0` : Default - `1` : ED25519 - `2` : RSA (deprecated\n- some operating systems no longer support it)\n"
                },
                "maxInstanceCount": {
                    "type": "integer",
                    "description": "The maximum size of the Auto Scaling Group.\n"
                },
                "maxSpotPrice": {
                    "type": "string",
                    "description": "Maximum price to pay for a spot instance in dollars per unit hour.\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AsgProfileMetadata:AsgProfileMetadata"
                    },
                    "description": "Configuration metadata used when creating the host.\u003cbr\u003e*Note: To configure OS disk size OsDiskSize can be specified as\nKey and its size as value, size value should be atleast 10*\n"
                },
                "minInstanceCount": {
                    "type": "integer",
                    "description": "The minimum size of the Auto Scaling Group.\n"
                },
                "minionTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AsgProfileMinionTag:AsgProfileMinionTag"
                    },
                    "description": "A map of tags to assign to the resource. Example - `AllocationTags` can be passed as tag key with any value.\n"
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AsgProfileNetworkInterface:AsgProfileNetworkInterface"
                    },
                    "description": "An optional list of custom network interface configurations to use when creating the host.\n"
                },
                "prependUserData": {
                    "type": "boolean",
                    "description": "Bootstrap an EKS host with Duplo's user data, prepending it to custom user data if also provided.\n"
                },
                "publicIpAddress": {
                    "type": "string",
                    "description": "The primary public IP address assigned to the host.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AsgProfileTag:AsgProfileTag"
                    }
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AsgProfileTaint:AsgProfileTaint"
                    },
                    "description": "Specify taints to attach to the nodes, to repel other nodes with different toleration\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the host will be created in.\n"
                },
                "useSpotInstances": {
                    "type": "boolean",
                    "description": "Whether or not to use spot instances.\n"
                },
                "userAccount": {
                    "type": "string",
                    "description": "The name of the tenant that the host will be created in.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AsgProfileVolume:AsgProfileVolume"
                    },
                    "description": "Block to specify additional or secondary volume beyond the root device\n"
                },
                "waitForCapacity": {
                    "type": "boolean",
                    "description": "Whether or not to wait until ASG instances to be healthy, after creation.\n"
                },
                "zone": {
                    "type": "integer",
                    "description": "The availability zone to launch the host in, expressed as a number and starting at 0.\n",
                    "deprecationMessage": "zone has been deprecated instead use zones"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The multi availability zone to launch the asg in, expressed as a number and starting at 0 - Automatic 1 - Zone A 2 -\nZone B\n"
                }
            },
            "required": [
                "base64UserData",
                "canScaleFromZero",
                "capacity",
                "friendlyName",
                "fullname",
                "imageId",
                "initialBase64UserData",
                "instanceCount",
                "isClusterAutoscaled",
                "keypairType",
                "maxInstanceCount",
                "metadatas",
                "minInstanceCount",
                "minionTags",
                "networkInterfaces",
                "publicIpAddress",
                "tags",
                "tenantId",
                "userAccount",
                "volumes"
            ],
            "inputProperties": {
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent pool that this host is added to.\n",
                    "willReplaceOnChanges": true
                },
                "allocatedPublicIp": {
                    "type": "boolean",
                    "description": "Whether or not to allocate a public IP.\n",
                    "willReplaceOnChanges": true
                },
                "base64UserData": {
                    "type": "string",
                    "description": "Base64 encoded EC2 user data to associated with the host.\n",
                    "willReplaceOnChanges": true
                },
                "canScaleFromZero": {
                    "type": "boolean",
                    "description": "Whether or not ASG should leverage duplocloud's scale from 0 feature\n",
                    "willReplaceOnChanges": true
                },
                "capacity": {
                    "type": "string",
                    "description": "The AWS EC2 instance type.\n",
                    "willReplaceOnChanges": true
                },
                "cloud": {
                    "type": "integer",
                    "description": "The numeric ID of the cloud provider to launch the host in.\n",
                    "willReplaceOnChanges": true
                },
                "customNodeLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specify the labels to attach to the nodes.\n",
                    "willReplaceOnChanges": true
                },
                "enabledMetrics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of metrics to collect for the ASG Specify one or more of the following\nmetrics.`GroupMinSize`,`GroupMaxSize`,`GroupDesiredCapacity`,`GroupInServiceInstances`,`GroupPendingInstances`,`GroupStandbyInstances`,`GroupTerminatingInstances`,`GroupTotalInstances`,`GroupInServiceCapacity`,`GroupPendingCapacity`,`GroupStandbyCapacity`,`GroupTerminatingCapacity`,`GroupTotalCapacity`,`WarmPoolDesiredCapacity`,`WarmPoolWarmedCapacity`,`WarmPoolPendingCapacity`,`WarmPoolTerminatingCapacity`,`WarmPoolTotalCapacity`,`GroupAndWarmPoolDesiredCapacity`,`GroupAndWarmPoolTotalCapacity`.\n",
                    "willReplaceOnChanges": true
                },
                "encryptDisk": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "friendlyName": {
                    "type": "string",
                    "description": "The short name of the host.\n",
                    "willReplaceOnChanges": true
                },
                "imageId": {
                    "type": "string",
                    "description": "The AMI ID to use.\n",
                    "willReplaceOnChanges": true
                },
                "instanceCount": {
                    "type": "integer",
                    "description": "The number of instances that should be running in the group.\n"
                },
                "isClusterAutoscaled": {
                    "type": "boolean",
                    "description": "Whether or not to enable cluster autoscaler.\n",
                    "willReplaceOnChanges": true
                },
                "isEbsOptimized": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "isMinion": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "keypairType": {
                    "type": "integer",
                    "description": "The numeric ID of the keypair type being used.Should be one of: - `0` : Default - `1` : ED25519 - `2` : RSA (deprecated\n- some operating systems no longer support it)\n"
                },
                "maxInstanceCount": {
                    "type": "integer",
                    "description": "The maximum size of the Auto Scaling Group.\n"
                },
                "maxSpotPrice": {
                    "type": "string",
                    "description": "Maximum price to pay for a spot instance in dollars per unit hour.\n",
                    "willReplaceOnChanges": true
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AsgProfileMetadata:AsgProfileMetadata"
                    },
                    "description": "Configuration metadata used when creating the host.\u003cbr\u003e*Note: To configure OS disk size OsDiskSize can be specified as\nKey and its size as value, size value should be atleast 10*\n"
                },
                "minInstanceCount": {
                    "type": "integer",
                    "description": "The minimum size of the Auto Scaling Group.\n"
                },
                "minionTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AsgProfileMinionTag:AsgProfileMinionTag"
                    },
                    "description": "A map of tags to assign to the resource. Example - `AllocationTags` can be passed as tag key with any value.\n",
                    "willReplaceOnChanges": true
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AsgProfileNetworkInterface:AsgProfileNetworkInterface"
                    },
                    "description": "An optional list of custom network interface configurations to use when creating the host.\n",
                    "willReplaceOnChanges": true
                },
                "prependUserData": {
                    "type": "boolean",
                    "description": "Bootstrap an EKS host with Duplo's user data, prepending it to custom user data if also provided.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AsgProfileTag:AsgProfileTag"
                    },
                    "willReplaceOnChanges": true
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AsgProfileTaint:AsgProfileTaint"
                    },
                    "description": "Specify taints to attach to the nodes, to repel other nodes with different toleration\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the host will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "useSpotInstances": {
                    "type": "boolean",
                    "description": "Whether or not to use spot instances.\n",
                    "willReplaceOnChanges": true
                },
                "userAccount": {
                    "type": "string",
                    "description": "The name of the tenant that the host will be created in.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AsgProfileVolume:AsgProfileVolume"
                    },
                    "description": "Block to specify additional or secondary volume beyond the root device\n",
                    "willReplaceOnChanges": true
                },
                "waitForCapacity": {
                    "type": "boolean",
                    "description": "Whether or not to wait until ASG instances to be healthy, after creation.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "integer",
                    "description": "The availability zone to launch the host in, expressed as a number and starting at 0.\n",
                    "deprecationMessage": "zone has been deprecated instead use zones",
                    "willReplaceOnChanges": true
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The multi availability zone to launch the asg in, expressed as a number and starting at 0 - Automatic 1 - Zone A 2 -\nZone B\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "capacity",
                "friendlyName",
                "imageId",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AsgProfile resources.\n",
                "properties": {
                    "agentPlatform": {
                        "type": "integer",
                        "description": "The numeric ID of the container agent pool that this host is added to.\n",
                        "willReplaceOnChanges": true
                    },
                    "allocatedPublicIp": {
                        "type": "boolean",
                        "description": "Whether or not to allocate a public IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "base64UserData": {
                        "type": "string",
                        "description": "Base64 encoded EC2 user data to associated with the host.\n",
                        "willReplaceOnChanges": true
                    },
                    "canScaleFromZero": {
                        "type": "boolean",
                        "description": "Whether or not ASG should leverage duplocloud's scale from 0 feature\n",
                        "willReplaceOnChanges": true
                    },
                    "capacity": {
                        "type": "string",
                        "description": "The AWS EC2 instance type.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloud": {
                        "type": "integer",
                        "description": "The numeric ID of the cloud provider to launch the host in.\n",
                        "willReplaceOnChanges": true
                    },
                    "customNodeLabels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specify the labels to attach to the nodes.\n",
                        "willReplaceOnChanges": true
                    },
                    "enabledMetrics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of metrics to collect for the ASG Specify one or more of the following\nmetrics.`GroupMinSize`,`GroupMaxSize`,`GroupDesiredCapacity`,`GroupInServiceInstances`,`GroupPendingInstances`,`GroupStandbyInstances`,`GroupTerminatingInstances`,`GroupTotalInstances`,`GroupInServiceCapacity`,`GroupPendingCapacity`,`GroupStandbyCapacity`,`GroupTerminatingCapacity`,`GroupTotalCapacity`,`WarmPoolDesiredCapacity`,`WarmPoolWarmedCapacity`,`WarmPoolPendingCapacity`,`WarmPoolTerminatingCapacity`,`WarmPoolTotalCapacity`,`GroupAndWarmPoolDesiredCapacity`,`GroupAndWarmPoolTotalCapacity`.\n",
                        "willReplaceOnChanges": true
                    },
                    "encryptDisk": {
                        "type": "boolean",
                        "willReplaceOnChanges": true
                    },
                    "friendlyName": {
                        "type": "string",
                        "description": "The short name of the host.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the ASG profile.\n",
                        "willReplaceOnChanges": true
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The AMI ID to use.\n",
                        "willReplaceOnChanges": true
                    },
                    "initialBase64UserData": {
                        "type": "string"
                    },
                    "instanceCount": {
                        "type": "integer",
                        "description": "The number of instances that should be running in the group.\n"
                    },
                    "isClusterAutoscaled": {
                        "type": "boolean",
                        "description": "Whether or not to enable cluster autoscaler.\n",
                        "willReplaceOnChanges": true
                    },
                    "isEbsOptimized": {
                        "type": "boolean",
                        "willReplaceOnChanges": true
                    },
                    "isMinion": {
                        "type": "boolean",
                        "willReplaceOnChanges": true
                    },
                    "keypairType": {
                        "type": "integer",
                        "description": "The numeric ID of the keypair type being used.Should be one of: - `0` : Default - `1` : ED25519 - `2` : RSA (deprecated\n- some operating systems no longer support it)\n"
                    },
                    "maxInstanceCount": {
                        "type": "integer",
                        "description": "The maximum size of the Auto Scaling Group.\n"
                    },
                    "maxSpotPrice": {
                        "type": "string",
                        "description": "Maximum price to pay for a spot instance in dollars per unit hour.\n",
                        "willReplaceOnChanges": true
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AsgProfileMetadata:AsgProfileMetadata"
                        },
                        "description": "Configuration metadata used when creating the host.\u003cbr\u003e*Note: To configure OS disk size OsDiskSize can be specified as\nKey and its size as value, size value should be atleast 10*\n"
                    },
                    "minInstanceCount": {
                        "type": "integer",
                        "description": "The minimum size of the Auto Scaling Group.\n"
                    },
                    "minionTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AsgProfileMinionTag:AsgProfileMinionTag"
                        },
                        "description": "A map of tags to assign to the resource. Example - `AllocationTags` can be passed as tag key with any value.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AsgProfileNetworkInterface:AsgProfileNetworkInterface"
                        },
                        "description": "An optional list of custom network interface configurations to use when creating the host.\n",
                        "willReplaceOnChanges": true
                    },
                    "prependUserData": {
                        "type": "boolean",
                        "description": "Bootstrap an EKS host with Duplo's user data, prepending it to custom user data if also provided.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicIpAddress": {
                        "type": "string",
                        "description": "The primary public IP address assigned to the host.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AsgProfileTag:AsgProfileTag"
                        },
                        "willReplaceOnChanges": true
                    },
                    "taints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AsgProfileTaint:AsgProfileTaint"
                        },
                        "description": "Specify taints to attach to the nodes, to repel other nodes with different toleration\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the host will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "useSpotInstances": {
                        "type": "boolean",
                        "description": "Whether or not to use spot instances.\n",
                        "willReplaceOnChanges": true
                    },
                    "userAccount": {
                        "type": "string",
                        "description": "The name of the tenant that the host will be created in.\n"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AsgProfileVolume:AsgProfileVolume"
                        },
                        "description": "Block to specify additional or secondary volume beyond the root device\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForCapacity": {
                        "type": "boolean",
                        "description": "Whether or not to wait until ASG instances to be healthy, after creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "integer",
                        "description": "The availability zone to launch the host in, expressed as a number and starting at 0.\n",
                        "deprecationMessage": "zone has been deprecated instead use zones",
                        "willReplaceOnChanges": true
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The multi availability zone to launch the asg in, expressed as a number and starting at 0 - Automatic 1 - Zone A 2 -\nZone B\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsApiGatewayIntegration:AwsApiGatewayIntegration": {
            "description": "`duplocloud.AwsApiGatewayIntegration` manages an aws api gateway integration in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst duplo_app = new duplocloud.Tenant(\"duplo-app\", {\n    accountName: \"duplo-app\",\n    planId: \"default\",\n});\nconst apigw_lambda = new duplocloud.AwsApiGatewayIntegration(\"apigw-lambda\", {\n    tenantId: duplo_app.tenantId,\n    name: \"test-api-lambda\",\n    lambdaFunctionName: \"duploservices-dev01-osrm-engine\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nduplo_app = duplocloud.Tenant(\"duplo-app\",\n    account_name=\"duplo-app\",\n    plan_id=\"default\")\napigw_lambda = duplocloud.AwsApiGatewayIntegration(\"apigw-lambda\",\n    tenant_id=duplo_app.tenant_id,\n    name=\"test-api-lambda\",\n    lambda_function_name=\"duploservices-dev01-osrm-engine\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var duplo_app = new Duplocloud.Tenant(\"duplo-app\", new()\n    {\n        AccountName = \"duplo-app\",\n        PlanId = \"default\",\n    });\n\n    var apigw_lambda = new Duplocloud.AwsApiGatewayIntegration(\"apigw-lambda\", new()\n    {\n        TenantId = duplo_app.TenantId,\n        Name = \"test-api-lambda\",\n        LambdaFunctionName = \"duploservices-dev01-osrm-engine\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewTenant(ctx, \"duplo-app\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"duplo-app\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsApiGatewayIntegration(ctx, \"apigw-lambda\", \u0026duplocloud.AwsApiGatewayIntegrationArgs{\n\t\t\tTenantId:           duplo_app.TenantId,\n\t\t\tName:               pulumi.String(\"test-api-lambda\"),\n\t\t\tLambdaFunctionName: pulumi.String(\"duploservices-dev01-osrm-engine\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsApiGatewayIntegration;\nimport com.pulumi.duplocloud.AwsApiGatewayIntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var duplo_app = new Tenant(\"duplo-app\", TenantArgs.builder()\n            .accountName(\"duplo-app\")\n            .planId(\"default\")\n            .build());\n\n        var apigw_lambda = new AwsApiGatewayIntegration(\"apigw-lambda\", AwsApiGatewayIntegrationArgs.builder()\n            .tenantId(duplo_app.tenantId())\n            .name(\"test-api-lambda\")\n            .lambdaFunctionName(\"duploservices-dev01-osrm-engine\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  duplo-app:\n    type: duplocloud:Tenant\n    properties:\n      accountName: duplo-app\n      planId: default\n  apigw-lambda:\n    type: duplocloud:AwsApiGatewayIntegration\n    properties:\n      tenantId: ${[\"duplo-app\"].tenantId}\n      name: test-api-lambda\n      lambdaFunctionName: duploservices-dev01-osrm-engine\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing aws api gateway resource\n\n - *TENANT_ID* is the tenant GUID\n\n - *FRIENDLY_NAME* is the duploservices-\u003caccount_name\u003e-\u003cfriendly_name\u003e-\u003caws-account-number\u003e\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsApiGatewayIntegration:AwsApiGatewayIntegration myApiGateway *TENANT_ID*/*FRIENDLY_NAME*\n```\n\n",
            "properties": {
                "fullname": {
                    "type": "string",
                    "description": "The full name of the api gateway.\n"
                },
                "lambdaFunctionName": {
                    "type": "string",
                    "description": "Name of the lambda function to be integrated with API gateway.\n"
                },
                "metadata": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the api gateway.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws api gateway integration will be created in.\n"
                }
            },
            "required": [
                "fullname",
                "lambdaFunctionName",
                "metadata",
                "name",
                "tenantId"
            ],
            "inputProperties": {
                "lambdaFunctionName": {
                    "type": "string",
                    "description": "Name of the lambda function to be integrated with API gateway.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the api gateway.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws api gateway integration will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "lambdaFunctionName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsApiGatewayIntegration resources.\n",
                "properties": {
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the api gateway.\n"
                    },
                    "lambdaFunctionName": {
                        "type": "string",
                        "description": "Name of the lambda function to be integrated with API gateway.\n"
                    },
                    "metadata": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the api gateway.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the aws api gateway integration will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsApigatewayEvent:AwsApigatewayEvent": {
            "description": "`duplocloud.AwsApigatewayEvent` manages an AWS API Gateway events with integration in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst apigatewayEvent = new duplocloud.AwsApigatewayEvent(\"apigateway_event\", {\n    tenantId: myapp.tenantId,\n    apiGatewayId: \"t84tb3skz0\",\n    method: \"POST\",\n    path: \"/v2/docs\",\n    cors: true,\n    authorizationType: \"COGNITO_USER_POOLS\",\n    authorizerId: \"gto03x\",\n    integration: {\n        type: \"AWS_PROXY\",\n        uri: \"arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:1234567890:function:duploservices-dev-valuation-test/invocations\",\n        timeout: 29000,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\napigateway_event = duplocloud.AwsApigatewayEvent(\"apigateway_event\",\n    tenant_id=myapp.tenant_id,\n    api_gateway_id=\"t84tb3skz0\",\n    method=\"POST\",\n    path=\"/v2/docs\",\n    cors=True,\n    authorization_type=\"COGNITO_USER_POOLS\",\n    authorizer_id=\"gto03x\",\n    integration={\n        \"type\": \"AWS_PROXY\",\n        \"uri\": \"arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:1234567890:function:duploservices-dev-valuation-test/invocations\",\n        \"timeout\": 29000,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var apigatewayEvent = new Duplocloud.AwsApigatewayEvent(\"apigateway_event\", new()\n    {\n        TenantId = myapp.TenantId,\n        ApiGatewayId = \"t84tb3skz0\",\n        Method = \"POST\",\n        Path = \"/v2/docs\",\n        Cors = true,\n        AuthorizationType = \"COGNITO_USER_POOLS\",\n        AuthorizerId = \"gto03x\",\n        Integration = new Duplocloud.Inputs.AwsApigatewayEventIntegrationArgs\n        {\n            Type = \"AWS_PROXY\",\n            Uri = \"arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:1234567890:function:duploservices-dev-valuation-test/invocations\",\n            Timeout = 29000,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsApigatewayEvent(ctx, \"apigateway_event\", \u0026duplocloud.AwsApigatewayEventArgs{\n\t\t\tTenantId:          myapp.TenantId,\n\t\t\tApiGatewayId:      pulumi.String(\"t84tb3skz0\"),\n\t\t\tMethod:            pulumi.String(\"POST\"),\n\t\t\tPath:              pulumi.String(\"/v2/docs\"),\n\t\t\tCors:              pulumi.Bool(true),\n\t\t\tAuthorizationType: pulumi.String(\"COGNITO_USER_POOLS\"),\n\t\t\tAuthorizerId:      pulumi.String(\"gto03x\"),\n\t\t\tIntegration: \u0026duplocloud.AwsApigatewayEventIntegrationArgs{\n\t\t\t\tType:    pulumi.String(\"AWS_PROXY\"),\n\t\t\t\tUri:     pulumi.String(\"arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:1234567890:function:duploservices-dev-valuation-test/invocations\"),\n\t\t\t\tTimeout: pulumi.Int(29000),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsApigatewayEvent;\nimport com.pulumi.duplocloud.AwsApigatewayEventArgs;\nimport com.pulumi.duplocloud.inputs.AwsApigatewayEventIntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var apigatewayEvent = new AwsApigatewayEvent(\"apigatewayEvent\", AwsApigatewayEventArgs.builder()\n            .tenantId(myapp.tenantId())\n            .apiGatewayId(\"t84tb3skz0\")\n            .method(\"POST\")\n            .path(\"/v2/docs\")\n            .cors(true)\n            .authorizationType(\"COGNITO_USER_POOLS\")\n            .authorizerId(\"gto03x\")\n            .integration(AwsApigatewayEventIntegrationArgs.builder()\n                .type(\"AWS_PROXY\")\n                .uri(\"arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:1234567890:function:duploservices-dev-valuation-test/invocations\")\n                .timeout(29000)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  apigatewayEvent:\n    type: duplocloud:AwsApigatewayEvent\n    name: apigateway_event\n    properties:\n      tenantId: ${myapp.tenantId}\n      apiGatewayId: t84tb3skz0\n      method: POST\n      path: /v2/docs\n      cors: true\n      authorizationType: COGNITO_USER_POOLS\n      authorizerId: gto03x\n      integration:\n        type: AWS_PROXY\n        uri: arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:1234567890:function:duploservices-dev-valuation-test/invocations\n        timeout: 29000\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS API Gateway Event\n\n - *TENANT_ID* is the tenant GUID\n\n - *API_GATEWAY_ID* The API Gateway ID.\n\n - *METHOD* The HTTP Method.\n\n - *PATH* The API endpoint path.\n\n```sh\n$ pulumi import duplocloud:index/awsApigatewayEvent:AwsApigatewayEvent ssm_param *TENANT_ID*/*API_GATEWAY_ID*/*METHOD*/*PATH*\n```\n\n",
            "properties": {
                "apiGatewayId": {
                    "type": "string",
                    "description": "The ID of the REST API.\n"
                },
                "apiKeyRequired": {
                    "type": "boolean",
                    "description": "Specify if the method requires an API key.\n"
                },
                "authorizationType": {
                    "type": "string",
                    "description": "Type of authorization used for the method. (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)\n"
                },
                "authorizerId": {
                    "type": "string",
                    "description": "Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`.\n"
                },
                "contentHandling": {
                    "type": "string",
                    "description": "How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.\n"
                },
                "cors": {
                    "type": "boolean",
                    "description": "Enable handling of preflight requests.\n"
                },
                "integration": {
                    "$ref": "#/types/duplocloud:index/AwsApigatewayEventIntegration:AwsApigatewayEventIntegration",
                    "description": "Specify API gateway integration.\n"
                },
                "method": {
                    "type": "string",
                    "description": "HTTP Method.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path segment of API resource.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the API gateway event will be created in.\n"
                }
            },
            "required": [
                "apiGatewayId",
                "apiKeyRequired",
                "authorizationType",
                "authorizerId",
                "contentHandling",
                "cors",
                "integration",
                "method",
                "path",
                "tenantId"
            ],
            "inputProperties": {
                "apiGatewayId": {
                    "type": "string",
                    "description": "The ID of the REST API.\n",
                    "willReplaceOnChanges": true
                },
                "apiKeyRequired": {
                    "type": "boolean",
                    "description": "Specify if the method requires an API key.\n"
                },
                "authorizationType": {
                    "type": "string",
                    "description": "Type of authorization used for the method. (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)\n"
                },
                "authorizerId": {
                    "type": "string",
                    "description": "Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`.\n"
                },
                "contentHandling": {
                    "type": "string",
                    "description": "How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.\n"
                },
                "cors": {
                    "type": "boolean",
                    "description": "Enable handling of preflight requests.\n"
                },
                "integration": {
                    "$ref": "#/types/duplocloud:index/AwsApigatewayEventIntegration:AwsApigatewayEventIntegration",
                    "description": "Specify API gateway integration.\n"
                },
                "method": {
                    "type": "string",
                    "description": "HTTP Method.\n",
                    "willReplaceOnChanges": true
                },
                "path": {
                    "type": "string",
                    "description": "The path segment of API resource.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the API gateway event will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiGatewayId",
                "integration",
                "method",
                "path",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsApigatewayEvent resources.\n",
                "properties": {
                    "apiGatewayId": {
                        "type": "string",
                        "description": "The ID of the REST API.\n",
                        "willReplaceOnChanges": true
                    },
                    "apiKeyRequired": {
                        "type": "boolean",
                        "description": "Specify if the method requires an API key.\n"
                    },
                    "authorizationType": {
                        "type": "string",
                        "description": "Type of authorization used for the method. (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)\n"
                    },
                    "authorizerId": {
                        "type": "string",
                        "description": "Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`.\n"
                    },
                    "contentHandling": {
                        "type": "string",
                        "description": "How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.\n"
                    },
                    "cors": {
                        "type": "boolean",
                        "description": "Enable handling of preflight requests.\n"
                    },
                    "integration": {
                        "$ref": "#/types/duplocloud:index/AwsApigatewayEventIntegration:AwsApigatewayEventIntegration",
                        "description": "Specify API gateway integration.\n"
                    },
                    "method": {
                        "type": "string",
                        "description": "HTTP Method.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The path segment of API resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the API gateway event will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsAppautoscalingPolicy:AwsAppautoscalingPolicy": {
            "description": "`duplocloud.AwsAppautoscalingPolicy` manages an aws autoscaling policy in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst duplo_app = new duplocloud.Tenant(\"duplo-app\", {\n    accountName: \"duplo-app\",\n    planId: \"default\",\n});\n//ECS Service Autoscaling\nconst asg_target = new duplocloud.AwsAppautoscalingTarget(\"asg-target\", {\n    tenantId: duplo_app.tenantId,\n    maxCapacity: 4,\n    minCapacity: 2,\n    resourceId: \"duploservices-duplo-app-ecs-service\",\n    scalableDimension: \"ecs:service:DesiredCount\",\n    serviceNamespace: \"ecs\",\n});\nconst asg_app_policy = new duplocloud.AwsAppautoscalingPolicy(\"asg-app-policy\", {\n    tenantId: duplo_app.tenantId,\n    name: \"avg-cpu-utilization\",\n    policyType: \"TargetTrackingScaling\",\n    resourceId: asg_target.resourceId,\n    scalableDimension: asg_target.scalableDimension,\n    serviceNamespace: asg_target.serviceNamespace,\n    targetTrackingScalingPolicyConfiguration: {\n        predefinedMetricSpecification: {\n            predefinedMetricType: \"ECSServiceAverageCPUUtilization\",\n        },\n        targetValue: 40,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nduplo_app = duplocloud.Tenant(\"duplo-app\",\n    account_name=\"duplo-app\",\n    plan_id=\"default\")\n#ECS Service Autoscaling\nasg_target = duplocloud.AwsAppautoscalingTarget(\"asg-target\",\n    tenant_id=duplo_app.tenant_id,\n    max_capacity=4,\n    min_capacity=2,\n    resource_id=\"duploservices-duplo-app-ecs-service\",\n    scalable_dimension=\"ecs:service:DesiredCount\",\n    service_namespace=\"ecs\")\nasg_app_policy = duplocloud.AwsAppautoscalingPolicy(\"asg-app-policy\",\n    tenant_id=duplo_app.tenant_id,\n    name=\"avg-cpu-utilization\",\n    policy_type=\"TargetTrackingScaling\",\n    resource_id=asg_target.resource_id,\n    scalable_dimension=asg_target.scalable_dimension,\n    service_namespace=asg_target.service_namespace,\n    target_tracking_scaling_policy_configuration={\n        \"predefined_metric_specification\": {\n            \"predefined_metric_type\": \"ECSServiceAverageCPUUtilization\",\n        },\n        \"target_value\": 40,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var duplo_app = new Duplocloud.Tenant(\"duplo-app\", new()\n    {\n        AccountName = \"duplo-app\",\n        PlanId = \"default\",\n    });\n\n    //ECS Service Autoscaling\n    var asg_target = new Duplocloud.AwsAppautoscalingTarget(\"asg-target\", new()\n    {\n        TenantId = duplo_app.TenantId,\n        MaxCapacity = 4,\n        MinCapacity = 2,\n        ResourceId = \"duploservices-duplo-app-ecs-service\",\n        ScalableDimension = \"ecs:service:DesiredCount\",\n        ServiceNamespace = \"ecs\",\n    });\n\n    var asg_app_policy = new Duplocloud.AwsAppautoscalingPolicy(\"asg-app-policy\", new()\n    {\n        TenantId = duplo_app.TenantId,\n        Name = \"avg-cpu-utilization\",\n        PolicyType = \"TargetTrackingScaling\",\n        ResourceId = asg_target.ResourceId,\n        ScalableDimension = asg_target.ScalableDimension,\n        ServiceNamespace = asg_target.ServiceNamespace,\n        TargetTrackingScalingPolicyConfiguration = new Duplocloud.Inputs.AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationArgs\n        {\n            PredefinedMetricSpecification = new Duplocloud.Inputs.AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs\n            {\n                PredefinedMetricType = \"ECSServiceAverageCPUUtilization\",\n            },\n            TargetValue = 40,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewTenant(ctx, \"duplo-app\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"duplo-app\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// ECS Service Autoscaling\n\t\t_, err = duplocloud.NewAwsAppautoscalingTarget(ctx, \"asg-target\", \u0026duplocloud.AwsAppautoscalingTargetArgs{\n\t\t\tTenantId:          duplo_app.TenantId,\n\t\t\tMaxCapacity:       pulumi.Int(4),\n\t\t\tMinCapacity:       pulumi.Int(2),\n\t\t\tResourceId:        pulumi.String(\"duploservices-duplo-app-ecs-service\"),\n\t\t\tScalableDimension: pulumi.String(\"ecs:service:DesiredCount\"),\n\t\t\tServiceNamespace:  pulumi.String(\"ecs\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsAppautoscalingPolicy(ctx, \"asg-app-policy\", \u0026duplocloud.AwsAppautoscalingPolicyArgs{\n\t\t\tTenantId:          duplo_app.TenantId,\n\t\t\tName:              pulumi.String(\"avg-cpu-utilization\"),\n\t\t\tPolicyType:        pulumi.String(\"TargetTrackingScaling\"),\n\t\t\tResourceId:        asg_target.ResourceId,\n\t\t\tScalableDimension: asg_target.ScalableDimension,\n\t\t\tServiceNamespace:  asg_target.ServiceNamespace,\n\t\t\tTargetTrackingScalingPolicyConfiguration: \u0026duplocloud.AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationArgs{\n\t\t\t\tPredefinedMetricSpecification: \u0026duplocloud.AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs{\n\t\t\t\t\tPredefinedMetricType: pulumi.String(\"ECSServiceAverageCPUUtilization\"),\n\t\t\t\t},\n\t\t\t\tTargetValue: pulumi.Float64(40),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsAppautoscalingTarget;\nimport com.pulumi.duplocloud.AwsAppautoscalingTargetArgs;\nimport com.pulumi.duplocloud.AwsAppautoscalingPolicy;\nimport com.pulumi.duplocloud.AwsAppautoscalingPolicyArgs;\nimport com.pulumi.duplocloud.inputs.AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationArgs;\nimport com.pulumi.duplocloud.inputs.AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var duplo_app = new Tenant(\"duplo-app\", TenantArgs.builder()\n            .accountName(\"duplo-app\")\n            .planId(\"default\")\n            .build());\n\n        //ECS Service Autoscaling\n        var asg_target = new AwsAppautoscalingTarget(\"asg-target\", AwsAppautoscalingTargetArgs.builder()\n            .tenantId(duplo_app.tenantId())\n            .maxCapacity(4)\n            .minCapacity(2)\n            .resourceId(\"duploservices-duplo-app-ecs-service\")\n            .scalableDimension(\"ecs:service:DesiredCount\")\n            .serviceNamespace(\"ecs\")\n            .build());\n\n        var asg_app_policy = new AwsAppautoscalingPolicy(\"asg-app-policy\", AwsAppautoscalingPolicyArgs.builder()\n            .tenantId(duplo_app.tenantId())\n            .name(\"avg-cpu-utilization\")\n            .policyType(\"TargetTrackingScaling\")\n            .resourceId(asg_target.resourceId())\n            .scalableDimension(asg_target.scalableDimension())\n            .serviceNamespace(asg_target.serviceNamespace())\n            .targetTrackingScalingPolicyConfiguration(AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationArgs.builder()\n                .predefinedMetricSpecification(AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs.builder()\n                    .predefinedMetricType(\"ECSServiceAverageCPUUtilization\")\n                    .build())\n                .targetValue(40)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  duplo-app:\n    type: duplocloud:Tenant\n    properties:\n      accountName: duplo-app\n      planId: default\n  #ECS Service Autoscaling\n  asg-target:\n    type: duplocloud:AwsAppautoscalingTarget\n    properties:\n      tenantId: ${[\"duplo-app\"].tenantId}\n      maxCapacity: 4\n      minCapacity: 2\n      resourceId: duploservices-duplo-app-ecs-service\n      scalableDimension: ecs:service:DesiredCount\n      serviceNamespace: ecs\n  asg-app-policy:\n    type: duplocloud:AwsAppautoscalingPolicy\n    properties:\n      tenantId: ${[\"duplo-app\"].tenantId}\n      name: avg-cpu-utilization\n      policyType: TargetTrackingScaling\n      resourceId: ${[\"asg-target\"].resourceId}\n      scalableDimension: ${[\"asg-target\"].scalableDimension}\n      serviceNamespace: ${[\"asg-target\"].serviceNamespace}\n      targetTrackingScalingPolicyConfiguration:\n        predefinedMetricSpecification:\n          predefinedMetricType: ECSServiceAverageCPUUtilization\n        targetValue: 40\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Autoscaling Policy\n\n - *TENANT_ID* is the tenant GUID\n\n - *SERVICE_NAMESPACE* The AWS service namespace of the scalable target\n\n - *SCALABLE_DIMENSION*  The scalable dimension of the scalable target.\n\n - *RESOURCE_ID* is the duploservices-\u003caccount_name\u003e-\u003cresource_name\u003e\n\n - *POLICY_NAME* is the name of policy\n\n```sh\n$ pulumi import duplocloud:index/awsAppautoscalingPolicy:AwsAppautoscalingPolicy asgAppPolicy *TENANT_ID*/*SERVICE_NAMESPACE*/*SCALABLE_DIMENSION*/*RESOURCE_ID*/*POLICY_NAME*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string"
                },
                "fullResourceId": {
                    "type": "string",
                    "description": "The resource type and unique identifier string for the resource associated with the scaling policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the policy. Must be between 1 and 255 characters in length.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The policy type. Valid values are `StepScaling` and `TargetTrackingScaling`. Defaults to `StepScaling`.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The resource type and unique identifier string for the resource associated with the scaling policy.\n"
                },
                "scalableDimension": {
                    "type": "string",
                    "description": "The scalable dimension of the scalable target.\n"
                },
                "serviceNamespace": {
                    "type": "string",
                    "description": "The AWS service namespace of the scalable target.\n"
                },
                "stepScalingPolicyConfiguration": {
                    "$ref": "#/types/duplocloud:index/AwsAppautoscalingPolicyStepScalingPolicyConfiguration:AwsAppautoscalingPolicyStepScalingPolicyConfiguration",
                    "description": "Step scaling policy configuration, requires `policy_type = \"StepScaling\"`\n"
                },
                "targetTrackingScalingPolicyConfiguration": {
                    "$ref": "#/types/duplocloud:index/AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfiguration:AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfiguration",
                    "description": "A target tracking policy, requires `policy_type = \"TargetTrackingScaling\"`\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws autoscaling policy will be created in.\n"
                }
            },
            "required": [
                "arn",
                "fullResourceId",
                "name",
                "resourceId",
                "scalableDimension",
                "serviceNamespace",
                "tenantId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the policy. Must be between 1 and 255 characters in length.\n",
                    "willReplaceOnChanges": true
                },
                "policyType": {
                    "type": "string",
                    "description": "The policy type. Valid values are `StepScaling` and `TargetTrackingScaling`. Defaults to `StepScaling`.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The resource type and unique identifier string for the resource associated with the scaling policy.\n",
                    "willReplaceOnChanges": true
                },
                "scalableDimension": {
                    "type": "string",
                    "description": "The scalable dimension of the scalable target.\n",
                    "willReplaceOnChanges": true
                },
                "serviceNamespace": {
                    "type": "string",
                    "description": "The AWS service namespace of the scalable target.\n",
                    "willReplaceOnChanges": true
                },
                "stepScalingPolicyConfiguration": {
                    "$ref": "#/types/duplocloud:index/AwsAppautoscalingPolicyStepScalingPolicyConfiguration:AwsAppautoscalingPolicyStepScalingPolicyConfiguration",
                    "description": "Step scaling policy configuration, requires `policy_type = \"StepScaling\"`\n"
                },
                "targetTrackingScalingPolicyConfiguration": {
                    "$ref": "#/types/duplocloud:index/AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfiguration:AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfiguration",
                    "description": "A target tracking policy, requires `policy_type = \"TargetTrackingScaling\"`\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws autoscaling policy will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "resourceId",
                "scalableDimension",
                "serviceNamespace",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsAppautoscalingPolicy resources.\n",
                "properties": {
                    "arn": {
                        "type": "string"
                    },
                    "fullResourceId": {
                        "type": "string",
                        "description": "The resource type and unique identifier string for the resource associated with the scaling policy.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the policy. Must be between 1 and 255 characters in length.\n",
                        "willReplaceOnChanges": true
                    },
                    "policyType": {
                        "type": "string",
                        "description": "The policy type. Valid values are `StepScaling` and `TargetTrackingScaling`. Defaults to `StepScaling`.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The resource type and unique identifier string for the resource associated with the scaling policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "scalableDimension": {
                        "type": "string",
                        "description": "The scalable dimension of the scalable target.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceNamespace": {
                        "type": "string",
                        "description": "The AWS service namespace of the scalable target.\n",
                        "willReplaceOnChanges": true
                    },
                    "stepScalingPolicyConfiguration": {
                        "$ref": "#/types/duplocloud:index/AwsAppautoscalingPolicyStepScalingPolicyConfiguration:AwsAppautoscalingPolicyStepScalingPolicyConfiguration",
                        "description": "Step scaling policy configuration, requires `policy_type = \"StepScaling\"`\n"
                    },
                    "targetTrackingScalingPolicyConfiguration": {
                        "$ref": "#/types/duplocloud:index/AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfiguration:AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfiguration",
                        "description": "A target tracking policy, requires `policy_type = \"TargetTrackingScaling\"`\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the aws autoscaling policy will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsAppautoscalingTarget:AwsAppautoscalingTarget": {
            "description": "`duplocloud.AwsAppautoscalingTarget` manages an aws autoscaling target in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst duplo_app = new duplocloud.Tenant(\"duplo-app\", {\n    accountName: \"duplo-app\",\n    planId: \"default\",\n});\n//ECS Service Autoscaling\nconst asg_target = new duplocloud.AwsAppautoscalingTarget(\"asg-target\", {\n    tenantId: duplo_app.tenantId,\n    maxCapacity: 4,\n    minCapacity: 2,\n    resourceId: \"duploservices-duplo-app-ecs-service\",\n    scalableDimension: \"ecs:service:DesiredCount\",\n    serviceNamespace: \"ecs\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nduplo_app = duplocloud.Tenant(\"duplo-app\",\n    account_name=\"duplo-app\",\n    plan_id=\"default\")\n#ECS Service Autoscaling\nasg_target = duplocloud.AwsAppautoscalingTarget(\"asg-target\",\n    tenant_id=duplo_app.tenant_id,\n    max_capacity=4,\n    min_capacity=2,\n    resource_id=\"duploservices-duplo-app-ecs-service\",\n    scalable_dimension=\"ecs:service:DesiredCount\",\n    service_namespace=\"ecs\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var duplo_app = new Duplocloud.Tenant(\"duplo-app\", new()\n    {\n        AccountName = \"duplo-app\",\n        PlanId = \"default\",\n    });\n\n    //ECS Service Autoscaling\n    var asg_target = new Duplocloud.AwsAppautoscalingTarget(\"asg-target\", new()\n    {\n        TenantId = duplo_app.TenantId,\n        MaxCapacity = 4,\n        MinCapacity = 2,\n        ResourceId = \"duploservices-duplo-app-ecs-service\",\n        ScalableDimension = \"ecs:service:DesiredCount\",\n        ServiceNamespace = \"ecs\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewTenant(ctx, \"duplo-app\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"duplo-app\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// ECS Service Autoscaling\n\t\t_, err = duplocloud.NewAwsAppautoscalingTarget(ctx, \"asg-target\", \u0026duplocloud.AwsAppautoscalingTargetArgs{\n\t\t\tTenantId:          duplo_app.TenantId,\n\t\t\tMaxCapacity:       pulumi.Int(4),\n\t\t\tMinCapacity:       pulumi.Int(2),\n\t\t\tResourceId:        pulumi.String(\"duploservices-duplo-app-ecs-service\"),\n\t\t\tScalableDimension: pulumi.String(\"ecs:service:DesiredCount\"),\n\t\t\tServiceNamespace:  pulumi.String(\"ecs\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsAppautoscalingTarget;\nimport com.pulumi.duplocloud.AwsAppautoscalingTargetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var duplo_app = new Tenant(\"duplo-app\", TenantArgs.builder()\n            .accountName(\"duplo-app\")\n            .planId(\"default\")\n            .build());\n\n        //ECS Service Autoscaling\n        var asg_target = new AwsAppautoscalingTarget(\"asg-target\", AwsAppautoscalingTargetArgs.builder()\n            .tenantId(duplo_app.tenantId())\n            .maxCapacity(4)\n            .minCapacity(2)\n            .resourceId(\"duploservices-duplo-app-ecs-service\")\n            .scalableDimension(\"ecs:service:DesiredCount\")\n            .serviceNamespace(\"ecs\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  duplo-app:\n    type: duplocloud:Tenant\n    properties:\n      accountName: duplo-app\n      planId: default\n  #ECS Service Autoscaling\n  asg-target:\n    type: duplocloud:AwsAppautoscalingTarget\n    properties:\n      tenantId: ${[\"duplo-app\"].tenantId}\n      maxCapacity: 4\n      minCapacity: 2\n      resourceId: duploservices-duplo-app-ecs-service\n      scalableDimension: ecs:service:DesiredCount\n      serviceNamespace: ecs\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Autoscaling Target\n\n - *TENANT_ID* is the tenant GUID\n\n - *SERVICE_NAMESPACE* The AWS service namespace of the scalable target\n\n - *SCALABLE_DIMENSION*  The scalable dimension of the scalable target.\n\n - *RESOURCE_ID* is the duploservices-\u003caccount_name\u003e-\u003cresource_name\u003e\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsAppautoscalingTarget:AwsAppautoscalingTarget asgTarget *TENANT_ID*/*SERVICE_NAMESPACE*/*SCALABLE_DIMENSION*/*RESOURCE_ID*\n```\n\n",
            "properties": {
                "fullResourceId": {
                    "type": "string",
                    "description": "The resource type and unique identifier string for the resource associated with the scaling policy.\n"
                },
                "maxCapacity": {
                    "type": "integer",
                    "description": "The max capacity of the scalable target.\n"
                },
                "minCapacity": {
                    "type": "integer",
                    "description": "The min capacity of the scalable target.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "Resource name associated with the scaling policy.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The ARN of the IAM role that allows Application AutoScaling to modify your scalable target on your behalf.\n"
                },
                "scalableDimension": {
                    "type": "string",
                    "description": "The scalable dimension of the scalable target.\n"
                },
                "serviceNamespace": {
                    "type": "string",
                    "description": "The AWS service namespace of the scalable target.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws autoscaling target will be created in.\n"
                }
            },
            "required": [
                "fullResourceId",
                "maxCapacity",
                "minCapacity",
                "resourceId",
                "roleArn",
                "scalableDimension",
                "serviceNamespace",
                "tenantId"
            ],
            "inputProperties": {
                "maxCapacity": {
                    "type": "integer",
                    "description": "The max capacity of the scalable target.\n"
                },
                "minCapacity": {
                    "type": "integer",
                    "description": "The min capacity of the scalable target.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "Resource name associated with the scaling policy.\n",
                    "willReplaceOnChanges": true
                },
                "roleArn": {
                    "type": "string",
                    "description": "The ARN of the IAM role that allows Application AutoScaling to modify your scalable target on your behalf.\n"
                },
                "scalableDimension": {
                    "type": "string",
                    "description": "The scalable dimension of the scalable target.\n",
                    "willReplaceOnChanges": true
                },
                "serviceNamespace": {
                    "type": "string",
                    "description": "The AWS service namespace of the scalable target.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws autoscaling target will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "maxCapacity",
                "minCapacity",
                "resourceId",
                "scalableDimension",
                "serviceNamespace",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsAppautoscalingTarget resources.\n",
                "properties": {
                    "fullResourceId": {
                        "type": "string",
                        "description": "The resource type and unique identifier string for the resource associated with the scaling policy.\n"
                    },
                    "maxCapacity": {
                        "type": "integer",
                        "description": "The max capacity of the scalable target.\n"
                    },
                    "minCapacity": {
                        "type": "integer",
                        "description": "The min capacity of the scalable target.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "Resource name associated with the scaling policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleArn": {
                        "type": "string",
                        "description": "The ARN of the IAM role that allows Application AutoScaling to modify your scalable target on your behalf.\n"
                    },
                    "scalableDimension": {
                        "type": "string",
                        "description": "The scalable dimension of the scalable target.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceNamespace": {
                        "type": "string",
                        "description": "The AWS service namespace of the scalable target.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the aws autoscaling target will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsBatchComputeEnvironment:AwsBatchComputeEnvironment": {
            "description": "`duplocloud.AwsBatchComputeEnvironment` manages an aws batch compute environment in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst bce = new duplocloud.AwsBatchComputeEnvironment(\"bce\", {\n    tenantId: myapp.tenantId,\n    name: \"sample\",\n    computeResources: {\n        ec2Configuration: {\n            imageType: \"ECS_AL2\",\n        },\n        instanceTypes: [\"optimal\"],\n        allocationStrategy: \"BEST_FIT\",\n        maxVcpus: 8,\n        minVcpus: 1,\n        desiredVcpus: 2,\n        bidPercentage: 100,\n        type: \"EC2\",\n    },\n    type: \"MANAGED\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nbce = duplocloud.AwsBatchComputeEnvironment(\"bce\",\n    tenant_id=myapp.tenant_id,\n    name=\"sample\",\n    compute_resources={\n        \"ec2_configuration\": {\n            \"image_type\": \"ECS_AL2\",\n        },\n        \"instance_types\": [\"optimal\"],\n        \"allocation_strategy\": \"BEST_FIT\",\n        \"max_vcpus\": 8,\n        \"min_vcpus\": 1,\n        \"desired_vcpus\": 2,\n        \"bid_percentage\": 100,\n        \"type\": \"EC2\",\n    },\n    type=\"MANAGED\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var bce = new Duplocloud.AwsBatchComputeEnvironment(\"bce\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"sample\",\n        ComputeResources = new Duplocloud.Inputs.AwsBatchComputeEnvironmentComputeResourcesArgs\n        {\n            Ec2Configuration = new Duplocloud.Inputs.AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgs\n            {\n                ImageType = \"ECS_AL2\",\n            },\n            InstanceTypes = new[]\n            {\n                \"optimal\",\n            },\n            AllocationStrategy = \"BEST_FIT\",\n            MaxVcpus = 8,\n            MinVcpus = 1,\n            DesiredVcpus = 2,\n            BidPercentage = 100,\n            Type = \"EC2\",\n        },\n        Type = \"MANAGED\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsBatchComputeEnvironment(ctx, \"bce\", \u0026duplocloud.AwsBatchComputeEnvironmentArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tName:     pulumi.String(\"sample\"),\n\t\t\tComputeResources: \u0026duplocloud.AwsBatchComputeEnvironmentComputeResourcesArgs{\n\t\t\t\tEc2Configuration: \u0026duplocloud.AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgs{\n\t\t\t\t\tImageType: pulumi.String(\"ECS_AL2\"),\n\t\t\t\t},\n\t\t\t\tInstanceTypes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"optimal\"),\n\t\t\t\t},\n\t\t\t\tAllocationStrategy: pulumi.String(\"BEST_FIT\"),\n\t\t\t\tMaxVcpus:           pulumi.Int(8),\n\t\t\t\tMinVcpus:           pulumi.Int(1),\n\t\t\t\tDesiredVcpus:       pulumi.Int(2),\n\t\t\t\tBidPercentage:      pulumi.Int(100),\n\t\t\t\tType:               pulumi.String(\"EC2\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"MANAGED\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsBatchComputeEnvironment;\nimport com.pulumi.duplocloud.AwsBatchComputeEnvironmentArgs;\nimport com.pulumi.duplocloud.inputs.AwsBatchComputeEnvironmentComputeResourcesArgs;\nimport com.pulumi.duplocloud.inputs.AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var bce = new AwsBatchComputeEnvironment(\"bce\", AwsBatchComputeEnvironmentArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"sample\")\n            .computeResources(AwsBatchComputeEnvironmentComputeResourcesArgs.builder()\n                .ec2Configuration(AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgs.builder()\n                    .imageType(\"ECS_AL2\")\n                    .build())\n                .instanceTypes(\"optimal\")\n                .allocationStrategy(\"BEST_FIT\")\n                .maxVcpus(8)\n                .minVcpus(1)\n                .desiredVcpus(2)\n                .bidPercentage(100)\n                .type(\"EC2\")\n                .build())\n            .type(\"MANAGED\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  bce:\n    type: duplocloud:AwsBatchComputeEnvironment\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: sample\n      computeResources:\n        ec2Configuration:\n          imageType: ECS_AL2\n        instanceTypes:\n          - optimal\n        allocationStrategy: BEST_FIT\n        maxVcpus: 8\n        minVcpus: 1\n        desiredVcpus: 2\n        bidPercentage: 100\n        type: EC2\n      type: MANAGED\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS Batch Compute Environment\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the short name of compute environment\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsBatchComputeEnvironment:AwsBatchComputeEnvironment bce *TENANT_ID*/*NAME*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The Amazon Resource Name of the compute environment.\n"
                },
                "computeResources": {
                    "$ref": "#/types/duplocloud:index/AwsBatchComputeEnvironmentComputeResources:AwsBatchComputeEnvironmentComputeResources",
                    "description": "Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments.\n"
                },
                "ecsClusterArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the compute environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the compute environment.\n"
                },
                "serviceRole": {
                    "type": "string",
                    "description": "The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Compute environment must be created in `ENABLED` state. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the compute environment (for example, CREATING or VALID).\n"
                },
                "statusReason": {
                    "type": "string",
                    "description": "A short, human-readable string to provide additional details about the current status of the compute environment.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws batch compute environment will be created in.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the compute environment. Valid items are `MANAGED` or `UNMANAGED`.\n"
                },
                "waitForDeployment": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                }
            },
            "required": [
                "arn",
                "ecsClusterArn",
                "fullname",
                "name",
                "serviceRole",
                "status",
                "statusReason",
                "tags",
                "tenantId",
                "type"
            ],
            "inputProperties": {
                "computeResources": {
                    "$ref": "#/types/duplocloud:index/AwsBatchComputeEnvironmentComputeResources:AwsBatchComputeEnvironmentComputeResources",
                    "description": "Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the compute environment.\n",
                    "willReplaceOnChanges": true
                },
                "serviceRole": {
                    "type": "string",
                    "description": "The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Compute environment must be created in `ENABLED` state. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws batch compute environment will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the compute environment. Valid items are `MANAGED` or `UNMANAGED`.\n",
                    "willReplaceOnChanges": true
                },
                "waitForDeployment": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "tenantId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsBatchComputeEnvironment resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The Amazon Resource Name of the compute environment.\n"
                    },
                    "computeResources": {
                        "$ref": "#/types/duplocloud:index/AwsBatchComputeEnvironmentComputeResources:AwsBatchComputeEnvironmentComputeResources",
                        "description": "Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments.\n",
                        "willReplaceOnChanges": true
                    },
                    "ecsClusterArn": {
                        "type": "string",
                        "description": "The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the compute environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the compute environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceRole": {
                        "type": "string",
                        "description": "The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Compute environment must be created in `ENABLED` state. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the compute environment (for example, CREATING or VALID).\n"
                    },
                    "statusReason": {
                        "type": "string",
                        "description": "A short, human-readable string to provide additional details about the current status of the compute environment.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the aws batch compute environment will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the compute environment. Valid items are `MANAGED` or `UNMANAGED`.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForDeployment": {
                        "type": "boolean",
                        "description": "Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsBatchJobDefinition:AwsBatchJobDefinition": {
            "description": "`duplocloud.AwsBatchJobDefinition` manages an aws batch Job Definition in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenantId = \"d186700c-ad18-4525-9593-aad467c843ff\";\nconst jd = new duplocloud.AwsBatchJobDefinition(\"jd\", {\n    tenantId: tenantId,\n    name: \"tf_test_batch_job_definition\",\n    type: \"container\",\n    platformCapabilities: [\"EC2\"],\n    retryStrategy: {\n        attempts: 2,\n        evaluateOnExits: [{\n            action: \"EXIT\",\n            onExitCode: \"1*\",\n            onReason: \"reason*\",\n            onStatusReason: \"status\",\n        }],\n    },\n    timeout: {\n        attemptDurationSeconds: 60,\n    },\n    containerProperties: `  {\n        \"Command\": [\n            \"sleep\",\n            \"5\"\n        ],\n        \"Image\": \"amazonlinux\",\n        \"ResourceRequirements\": [\n            {\n                \"Type\": { \"Value\": \"MEMORY\" },\n                \"Value\": \"2048\"\n            },\n            {\n                \"Type\":  { \"Value\": \"VCPU\" },\n                \"Value\": \"1\"\n            },\n            {\n                \"Type\":  { \"Value\": \"GPU\" },\n                \"Value\": \"2\"\n            }\n        ]\n  }\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant_id = \"d186700c-ad18-4525-9593-aad467c843ff\"\njd = duplocloud.AwsBatchJobDefinition(\"jd\",\n    tenant_id=tenant_id,\n    name=\"tf_test_batch_job_definition\",\n    type=\"container\",\n    platform_capabilities=[\"EC2\"],\n    retry_strategy={\n        \"attempts\": 2,\n        \"evaluate_on_exits\": [{\n            \"action\": \"EXIT\",\n            \"on_exit_code\": \"1*\",\n            \"on_reason\": \"reason*\",\n            \"on_status_reason\": \"status\",\n        }],\n    },\n    timeout={\n        \"attempt_duration_seconds\": 60,\n    },\n    container_properties=\"\"\"  {\n        \"Command\": [\n            \"sleep\",\n            \"5\"\n        ],\n        \"Image\": \"amazonlinux\",\n        \"ResourceRequirements\": [\n            {\n                \"Type\": { \"Value\": \"MEMORY\" },\n                \"Value\": \"2048\"\n            },\n            {\n                \"Type\":  { \"Value\": \"VCPU\" },\n                \"Value\": \"1\"\n            },\n            {\n                \"Type\":  { \"Value\": \"GPU\" },\n                \"Value\": \"2\"\n            }\n        ]\n  }\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenantId = \"d186700c-ad18-4525-9593-aad467c843ff\";\n\n    var jd = new Duplocloud.AwsBatchJobDefinition(\"jd\", new()\n    {\n        TenantId = tenantId,\n        Name = \"tf_test_batch_job_definition\",\n        Type = \"container\",\n        PlatformCapabilities = new[]\n        {\n            \"EC2\",\n        },\n        RetryStrategy = new Duplocloud.Inputs.AwsBatchJobDefinitionRetryStrategyArgs\n        {\n            Attempts = 2,\n            EvaluateOnExits = new[]\n            {\n                new Duplocloud.Inputs.AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArgs\n                {\n                    Action = \"EXIT\",\n                    OnExitCode = \"1*\",\n                    OnReason = \"reason*\",\n                    OnStatusReason = \"status\",\n                },\n            },\n        },\n        Timeout = new Duplocloud.Inputs.AwsBatchJobDefinitionTimeoutArgs\n        {\n            AttemptDurationSeconds = 60,\n        },\n        ContainerProperties = @\"  {\n        \"\"Command\"\": [\n            \"\"sleep\"\",\n            \"\"5\"\"\n        ],\n        \"\"Image\"\": \"\"amazonlinux\"\",\n        \"\"ResourceRequirements\"\": [\n            {\n                \"\"Type\"\": { \"\"Value\"\": \"\"MEMORY\"\" },\n                \"\"Value\"\": \"\"2048\"\"\n            },\n            {\n                \"\"Type\"\":  { \"\"Value\"\": \"\"VCPU\"\" },\n                \"\"Value\"\": \"\"1\"\"\n            },\n            {\n                \"\"Type\"\":  { \"\"Value\"\": \"\"GPU\"\" },\n                \"\"Value\"\": \"\"2\"\"\n            }\n        ]\n  }\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenantId := \"d186700c-ad18-4525-9593-aad467c843ff\"\n\t\t_, err := duplocloud.NewAwsBatchJobDefinition(ctx, \"jd\", \u0026duplocloud.AwsBatchJobDefinitionArgs{\n\t\t\tTenantId: pulumi.String(tenantId),\n\t\t\tName:     pulumi.String(\"tf_test_batch_job_definition\"),\n\t\t\tType:     pulumi.String(\"container\"),\n\t\t\tPlatformCapabilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"EC2\"),\n\t\t\t},\n\t\t\tRetryStrategy: \u0026duplocloud.AwsBatchJobDefinitionRetryStrategyArgs{\n\t\t\t\tAttempts: pulumi.Int(2),\n\t\t\t\tEvaluateOnExits: duplocloud.AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArray{\n\t\t\t\t\t\u0026duplocloud.AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArgs{\n\t\t\t\t\t\tAction:         pulumi.String(\"EXIT\"),\n\t\t\t\t\t\tOnExitCode:     pulumi.String(\"1*\"),\n\t\t\t\t\t\tOnReason:       pulumi.String(\"reason*\"),\n\t\t\t\t\t\tOnStatusReason: pulumi.String(\"status\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTimeout: \u0026duplocloud.AwsBatchJobDefinitionTimeoutArgs{\n\t\t\t\tAttemptDurationSeconds: pulumi.Int(60),\n\t\t\t},\n\t\t\tContainerProperties: pulumi.String(`  {\n        \"Command\": [\n            \"sleep\",\n            \"5\"\n        ],\n        \"Image\": \"amazonlinux\",\n        \"ResourceRequirements\": [\n            {\n                \"Type\": { \"Value\": \"MEMORY\" },\n                \"Value\": \"2048\"\n            },\n            {\n                \"Type\":  { \"Value\": \"VCPU\" },\n                \"Value\": \"1\"\n            },\n            {\n                \"Type\":  { \"Value\": \"GPU\" },\n                \"Value\": \"2\"\n            }\n        ]\n  }\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.AwsBatchJobDefinition;\nimport com.pulumi.duplocloud.AwsBatchJobDefinitionArgs;\nimport com.pulumi.duplocloud.inputs.AwsBatchJobDefinitionRetryStrategyArgs;\nimport com.pulumi.duplocloud.inputs.AwsBatchJobDefinitionTimeoutArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tenantId = \"d186700c-ad18-4525-9593-aad467c843ff\";\n\n        var jd = new AwsBatchJobDefinition(\"jd\", AwsBatchJobDefinitionArgs.builder()\n            .tenantId(tenantId)\n            .name(\"tf_test_batch_job_definition\")\n            .type(\"container\")\n            .platformCapabilities(\"EC2\")\n            .retryStrategy(AwsBatchJobDefinitionRetryStrategyArgs.builder()\n                .attempts(2)\n                .evaluateOnExits(AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArgs.builder()\n                    .action(\"EXIT\")\n                    .onExitCode(\"1*\")\n                    .onReason(\"reason*\")\n                    .onStatusReason(\"status\")\n                    .build())\n                .build())\n            .timeout(AwsBatchJobDefinitionTimeoutArgs.builder()\n                .attemptDurationSeconds(60)\n                .build())\n            .containerProperties(\"\"\"\n  {\n        \"Command\": [\n            \"sleep\",\n            \"5\"\n        ],\n        \"Image\": \"amazonlinux\",\n        \"ResourceRequirements\": [\n            {\n                \"Type\": { \"Value\": \"MEMORY\" },\n                \"Value\": \"2048\"\n            },\n            {\n                \"Type\":  { \"Value\": \"VCPU\" },\n                \"Value\": \"1\"\n            },\n            {\n                \"Type\":  { \"Value\": \"GPU\" },\n                \"Value\": \"2\"\n            }\n        ]\n  }\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  jd:\n    type: duplocloud:AwsBatchJobDefinition\n    properties:\n      tenantId: ${tenantId}\n      name: tf_test_batch_job_definition\n      type: container\n      platformCapabilities:\n        - EC2\n      retryStrategy:\n        attempts: 2\n        evaluateOnExits:\n          - action: EXIT\n            onExitCode: 1*\n            onReason: reason*\n            onStatusReason: status\n      timeout:\n        attemptDurationSeconds: 60\n      containerProperties: |2\n          {\n                \"Command\": [\n                    \"sleep\",\n                    \"5\"\n                ],\n                \"Image\": \"amazonlinux\",\n                \"ResourceRequirements\": [\n                    {\n                        \"Type\": { \"Value\": \"MEMORY\" },\n                        \"Value\": \"2048\"\n                    },\n                    {\n                        \"Type\":  { \"Value\": \"VCPU\" },\n                        \"Value\": \"1\"\n                    },\n                    {\n                        \"Type\":  { \"Value\": \"GPU\" },\n                        \"Value\": \"2\"\n                    }\n                ]\n          }\nvariables:\n  tenantId: d186700c-ad18-4525-9593-aad467c843ff\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS Batch Job Definition\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the short name of Job Definition\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsBatchJobDefinition:AwsBatchJobDefinition jd *TENANT_ID*/*NAME*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The Amazon Resource Name of the Job Definition.\n"
                },
                "containerProperties": {
                    "type": "string",
                    "description": "A valid container properties provided as a single valid JSON document. This parameter is required if the type parameter is `container`.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the Job Definition.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Job Definition.\n"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies the parameter substitution placeholders to set in the job definition.\n"
                },
                "platformCapabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.\n"
                },
                "retryStrategy": {
                    "$ref": "#/types/duplocloud:index/AwsBatchJobDefinitionRetryStrategy:AwsBatchJobDefinitionRetryStrategy",
                    "description": "Specifies the retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of `retry_strategy` is `1`.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "The revision of the job definition.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Job Definition.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws batch Job Definition will be created in.\n"
                },
                "timeout": {
                    "$ref": "#/types/duplocloud:index/AwsBatchJobDefinitionTimeout:AwsBatchJobDefinitionTimeout",
                    "description": "Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The `type` of job definition. Must be `container`.\n"
                }
            },
            "required": [
                "arn",
                "containerProperties",
                "fullname",
                "name",
                "revision",
                "status",
                "tags",
                "tenantId",
                "type"
            ],
            "inputProperties": {
                "containerProperties": {
                    "type": "string",
                    "description": "A valid container properties provided as a single valid JSON document. This parameter is required if the type parameter is `container`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Job Definition.\n",
                    "willReplaceOnChanges": true
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies the parameter substitution placeholders to set in the job definition.\n",
                    "willReplaceOnChanges": true
                },
                "platformCapabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.\n",
                    "willReplaceOnChanges": true
                },
                "retryStrategy": {
                    "$ref": "#/types/duplocloud:index/AwsBatchJobDefinitionRetryStrategy:AwsBatchJobDefinitionRetryStrategy",
                    "description": "Specifies the retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of `retry_strategy` is `1`.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws batch Job Definition will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "timeout": {
                    "$ref": "#/types/duplocloud:index/AwsBatchJobDefinitionTimeout:AwsBatchJobDefinitionTimeout",
                    "description": "Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The `type` of job definition. Must be `container`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsBatchJobDefinition resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The Amazon Resource Name of the Job Definition.\n"
                    },
                    "containerProperties": {
                        "type": "string",
                        "description": "A valid container properties provided as a single valid JSON document. This parameter is required if the type parameter is `container`.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the Job Definition.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the Job Definition.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specifies the parameter substitution placeholders to set in the job definition.\n",
                        "willReplaceOnChanges": true
                    },
                    "platformCapabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "retryStrategy": {
                        "$ref": "#/types/duplocloud:index/AwsBatchJobDefinitionRetryStrategy:AwsBatchJobDefinitionRetryStrategy",
                        "description": "Specifies the retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of `retry_strategy` is `1`.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "The revision of the job definition.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Job Definition.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the aws batch Job Definition will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "timeout": {
                        "$ref": "#/types/duplocloud:index/AwsBatchJobDefinitionTimeout:AwsBatchJobDefinitionTimeout",
                        "description": "Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The `type` of job definition. Must be `container`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsBatchJobQueue:AwsBatchJobQueue": {
            "description": "`duplocloud.AwsBatchJobQueue` manages an aws batch Job queue in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenantId = \"d186700c-ad18-4525-9593-aad467c843ff\";\nconst bsp = new duplocloud.AwsBatchSchedulingPolicy(\"bsp\", {\n    tenantId: tenantId,\n    name: \"rtt\",\n    fairSharePolicy: {\n        computeReservation: 2,\n        shareDecaySeconds: 3600,\n        shareDistributions: [\n            {\n                shareIdentifier: \"A1*\",\n                weightFactor: 0.1,\n            },\n            {\n                shareIdentifier: \"A2\",\n                weightFactor: 0.2,\n            },\n        ],\n    },\n    tags: {\n        Name: \"Example Batch Scheduling Policy\",\n    },\n});\nconst bce = new duplocloud.AwsBatchComputeEnvironment(\"bce\", {\n    tenantId: tenantId,\n    name: \"sample\",\n    computeResources: {\n        ec2Configuration: {\n            imageType: \"ECS_AL2\",\n        },\n        instanceTypes: [\"optimal\"],\n        allocationStrategy: \"BEST_FIT\",\n        maxVcpus: 8,\n        minVcpus: 1,\n        desiredVcpus: 2,\n        bidPercentage: 100,\n        type: \"EC2\",\n    },\n    type: \"MANAGED\",\n});\nconst jq = new duplocloud.AwsBatchJobQueue(\"jq\", {\n    tenantId: tenantId,\n    name: \"tf_job_queue\",\n    schedulingPolicyArn: bsp.arn,\n    state: \"ENABLED\",\n    priority: 1,\n    computeEnvironments: [bce.arn],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant_id = \"d186700c-ad18-4525-9593-aad467c843ff\"\nbsp = duplocloud.AwsBatchSchedulingPolicy(\"bsp\",\n    tenant_id=tenant_id,\n    name=\"rtt\",\n    fair_share_policy={\n        \"compute_reservation\": 2,\n        \"share_decay_seconds\": 3600,\n        \"share_distributions\": [\n            {\n                \"share_identifier\": \"A1*\",\n                \"weight_factor\": 0.1,\n            },\n            {\n                \"share_identifier\": \"A2\",\n                \"weight_factor\": 0.2,\n            },\n        ],\n    },\n    tags={\n        \"Name\": \"Example Batch Scheduling Policy\",\n    })\nbce = duplocloud.AwsBatchComputeEnvironment(\"bce\",\n    tenant_id=tenant_id,\n    name=\"sample\",\n    compute_resources={\n        \"ec2_configuration\": {\n            \"image_type\": \"ECS_AL2\",\n        },\n        \"instance_types\": [\"optimal\"],\n        \"allocation_strategy\": \"BEST_FIT\",\n        \"max_vcpus\": 8,\n        \"min_vcpus\": 1,\n        \"desired_vcpus\": 2,\n        \"bid_percentage\": 100,\n        \"type\": \"EC2\",\n    },\n    type=\"MANAGED\")\njq = duplocloud.AwsBatchJobQueue(\"jq\",\n    tenant_id=tenant_id,\n    name=\"tf_job_queue\",\n    scheduling_policy_arn=bsp.arn,\n    state=\"ENABLED\",\n    priority=1,\n    compute_environments=[bce.arn])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenantId = \"d186700c-ad18-4525-9593-aad467c843ff\";\n\n    var bsp = new Duplocloud.AwsBatchSchedulingPolicy(\"bsp\", new()\n    {\n        TenantId = tenantId,\n        Name = \"rtt\",\n        FairSharePolicy = new Duplocloud.Inputs.AwsBatchSchedulingPolicyFairSharePolicyArgs\n        {\n            ComputeReservation = 2,\n            ShareDecaySeconds = 3600,\n            ShareDistributions = new[]\n            {\n                new Duplocloud.Inputs.AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs\n                {\n                    ShareIdentifier = \"A1*\",\n                    WeightFactor = 0.1,\n                },\n                new Duplocloud.Inputs.AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs\n                {\n                    ShareIdentifier = \"A2\",\n                    WeightFactor = 0.2,\n                },\n            },\n        },\n        Tags = \n        {\n            { \"Name\", \"Example Batch Scheduling Policy\" },\n        },\n    });\n\n    var bce = new Duplocloud.AwsBatchComputeEnvironment(\"bce\", new()\n    {\n        TenantId = tenantId,\n        Name = \"sample\",\n        ComputeResources = new Duplocloud.Inputs.AwsBatchComputeEnvironmentComputeResourcesArgs\n        {\n            Ec2Configuration = new Duplocloud.Inputs.AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgs\n            {\n                ImageType = \"ECS_AL2\",\n            },\n            InstanceTypes = new[]\n            {\n                \"optimal\",\n            },\n            AllocationStrategy = \"BEST_FIT\",\n            MaxVcpus = 8,\n            MinVcpus = 1,\n            DesiredVcpus = 2,\n            BidPercentage = 100,\n            Type = \"EC2\",\n        },\n        Type = \"MANAGED\",\n    });\n\n    var jq = new Duplocloud.AwsBatchJobQueue(\"jq\", new()\n    {\n        TenantId = tenantId,\n        Name = \"tf_job_queue\",\n        SchedulingPolicyArn = bsp.Arn,\n        State = \"ENABLED\",\n        Priority = 1,\n        ComputeEnvironments = new[]\n        {\n            bce.Arn,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenantId := \"d186700c-ad18-4525-9593-aad467c843ff\"\n\t\tbsp, err := duplocloud.NewAwsBatchSchedulingPolicy(ctx, \"bsp\", \u0026duplocloud.AwsBatchSchedulingPolicyArgs{\n\t\t\tTenantId: pulumi.String(tenantId),\n\t\t\tName:     pulumi.String(\"rtt\"),\n\t\t\tFairSharePolicy: \u0026duplocloud.AwsBatchSchedulingPolicyFairSharePolicyArgs{\n\t\t\t\tComputeReservation: pulumi.Int(2),\n\t\t\t\tShareDecaySeconds:  pulumi.Int(3600),\n\t\t\t\tShareDistributions: duplocloud.AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArray{\n\t\t\t\t\t\u0026duplocloud.AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs{\n\t\t\t\t\t\tShareIdentifier: pulumi.String(\"A1*\"),\n\t\t\t\t\t\tWeightFactor:    pulumi.Float64(0.1),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026duplocloud.AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs{\n\t\t\t\t\t\tShareIdentifier: pulumi.String(\"A2\"),\n\t\t\t\t\t\tWeightFactor:    pulumi.Float64(0.2),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"Name\": pulumi.String(\"Example Batch Scheduling Policy\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbce, err := duplocloud.NewAwsBatchComputeEnvironment(ctx, \"bce\", \u0026duplocloud.AwsBatchComputeEnvironmentArgs{\n\t\t\tTenantId: pulumi.String(tenantId),\n\t\t\tName:     pulumi.String(\"sample\"),\n\t\t\tComputeResources: \u0026duplocloud.AwsBatchComputeEnvironmentComputeResourcesArgs{\n\t\t\t\tEc2Configuration: \u0026duplocloud.AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgs{\n\t\t\t\t\tImageType: pulumi.String(\"ECS_AL2\"),\n\t\t\t\t},\n\t\t\t\tInstanceTypes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"optimal\"),\n\t\t\t\t},\n\t\t\t\tAllocationStrategy: pulumi.String(\"BEST_FIT\"),\n\t\t\t\tMaxVcpus:           pulumi.Int(8),\n\t\t\t\tMinVcpus:           pulumi.Int(1),\n\t\t\t\tDesiredVcpus:       pulumi.Int(2),\n\t\t\t\tBidPercentage:      pulumi.Int(100),\n\t\t\t\tType:               pulumi.String(\"EC2\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"MANAGED\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsBatchJobQueue(ctx, \"jq\", \u0026duplocloud.AwsBatchJobQueueArgs{\n\t\t\tTenantId:            pulumi.String(tenantId),\n\t\t\tName:                pulumi.String(\"tf_job_queue\"),\n\t\t\tSchedulingPolicyArn: bsp.Arn,\n\t\t\tState:               pulumi.String(\"ENABLED\"),\n\t\t\tPriority:            pulumi.Int(1),\n\t\t\tComputeEnvironments: pulumi.StringArray{\n\t\t\t\tbce.Arn,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.AwsBatchSchedulingPolicy;\nimport com.pulumi.duplocloud.AwsBatchSchedulingPolicyArgs;\nimport com.pulumi.duplocloud.inputs.AwsBatchSchedulingPolicyFairSharePolicyArgs;\nimport com.pulumi.duplocloud.AwsBatchComputeEnvironment;\nimport com.pulumi.duplocloud.AwsBatchComputeEnvironmentArgs;\nimport com.pulumi.duplocloud.inputs.AwsBatchComputeEnvironmentComputeResourcesArgs;\nimport com.pulumi.duplocloud.inputs.AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgs;\nimport com.pulumi.duplocloud.AwsBatchJobQueue;\nimport com.pulumi.duplocloud.AwsBatchJobQueueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tenantId = \"d186700c-ad18-4525-9593-aad467c843ff\";\n\n        var bsp = new AwsBatchSchedulingPolicy(\"bsp\", AwsBatchSchedulingPolicyArgs.builder()\n            .tenantId(tenantId)\n            .name(\"rtt\")\n            .fairSharePolicy(AwsBatchSchedulingPolicyFairSharePolicyArgs.builder()\n                .computeReservation(2)\n                .shareDecaySeconds(3600)\n                .shareDistributions(                \n                    AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs.builder()\n                        .shareIdentifier(\"A1*\")\n                        .weightFactor(0.1)\n                        .build(),\n                    AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs.builder()\n                        .shareIdentifier(\"A2\")\n                        .weightFactor(0.2)\n                        .build())\n                .build())\n            .tags(Map.of(\"Name\", \"Example Batch Scheduling Policy\"))\n            .build());\n\n        var bce = new AwsBatchComputeEnvironment(\"bce\", AwsBatchComputeEnvironmentArgs.builder()\n            .tenantId(tenantId)\n            .name(\"sample\")\n            .computeResources(AwsBatchComputeEnvironmentComputeResourcesArgs.builder()\n                .ec2Configuration(AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgs.builder()\n                    .imageType(\"ECS_AL2\")\n                    .build())\n                .instanceTypes(\"optimal\")\n                .allocationStrategy(\"BEST_FIT\")\n                .maxVcpus(8)\n                .minVcpus(1)\n                .desiredVcpus(2)\n                .bidPercentage(100)\n                .type(\"EC2\")\n                .build())\n            .type(\"MANAGED\")\n            .build());\n\n        var jq = new AwsBatchJobQueue(\"jq\", AwsBatchJobQueueArgs.builder()\n            .tenantId(tenantId)\n            .name(\"tf_job_queue\")\n            .schedulingPolicyArn(bsp.arn())\n            .state(\"ENABLED\")\n            .priority(1)\n            .computeEnvironments(bce.arn())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bsp:\n    type: duplocloud:AwsBatchSchedulingPolicy\n    properties:\n      tenantId: ${tenantId}\n      name: rtt\n      fairSharePolicy:\n        computeReservation: 2\n        shareDecaySeconds: 3600\n        shareDistributions:\n          - shareIdentifier: A1*\n            weightFactor: 0.1\n          - shareIdentifier: A2\n            weightFactor: 0.2\n      tags:\n        Name: Example Batch Scheduling Policy\n  bce:\n    type: duplocloud:AwsBatchComputeEnvironment\n    properties:\n      tenantId: ${tenantId}\n      name: sample\n      computeResources:\n        ec2Configuration:\n          imageType: ECS_AL2\n        instanceTypes:\n          - optimal\n        allocationStrategy: BEST_FIT\n        maxVcpus: 8\n        minVcpus: 1\n        desiredVcpus: 2\n        bidPercentage: 100\n        type: EC2\n      type: MANAGED\n  jq:\n    type: duplocloud:AwsBatchJobQueue\n    properties:\n      tenantId: ${tenantId}\n      name: tf_job_queue\n      schedulingPolicyArn: ${bsp.arn}\n      state: ENABLED\n      priority: 1\n      computeEnvironments:\n        - ${bce.arn}\nvariables:\n  tenantId: d186700c-ad18-4525-9593-aad467c843ff\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS Batch Job Queue\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the short name of Job Queue\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsBatchJobQueue:AwsBatchJobQueue jq *TENANT_ID*/*NAME*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The Amazon Resource Name of the Job queue.\n"
                },
                "computeEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the set of compute environments mapped to a job queue and their order. The position of the compute environments in the list will dictate the order.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the Job queue.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Job queue.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the job queue. Job queues with a higher priority are evaluated first when associated with the same compute environment.\n"
                },
                "schedulingPolicyArn": {
                    "type": "string",
                    "description": "The ARN of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn't specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can't remove the fair share scheduling policy.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the job queue. Must be one of: `ENABLED` or `DISABLED`\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws batch Job queue will be created in.\n"
                },
                "waitForDeployment": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                }
            },
            "required": [
                "arn",
                "computeEnvironments",
                "fullname",
                "name",
                "priority",
                "schedulingPolicyArn",
                "state",
                "tags",
                "tenantId"
            ],
            "inputProperties": {
                "computeEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the set of compute environments mapped to a job queue and their order. The position of the compute environments in the list will dictate the order.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Job queue.\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the job queue. Job queues with a higher priority are evaluated first when associated with the same compute environment.\n"
                },
                "schedulingPolicyArn": {
                    "type": "string",
                    "description": "The ARN of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn't specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can't remove the fair share scheduling policy.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the job queue. Must be one of: `ENABLED` or `DISABLED`\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws batch Job queue will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "waitForDeployment": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "computeEnvironments",
                "priority",
                "state",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsBatchJobQueue resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The Amazon Resource Name of the Job queue.\n"
                    },
                    "computeEnvironments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the set of compute environments mapped to a job queue and their order. The position of the compute environments in the list will dictate the order.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the Job queue.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the Job queue.\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority of the job queue. Job queues with a higher priority are evaluated first when associated with the same compute environment.\n"
                    },
                    "schedulingPolicyArn": {
                        "type": "string",
                        "description": "The ARN of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn't specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can't remove the fair share scheduling policy.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the job queue. Must be one of: `ENABLED` or `DISABLED`\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the aws batch Job queue will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForDeployment": {
                        "type": "boolean",
                        "description": "Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsBatchSchedulingPolicy:AwsBatchSchedulingPolicy": {
            "description": "`duplocloud.AwsBatchSchedulingPolicy` manages an aws batch scheduling policy in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst bsp = new duplocloud.AwsBatchSchedulingPolicy(\"bsp\", {\n    tenantId: myapp.tenantId,\n    name: \"test\",\n    fairSharePolicy: {\n        computeReservation: 1,\n        shareDecaySeconds: 3600,\n        shareDistributions: [\n            {\n                shareIdentifier: \"A1*\",\n                weightFactor: 0.1,\n            },\n            {\n                shareIdentifier: \"A2\",\n                weightFactor: 0.2,\n            },\n        ],\n    },\n    tags: {\n        Name: \"Example Batch Scheduling Policy\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nbsp = duplocloud.AwsBatchSchedulingPolicy(\"bsp\",\n    tenant_id=myapp.tenant_id,\n    name=\"test\",\n    fair_share_policy={\n        \"compute_reservation\": 1,\n        \"share_decay_seconds\": 3600,\n        \"share_distributions\": [\n            {\n                \"share_identifier\": \"A1*\",\n                \"weight_factor\": 0.1,\n            },\n            {\n                \"share_identifier\": \"A2\",\n                \"weight_factor\": 0.2,\n            },\n        ],\n    },\n    tags={\n        \"Name\": \"Example Batch Scheduling Policy\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var bsp = new Duplocloud.AwsBatchSchedulingPolicy(\"bsp\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"test\",\n        FairSharePolicy = new Duplocloud.Inputs.AwsBatchSchedulingPolicyFairSharePolicyArgs\n        {\n            ComputeReservation = 1,\n            ShareDecaySeconds = 3600,\n            ShareDistributions = new[]\n            {\n                new Duplocloud.Inputs.AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs\n                {\n                    ShareIdentifier = \"A1*\",\n                    WeightFactor = 0.1,\n                },\n                new Duplocloud.Inputs.AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs\n                {\n                    ShareIdentifier = \"A2\",\n                    WeightFactor = 0.2,\n                },\n            },\n        },\n        Tags = \n        {\n            { \"Name\", \"Example Batch Scheduling Policy\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsBatchSchedulingPolicy(ctx, \"bsp\", \u0026duplocloud.AwsBatchSchedulingPolicyArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tName:     pulumi.String(\"test\"),\n\t\t\tFairSharePolicy: \u0026duplocloud.AwsBatchSchedulingPolicyFairSharePolicyArgs{\n\t\t\t\tComputeReservation: pulumi.Int(1),\n\t\t\t\tShareDecaySeconds:  pulumi.Int(3600),\n\t\t\t\tShareDistributions: duplocloud.AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArray{\n\t\t\t\t\t\u0026duplocloud.AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs{\n\t\t\t\t\t\tShareIdentifier: pulumi.String(\"A1*\"),\n\t\t\t\t\t\tWeightFactor:    pulumi.Float64(0.1),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026duplocloud.AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs{\n\t\t\t\t\t\tShareIdentifier: pulumi.String(\"A2\"),\n\t\t\t\t\t\tWeightFactor:    pulumi.Float64(0.2),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"Name\": pulumi.String(\"Example Batch Scheduling Policy\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsBatchSchedulingPolicy;\nimport com.pulumi.duplocloud.AwsBatchSchedulingPolicyArgs;\nimport com.pulumi.duplocloud.inputs.AwsBatchSchedulingPolicyFairSharePolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var bsp = new AwsBatchSchedulingPolicy(\"bsp\", AwsBatchSchedulingPolicyArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"test\")\n            .fairSharePolicy(AwsBatchSchedulingPolicyFairSharePolicyArgs.builder()\n                .computeReservation(1)\n                .shareDecaySeconds(3600)\n                .shareDistributions(                \n                    AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs.builder()\n                        .shareIdentifier(\"A1*\")\n                        .weightFactor(0.1)\n                        .build(),\n                    AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs.builder()\n                        .shareIdentifier(\"A2\")\n                        .weightFactor(0.2)\n                        .build())\n                .build())\n            .tags(Map.of(\"Name\", \"Example Batch Scheduling Policy\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  bsp:\n    type: duplocloud:AwsBatchSchedulingPolicy\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: test\n      fairSharePolicy:\n        computeReservation: 1\n        shareDecaySeconds: 3600\n        shareDistributions:\n          - shareIdentifier: A1*\n            weightFactor: 0.1\n          - shareIdentifier: A2\n            weightFactor: 0.2\n      tags:\n        Name: Example Batch Scheduling Policy\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS Batch Scheduling Policy\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the short name of Scheduling Policy\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsBatchSchedulingPolicy:AwsBatchSchedulingPolicy bsp *TENANT_ID*/*NAME*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The Amazon Resource Name of the scheduling policy.\n"
                },
                "fairSharePolicy": {
                    "$ref": "#/types/duplocloud:index/AwsBatchSchedulingPolicyFairSharePolicy:AwsBatchSchedulingPolicyFairSharePolicy",
                    "description": "A fairshare policy block specifies the `compute_reservation`, `share_delay_seconds`, and `share_distribution` of the scheduling policy. The `fairshare_policy block` is documented below.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the scheduling policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the scheduling policy.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws batch scheduling policy will be created in.\n"
                }
            },
            "required": [
                "arn",
                "fairSharePolicy",
                "fullname",
                "name",
                "tags",
                "tenantId"
            ],
            "inputProperties": {
                "fairSharePolicy": {
                    "$ref": "#/types/duplocloud:index/AwsBatchSchedulingPolicyFairSharePolicy:AwsBatchSchedulingPolicyFairSharePolicy",
                    "description": "A fairshare policy block specifies the `compute_reservation`, `share_delay_seconds`, and `share_distribution` of the scheduling policy. The `fairshare_policy block` is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the scheduling policy.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws batch scheduling policy will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsBatchSchedulingPolicy resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The Amazon Resource Name of the scheduling policy.\n"
                    },
                    "fairSharePolicy": {
                        "$ref": "#/types/duplocloud:index/AwsBatchSchedulingPolicyFairSharePolicy:AwsBatchSchedulingPolicyFairSharePolicy",
                        "description": "A fairshare policy block specifies the `compute_reservation`, `share_delay_seconds`, and `share_distribution` of the scheduling policy. The `fairshare_policy block` is documented below.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the scheduling policy.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the scheduling policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the aws batch scheduling policy will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsCloudfrontDistribution:AwsCloudfrontDistribution": {
            "description": "`duplocloud.AwsCloudfrontDistribution` manages an aws cloudfront distribution in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst duplo_app = new duplocloud.Tenant(\"duplo-app\", {\n    accountName: \"duplo-app\",\n    planId: \"default\",\n});\nconst cfd = new duplocloud.AwsCloudfrontDistribution(\"cfd\", {\n    tenantId: duplo_app.tenantId,\n    comment: \"duploservices-dev01-app\",\n    defaultRootObject: \"index.html\",\n    enabled: true,\n    httpVersion: \"http2\",\n    isIpv6Enabled: true,\n    aliases: [\"app-dev.abc.xyz\"],\n    priceClass: \"PriceClass_All\",\n    waitForDeployment: true,\n    origins: [\n        {\n            domainName: \"pa-api-dev01.abc.xyz\",\n            originId: \"pa-api-dev01.abc.xyz\",\n            connectionAttempts: 3,\n            connectionTimeout: 10,\n            customOriginConfig: {\n                httpPort: 80,\n                httpsPort: 443,\n                originKeepaliveTimeout: 30,\n                originReadTimeout: 30,\n                originProtocolPolicy: \"https-only\",\n                originSslProtocols: [\"TLSv1.2\"],\n            },\n        },\n        {\n            domainName: \"duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\",\n            originId: \"duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\",\n            connectionAttempts: 3,\n            connectionTimeout: 10,\n        },\n    ],\n    defaultCacheBehavior: {\n        allowedMethods: [\n            \"GET\",\n            \"HEAD\",\n        ],\n        cachedMethods: [\n            \"GET\",\n            \"HEAD\",\n        ],\n        targetOriginId: \"duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\",\n        compress: false,\n        viewerProtocolPolicy: \"redirect-to-https\",\n        minTtl: 0,\n        defaultTtl: 0,\n        maxTtl: 0,\n    },\n    orderedCacheBehaviors: [{\n        allowedMethods: [\n            \"GET\",\n            \"HEAD\",\n        ],\n        cachedMethods: [\n            \"GET\",\n            \"HEAD\",\n        ],\n        targetOriginId: \"pa-api-dev01.abc.xyz\",\n        compress: false,\n        viewerProtocolPolicy: \"redirect-to-https\",\n        minTtl: 0,\n        defaultTtl: 0,\n        maxTtl: 0,\n        pathPattern: \"/api/*\",\n    }],\n    viewerCertificate: {\n        acmCertificateArn: \"arn:aws:acm:us-east-1:1234567890:certificate/49c7a151-14b1-486e-801f-cf6bc9a43804\",\n        minimumProtocolVersion: \"TLSv1.2_2019\",\n        sslSupportMethod: \"sni-only\",\n    },\n    restrictions: {\n        geoRestriction: {\n            restrictionType: \"none\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nduplo_app = duplocloud.Tenant(\"duplo-app\",\n    account_name=\"duplo-app\",\n    plan_id=\"default\")\ncfd = duplocloud.AwsCloudfrontDistribution(\"cfd\",\n    tenant_id=duplo_app.tenant_id,\n    comment=\"duploservices-dev01-app\",\n    default_root_object=\"index.html\",\n    enabled=True,\n    http_version=\"http2\",\n    is_ipv6_enabled=True,\n    aliases=[\"app-dev.abc.xyz\"],\n    price_class=\"PriceClass_All\",\n    wait_for_deployment=True,\n    origins=[\n        {\n            \"domain_name\": \"pa-api-dev01.abc.xyz\",\n            \"origin_id\": \"pa-api-dev01.abc.xyz\",\n            \"connection_attempts\": 3,\n            \"connection_timeout\": 10,\n            \"custom_origin_config\": {\n                \"http_port\": 80,\n                \"https_port\": 443,\n                \"origin_keepalive_timeout\": 30,\n                \"origin_read_timeout\": 30,\n                \"origin_protocol_policy\": \"https-only\",\n                \"origin_ssl_protocols\": [\"TLSv1.2\"],\n            },\n        },\n        {\n            \"domain_name\": \"duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\",\n            \"origin_id\": \"duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\",\n            \"connection_attempts\": 3,\n            \"connection_timeout\": 10,\n        },\n    ],\n    default_cache_behavior={\n        \"allowed_methods\": [\n            \"GET\",\n            \"HEAD\",\n        ],\n        \"cached_methods\": [\n            \"GET\",\n            \"HEAD\",\n        ],\n        \"target_origin_id\": \"duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\",\n        \"compress\": False,\n        \"viewer_protocol_policy\": \"redirect-to-https\",\n        \"min_ttl\": 0,\n        \"default_ttl\": 0,\n        \"max_ttl\": 0,\n    },\n    ordered_cache_behaviors=[{\n        \"allowed_methods\": [\n            \"GET\",\n            \"HEAD\",\n        ],\n        \"cached_methods\": [\n            \"GET\",\n            \"HEAD\",\n        ],\n        \"target_origin_id\": \"pa-api-dev01.abc.xyz\",\n        \"compress\": False,\n        \"viewer_protocol_policy\": \"redirect-to-https\",\n        \"min_ttl\": 0,\n        \"default_ttl\": 0,\n        \"max_ttl\": 0,\n        \"path_pattern\": \"/api/*\",\n    }],\n    viewer_certificate={\n        \"acm_certificate_arn\": \"arn:aws:acm:us-east-1:1234567890:certificate/49c7a151-14b1-486e-801f-cf6bc9a43804\",\n        \"minimum_protocol_version\": \"TLSv1.2_2019\",\n        \"ssl_support_method\": \"sni-only\",\n    },\n    restrictions={\n        \"geo_restriction\": {\n            \"restriction_type\": \"none\",\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var duplo_app = new Duplocloud.Tenant(\"duplo-app\", new()\n    {\n        AccountName = \"duplo-app\",\n        PlanId = \"default\",\n    });\n\n    var cfd = new Duplocloud.AwsCloudfrontDistribution(\"cfd\", new()\n    {\n        TenantId = duplo_app.TenantId,\n        Comment = \"duploservices-dev01-app\",\n        DefaultRootObject = \"index.html\",\n        Enabled = true,\n        HttpVersion = \"http2\",\n        IsIpv6Enabled = true,\n        Aliases = new[]\n        {\n            \"app-dev.abc.xyz\",\n        },\n        PriceClass = \"PriceClass_All\",\n        WaitForDeployment = true,\n        Origins = new[]\n        {\n            new Duplocloud.Inputs.AwsCloudfrontDistributionOriginArgs\n            {\n                DomainName = \"pa-api-dev01.abc.xyz\",\n                OriginId = \"pa-api-dev01.abc.xyz\",\n                ConnectionAttempts = 3,\n                ConnectionTimeout = 10,\n                CustomOriginConfig = new Duplocloud.Inputs.AwsCloudfrontDistributionOriginCustomOriginConfigArgs\n                {\n                    HttpPort = 80,\n                    HttpsPort = 443,\n                    OriginKeepaliveTimeout = 30,\n                    OriginReadTimeout = 30,\n                    OriginProtocolPolicy = \"https-only\",\n                    OriginSslProtocols = new[]\n                    {\n                        \"TLSv1.2\",\n                    },\n                },\n            },\n            new Duplocloud.Inputs.AwsCloudfrontDistributionOriginArgs\n            {\n                DomainName = \"duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\",\n                OriginId = \"duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\",\n                ConnectionAttempts = 3,\n                ConnectionTimeout = 10,\n            },\n        },\n        DefaultCacheBehavior = new Duplocloud.Inputs.AwsCloudfrontDistributionDefaultCacheBehaviorArgs\n        {\n            AllowedMethods = new[]\n            {\n                \"GET\",\n                \"HEAD\",\n            },\n            CachedMethods = new[]\n            {\n                \"GET\",\n                \"HEAD\",\n            },\n            TargetOriginId = \"duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\",\n            Compress = false,\n            ViewerProtocolPolicy = \"redirect-to-https\",\n            MinTtl = 0,\n            DefaultTtl = 0,\n            MaxTtl = 0,\n        },\n        OrderedCacheBehaviors = new[]\n        {\n            new Duplocloud.Inputs.AwsCloudfrontDistributionOrderedCacheBehaviorArgs\n            {\n                AllowedMethods = new[]\n                {\n                    \"GET\",\n                    \"HEAD\",\n                },\n                CachedMethods = new[]\n                {\n                    \"GET\",\n                    \"HEAD\",\n                },\n                TargetOriginId = \"pa-api-dev01.abc.xyz\",\n                Compress = false,\n                ViewerProtocolPolicy = \"redirect-to-https\",\n                MinTtl = 0,\n                DefaultTtl = 0,\n                MaxTtl = 0,\n                PathPattern = \"/api/*\",\n            },\n        },\n        ViewerCertificate = new Duplocloud.Inputs.AwsCloudfrontDistributionViewerCertificateArgs\n        {\n            AcmCertificateArn = \"arn:aws:acm:us-east-1:1234567890:certificate/49c7a151-14b1-486e-801f-cf6bc9a43804\",\n            MinimumProtocolVersion = \"TLSv1.2_2019\",\n            SslSupportMethod = \"sni-only\",\n        },\n        Restrictions = new Duplocloud.Inputs.AwsCloudfrontDistributionRestrictionsArgs\n        {\n            GeoRestriction = new Duplocloud.Inputs.AwsCloudfrontDistributionRestrictionsGeoRestrictionArgs\n            {\n                RestrictionType = \"none\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewTenant(ctx, \"duplo-app\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"duplo-app\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsCloudfrontDistribution(ctx, \"cfd\", \u0026duplocloud.AwsCloudfrontDistributionArgs{\n\t\t\tTenantId:          duplo_app.TenantId,\n\t\t\tComment:           pulumi.String(\"duploservices-dev01-app\"),\n\t\t\tDefaultRootObject: pulumi.String(\"index.html\"),\n\t\t\tEnabled:           pulumi.Bool(true),\n\t\t\tHttpVersion:       pulumi.String(\"http2\"),\n\t\t\tIsIpv6Enabled:     pulumi.Bool(true),\n\t\t\tAliases: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"app-dev.abc.xyz\"),\n\t\t\t},\n\t\t\tPriceClass:        pulumi.String(\"PriceClass_All\"),\n\t\t\tWaitForDeployment: pulumi.Bool(true),\n\t\t\tOrigins: duplocloud.AwsCloudfrontDistributionOriginArray{\n\t\t\t\t\u0026duplocloud.AwsCloudfrontDistributionOriginArgs{\n\t\t\t\t\tDomainName:         pulumi.String(\"pa-api-dev01.abc.xyz\"),\n\t\t\t\t\tOriginId:           pulumi.String(\"pa-api-dev01.abc.xyz\"),\n\t\t\t\t\tConnectionAttempts: pulumi.Int(3),\n\t\t\t\t\tConnectionTimeout:  pulumi.Int(10),\n\t\t\t\t\tCustomOriginConfig: \u0026duplocloud.AwsCloudfrontDistributionOriginCustomOriginConfigArgs{\n\t\t\t\t\t\tHttpPort:               pulumi.Int(80),\n\t\t\t\t\t\tHttpsPort:              pulumi.Int(443),\n\t\t\t\t\t\tOriginKeepaliveTimeout: pulumi.Int(30),\n\t\t\t\t\t\tOriginReadTimeout:      pulumi.Int(30),\n\t\t\t\t\t\tOriginProtocolPolicy:   pulumi.String(\"https-only\"),\n\t\t\t\t\t\tOriginSslProtocols: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"TLSv1.2\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.AwsCloudfrontDistributionOriginArgs{\n\t\t\t\t\tDomainName:         pulumi.String(\"duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\"),\n\t\t\t\t\tOriginId:           pulumi.String(\"duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\"),\n\t\t\t\t\tConnectionAttempts: pulumi.Int(3),\n\t\t\t\t\tConnectionTimeout:  pulumi.Int(10),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDefaultCacheBehavior: \u0026duplocloud.AwsCloudfrontDistributionDefaultCacheBehaviorArgs{\n\t\t\t\tAllowedMethods: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"GET\"),\n\t\t\t\t\tpulumi.String(\"HEAD\"),\n\t\t\t\t},\n\t\t\t\tCachedMethods: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"GET\"),\n\t\t\t\t\tpulumi.String(\"HEAD\"),\n\t\t\t\t},\n\t\t\t\tTargetOriginId:       pulumi.String(\"duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\"),\n\t\t\t\tCompress:             pulumi.Bool(false),\n\t\t\t\tViewerProtocolPolicy: pulumi.String(\"redirect-to-https\"),\n\t\t\t\tMinTtl:               pulumi.Int(0),\n\t\t\t\tDefaultTtl:           pulumi.Int(0),\n\t\t\t\tMaxTtl:               pulumi.Int(0),\n\t\t\t},\n\t\t\tOrderedCacheBehaviors: duplocloud.AwsCloudfrontDistributionOrderedCacheBehaviorArray{\n\t\t\t\t\u0026duplocloud.AwsCloudfrontDistributionOrderedCacheBehaviorArgs{\n\t\t\t\t\tAllowedMethods: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"GET\"),\n\t\t\t\t\t\tpulumi.String(\"HEAD\"),\n\t\t\t\t\t},\n\t\t\t\t\tCachedMethods: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"GET\"),\n\t\t\t\t\t\tpulumi.String(\"HEAD\"),\n\t\t\t\t\t},\n\t\t\t\t\tTargetOriginId:       pulumi.String(\"pa-api-dev01.abc.xyz\"),\n\t\t\t\t\tCompress:             pulumi.Bool(false),\n\t\t\t\t\tViewerProtocolPolicy: pulumi.String(\"redirect-to-https\"),\n\t\t\t\t\tMinTtl:               pulumi.Int(0),\n\t\t\t\t\tDefaultTtl:           pulumi.Int(0),\n\t\t\t\t\tMaxTtl:               pulumi.Int(0),\n\t\t\t\t\tPathPattern:          pulumi.String(\"/api/*\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tViewerCertificate: \u0026duplocloud.AwsCloudfrontDistributionViewerCertificateArgs{\n\t\t\t\tAcmCertificateArn:      pulumi.String(\"arn:aws:acm:us-east-1:1234567890:certificate/49c7a151-14b1-486e-801f-cf6bc9a43804\"),\n\t\t\t\tMinimumProtocolVersion: pulumi.String(\"TLSv1.2_2019\"),\n\t\t\t\tSslSupportMethod:       pulumi.String(\"sni-only\"),\n\t\t\t},\n\t\t\tRestrictions: \u0026duplocloud.AwsCloudfrontDistributionRestrictionsArgs{\n\t\t\t\tGeoRestriction: \u0026duplocloud.AwsCloudfrontDistributionRestrictionsGeoRestrictionArgs{\n\t\t\t\t\tRestrictionType: pulumi.String(\"none\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsCloudfrontDistribution;\nimport com.pulumi.duplocloud.AwsCloudfrontDistributionArgs;\nimport com.pulumi.duplocloud.inputs.AwsCloudfrontDistributionOriginArgs;\nimport com.pulumi.duplocloud.inputs.AwsCloudfrontDistributionOriginCustomOriginConfigArgs;\nimport com.pulumi.duplocloud.inputs.AwsCloudfrontDistributionDefaultCacheBehaviorArgs;\nimport com.pulumi.duplocloud.inputs.AwsCloudfrontDistributionOrderedCacheBehaviorArgs;\nimport com.pulumi.duplocloud.inputs.AwsCloudfrontDistributionViewerCertificateArgs;\nimport com.pulumi.duplocloud.inputs.AwsCloudfrontDistributionRestrictionsArgs;\nimport com.pulumi.duplocloud.inputs.AwsCloudfrontDistributionRestrictionsGeoRestrictionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var duplo_app = new Tenant(\"duplo-app\", TenantArgs.builder()\n            .accountName(\"duplo-app\")\n            .planId(\"default\")\n            .build());\n\n        var cfd = new AwsCloudfrontDistribution(\"cfd\", AwsCloudfrontDistributionArgs.builder()\n            .tenantId(duplo_app.tenantId())\n            .comment(\"duploservices-dev01-app\")\n            .defaultRootObject(\"index.html\")\n            .enabled(true)\n            .httpVersion(\"http2\")\n            .isIpv6Enabled(true)\n            .aliases(\"app-dev.abc.xyz\")\n            .priceClass(\"PriceClass_All\")\n            .waitForDeployment(true)\n            .origins(            \n                AwsCloudfrontDistributionOriginArgs.builder()\n                    .domainName(\"pa-api-dev01.abc.xyz\")\n                    .originId(\"pa-api-dev01.abc.xyz\")\n                    .connectionAttempts(3)\n                    .connectionTimeout(10)\n                    .customOriginConfig(AwsCloudfrontDistributionOriginCustomOriginConfigArgs.builder()\n                        .httpPort(80)\n                        .httpsPort(443)\n                        .originKeepaliveTimeout(30)\n                        .originReadTimeout(30)\n                        .originProtocolPolicy(\"https-only\")\n                        .originSslProtocols(\"TLSv1.2\")\n                        .build())\n                    .build(),\n                AwsCloudfrontDistributionOriginArgs.builder()\n                    .domainName(\"duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\")\n                    .originId(\"duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\")\n                    .connectionAttempts(3)\n                    .connectionTimeout(10)\n                    .build())\n            .defaultCacheBehavior(AwsCloudfrontDistributionDefaultCacheBehaviorArgs.builder()\n                .allowedMethods(                \n                    \"GET\",\n                    \"HEAD\")\n                .cachedMethods(                \n                    \"GET\",\n                    \"HEAD\")\n                .targetOriginId(\"duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\")\n                .compress(false)\n                .viewerProtocolPolicy(\"redirect-to-https\")\n                .minTtl(0)\n                .defaultTtl(0)\n                .maxTtl(0)\n                .build())\n            .orderedCacheBehaviors(AwsCloudfrontDistributionOrderedCacheBehaviorArgs.builder()\n                .allowedMethods(                \n                    \"GET\",\n                    \"HEAD\")\n                .cachedMethods(                \n                    \"GET\",\n                    \"HEAD\")\n                .targetOriginId(\"pa-api-dev01.abc.xyz\")\n                .compress(false)\n                .viewerProtocolPolicy(\"redirect-to-https\")\n                .minTtl(0)\n                .defaultTtl(0)\n                .maxTtl(0)\n                .pathPattern(\"/api/*\")\n                .build())\n            .viewerCertificate(AwsCloudfrontDistributionViewerCertificateArgs.builder()\n                .acmCertificateArn(\"arn:aws:acm:us-east-1:1234567890:certificate/49c7a151-14b1-486e-801f-cf6bc9a43804\")\n                .minimumProtocolVersion(\"TLSv1.2_2019\")\n                .sslSupportMethod(\"sni-only\")\n                .build())\n            .restrictions(AwsCloudfrontDistributionRestrictionsArgs.builder()\n                .geoRestriction(AwsCloudfrontDistributionRestrictionsGeoRestrictionArgs.builder()\n                    .restrictionType(\"none\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  duplo-app:\n    type: duplocloud:Tenant\n    properties:\n      accountName: duplo-app\n      planId: default\n  cfd:\n    type: duplocloud:AwsCloudfrontDistribution\n    properties:\n      tenantId: ${[\"duplo-app\"].tenantId}\n      comment: duploservices-dev01-app\n      defaultRootObject: index.html\n      enabled: true\n      httpVersion: http2\n      isIpv6Enabled: true\n      aliases:\n        - app-dev.abc.xyz\n      priceClass: PriceClass_All\n      waitForDeployment: true\n      origins:\n        - domainName: pa-api-dev01.abc.xyz\n          originId: pa-api-dev01.abc.xyz\n          connectionAttempts: 3\n          connectionTimeout: 10\n          customOriginConfig:\n            httpPort: 80\n            httpsPort: 443\n            originKeepaliveTimeout: 30\n            originReadTimeout: 30\n            originProtocolPolicy: https-only\n            originSslProtocols:\n              - TLSv1.2\n        - domainName: duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\n          originId: duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\n          connectionAttempts: 3\n          connectionTimeout: 10\n      defaultCacheBehavior:\n        allowedMethods:\n          - GET\n          - HEAD\n        cachedMethods:\n          - GET\n          - HEAD\n        targetOriginId: duploservices-dev01-abc-app-1234567890.s3.us-west-2.amazonaws.com\n        compress: false\n        viewerProtocolPolicy: redirect-to-https\n        minTtl: 0\n        defaultTtl: 0\n        maxTtl: 0\n      orderedCacheBehaviors:\n        - allowedMethods:\n            - GET\n            - HEAD\n          cachedMethods:\n            - GET\n            - HEAD\n          targetOriginId: pa-api-dev01.abc.xyz\n          compress: false\n          viewerProtocolPolicy: redirect-to-https\n          minTtl: 0\n          defaultTtl: 0\n          maxTtl: 0\n          pathPattern: /api/*\n      viewerCertificate:\n        acmCertificateArn: arn:aws:acm:us-east-1:1234567890:certificate/49c7a151-14b1-486e-801f-cf6bc9a43804\n        minimumProtocolVersion: TLSv1.2_2019\n        sslSupportMethod: sni-only\n      restrictions:\n        geoRestriction:\n          restrictionType: none\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS Cloudfront Distribution\n\n - *TENANT_ID* is the tenant GUID\n\n - *CLOUDFRONT_ID* is the cloudfront id\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsCloudfrontDistribution:AwsCloudfrontDistribution myCFD *TENANT_ID*/*CLOUDFRONT_ID*\n```\n\n",
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra CNAMEs (alternate domain names), if any, for this distribution.\n"
                },
                "arn": {
                    "type": "string"
                },
                "comment": {
                    "type": "string",
                    "description": "Any comments you want to include about the distribution. comment has been deprecated instead use name\n",
                    "deprecationMessage": "comment has been deprecated instead use name"
                },
                "corsAllowedHostNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "customErrorResponses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionCustomErrorResponse:AwsCloudfrontDistributionCustomErrorResponse"
                    }
                },
                "defaultCacheBehavior": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionDefaultCacheBehavior:AwsCloudfrontDistributionDefaultCacheBehavior"
                },
                "defaultRootObject": {
                    "type": "string",
                    "description": "The object that you want CloudFront to return (for example, index.html) when an end user requests the root URL.\n"
                },
                "domainName": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the distribution is enabled to accept end user requests for content.\n"
                },
                "etag": {
                    "type": "string"
                },
                "hostedZoneId": {
                    "type": "string"
                },
                "httpVersion": {
                    "type": "string",
                    "description": "The maximum HTTP version to support on the distribution. Allowed values are `http1.1` and `http2` Defaults to `http2`.\n"
                },
                "isIpv6Enabled": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "loggingConfig": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionLoggingConfig:AwsCloudfrontDistributionLoggingConfig"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the distribution\n"
                },
                "orderedCacheBehaviors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOrderedCacheBehavior:AwsCloudfrontDistributionOrderedCacheBehavior"
                    }
                },
                "originGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOriginGroup:AwsCloudfrontDistributionOriginGroup"
                    }
                },
                "origins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOrigin:AwsCloudfrontDistributionOrigin"
                    }
                },
                "priceClass": {
                    "type": "string",
                    "description": "The price class for this distribution. One of `PriceClass_All`, `PriceClass_200`, `PriceClass_100` Defaults to `PriceClass_All`.\n"
                },
                "restrictions": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionRestrictions:AwsCloudfrontDistributionRestrictions"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the distribution. `Deployed` if the distribution's information is fully propagated throughout the Amazon CloudFront system.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws cloudfront distribution will be created in.\n"
                },
                "useOriginAccessIdentity": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "viewerCertificate": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionViewerCertificate:AwsCloudfrontDistributionViewerCertificate"
                },
                "waitForDeployment": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "webAclId": {
                    "type": "string",
                    "description": "A unique identifier that specifies the AWS WAF web ACL, if any, to associate with this distribution.\n"
                }
            },
            "required": [
                "aliases",
                "arn",
                "comment",
                "corsAllowedHostNames",
                "defaultCacheBehavior",
                "defaultRootObject",
                "domainName",
                "enabled",
                "etag",
                "hostedZoneId",
                "name",
                "origins",
                "restrictions",
                "status",
                "tenantId",
                "viewerCertificate",
                "webAclId"
            ],
            "inputProperties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra CNAMEs (alternate domain names), if any, for this distribution.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Any comments you want to include about the distribution. comment has been deprecated instead use name\n",
                    "deprecationMessage": "comment has been deprecated instead use name"
                },
                "corsAllowedHostNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "customErrorResponses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionCustomErrorResponse:AwsCloudfrontDistributionCustomErrorResponse"
                    }
                },
                "defaultCacheBehavior": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionDefaultCacheBehavior:AwsCloudfrontDistributionDefaultCacheBehavior"
                },
                "defaultRootObject": {
                    "type": "string",
                    "description": "The object that you want CloudFront to return (for example, index.html) when an end user requests the root URL.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the distribution is enabled to accept end user requests for content.\n"
                },
                "httpVersion": {
                    "type": "string",
                    "description": "The maximum HTTP version to support on the distribution. Allowed values are `http1.1` and `http2` Defaults to `http2`.\n"
                },
                "isIpv6Enabled": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "loggingConfig": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionLoggingConfig:AwsCloudfrontDistributionLoggingConfig"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the distribution\n"
                },
                "orderedCacheBehaviors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOrderedCacheBehavior:AwsCloudfrontDistributionOrderedCacheBehavior"
                    }
                },
                "originGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOriginGroup:AwsCloudfrontDistributionOriginGroup"
                    }
                },
                "origins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOrigin:AwsCloudfrontDistributionOrigin"
                    }
                },
                "priceClass": {
                    "type": "string",
                    "description": "The price class for this distribution. One of `PriceClass_All`, `PriceClass_200`, `PriceClass_100` Defaults to `PriceClass_All`.\n"
                },
                "restrictions": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionRestrictions:AwsCloudfrontDistributionRestrictions"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws cloudfront distribution will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "useOriginAccessIdentity": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "viewerCertificate": {
                    "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionViewerCertificate:AwsCloudfrontDistributionViewerCertificate"
                },
                "waitForDeployment": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "webAclId": {
                    "type": "string",
                    "description": "A unique identifier that specifies the AWS WAF web ACL, if any, to associate with this distribution.\n"
                }
            },
            "requiredInputs": [
                "defaultCacheBehavior",
                "enabled",
                "origins",
                "tenantId",
                "viewerCertificate"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsCloudfrontDistribution resources.\n",
                "properties": {
                    "aliases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Extra CNAMEs (alternate domain names), if any, for this distribution.\n"
                    },
                    "arn": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Any comments you want to include about the distribution. comment has been deprecated instead use name\n",
                        "deprecationMessage": "comment has been deprecated instead use name"
                    },
                    "corsAllowedHostNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "customErrorResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionCustomErrorResponse:AwsCloudfrontDistributionCustomErrorResponse"
                        }
                    },
                    "defaultCacheBehavior": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionDefaultCacheBehavior:AwsCloudfrontDistributionDefaultCacheBehavior"
                    },
                    "defaultRootObject": {
                        "type": "string",
                        "description": "The object that you want CloudFront to return (for example, index.html) when an end user requests the root URL.\n"
                    },
                    "domainName": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the distribution is enabled to accept end user requests for content.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "hostedZoneId": {
                        "type": "string"
                    },
                    "httpVersion": {
                        "type": "string",
                        "description": "The maximum HTTP version to support on the distribution. Allowed values are `http1.1` and `http2` Defaults to `http2`.\n"
                    },
                    "isIpv6Enabled": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "loggingConfig": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionLoggingConfig:AwsCloudfrontDistributionLoggingConfig"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the distribution\n"
                    },
                    "orderedCacheBehaviors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOrderedCacheBehavior:AwsCloudfrontDistributionOrderedCacheBehavior"
                        }
                    },
                    "originGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOriginGroup:AwsCloudfrontDistributionOriginGroup"
                        }
                    },
                    "origins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionOrigin:AwsCloudfrontDistributionOrigin"
                        }
                    },
                    "priceClass": {
                        "type": "string",
                        "description": "The price class for this distribution. One of `PriceClass_All`, `PriceClass_200`, `PriceClass_100` Defaults to `PriceClass_All`.\n"
                    },
                    "restrictions": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionRestrictions:AwsCloudfrontDistributionRestrictions"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the distribution. `Deployed` if the distribution's information is fully propagated throughout the Amazon CloudFront system.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the aws cloudfront distribution will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "useOriginAccessIdentity": {
                        "type": "boolean",
                        "description": "Defaults to `true`.\n"
                    },
                    "viewerCertificate": {
                        "$ref": "#/types/duplocloud:index/AwsCloudfrontDistributionViewerCertificate:AwsCloudfrontDistributionViewerCertificate"
                    },
                    "waitForDeployment": {
                        "type": "boolean",
                        "description": "Defaults to `true`.\n"
                    },
                    "webAclId": {
                        "type": "string",
                        "description": "A unique identifier that specifies the AWS WAF web ACL, if any, to associate with this distribution.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsCloudwatchEventRule:AwsCloudwatchEventRule": {
            "description": "`duplocloud.AwsCloudwatchEventRule` manages an AWS cloudwatch event rule in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst duplo_app = new duplocloud.Tenant(\"duplo-app\", {\n    accountName: \"duplo-app\",\n    planId: \"default\",\n});\n// With Schedule Expression\nconst cwErule = new duplocloud.AwsCloudwatchEventRule(\"cw_erule\", {\n    tenantId: duplo_app.tenantId,\n    name: \"cw_erule\",\n    description: \"this is a test cloudwatch event rule.\",\n    scheduleExpression: \"rate(10 minutes)\",\n    state: \"DISABLED\",\n    tags: [\n        {\n            key: \"CreatedBy\",\n            value: \"Duplo\",\n        },\n        {\n            key: \"CreatedFrom\",\n            value: \"Duplo\",\n        },\n    ],\n});\n// With Event Pattern\nconst cwErule2 = new duplocloud.AwsCloudwatchEventRule(\"cw_erule2\", {\n    tenantId: duplo_app.tenantId,\n    name: \"cw_erule2\",\n    description: \"capture-aws-sign-in.\",\n    eventPattern: JSON.stringify({\n        \"detail-type\": [\"AWS Console Sign In via CloudTrail\"],\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_duplocloud as duplocloud\n\nduplo_app = duplocloud.Tenant(\"duplo-app\",\n    account_name=\"duplo-app\",\n    plan_id=\"default\")\n# With Schedule Expression\ncw_erule = duplocloud.AwsCloudwatchEventRule(\"cw_erule\",\n    tenant_id=duplo_app.tenant_id,\n    name=\"cw_erule\",\n    description=\"this is a test cloudwatch event rule.\",\n    schedule_expression=\"rate(10 minutes)\",\n    state=\"DISABLED\",\n    tags=[\n        {\n            \"key\": \"CreatedBy\",\n            \"value\": \"Duplo\",\n        },\n        {\n            \"key\": \"CreatedFrom\",\n            \"value\": \"Duplo\",\n        },\n    ])\n# With Event Pattern\ncw_erule2 = duplocloud.AwsCloudwatchEventRule(\"cw_erule2\",\n    tenant_id=duplo_app.tenant_id,\n    name=\"cw_erule2\",\n    description=\"capture-aws-sign-in.\",\n    event_pattern=json.dumps({\n        \"detail-type\": [\"AWS Console Sign In via CloudTrail\"],\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var duplo_app = new Duplocloud.Tenant(\"duplo-app\", new()\n    {\n        AccountName = \"duplo-app\",\n        PlanId = \"default\",\n    });\n\n    // With Schedule Expression\n    var cwErule = new Duplocloud.AwsCloudwatchEventRule(\"cw_erule\", new()\n    {\n        TenantId = duplo_app.TenantId,\n        Name = \"cw_erule\",\n        Description = \"this is a test cloudwatch event rule.\",\n        ScheduleExpression = \"rate(10 minutes)\",\n        State = \"DISABLED\",\n        Tags = new[]\n        {\n            new Duplocloud.Inputs.AwsCloudwatchEventRuleTagArgs\n            {\n                Key = \"CreatedBy\",\n                Value = \"Duplo\",\n            },\n            new Duplocloud.Inputs.AwsCloudwatchEventRuleTagArgs\n            {\n                Key = \"CreatedFrom\",\n                Value = \"Duplo\",\n            },\n        },\n    });\n\n    // With Event Pattern\n    var cwErule2 = new Duplocloud.AwsCloudwatchEventRule(\"cw_erule2\", new()\n    {\n        TenantId = duplo_app.TenantId,\n        Name = \"cw_erule2\",\n        Description = \"capture-aws-sign-in.\",\n        EventPattern = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"detail-type\"] = new[]\n            {\n                \"AWS Console Sign In via CloudTrail\",\n            },\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewTenant(ctx, \"duplo-app\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"duplo-app\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// With Schedule Expression\n\t\t_, err = duplocloud.NewAwsCloudwatchEventRule(ctx, \"cw_erule\", \u0026duplocloud.AwsCloudwatchEventRuleArgs{\n\t\t\tTenantId:           duplo_app.TenantId,\n\t\t\tName:               pulumi.String(\"cw_erule\"),\n\t\t\tDescription:        pulumi.String(\"this is a test cloudwatch event rule.\"),\n\t\t\tScheduleExpression: pulumi.String(\"rate(10 minutes)\"),\n\t\t\tState:              pulumi.String(\"DISABLED\"),\n\t\t\tTags: duplocloud.AwsCloudwatchEventRuleTagArray{\n\t\t\t\t\u0026duplocloud.AwsCloudwatchEventRuleTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"CreatedBy\"),\n\t\t\t\t\tValue: pulumi.String(\"Duplo\"),\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.AwsCloudwatchEventRuleTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"CreatedFrom\"),\n\t\t\t\t\tValue: pulumi.String(\"Duplo\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"detail-type\": []string{\n\t\t\t\t\"AWS Console Sign In via CloudTrail\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t// With Event Pattern\n\t\t_, err = duplocloud.NewAwsCloudwatchEventRule(ctx, \"cw_erule2\", \u0026duplocloud.AwsCloudwatchEventRuleArgs{\n\t\t\tTenantId:     duplo_app.TenantId,\n\t\t\tName:         pulumi.String(\"cw_erule2\"),\n\t\t\tDescription:  pulumi.String(\"capture-aws-sign-in.\"),\n\t\t\tEventPattern: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsCloudwatchEventRule;\nimport com.pulumi.duplocloud.AwsCloudwatchEventRuleArgs;\nimport com.pulumi.duplocloud.inputs.AwsCloudwatchEventRuleTagArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var duplo_app = new Tenant(\"duplo-app\", TenantArgs.builder()\n            .accountName(\"duplo-app\")\n            .planId(\"default\")\n            .build());\n\n        // With Schedule Expression\n        var cwErule = new AwsCloudwatchEventRule(\"cwErule\", AwsCloudwatchEventRuleArgs.builder()\n            .tenantId(duplo_app.tenantId())\n            .name(\"cw_erule\")\n            .description(\"this is a test cloudwatch event rule.\")\n            .scheduleExpression(\"rate(10 minutes)\")\n            .state(\"DISABLED\")\n            .tags(            \n                AwsCloudwatchEventRuleTagArgs.builder()\n                    .key(\"CreatedBy\")\n                    .value(\"Duplo\")\n                    .build(),\n                AwsCloudwatchEventRuleTagArgs.builder()\n                    .key(\"CreatedFrom\")\n                    .value(\"Duplo\")\n                    .build())\n            .build());\n\n        // With Event Pattern\n        var cwErule2 = new AwsCloudwatchEventRule(\"cwErule2\", AwsCloudwatchEventRuleArgs.builder()\n            .tenantId(duplo_app.tenantId())\n            .name(\"cw_erule2\")\n            .description(\"capture-aws-sign-in.\")\n            .eventPattern(serializeJson(\n                jsonObject(\n                    jsonProperty(\"detail-type\", jsonArray(\"AWS Console Sign In via CloudTrail\"))\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  duplo-app:\n    type: duplocloud:Tenant\n    properties:\n      accountName: duplo-app\n      planId: default\n  # With Schedule Expression\n  cwErule:\n    type: duplocloud:AwsCloudwatchEventRule\n    name: cw_erule\n    properties:\n      tenantId: ${[\"duplo-app\"].tenantId}\n      name: cw_erule\n      description: this is a test cloudwatch event rule.\n      scheduleExpression: rate(10 minutes)\n      state: DISABLED\n      tags:\n        - key: CreatedBy\n          value: Duplo\n        - key: CreatedFrom\n          value: Duplo\n  # With Event Pattern\n  cwErule2:\n    type: duplocloud:AwsCloudwatchEventRule\n    name: cw_erule2\n    properties:\n      tenantId: ${[\"duplo-app\"].tenantId}\n      name: cw_erule2\n      description: capture-aws-sign-in.\n      eventPattern:\n        fn::toJSON:\n          detail-type:\n            - AWS Console Sign In via CloudTrail\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS Cloudwatch Event Rule\n\n - *TENANT_ID* is the tenant GUID\n\n - *FRIENDLY_NAME* is the duploservices-\u003caccount_name\u003e-\u003cfriendly_name\u003e\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsCloudwatchEventRule:AwsCloudwatchEventRule myEventRule *TENANT_ID*/*FRIENDLY_NAME*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN of the event rule.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the rule.\n"
                },
                "eventBusName": {
                    "type": "string",
                    "description": "The event bus to associate with this rule. If you omit this, the default event bus is used.\n"
                },
                "eventPattern": {
                    "type": "string",
                    "description": "The event pattern described a JSON object. At least one of `schedule_expression` or `event_pattern` is required.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the event rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the event rule.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) associated with the role that is used for target invocation.\n"
                },
                "scheduleExpression": {
                    "type": "string",
                    "description": "The scheduling expression. For example, `cron(0 20 * * ? *)` or `rate(5 minutes)`. At least one of `schedule_expression` or `event_pattern` is required.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Whether the rule should be enabled or disabled. Defaults to `ENABLED`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudwatchEventRuleTag:AwsCloudwatchEventRuleTag"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the cloudwatch event rule will be created in.\n"
                }
            },
            "required": [
                "arn",
                "eventBusName",
                "fullname",
                "name",
                "roleArn",
                "tags",
                "tenantId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the rule.\n"
                },
                "eventBusName": {
                    "type": "string",
                    "description": "The event bus to associate with this rule. If you omit this, the default event bus is used.\n"
                },
                "eventPattern": {
                    "type": "string",
                    "description": "The event pattern described a JSON object. At least one of `schedule_expression` or `event_pattern` is required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the event rule.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "roleArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) associated with the role that is used for target invocation.\n"
                },
                "scheduleExpression": {
                    "type": "string",
                    "description": "The scheduling expression. For example, `cron(0 20 * * ? *)` or `rate(5 minutes)`. At least one of `schedule_expression` or `event_pattern` is required.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Whether the rule should be enabled or disabled. Defaults to `ENABLED`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudwatchEventRuleTag:AwsCloudwatchEventRuleTag"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the cloudwatch event rule will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsCloudwatchEventRule resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the event rule.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the rule.\n"
                    },
                    "eventBusName": {
                        "type": "string",
                        "description": "The event bus to associate with this rule. If you omit this, the default event bus is used.\n"
                    },
                    "eventPattern": {
                        "type": "string",
                        "description": "The event pattern described a JSON object. At least one of `schedule_expression` or `event_pattern` is required.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the event rule.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the event rule.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleArn": {
                        "type": "string",
                        "description": "The Amazon Resource Name (ARN) associated with the role that is used for target invocation.\n"
                    },
                    "scheduleExpression": {
                        "type": "string",
                        "description": "The scheduling expression. For example, `cron(0 20 * * ? *)` or `rate(5 minutes)`. At least one of `schedule_expression` or `event_pattern` is required.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Whether the rule should be enabled or disabled. Defaults to `ENABLED`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsCloudwatchEventRuleTag:AwsCloudwatchEventRuleTag"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the cloudwatch event rule will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsCloudwatchEventTarget:AwsCloudwatchEventTarget": {
            "description": "`duplocloud.AwsCloudwatchEventTarget` manages an AWS cloudwatch event target in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst duplo_app = new duplocloud.Tenant(\"duplo-app\", {\n    accountName: \"duplo-app\",\n    planId: \"default\",\n});\nconst cwErule = new duplocloud.AwsCloudwatchEventRule(\"cw_erule\", {\n    tenantId: duplo_app.tenantId,\n    name: \"cw_erule\",\n    description: \"this is a test cloudwatch event rule.\",\n    scheduleExpression: \"rate(10 minutes)\",\n    state: \"DISABLED\",\n    tags: [\n        {\n            key: \"CreatedBy\",\n            value: \"Duplo\",\n        },\n        {\n            key: \"CreatedFrom\",\n            value: \"Duplo\",\n        },\n    ],\n});\nconst cwEtarget1 = new duplocloud.AwsCloudwatchEventTarget(\"cw_etarget1\", {\n    tenantId: duplo_app.tenantId,\n    ruleName: cwErule.fullname,\n    targetArn: \"arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag\",\n    targetId: \"lamda-tst1\",\n});\nconst cwEtarget2 = new duplocloud.AwsCloudwatchEventTarget(\"cw_etarget2\", {\n    tenantId: duplo_app.tenantId,\n    ruleName: cwErule.fullname,\n    targetArn: \"arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag\",\n    targetId: \"lamda-tst2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nduplo_app = duplocloud.Tenant(\"duplo-app\",\n    account_name=\"duplo-app\",\n    plan_id=\"default\")\ncw_erule = duplocloud.AwsCloudwatchEventRule(\"cw_erule\",\n    tenant_id=duplo_app.tenant_id,\n    name=\"cw_erule\",\n    description=\"this is a test cloudwatch event rule.\",\n    schedule_expression=\"rate(10 minutes)\",\n    state=\"DISABLED\",\n    tags=[\n        {\n            \"key\": \"CreatedBy\",\n            \"value\": \"Duplo\",\n        },\n        {\n            \"key\": \"CreatedFrom\",\n            \"value\": \"Duplo\",\n        },\n    ])\ncw_etarget1 = duplocloud.AwsCloudwatchEventTarget(\"cw_etarget1\",\n    tenant_id=duplo_app.tenant_id,\n    rule_name=cw_erule.fullname,\n    target_arn=\"arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag\",\n    target_id=\"lamda-tst1\")\ncw_etarget2 = duplocloud.AwsCloudwatchEventTarget(\"cw_etarget2\",\n    tenant_id=duplo_app.tenant_id,\n    rule_name=cw_erule.fullname,\n    target_arn=\"arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag\",\n    target_id=\"lamda-tst2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var duplo_app = new Duplocloud.Tenant(\"duplo-app\", new()\n    {\n        AccountName = \"duplo-app\",\n        PlanId = \"default\",\n    });\n\n    var cwErule = new Duplocloud.AwsCloudwatchEventRule(\"cw_erule\", new()\n    {\n        TenantId = duplo_app.TenantId,\n        Name = \"cw_erule\",\n        Description = \"this is a test cloudwatch event rule.\",\n        ScheduleExpression = \"rate(10 minutes)\",\n        State = \"DISABLED\",\n        Tags = new[]\n        {\n            new Duplocloud.Inputs.AwsCloudwatchEventRuleTagArgs\n            {\n                Key = \"CreatedBy\",\n                Value = \"Duplo\",\n            },\n            new Duplocloud.Inputs.AwsCloudwatchEventRuleTagArgs\n            {\n                Key = \"CreatedFrom\",\n                Value = \"Duplo\",\n            },\n        },\n    });\n\n    var cwEtarget1 = new Duplocloud.AwsCloudwatchEventTarget(\"cw_etarget1\", new()\n    {\n        TenantId = duplo_app.TenantId,\n        RuleName = cwErule.Fullname,\n        TargetArn = \"arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag\",\n        TargetId = \"lamda-tst1\",\n    });\n\n    var cwEtarget2 = new Duplocloud.AwsCloudwatchEventTarget(\"cw_etarget2\", new()\n    {\n        TenantId = duplo_app.TenantId,\n        RuleName = cwErule.Fullname,\n        TargetArn = \"arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag\",\n        TargetId = \"lamda-tst2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewTenant(ctx, \"duplo-app\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"duplo-app\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcwErule, err := duplocloud.NewAwsCloudwatchEventRule(ctx, \"cw_erule\", \u0026duplocloud.AwsCloudwatchEventRuleArgs{\n\t\t\tTenantId:           duplo_app.TenantId,\n\t\t\tName:               pulumi.String(\"cw_erule\"),\n\t\t\tDescription:        pulumi.String(\"this is a test cloudwatch event rule.\"),\n\t\t\tScheduleExpression: pulumi.String(\"rate(10 minutes)\"),\n\t\t\tState:              pulumi.String(\"DISABLED\"),\n\t\t\tTags: duplocloud.AwsCloudwatchEventRuleTagArray{\n\t\t\t\t\u0026duplocloud.AwsCloudwatchEventRuleTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"CreatedBy\"),\n\t\t\t\t\tValue: pulumi.String(\"Duplo\"),\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.AwsCloudwatchEventRuleTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"CreatedFrom\"),\n\t\t\t\t\tValue: pulumi.String(\"Duplo\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsCloudwatchEventTarget(ctx, \"cw_etarget1\", \u0026duplocloud.AwsCloudwatchEventTargetArgs{\n\t\t\tTenantId:  duplo_app.TenantId,\n\t\t\tRuleName:  cwErule.Fullname,\n\t\t\tTargetArn: pulumi.String(\"arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag\"),\n\t\t\tTargetId:  pulumi.String(\"lamda-tst1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsCloudwatchEventTarget(ctx, \"cw_etarget2\", \u0026duplocloud.AwsCloudwatchEventTargetArgs{\n\t\t\tTenantId:  duplo_app.TenantId,\n\t\t\tRuleName:  cwErule.Fullname,\n\t\t\tTargetArn: pulumi.String(\"arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag\"),\n\t\t\tTargetId:  pulumi.String(\"lamda-tst2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsCloudwatchEventRule;\nimport com.pulumi.duplocloud.AwsCloudwatchEventRuleArgs;\nimport com.pulumi.duplocloud.inputs.AwsCloudwatchEventRuleTagArgs;\nimport com.pulumi.duplocloud.AwsCloudwatchEventTarget;\nimport com.pulumi.duplocloud.AwsCloudwatchEventTargetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var duplo_app = new Tenant(\"duplo-app\", TenantArgs.builder()\n            .accountName(\"duplo-app\")\n            .planId(\"default\")\n            .build());\n\n        var cwErule = new AwsCloudwatchEventRule(\"cwErule\", AwsCloudwatchEventRuleArgs.builder()\n            .tenantId(duplo_app.tenantId())\n            .name(\"cw_erule\")\n            .description(\"this is a test cloudwatch event rule.\")\n            .scheduleExpression(\"rate(10 minutes)\")\n            .state(\"DISABLED\")\n            .tags(            \n                AwsCloudwatchEventRuleTagArgs.builder()\n                    .key(\"CreatedBy\")\n                    .value(\"Duplo\")\n                    .build(),\n                AwsCloudwatchEventRuleTagArgs.builder()\n                    .key(\"CreatedFrom\")\n                    .value(\"Duplo\")\n                    .build())\n            .build());\n\n        var cwEtarget1 = new AwsCloudwatchEventTarget(\"cwEtarget1\", AwsCloudwatchEventTargetArgs.builder()\n            .tenantId(duplo_app.tenantId())\n            .ruleName(cwErule.fullname())\n            .targetArn(\"arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag\")\n            .targetId(\"lamda-tst1\")\n            .build());\n\n        var cwEtarget2 = new AwsCloudwatchEventTarget(\"cwEtarget2\", AwsCloudwatchEventTargetArgs.builder()\n            .tenantId(duplo_app.tenantId())\n            .ruleName(cwErule.fullname())\n            .targetArn(\"arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag\")\n            .targetId(\"lamda-tst2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  duplo-app:\n    type: duplocloud:Tenant\n    properties:\n      accountName: duplo-app\n      planId: default\n  cwErule:\n    type: duplocloud:AwsCloudwatchEventRule\n    name: cw_erule\n    properties:\n      tenantId: ${[\"duplo-app\"].tenantId}\n      name: cw_erule\n      description: this is a test cloudwatch event rule.\n      scheduleExpression: rate(10 minutes)\n      state: DISABLED\n      tags:\n        - key: CreatedBy\n          value: Duplo\n        - key: CreatedFrom\n          value: Duplo\n  cwEtarget1:\n    type: duplocloud:AwsCloudwatchEventTarget\n    name: cw_etarget1\n    properties:\n      tenantId: ${[\"duplo-app\"].tenantId}\n      ruleName: ${cwErule.fullname}\n      targetArn: arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag\n      targetId: lamda-tst1\n  cwEtarget2:\n    type: duplocloud:AwsCloudwatchEventTarget\n    name: cw_etarget2\n    properties:\n      tenantId: ${[\"duplo-app\"].tenantId}\n      ruleName: ${cwErule.fullname}\n      targetArn: arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag\n      targetId: lamda-tst2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS cloudwatch event target\n\n - *TENANT_ID* is the tenant GUID\n\n - *FRIENDLY_NAME* is the duploservices-\u003caccount_name\u003e-\u003cname_of_event_rule\u003e\n\n - *TARGET_ID* The unique target assignment ID.\n\n```sh\n$ pulumi import duplocloud:index/awsCloudwatchEventTarget:AwsCloudwatchEventTarget myEventTarget *TENANT_ID*/*FRIENDLY_NAME*/*TARGET_ID*\n```\n\n",
            "properties": {
                "eventBusName": {
                    "type": "string",
                    "description": "The event bus to associate with the rule. If you omit this, the default event bus is used.\n"
                },
                "input": {
                    "type": "string",
                    "description": "Valid JSON text passed to the target.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) associated with the role that is used for target invocation.\n"
                },
                "ruleName": {
                    "type": "string",
                    "description": "The name of the rule you want to add targets to.\n"
                },
                "targetArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the target.\n"
                },
                "targetId": {
                    "type": "string",
                    "description": "The unique target assignment ID.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the cloudwatch event target will be created in.\n"
                }
            },
            "required": [
                "eventBusName",
                "input",
                "roleArn",
                "ruleName",
                "targetArn",
                "targetId",
                "tenantId"
            ],
            "inputProperties": {
                "eventBusName": {
                    "type": "string",
                    "description": "The event bus to associate with the rule. If you omit this, the default event bus is used.\n"
                },
                "input": {
                    "type": "string",
                    "description": "Valid JSON text passed to the target.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) associated with the role that is used for target invocation.\n"
                },
                "ruleName": {
                    "type": "string",
                    "description": "The name of the rule you want to add targets to.\n",
                    "willReplaceOnChanges": true
                },
                "targetArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the target.\n"
                },
                "targetId": {
                    "type": "string",
                    "description": "The unique target assignment ID.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the cloudwatch event target will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ruleName",
                "targetArn",
                "targetId",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsCloudwatchEventTarget resources.\n",
                "properties": {
                    "eventBusName": {
                        "type": "string",
                        "description": "The event bus to associate with the rule. If you omit this, the default event bus is used.\n"
                    },
                    "input": {
                        "type": "string",
                        "description": "Valid JSON text passed to the target.\n"
                    },
                    "roleArn": {
                        "type": "string",
                        "description": "The Amazon Resource Name (ARN) associated with the role that is used for target invocation.\n"
                    },
                    "ruleName": {
                        "type": "string",
                        "description": "The name of the rule you want to add targets to.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetArn": {
                        "type": "string",
                        "description": "The Amazon Resource Name (ARN) of the target.\n"
                    },
                    "targetId": {
                        "type": "string",
                        "description": "The unique target assignment ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the cloudwatch event target will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsCloudwatchMetricAlarm:AwsCloudwatchMetricAlarm": {
            "description": "`duplocloud.AwsCloudwatchMetricAlarm` manages an AWS cloudwatch metric alarm in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst duplo_app = new duplocloud.Tenant(\"duplo-app\", {\n    accountName: \"duplo-app\",\n    planId: \"default\",\n});\nconst mAlarm = new duplocloud.AwsCloudwatchMetricAlarm(\"mAlarm\", {\n    tenantId: duplo_app.tenantId,\n    metricName: \"CPUUtilization\",\n    comparisonOperator: \"GreaterThanOrEqualToThreshold\",\n    evaluationPeriods: 1,\n    namespace: \"AWS/EC2\",\n    period: 300,\n    threshold: 80,\n    statistic: \"Average\",\n    dimensions: [{\n        key: \"InstanceId\",\n        value: \"i-1234567abcdefghj\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nduplo_app = duplocloud.Tenant(\"duplo-app\",\n    account_name=\"duplo-app\",\n    plan_id=\"default\")\nm_alarm = duplocloud.AwsCloudwatchMetricAlarm(\"mAlarm\",\n    tenant_id=duplo_app.tenant_id,\n    metric_name=\"CPUUtilization\",\n    comparison_operator=\"GreaterThanOrEqualToThreshold\",\n    evaluation_periods=1,\n    namespace=\"AWS/EC2\",\n    period=300,\n    threshold=80,\n    statistic=\"Average\",\n    dimensions=[{\n        \"key\": \"InstanceId\",\n        \"value\": \"i-1234567abcdefghj\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var duplo_app = new Duplocloud.Tenant(\"duplo-app\", new()\n    {\n        AccountName = \"duplo-app\",\n        PlanId = \"default\",\n    });\n\n    var mAlarm = new Duplocloud.AwsCloudwatchMetricAlarm(\"mAlarm\", new()\n    {\n        TenantId = duplo_app.TenantId,\n        MetricName = \"CPUUtilization\",\n        ComparisonOperator = \"GreaterThanOrEqualToThreshold\",\n        EvaluationPeriods = 1,\n        Namespace = \"AWS/EC2\",\n        Period = 300,\n        Threshold = 80,\n        Statistic = \"Average\",\n        Dimensions = new[]\n        {\n            new Duplocloud.Inputs.AwsCloudwatchMetricAlarmDimensionArgs\n            {\n                Key = \"InstanceId\",\n                Value = \"i-1234567abcdefghj\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewTenant(ctx, \"duplo-app\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"duplo-app\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsCloudwatchMetricAlarm(ctx, \"mAlarm\", \u0026duplocloud.AwsCloudwatchMetricAlarmArgs{\n\t\t\tTenantId:           duplo_app.TenantId,\n\t\t\tMetricName:         pulumi.String(\"CPUUtilization\"),\n\t\t\tComparisonOperator: pulumi.String(\"GreaterThanOrEqualToThreshold\"),\n\t\t\tEvaluationPeriods:  pulumi.Int(1),\n\t\t\tNamespace:          pulumi.String(\"AWS/EC2\"),\n\t\t\tPeriod:             pulumi.Int(300),\n\t\t\tThreshold:          pulumi.Float64(80),\n\t\t\tStatistic:          pulumi.String(\"Average\"),\n\t\t\tDimensions: duplocloud.AwsCloudwatchMetricAlarmDimensionArray{\n\t\t\t\t\u0026duplocloud.AwsCloudwatchMetricAlarmDimensionArgs{\n\t\t\t\t\tKey:   pulumi.String(\"InstanceId\"),\n\t\t\t\t\tValue: pulumi.String(\"i-1234567abcdefghj\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsCloudwatchMetricAlarm;\nimport com.pulumi.duplocloud.AwsCloudwatchMetricAlarmArgs;\nimport com.pulumi.duplocloud.inputs.AwsCloudwatchMetricAlarmDimensionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var duplo_app = new Tenant(\"duplo-app\", TenantArgs.builder()\n            .accountName(\"duplo-app\")\n            .planId(\"default\")\n            .build());\n\n        var mAlarm = new AwsCloudwatchMetricAlarm(\"mAlarm\", AwsCloudwatchMetricAlarmArgs.builder()\n            .tenantId(duplo_app.tenantId())\n            .metricName(\"CPUUtilization\")\n            .comparisonOperator(\"GreaterThanOrEqualToThreshold\")\n            .evaluationPeriods(1)\n            .namespace(\"AWS/EC2\")\n            .period(300)\n            .threshold(80)\n            .statistic(\"Average\")\n            .dimensions(AwsCloudwatchMetricAlarmDimensionArgs.builder()\n                .key(\"InstanceId\")\n                .value(\"i-1234567abcdefghj\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  duplo-app:\n    type: duplocloud:Tenant\n    properties:\n      accountName: duplo-app\n      planId: default\n  mAlarm:\n    type: duplocloud:AwsCloudwatchMetricAlarm\n    properties:\n      tenantId: ${[\"duplo-app\"].tenantId}\n      metricName: CPUUtilization\n      comparisonOperator: GreaterThanOrEqualToThreshold\n      evaluationPeriods: 1\n      namespace: AWS/EC2\n      period: 300\n      threshold: 80\n      statistic: Average\n      dimensions:\n        - key: InstanceId\n          value: i-1234567abcdefghj\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing cloudwatch metric alarm\n\n - *TENANT_ID* is the tenant GUID\n\n - *FRIENDLY_NAME* is the hypen separated alarm dimension values and metric name\n\n```sh\n$ pulumi import duplocloud:index/awsCloudwatchMetricAlarm:AwsCloudwatchMetricAlarm myMetricAlarm *TENANT_ID*/*FRIENDLY_NAME*\n```\n\n",
            "properties": {
                "comparisonOperator": {
                    "type": "string",
                    "description": "The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`\n"
                },
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudwatchMetricAlarmDimension:AwsCloudwatchMetricAlarmDimension"
                    },
                    "description": "The dimensions for the alarm's associated metric. For the list of available dimensions see the AWS documentation.\n"
                },
                "evaluationPeriods": {
                    "type": "integer",
                    "description": "The number of periods over which data is compared to the specified threshold.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "Duplo will generate name of the metric alarm.\n"
                },
                "metricName": {
                    "type": "string",
                    "description": "The name for the alarm's associated metric.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace for the alarm's associated metric.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The period in seconds over which the specified `statistic` is applied.\n"
                },
                "statistic": {
                    "type": "string",
                    "description": "The statistic to apply to the alarm's associated metric. Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the cloudwatch metric alarm will be created in.\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.\n"
                }
            },
            "required": [
                "comparisonOperator",
                "evaluationPeriods",
                "fullname",
                "metricName",
                "tenantId"
            ],
            "inputProperties": {
                "comparisonOperator": {
                    "type": "string",
                    "description": "The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`\n"
                },
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsCloudwatchMetricAlarmDimension:AwsCloudwatchMetricAlarmDimension"
                    },
                    "description": "The dimensions for the alarm's associated metric. For the list of available dimensions see the AWS documentation.\n"
                },
                "evaluationPeriods": {
                    "type": "integer",
                    "description": "The number of periods over which data is compared to the specified threshold.\n"
                },
                "metricName": {
                    "type": "string",
                    "description": "The name for the alarm's associated metric.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace for the alarm's associated metric.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The period in seconds over which the specified `statistic` is applied.\n"
                },
                "statistic": {
                    "type": "string",
                    "description": "The statistic to apply to the alarm's associated metric. Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the cloudwatch metric alarm will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "threshold": {
                    "type": "number",
                    "description": "The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.\n"
                }
            },
            "requiredInputs": [
                "comparisonOperator",
                "evaluationPeriods",
                "metricName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsCloudwatchMetricAlarm resources.\n",
                "properties": {
                    "comparisonOperator": {
                        "type": "string",
                        "description": "The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`\n"
                    },
                    "dimensions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsCloudwatchMetricAlarmDimension:AwsCloudwatchMetricAlarmDimension"
                        },
                        "description": "The dimensions for the alarm's associated metric. For the list of available dimensions see the AWS documentation.\n"
                    },
                    "evaluationPeriods": {
                        "type": "integer",
                        "description": "The number of periods over which data is compared to the specified threshold.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "Duplo will generate name of the metric alarm.\n"
                    },
                    "metricName": {
                        "type": "string",
                        "description": "The name for the alarm's associated metric.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace for the alarm's associated metric.\n"
                    },
                    "period": {
                        "type": "integer",
                        "description": "The period in seconds over which the specified `statistic` is applied.\n"
                    },
                    "statistic": {
                        "type": "string",
                        "description": "The statistic to apply to the alarm's associated metric. Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the cloudwatch metric alarm will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "threshold": {
                        "type": "number",
                        "description": "The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsDynamodbTable:AwsDynamodbTable": {
            "description": "`duplocloud.AwsDynamodbTable` manages an AWS dynamodb table in Duplo.\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN of the dynamodb table.\n"
                },
                "attributeType": {
                    "type": "string",
                    "description": "The attribute type of the primary key attribute.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the dynamodb table.\n"
                },
                "keyType": {
                    "type": "string",
                    "description": "The key type of the primary key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the dynamodb table.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "primaryKeyName": {
                    "type": "string",
                    "description": "The attribute name of the primary key attribute.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the dynamodb table.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the dynamodb table will be created in.\n"
                }
            },
            "required": [
                "arn",
                "attributeType",
                "fullname",
                "keyType",
                "name",
                "primaryKeyName",
                "status",
                "tenantId"
            ],
            "inputProperties": {
                "attributeType": {
                    "type": "string",
                    "description": "The attribute type of the primary key attribute.\n",
                    "willReplaceOnChanges": true
                },
                "keyType": {
                    "type": "string",
                    "description": "The key type of the primary key.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the dynamodb table.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "primaryKeyName": {
                    "type": "string",
                    "description": "The attribute name of the primary key attribute.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the dynamodb table will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "attributeType",
                "keyType",
                "primaryKeyName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsDynamodbTable resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the dynamodb table.\n"
                    },
                    "attributeType": {
                        "type": "string",
                        "description": "The attribute type of the primary key attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the dynamodb table.\n"
                    },
                    "keyType": {
                        "type": "string",
                        "description": "The key type of the primary key.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the dynamodb table.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "primaryKeyName": {
                        "type": "string",
                        "description": "The attribute name of the primary key attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the dynamodb table.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the dynamodb table will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsDynamodbTableV2:AwsDynamodbTableV2": {
            "description": "`duplocloud.AwsDynamodbTableV2` manages an AWS dynamodb table in Duplo.\n\n## Import\n\nExample: Importing an existing AWS DynamoDb Table\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the name of dynamodb table\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsDynamodbTableV2:AwsDynamodbTableV2 myDynamodbTable *TENANT_ID*/*NAME*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN of the dynamodb table.\n"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2Attribute:AwsDynamodbTableV2Attribute"
                    }
                },
                "billingMode": {
                    "type": "string",
                    "description": "Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.\n"
                },
                "deletionProtectionEnabled": {
                    "type": "boolean",
                    "description": "Deletion protection keeps the tables from being deleted unintentionally. While this setting is on, you can't delete the table.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The name of the table, this needs to be unique within a region.\n"
                },
                "globalSecondaryIndices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2GlobalSecondaryIndex:AwsDynamodbTableV2GlobalSecondaryIndex"
                    },
                    "description": "Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.\n"
                },
                "isPointInTimeRecovery": {
                    "type": "boolean",
                    "description": "The point in time recovery status of the dynamodb table. Enabled if true.\n"
                },
                "keySchemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2KeySchema:AwsDynamodbTableV2KeySchema"
                    }
                },
                "localSecondaryIndices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2LocalSecondaryIndex:AwsDynamodbTableV2LocalSecondaryIndex"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the table, this needs to be unique within a region.\n"
                },
                "readCapacity": {
                    "type": "integer",
                    "description": "The number of read units for this table. If the `billing_mode` is `PROVISIONED`, this field is required.\n"
                },
                "serverSideEncryption": {
                    "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2ServerSideEncryption:AwsDynamodbTableV2ServerSideEncryption",
                    "description": "Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the dynamodb table.\n"
                },
                "streamArn": {
                    "type": "string"
                },
                "streamEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether Streams are to be enabled (true) or disabled (false).\n"
                },
                "streamLabel": {
                    "type": "string"
                },
                "streamViewType": {
                    "type": "string",
                    "description": "When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2Tag:AwsDynamodbTableV2Tag"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the dynamodb table will be created in.\n"
                },
                "ttl": {
                    "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2Ttl:AwsDynamodbTableV2Ttl",
                    "description": "Setup ttl for dynamodb table. Defaults to `false or empty`, To disable ttl, enabled field should be set to false\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until dynamodb instance to be ready, after creation. Defaults to `true`.\n"
                },
                "writeCapacity": {
                    "type": "integer",
                    "description": "The number of write units for this table. If the `billing_mode` is `PROVISIONED`, this field is required.\n"
                }
            },
            "required": [
                "arn",
                "attributes",
                "deletionProtectionEnabled",
                "fullname",
                "isPointInTimeRecovery",
                "keySchemas",
                "name",
                "serverSideEncryption",
                "status",
                "streamArn",
                "streamLabel",
                "streamViewType",
                "tags",
                "tenantId"
            ],
            "inputProperties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2Attribute:AwsDynamodbTableV2Attribute"
                    }
                },
                "billingMode": {
                    "type": "string",
                    "description": "Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.\n"
                },
                "deletionProtectionEnabled": {
                    "type": "boolean",
                    "description": "Deletion protection keeps the tables from being deleted unintentionally. While this setting is on, you can't delete the table.\n"
                },
                "globalSecondaryIndices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2GlobalSecondaryIndex:AwsDynamodbTableV2GlobalSecondaryIndex"
                    },
                    "description": "Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.\n"
                },
                "isPointInTimeRecovery": {
                    "type": "boolean",
                    "description": "The point in time recovery status of the dynamodb table. Enabled if true.\n"
                },
                "keySchemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2KeySchema:AwsDynamodbTableV2KeySchema"
                    }
                },
                "localSecondaryIndices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2LocalSecondaryIndex:AwsDynamodbTableV2LocalSecondaryIndex"
                    },
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the table, this needs to be unique within a region.\n",
                    "willReplaceOnChanges": true
                },
                "readCapacity": {
                    "type": "integer",
                    "description": "The number of read units for this table. If the `billing_mode` is `PROVISIONED`, this field is required.\n"
                },
                "serverSideEncryption": {
                    "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2ServerSideEncryption:AwsDynamodbTableV2ServerSideEncryption",
                    "description": "Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.\n"
                },
                "streamEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether Streams are to be enabled (true) or disabled (false).\n"
                },
                "streamViewType": {
                    "type": "string",
                    "description": "When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2Tag:AwsDynamodbTableV2Tag"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the dynamodb table will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "ttl": {
                    "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2Ttl:AwsDynamodbTableV2Ttl",
                    "description": "Setup ttl for dynamodb table. Defaults to `false or empty`, To disable ttl, enabled field should be set to false\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until dynamodb instance to be ready, after creation. Defaults to `true`.\n"
                },
                "writeCapacity": {
                    "type": "integer",
                    "description": "The number of write units for this table. If the `billing_mode` is `PROVISIONED`, this field is required.\n"
                }
            },
            "requiredInputs": [
                "attributes",
                "keySchemas",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsDynamodbTableV2 resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the dynamodb table.\n"
                    },
                    "attributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2Attribute:AwsDynamodbTableV2Attribute"
                        }
                    },
                    "billingMode": {
                        "type": "string",
                        "description": "Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.\n"
                    },
                    "deletionProtectionEnabled": {
                        "type": "boolean",
                        "description": "Deletion protection keeps the tables from being deleted unintentionally. While this setting is on, you can't delete the table.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The name of the table, this needs to be unique within a region.\n"
                    },
                    "globalSecondaryIndices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2GlobalSecondaryIndex:AwsDynamodbTableV2GlobalSecondaryIndex"
                        },
                        "description": "Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.\n"
                    },
                    "isPointInTimeRecovery": {
                        "type": "boolean",
                        "description": "The point in time recovery status of the dynamodb table. Enabled if true.\n"
                    },
                    "keySchemas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2KeySchema:AwsDynamodbTableV2KeySchema"
                        }
                    },
                    "localSecondaryIndices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2LocalSecondaryIndex:AwsDynamodbTableV2LocalSecondaryIndex"
                        },
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the table, this needs to be unique within a region.\n",
                        "willReplaceOnChanges": true
                    },
                    "readCapacity": {
                        "type": "integer",
                        "description": "The number of read units for this table. If the `billing_mode` is `PROVISIONED`, this field is required.\n"
                    },
                    "serverSideEncryption": {
                        "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2ServerSideEncryption:AwsDynamodbTableV2ServerSideEncryption",
                        "description": "Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the dynamodb table.\n"
                    },
                    "streamArn": {
                        "type": "string"
                    },
                    "streamEnabled": {
                        "type": "boolean",
                        "description": "Indicates whether Streams are to be enabled (true) or disabled (false).\n"
                    },
                    "streamLabel": {
                        "type": "string"
                    },
                    "streamViewType": {
                        "type": "string",
                        "description": "When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2Tag:AwsDynamodbTableV2Tag"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the dynamodb table will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "ttl": {
                        "$ref": "#/types/duplocloud:index/AwsDynamodbTableV2Ttl:AwsDynamodbTableV2Ttl",
                        "description": "Setup ttl for dynamodb table. Defaults to `false or empty`, To disable ttl, enabled field should be set to false\n"
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until dynamodb instance to be ready, after creation. Defaults to `true`.\n"
                    },
                    "writeCapacity": {
                        "type": "integer",
                        "description": "The number of write units for this table. If the `billing_mode` is `PROVISIONED`, this field is required.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsEcrRepository:AwsEcrRepository": {
            "description": "`duplocloud.AwsEcrRepository` manages an aws ecr repository in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst test_ecr = new duplocloud.AwsEcrRepository(\"test-ecr\", {\n    tenantId: myapp.tenantId,\n    name: \"test-ecr\",\n    enableScanImageOnPush: true,\n    enableTagImmutability: true,\n    forceDelete: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\ntest_ecr = duplocloud.AwsEcrRepository(\"test-ecr\",\n    tenant_id=myapp.tenant_id,\n    name=\"test-ecr\",\n    enable_scan_image_on_push=True,\n    enable_tag_immutability=True,\n    force_delete=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var test_ecr = new Duplocloud.AwsEcrRepository(\"test-ecr\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"test-ecr\",\n        EnableScanImageOnPush = true,\n        EnableTagImmutability = true,\n        ForceDelete = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsEcrRepository(ctx, \"test-ecr\", \u0026duplocloud.AwsEcrRepositoryArgs{\n\t\t\tTenantId:              myapp.TenantId,\n\t\t\tName:                  pulumi.String(\"test-ecr\"),\n\t\t\tEnableScanImageOnPush: pulumi.Bool(true),\n\t\t\tEnableTagImmutability: pulumi.Bool(true),\n\t\t\tForceDelete:           pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsEcrRepository;\nimport com.pulumi.duplocloud.AwsEcrRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var test_ecr = new AwsEcrRepository(\"test-ecr\", AwsEcrRepositoryArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"test-ecr\")\n            .enableScanImageOnPush(true)\n            .enableTagImmutability(true)\n            .forceDelete(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  test-ecr:\n    type: duplocloud:AwsEcrRepository\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: test-ecr\n      enableScanImageOnPush: true\n      enableTagImmutability: true\n      forceDelete: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS ECR repository\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the AWS ECR repository\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsEcrRepository:AwsEcrRepository myecr *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "Full ARN of the ECR repository.\n"
                },
                "enableScanImageOnPush": {
                    "type": "boolean",
                    "description": "Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).\n"
                },
                "enableTagImmutability": {
                    "type": "boolean",
                    "description": "The tag mutability setting for the repository.\n"
                },
                "forceDelete": {
                    "type": "boolean",
                    "description": "Whether to force delete the repository on destroy operations Defaults to `false`.\n"
                },
                "kmsEncryptionKey": {
                    "type": "string",
                    "description": "The ARN of the KMS key to use.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ECR Repository.\n"
                },
                "registryId": {
                    "type": "string",
                    "description": "The registry ID where the repository was created.\n"
                },
                "repositoryUrl": {
                    "type": "string",
                    "description": "The URL of the repository.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws ecr repository will be created in.\n"
                }
            },
            "required": [
                "arn",
                "enableScanImageOnPush",
                "enableTagImmutability",
                "kmsEncryptionKey",
                "name",
                "registryId",
                "repositoryUrl",
                "tenantId"
            ],
            "inputProperties": {
                "enableScanImageOnPush": {
                    "type": "boolean",
                    "description": "Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).\n"
                },
                "enableTagImmutability": {
                    "type": "boolean",
                    "description": "The tag mutability setting for the repository.\n"
                },
                "forceDelete": {
                    "type": "boolean",
                    "description": "Whether to force delete the repository on destroy operations Defaults to `false`.\n"
                },
                "kmsEncryptionKey": {
                    "type": "string",
                    "description": "The ARN of the KMS key to use.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ECR Repository.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws ecr repository will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsEcrRepository resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "Full ARN of the ECR repository.\n"
                    },
                    "enableScanImageOnPush": {
                        "type": "boolean",
                        "description": "Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).\n"
                    },
                    "enableTagImmutability": {
                        "type": "boolean",
                        "description": "The tag mutability setting for the repository.\n"
                    },
                    "forceDelete": {
                        "type": "boolean",
                        "description": "Whether to force delete the repository on destroy operations Defaults to `false`.\n"
                    },
                    "kmsEncryptionKey": {
                        "type": "string",
                        "description": "The ARN of the KMS key to use.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ECR Repository.\n",
                        "willReplaceOnChanges": true
                    },
                    "registryId": {
                        "type": "string",
                        "description": "The registry ID where the repository was created.\n"
                    },
                    "repositoryUrl": {
                        "type": "string",
                        "description": "The URL of the repository.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the aws ecr repository will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsEfsFileSystem:AwsEfsFileSystem": {
            "description": "`duplocloud.AwsEfsFileSystem` Provides an Elastic File System (EFS) File System resource in DuploCloud.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst efs = new duplocloud.AwsEfsFileSystem(\"efs\", {\n    tenantId: myapp.tenantId,\n    name: \"efs-test\",\n    performanceMode: \"generalPurpose\",\n    throughputMode: \"bursting\",\n    backup: false,\n    encrypted: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nefs = duplocloud.AwsEfsFileSystem(\"efs\",\n    tenant_id=myapp.tenant_id,\n    name=\"efs-test\",\n    performance_mode=\"generalPurpose\",\n    throughput_mode=\"bursting\",\n    backup=False,\n    encrypted=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var efs = new Duplocloud.AwsEfsFileSystem(\"efs\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"efs-test\",\n        PerformanceMode = \"generalPurpose\",\n        ThroughputMode = \"bursting\",\n        Backup = false,\n        Encrypted = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsEfsFileSystem(ctx, \"efs\", \u0026duplocloud.AwsEfsFileSystemArgs{\n\t\t\tTenantId:        myapp.TenantId,\n\t\t\tName:            pulumi.String(\"efs-test\"),\n\t\t\tPerformanceMode: pulumi.String(\"generalPurpose\"),\n\t\t\tThroughputMode:  pulumi.String(\"bursting\"),\n\t\t\tBackup:          pulumi.Bool(false),\n\t\t\tEncrypted:       pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsEfsFileSystem;\nimport com.pulumi.duplocloud.AwsEfsFileSystemArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var efs = new AwsEfsFileSystem(\"efs\", AwsEfsFileSystemArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"efs-test\")\n            .performanceMode(\"generalPurpose\")\n            .throughputMode(\"bursting\")\n            .backup(false)\n            .encrypted(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  efs:\n    type: duplocloud:AwsEfsFileSystem\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: efs-test\n      performanceMode: generalPurpose\n      throughputMode: bursting\n      backup: false\n      encrypted: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS EFS\n\n - *TENANT_ID* is the tenant GUID\n\n - *EFS_ID* is the AWS EFS ID\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsEfsFileSystem:AwsEfsFileSystem efs *TENANT_ID*/*EFS_ID*\n```\n\n",
            "properties": {
                "backup": {
                    "type": "boolean",
                    "description": "Specifies whether automatic backups are enabled on the file system that you are creating.\n"
                },
                "creationToken": {
                    "type": "string",
                    "description": "A unique name (a maximum of 64 characters are allowed) used as reference when creating the Elastic File System to ensure idempotent file system creation.\n"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "If true, the disk will be encrypted.\n"
                },
                "fileSystemArn": {
                    "type": "string",
                    "description": "Amazon Resource Name of the file system.\n"
                },
                "fileSystemId": {
                    "type": "string",
                    "description": "The ID that identifies the file system.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "Duplo generated name of the EFS.\n"
                },
                "lifecyclePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsEfsFileSystemLifecyclePolicy:AwsEfsFileSystemLifecyclePolicy"
                    }
                },
                "mountTargets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsEfsFileSystemMountTarget:AwsEfsFileSystemMountTarget"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the EFS, this needs to be unique within a region.\n"
                },
                "numberOfMountTargets": {
                    "type": "integer",
                    "description": "The current number of mount targets that the file system has.\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The AWS account that created the file system.\n"
                },
                "performanceMode": {
                    "type": "string",
                    "description": "The file system performance mode. Can be either `generalPurpose` or `maxIO`. Defaults to `generalPurpose`.\n"
                },
                "provisionedThroughputInMibps": {
                    "type": "number",
                    "description": "The throughput, measured in MiB/s, that you want to provision for the file system. Only applicable with `throughput_mode` set to `provisioned`.\n"
                },
                "sizeInBytes": {
                    "type": "integer",
                    "description": "The latest known metered size (in bytes) of data stored in the file system.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsEfsFileSystemTag:AwsEfsFileSystemTag"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the efs file system will be created in.\n"
                },
                "throughputMode": {
                    "type": "string",
                    "description": "Throughput mode for the file system. When using `provisioned`, also set `provisioned_throughput_in_mibps`. Defaults to `bursting`.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until EFS to be available, after creation. Defaults to `true`.\n"
                }
            },
            "required": [
                "backup",
                "creationToken",
                "encrypted",
                "fileSystemArn",
                "fileSystemId",
                "fullname",
                "mountTargets",
                "name",
                "numberOfMountTargets",
                "ownerId",
                "provisionedThroughputInMibps",
                "sizeInBytes",
                "tags",
                "tenantId"
            ],
            "inputProperties": {
                "backup": {
                    "type": "boolean",
                    "description": "Specifies whether automatic backups are enabled on the file system that you are creating.\n"
                },
                "creationToken": {
                    "type": "string",
                    "description": "A unique name (a maximum of 64 characters are allowed) used as reference when creating the Elastic File System to ensure idempotent file system creation.\n",
                    "willReplaceOnChanges": true
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "If true, the disk will be encrypted.\n"
                },
                "lifecyclePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsEfsFileSystemLifecyclePolicy:AwsEfsFileSystemLifecyclePolicy"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the EFS, this needs to be unique within a region.\n",
                    "willReplaceOnChanges": true
                },
                "performanceMode": {
                    "type": "string",
                    "description": "The file system performance mode. Can be either `generalPurpose` or `maxIO`. Defaults to `generalPurpose`.\n"
                },
                "provisionedThroughputInMibps": {
                    "type": "number",
                    "description": "The throughput, measured in MiB/s, that you want to provision for the file system. Only applicable with `throughput_mode` set to `provisioned`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsEfsFileSystemTag:AwsEfsFileSystemTag"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the efs file system will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "throughputMode": {
                    "type": "string",
                    "description": "Throughput mode for the file system. When using `provisioned`, also set `provisioned_throughput_in_mibps`. Defaults to `bursting`.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until EFS to be available, after creation. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsEfsFileSystem resources.\n",
                "properties": {
                    "backup": {
                        "type": "boolean",
                        "description": "Specifies whether automatic backups are enabled on the file system that you are creating.\n"
                    },
                    "creationToken": {
                        "type": "string",
                        "description": "A unique name (a maximum of 64 characters are allowed) used as reference when creating the Elastic File System to ensure idempotent file system creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "If true, the disk will be encrypted.\n"
                    },
                    "fileSystemArn": {
                        "type": "string",
                        "description": "Amazon Resource Name of the file system.\n"
                    },
                    "fileSystemId": {
                        "type": "string",
                        "description": "The ID that identifies the file system.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "Duplo generated name of the EFS.\n"
                    },
                    "lifecyclePolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsEfsFileSystemLifecyclePolicy:AwsEfsFileSystemLifecyclePolicy"
                        }
                    },
                    "mountTargets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsEfsFileSystemMountTarget:AwsEfsFileSystemMountTarget"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the EFS, this needs to be unique within a region.\n",
                        "willReplaceOnChanges": true
                    },
                    "numberOfMountTargets": {
                        "type": "integer",
                        "description": "The current number of mount targets that the file system has.\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The AWS account that created the file system.\n"
                    },
                    "performanceMode": {
                        "type": "string",
                        "description": "The file system performance mode. Can be either `generalPurpose` or `maxIO`. Defaults to `generalPurpose`.\n"
                    },
                    "provisionedThroughputInMibps": {
                        "type": "number",
                        "description": "The throughput, measured in MiB/s, that you want to provision for the file system. Only applicable with `throughput_mode` set to `provisioned`.\n"
                    },
                    "sizeInBytes": {
                        "type": "integer",
                        "description": "The latest known metered size (in bytes) of data stored in the file system.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsEfsFileSystemTag:AwsEfsFileSystemTag"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the efs file system will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "throughputMode": {
                        "type": "string",
                        "description": "Throughput mode for the file system. When using `provisioned`, also set `provisioned_throughput_in_mibps`. Defaults to `bursting`.\n"
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until EFS to be available, after creation. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsEfsLifecyclePolicy:AwsEfsLifecyclePolicy": {
            "description": "`duplocloud.AwsEfsLifecyclePolicy` Provides an Elastic File System (EFS) File System Lifecycle Policy resource in DuploCloud.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst efs = new duplocloud.AwsEfsFileSystem(\"efs\", {\n    tenantId: myapp.tenantId,\n    name: \"efs-test\",\n    performanceMode: \"generalPurpose\",\n    throughputMode: \"elastic\",\n    backup: true,\n    encrypted: true,\n});\nconst efsPolicy = new duplocloud.AwsEfsLifecyclePolicy(\"efs_policy\", {\n    tenantId: myapp.tenantId,\n    fileSystemId: efs.fileSystemId,\n    lifecyclePolicies: [\n        {\n            transitionToIa: \"AFTER_7_DAYS\",\n        },\n        {\n            transitionToArchive: \"AFTER_14_DAYS\",\n        },\n        {\n            transitionToPrimaryStorageClass: \"AFTER_1_ACCESS\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nefs = duplocloud.AwsEfsFileSystem(\"efs\",\n    tenant_id=myapp.tenant_id,\n    name=\"efs-test\",\n    performance_mode=\"generalPurpose\",\n    throughput_mode=\"elastic\",\n    backup=True,\n    encrypted=True)\nefs_policy = duplocloud.AwsEfsLifecyclePolicy(\"efs_policy\",\n    tenant_id=myapp.tenant_id,\n    file_system_id=efs.file_system_id,\n    lifecycle_policies=[\n        {\n            \"transition_to_ia\": \"AFTER_7_DAYS\",\n        },\n        {\n            \"transition_to_archive\": \"AFTER_14_DAYS\",\n        },\n        {\n            \"transition_to_primary_storage_class\": \"AFTER_1_ACCESS\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var efs = new Duplocloud.AwsEfsFileSystem(\"efs\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"efs-test\",\n        PerformanceMode = \"generalPurpose\",\n        ThroughputMode = \"elastic\",\n        Backup = true,\n        Encrypted = true,\n    });\n\n    var efsPolicy = new Duplocloud.AwsEfsLifecyclePolicy(\"efs_policy\", new()\n    {\n        TenantId = myapp.TenantId,\n        FileSystemId = efs.FileSystemId,\n        LifecyclePolicies = new[]\n        {\n            new Duplocloud.Inputs.AwsEfsLifecyclePolicyLifecyclePolicyArgs\n            {\n                TransitionToIa = \"AFTER_7_DAYS\",\n            },\n            new Duplocloud.Inputs.AwsEfsLifecyclePolicyLifecyclePolicyArgs\n            {\n                TransitionToArchive = \"AFTER_14_DAYS\",\n            },\n            new Duplocloud.Inputs.AwsEfsLifecyclePolicyLifecyclePolicyArgs\n            {\n                TransitionToPrimaryStorageClass = \"AFTER_1_ACCESS\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tefs, err := duplocloud.NewAwsEfsFileSystem(ctx, \"efs\", \u0026duplocloud.AwsEfsFileSystemArgs{\n\t\t\tTenantId:        myapp.TenantId,\n\t\t\tName:            pulumi.String(\"efs-test\"),\n\t\t\tPerformanceMode: pulumi.String(\"generalPurpose\"),\n\t\t\tThroughputMode:  pulumi.String(\"elastic\"),\n\t\t\tBackup:          pulumi.Bool(true),\n\t\t\tEncrypted:       pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsEfsLifecyclePolicy(ctx, \"efs_policy\", \u0026duplocloud.AwsEfsLifecyclePolicyArgs{\n\t\t\tTenantId:     myapp.TenantId,\n\t\t\tFileSystemId: efs.FileSystemId,\n\t\t\tLifecyclePolicies: duplocloud.AwsEfsLifecyclePolicyLifecyclePolicyArray{\n\t\t\t\t\u0026duplocloud.AwsEfsLifecyclePolicyLifecyclePolicyArgs{\n\t\t\t\t\tTransitionToIa: pulumi.String(\"AFTER_7_DAYS\"),\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.AwsEfsLifecyclePolicyLifecyclePolicyArgs{\n\t\t\t\t\tTransitionToArchive: pulumi.String(\"AFTER_14_DAYS\"),\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.AwsEfsLifecyclePolicyLifecyclePolicyArgs{\n\t\t\t\t\tTransitionToPrimaryStorageClass: pulumi.String(\"AFTER_1_ACCESS\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsEfsFileSystem;\nimport com.pulumi.duplocloud.AwsEfsFileSystemArgs;\nimport com.pulumi.duplocloud.AwsEfsLifecyclePolicy;\nimport com.pulumi.duplocloud.AwsEfsLifecyclePolicyArgs;\nimport com.pulumi.duplocloud.inputs.AwsEfsLifecyclePolicyLifecyclePolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var efs = new AwsEfsFileSystem(\"efs\", AwsEfsFileSystemArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"efs-test\")\n            .performanceMode(\"generalPurpose\")\n            .throughputMode(\"elastic\")\n            .backup(true)\n            .encrypted(true)\n            .build());\n\n        var efsPolicy = new AwsEfsLifecyclePolicy(\"efsPolicy\", AwsEfsLifecyclePolicyArgs.builder()\n            .tenantId(myapp.tenantId())\n            .fileSystemId(efs.fileSystemId())\n            .lifecyclePolicies(            \n                AwsEfsLifecyclePolicyLifecyclePolicyArgs.builder()\n                    .transitionToIa(\"AFTER_7_DAYS\")\n                    .build(),\n                AwsEfsLifecyclePolicyLifecyclePolicyArgs.builder()\n                    .transitionToArchive(\"AFTER_14_DAYS\")\n                    .build(),\n                AwsEfsLifecyclePolicyLifecyclePolicyArgs.builder()\n                    .transitionToPrimaryStorageClass(\"AFTER_1_ACCESS\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  efs:\n    type: duplocloud:AwsEfsFileSystem\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: efs-test\n      performanceMode: generalPurpose\n      throughputMode: elastic\n      backup: true\n      encrypted: true\n  efsPolicy:\n    type: duplocloud:AwsEfsLifecyclePolicy\n    name: efs_policy\n    properties:\n      tenantId: ${myapp.tenantId}\n      fileSystemId: ${efs.fileSystemId}\n      lifecyclePolicies:\n        - transitionToIa: AFTER_7_DAYS\n        - transitionToArchive: AFTER_14_DAYS\n        - transitionToPrimaryStorageClass: AFTER_1_ACCESS\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS Elastic File System\n\n - *TENANT_ID* is the tenant GUID\n\n - *FILE_SYSTEM_ID* is the ID of the AWS Elastic File System\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsEfsLifecyclePolicy:AwsEfsLifecyclePolicy efslifecycle *TENANT_ID*/*FILE_SYSTEM_ID*\n```\n\n",
            "properties": {
                "fileSystemId": {
                    "type": "string"
                },
                "lifecyclePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsEfsLifecyclePolicyLifecyclePolicy:AwsEfsLifecyclePolicyLifecyclePolicy"
                    }
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "required": [
                "fileSystemId",
                "lifecyclePolicies",
                "tenantId"
            ],
            "inputProperties": {
                "fileSystemId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "lifecyclePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsEfsLifecyclePolicyLifecyclePolicy:AwsEfsLifecyclePolicyLifecyclePolicy"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "fileSystemId",
                "lifecyclePolicies",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsEfsLifecyclePolicy resources.\n",
                "properties": {
                    "fileSystemId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "lifecyclePolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsEfsLifecyclePolicyLifecyclePolicy:AwsEfsLifecyclePolicyLifecyclePolicy"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsElasticsearch:AwsElasticsearch": {
            "description": "`duplocloud.AwsElasticsearch` manages an AWS ElasticSearch instance in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\n// Minimal example\nconst sample = new duplocloud.AwsElasticsearch(\"sample\", {\n    tenantId: myapp.tenantId,\n    name: \"sample\",\n});\n// Example with hardened settings\nconst es_doc = new duplocloud.AwsElasticsearch(\"es-doc\", {\n    tenantId: myapp.tenantId,\n    name: \"es-doc\",\n    enableNodeToNodeEncryption: true,\n    requireSsl: true,\n    useLatestTlsCipher: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\n# Minimal example\nsample = duplocloud.AwsElasticsearch(\"sample\",\n    tenant_id=myapp.tenant_id,\n    name=\"sample\")\n# Example with hardened settings\nes_doc = duplocloud.AwsElasticsearch(\"es-doc\",\n    tenant_id=myapp.tenant_id,\n    name=\"es-doc\",\n    enable_node_to_node_encryption=True,\n    require_ssl=True,\n    use_latest_tls_cipher=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    // Minimal example\n    var sample = new Duplocloud.AwsElasticsearch(\"sample\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"sample\",\n    });\n\n    // Example with hardened settings\n    var es_doc = new Duplocloud.AwsElasticsearch(\"es-doc\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"es-doc\",\n        EnableNodeToNodeEncryption = true,\n        RequireSsl = true,\n        UseLatestTlsCipher = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Minimal example\n\t\t_, err = duplocloud.NewAwsElasticsearch(ctx, \"sample\", \u0026duplocloud.AwsElasticsearchArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tName:     pulumi.String(\"sample\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Example with hardened settings\n\t\t_, err = duplocloud.NewAwsElasticsearch(ctx, \"es-doc\", \u0026duplocloud.AwsElasticsearchArgs{\n\t\t\tTenantId:                   myapp.TenantId,\n\t\t\tName:                       pulumi.String(\"es-doc\"),\n\t\t\tEnableNodeToNodeEncryption: pulumi.Bool(true),\n\t\t\tRequireSsl:                 pulumi.Bool(true),\n\t\t\tUseLatestTlsCipher:         pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsElasticsearch;\nimport com.pulumi.duplocloud.AwsElasticsearchArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        // Minimal example\n        var sample = new AwsElasticsearch(\"sample\", AwsElasticsearchArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"sample\")\n            .build());\n\n        // Example with hardened settings\n        var es_doc = new AwsElasticsearch(\"es-doc\", AwsElasticsearchArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"es-doc\")\n            .enableNodeToNodeEncryption(true)\n            .requireSsl(true)\n            .useLatestTlsCipher(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  # Minimal example\n  sample:\n    type: duplocloud:AwsElasticsearch\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: sample\n  # Example with hardened settings\n  es-doc:\n    type: duplocloud:AwsElasticsearch\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: es-doc\n      enableNodeToNodeEncryption: true\n      requireSsl: true\n      useLatestTlsCipher: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS ElasticSearch cluster\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the AWS ElasticSearch cluster\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsElasticsearch:AwsElasticsearch mycluster *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "accessPolicies": {
                    "type": "string"
                },
                "advancedOptions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN of the ElasticSearch instance.\n"
                },
                "clusterConfig": {
                    "$ref": "#/types/duplocloud:index/AwsElasticsearchClusterConfig:AwsElasticsearchClusterConfig"
                },
                "domainId": {
                    "type": "string",
                    "description": "The domain ID of the ElasticSearch instance.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "The full name of the ElasticSearch instance.\n"
                },
                "ebsOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsElasticsearchEbsOption:AwsElasticsearchEbsOption"
                    }
                },
                "elasticsearchVersion": {
                    "type": "string",
                    "description": "The version of the ElasticSearch instance. Defaults to `7.9`.\n"
                },
                "enableNodeToNodeEncryption": {
                    "type": "boolean",
                    "description": "Whether or not to use the enable node-to-node encryption for this ElasticSearch instance.\n"
                },
                "encryptAtRest": {
                    "$ref": "#/types/duplocloud:index/AwsElasticsearchEncryptAtRest:AwsElasticsearchEncryptAtRest",
                    "description": "The storage encryption settings for the ElasticSearch instance.\n"
                },
                "endpoints": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The endpoints to use when connecting to the ElasticSearch instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the ElasticSearch instance.  Duplo will add a prefix to the name.  You can retrieve the full name from the `domain_name` attribute.\n"
                },
                "requireSsl": {
                    "type": "boolean",
                    "description": "Whether or not to require SSL for accessing this ElasticSearch instance.\n"
                },
                "selectedZone": {
                    "type": "integer",
                    "description": "The numerical index of the zone to launch this ElasticSearch instance in.\n"
                },
                "snapshotOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsElasticsearchSnapshotOption:AwsElasticsearchSnapshotOption"
                    }
                },
                "storageSize": {
                    "type": "integer",
                    "description": "The storage volume size, in GB, for the ElasticSearch instance.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the ElasticSearch instance will be created in.\n"
                },
                "useLatestTlsCipher": {
                    "type": "boolean",
                    "description": "Whether or not to use the latest TLS cipher for this ElasticSearch instance. For govcloud environments this should be set to true\n"
                },
                "vpcOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsElasticsearchVpcOption:AwsElasticsearchVpcOption"
                    }
                }
            },
            "required": [
                "accessPolicies",
                "advancedOptions",
                "arn",
                "clusterConfig",
                "domainId",
                "domainName",
                "ebsOptions",
                "enableNodeToNodeEncryption",
                "encryptAtRest",
                "endpoints",
                "name",
                "requireSsl",
                "selectedZone",
                "snapshotOptions",
                "tenantId",
                "useLatestTlsCipher",
                "vpcOptions"
            ],
            "inputProperties": {
                "clusterConfig": {
                    "$ref": "#/types/duplocloud:index/AwsElasticsearchClusterConfig:AwsElasticsearchClusterConfig",
                    "willReplaceOnChanges": true
                },
                "elasticsearchVersion": {
                    "type": "string",
                    "description": "The version of the ElasticSearch instance. Defaults to `7.9`.\n",
                    "willReplaceOnChanges": true
                },
                "enableNodeToNodeEncryption": {
                    "type": "boolean",
                    "description": "Whether or not to use the enable node-to-node encryption for this ElasticSearch instance.\n",
                    "willReplaceOnChanges": true
                },
                "encryptAtRest": {
                    "$ref": "#/types/duplocloud:index/AwsElasticsearchEncryptAtRest:AwsElasticsearchEncryptAtRest",
                    "description": "The storage encryption settings for the ElasticSearch instance.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the ElasticSearch instance.  Duplo will add a prefix to the name.  You can retrieve the full name from the `domain_name` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "requireSsl": {
                    "type": "boolean",
                    "description": "Whether or not to require SSL for accessing this ElasticSearch instance.\n"
                },
                "selectedZone": {
                    "type": "integer",
                    "description": "The numerical index of the zone to launch this ElasticSearch instance in.\n"
                },
                "storageSize": {
                    "type": "integer",
                    "description": "The storage volume size, in GB, for the ElasticSearch instance.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the ElasticSearch instance will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "useLatestTlsCipher": {
                    "type": "boolean",
                    "description": "Whether or not to use the latest TLS cipher for this ElasticSearch instance. For govcloud environments this should be set to true\n"
                },
                "vpcOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsElasticsearchVpcOption:AwsElasticsearchVpcOption"
                    },
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsElasticsearch resources.\n",
                "properties": {
                    "accessPolicies": {
                        "type": "string"
                    },
                    "advancedOptions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the ElasticSearch instance.\n"
                    },
                    "clusterConfig": {
                        "$ref": "#/types/duplocloud:index/AwsElasticsearchClusterConfig:AwsElasticsearchClusterConfig",
                        "willReplaceOnChanges": true
                    },
                    "domainId": {
                        "type": "string",
                        "description": "The domain ID of the ElasticSearch instance.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "The full name of the ElasticSearch instance.\n"
                    },
                    "ebsOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsElasticsearchEbsOption:AwsElasticsearchEbsOption"
                        }
                    },
                    "elasticsearchVersion": {
                        "type": "string",
                        "description": "The version of the ElasticSearch instance. Defaults to `7.9`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableNodeToNodeEncryption": {
                        "type": "boolean",
                        "description": "Whether or not to use the enable node-to-node encryption for this ElasticSearch instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "encryptAtRest": {
                        "$ref": "#/types/duplocloud:index/AwsElasticsearchEncryptAtRest:AwsElasticsearchEncryptAtRest",
                        "description": "The storage encryption settings for the ElasticSearch instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "endpoints": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The endpoints to use when connecting to the ElasticSearch instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the ElasticSearch instance.  Duplo will add a prefix to the name.  You can retrieve the full name from the `domain_name` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "requireSsl": {
                        "type": "boolean",
                        "description": "Whether or not to require SSL for accessing this ElasticSearch instance.\n"
                    },
                    "selectedZone": {
                        "type": "integer",
                        "description": "The numerical index of the zone to launch this ElasticSearch instance in.\n"
                    },
                    "snapshotOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsElasticsearchSnapshotOption:AwsElasticsearchSnapshotOption"
                        }
                    },
                    "storageSize": {
                        "type": "integer",
                        "description": "The storage volume size, in GB, for the ElasticSearch instance.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the ElasticSearch instance will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "useLatestTlsCipher": {
                        "type": "boolean",
                        "description": "Whether or not to use the latest TLS cipher for this ElasticSearch instance. For govcloud environments this should be set to true\n"
                    },
                    "vpcOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsElasticsearchVpcOption:AwsElasticsearchVpcOption"
                        },
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsHost:AwsHost": {
            "description": "## Example Usage\n\n### Deploy a host which will be used for DuploCloud platform's native container agent to deploy native containers\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Before creating a host, you must first set up the infrastructure without an eks cluster. Then, you must create a tenant inside the infra. Below is the resource for creating the infrastructure.\nconst infra = new duplocloud.Infrastructure(\"infra\", {\n    infraName: \"dev\",\n    cloud: 0,\n    region: \"us-east-1\",\n    enableK8Cluster: false,\n    addressPrefix: \"10.13.0.0/16\",\n});\n// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"dev\",\n    planId: infra.infraName,\n});\n// Create a data source to retrieve the Machine Image ID to be used by the host\nconst image = duplocloud.getNativeHostImageOutput({\n    tenantId: tenant.tenantId,\n    isKubernetes: false,\n});\nconst native = new duplocloud.AwsHost(\"native\", {\n    tenantId: tenant.tenantId,\n    friendlyName: \"host01\",\n    imageId: image.apply(image =\u003e image.imageId),\n    capacity: \"t3a.medium\",\n    agentPlatform: 0,\n    zone: 0,\n    userAccount: tenant.accountName,\n    metadatas: [{\n        key: \"OsDiskSize\",\n        value: \"20\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Before creating a host, you must first set up the infrastructure without an eks cluster. Then, you must create a tenant inside the infra. Below is the resource for creating the infrastructure.\ninfra = duplocloud.Infrastructure(\"infra\",\n    infra_name=\"dev\",\n    cloud=0,\n    region=\"us-east-1\",\n    enable_k8_cluster=False,\n    address_prefix=\"10.13.0.0/16\")\n# Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"dev\",\n    plan_id=infra.infra_name)\n# Create a data source to retrieve the Machine Image ID to be used by the host\nimage = duplocloud.get_native_host_image_output(tenant_id=tenant.tenant_id,\n    is_kubernetes=False)\nnative = duplocloud.AwsHost(\"native\",\n    tenant_id=tenant.tenant_id,\n    friendly_name=\"host01\",\n    image_id=image.image_id,\n    capacity=\"t3a.medium\",\n    agent_platform=0,\n    zone=0,\n    user_account=tenant.account_name,\n    metadatas=[{\n        \"key\": \"OsDiskSize\",\n        \"value\": \"20\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Before creating a host, you must first set up the infrastructure without an eks cluster. Then, you must create a tenant inside the infra. Below is the resource for creating the infrastructure.\n    var infra = new Duplocloud.Infrastructure(\"infra\", new()\n    {\n        InfraName = \"dev\",\n        Cloud = 0,\n        Region = \"us-east-1\",\n        EnableK8Cluster = false,\n        AddressPrefix = \"10.13.0.0/16\",\n    });\n\n    // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"dev\",\n        PlanId = infra.InfraName,\n    });\n\n    // Create a data source to retrieve the Machine Image ID to be used by the host\n    var image = Duplocloud.GetNativeHostImage.Invoke(new()\n    {\n        TenantId = tenant.TenantId,\n        IsKubernetes = false,\n    });\n\n    var native = new Duplocloud.AwsHost(\"native\", new()\n    {\n        TenantId = tenant.TenantId,\n        FriendlyName = \"host01\",\n        ImageId = image.Apply(getNativeHostImageResult =\u003e getNativeHostImageResult.ImageId),\n        Capacity = \"t3a.medium\",\n        AgentPlatform = 0,\n        Zone = 0,\n        UserAccount = tenant.AccountName,\n        Metadatas = new[]\n        {\n            new Duplocloud.Inputs.AwsHostMetadataArgs\n            {\n                Key = \"OsDiskSize\",\n                Value = \"20\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Before creating a host, you must first set up the infrastructure without an eks cluster. Then, you must create a tenant inside the infra. Below is the resource for creating the infrastructure.\n\t\tinfra, err := duplocloud.NewInfrastructure(ctx, \"infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"dev\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-east-1\"),\n\t\t\tEnableK8Cluster: pulumi.Bool(false),\n\t\t\tAddressPrefix:   pulumi.String(\"10.13.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n\t\ttenant, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"dev\"),\n\t\t\tPlanId:      infra.InfraName,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a data source to retrieve the Machine Image ID to be used by the host\n\t\timage := duplocloud.GetNativeHostImageOutput(ctx, duplocloud.GetNativeHostImageOutputArgs{\n\t\t\tTenantId:     tenant.TenantId,\n\t\t\tIsKubernetes: pulumi.Bool(false),\n\t\t}, nil)\n\t\t_, err = duplocloud.NewAwsHost(ctx, \"native\", \u0026duplocloud.AwsHostArgs{\n\t\t\tTenantId:     tenant.TenantId,\n\t\t\tFriendlyName: pulumi.String(\"host01\"),\n\t\t\tImageId: pulumi.String(image.ApplyT(func(image duplocloud.GetNativeHostImageResult) (*string, error) {\n\t\t\t\treturn \u0026image.ImageId, nil\n\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t\tCapacity:      pulumi.String(\"t3a.medium\"),\n\t\t\tAgentPlatform: pulumi.Int(0),\n\t\t\tZone:          pulumi.Int(0),\n\t\t\tUserAccount:   tenant.AccountName,\n\t\t\tMetadatas: duplocloud.AwsHostMetadataArray{\n\t\t\t\t\u0026duplocloud.AwsHostMetadataArgs{\n\t\t\t\t\tKey:   pulumi.String(\"OsDiskSize\"),\n\t\t\t\t\tValue: pulumi.String(\"20\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetNativeHostImageArgs;\nimport com.pulumi.duplocloud.AwsHost;\nimport com.pulumi.duplocloud.AwsHostArgs;\nimport com.pulumi.duplocloud.inputs.AwsHostMetadataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Before creating a host, you must first set up the infrastructure without an eks cluster. Then, you must create a tenant inside the infra. Below is the resource for creating the infrastructure.\n        var infra = new Infrastructure(\"infra\", InfrastructureArgs.builder()\n            .infraName(\"dev\")\n            .cloud(0)\n            .region(\"us-east-1\")\n            .enableK8Cluster(false)\n            .addressPrefix(\"10.13.0.0/16\")\n            .build());\n\n        // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"dev\")\n            .planId(infra.infraName())\n            .build());\n\n        // Create a data source to retrieve the Machine Image ID to be used by the host\n        final var image = DuplocloudFunctions.getNativeHostImage(GetNativeHostImageArgs.builder()\n            .tenantId(tenant.tenantId())\n            .isKubernetes(false)\n            .build());\n\n        var native_ = new AwsHost(\"native\", AwsHostArgs.builder()\n            .tenantId(tenant.tenantId())\n            .friendlyName(\"host01\")\n            .imageId(image.applyValue(getNativeHostImageResult -\u003e getNativeHostImageResult).applyValue(image -\u003e image.applyValue(getNativeHostImageResult -\u003e getNativeHostImageResult.imageId())))\n            .capacity(\"t3a.medium\")\n            .agentPlatform(0)\n            .zone(0)\n            .userAccount(tenant.accountName())\n            .metadatas(AwsHostMetadataArgs.builder()\n                .key(\"OsDiskSize\")\n                .value(\"20\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Before creating a host, you must first set up the infrastructure without an eks cluster. Then, you must create a tenant inside the infra. Below is the resource for creating the infrastructure.\n  infra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: dev\n      cloud: 0 # AWS Cloud\n      region: us-east-1\n      enableK8Cluster: false\n      addressPrefix: 10.13.0.0/16\n  # Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: dev\n      planId: ${infra.infraName}\n  native:\n    type: duplocloud:AwsHost\n    properties:\n      tenantId: ${tenant.tenantId}\n      friendlyName: host01\n      imageId: ${image.imageId}\n      capacity: t3a.medium\n      agentPlatform: 0 # Duplo native container agent\n      zone: 0 # Zone A\n      userAccount: ${tenant.accountName}\n      metadatas:\n        - key: OsDiskSize\n          value: '20'\nvariables:\n  # Create a data source to retrieve the Machine Image ID to be used by the host\n  image:\n    fn::invoke:\n      function: duplocloud:getNativeHostImage\n      arguments:\n        tenantId: ${tenant.tenantId}\n        isKubernetes: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create an EKS worker node for deployment of the Kubernetes applications \n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Before creating the EKS worker node, you must first set up the infrastructure with EKS cluster enabled and a tenant. Below is the resource for creating the infrastructure.\nconst infra = new duplocloud.Infrastructure(\"infra\", {\n    infraName: \"dev\",\n    cloud: 0,\n    region: \"us-east-1\",\n    enableK8Cluster: true,\n    addressPrefix: \"10.13.0.0/16\",\n});\n// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"dev\",\n    planId: infra.infraName,\n});\n// Create a data source to retrieve the Machine Image ID to be used by the host\nconst image = duplocloud.getNativeHostImageOutput({\n    tenantId: tenant.tenantId,\n    isKubernetes: true,\n});\nconst host = new duplocloud.AwsHost(\"host\", {\n    tenantId: tenant.tenantId,\n    friendlyName: \"host02\",\n    imageId: image.apply(image =\u003e image.imageId),\n    capacity: \"t3a.small\",\n    agentPlatform: 7,\n    zone: 0,\n    userAccount: tenant.accountName,\n    keypairType: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Before creating the EKS worker node, you must first set up the infrastructure with EKS cluster enabled and a tenant. Below is the resource for creating the infrastructure.\ninfra = duplocloud.Infrastructure(\"infra\",\n    infra_name=\"dev\",\n    cloud=0,\n    region=\"us-east-1\",\n    enable_k8_cluster=True,\n    address_prefix=\"10.13.0.0/16\")\n# Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"dev\",\n    plan_id=infra.infra_name)\n# Create a data source to retrieve the Machine Image ID to be used by the host\nimage = duplocloud.get_native_host_image_output(tenant_id=tenant.tenant_id,\n    is_kubernetes=True)\nhost = duplocloud.AwsHost(\"host\",\n    tenant_id=tenant.tenant_id,\n    friendly_name=\"host02\",\n    image_id=image.image_id,\n    capacity=\"t3a.small\",\n    agent_platform=7,\n    zone=0,\n    user_account=tenant.account_name,\n    keypair_type=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Before creating the EKS worker node, you must first set up the infrastructure with EKS cluster enabled and a tenant. Below is the resource for creating the infrastructure.\n    var infra = new Duplocloud.Infrastructure(\"infra\", new()\n    {\n        InfraName = \"dev\",\n        Cloud = 0,\n        Region = \"us-east-1\",\n        EnableK8Cluster = true,\n        AddressPrefix = \"10.13.0.0/16\",\n    });\n\n    // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"dev\",\n        PlanId = infra.InfraName,\n    });\n\n    // Create a data source to retrieve the Machine Image ID to be used by the host\n    var image = Duplocloud.GetNativeHostImage.Invoke(new()\n    {\n        TenantId = tenant.TenantId,\n        IsKubernetes = true,\n    });\n\n    var host = new Duplocloud.AwsHost(\"host\", new()\n    {\n        TenantId = tenant.TenantId,\n        FriendlyName = \"host02\",\n        ImageId = image.Apply(getNativeHostImageResult =\u003e getNativeHostImageResult.ImageId),\n        Capacity = \"t3a.small\",\n        AgentPlatform = 7,\n        Zone = 0,\n        UserAccount = tenant.AccountName,\n        KeypairType = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Before creating the EKS worker node, you must first set up the infrastructure with EKS cluster enabled and a tenant. Below is the resource for creating the infrastructure.\n\t\tinfra, err := duplocloud.NewInfrastructure(ctx, \"infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"dev\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-east-1\"),\n\t\t\tEnableK8Cluster: pulumi.Bool(true),\n\t\t\tAddressPrefix:   pulumi.String(\"10.13.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n\t\ttenant, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"dev\"),\n\t\t\tPlanId:      infra.InfraName,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a data source to retrieve the Machine Image ID to be used by the host\n\t\timage := duplocloud.GetNativeHostImageOutput(ctx, duplocloud.GetNativeHostImageOutputArgs{\n\t\t\tTenantId:     tenant.TenantId,\n\t\t\tIsKubernetes: pulumi.Bool(true),\n\t\t}, nil)\n\t\t_, err = duplocloud.NewAwsHost(ctx, \"host\", \u0026duplocloud.AwsHostArgs{\n\t\t\tTenantId:     tenant.TenantId,\n\t\t\tFriendlyName: pulumi.String(\"host02\"),\n\t\t\tImageId: pulumi.String(image.ApplyT(func(image duplocloud.GetNativeHostImageResult) (*string, error) {\n\t\t\t\treturn \u0026image.ImageId, nil\n\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t\tCapacity:      pulumi.String(\"t3a.small\"),\n\t\t\tAgentPlatform: pulumi.Int(7),\n\t\t\tZone:          pulumi.Int(0),\n\t\t\tUserAccount:   tenant.AccountName,\n\t\t\tKeypairType:   pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetNativeHostImageArgs;\nimport com.pulumi.duplocloud.AwsHost;\nimport com.pulumi.duplocloud.AwsHostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Before creating the EKS worker node, you must first set up the infrastructure with EKS cluster enabled and a tenant. Below is the resource for creating the infrastructure.\n        var infra = new Infrastructure(\"infra\", InfrastructureArgs.builder()\n            .infraName(\"dev\")\n            .cloud(0)\n            .region(\"us-east-1\")\n            .enableK8Cluster(true)\n            .addressPrefix(\"10.13.0.0/16\")\n            .build());\n\n        // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"dev\")\n            .planId(infra.infraName())\n            .build());\n\n        // Create a data source to retrieve the Machine Image ID to be used by the host\n        final var image = DuplocloudFunctions.getNativeHostImage(GetNativeHostImageArgs.builder()\n            .tenantId(tenant.tenantId())\n            .isKubernetes(true)\n            .build());\n\n        var host = new AwsHost(\"host\", AwsHostArgs.builder()\n            .tenantId(tenant.tenantId())\n            .friendlyName(\"host02\")\n            .imageId(image.applyValue(getNativeHostImageResult -\u003e getNativeHostImageResult).applyValue(image -\u003e image.applyValue(getNativeHostImageResult -\u003e getNativeHostImageResult.imageId())))\n            .capacity(\"t3a.small\")\n            .agentPlatform(7)\n            .zone(0)\n            .userAccount(tenant.accountName())\n            .keypairType(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Before creating the EKS worker node, you must first set up the infrastructure with EKS cluster enabled and a tenant. Below is the resource for creating the infrastructure.\n  infra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: dev\n      cloud: 0 # AWS Cloud\n      region: us-east-1\n      enableK8Cluster: true\n      addressPrefix: 10.13.0.0/16\n  # Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: dev\n      planId: ${infra.infraName}\n  host:\n    type: duplocloud:AwsHost\n    properties:\n      tenantId: ${tenant.tenantId}\n      friendlyName: host02\n      imageId: ${image.imageId}\n      capacity: t3a.small\n      agentPlatform: 7 # Duplo EKS container agent\n      zone: 0 # Zone A\n      userAccount: ${tenant.accountName}\n      keypairType: 1\nvariables:\n  # Create a data source to retrieve the Machine Image ID to be used by the host\n  image:\n    fn::invoke:\n      function: duplocloud:getNativeHostImage\n      arguments:\n        tenantId: ${tenant.tenantId}\n        isKubernetes: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create an EKS worker node inside the 'dev' tenant for deployment of the Kubernetes applications, with instance metadata service\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Ensure the 'dev' tenant is already created before setting up the EKS worker node.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\nconst image = tenant.then(tenant =\u003e duplocloud.getNativeHostImage({\n    tenantId: tenant.id,\n    isKubernetes: true,\n}));\nconst host = new duplocloud.AwsHost(\"host\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    friendlyName: \"host03\",\n    imageId: image.then(image =\u003e image.imageId),\n    capacity: \"t3.small\",\n    agentPlatform: 7,\n    zone: 0,\n    userAccount: tenant.then(tenant =\u003e tenant.name),\n    keypairType: 1,\n    metadatas: [\n        {\n            key: \"OsDiskSize\",\n            value: \"20\",\n        },\n        {\n            key: \"MetadataServiceOption\",\n            value: \"enabled_v2_only\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Ensure the 'dev' tenant is already created before setting up the EKS worker node.\ntenant = duplocloud.get_tenant(name=\"dev\")\nimage = duplocloud.get_native_host_image(tenant_id=tenant.id,\n    is_kubernetes=True)\nhost = duplocloud.AwsHost(\"host\",\n    tenant_id=tenant.id,\n    friendly_name=\"host03\",\n    image_id=image.image_id,\n    capacity=\"t3.small\",\n    agent_platform=7,\n    zone=0,\n    user_account=tenant.name,\n    keypair_type=1,\n    metadatas=[\n        {\n            \"key\": \"OsDiskSize\",\n            \"value\": \"20\",\n        },\n        {\n            \"key\": \"MetadataServiceOption\",\n            \"value\": \"enabled_v2_only\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'dev' tenant is already created before setting up the EKS worker node.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    var image = Duplocloud.GetNativeHostImage.Invoke(new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        IsKubernetes = true,\n    });\n\n    var host = new Duplocloud.AwsHost(\"host\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        FriendlyName = \"host03\",\n        ImageId = image.Apply(getNativeHostImageResult =\u003e getNativeHostImageResult.ImageId),\n        Capacity = \"t3.small\",\n        AgentPlatform = 7,\n        Zone = 0,\n        UserAccount = tenant.Apply(getTenantResult =\u003e getTenantResult.Name),\n        KeypairType = 1,\n        Metadatas = new[]\n        {\n            new Duplocloud.Inputs.AwsHostMetadataArgs\n            {\n                Key = \"OsDiskSize\",\n                Value = \"20\",\n            },\n            new Duplocloud.Inputs.AwsHostMetadataArgs\n            {\n                Key = \"MetadataServiceOption\",\n                Value = \"enabled_v2_only\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'dev' tenant is already created before setting up the EKS worker node.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\timage, err := duplocloud.GetNativeHostImage(ctx, \u0026duplocloud.GetNativeHostImageArgs{\n\t\t\tTenantId:     tenant.Id,\n\t\t\tIsKubernetes: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsHost(ctx, \"host\", \u0026duplocloud.AwsHostArgs{\n\t\t\tTenantId:      pulumi.String(tenant.Id),\n\t\t\tFriendlyName:  pulumi.String(\"host03\"),\n\t\t\tImageId:       pulumi.String(image.ImageId),\n\t\t\tCapacity:      pulumi.String(\"t3.small\"),\n\t\t\tAgentPlatform: pulumi.Int(7),\n\t\t\tZone:          pulumi.Int(0),\n\t\t\tUserAccount:   pulumi.String(tenant.Name),\n\t\t\tKeypairType:   pulumi.Int(1),\n\t\t\tMetadatas: duplocloud.AwsHostMetadataArray{\n\t\t\t\t\u0026duplocloud.AwsHostMetadataArgs{\n\t\t\t\t\tKey:   pulumi.String(\"OsDiskSize\"),\n\t\t\t\t\tValue: pulumi.String(\"20\"),\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.AwsHostMetadataArgs{\n\t\t\t\t\tKey:   pulumi.String(\"MetadataServiceOption\"),\n\t\t\t\t\tValue: pulumi.String(\"enabled_v2_only\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.inputs.GetNativeHostImageArgs;\nimport com.pulumi.duplocloud.AwsHost;\nimport com.pulumi.duplocloud.AwsHostArgs;\nimport com.pulumi.duplocloud.inputs.AwsHostMetadataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'dev' tenant is already created before setting up the EKS worker node.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        final var image = DuplocloudFunctions.getNativeHostImage(GetNativeHostImageArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .isKubernetes(true)\n            .build());\n\n        var host = new AwsHost(\"host\", AwsHostArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .friendlyName(\"host03\")\n            .imageId(image.applyValue(getNativeHostImageResult -\u003e getNativeHostImageResult.imageId()))\n            .capacity(\"t3.small\")\n            .agentPlatform(7)\n            .zone(0)\n            .userAccount(tenant.applyValue(getTenantResult -\u003e getTenantResult.name()))\n            .keypairType(\"1\")\n            .metadatas(            \n                AwsHostMetadataArgs.builder()\n                    .key(\"OsDiskSize\")\n                    .value(\"20\")\n                    .build(),\n                AwsHostMetadataArgs.builder()\n                    .key(\"MetadataServiceOption\")\n                    .value(\"enabled_v2_only\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  host:\n    type: duplocloud:AwsHost\n    properties:\n      tenantId: ${tenant.id}\n      friendlyName: host03\n      imageId: ${image.imageId}\n      capacity: t3.small\n      agentPlatform: 7 # Duplo EKS agent\n      zone: 0 # Zone A\n      userAccount: ${tenant.name}\n      keypairType: '1'\n      metadatas:\n        - key: OsDiskSize\n          value: '20'\n        - key: MetadataServiceOption\n          value: enabled_v2_only\nvariables:\n  # Ensure the 'dev' tenant is already created before setting up the EKS worker node.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n  image:\n    fn::invoke:\n      function: duplocloud:getNativeHostImage\n      arguments:\n        tenantId: ${tenant.id}\n        isKubernetes: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS host\n\n - *TENANT_ID* is the tenant GUID\n\n - *INSTANCE_ID* is the AWS EC2 instance ID\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsHost:AwsHost myhost v2/subscriptions/*TENANT_ID*/NativeHostV2/*INSTANCE_ID*\n```\n\n",
            "properties": {
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent pool that this host is added to.\n"
                },
                "allocatedPublicIp": {
                    "type": "boolean",
                    "description": "Whether or not to allocate a public IP.\n"
                },
                "base64UserData": {
                    "type": "string",
                    "description": "Base64 encoded EC2 user data to associated with the host.\n"
                },
                "capacity": {
                    "type": "string",
                    "description": "The AWS EC2 instance type.\n"
                },
                "cloud": {
                    "type": "integer",
                    "description": "The numeric ID of the cloud provider to launch the host in.\n"
                },
                "customNodeLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specify the labels to attach to the nodes.\n"
                },
                "friendlyName": {
                    "type": "string",
                    "description": "The short name of the host.\n"
                },
                "identityRole": {
                    "type": "string",
                    "description": "The name of the IAM role associated with this host.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The AMI ID to use.\n"
                },
                "initialBase64UserData": {
                    "type": "string"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The AWS EC2 instance ID of the host.\n"
                },
                "isEbsOptimized": {
                    "type": "boolean"
                },
                "isMinion": {
                    "type": "boolean"
                },
                "keypairType": {
                    "type": "integer",
                    "description": "The numeric ID of the keypair type being used.Should be one of: - `0` : Default - `1` : ED25519 - `2` : RSA (deprecated\n- some operating systems no longer support it)\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsHostMetadata:AwsHostMetadata"
                    },
                    "description": "Configuration metadata used when creating the host.\u003cbr\u003e*Note: To configure OS disk size OsDiskSize can be specified as\nKey and its size as value, size value should be atleast 10*\n"
                },
                "minionTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsHostMinionTag:AwsHostMinionTag"
                    },
                    "description": "A map of tags to assign to the resource. Example - `AllocationTags` can be passed as tag key with any value.\n"
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsHostNetworkInterface:AwsHostNetworkInterface"
                    },
                    "description": "An optional list of custom network interface configurations to use when creating the host.\n"
                },
                "prependUserData": {
                    "type": "boolean",
                    "description": "Bootstrap an EKS host with Duplo's user data, prepending it to custom user data if also provided.\n"
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "The primary private IP address assigned to the host.\n"
                },
                "publicIpAddress": {
                    "type": "string",
                    "description": "The primary public IP address assigned to the host.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the host.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsHostTag:AwsHostTag"
                    }
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsHostTaint:AwsHostTaint"
                    },
                    "description": "Specify taints to attach to the nodes, to repel other nodes with different toleration\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the host will be created in.\n"
                },
                "userAccount": {
                    "type": "string",
                    "description": "The name of the tenant that the host will be created in.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsHostVolume:AwsHostVolume"
                    },
                    "description": "Block to specify additional or secondary volume beyond the root device\n"
                },
                "waitUntilConnected": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Duplo can connect to the host, after creation.\n"
                },
                "zone": {
                    "type": "integer",
                    "description": "The availability zone to launch the host in, expressed as a number and starting at 0.\n"
                }
            },
            "required": [
                "base64UserData",
                "capacity",
                "friendlyName",
                "identityRole",
                "imageId",
                "initialBase64UserData",
                "instanceId",
                "keypairType",
                "metadatas",
                "minionTags",
                "networkInterfaces",
                "privateIpAddress",
                "publicIpAddress",
                "status",
                "tags",
                "tenantId",
                "userAccount",
                "volumes"
            ],
            "inputProperties": {
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent pool that this host is added to.\n",
                    "willReplaceOnChanges": true
                },
                "allocatedPublicIp": {
                    "type": "boolean",
                    "description": "Whether or not to allocate a public IP.\n",
                    "willReplaceOnChanges": true
                },
                "base64UserData": {
                    "type": "string",
                    "description": "Base64 encoded EC2 user data to associated with the host.\n",
                    "willReplaceOnChanges": true
                },
                "capacity": {
                    "type": "string",
                    "description": "The AWS EC2 instance type.\n",
                    "willReplaceOnChanges": true
                },
                "cloud": {
                    "type": "integer",
                    "description": "The numeric ID of the cloud provider to launch the host in.\n",
                    "willReplaceOnChanges": true
                },
                "customNodeLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specify the labels to attach to the nodes.\n",
                    "willReplaceOnChanges": true
                },
                "friendlyName": {
                    "type": "string",
                    "description": "The short name of the host.\n",
                    "willReplaceOnChanges": true
                },
                "imageId": {
                    "type": "string",
                    "description": "The AMI ID to use.\n",
                    "willReplaceOnChanges": true
                },
                "isEbsOptimized": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "isMinion": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "keypairType": {
                    "type": "integer",
                    "description": "The numeric ID of the keypair type being used.Should be one of: - `0` : Default - `1` : ED25519 - `2` : RSA (deprecated\n- some operating systems no longer support it)\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsHostMetadata:AwsHostMetadata"
                    },
                    "description": "Configuration metadata used when creating the host.\u003cbr\u003e*Note: To configure OS disk size OsDiskSize can be specified as\nKey and its size as value, size value should be atleast 10*\n"
                },
                "minionTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsHostMinionTag:AwsHostMinionTag"
                    },
                    "description": "A map of tags to assign to the resource. Example - `AllocationTags` can be passed as tag key with any value.\n",
                    "willReplaceOnChanges": true
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsHostNetworkInterface:AwsHostNetworkInterface"
                    },
                    "description": "An optional list of custom network interface configurations to use when creating the host.\n",
                    "willReplaceOnChanges": true
                },
                "prependUserData": {
                    "type": "boolean",
                    "description": "Bootstrap an EKS host with Duplo's user data, prepending it to custom user data if also provided.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsHostTag:AwsHostTag"
                    },
                    "willReplaceOnChanges": true
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsHostTaint:AwsHostTaint"
                    },
                    "description": "Specify taints to attach to the nodes, to repel other nodes with different toleration\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the host will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "userAccount": {
                    "type": "string",
                    "description": "The name of the tenant that the host will be created in.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsHostVolume:AwsHostVolume"
                    },
                    "description": "Block to specify additional or secondary volume beyond the root device\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilConnected": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Duplo can connect to the host, after creation.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "integer",
                    "description": "The availability zone to launch the host in, expressed as a number and starting at 0.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "capacity",
                "friendlyName",
                "imageId",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsHost resources.\n",
                "properties": {
                    "agentPlatform": {
                        "type": "integer",
                        "description": "The numeric ID of the container agent pool that this host is added to.\n",
                        "willReplaceOnChanges": true
                    },
                    "allocatedPublicIp": {
                        "type": "boolean",
                        "description": "Whether or not to allocate a public IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "base64UserData": {
                        "type": "string",
                        "description": "Base64 encoded EC2 user data to associated with the host.\n",
                        "willReplaceOnChanges": true
                    },
                    "capacity": {
                        "type": "string",
                        "description": "The AWS EC2 instance type.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloud": {
                        "type": "integer",
                        "description": "The numeric ID of the cloud provider to launch the host in.\n",
                        "willReplaceOnChanges": true
                    },
                    "customNodeLabels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specify the labels to attach to the nodes.\n",
                        "willReplaceOnChanges": true
                    },
                    "friendlyName": {
                        "type": "string",
                        "description": "The short name of the host.\n",
                        "willReplaceOnChanges": true
                    },
                    "identityRole": {
                        "type": "string",
                        "description": "The name of the IAM role associated with this host.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The AMI ID to use.\n",
                        "willReplaceOnChanges": true
                    },
                    "initialBase64UserData": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The AWS EC2 instance ID of the host.\n"
                    },
                    "isEbsOptimized": {
                        "type": "boolean",
                        "willReplaceOnChanges": true
                    },
                    "isMinion": {
                        "type": "boolean",
                        "willReplaceOnChanges": true
                    },
                    "keypairType": {
                        "type": "integer",
                        "description": "The numeric ID of the keypair type being used.Should be one of: - `0` : Default - `1` : ED25519 - `2` : RSA (deprecated\n- some operating systems no longer support it)\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsHostMetadata:AwsHostMetadata"
                        },
                        "description": "Configuration metadata used when creating the host.\u003cbr\u003e*Note: To configure OS disk size OsDiskSize can be specified as\nKey and its size as value, size value should be atleast 10*\n"
                    },
                    "minionTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsHostMinionTag:AwsHostMinionTag"
                        },
                        "description": "A map of tags to assign to the resource. Example - `AllocationTags` can be passed as tag key with any value.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsHostNetworkInterface:AwsHostNetworkInterface"
                        },
                        "description": "An optional list of custom network interface configurations to use when creating the host.\n",
                        "willReplaceOnChanges": true
                    },
                    "prependUserData": {
                        "type": "boolean",
                        "description": "Bootstrap an EKS host with Duplo's user data, prepending it to custom user data if also provided.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateIpAddress": {
                        "type": "string",
                        "description": "The primary private IP address assigned to the host.\n"
                    },
                    "publicIpAddress": {
                        "type": "string",
                        "description": "The primary public IP address assigned to the host.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the host.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsHostTag:AwsHostTag"
                        },
                        "willReplaceOnChanges": true
                    },
                    "taints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsHostTaint:AwsHostTaint"
                        },
                        "description": "Specify taints to attach to the nodes, to repel other nodes with different toleration\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the host will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "userAccount": {
                        "type": "string",
                        "description": "The name of the tenant that the host will be created in.\n"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsHostVolume:AwsHostVolume"
                        },
                        "description": "Block to specify additional or secondary volume beyond the root device\n",
                        "willReplaceOnChanges": true
                    },
                    "waitUntilConnected": {
                        "type": "boolean",
                        "description": "Whether or not to wait until Duplo can connect to the host, after creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "integer",
                        "description": "The availability zone to launch the host in, expressed as a number and starting at 0.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsKafkaCluster:AwsKafkaCluster": {
            "description": "`duplocloud.AwsKafkaCluster` manages an AWS MSK cluster in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst mycluster = new duplocloud.AwsKafkaCluster(\"mycluster\", {\n    tenantId: _this.tenantId,\n    name: \"mycluster\",\n    kafkaVersion: \"2.4.1.1\",\n    instanceType: \"kafka.m5.large\",\n    storageSize: 20,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmycluster = duplocloud.AwsKafkaCluster(\"mycluster\",\n    tenant_id=this[\"tenantId\"],\n    name=\"mycluster\",\n    kafka_version=\"2.4.1.1\",\n    instance_type=\"kafka.m5.large\",\n    storage_size=20)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var mycluster = new Duplocloud.AwsKafkaCluster(\"mycluster\", new()\n    {\n        TenantId = @this.TenantId,\n        Name = \"mycluster\",\n        KafkaVersion = \"2.4.1.1\",\n        InstanceType = \"kafka.m5.large\",\n        StorageSize = 20,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsKafkaCluster(ctx, \"mycluster\", \u0026duplocloud.AwsKafkaClusterArgs{\n\t\t\tTenantId:     pulumi.Any(this.TenantId),\n\t\t\tName:         pulumi.String(\"mycluster\"),\n\t\t\tKafkaVersion: pulumi.String(\"2.4.1.1\"),\n\t\t\tInstanceType: pulumi.String(\"kafka.m5.large\"),\n\t\t\tStorageSize:  pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsKafkaCluster;\nimport com.pulumi.duplocloud.AwsKafkaClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var mycluster = new AwsKafkaCluster(\"mycluster\", AwsKafkaClusterArgs.builder()\n            .tenantId(this_.tenantId())\n            .name(\"mycluster\")\n            .kafkaVersion(\"2.4.1.1\")\n            .instanceType(\"kafka.m5.large\")\n            .storageSize(20)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  mycluster:\n    type: duplocloud:AwsKafkaCluster\n    properties:\n      tenantId: ${this.tenantId}\n      name: mycluster\n      kafkaVersion: 2.4.1.1\n      instanceType: kafka.m5.large\n      storageSize: 20\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS Kafka cluster\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the AWS Kafka cluster\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsKafkaCluster:AwsKafkaCluster mycluster *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN of the Kafka cluster.\n"
                },
                "azDistribution": {
                    "type": "string",
                    "description": "The availability zone distribution used by the cluster.\n"
                },
                "configurationArn": {
                    "type": "string",
                    "description": "An ARN of a Kafka configuration to apply to the cluster.\n"
                },
                "configurationRevision": {
                    "type": "integer",
                    "description": "An revision of a Kafka configuration to apply to the cluster.\n"
                },
                "encryptionInTransit": {
                    "type": "string",
                    "description": "Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the Kakfa cluster.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The Kafka node instance type to use.\nSee the [AWS documentation](https://docs.aws.amazon.com/msk/latest/developerguide/msk-create-cluster.html) for more information.\n"
                },
                "kafkaVersion": {
                    "type": "string",
                    "description": "The version of the Kafka cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the Kafka cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "numberOfBrokerNodes": {
                    "type": "integer",
                    "description": "The desired total number of broker nodes in the kafka cluster.\n"
                },
                "plaintextBootstrapBrokerString": {
                    "type": "string",
                    "description": "The bootstrap broker connect string for plaintext (unencrypted) connections.\n"
                },
                "plaintextZookeeperConnectString": {
                    "type": "string",
                    "description": "The Zookeeper connect string for plaintext (unencrypted) connections.\n"
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of security groups used by the cluster.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The current state of the cluster.\n"
                },
                "storageSize": {
                    "type": "integer",
                    "description": "The size of the Kafka storage, in gigabytes.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of subnets that the cluster will be launched in.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the Kafka cluster will be created in.\n"
                },
                "tlsBootstrapBrokerString": {
                    "type": "string",
                    "description": "The bootstrap broker connect string for TLS (encrypted) connections.\n"
                },
                "tlsZookeeperConnectString": {
                    "type": "string",
                    "description": "The Zookeeper connect string for TLS (encrypted) connections.\n"
                }
            },
            "required": [
                "arn",
                "azDistribution",
                "configurationArn",
                "configurationRevision",
                "encryptionInTransit",
                "fullname",
                "instanceType",
                "kafkaVersion",
                "name",
                "numberOfBrokerNodes",
                "plaintextBootstrapBrokerString",
                "plaintextZookeeperConnectString",
                "securityGroups",
                "state",
                "storageSize",
                "subnets",
                "tags",
                "tenantId",
                "tlsBootstrapBrokerString",
                "tlsZookeeperConnectString"
            ],
            "inputProperties": {
                "configurationArn": {
                    "type": "string",
                    "description": "An ARN of a Kafka configuration to apply to the cluster.\n"
                },
                "configurationRevision": {
                    "type": "integer",
                    "description": "An revision of a Kafka configuration to apply to the cluster.\n"
                },
                "encryptionInTransit": {
                    "type": "string",
                    "description": "Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The Kafka node instance type to use.\nSee the [AWS documentation](https://docs.aws.amazon.com/msk/latest/developerguide/msk-create-cluster.html) for more information.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaVersion": {
                    "type": "string",
                    "description": "The version of the Kafka cluster.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the Kafka cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "storageSize": {
                    "type": "integer",
                    "description": "The size of the Kafka storage, in gigabytes.\n",
                    "willReplaceOnChanges": true
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of subnets that the cluster will be launched in.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the Kafka cluster will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceType",
                "kafkaVersion",
                "storageSize",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsKafkaCluster resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the Kafka cluster.\n"
                    },
                    "azDistribution": {
                        "type": "string",
                        "description": "The availability zone distribution used by the cluster.\n"
                    },
                    "configurationArn": {
                        "type": "string",
                        "description": "An ARN of a Kafka configuration to apply to the cluster.\n"
                    },
                    "configurationRevision": {
                        "type": "integer",
                        "description": "An revision of a Kafka configuration to apply to the cluster.\n"
                    },
                    "encryptionInTransit": {
                        "type": "string",
                        "description": "Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the Kakfa cluster.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The Kafka node instance type to use.\nSee the [AWS documentation](https://docs.aws.amazon.com/msk/latest/developerguide/msk-create-cluster.html) for more information.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaVersion": {
                        "type": "string",
                        "description": "The version of the Kafka cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the Kafka cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "numberOfBrokerNodes": {
                        "type": "integer",
                        "description": "The desired total number of broker nodes in the kafka cluster.\n"
                    },
                    "plaintextBootstrapBrokerString": {
                        "type": "string",
                        "description": "The bootstrap broker connect string for plaintext (unencrypted) connections.\n"
                    },
                    "plaintextZookeeperConnectString": {
                        "type": "string",
                        "description": "The Zookeeper connect string for plaintext (unencrypted) connections.\n"
                    },
                    "securityGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of security groups used by the cluster.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the cluster.\n"
                    },
                    "storageSize": {
                        "type": "integer",
                        "description": "The size of the Kafka storage, in gigabytes.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of subnets that the cluster will be launched in.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the Kafka cluster will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "tlsBootstrapBrokerString": {
                        "type": "string",
                        "description": "The bootstrap broker connect string for TLS (encrypted) connections.\n"
                    },
                    "tlsZookeeperConnectString": {
                        "type": "string",
                        "description": "The Zookeeper connect string for TLS (encrypted) connections.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsLambdaFunction:AwsLambdaFunction": {
            "description": "`duplocloud.AwsLambdaFunction` manages an AWS lambda function in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst myfunction = new duplocloud.AwsLambdaFunction(\"myfunction\", {\n    tenantId: _this.tenantId,\n    name: \"myfunction\",\n    description: \"A description of my function\",\n    runtime: \"java11\",\n    handler: \"com.example.MyFunction::handleRequest\",\n    s3Bucket: \"my-bucket-name\",\n    s3Key: \"my-function.zip\",\n    environment: {\n        variables: {\n            foo: \"bar\",\n        },\n    },\n    timeout: 60,\n    memorySize: 512,\n});\nconst thisfunction = new duplocloud.AwsLambdaFunction(\"thisfunction\", {\n    tenantId: _this.tenantId,\n    name: \"thisfunction\",\n    description: \"A description of my function\",\n    packageType: \"Image\",\n    imageUri: \"dkr.ecr.us-west-2.amazonaws.com/myimage:latest\",\n    imageConfig: {\n        commands: [\n            \"echo\",\n            \"hello world\",\n        ],\n        entryPoints: [\"echo hello workd\"],\n        workingDirectory: \"/tmp3\",\n    },\n    tracingConfig: {\n        mode: \"PassThrough\",\n    },\n    timeout: 60,\n    memorySize: 512,\n});\nconst edgefunction = new duplocloud.AwsLambdaFunction(\"edgefunction\", {\n    tenantId: \"c7163b39-43ca-4d44-81ce-9a323087039b\",\n    name: \"edgefunction\",\n    description: \"An example edge function\",\n    packageType: \"Image\",\n    imageUri: \"dkr.ecr.us-east-1.amazonaws.com/myimage:1.0\",\n    imageConfig: {\n        commands: [\n            \"echo\",\n            \"hello world\",\n        ],\n        entryPoints: [\"echo hello workd\"],\n        workingDirectory: \"/tmp3\",\n    },\n    tags: {\n        IsEdgeDeploy: \"true\",\n    },\n    timeout: 5,\n    memorySize: 128,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmyfunction = duplocloud.AwsLambdaFunction(\"myfunction\",\n    tenant_id=this[\"tenantId\"],\n    name=\"myfunction\",\n    description=\"A description of my function\",\n    runtime=\"java11\",\n    handler=\"com.example.MyFunction::handleRequest\",\n    s3_bucket=\"my-bucket-name\",\n    s3_key=\"my-function.zip\",\n    environment={\n        \"variables\": {\n            \"foo\": \"bar\",\n        },\n    },\n    timeout=60,\n    memory_size=512)\nthisfunction = duplocloud.AwsLambdaFunction(\"thisfunction\",\n    tenant_id=this[\"tenantId\"],\n    name=\"thisfunction\",\n    description=\"A description of my function\",\n    package_type=\"Image\",\n    image_uri=\"dkr.ecr.us-west-2.amazonaws.com/myimage:latest\",\n    image_config={\n        \"commands\": [\n            \"echo\",\n            \"hello world\",\n        ],\n        \"entry_points\": [\"echo hello workd\"],\n        \"working_directory\": \"/tmp3\",\n    },\n    tracing_config={\n        \"mode\": \"PassThrough\",\n    },\n    timeout=60,\n    memory_size=512)\nedgefunction = duplocloud.AwsLambdaFunction(\"edgefunction\",\n    tenant_id=\"c7163b39-43ca-4d44-81ce-9a323087039b\",\n    name=\"edgefunction\",\n    description=\"An example edge function\",\n    package_type=\"Image\",\n    image_uri=\"dkr.ecr.us-east-1.amazonaws.com/myimage:1.0\",\n    image_config={\n        \"commands\": [\n            \"echo\",\n            \"hello world\",\n        ],\n        \"entry_points\": [\"echo hello workd\"],\n        \"working_directory\": \"/tmp3\",\n    },\n    tags={\n        \"IsEdgeDeploy\": \"true\",\n    },\n    timeout=5,\n    memory_size=128)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var myfunction = new Duplocloud.AwsLambdaFunction(\"myfunction\", new()\n    {\n        TenantId = @this.TenantId,\n        Name = \"myfunction\",\n        Description = \"A description of my function\",\n        Runtime = \"java11\",\n        Handler = \"com.example.MyFunction::handleRequest\",\n        S3Bucket = \"my-bucket-name\",\n        S3Key = \"my-function.zip\",\n        Environment = new Duplocloud.Inputs.AwsLambdaFunctionEnvironmentArgs\n        {\n            Variables = \n            {\n                { \"foo\", \"bar\" },\n            },\n        },\n        Timeout = 60,\n        MemorySize = 512,\n    });\n\n    var thisfunction = new Duplocloud.AwsLambdaFunction(\"thisfunction\", new()\n    {\n        TenantId = @this.TenantId,\n        Name = \"thisfunction\",\n        Description = \"A description of my function\",\n        PackageType = \"Image\",\n        ImageUri = \"dkr.ecr.us-west-2.amazonaws.com/myimage:latest\",\n        ImageConfig = new Duplocloud.Inputs.AwsLambdaFunctionImageConfigArgs\n        {\n            Commands = new[]\n            {\n                \"echo\",\n                \"hello world\",\n            },\n            EntryPoints = new[]\n            {\n                \"echo hello workd\",\n            },\n            WorkingDirectory = \"/tmp3\",\n        },\n        TracingConfig = new Duplocloud.Inputs.AwsLambdaFunctionTracingConfigArgs\n        {\n            Mode = \"PassThrough\",\n        },\n        Timeout = 60,\n        MemorySize = 512,\n    });\n\n    var edgefunction = new Duplocloud.AwsLambdaFunction(\"edgefunction\", new()\n    {\n        TenantId = \"c7163b39-43ca-4d44-81ce-9a323087039b\",\n        Name = \"edgefunction\",\n        Description = \"An example edge function\",\n        PackageType = \"Image\",\n        ImageUri = \"dkr.ecr.us-east-1.amazonaws.com/myimage:1.0\",\n        ImageConfig = new Duplocloud.Inputs.AwsLambdaFunctionImageConfigArgs\n        {\n            Commands = new[]\n            {\n                \"echo\",\n                \"hello world\",\n            },\n            EntryPoints = new[]\n            {\n                \"echo hello workd\",\n            },\n            WorkingDirectory = \"/tmp3\",\n        },\n        Tags = \n        {\n            { \"IsEdgeDeploy\", \"true\" },\n        },\n        Timeout = 5,\n        MemorySize = 128,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsLambdaFunction(ctx, \"myfunction\", \u0026duplocloud.AwsLambdaFunctionArgs{\n\t\t\tTenantId:    pulumi.Any(this.TenantId),\n\t\t\tName:        pulumi.String(\"myfunction\"),\n\t\t\tDescription: pulumi.String(\"A description of my function\"),\n\t\t\tRuntime:     pulumi.String(\"java11\"),\n\t\t\tHandler:     pulumi.String(\"com.example.MyFunction::handleRequest\"),\n\t\t\tS3Bucket:    pulumi.String(\"my-bucket-name\"),\n\t\t\tS3Key:       pulumi.String(\"my-function.zip\"),\n\t\t\tEnvironment: \u0026duplocloud.AwsLambdaFunctionEnvironmentArgs{\n\t\t\t\tVariables: pulumi.StringMap{\n\t\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTimeout:    pulumi.Int(60),\n\t\t\tMemorySize: pulumi.Int(512),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsLambdaFunction(ctx, \"thisfunction\", \u0026duplocloud.AwsLambdaFunctionArgs{\n\t\t\tTenantId:    pulumi.Any(this.TenantId),\n\t\t\tName:        pulumi.String(\"thisfunction\"),\n\t\t\tDescription: pulumi.String(\"A description of my function\"),\n\t\t\tPackageType: pulumi.String(\"Image\"),\n\t\t\tImageUri:    pulumi.String(\"dkr.ecr.us-west-2.amazonaws.com/myimage:latest\"),\n\t\t\tImageConfig: \u0026duplocloud.AwsLambdaFunctionImageConfigArgs{\n\t\t\t\tCommands: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"echo\"),\n\t\t\t\t\tpulumi.String(\"hello world\"),\n\t\t\t\t},\n\t\t\t\tEntryPoints: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"echo hello workd\"),\n\t\t\t\t},\n\t\t\t\tWorkingDirectory: pulumi.String(\"/tmp3\"),\n\t\t\t},\n\t\t\tTracingConfig: \u0026duplocloud.AwsLambdaFunctionTracingConfigArgs{\n\t\t\t\tMode: pulumi.String(\"PassThrough\"),\n\t\t\t},\n\t\t\tTimeout:    pulumi.Int(60),\n\t\t\tMemorySize: pulumi.Int(512),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsLambdaFunction(ctx, \"edgefunction\", \u0026duplocloud.AwsLambdaFunctionArgs{\n\t\t\tTenantId:    pulumi.String(\"c7163b39-43ca-4d44-81ce-9a323087039b\"),\n\t\t\tName:        pulumi.String(\"edgefunction\"),\n\t\t\tDescription: pulumi.String(\"An example edge function\"),\n\t\t\tPackageType: pulumi.String(\"Image\"),\n\t\t\tImageUri:    pulumi.String(\"dkr.ecr.us-east-1.amazonaws.com/myimage:1.0\"),\n\t\t\tImageConfig: \u0026duplocloud.AwsLambdaFunctionImageConfigArgs{\n\t\t\t\tCommands: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"echo\"),\n\t\t\t\t\tpulumi.String(\"hello world\"),\n\t\t\t\t},\n\t\t\t\tEntryPoints: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"echo hello workd\"),\n\t\t\t\t},\n\t\t\t\tWorkingDirectory: pulumi.String(\"/tmp3\"),\n\t\t\t},\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"IsEdgeDeploy\": pulumi.String(\"true\"),\n\t\t\t},\n\t\t\tTimeout:    pulumi.Int(5),\n\t\t\tMemorySize: pulumi.Int(128),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsLambdaFunction;\nimport com.pulumi.duplocloud.AwsLambdaFunctionArgs;\nimport com.pulumi.duplocloud.inputs.AwsLambdaFunctionEnvironmentArgs;\nimport com.pulumi.duplocloud.inputs.AwsLambdaFunctionImageConfigArgs;\nimport com.pulumi.duplocloud.inputs.AwsLambdaFunctionTracingConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var myfunction = new AwsLambdaFunction(\"myfunction\", AwsLambdaFunctionArgs.builder()\n            .tenantId(this_.tenantId())\n            .name(\"myfunction\")\n            .description(\"A description of my function\")\n            .runtime(\"java11\")\n            .handler(\"com.example.MyFunction::handleRequest\")\n            .s3Bucket(\"my-bucket-name\")\n            .s3Key(\"my-function.zip\")\n            .environment(AwsLambdaFunctionEnvironmentArgs.builder()\n                .variables(Map.of(\"foo\", \"bar\"))\n                .build())\n            .timeout(60)\n            .memorySize(512)\n            .build());\n\n        var thisfunction = new AwsLambdaFunction(\"thisfunction\", AwsLambdaFunctionArgs.builder()\n            .tenantId(this_.tenantId())\n            .name(\"thisfunction\")\n            .description(\"A description of my function\")\n            .packageType(\"Image\")\n            .imageUri(\"dkr.ecr.us-west-2.amazonaws.com/myimage:latest\")\n            .imageConfig(AwsLambdaFunctionImageConfigArgs.builder()\n                .commands(                \n                    \"echo\",\n                    \"hello world\")\n                .entryPoints(\"echo hello workd\")\n                .workingDirectory(\"/tmp3\")\n                .build())\n            .tracingConfig(AwsLambdaFunctionTracingConfigArgs.builder()\n                .mode(\"PassThrough\")\n                .build())\n            .timeout(60)\n            .memorySize(512)\n            .build());\n\n        var edgefunction = new AwsLambdaFunction(\"edgefunction\", AwsLambdaFunctionArgs.builder()\n            .tenantId(\"c7163b39-43ca-4d44-81ce-9a323087039b\")\n            .name(\"edgefunction\")\n            .description(\"An example edge function\")\n            .packageType(\"Image\")\n            .imageUri(\"dkr.ecr.us-east-1.amazonaws.com/myimage:1.0\")\n            .imageConfig(AwsLambdaFunctionImageConfigArgs.builder()\n                .commands(                \n                    \"echo\",\n                    \"hello world\")\n                .entryPoints(\"echo hello workd\")\n                .workingDirectory(\"/tmp3\")\n                .build())\n            .tags(Map.of(\"IsEdgeDeploy\", true))\n            .timeout(5)\n            .memorySize(128)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  myfunction:\n    type: duplocloud:AwsLambdaFunction\n    properties:\n      tenantId: ${this.tenantId}\n      name: myfunction\n      description: A description of my function\n      runtime: java11\n      handler: com.example.MyFunction::handleRequest\n      s3Bucket: my-bucket-name\n      s3Key: my-function.zip\n      environment:\n        variables:\n          foo: bar\n      timeout: 60\n      memorySize: 512\n  thisfunction:\n    type: duplocloud:AwsLambdaFunction\n    properties:\n      tenantId: ${this.tenantId}\n      name: thisfunction\n      description: A description of my function\n      packageType: Image\n      imageUri: dkr.ecr.us-west-2.amazonaws.com/myimage:latest\n      imageConfig:\n        commands:\n          - echo\n          - hello world\n        entryPoints:\n          - echo hello workd\n        workingDirectory: /tmp3\n      tracingConfig:\n        mode: PassThrough\n      timeout: 60\n      memorySize: 512\n  edgefunction:\n    type: duplocloud:AwsLambdaFunction\n    properties:\n      tenantId: c7163b39-43ca-4d44-81ce-9a323087039b\n      name: edgefunction\n      description: An example edge function\n      packageType: Image\n      imageUri: dkr.ecr.us-east-1.amazonaws.com/myimage:1.0\n      imageConfig:\n        commands:\n          - echo\n          - hello world\n        entryPoints:\n          - echo hello workd\n        workingDirectory: /tmp3\n      tags:\n        IsEdgeDeploy: true\n      timeout: 5\n      memorySize: 128\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS lambda function\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the AWS lambda function\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsLambdaFunction:AwsLambdaFunction myfunction *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "architectures": {
                    "type": "string",
                    "description": "Instruction set architecture for your Lambda function. Valid values are `[x86_64]` and `[arm64]`. Default is `[x86_64]`\n"
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN of the lambda function.\n"
                },
                "deadLetterConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsLambdaFunctionDeadLetterConfig:AwsLambdaFunctionDeadLetterConfig"
                    },
                    "description": "Dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the lambda function.\n"
                },
                "environment": {
                    "$ref": "#/types/duplocloud:index/AwsLambdaFunctionEnvironment:AwsLambdaFunctionEnvironment",
                    "description": "Allow customization of the lambda execution environment.\n"
                },
                "ephemeralStorage": {
                    "type": "integer",
                    "description": "The Ephemeral Storage size, in MB, that your lambda function is allowed to use at runtime. Defaults to `512`.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the lambda function.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "The [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) of the lambda function in your code.\n"
                },
                "imageConfig": {
                    "$ref": "#/types/duplocloud:index/AwsLambdaFunctionImageConfig:AwsLambdaFunctionImageConfig",
                    "description": "Configuration for the Lambda function's container image\n"
                },
                "imageUri": {
                    "type": "string",
                    "description": "The docker image that holds the lambda function's code. Used (and required) only when `package_type` is `\"Image\"`. The image must be in a private ECR.\n"
                },
                "lastModified": {
                    "type": "string",
                    "description": "A timestamp string of lambda's last modification time.\n"
                },
                "layers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.\n"
                },
                "memorySize": {
                    "type": "integer",
                    "description": "The maximum amount of memory, in MB, that your lambda function is allowed to use at runtime. Defaults to `128`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the lambda function cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "packageType": {
                    "type": "string",
                    "description": "The type of lambda package.  Must be `Zip` or `Image`.  Defaults to `Zip`.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The IAM role for the lambda function's execution.\n"
                },
                "runtime": {
                    "type": "string",
                    "description": "The [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) that the lambda function needs.\n"
                },
                "s3Bucket": {
                    "type": "string",
                    "description": "The S3 bucket where the lambda function package is located. Used (and required) only when `package_type` is `\"Zip\"`.\n"
                },
                "s3Key": {
                    "type": "string",
                    "description": "The S3 key in the S3 bucket where the lambda function package is located. Used (and required) only when `package_type` is `\"Zip\"`.\n"
                },
                "sourceCodeHash": {
                    "type": "string",
                    "description": "The SHA 256 hash of the lambda functions's source code package.\n"
                },
                "sourceCodeSize": {
                    "type": "integer",
                    "description": "The size in bytes of the lambda functions's source code package.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of tags to assign to the object.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the lambda function will be created in.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The execution time limit for the lambda function. Defaults to `3`.\n"
                },
                "tracingConfig": {
                    "$ref": "#/types/duplocloud:index/AwsLambdaFunctionTracingConfig:AwsLambdaFunctionTracingConfig"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the lambda function.\n"
                }
            },
            "required": [
                "arn",
                "fullname",
                "handler",
                "lastModified",
                "name",
                "packageType",
                "role",
                "runtime",
                "sourceCodeHash",
                "sourceCodeSize",
                "tags",
                "tenantId",
                "tracingConfig",
                "version"
            ],
            "inputProperties": {
                "architectures": {
                    "type": "string",
                    "description": "Instruction set architecture for your Lambda function. Valid values are `[x86_64]` and `[arm64]`. Default is `[x86_64]`\n"
                },
                "deadLetterConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsLambdaFunctionDeadLetterConfig:AwsLambdaFunctionDeadLetterConfig"
                    },
                    "description": "Dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the lambda function.\n"
                },
                "environment": {
                    "$ref": "#/types/duplocloud:index/AwsLambdaFunctionEnvironment:AwsLambdaFunctionEnvironment",
                    "description": "Allow customization of the lambda execution environment.\n"
                },
                "ephemeralStorage": {
                    "type": "integer",
                    "description": "The Ephemeral Storage size, in MB, that your lambda function is allowed to use at runtime. Defaults to `512`.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "The [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) of the lambda function in your code.\n"
                },
                "imageConfig": {
                    "$ref": "#/types/duplocloud:index/AwsLambdaFunctionImageConfig:AwsLambdaFunctionImageConfig",
                    "description": "Configuration for the Lambda function's container image\n"
                },
                "imageUri": {
                    "type": "string",
                    "description": "The docker image that holds the lambda function's code. Used (and required) only when `package_type` is `\"Image\"`. The image must be in a private ECR.\n"
                },
                "layers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.\n"
                },
                "memorySize": {
                    "type": "integer",
                    "description": "The maximum amount of memory, in MB, that your lambda function is allowed to use at runtime. Defaults to `128`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the lambda function cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "packageType": {
                    "type": "string",
                    "description": "The type of lambda package.  Must be `Zip` or `Image`.  Defaults to `Zip`.\n"
                },
                "runtime": {
                    "type": "string",
                    "description": "The [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) that the lambda function needs.\n"
                },
                "s3Bucket": {
                    "type": "string",
                    "description": "The S3 bucket where the lambda function package is located. Used (and required) only when `package_type` is `\"Zip\"`.\n"
                },
                "s3Key": {
                    "type": "string",
                    "description": "The S3 key in the S3 bucket where the lambda function package is located. Used (and required) only when `package_type` is `\"Zip\"`.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of tags to assign to the object.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the lambda function will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "timeout": {
                    "type": "integer",
                    "description": "The execution time limit for the lambda function. Defaults to `3`.\n"
                },
                "tracingConfig": {
                    "$ref": "#/types/duplocloud:index/AwsLambdaFunctionTracingConfig:AwsLambdaFunctionTracingConfig"
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsLambdaFunction resources.\n",
                "properties": {
                    "architectures": {
                        "type": "string",
                        "description": "Instruction set architecture for your Lambda function. Valid values are `[x86_64]` and `[arm64]`. Default is `[x86_64]`\n"
                    },
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the lambda function.\n"
                    },
                    "deadLetterConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsLambdaFunctionDeadLetterConfig:AwsLambdaFunctionDeadLetterConfig"
                        },
                        "description": "Dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the lambda function.\n"
                    },
                    "environment": {
                        "$ref": "#/types/duplocloud:index/AwsLambdaFunctionEnvironment:AwsLambdaFunctionEnvironment",
                        "description": "Allow customization of the lambda execution environment.\n"
                    },
                    "ephemeralStorage": {
                        "type": "integer",
                        "description": "The Ephemeral Storage size, in MB, that your lambda function is allowed to use at runtime. Defaults to `512`.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the lambda function.\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "The [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) of the lambda function in your code.\n"
                    },
                    "imageConfig": {
                        "$ref": "#/types/duplocloud:index/AwsLambdaFunctionImageConfig:AwsLambdaFunctionImageConfig",
                        "description": "Configuration for the Lambda function's container image\n"
                    },
                    "imageUri": {
                        "type": "string",
                        "description": "The docker image that holds the lambda function's code. Used (and required) only when `package_type` is `\"Image\"`. The image must be in a private ECR.\n"
                    },
                    "lastModified": {
                        "type": "string",
                        "description": "A timestamp string of lambda's last modification time.\n"
                    },
                    "layers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.\n"
                    },
                    "memorySize": {
                        "type": "integer",
                        "description": "The maximum amount of memory, in MB, that your lambda function is allowed to use at runtime. Defaults to `128`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the lambda function cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "packageType": {
                        "type": "string",
                        "description": "The type of lambda package.  Must be `Zip` or `Image`.  Defaults to `Zip`.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The IAM role for the lambda function's execution.\n"
                    },
                    "runtime": {
                        "type": "string",
                        "description": "The [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) that the lambda function needs.\n"
                    },
                    "s3Bucket": {
                        "type": "string",
                        "description": "The S3 bucket where the lambda function package is located. Used (and required) only when `package_type` is `\"Zip\"`.\n"
                    },
                    "s3Key": {
                        "type": "string",
                        "description": "The S3 key in the S3 bucket where the lambda function package is located. Used (and required) only when `package_type` is `\"Zip\"`.\n"
                    },
                    "sourceCodeHash": {
                        "type": "string",
                        "description": "The SHA 256 hash of the lambda functions's source code package.\n"
                    },
                    "sourceCodeSize": {
                        "type": "integer",
                        "description": "The size in bytes of the lambda functions's source code package.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of tags to assign to the object.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the lambda function will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The execution time limit for the lambda function. Defaults to `3`.\n"
                    },
                    "tracingConfig": {
                        "$ref": "#/types/duplocloud:index/AwsLambdaFunctionTracingConfig:AwsLambdaFunctionTracingConfig"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the lambda function.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsLambdaFunctionEventConfig:AwsLambdaFunctionEventConfig": {
            "description": "`duplocloud.AwsLambdaFunctionEventConfig` manages an AWS lambda function in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"nondefault\",\n});\nconst myfunction = new duplocloud.AwsLambdaFunction(\"myfunction\", {\n    tenantId: myapp.tenantId,\n    name: \"myfunction\",\n    description: \"A description of my function\",\n    runtime: \"java11\",\n    handler: \"com.example.MyFunction::handleRequest\",\n    s3Bucket: \"my-bucket-name\",\n    s3Key: \"my-function.zip\",\n    environment: {\n        variables: {\n            foo: \"bar\",\n        },\n    },\n    timeout: 60,\n    memorySize: 512,\n});\nconst failureQueue = new duplocloud.AwsSqsQueue(\"failure_queue\", {\n    tenantId: myapp.tenantId,\n    name: \"failure_queue\",\n    fifoQueue: false,\n    messageRetentionSeconds: 345600,\n    visibilityTimeoutSeconds: 30,\n    contentBasedDeduplication: false,\n    delaySeconds: 10,\n});\nconst successQueue = new duplocloud.AwsSqsQueue(\"success_queue\", {\n    tenantId: myapp.tenantId,\n    name: \"success_queue\",\n    fifoQueue: false,\n    messageRetentionSeconds: 345600,\n    visibilityTimeoutSeconds: 30,\n    contentBasedDeduplication: false,\n    delaySeconds: 10,\n});\nconst event_invoke_config = new duplocloud.AwsLambdaFunctionEventConfig(\"event-invoke-config\", {\n    tenantId: myapp.tenantId,\n    functionName: myfunction.fullname,\n    maxRetryAttempts: 1,\n    maxEventAgeInSeconds: 100,\n    destinationConfig: {\n        onFailure: {\n            destination: failureQueue.arn,\n        },\n        onSuccess: {\n            destination: successQueue.arn,\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"nondefault\")\nmyfunction = duplocloud.AwsLambdaFunction(\"myfunction\",\n    tenant_id=myapp.tenant_id,\n    name=\"myfunction\",\n    description=\"A description of my function\",\n    runtime=\"java11\",\n    handler=\"com.example.MyFunction::handleRequest\",\n    s3_bucket=\"my-bucket-name\",\n    s3_key=\"my-function.zip\",\n    environment={\n        \"variables\": {\n            \"foo\": \"bar\",\n        },\n    },\n    timeout=60,\n    memory_size=512)\nfailure_queue = duplocloud.AwsSqsQueue(\"failure_queue\",\n    tenant_id=myapp.tenant_id,\n    name=\"failure_queue\",\n    fifo_queue=False,\n    message_retention_seconds=345600,\n    visibility_timeout_seconds=30,\n    content_based_deduplication=False,\n    delay_seconds=10)\nsuccess_queue = duplocloud.AwsSqsQueue(\"success_queue\",\n    tenant_id=myapp.tenant_id,\n    name=\"success_queue\",\n    fifo_queue=False,\n    message_retention_seconds=345600,\n    visibility_timeout_seconds=30,\n    content_based_deduplication=False,\n    delay_seconds=10)\nevent_invoke_config = duplocloud.AwsLambdaFunctionEventConfig(\"event-invoke-config\",\n    tenant_id=myapp.tenant_id,\n    function_name=myfunction.fullname,\n    max_retry_attempts=1,\n    max_event_age_in_seconds=100,\n    destination_config={\n        \"on_failure\": {\n            \"destination\": failure_queue.arn,\n        },\n        \"on_success\": {\n            \"destination\": success_queue.arn,\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"nondefault\",\n    });\n\n    var myfunction = new Duplocloud.AwsLambdaFunction(\"myfunction\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"myfunction\",\n        Description = \"A description of my function\",\n        Runtime = \"java11\",\n        Handler = \"com.example.MyFunction::handleRequest\",\n        S3Bucket = \"my-bucket-name\",\n        S3Key = \"my-function.zip\",\n        Environment = new Duplocloud.Inputs.AwsLambdaFunctionEnvironmentArgs\n        {\n            Variables = \n            {\n                { \"foo\", \"bar\" },\n            },\n        },\n        Timeout = 60,\n        MemorySize = 512,\n    });\n\n    var failureQueue = new Duplocloud.AwsSqsQueue(\"failure_queue\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"failure_queue\",\n        FifoQueue = false,\n        MessageRetentionSeconds = 345600,\n        VisibilityTimeoutSeconds = 30,\n        ContentBasedDeduplication = false,\n        DelaySeconds = 10,\n    });\n\n    var successQueue = new Duplocloud.AwsSqsQueue(\"success_queue\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"success_queue\",\n        FifoQueue = false,\n        MessageRetentionSeconds = 345600,\n        VisibilityTimeoutSeconds = 30,\n        ContentBasedDeduplication = false,\n        DelaySeconds = 10,\n    });\n\n    var event_invoke_config = new Duplocloud.AwsLambdaFunctionEventConfig(\"event-invoke-config\", new()\n    {\n        TenantId = myapp.TenantId,\n        FunctionName = myfunction.Fullname,\n        MaxRetryAttempts = 1,\n        MaxEventAgeInSeconds = 100,\n        DestinationConfig = new Duplocloud.Inputs.AwsLambdaFunctionEventConfigDestinationConfigArgs\n        {\n            OnFailure = new Duplocloud.Inputs.AwsLambdaFunctionEventConfigDestinationConfigOnFailureArgs\n            {\n                Destination = failureQueue.Arn,\n            },\n            OnSuccess = new Duplocloud.Inputs.AwsLambdaFunctionEventConfigDestinationConfigOnSuccessArgs\n            {\n                Destination = successQueue.Arn,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"nondefault\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyfunction, err := duplocloud.NewAwsLambdaFunction(ctx, \"myfunction\", \u0026duplocloud.AwsLambdaFunctionArgs{\n\t\t\tTenantId:    myapp.TenantId,\n\t\t\tName:        pulumi.String(\"myfunction\"),\n\t\t\tDescription: pulumi.String(\"A description of my function\"),\n\t\t\tRuntime:     pulumi.String(\"java11\"),\n\t\t\tHandler:     pulumi.String(\"com.example.MyFunction::handleRequest\"),\n\t\t\tS3Bucket:    pulumi.String(\"my-bucket-name\"),\n\t\t\tS3Key:       pulumi.String(\"my-function.zip\"),\n\t\t\tEnvironment: \u0026duplocloud.AwsLambdaFunctionEnvironmentArgs{\n\t\t\t\tVariables: pulumi.StringMap{\n\t\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTimeout:    pulumi.Int(60),\n\t\t\tMemorySize: pulumi.Int(512),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfailureQueue, err := duplocloud.NewAwsSqsQueue(ctx, \"failure_queue\", \u0026duplocloud.AwsSqsQueueArgs{\n\t\t\tTenantId:                  myapp.TenantId,\n\t\t\tName:                      pulumi.String(\"failure_queue\"),\n\t\t\tFifoQueue:                 pulumi.Bool(false),\n\t\t\tMessageRetentionSeconds:   pulumi.Int(345600),\n\t\t\tVisibilityTimeoutSeconds:  pulumi.Int(30),\n\t\t\tContentBasedDeduplication: pulumi.Bool(false),\n\t\t\tDelaySeconds:              pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsuccessQueue, err := duplocloud.NewAwsSqsQueue(ctx, \"success_queue\", \u0026duplocloud.AwsSqsQueueArgs{\n\t\t\tTenantId:                  myapp.TenantId,\n\t\t\tName:                      pulumi.String(\"success_queue\"),\n\t\t\tFifoQueue:                 pulumi.Bool(false),\n\t\t\tMessageRetentionSeconds:   pulumi.Int(345600),\n\t\t\tVisibilityTimeoutSeconds:  pulumi.Int(30),\n\t\t\tContentBasedDeduplication: pulumi.Bool(false),\n\t\t\tDelaySeconds:              pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsLambdaFunctionEventConfig(ctx, \"event-invoke-config\", \u0026duplocloud.AwsLambdaFunctionEventConfigArgs{\n\t\t\tTenantId:             myapp.TenantId,\n\t\t\tFunctionName:         myfunction.Fullname,\n\t\t\tMaxRetryAttempts:     pulumi.Int(1),\n\t\t\tMaxEventAgeInSeconds: pulumi.Int(100),\n\t\t\tDestinationConfig: \u0026duplocloud.AwsLambdaFunctionEventConfigDestinationConfigArgs{\n\t\t\t\tOnFailure: \u0026duplocloud.AwsLambdaFunctionEventConfigDestinationConfigOnFailureArgs{\n\t\t\t\t\tDestination: failureQueue.Arn,\n\t\t\t\t},\n\t\t\t\tOnSuccess: \u0026duplocloud.AwsLambdaFunctionEventConfigDestinationConfigOnSuccessArgs{\n\t\t\t\t\tDestination: successQueue.Arn,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsLambdaFunction;\nimport com.pulumi.duplocloud.AwsLambdaFunctionArgs;\nimport com.pulumi.duplocloud.inputs.AwsLambdaFunctionEnvironmentArgs;\nimport com.pulumi.duplocloud.AwsSqsQueue;\nimport com.pulumi.duplocloud.AwsSqsQueueArgs;\nimport com.pulumi.duplocloud.AwsLambdaFunctionEventConfig;\nimport com.pulumi.duplocloud.AwsLambdaFunctionEventConfigArgs;\nimport com.pulumi.duplocloud.inputs.AwsLambdaFunctionEventConfigDestinationConfigArgs;\nimport com.pulumi.duplocloud.inputs.AwsLambdaFunctionEventConfigDestinationConfigOnFailureArgs;\nimport com.pulumi.duplocloud.inputs.AwsLambdaFunctionEventConfigDestinationConfigOnSuccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"nondefault\")\n            .build());\n\n        var myfunction = new AwsLambdaFunction(\"myfunction\", AwsLambdaFunctionArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"myfunction\")\n            .description(\"A description of my function\")\n            .runtime(\"java11\")\n            .handler(\"com.example.MyFunction::handleRequest\")\n            .s3Bucket(\"my-bucket-name\")\n            .s3Key(\"my-function.zip\")\n            .environment(AwsLambdaFunctionEnvironmentArgs.builder()\n                .variables(Map.of(\"foo\", \"bar\"))\n                .build())\n            .timeout(60)\n            .memorySize(512)\n            .build());\n\n        var failureQueue = new AwsSqsQueue(\"failureQueue\", AwsSqsQueueArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"failure_queue\")\n            .fifoQueue(false)\n            .messageRetentionSeconds(345600)\n            .visibilityTimeoutSeconds(30)\n            .contentBasedDeduplication(false)\n            .delaySeconds(10)\n            .build());\n\n        var successQueue = new AwsSqsQueue(\"successQueue\", AwsSqsQueueArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"success_queue\")\n            .fifoQueue(false)\n            .messageRetentionSeconds(345600)\n            .visibilityTimeoutSeconds(30)\n            .contentBasedDeduplication(false)\n            .delaySeconds(10)\n            .build());\n\n        var event_invoke_config = new AwsLambdaFunctionEventConfig(\"event-invoke-config\", AwsLambdaFunctionEventConfigArgs.builder()\n            .tenantId(myapp.tenantId())\n            .functionName(myfunction.fullname())\n            .maxRetryAttempts(1)\n            .maxEventAgeInSeconds(100)\n            .destinationConfig(AwsLambdaFunctionEventConfigDestinationConfigArgs.builder()\n                .onFailure(AwsLambdaFunctionEventConfigDestinationConfigOnFailureArgs.builder()\n                    .destination(failureQueue.arn())\n                    .build())\n                .onSuccess(AwsLambdaFunctionEventConfigDestinationConfigOnSuccessArgs.builder()\n                    .destination(successQueue.arn())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: nondefault\n  myfunction:\n    type: duplocloud:AwsLambdaFunction\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: myfunction\n      description: A description of my function\n      runtime: java11\n      handler: com.example.MyFunction::handleRequest\n      s3Bucket: my-bucket-name\n      s3Key: my-function.zip\n      environment:\n        variables:\n          foo: bar\n      timeout: 60\n      memorySize: 512\n  failureQueue:\n    type: duplocloud:AwsSqsQueue\n    name: failure_queue\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: failure_queue\n      fifoQueue: false\n      messageRetentionSeconds: 345600\n      visibilityTimeoutSeconds: 30\n      contentBasedDeduplication: false\n      delaySeconds: 10\n  successQueue:\n    type: duplocloud:AwsSqsQueue\n    name: success_queue\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: success_queue\n      fifoQueue: false\n      messageRetentionSeconds: 345600\n      visibilityTimeoutSeconds: 30\n      contentBasedDeduplication: false\n      delaySeconds: 10\n  event-invoke-config:\n    type: duplocloud:AwsLambdaFunctionEventConfig\n    properties:\n      tenantId: ${myapp.tenantId}\n      functionName: ${myfunction.fullname}\n      maxRetryAttempts: 1\n      maxEventAgeInSeconds: 100\n      destinationConfig:\n        onFailure:\n          destination: ${failureQueue.arn}\n        onSuccess:\n          destination: ${successQueue.arn}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS lambda function event invoke config\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the AWS lambda function\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsLambdaFunctionEventConfig:AwsLambdaFunctionEventConfig event-invoke-config *TENANT_ID*/*SHORT_NAME*/eventInvokeConfig\n```\n\n",
            "properties": {
                "destinationConfig": {
                    "$ref": "#/types/duplocloud:index/AwsLambdaFunctionEventConfigDestinationConfig:AwsLambdaFunctionEventConfigDestinationConfig",
                    "description": "A configuration block to specify event destinations\n"
                },
                "functionName": {
                    "type": "string",
                    "description": "Name of Lambda function this configuration should apply to\n"
                },
                "maxEventAgeInSeconds": {
                    "type": "integer",
                    "description": "The maximum age of a request that Lambda sends to a function for processing\n"
                },
                "maxRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum number of attempts a Lambda function may retry in case of error\n"
                },
                "qualifier": {
                    "type": "string",
                    "description": "The qualifier for the lambda event invoke configuration\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the lambda asynchronous invocation configuration will be created in.\n"
                }
            },
            "required": [
                "functionName",
                "tenantId"
            ],
            "inputProperties": {
                "destinationConfig": {
                    "$ref": "#/types/duplocloud:index/AwsLambdaFunctionEventConfigDestinationConfig:AwsLambdaFunctionEventConfigDestinationConfig",
                    "description": "A configuration block to specify event destinations\n"
                },
                "functionName": {
                    "type": "string",
                    "description": "Name of Lambda function this configuration should apply to\n",
                    "willReplaceOnChanges": true
                },
                "maxEventAgeInSeconds": {
                    "type": "integer",
                    "description": "The maximum age of a request that Lambda sends to a function for processing\n"
                },
                "maxRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum number of attempts a Lambda function may retry in case of error\n"
                },
                "qualifier": {
                    "type": "string",
                    "description": "The qualifier for the lambda event invoke configuration\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the lambda asynchronous invocation configuration will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "functionName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsLambdaFunctionEventConfig resources.\n",
                "properties": {
                    "destinationConfig": {
                        "$ref": "#/types/duplocloud:index/AwsLambdaFunctionEventConfigDestinationConfig:AwsLambdaFunctionEventConfigDestinationConfig",
                        "description": "A configuration block to specify event destinations\n"
                    },
                    "functionName": {
                        "type": "string",
                        "description": "Name of Lambda function this configuration should apply to\n",
                        "willReplaceOnChanges": true
                    },
                    "maxEventAgeInSeconds": {
                        "type": "integer",
                        "description": "The maximum age of a request that Lambda sends to a function for processing\n"
                    },
                    "maxRetryAttempts": {
                        "type": "integer",
                        "description": "Maximum number of attempts a Lambda function may retry in case of error\n"
                    },
                    "qualifier": {
                        "type": "string",
                        "description": "The qualifier for the lambda event invoke configuration\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the lambda asynchronous invocation configuration will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsLambdaPermission:AwsLambdaPermission": {
            "description": "`duplocloud.AwsLambdaPermission` manages an AWS lambda permissions in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myfunction = new duplocloud.AwsLambdaFunction(\"myfunction\", {\n    tenantId: \"mytenant\",\n    name: \"myfunction\",\n    description: \"A description of my function\",\n    runtime: \"java11\",\n    handler: \"com.example.MyFunction::handleRequest\",\n    s3Bucket: \"my-bucket-name\",\n    s3Key: \"my-function.zip\",\n    environment: {\n        variables: {\n            foo: \"bar\",\n        },\n    },\n    timeout: 60,\n    memorySize: 512,\n});\nconst permission = new duplocloud.AwsLambdaPermission(\"permission\", {\n    statementId: \"AllowExecutionFromAPIGateway\",\n    action: \"lambda:InvokeFunction\",\n    functionName: myfunction.fullname,\n    principal: \"apigateway.amazonaws.com\",\n    sourceArn: \"arn:aws:execute-api:region:accountId:aws_api_gateway_rest_api.api.id/*/*/*\",\n    tenantId: \"mytenant\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyfunction = duplocloud.AwsLambdaFunction(\"myfunction\",\n    tenant_id=\"mytenant\",\n    name=\"myfunction\",\n    description=\"A description of my function\",\n    runtime=\"java11\",\n    handler=\"com.example.MyFunction::handleRequest\",\n    s3_bucket=\"my-bucket-name\",\n    s3_key=\"my-function.zip\",\n    environment={\n        \"variables\": {\n            \"foo\": \"bar\",\n        },\n    },\n    timeout=60,\n    memory_size=512)\npermission = duplocloud.AwsLambdaPermission(\"permission\",\n    statement_id=\"AllowExecutionFromAPIGateway\",\n    action=\"lambda:InvokeFunction\",\n    function_name=myfunction.fullname,\n    principal=\"apigateway.amazonaws.com\",\n    source_arn=\"arn:aws:execute-api:region:accountId:aws_api_gateway_rest_api.api.id/*/*/*\",\n    tenant_id=\"mytenant\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myfunction = new Duplocloud.AwsLambdaFunction(\"myfunction\", new()\n    {\n        TenantId = \"mytenant\",\n        Name = \"myfunction\",\n        Description = \"A description of my function\",\n        Runtime = \"java11\",\n        Handler = \"com.example.MyFunction::handleRequest\",\n        S3Bucket = \"my-bucket-name\",\n        S3Key = \"my-function.zip\",\n        Environment = new Duplocloud.Inputs.AwsLambdaFunctionEnvironmentArgs\n        {\n            Variables = \n            {\n                { \"foo\", \"bar\" },\n            },\n        },\n        Timeout = 60,\n        MemorySize = 512,\n    });\n\n    var permission = new Duplocloud.AwsLambdaPermission(\"permission\", new()\n    {\n        StatementId = \"AllowExecutionFromAPIGateway\",\n        Action = \"lambda:InvokeFunction\",\n        FunctionName = myfunction.Fullname,\n        Principal = \"apigateway.amazonaws.com\",\n        SourceArn = \"arn:aws:execute-api:region:accountId:aws_api_gateway_rest_api.api.id/*/*/*\",\n        TenantId = \"mytenant\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyfunction, err := duplocloud.NewAwsLambdaFunction(ctx, \"myfunction\", \u0026duplocloud.AwsLambdaFunctionArgs{\n\t\t\tTenantId:    pulumi.String(\"mytenant\"),\n\t\t\tName:        pulumi.String(\"myfunction\"),\n\t\t\tDescription: pulumi.String(\"A description of my function\"),\n\t\t\tRuntime:     pulumi.String(\"java11\"),\n\t\t\tHandler:     pulumi.String(\"com.example.MyFunction::handleRequest\"),\n\t\t\tS3Bucket:    pulumi.String(\"my-bucket-name\"),\n\t\t\tS3Key:       pulumi.String(\"my-function.zip\"),\n\t\t\tEnvironment: \u0026duplocloud.AwsLambdaFunctionEnvironmentArgs{\n\t\t\t\tVariables: pulumi.StringMap{\n\t\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTimeout:    pulumi.Int(60),\n\t\t\tMemorySize: pulumi.Int(512),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsLambdaPermission(ctx, \"permission\", \u0026duplocloud.AwsLambdaPermissionArgs{\n\t\t\tStatementId:  pulumi.String(\"AllowExecutionFromAPIGateway\"),\n\t\t\tAction:       pulumi.String(\"lambda:InvokeFunction\"),\n\t\t\tFunctionName: myfunction.Fullname,\n\t\t\tPrincipal:    pulumi.String(\"apigateway.amazonaws.com\"),\n\t\t\tSourceArn:    pulumi.String(\"arn:aws:execute-api:region:accountId:aws_api_gateway_rest_api.api.id/*/*/*\"),\n\t\t\tTenantId:     pulumi.String(\"mytenant\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.AwsLambdaFunction;\nimport com.pulumi.duplocloud.AwsLambdaFunctionArgs;\nimport com.pulumi.duplocloud.inputs.AwsLambdaFunctionEnvironmentArgs;\nimport com.pulumi.duplocloud.AwsLambdaPermission;\nimport com.pulumi.duplocloud.AwsLambdaPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myfunction = new AwsLambdaFunction(\"myfunction\", AwsLambdaFunctionArgs.builder()\n            .tenantId(\"mytenant\")\n            .name(\"myfunction\")\n            .description(\"A description of my function\")\n            .runtime(\"java11\")\n            .handler(\"com.example.MyFunction::handleRequest\")\n            .s3Bucket(\"my-bucket-name\")\n            .s3Key(\"my-function.zip\")\n            .environment(AwsLambdaFunctionEnvironmentArgs.builder()\n                .variables(Map.of(\"foo\", \"bar\"))\n                .build())\n            .timeout(60)\n            .memorySize(512)\n            .build());\n\n        var permission = new AwsLambdaPermission(\"permission\", AwsLambdaPermissionArgs.builder()\n            .statementId(\"AllowExecutionFromAPIGateway\")\n            .action(\"lambda:InvokeFunction\")\n            .functionName(myfunction.fullname())\n            .principal(\"apigateway.amazonaws.com\")\n            .sourceArn(\"arn:aws:execute-api:region:accountId:aws_api_gateway_rest_api.api.id/*/*/*\")\n            .tenantId(\"mytenant\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  permission:\n    type: duplocloud:AwsLambdaPermission\n    properties:\n      statementId: AllowExecutionFromAPIGateway\n      action: lambda:InvokeFunction\n      functionName: ${myfunction.fullname}\n      principal: apigateway.amazonaws.com\n      sourceArn: arn:aws:execute-api:region:accountId:aws_api_gateway_rest_api.api.id/*/*/*\n      tenantId: mytenant\n  myfunction:\n    type: duplocloud:AwsLambdaFunction\n    properties:\n      tenantId: mytenant\n      name: myfunction\n      description: A description of my function\n      runtime: java11\n      handler: com.example.MyFunction::handleRequest\n      s3Bucket: my-bucket-name\n      s3Key: my-function.zip\n      environment:\n        variables:\n          foo: bar\n      timeout: 60\n      memorySize: 512\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS lambda function permission\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the AWS lambda function\n\n - *STATEMENT_ID* is the statement ID of the permission\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsLambdaPermission:AwsLambdaPermission permission *TENANT_ID*/*SHORT_NAME*/*STATEMENT_ID*\n```\n\n",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)\n"
                },
                "eventSourceToken": {
                    "type": "string",
                    "description": "The Event Source Token to validate.\n"
                },
                "functionName": {
                    "type": "string",
                    "description": "Name of the Lambda function whose resource policy you are updating.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The principal who is getting this permission.\n"
                },
                "qualifier": {
                    "type": "string",
                    "description": "Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN.\n"
                },
                "sourceAccount": {
                    "type": "string",
                    "description": "This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.\n"
                },
                "sourceArn": {
                    "type": "string",
                    "description": "When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.\n"
                },
                "statementId": {
                    "type": "string",
                    "description": "A unique statement identifier.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the lambda permission will be created in.\n"
                }
            },
            "required": [
                "action",
                "functionName",
                "principal",
                "statementId",
                "tenantId"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)\n",
                    "willReplaceOnChanges": true
                },
                "eventSourceToken": {
                    "type": "string",
                    "description": "The Event Source Token to validate.\n"
                },
                "functionName": {
                    "type": "string",
                    "description": "Name of the Lambda function whose resource policy you are updating.\n",
                    "willReplaceOnChanges": true
                },
                "principal": {
                    "type": "string",
                    "description": "The principal who is getting this permission.\n",
                    "willReplaceOnChanges": true
                },
                "qualifier": {
                    "type": "string",
                    "description": "Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN.\n"
                },
                "sourceAccount": {
                    "type": "string",
                    "description": "This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.\n"
                },
                "sourceArn": {
                    "type": "string",
                    "description": "When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.\n"
                },
                "statementId": {
                    "type": "string",
                    "description": "A unique statement identifier.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the lambda permission will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "action",
                "functionName",
                "principal",
                "statementId",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsLambdaPermission resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)\n",
                        "willReplaceOnChanges": true
                    },
                    "eventSourceToken": {
                        "type": "string",
                        "description": "The Event Source Token to validate.\n"
                    },
                    "functionName": {
                        "type": "string",
                        "description": "Name of the Lambda function whose resource policy you are updating.\n",
                        "willReplaceOnChanges": true
                    },
                    "principal": {
                        "type": "string",
                        "description": "The principal who is getting this permission.\n",
                        "willReplaceOnChanges": true
                    },
                    "qualifier": {
                        "type": "string",
                        "description": "Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN.\n"
                    },
                    "sourceAccount": {
                        "type": "string",
                        "description": "This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.\n"
                    },
                    "sourceArn": {
                        "type": "string",
                        "description": "When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.\n"
                    },
                    "statementId": {
                        "type": "string",
                        "description": "A unique statement identifier.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the lambda permission will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsLaunchTemplate:AwsLaunchTemplate": {
            "description": "duplocloud_aws_launch_template creates the new version over current launch template version\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst lt = new duplocloud.AwsLaunchTemplate(\"lt\", {\n    tenantId: myapp.tenantId,\n    name: \"launch-template-name\",\n    instanceType: \"t3a.medium\",\n    version: \"1\",\n    versionDescription: \"launch template description\",\n    ami: \"ami-123test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nlt = duplocloud.AwsLaunchTemplate(\"lt\",\n    tenant_id=myapp.tenant_id,\n    name=\"launch-template-name\",\n    instance_type=\"t3a.medium\",\n    version=\"1\",\n    version_description=\"launch template description\",\n    ami=\"ami-123test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var lt = new Duplocloud.AwsLaunchTemplate(\"lt\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"launch-template-name\",\n        InstanceType = \"t3a.medium\",\n        Version = \"1\",\n        VersionDescription = \"launch template description\",\n        Ami = \"ami-123test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsLaunchTemplate(ctx, \"lt\", \u0026duplocloud.AwsLaunchTemplateArgs{\n\t\t\tTenantId:           myapp.TenantId,\n\t\t\tName:               pulumi.String(\"launch-template-name\"),\n\t\t\tInstanceType:       pulumi.String(\"t3a.medium\"),\n\t\t\tVersion:            pulumi.String(\"1\"),\n\t\t\tVersionDescription: pulumi.String(\"launch template description\"),\n\t\t\tAmi:                pulumi.String(\"ami-123test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsLaunchTemplate;\nimport com.pulumi.duplocloud.AwsLaunchTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var lt = new AwsLaunchTemplate(\"lt\", AwsLaunchTemplateArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"launch-template-name\")\n            .instanceType(\"t3a.medium\")\n            .version(\"1\")\n            .versionDescription(\"launch template description\")\n            .ami(\"ami-123test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  lt:\n    type: duplocloud:AwsLaunchTemplate\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: launch-template-name\n      instanceType: t3a.medium\n      version: '1'\n      versionDescription: launch template description\n      ami: ami-123test\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS launch template\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the name of the AWS launch template\n\n - *VERSION* available version of launch template\n\n```sh\n$ pulumi import duplocloud:index/awsLaunchTemplate:AwsLaunchTemplate lt *TENANT_ID*/launch-template/*NAME*/*VERSION*\n```\n\n",
            "properties": {
                "ami": {
                    "type": "string",
                    "description": "Asg ami to be used to update the version from the current version\n"
                },
                "defaultVersion": {
                    "type": "string",
                    "description": "The current default version of the launch template.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "Asg instance type to be used to update the version from the current version\n"
                },
                "latestVersion": {
                    "type": "string",
                    "description": "The latest launch template version\n"
                },
                "name": {
                    "type": "string",
                    "description": "The fullname of the asg group\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the launch template will be created in.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Any of the existing version of the launch template\n"
                },
                "versionDescription": {
                    "type": "string",
                    "description": "The version of the launch template\n"
                },
                "versionMetadata": {
                    "type": "string"
                }
            },
            "required": [
                "defaultVersion",
                "latestVersion",
                "name",
                "tenantId",
                "version",
                "versionDescription",
                "versionMetadata"
            ],
            "inputProperties": {
                "ami": {
                    "type": "string",
                    "description": "Asg ami to be used to update the version from the current version\n",
                    "willReplaceOnChanges": true
                },
                "instanceType": {
                    "type": "string",
                    "description": "Asg instance type to be used to update the version from the current version\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The fullname of the asg group\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the launch template will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "Any of the existing version of the launch template\n",
                    "willReplaceOnChanges": true
                },
                "versionDescription": {
                    "type": "string",
                    "description": "The version of the launch template\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId",
                "version",
                "versionDescription"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsLaunchTemplate resources.\n",
                "properties": {
                    "ami": {
                        "type": "string",
                        "description": "Asg ami to be used to update the version from the current version\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultVersion": {
                        "type": "string",
                        "description": "The current default version of the launch template.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "Asg instance type to be used to update the version from the current version\n",
                        "willReplaceOnChanges": true
                    },
                    "latestVersion": {
                        "type": "string",
                        "description": "The latest launch template version\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The fullname of the asg group\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the launch template will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Any of the existing version of the launch template\n",
                        "willReplaceOnChanges": true
                    },
                    "versionDescription": {
                        "type": "string",
                        "description": "The version of the launch template\n",
                        "willReplaceOnChanges": true
                    },
                    "versionMetadata": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsLaunchTemplateDefaultVersion:AwsLaunchTemplateDefaultVersion": {
            "description": "duplocloud_aws_launch_template_default_version helps to set or update default version of launch template\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst op = duplocloud.getAwsLaunchTemplateOutput({\n    tenantId: myapp.tenantId,\n    name: \"launch_template_name\",\n});\nconst name = new duplocloud.AwsLaunchTemplateDefaultVersion(\"name\", {\n    tenantId: op.apply(op =\u003e op.tenantId),\n    name: op.apply(op =\u003e op.name),\n    defaultVersion: op.apply(op =\u003e op.latestVersion),\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nop = duplocloud.get_aws_launch_template_output(tenant_id=myapp.tenant_id,\n    name=\"launch_template_name\")\nname = duplocloud.AwsLaunchTemplateDefaultVersion(\"name\",\n    tenant_id=op.tenant_id,\n    name=op.name,\n    default_version=op.latest_version)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var op = Duplocloud.GetAwsLaunchTemplate.Invoke(new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"launch_template_name\",\n    });\n\n    var name = new Duplocloud.AwsLaunchTemplateDefaultVersion(\"name\", new()\n    {\n        TenantId = op.Apply(getAwsLaunchTemplateResult =\u003e getAwsLaunchTemplateResult.TenantId),\n        Name = op.Apply(getAwsLaunchTemplateResult =\u003e getAwsLaunchTemplateResult.Name),\n        DefaultVersion = op.Apply(getAwsLaunchTemplateResult =\u003e getAwsLaunchTemplateResult.LatestVersion),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\top := duplocloud.LookupAwsLaunchTemplateOutput(ctx, duplocloud.GetAwsLaunchTemplateOutputArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tName:     pulumi.String(\"launch_template_name\"),\n\t\t}, nil)\n\t\t_, err = duplocloud.NewAwsLaunchTemplateDefaultVersion(ctx, \"name\", \u0026duplocloud.AwsLaunchTemplateDefaultVersionArgs{\n\t\t\tTenantId: pulumi.String(op.ApplyT(func(op duplocloud.GetAwsLaunchTemplateResult) (*string, error) {\n\t\t\t\treturn \u0026op.TenantId, nil\n\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t\tName: pulumi.String(op.ApplyT(func(op duplocloud.GetAwsLaunchTemplateResult) (*string, error) {\n\t\t\t\treturn \u0026op.Name, nil\n\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t\tDefaultVersion: pulumi.String(op.ApplyT(func(op duplocloud.GetAwsLaunchTemplateResult) (*string, error) {\n\t\t\t\treturn \u0026op.LatestVersion, nil\n\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetAwsLaunchTemplateArgs;\nimport com.pulumi.duplocloud.AwsLaunchTemplateDefaultVersion;\nimport com.pulumi.duplocloud.AwsLaunchTemplateDefaultVersionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        final var op = DuplocloudFunctions.getAwsLaunchTemplate(GetAwsLaunchTemplateArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"launch_template_name\")\n            .build());\n\n        var name = new AwsLaunchTemplateDefaultVersion(\"name\", AwsLaunchTemplateDefaultVersionArgs.builder()\n            .tenantId(op.applyValue(getAwsLaunchTemplateResult -\u003e getAwsLaunchTemplateResult).applyValue(op -\u003e op.applyValue(getAwsLaunchTemplateResult -\u003e getAwsLaunchTemplateResult.tenantId())))\n            .name(op.applyValue(getAwsLaunchTemplateResult -\u003e getAwsLaunchTemplateResult).applyValue(op -\u003e op.applyValue(getAwsLaunchTemplateResult -\u003e getAwsLaunchTemplateResult.name())))\n            .defaultVersion(op.applyValue(getAwsLaunchTemplateResult -\u003e getAwsLaunchTemplateResult).applyValue(op -\u003e op.applyValue(getAwsLaunchTemplateResult -\u003e getAwsLaunchTemplateResult.latestVersion())))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  name:\n    type: duplocloud:AwsLaunchTemplateDefaultVersion\n    properties:\n      tenantId: ${op.tenantId}\n      name: ${op.name}\n      defaultVersion: ${op.latestVersion}\nvariables:\n  op:\n    fn::invoke:\n      function: duplocloud:getAwsLaunchTemplate\n      arguments:\n        tenantId: ${myapp.tenantId}\n        name: launch_template_name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS launch template default version\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the name of the AWS launch template\n\n```sh\n$ pulumi import duplocloud:index/awsLaunchTemplateDefaultVersion:AwsLaunchTemplateDefaultVersion dlt *TENANT_ID*/launch-template/*NAME*\n```\n\n",
            "properties": {
                "defaultVersion": {
                    "type": "string",
                    "description": "The default version of the launch template to be set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The fullname of the asg group\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the launch template will be created in.\n"
                }
            },
            "required": [
                "defaultVersion",
                "name",
                "tenantId"
            ],
            "inputProperties": {
                "defaultVersion": {
                    "type": "string",
                    "description": "The default version of the launch template to be set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The fullname of the asg group\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the launch template will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "defaultVersion",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsLaunchTemplateDefaultVersion resources.\n",
                "properties": {
                    "defaultVersion": {
                        "type": "string",
                        "description": "The default version of the launch template to be set.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The fullname of the asg group\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the launch template will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsLbListenerRule:AwsLbListenerRule": {
            "description": "`duplocloud.AwsLbListenerRule` manages an AWS Listener Rule in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenantId = \"053a2efa-d03f-4e1d-b3b5-33c04cbed87e\";\nconst vpcId = \"vpc-0ba0667cfc200f060\";\nconst certArn = \"arn:aws:acm:us-west-2:957282632678:certificate/2e882320-5aa5-4b8d-881f-998050178205\";\nconst alb = new duplocloud.AwsLoadBalancer(\"alb\", {\n    tenantId: tenantId,\n    name: \"tst-alb\",\n    isInternal: true,\n    enableAccessLogs: true,\n    dropInvalidHeaders: true,\n});\nconst tg = new duplocloud.AwsLbTargetGroup(\"tg\", {\n    tenantId: tenantId,\n    name: \"tg1\",\n    port: 80,\n    protocol: \"HTTP\",\n    vpcId: vpcId,\n    targetType: \"instance\",\n});\nconst alb_listener = new duplocloud.AwsLoadBalancerListener(\"alb-listener\", {\n    tenantId: tenantId,\n    loadBalancerName: alb.name,\n    port: 8443,\n    protocol: \"HTTPS\",\n    targetGroupArn: tg.arn,\n    certificateArn: certArn,\n});\nconst static = new duplocloud.AwsLbListenerRule(\"static\", {\n    tenantId: tenantId,\n    listenerArn: alb_listener.arn,\n    priority: 100,\n    actions: [{\n        type: \"forward\",\n        targetGroupArn: tg.arn,\n    }],\n    conditions: [\n        {\n            pathPattern: {\n                values: [\"/static/*\"],\n            },\n        },\n        {\n            hostHeader: {\n                values: [\"example.com\"],\n            },\n        },\n    ],\n});\n// Forward action\nconst hostBasedWeightedRouting = new duplocloud.AwsLbListenerRule(\"host_based_weighted_routing\", {\n    tenantId: tenantId,\n    listenerArn: alb_listener.arn,\n    priority: 99,\n    actions: [{\n        type: \"forward\",\n        targetGroupArn: tg.arn,\n    }],\n    conditions: [{\n        hostHeader: {\n            values: [\"my-service.*.terraform.io\"],\n        },\n    }],\n});\n// Redirect action\nconst redirectHttpToHttps = new duplocloud.AwsLbListenerRule(\"redirect_http_to_https\", {\n    tenantId: tenantId,\n    listenerArn: alb_listener.arn,\n    priority: 98,\n    actions: [{\n        type: \"redirect\",\n        redirect: {\n            port: \"443\",\n            protocol: \"HTTPS\",\n            statusCode: \"HTTP_301\",\n        },\n    }],\n    conditions: [{\n        httpHeader: {\n            httpHeaderName: \"X-Forwarded-For\",\n            values: [\"192.168.1.*\"],\n        },\n    }],\n});\n// Fixed-response action\nconst healthCheck = new duplocloud.AwsLbListenerRule(\"health_check\", {\n    tenantId: tenantId,\n    listenerArn: alb_listener.arn,\n    priority: 97,\n    actions: [{\n        type: \"fixed-response\",\n        fixedResponse: {\n            contentType: \"text/plain\",\n            messageBody: \"HEALTHY\",\n            statusCode: \"200\",\n        },\n    }],\n    conditions: [{\n        queryStrings: [\n            {\n                key: \"health\",\n                value: \"check\",\n            },\n            {\n                key: \"foo\",\n                value: \"bar\",\n            },\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant_id = \"053a2efa-d03f-4e1d-b3b5-33c04cbed87e\"\nvpc_id = \"vpc-0ba0667cfc200f060\"\ncert_arn = \"arn:aws:acm:us-west-2:957282632678:certificate/2e882320-5aa5-4b8d-881f-998050178205\"\nalb = duplocloud.AwsLoadBalancer(\"alb\",\n    tenant_id=tenant_id,\n    name=\"tst-alb\",\n    is_internal=True,\n    enable_access_logs=True,\n    drop_invalid_headers=True)\ntg = duplocloud.AwsLbTargetGroup(\"tg\",\n    tenant_id=tenant_id,\n    name=\"tg1\",\n    port=80,\n    protocol=\"HTTP\",\n    vpc_id=vpc_id,\n    target_type=\"instance\")\nalb_listener = duplocloud.AwsLoadBalancerListener(\"alb-listener\",\n    tenant_id=tenant_id,\n    load_balancer_name=alb.name,\n    port=8443,\n    protocol=\"HTTPS\",\n    target_group_arn=tg.arn,\n    certificate_arn=cert_arn)\nstatic = duplocloud.AwsLbListenerRule(\"static\",\n    tenant_id=tenant_id,\n    listener_arn=alb_listener.arn,\n    priority=100,\n    actions=[{\n        \"type\": \"forward\",\n        \"target_group_arn\": tg.arn,\n    }],\n    conditions=[\n        {\n            \"path_pattern\": {\n                \"values\": [\"/static/*\"],\n            },\n        },\n        {\n            \"host_header\": {\n                \"values\": [\"example.com\"],\n            },\n        },\n    ])\n# Forward action\nhost_based_weighted_routing = duplocloud.AwsLbListenerRule(\"host_based_weighted_routing\",\n    tenant_id=tenant_id,\n    listener_arn=alb_listener.arn,\n    priority=99,\n    actions=[{\n        \"type\": \"forward\",\n        \"target_group_arn\": tg.arn,\n    }],\n    conditions=[{\n        \"host_header\": {\n            \"values\": [\"my-service.*.terraform.io\"],\n        },\n    }])\n# Redirect action\nredirect_http_to_https = duplocloud.AwsLbListenerRule(\"redirect_http_to_https\",\n    tenant_id=tenant_id,\n    listener_arn=alb_listener.arn,\n    priority=98,\n    actions=[{\n        \"type\": \"redirect\",\n        \"redirect\": {\n            \"port\": \"443\",\n            \"protocol\": \"HTTPS\",\n            \"status_code\": \"HTTP_301\",\n        },\n    }],\n    conditions=[{\n        \"http_header\": {\n            \"http_header_name\": \"X-Forwarded-For\",\n            \"values\": [\"192.168.1.*\"],\n        },\n    }])\n# Fixed-response action\nhealth_check = duplocloud.AwsLbListenerRule(\"health_check\",\n    tenant_id=tenant_id,\n    listener_arn=alb_listener.arn,\n    priority=97,\n    actions=[{\n        \"type\": \"fixed-response\",\n        \"fixed_response\": {\n            \"content_type\": \"text/plain\",\n            \"message_body\": \"HEALTHY\",\n            \"status_code\": \"200\",\n        },\n    }],\n    conditions=[{\n        \"query_strings\": [\n            {\n                \"key\": \"health\",\n                \"value\": \"check\",\n            },\n            {\n                \"key\": \"foo\",\n                \"value\": \"bar\",\n            },\n        ],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenantId = \"053a2efa-d03f-4e1d-b3b5-33c04cbed87e\";\n\n    var vpcId = \"vpc-0ba0667cfc200f060\";\n\n    var certArn = \"arn:aws:acm:us-west-2:957282632678:certificate/2e882320-5aa5-4b8d-881f-998050178205\";\n\n    var alb = new Duplocloud.AwsLoadBalancer(\"alb\", new()\n    {\n        TenantId = tenantId,\n        Name = \"tst-alb\",\n        IsInternal = true,\n        EnableAccessLogs = true,\n        DropInvalidHeaders = true,\n    });\n\n    var tg = new Duplocloud.AwsLbTargetGroup(\"tg\", new()\n    {\n        TenantId = tenantId,\n        Name = \"tg1\",\n        Port = 80,\n        Protocol = \"HTTP\",\n        VpcId = vpcId,\n        TargetType = \"instance\",\n    });\n\n    var alb_listener = new Duplocloud.AwsLoadBalancerListener(\"alb-listener\", new()\n    {\n        TenantId = tenantId,\n        LoadBalancerName = alb.Name,\n        Port = 8443,\n        Protocol = \"HTTPS\",\n        TargetGroupArn = tg.Arn,\n        CertificateArn = certArn,\n    });\n\n    var @static = new Duplocloud.AwsLbListenerRule(\"static\", new()\n    {\n        TenantId = tenantId,\n        ListenerArn = alb_listener.Arn,\n        Priority = 100,\n        Actions = new[]\n        {\n            new Duplocloud.Inputs.AwsLbListenerRuleActionArgs\n            {\n                Type = \"forward\",\n                TargetGroupArn = tg.Arn,\n            },\n        },\n        Conditions = new[]\n        {\n            new Duplocloud.Inputs.AwsLbListenerRuleConditionArgs\n            {\n                PathPattern = new Duplocloud.Inputs.AwsLbListenerRuleConditionPathPatternArgs\n                {\n                    Values = new[]\n                    {\n                        \"/static/*\",\n                    },\n                },\n            },\n            new Duplocloud.Inputs.AwsLbListenerRuleConditionArgs\n            {\n                HostHeader = new Duplocloud.Inputs.AwsLbListenerRuleConditionHostHeaderArgs\n                {\n                    Values = new[]\n                    {\n                        \"example.com\",\n                    },\n                },\n            },\n        },\n    });\n\n    // Forward action\n    var hostBasedWeightedRouting = new Duplocloud.AwsLbListenerRule(\"host_based_weighted_routing\", new()\n    {\n        TenantId = tenantId,\n        ListenerArn = alb_listener.Arn,\n        Priority = 99,\n        Actions = new[]\n        {\n            new Duplocloud.Inputs.AwsLbListenerRuleActionArgs\n            {\n                Type = \"forward\",\n                TargetGroupArn = tg.Arn,\n            },\n        },\n        Conditions = new[]\n        {\n            new Duplocloud.Inputs.AwsLbListenerRuleConditionArgs\n            {\n                HostHeader = new Duplocloud.Inputs.AwsLbListenerRuleConditionHostHeaderArgs\n                {\n                    Values = new[]\n                    {\n                        \"my-service.*.terraform.io\",\n                    },\n                },\n            },\n        },\n    });\n\n    // Redirect action\n    var redirectHttpToHttps = new Duplocloud.AwsLbListenerRule(\"redirect_http_to_https\", new()\n    {\n        TenantId = tenantId,\n        ListenerArn = alb_listener.Arn,\n        Priority = 98,\n        Actions = new[]\n        {\n            new Duplocloud.Inputs.AwsLbListenerRuleActionArgs\n            {\n                Type = \"redirect\",\n                Redirect = new Duplocloud.Inputs.AwsLbListenerRuleActionRedirectArgs\n                {\n                    Port = \"443\",\n                    Protocol = \"HTTPS\",\n                    StatusCode = \"HTTP_301\",\n                },\n            },\n        },\n        Conditions = new[]\n        {\n            new Duplocloud.Inputs.AwsLbListenerRuleConditionArgs\n            {\n                HttpHeader = new Duplocloud.Inputs.AwsLbListenerRuleConditionHttpHeaderArgs\n                {\n                    HttpHeaderName = \"X-Forwarded-For\",\n                    Values = new[]\n                    {\n                        \"192.168.1.*\",\n                    },\n                },\n            },\n        },\n    });\n\n    // Fixed-response action\n    var healthCheck = new Duplocloud.AwsLbListenerRule(\"health_check\", new()\n    {\n        TenantId = tenantId,\n        ListenerArn = alb_listener.Arn,\n        Priority = 97,\n        Actions = new[]\n        {\n            new Duplocloud.Inputs.AwsLbListenerRuleActionArgs\n            {\n                Type = \"fixed-response\",\n                FixedResponse = new Duplocloud.Inputs.AwsLbListenerRuleActionFixedResponseArgs\n                {\n                    ContentType = \"text/plain\",\n                    MessageBody = \"HEALTHY\",\n                    StatusCode = \"200\",\n                },\n            },\n        },\n        Conditions = new[]\n        {\n            new Duplocloud.Inputs.AwsLbListenerRuleConditionArgs\n            {\n                QueryStrings = new[]\n                {\n                    new Duplocloud.Inputs.AwsLbListenerRuleConditionQueryStringArgs\n                    {\n                        Key = \"health\",\n                        Value = \"check\",\n                    },\n                    new Duplocloud.Inputs.AwsLbListenerRuleConditionQueryStringArgs\n                    {\n                        Key = \"foo\",\n                        Value = \"bar\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenantId := \"053a2efa-d03f-4e1d-b3b5-33c04cbed87e\"\n\t\tvpcId := \"vpc-0ba0667cfc200f060\"\n\t\tcertArn := \"arn:aws:acm:us-west-2:957282632678:certificate/2e882320-5aa5-4b8d-881f-998050178205\"\n\t\talb, err := duplocloud.NewAwsLoadBalancer(ctx, \"alb\", \u0026duplocloud.AwsLoadBalancerArgs{\n\t\t\tTenantId:           pulumi.String(tenantId),\n\t\t\tName:               pulumi.String(\"tst-alb\"),\n\t\t\tIsInternal:         pulumi.Bool(true),\n\t\t\tEnableAccessLogs:   pulumi.Bool(true),\n\t\t\tDropInvalidHeaders: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttg, err := duplocloud.NewAwsLbTargetGroup(ctx, \"tg\", \u0026duplocloud.AwsLbTargetGroupArgs{\n\t\t\tTenantId:   pulumi.String(tenantId),\n\t\t\tName:       pulumi.String(\"tg1\"),\n\t\t\tPort:       pulumi.Int(80),\n\t\t\tProtocol:   pulumi.String(\"HTTP\"),\n\t\t\tVpcId:      pulumi.String(vpcId),\n\t\t\tTargetType: pulumi.String(\"instance\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsLoadBalancerListener(ctx, \"alb-listener\", \u0026duplocloud.AwsLoadBalancerListenerArgs{\n\t\t\tTenantId:         pulumi.String(tenantId),\n\t\t\tLoadBalancerName: alb.Name,\n\t\t\tPort:             pulumi.Int(8443),\n\t\t\tProtocol:         pulumi.String(\"HTTPS\"),\n\t\t\tTargetGroupArn:   tg.Arn,\n\t\t\tCertificateArn:   pulumi.String(certArn),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsLbListenerRule(ctx, \"static\", \u0026duplocloud.AwsLbListenerRuleArgs{\n\t\t\tTenantId:    pulumi.String(tenantId),\n\t\t\tListenerArn: alb_listener.Arn,\n\t\t\tPriority:    pulumi.Int(100),\n\t\t\tActions: duplocloud.AwsLbListenerRuleActionArray{\n\t\t\t\t\u0026duplocloud.AwsLbListenerRuleActionArgs{\n\t\t\t\t\tType:           pulumi.String(\"forward\"),\n\t\t\t\t\tTargetGroupArn: tg.Arn,\n\t\t\t\t},\n\t\t\t},\n\t\t\tConditions: duplocloud.AwsLbListenerRuleConditionArray{\n\t\t\t\t\u0026duplocloud.AwsLbListenerRuleConditionArgs{\n\t\t\t\t\tPathPattern: \u0026duplocloud.AwsLbListenerRuleConditionPathPatternArgs{\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"/static/*\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.AwsLbListenerRuleConditionArgs{\n\t\t\t\t\tHostHeader: \u0026duplocloud.AwsLbListenerRuleConditionHostHeaderArgs{\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"example.com\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Forward action\n\t\t_, err = duplocloud.NewAwsLbListenerRule(ctx, \"host_based_weighted_routing\", \u0026duplocloud.AwsLbListenerRuleArgs{\n\t\t\tTenantId:    pulumi.String(tenantId),\n\t\t\tListenerArn: alb_listener.Arn,\n\t\t\tPriority:    pulumi.Int(99),\n\t\t\tActions: duplocloud.AwsLbListenerRuleActionArray{\n\t\t\t\t\u0026duplocloud.AwsLbListenerRuleActionArgs{\n\t\t\t\t\tType:           pulumi.String(\"forward\"),\n\t\t\t\t\tTargetGroupArn: tg.Arn,\n\t\t\t\t},\n\t\t\t},\n\t\t\tConditions: duplocloud.AwsLbListenerRuleConditionArray{\n\t\t\t\t\u0026duplocloud.AwsLbListenerRuleConditionArgs{\n\t\t\t\t\tHostHeader: \u0026duplocloud.AwsLbListenerRuleConditionHostHeaderArgs{\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"my-service.*.terraform.io\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Redirect action\n\t\t_, err = duplocloud.NewAwsLbListenerRule(ctx, \"redirect_http_to_https\", \u0026duplocloud.AwsLbListenerRuleArgs{\n\t\t\tTenantId:    pulumi.String(tenantId),\n\t\t\tListenerArn: alb_listener.Arn,\n\t\t\tPriority:    pulumi.Int(98),\n\t\t\tActions: duplocloud.AwsLbListenerRuleActionArray{\n\t\t\t\t\u0026duplocloud.AwsLbListenerRuleActionArgs{\n\t\t\t\t\tType: pulumi.String(\"redirect\"),\n\t\t\t\t\tRedirect: \u0026duplocloud.AwsLbListenerRuleActionRedirectArgs{\n\t\t\t\t\t\tPort:       pulumi.String(\"443\"),\n\t\t\t\t\t\tProtocol:   pulumi.String(\"HTTPS\"),\n\t\t\t\t\t\tStatusCode: pulumi.String(\"HTTP_301\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tConditions: duplocloud.AwsLbListenerRuleConditionArray{\n\t\t\t\t\u0026duplocloud.AwsLbListenerRuleConditionArgs{\n\t\t\t\t\tHttpHeader: \u0026duplocloud.AwsLbListenerRuleConditionHttpHeaderArgs{\n\t\t\t\t\t\tHttpHeaderName: pulumi.String(\"X-Forwarded-For\"),\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"192.168.1.*\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Fixed-response action\n\t\t_, err = duplocloud.NewAwsLbListenerRule(ctx, \"health_check\", \u0026duplocloud.AwsLbListenerRuleArgs{\n\t\t\tTenantId:    pulumi.String(tenantId),\n\t\t\tListenerArn: alb_listener.Arn,\n\t\t\tPriority:    pulumi.Int(97),\n\t\t\tActions: duplocloud.AwsLbListenerRuleActionArray{\n\t\t\t\t\u0026duplocloud.AwsLbListenerRuleActionArgs{\n\t\t\t\t\tType: pulumi.String(\"fixed-response\"),\n\t\t\t\t\tFixedResponse: \u0026duplocloud.AwsLbListenerRuleActionFixedResponseArgs{\n\t\t\t\t\t\tContentType: pulumi.String(\"text/plain\"),\n\t\t\t\t\t\tMessageBody: pulumi.String(\"HEALTHY\"),\n\t\t\t\t\t\tStatusCode:  pulumi.String(\"200\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tConditions: duplocloud.AwsLbListenerRuleConditionArray{\n\t\t\t\t\u0026duplocloud.AwsLbListenerRuleConditionArgs{\n\t\t\t\t\tQueryStrings: duplocloud.AwsLbListenerRuleConditionQueryStringArray{\n\t\t\t\t\t\t\u0026duplocloud.AwsLbListenerRuleConditionQueryStringArgs{\n\t\t\t\t\t\t\tKey:   pulumi.String(\"health\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"check\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026duplocloud.AwsLbListenerRuleConditionQueryStringArgs{\n\t\t\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.AwsLoadBalancer;\nimport com.pulumi.duplocloud.AwsLoadBalancerArgs;\nimport com.pulumi.duplocloud.AwsLbTargetGroup;\nimport com.pulumi.duplocloud.AwsLbTargetGroupArgs;\nimport com.pulumi.duplocloud.AwsLoadBalancerListener;\nimport com.pulumi.duplocloud.AwsLoadBalancerListenerArgs;\nimport com.pulumi.duplocloud.AwsLbListenerRule;\nimport com.pulumi.duplocloud.AwsLbListenerRuleArgs;\nimport com.pulumi.duplocloud.inputs.AwsLbListenerRuleActionArgs;\nimport com.pulumi.duplocloud.inputs.AwsLbListenerRuleConditionArgs;\nimport com.pulumi.duplocloud.inputs.AwsLbListenerRuleConditionPathPatternArgs;\nimport com.pulumi.duplocloud.inputs.AwsLbListenerRuleConditionHostHeaderArgs;\nimport com.pulumi.duplocloud.inputs.AwsLbListenerRuleActionRedirectArgs;\nimport com.pulumi.duplocloud.inputs.AwsLbListenerRuleConditionHttpHeaderArgs;\nimport com.pulumi.duplocloud.inputs.AwsLbListenerRuleActionFixedResponseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tenantId = \"053a2efa-d03f-4e1d-b3b5-33c04cbed87e\";\n\n        final var vpcId = \"vpc-0ba0667cfc200f060\";\n\n        final var certArn = \"arn:aws:acm:us-west-2:957282632678:certificate/2e882320-5aa5-4b8d-881f-998050178205\";\n\n        var alb = new AwsLoadBalancer(\"alb\", AwsLoadBalancerArgs.builder()\n            .tenantId(tenantId)\n            .name(\"tst-alb\")\n            .isInternal(true)\n            .enableAccessLogs(true)\n            .dropInvalidHeaders(true)\n            .build());\n\n        var tg = new AwsLbTargetGroup(\"tg\", AwsLbTargetGroupArgs.builder()\n            .tenantId(tenantId)\n            .name(\"tg1\")\n            .port(80)\n            .protocol(\"HTTP\")\n            .vpcId(vpcId)\n            .targetType(\"instance\")\n            .build());\n\n        var alb_listener = new AwsLoadBalancerListener(\"alb-listener\", AwsLoadBalancerListenerArgs.builder()\n            .tenantId(tenantId)\n            .loadBalancerName(alb.name())\n            .port(8443)\n            .protocol(\"HTTPS\")\n            .targetGroupArn(tg.arn())\n            .certificateArn(certArn)\n            .build());\n\n        var static_ = new AwsLbListenerRule(\"static\", AwsLbListenerRuleArgs.builder()\n            .tenantId(tenantId)\n            .listenerArn(alb_listener.arn())\n            .priority(100)\n            .actions(AwsLbListenerRuleActionArgs.builder()\n                .type(\"forward\")\n                .targetGroupArn(tg.arn())\n                .build())\n            .conditions(            \n                AwsLbListenerRuleConditionArgs.builder()\n                    .pathPattern(AwsLbListenerRuleConditionPathPatternArgs.builder()\n                        .values(\"/static/*\")\n                        .build())\n                    .build(),\n                AwsLbListenerRuleConditionArgs.builder()\n                    .hostHeader(AwsLbListenerRuleConditionHostHeaderArgs.builder()\n                        .values(\"example.com\")\n                        .build())\n                    .build())\n            .build());\n\n        // Forward action\n        var hostBasedWeightedRouting = new AwsLbListenerRule(\"hostBasedWeightedRouting\", AwsLbListenerRuleArgs.builder()\n            .tenantId(tenantId)\n            .listenerArn(alb_listener.arn())\n            .priority(99)\n            .actions(AwsLbListenerRuleActionArgs.builder()\n                .type(\"forward\")\n                .targetGroupArn(tg.arn())\n                .build())\n            .conditions(AwsLbListenerRuleConditionArgs.builder()\n                .hostHeader(AwsLbListenerRuleConditionHostHeaderArgs.builder()\n                    .values(\"my-service.*.terraform.io\")\n                    .build())\n                .build())\n            .build());\n\n        // Redirect action\n        var redirectHttpToHttps = new AwsLbListenerRule(\"redirectHttpToHttps\", AwsLbListenerRuleArgs.builder()\n            .tenantId(tenantId)\n            .listenerArn(alb_listener.arn())\n            .priority(98)\n            .actions(AwsLbListenerRuleActionArgs.builder()\n                .type(\"redirect\")\n                .redirect(AwsLbListenerRuleActionRedirectArgs.builder()\n                    .port(\"443\")\n                    .protocol(\"HTTPS\")\n                    .statusCode(\"HTTP_301\")\n                    .build())\n                .build())\n            .conditions(AwsLbListenerRuleConditionArgs.builder()\n                .httpHeader(AwsLbListenerRuleConditionHttpHeaderArgs.builder()\n                    .httpHeaderName(\"X-Forwarded-For\")\n                    .values(\"192.168.1.*\")\n                    .build())\n                .build())\n            .build());\n\n        // Fixed-response action\n        var healthCheck = new AwsLbListenerRule(\"healthCheck\", AwsLbListenerRuleArgs.builder()\n            .tenantId(tenantId)\n            .listenerArn(alb_listener.arn())\n            .priority(97)\n            .actions(AwsLbListenerRuleActionArgs.builder()\n                .type(\"fixed-response\")\n                .fixedResponse(AwsLbListenerRuleActionFixedResponseArgs.builder()\n                    .contentType(\"text/plain\")\n                    .messageBody(\"HEALTHY\")\n                    .statusCode(\"200\")\n                    .build())\n                .build())\n            .conditions(AwsLbListenerRuleConditionArgs.builder()\n                .queryStrings(                \n                    AwsLbListenerRuleConditionQueryStringArgs.builder()\n                        .key(\"health\")\n                        .value(\"check\")\n                        .build(),\n                    AwsLbListenerRuleConditionQueryStringArgs.builder()\n                        .key(\"foo\")\n                        .value(\"bar\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  alb:\n    type: duplocloud:AwsLoadBalancer\n    properties:\n      tenantId: ${tenantId}\n      name: tst-alb\n      isInternal: true\n      enableAccessLogs: true\n      dropInvalidHeaders: true\n  tg:\n    type: duplocloud:AwsLbTargetGroup\n    properties:\n      tenantId: ${tenantId}\n      name: tg1\n      port: 80\n      protocol: HTTP\n      vpcId: ${vpcId}\n      targetType: instance\n  alb-listener:\n    type: duplocloud:AwsLoadBalancerListener\n    properties:\n      tenantId: ${tenantId}\n      loadBalancerName: ${alb.name}\n      port: 8443\n      protocol: HTTPS\n      targetGroupArn: ${tg.arn}\n      certificateArn: ${certArn}\n  static:\n    type: duplocloud:AwsLbListenerRule\n    properties:\n      tenantId: ${tenantId}\n      listenerArn: ${[\"alb-listener\"].arn}\n      priority: 100\n      actions:\n        - type: forward\n          targetGroupArn: ${tg.arn}\n      conditions:\n        - pathPattern:\n            values:\n              - /static/*\n        - hostHeader:\n            values:\n              - example.com\n  # Forward action\n  hostBasedWeightedRouting:\n    type: duplocloud:AwsLbListenerRule\n    name: host_based_weighted_routing\n    properties:\n      tenantId: ${tenantId}\n      listenerArn: ${[\"alb-listener\"].arn}\n      priority: 99\n      actions:\n        - type: forward\n          targetGroupArn: ${tg.arn}\n      conditions:\n        - hostHeader:\n            values:\n              - my-service.*.terraform.io\n  # Redirect action\n  redirectHttpToHttps:\n    type: duplocloud:AwsLbListenerRule\n    name: redirect_http_to_https\n    properties:\n      tenantId: ${tenantId}\n      listenerArn: ${[\"alb-listener\"].arn}\n      priority: 98\n      actions:\n        - type: redirect\n          redirect:\n            port: '443'\n            protocol: HTTPS\n            statusCode: HTTP_301\n      conditions:\n        - httpHeader:\n            httpHeaderName: X-Forwarded-For\n            values:\n              - 192.168.1.*\n  # Fixed-response action\n  healthCheck:\n    type: duplocloud:AwsLbListenerRule\n    name: health_check\n    properties:\n      tenantId: ${tenantId}\n      listenerArn: ${[\"alb-listener\"].arn}\n      priority: 97\n      actions:\n        - type: fixed-response\n          fixedResponse:\n            contentType: text/plain\n            messageBody: HEALTHY\n            statusCode: '200'\n      conditions:\n        - queryStrings:\n            - key: health\n              value: check\n            - key: foo\n              value: bar\nvariables:\n  tenantId: 053a2efa-d03f-4e1d-b3b5-33c04cbed87e\n  vpcId: vpc-0ba0667cfc200f060\n  certArn: arn:aws:acm:us-west-2:957282632678:certificate/2e882320-5aa5-4b8d-881f-998050178205\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS AWS LB Listener Rule\n\n - *TENANT_ID* is the tenant GUID\n\n - *RULE_ARN* is the ARN of the AWS LB Listener Rule\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsLbListenerRule:AwsLbListenerRule listener_rule *TENANT_ID*/*RULE_ARN*\n```\n\n",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsLbListenerRuleAction:AwsLbListenerRuleAction"
                    }
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN of the rule.\n"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsLbListenerRuleCondition:AwsLbListenerRuleCondition"
                    },
                    "description": "A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match.\n"
                },
                "listenerArn": {
                    "type": "string",
                    "description": "The ARN of the listener to which to attach the rule.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can't have multiple rules with the same priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsLbListenerRuleTag:AwsLbListenerRuleTag"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws lb listener rule will be created in.\n"
                }
            },
            "required": [
                "actions",
                "arn",
                "conditions",
                "listenerArn",
                "priority",
                "tags",
                "tenantId"
            ],
            "inputProperties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsLbListenerRuleAction:AwsLbListenerRuleAction"
                    }
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsLbListenerRuleCondition:AwsLbListenerRuleCondition"
                    },
                    "description": "A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match.\n"
                },
                "listenerArn": {
                    "type": "string",
                    "description": "The ARN of the listener to which to attach the rule.\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can't have multiple rules with the same priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsLbListenerRuleTag:AwsLbListenerRuleTag"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws lb listener rule will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "actions",
                "conditions",
                "listenerArn",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsLbListenerRule resources.\n",
                "properties": {
                    "actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsLbListenerRuleAction:AwsLbListenerRuleAction"
                        }
                    },
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the rule.\n"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsLbListenerRuleCondition:AwsLbListenerRuleCondition"
                        },
                        "description": "A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match.\n"
                    },
                    "listenerArn": {
                        "type": "string",
                        "description": "The ARN of the listener to which to attach the rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can't have multiple rules with the same priority.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsLbListenerRuleTag:AwsLbListenerRuleTag"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the aws lb listener rule will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsLbTargetGroup:AwsLbTargetGroup": {
            "description": "`duplocloud.AwsLbTargetGroup` manages a target group in a Duplo tenant.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenantId = \"053a2efa-d03f-4e1d-b3b5-33c121342adae\";\nconst vpcId = \"vpc-0ba0667cfc20111122233\";\nconst tg = new duplocloud.AwsLbTargetGroup(\"tg\", {\n    tenantId: tenantId,\n    name: \"tg1\",\n    port: 80,\n    protocol: \"HTTP\",\n    vpcId: vpcId,\n    targetType: \"instance\",\n    healthCheck: {\n        healthyThreshold: 8,\n        interval: 300,\n        path: \"/health\",\n        port: \"9000\",\n        protocol: \"HTTP\",\n        timeout: 60,\n        unhealthyThreshold: 6,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant_id = \"053a2efa-d03f-4e1d-b3b5-33c121342adae\"\nvpc_id = \"vpc-0ba0667cfc20111122233\"\ntg = duplocloud.AwsLbTargetGroup(\"tg\",\n    tenant_id=tenant_id,\n    name=\"tg1\",\n    port=80,\n    protocol=\"HTTP\",\n    vpc_id=vpc_id,\n    target_type=\"instance\",\n    health_check={\n        \"healthy_threshold\": 8,\n        \"interval\": 300,\n        \"path\": \"/health\",\n        \"port\": \"9000\",\n        \"protocol\": \"HTTP\",\n        \"timeout\": 60,\n        \"unhealthy_threshold\": 6,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenantId = \"053a2efa-d03f-4e1d-b3b5-33c121342adae\";\n\n    var vpcId = \"vpc-0ba0667cfc20111122233\";\n\n    var tg = new Duplocloud.AwsLbTargetGroup(\"tg\", new()\n    {\n        TenantId = tenantId,\n        Name = \"tg1\",\n        Port = 80,\n        Protocol = \"HTTP\",\n        VpcId = vpcId,\n        TargetType = \"instance\",\n        HealthCheck = new Duplocloud.Inputs.AwsLbTargetGroupHealthCheckArgs\n        {\n            HealthyThreshold = 8,\n            Interval = 300,\n            Path = \"/health\",\n            Port = \"9000\",\n            Protocol = \"HTTP\",\n            Timeout = 60,\n            UnhealthyThreshold = 6,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenantId := \"053a2efa-d03f-4e1d-b3b5-33c121342adae\"\n\t\tvpcId := \"vpc-0ba0667cfc20111122233\"\n\t\t_, err := duplocloud.NewAwsLbTargetGroup(ctx, \"tg\", \u0026duplocloud.AwsLbTargetGroupArgs{\n\t\t\tTenantId:   pulumi.String(tenantId),\n\t\t\tName:       pulumi.String(\"tg1\"),\n\t\t\tPort:       pulumi.Int(80),\n\t\t\tProtocol:   pulumi.String(\"HTTP\"),\n\t\t\tVpcId:      pulumi.String(vpcId),\n\t\t\tTargetType: pulumi.String(\"instance\"),\n\t\t\tHealthCheck: \u0026duplocloud.AwsLbTargetGroupHealthCheckArgs{\n\t\t\t\tHealthyThreshold:   pulumi.Int(8),\n\t\t\t\tInterval:           pulumi.Int(300),\n\t\t\t\tPath:               pulumi.String(\"/health\"),\n\t\t\t\tPort:               pulumi.String(\"9000\"),\n\t\t\t\tProtocol:           pulumi.String(\"HTTP\"),\n\t\t\t\tTimeout:            pulumi.Int(60),\n\t\t\t\tUnhealthyThreshold: pulumi.Int(6),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.AwsLbTargetGroup;\nimport com.pulumi.duplocloud.AwsLbTargetGroupArgs;\nimport com.pulumi.duplocloud.inputs.AwsLbTargetGroupHealthCheckArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tenantId = \"053a2efa-d03f-4e1d-b3b5-33c121342adae\";\n\n        final var vpcId = \"vpc-0ba0667cfc20111122233\";\n\n        var tg = new AwsLbTargetGroup(\"tg\", AwsLbTargetGroupArgs.builder()\n            .tenantId(tenantId)\n            .name(\"tg1\")\n            .port(80)\n            .protocol(\"HTTP\")\n            .vpcId(vpcId)\n            .targetType(\"instance\")\n            .healthCheck(AwsLbTargetGroupHealthCheckArgs.builder()\n                .healthyThreshold(8)\n                .interval(300)\n                .path(\"/health\")\n                .port(\"9000\")\n                .protocol(\"HTTP\")\n                .timeout(60)\n                .unhealthyThreshold(6)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tg:\n    type: duplocloud:AwsLbTargetGroup\n    properties:\n      tenantId: ${tenantId}\n      name: tg1\n      port: 80\n      protocol: HTTP\n      vpcId: ${vpcId}\n      targetType: instance\n      healthCheck:\n        healthyThreshold: 8\n        interval: 300\n        path: /health\n        port: '9000'\n        protocol: HTTP\n        timeout: 60\n        unhealthyThreshold: 6\nvariables:\n  tenantId: 053a2efa-d03f-4e1d-b3b5-33c121342adae\n  vpcId: vpc-0ba0667cfc20111122233\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS target group\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the name of the AWS target group\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsLbTargetGroup:AwsLbTargetGroup tg *TENANT_ID*/*NAME*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN of the Target Group.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/duplocloud:index/AwsLbTargetGroupHealthCheck:AwsLbTargetGroupHealthCheck",
                    "description": "Health Check configuration block.\n"
                },
                "ipAddressType": {
                    "type": "string",
                    "description": "The type of IP addresses used by the target group, only supported when target type is set to `ip`. Possible values are `ipv4` or `ipv6`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the target group.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port to use to connect with the target. Valid values are either ports 1-65535.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol to use to connect with the target. Not applicable when `target_type` is `lambda`. Defaults to `HTTP`.\n"
                },
                "protocolVersion": {
                    "type": "string",
                    "description": "Only applicable when protocol is `HTTP` or `HTTPS`. The protocol version. Specify GRPC to send requests to targets using gRPC. Specify HTTP2 to send requests to targets using HTTP/2. The default is HTTP1, which sends requests to targets using HTTP/1.1\n"
                },
                "targetType": {
                    "type": "string",
                    "description": "Type of target that you must specify when registering targets with this target group.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the target group will be created in.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "Identifier of the VPC in which to create the target group. Required when `target_type` is `instance`, `ip` or `alb`. Does not apply when `target_type` is `lambda`.\n"
                }
            },
            "required": [
                "arn",
                "healthCheck",
                "ipAddressType",
                "name",
                "port",
                "protocolVersion",
                "targetType",
                "tenantId",
                "vpcId"
            ],
            "inputProperties": {
                "healthCheck": {
                    "$ref": "#/types/duplocloud:index/AwsLbTargetGroupHealthCheck:AwsLbTargetGroupHealthCheck",
                    "description": "Health Check configuration block.\n"
                },
                "ipAddressType": {
                    "type": "string",
                    "description": "The type of IP addresses used by the target group, only supported when target type is set to `ip`. Possible values are `ipv4` or `ipv6`\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the target group.\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port to use to connect with the target. Valid values are either ports 1-65535.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol to use to connect with the target. Not applicable when `target_type` is `lambda`. Defaults to `HTTP`.\n",
                    "willReplaceOnChanges": true
                },
                "protocolVersion": {
                    "type": "string",
                    "description": "Only applicable when protocol is `HTTP` or `HTTPS`. The protocol version. Specify GRPC to send requests to targets using gRPC. Specify HTTP2 to send requests to targets using HTTP/2. The default is HTTP1, which sends requests to targets using HTTP/1.1\n"
                },
                "targetType": {
                    "type": "string",
                    "description": "Type of target that you must specify when registering targets with this target group.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the target group will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "Identifier of the VPC in which to create the target group. Required when `target_type` is `instance`, `ip` or `alb`. Does not apply when `target_type` is `lambda`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "targetType",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsLbTargetGroup resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "ARN of the Target Group.\n"
                    },
                    "healthCheck": {
                        "$ref": "#/types/duplocloud:index/AwsLbTargetGroupHealthCheck:AwsLbTargetGroupHealthCheck",
                        "description": "Health Check configuration block.\n"
                    },
                    "ipAddressType": {
                        "type": "string",
                        "description": "The type of IP addresses used by the target group, only supported when target type is set to `ip`. Possible values are `ipv4` or `ipv6`\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the target group.\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port to use to connect with the target. Valid values are either ports 1-65535.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol to use to connect with the target. Not applicable when `target_type` is `lambda`. Defaults to `HTTP`.\n",
                        "willReplaceOnChanges": true
                    },
                    "protocolVersion": {
                        "type": "string",
                        "description": "Only applicable when protocol is `HTTP` or `HTTPS`. The protocol version. Specify GRPC to send requests to targets using gRPC. Specify HTTP2 to send requests to targets using HTTP/2. The default is HTTP1, which sends requests to targets using HTTP/1.1\n"
                    },
                    "targetType": {
                        "type": "string",
                        "description": "Type of target that you must specify when registering targets with this target group.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the target group will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "Identifier of the VPC in which to create the target group. Required when `target_type` is `instance`, `ip` or `alb`. Does not apply when `target_type` is `lambda`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsLoadBalancer:AwsLoadBalancer": {
            "description": "`duplocloud.AwsLoadBalancer` manages an AWS application load balancer in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst myappAwsLoadBalancer = new duplocloud.AwsLoadBalancer(\"myapp\", {\n    tenantId: myapp.tenantId,\n    name: \"myapp\",\n    isInternal: true,\n    enableAccessLogs: true,\n    dropInvalidHeaders: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmyapp_aws_load_balancer = duplocloud.AwsLoadBalancer(\"myapp\",\n    tenant_id=myapp.tenant_id,\n    name=\"myapp\",\n    is_internal=True,\n    enable_access_logs=True,\n    drop_invalid_headers=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var myappAwsLoadBalancer = new Duplocloud.AwsLoadBalancer(\"myapp\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"myapp\",\n        IsInternal = true,\n        EnableAccessLogs = true,\n        DropInvalidHeaders = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsLoadBalancer(ctx, \"myapp\", \u0026duplocloud.AwsLoadBalancerArgs{\n\t\t\tTenantId:           myapp.TenantId,\n\t\t\tName:               pulumi.String(\"myapp\"),\n\t\t\tIsInternal:         pulumi.Bool(true),\n\t\t\tEnableAccessLogs:   pulumi.Bool(true),\n\t\t\tDropInvalidHeaders: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsLoadBalancer;\nimport com.pulumi.duplocloud.AwsLoadBalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var myappAwsLoadBalancer = new AwsLoadBalancer(\"myappAwsLoadBalancer\", AwsLoadBalancerArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"myapp\")\n            .isInternal(true)\n            .enableAccessLogs(true)\n            .dropInvalidHeaders(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  myappAwsLoadBalancer:\n    type: duplocloud:AwsLoadBalancer\n    name: myapp\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: myapp\n      isInternal: true\n      enableAccessLogs: true\n      dropInvalidHeaders: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS load balancer\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the AWS load balancer\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsLoadBalancer:AwsLoadBalancer myalb *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN of the load balancer.\n"
                },
                "dnsName": {
                    "type": "string",
                    "description": "The DNS name of the load balancer.\n"
                },
                "dropInvalidHeaders": {
                    "type": "boolean",
                    "description": "Whether or not the load balancer should drop invalid HTTP headers. Only valid for Load Balancers of type `Application`\n"
                },
                "enableAccessLogs": {
                    "type": "boolean",
                    "description": "Whether or not access logs should be enabled.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the load balancer.\n"
                },
                "httpToHttpsRedirect": {
                    "type": "boolean",
                    "description": "Whether or not the load balancer should redirect HTTP to HTTPS. Only valid for Load Balancers of type `Application`\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.\n"
                },
                "isInternal": {
                    "type": "boolean",
                    "description": "Whether or not the load balancer is internal (non internet-facing).\n"
                },
                "loadBalancerType": {
                    "type": "string",
                    "description": "The type of load balancer to create. Possible values are `Application` or `Network`. Defaults to `Application`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsLoadBalancerTag:AwsLoadBalancerTag"
                    },
                    "description": "The tags assigned to this load balancer.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the load balancer will be created in.\n"
                },
                "webAclId": {
                    "type": "string",
                    "description": "The ARN of a WAF to attach to the load balancer.\n"
                }
            },
            "required": [
                "arn",
                "dnsName",
                "dropInvalidHeaders",
                "enableAccessLogs",
                "fullname",
                "httpToHttpsRedirect",
                "idleTimeout",
                "isInternal",
                "name",
                "tags",
                "tenantId",
                "webAclId"
            ],
            "inputProperties": {
                "dropInvalidHeaders": {
                    "type": "boolean",
                    "description": "Whether or not the load balancer should drop invalid HTTP headers. Only valid for Load Balancers of type `Application`\n"
                },
                "enableAccessLogs": {
                    "type": "boolean",
                    "description": "Whether or not access logs should be enabled.\n"
                },
                "httpToHttpsRedirect": {
                    "type": "boolean",
                    "description": "Whether or not the load balancer should redirect HTTP to HTTPS. Only valid for Load Balancers of type `Application`\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.\n"
                },
                "isInternal": {
                    "type": "boolean",
                    "description": "Whether or not the load balancer is internal (non internet-facing).\n",
                    "willReplaceOnChanges": true
                },
                "loadBalancerType": {
                    "type": "string",
                    "description": "The type of load balancer to create. Possible values are `Application` or `Network`. Defaults to `Application`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the load balancer will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "webAclId": {
                    "type": "string",
                    "description": "The ARN of a WAF to attach to the load balancer.\n"
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsLoadBalancer resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the load balancer.\n"
                    },
                    "dnsName": {
                        "type": "string",
                        "description": "The DNS name of the load balancer.\n"
                    },
                    "dropInvalidHeaders": {
                        "type": "boolean",
                        "description": "Whether or not the load balancer should drop invalid HTTP headers. Only valid for Load Balancers of type `Application`\n"
                    },
                    "enableAccessLogs": {
                        "type": "boolean",
                        "description": "Whether or not access logs should be enabled.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the load balancer.\n"
                    },
                    "httpToHttpsRedirect": {
                        "type": "boolean",
                        "description": "Whether or not the load balancer should redirect HTTP to HTTPS. Only valid for Load Balancers of type `Application`\n"
                    },
                    "idleTimeout": {
                        "type": "integer",
                        "description": "The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.\n"
                    },
                    "isInternal": {
                        "type": "boolean",
                        "description": "Whether or not the load balancer is internal (non internet-facing).\n",
                        "willReplaceOnChanges": true
                    },
                    "loadBalancerType": {
                        "type": "string",
                        "description": "The type of load balancer to create. Possible values are `Application` or `Network`. Defaults to `Application`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsLoadBalancerTag:AwsLoadBalancerTag"
                        },
                        "description": "The tags assigned to this load balancer.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the load balancer will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "webAclId": {
                        "type": "string",
                        "description": "The ARN of a WAF to attach to the load balancer.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsLoadBalancerListener:AwsLoadBalancerListener": {
            "description": "`duplocloud.AwsLoadBalancerListener` manages an AWS application load balancer listener in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst myappAwsLoadBalancer = new duplocloud.AwsLoadBalancer(\"myapp\", {\n    tenantId: myapp.tenantId,\n    name: \"myapp\",\n    isInternal: true,\n    enableAccessLogs: true,\n    dropInvalidHeaders: true,\n});\nconst myapp_listener = new duplocloud.AwsLoadBalancerListener(\"myapp-listener\", {\n    tenantId: myapp.tenantId,\n    loadBalancerName: myappAwsLoadBalancer.name,\n    port: 8443,\n    protocol: \"https\",\n    targetGroupArn: \"arn:aws:elasticloadbalancing:us-west-2:1234567890:targetgroup/duplo2-stage-antcmw-http4000/fc6f818e85fa737a\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmyapp_aws_load_balancer = duplocloud.AwsLoadBalancer(\"myapp\",\n    tenant_id=myapp.tenant_id,\n    name=\"myapp\",\n    is_internal=True,\n    enable_access_logs=True,\n    drop_invalid_headers=True)\nmyapp_listener = duplocloud.AwsLoadBalancerListener(\"myapp-listener\",\n    tenant_id=myapp.tenant_id,\n    load_balancer_name=myapp_aws_load_balancer.name,\n    port=8443,\n    protocol=\"https\",\n    target_group_arn=\"arn:aws:elasticloadbalancing:us-west-2:1234567890:targetgroup/duplo2-stage-antcmw-http4000/fc6f818e85fa737a\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var myappAwsLoadBalancer = new Duplocloud.AwsLoadBalancer(\"myapp\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"myapp\",\n        IsInternal = true,\n        EnableAccessLogs = true,\n        DropInvalidHeaders = true,\n    });\n\n    var myapp_listener = new Duplocloud.AwsLoadBalancerListener(\"myapp-listener\", new()\n    {\n        TenantId = myapp.TenantId,\n        LoadBalancerName = myappAwsLoadBalancer.Name,\n        Port = 8443,\n        Protocol = \"https\",\n        TargetGroupArn = \"arn:aws:elasticloadbalancing:us-west-2:1234567890:targetgroup/duplo2-stage-antcmw-http4000/fc6f818e85fa737a\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyappAwsLoadBalancer, err := duplocloud.NewAwsLoadBalancer(ctx, \"myapp\", \u0026duplocloud.AwsLoadBalancerArgs{\n\t\t\tTenantId:           myapp.TenantId,\n\t\t\tName:               pulumi.String(\"myapp\"),\n\t\t\tIsInternal:         pulumi.Bool(true),\n\t\t\tEnableAccessLogs:   pulumi.Bool(true),\n\t\t\tDropInvalidHeaders: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsLoadBalancerListener(ctx, \"myapp-listener\", \u0026duplocloud.AwsLoadBalancerListenerArgs{\n\t\t\tTenantId:         myapp.TenantId,\n\t\t\tLoadBalancerName: myappAwsLoadBalancer.Name,\n\t\t\tPort:             pulumi.Int(8443),\n\t\t\tProtocol:         pulumi.String(\"https\"),\n\t\t\tTargetGroupArn:   pulumi.String(\"arn:aws:elasticloadbalancing:us-west-2:1234567890:targetgroup/duplo2-stage-antcmw-http4000/fc6f818e85fa737a\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsLoadBalancer;\nimport com.pulumi.duplocloud.AwsLoadBalancerArgs;\nimport com.pulumi.duplocloud.AwsLoadBalancerListener;\nimport com.pulumi.duplocloud.AwsLoadBalancerListenerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var myappAwsLoadBalancer = new AwsLoadBalancer(\"myappAwsLoadBalancer\", AwsLoadBalancerArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"myapp\")\n            .isInternal(true)\n            .enableAccessLogs(true)\n            .dropInvalidHeaders(true)\n            .build());\n\n        var myapp_listener = new AwsLoadBalancerListener(\"myapp-listener\", AwsLoadBalancerListenerArgs.builder()\n            .tenantId(myapp.tenantId())\n            .loadBalancerName(myappAwsLoadBalancer.name())\n            .port(8443)\n            .protocol(\"https\")\n            .targetGroupArn(\"arn:aws:elasticloadbalancing:us-west-2:1234567890:targetgroup/duplo2-stage-antcmw-http4000/fc6f818e85fa737a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  myappAwsLoadBalancer:\n    type: duplocloud:AwsLoadBalancer\n    name: myapp\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: myapp\n      isInternal: true\n      enableAccessLogs: true\n      dropInvalidHeaders: true\n  myapp-listener:\n    type: duplocloud:AwsLoadBalancerListener\n    properties:\n      tenantId: ${myapp.tenantId}\n      loadBalancerName: ${myappAwsLoadBalancer.name}\n      port: 8443\n      protocol: https\n      targetGroupArn: arn:aws:elasticloadbalancing:us-west-2:1234567890:targetgroup/duplo2-stage-antcmw-http4000/fc6f818e85fa737a\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS load balancer listener\n\n - *TENANT_ID* is the tenant GUID\n\n - *LB_NAME* is the name of the AWS load balancer\n\n - *LISTENER_ARN* is the arn of the AWS load balancer listener\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsLoadBalancerListener:AwsLoadBalancerListener myalb-listener *TENANT_ID*/*LB_NAME*/*LISTENER_ARN*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN of the listener.\n"
                },
                "certificateArn": {
                    "type": "string",
                    "description": "The ARN of the certificate to attach to the listener.\n"
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsLoadBalancerListenerCertificate:AwsLoadBalancerListenerCertificate"
                    }
                },
                "defaultActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsLoadBalancerListenerDefaultAction:AwsLoadBalancerListenerDefaultAction"
                    }
                },
                "loadBalancerArn": {
                    "type": "string"
                },
                "loadBalancerFullname": {
                    "type": "string",
                    "description": "The full name of the load balancer.\n"
                },
                "loadBalancerName": {
                    "type": "string",
                    "description": "The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port on which the load balancer is listening.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for connections from clients to the load balancer.\n"
                },
                "sslPolicy": {
                    "type": "string"
                },
                "targetGroupArn": {
                    "type": "string",
                    "description": "ARN of the Target Group to which to route traffic.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the load balancer will be created in.\n"
                }
            },
            "required": [
                "arn",
                "certificateArn",
                "certificates",
                "defaultActions",
                "loadBalancerArn",
                "loadBalancerFullname",
                "loadBalancerName",
                "port",
                "protocol",
                "sslPolicy",
                "targetGroupArn",
                "tenantId"
            ],
            "inputProperties": {
                "certificateArn": {
                    "type": "string",
                    "description": "The ARN of the certificate to attach to the listener.\n"
                },
                "loadBalancerName": {
                    "type": "string",
                    "description": "The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port on which the load balancer is listening.\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for connections from clients to the load balancer.\n",
                    "willReplaceOnChanges": true
                },
                "targetGroupArn": {
                    "type": "string",
                    "description": "ARN of the Target Group to which to route traffic.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the load balancer will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "loadBalancerName",
                "port",
                "protocol",
                "targetGroupArn",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsLoadBalancerListener resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "ARN of the listener.\n"
                    },
                    "certificateArn": {
                        "type": "string",
                        "description": "The ARN of the certificate to attach to the listener.\n"
                    },
                    "certificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsLoadBalancerListenerCertificate:AwsLoadBalancerListenerCertificate"
                        }
                    },
                    "defaultActions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsLoadBalancerListenerDefaultAction:AwsLoadBalancerListenerDefaultAction"
                        }
                    },
                    "loadBalancerArn": {
                        "type": "string"
                    },
                    "loadBalancerFullname": {
                        "type": "string",
                        "description": "The full name of the load balancer.\n"
                    },
                    "loadBalancerName": {
                        "type": "string",
                        "description": "The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port on which the load balancer is listening.\n",
                        "willReplaceOnChanges": true
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol for connections from clients to the load balancer.\n",
                        "willReplaceOnChanges": true
                    },
                    "sslPolicy": {
                        "type": "string"
                    },
                    "targetGroupArn": {
                        "type": "string",
                        "description": "ARN of the Target Group to which to route traffic.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the load balancer will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsMwaaEnvironment:AwsMwaaEnvironment": {
            "description": "`duplocloud.AwsMwaaEnvironment` manages an AWS MWAA Environment resource in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst tenantKmsKey = duplocloud.getTenantAwsKmsKeyOutput({\n    tenantId: myapp.tenantId,\n});\nconst my_mwaa = new duplocloud.AwsMwaaEnvironment(\"my-mwaa\", {\n    tenantId: myapp.tenantId,\n    name: \"airflow-test\",\n    sourceBucketArn: \"arn:aws:s3:::xxx-xxx-xx-xxxx\",\n    dagS3Path: \"AirflowDags/dag\",\n    pluginsS3Path: \"AirflowDags/plugins.zip\",\n    requirementsS3Path: \"AirflowDags/requirements.txt\",\n    startupScriptS3Path: \"AirflowDags/startup-script.sh\",\n    kmsKey: tenantKmsKey.apply(tenantKmsKey =\u003e tenantKmsKey.keyArn),\n    schedulers: 2,\n    maxWorkers: 10,\n    minWorkers: 1,\n    airflowVersion: \"2.6.3\",\n    weeklyMaintenanceWindowStart: \"SUN:23:30\",\n    environmentClass: \"mw1.small\",\n    airflowConfigurationOptions: {\n        \"core.log_format\": \"[%%(asctime)s] {{%%(filename)s:%%(lineno)d}} %%(levelname)s - %%(message)s\",\n    },\n    loggingConfiguration: {\n        dagProcessingLogs: {\n            enabled: false,\n            logLevel: \"INFO\",\n        },\n        schedulerLogs: {\n            enabled: false,\n            logLevel: \"INFO\",\n        },\n        taskLogs: {\n            enabled: false,\n            logLevel: \"INFO\",\n        },\n        webserverLogs: {\n            enabled: false,\n            logLevel: \"INFO\",\n        },\n        workerLogs: {\n            enabled: false,\n            logLevel: \"INFO\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\ntenant_kms_key = duplocloud.get_tenant_aws_kms_key_output(tenant_id=myapp.tenant_id)\nmy_mwaa = duplocloud.AwsMwaaEnvironment(\"my-mwaa\",\n    tenant_id=myapp.tenant_id,\n    name=\"airflow-test\",\n    source_bucket_arn=\"arn:aws:s3:::xxx-xxx-xx-xxxx\",\n    dag_s3_path=\"AirflowDags/dag\",\n    plugins_s3_path=\"AirflowDags/plugins.zip\",\n    requirements_s3_path=\"AirflowDags/requirements.txt\",\n    startup_script_s3_path=\"AirflowDags/startup-script.sh\",\n    kms_key=tenant_kms_key.key_arn,\n    schedulers=2,\n    max_workers=10,\n    min_workers=1,\n    airflow_version=\"2.6.3\",\n    weekly_maintenance_window_start=\"SUN:23:30\",\n    environment_class=\"mw1.small\",\n    airflow_configuration_options={\n        \"core.log_format\": \"[%%(asctime)s] {{%%(filename)s:%%(lineno)d}} %%(levelname)s - %%(message)s\",\n    },\n    logging_configuration={\n        \"dag_processing_logs\": {\n            \"enabled\": False,\n            \"log_level\": \"INFO\",\n        },\n        \"scheduler_logs\": {\n            \"enabled\": False,\n            \"log_level\": \"INFO\",\n        },\n        \"task_logs\": {\n            \"enabled\": False,\n            \"log_level\": \"INFO\",\n        },\n        \"webserver_logs\": {\n            \"enabled\": False,\n            \"log_level\": \"INFO\",\n        },\n        \"worker_logs\": {\n            \"enabled\": False,\n            \"log_level\": \"INFO\",\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var tenantKmsKey = Duplocloud.GetTenantAwsKmsKey.Invoke(new()\n    {\n        TenantId = myapp.TenantId,\n    });\n\n    var my_mwaa = new Duplocloud.AwsMwaaEnvironment(\"my-mwaa\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"airflow-test\",\n        SourceBucketArn = \"arn:aws:s3:::xxx-xxx-xx-xxxx\",\n        DagS3Path = \"AirflowDags/dag\",\n        PluginsS3Path = \"AirflowDags/plugins.zip\",\n        RequirementsS3Path = \"AirflowDags/requirements.txt\",\n        StartupScriptS3Path = \"AirflowDags/startup-script.sh\",\n        KmsKey = tenantKmsKey.Apply(getTenantAwsKmsKeyResult =\u003e getTenantAwsKmsKeyResult.KeyArn),\n        Schedulers = 2,\n        MaxWorkers = 10,\n        MinWorkers = 1,\n        AirflowVersion = \"2.6.3\",\n        WeeklyMaintenanceWindowStart = \"SUN:23:30\",\n        EnvironmentClass = \"mw1.small\",\n        AirflowConfigurationOptions = \n        {\n            { \"core.log_format\", \"[%%(asctime)s] {{%%(filename)s:%%(lineno)d}} %%(levelname)s - %%(message)s\" },\n        },\n        LoggingConfiguration = new Duplocloud.Inputs.AwsMwaaEnvironmentLoggingConfigurationArgs\n        {\n            DagProcessingLogs = new Duplocloud.Inputs.AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogsArgs\n            {\n                Enabled = false,\n                LogLevel = \"INFO\",\n            },\n            SchedulerLogs = new Duplocloud.Inputs.AwsMwaaEnvironmentLoggingConfigurationSchedulerLogsArgs\n            {\n                Enabled = false,\n                LogLevel = \"INFO\",\n            },\n            TaskLogs = new Duplocloud.Inputs.AwsMwaaEnvironmentLoggingConfigurationTaskLogsArgs\n            {\n                Enabled = false,\n                LogLevel = \"INFO\",\n            },\n            WebserverLogs = new Duplocloud.Inputs.AwsMwaaEnvironmentLoggingConfigurationWebserverLogsArgs\n            {\n                Enabled = false,\n                LogLevel = \"INFO\",\n            },\n            WorkerLogs = new Duplocloud.Inputs.AwsMwaaEnvironmentLoggingConfigurationWorkerLogsArgs\n            {\n                Enabled = false,\n                LogLevel = \"INFO\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttenantKmsKey := duplocloud.GetTenantAwsKmsKeyOutput(ctx, duplocloud.GetTenantAwsKmsKeyOutputArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t}, nil)\n\t\t_, err = duplocloud.NewAwsMwaaEnvironment(ctx, \"my-mwaa\", \u0026duplocloud.AwsMwaaEnvironmentArgs{\n\t\t\tTenantId:            myapp.TenantId,\n\t\t\tName:                pulumi.String(\"airflow-test\"),\n\t\t\tSourceBucketArn:     pulumi.String(\"arn:aws:s3:::xxx-xxx-xx-xxxx\"),\n\t\t\tDagS3Path:           pulumi.String(\"AirflowDags/dag\"),\n\t\t\tPluginsS3Path:       pulumi.String(\"AirflowDags/plugins.zip\"),\n\t\t\tRequirementsS3Path:  pulumi.String(\"AirflowDags/requirements.txt\"),\n\t\t\tStartupScriptS3Path: pulumi.String(\"AirflowDags/startup-script.sh\"),\n\t\t\tKmsKey: pulumi.String(tenantKmsKey.ApplyT(func(tenantKmsKey duplocloud.GetTenantAwsKmsKeyResult) (*string, error) {\n\t\t\t\treturn \u0026tenantKmsKey.KeyArn, nil\n\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t\tSchedulers:                   pulumi.Int(2),\n\t\t\tMaxWorkers:                   pulumi.Int(10),\n\t\t\tMinWorkers:                   pulumi.Int(1),\n\t\t\tAirflowVersion:               pulumi.String(\"2.6.3\"),\n\t\t\tWeeklyMaintenanceWindowStart: pulumi.String(\"SUN:23:30\"),\n\t\t\tEnvironmentClass:             pulumi.String(\"mw1.small\"),\n\t\t\tAirflowConfigurationOptions: pulumi.StringMap{\n\t\t\t\t\"core.log_format\": pulumi.String(\"[%%(asctime)s] {{%%(filename)s:%%(lineno)d}} %%(levelname)s - %%(message)s\"),\n\t\t\t},\n\t\t\tLoggingConfiguration: \u0026duplocloud.AwsMwaaEnvironmentLoggingConfigurationArgs{\n\t\t\t\tDagProcessingLogs: \u0026duplocloud.AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogsArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(false),\n\t\t\t\t\tLogLevel: pulumi.String(\"INFO\"),\n\t\t\t\t},\n\t\t\t\tSchedulerLogs: \u0026duplocloud.AwsMwaaEnvironmentLoggingConfigurationSchedulerLogsArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(false),\n\t\t\t\t\tLogLevel: pulumi.String(\"INFO\"),\n\t\t\t\t},\n\t\t\t\tTaskLogs: \u0026duplocloud.AwsMwaaEnvironmentLoggingConfigurationTaskLogsArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(false),\n\t\t\t\t\tLogLevel: pulumi.String(\"INFO\"),\n\t\t\t\t},\n\t\t\t\tWebserverLogs: \u0026duplocloud.AwsMwaaEnvironmentLoggingConfigurationWebserverLogsArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(false),\n\t\t\t\t\tLogLevel: pulumi.String(\"INFO\"),\n\t\t\t\t},\n\t\t\t\tWorkerLogs: \u0026duplocloud.AwsMwaaEnvironmentLoggingConfigurationWorkerLogsArgs{\n\t\t\t\t\tEnabled:  pulumi.Bool(false),\n\t\t\t\t\tLogLevel: pulumi.String(\"INFO\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantAwsKmsKeyArgs;\nimport com.pulumi.duplocloud.AwsMwaaEnvironment;\nimport com.pulumi.duplocloud.AwsMwaaEnvironmentArgs;\nimport com.pulumi.duplocloud.inputs.AwsMwaaEnvironmentLoggingConfigurationArgs;\nimport com.pulumi.duplocloud.inputs.AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogsArgs;\nimport com.pulumi.duplocloud.inputs.AwsMwaaEnvironmentLoggingConfigurationSchedulerLogsArgs;\nimport com.pulumi.duplocloud.inputs.AwsMwaaEnvironmentLoggingConfigurationTaskLogsArgs;\nimport com.pulumi.duplocloud.inputs.AwsMwaaEnvironmentLoggingConfigurationWebserverLogsArgs;\nimport com.pulumi.duplocloud.inputs.AwsMwaaEnvironmentLoggingConfigurationWorkerLogsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        final var tenantKmsKey = DuplocloudFunctions.getTenantAwsKmsKey(GetTenantAwsKmsKeyArgs.builder()\n            .tenantId(myapp.tenantId())\n            .build());\n\n        var my_mwaa = new AwsMwaaEnvironment(\"my-mwaa\", AwsMwaaEnvironmentArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"airflow-test\")\n            .sourceBucketArn(\"arn:aws:s3:::xxx-xxx-xx-xxxx\")\n            .dagS3Path(\"AirflowDags/dag\")\n            .pluginsS3Path(\"AirflowDags/plugins.zip\")\n            .requirementsS3Path(\"AirflowDags/requirements.txt\")\n            .startupScriptS3Path(\"AirflowDags/startup-script.sh\")\n            .kmsKey(tenantKmsKey.applyValue(getTenantAwsKmsKeyResult -\u003e getTenantAwsKmsKeyResult).applyValue(tenantKmsKey -\u003e tenantKmsKey.applyValue(getTenantAwsKmsKeyResult -\u003e getTenantAwsKmsKeyResult.keyArn())))\n            .schedulers(2)\n            .maxWorkers(10)\n            .minWorkers(1)\n            .airflowVersion(\"2.6.3\")\n            .weeklyMaintenanceWindowStart(\"SUN:23:30\")\n            .environmentClass(\"mw1.small\")\n            .airflowConfigurationOptions(Map.of(\"core.log_format\", \"[%%(asctime)s] {{%%(filename)s:%%(lineno)d}} %%(levelname)s - %%(message)s\"))\n            .loggingConfiguration(AwsMwaaEnvironmentLoggingConfigurationArgs.builder()\n                .dagProcessingLogs(AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogsArgs.builder()\n                    .enabled(false)\n                    .logLevel(\"INFO\")\n                    .build())\n                .schedulerLogs(AwsMwaaEnvironmentLoggingConfigurationSchedulerLogsArgs.builder()\n                    .enabled(false)\n                    .logLevel(\"INFO\")\n                    .build())\n                .taskLogs(AwsMwaaEnvironmentLoggingConfigurationTaskLogsArgs.builder()\n                    .enabled(false)\n                    .logLevel(\"INFO\")\n                    .build())\n                .webserverLogs(AwsMwaaEnvironmentLoggingConfigurationWebserverLogsArgs.builder()\n                    .enabled(false)\n                    .logLevel(\"INFO\")\n                    .build())\n                .workerLogs(AwsMwaaEnvironmentLoggingConfigurationWorkerLogsArgs.builder()\n                    .enabled(false)\n                    .logLevel(\"INFO\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  my-mwaa:\n    type: duplocloud:AwsMwaaEnvironment\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: airflow-test\n      sourceBucketArn: arn:aws:s3:::xxx-xxx-xx-xxxx\n      dagS3Path: AirflowDags/dag\n      pluginsS3Path: AirflowDags/plugins.zip\n      requirementsS3Path: AirflowDags/requirements.txt\n      startupScriptS3Path: AirflowDags/startup-script.sh\n      kmsKey: ${tenantKmsKey.keyArn}\n      schedulers: 2\n      maxWorkers: 10\n      minWorkers: 1\n      airflowVersion: 2.6.3\n      weeklyMaintenanceWindowStart: SUN:23:30\n      environmentClass: mw1.small\n      airflowConfigurationOptions:\n        core.log_format: '[%%(asctime)s] {{%%(filename)s:%%(lineno)d}} %%(levelname)s - %%(message)s'\n      loggingConfiguration:\n        dagProcessingLogs:\n          enabled: false\n          logLevel: INFO\n        schedulerLogs:\n          enabled: false\n          logLevel: INFO\n        taskLogs:\n          enabled: false\n          logLevel: INFO\n        webserverLogs:\n          enabled: false\n          logLevel: INFO\n        workerLogs:\n          enabled: false\n          logLevel: INFO\nvariables:\n  tenantKmsKey:\n    fn::invoke:\n      function: duplocloud:getTenantAwsKmsKey\n      arguments:\n        tenantId: ${myapp.tenantId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS MWAA Environment resource.\n\n - *TENANT_ID* is the tenant GUID\n\n - *FULL_NAME* is the fullname of the AWS MWAA Environment resource\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsMwaaEnvironment:AwsMwaaEnvironment my-mwaa *TENANT_ID*/*FULL_NAME*\n```\n\n",
            "properties": {
                "airflowConfigurationOptions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The `airflow_configuration_options` parameter specifies airflow override options\n",
                    "secret": true
                },
                "airflowVersion": {
                    "type": "string",
                    "description": "Airflow version of your environment, will be set by default to the latest version that MWAA supports.\n"
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN of the Managed Workflows Apache Airflow.\n"
                },
                "dagS3Path": {
                    "type": "string",
                    "description": "The relative path to the DAG folder on your Amazon S3 storage bucket.\n"
                },
                "environmentClass": {
                    "type": "string",
                    "description": "Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`, `mw1.xlarge`, `mw1.2xlarge`.\n"
                },
                "executionRoleArn": {
                    "type": "string",
                    "description": "The Execution Role ARN of the Amazon MWAA Environment\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name provided by duplo for Apache Airflow Environment.\n"
                },
                "kmsKey": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key aws/airflow by default.\n"
                },
                "lastUpdateds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsMwaaEnvironmentLastUpdated:AwsMwaaEnvironmentLastUpdated"
                    }
                },
                "loggingConfiguration": {
                    "$ref": "#/types/duplocloud:index/AwsMwaaEnvironmentLoggingConfiguration:AwsMwaaEnvironmentLoggingConfiguration"
                },
                "maxWorkers": {
                    "type": "integer",
                    "description": "The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`.\n"
                },
                "minWorkers": {
                    "type": "integer",
                    "description": "The minimum number of workers that you want to run in your environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Apache Airflow Environment.\n"
                },
                "pluginsS3ObjectVersion": {
                    "type": "string",
                    "description": "The plugins.zip file version you want to use. If not set, latest s3 file version will be used.\n"
                },
                "pluginsS3Path": {
                    "type": "string",
                    "description": "The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then `plugins_s3_object_version` is required.\n"
                },
                "requirementsS3ObjectVersion": {
                    "type": "string",
                    "description": "The requirements.txt file version you want to use. If not set, latest s3 file version will be used.\n"
                },
                "requirementsS3Path": {
                    "type": "string",
                    "description": "The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements*s3*object_version is required.\n"
                },
                "schedulers": {
                    "type": "integer",
                    "description": "The number of schedulers that you want to run in your environment.\n"
                },
                "sourceBucketArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.\n"
                },
                "startupScriptS3ObjectVersion": {
                    "type": "string",
                    "description": "The startup script file version you want to use. If not set, latest s3 file version will be used.\n"
                },
                "startupScriptS3Path": {
                    "type": "string",
                    "description": "The relative path to the startup script file on your Amazon S3 storage bucket. For example, startup_script.sh.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Amazon MWAA Environment.\n"
                },
                "tags": {
                    "type": "string",
                    "description": "Tags.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the Managed Workflows Apache Airflow will be created in.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Amazon MWAA Environment to be ready, after creation. Defaults to `true`.\n"
                },
                "webserverAccessMode": {
                    "type": "string",
                    "description": "Specifies whether the webserver should be accessible over the internet or via your specified VPC.  Defaults to `PUBLIC_ONLY`.\n"
                },
                "webserverUrl": {
                    "type": "string",
                    "description": "The webserver URL of the MWAA Environment.\n"
                },
                "weeklyMaintenanceWindowStart": {
                    "type": "string",
                    "description": "Specifies the start date for the weekly maintenance window.\n"
                }
            },
            "required": [
                "airflowConfigurationOptions",
                "airflowVersion",
                "arn",
                "dagS3Path",
                "environmentClass",
                "executionRoleArn",
                "fullname",
                "lastUpdateds",
                "loggingConfiguration",
                "maxWorkers",
                "minWorkers",
                "name",
                "pluginsS3ObjectVersion",
                "pluginsS3Path",
                "requirementsS3ObjectVersion",
                "requirementsS3Path",
                "schedulers",
                "sourceBucketArn",
                "startupScriptS3ObjectVersion",
                "startupScriptS3Path",
                "status",
                "tags",
                "tenantId",
                "webserverUrl",
                "weeklyMaintenanceWindowStart"
            ],
            "inputProperties": {
                "airflowConfigurationOptions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The `airflow_configuration_options` parameter specifies airflow override options\n",
                    "secret": true
                },
                "airflowVersion": {
                    "type": "string",
                    "description": "Airflow version of your environment, will be set by default to the latest version that MWAA supports.\n",
                    "willReplaceOnChanges": true
                },
                "dagS3Path": {
                    "type": "string",
                    "description": "The relative path to the DAG folder on your Amazon S3 storage bucket.\n"
                },
                "environmentClass": {
                    "type": "string",
                    "description": "Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`, `mw1.xlarge`, `mw1.2xlarge`.\n"
                },
                "executionRoleArn": {
                    "type": "string",
                    "description": "The Execution Role ARN of the Amazon MWAA Environment\n"
                },
                "kmsKey": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key aws/airflow by default.\n",
                    "willReplaceOnChanges": true
                },
                "loggingConfiguration": {
                    "$ref": "#/types/duplocloud:index/AwsMwaaEnvironmentLoggingConfiguration:AwsMwaaEnvironmentLoggingConfiguration"
                },
                "maxWorkers": {
                    "type": "integer",
                    "description": "The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`.\n"
                },
                "minWorkers": {
                    "type": "integer",
                    "description": "The minimum number of workers that you want to run in your environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Apache Airflow Environment.\n",
                    "willReplaceOnChanges": true
                },
                "pluginsS3ObjectVersion": {
                    "type": "string",
                    "description": "The plugins.zip file version you want to use. If not set, latest s3 file version will be used.\n"
                },
                "pluginsS3Path": {
                    "type": "string",
                    "description": "The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then `plugins_s3_object_version` is required.\n"
                },
                "requirementsS3ObjectVersion": {
                    "type": "string",
                    "description": "The requirements.txt file version you want to use. If not set, latest s3 file version will be used.\n"
                },
                "requirementsS3Path": {
                    "type": "string",
                    "description": "The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements*s3*object_version is required.\n"
                },
                "schedulers": {
                    "type": "integer",
                    "description": "The number of schedulers that you want to run in your environment.\n"
                },
                "sourceBucketArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.\n"
                },
                "startupScriptS3ObjectVersion": {
                    "type": "string",
                    "description": "The startup script file version you want to use. If not set, latest s3 file version will be used.\n"
                },
                "startupScriptS3Path": {
                    "type": "string",
                    "description": "The relative path to the startup script file on your Amazon S3 storage bucket. For example, startup_script.sh.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the Managed Workflows Apache Airflow will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Amazon MWAA Environment to be ready, after creation. Defaults to `true`.\n"
                },
                "webserverAccessMode": {
                    "type": "string",
                    "description": "Specifies whether the webserver should be accessible over the internet or via your specified VPC.  Defaults to `PUBLIC_ONLY`.\n",
                    "willReplaceOnChanges": true
                },
                "weeklyMaintenanceWindowStart": {
                    "type": "string",
                    "description": "Specifies the start date for the weekly maintenance window.\n"
                }
            },
            "requiredInputs": [
                "dagS3Path",
                "sourceBucketArn",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsMwaaEnvironment resources.\n",
                "properties": {
                    "airflowConfigurationOptions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The `airflow_configuration_options` parameter specifies airflow override options\n",
                        "secret": true
                    },
                    "airflowVersion": {
                        "type": "string",
                        "description": "Airflow version of your environment, will be set by default to the latest version that MWAA supports.\n",
                        "willReplaceOnChanges": true
                    },
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the Managed Workflows Apache Airflow.\n"
                    },
                    "dagS3Path": {
                        "type": "string",
                        "description": "The relative path to the DAG folder on your Amazon S3 storage bucket.\n"
                    },
                    "environmentClass": {
                        "type": "string",
                        "description": "Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`, `mw1.xlarge`, `mw1.2xlarge`.\n"
                    },
                    "executionRoleArn": {
                        "type": "string",
                        "description": "The Execution Role ARN of the Amazon MWAA Environment\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name provided by duplo for Apache Airflow Environment.\n"
                    },
                    "kmsKey": {
                        "type": "string",
                        "description": "The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key aws/airflow by default.\n",
                        "willReplaceOnChanges": true
                    },
                    "lastUpdateds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsMwaaEnvironmentLastUpdated:AwsMwaaEnvironmentLastUpdated"
                        }
                    },
                    "loggingConfiguration": {
                        "$ref": "#/types/duplocloud:index/AwsMwaaEnvironmentLoggingConfiguration:AwsMwaaEnvironmentLoggingConfiguration"
                    },
                    "maxWorkers": {
                        "type": "integer",
                        "description": "The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`.\n"
                    },
                    "minWorkers": {
                        "type": "integer",
                        "description": "The minimum number of workers that you want to run in your environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Apache Airflow Environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "pluginsS3ObjectVersion": {
                        "type": "string",
                        "description": "The plugins.zip file version you want to use. If not set, latest s3 file version will be used.\n"
                    },
                    "pluginsS3Path": {
                        "type": "string",
                        "description": "The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then `plugins_s3_object_version` is required.\n"
                    },
                    "requirementsS3ObjectVersion": {
                        "type": "string",
                        "description": "The requirements.txt file version you want to use. If not set, latest s3 file version will be used.\n"
                    },
                    "requirementsS3Path": {
                        "type": "string",
                        "description": "The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements*s3*object_version is required.\n"
                    },
                    "schedulers": {
                        "type": "integer",
                        "description": "The number of schedulers that you want to run in your environment.\n"
                    },
                    "sourceBucketArn": {
                        "type": "string",
                        "description": "The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.\n"
                    },
                    "startupScriptS3ObjectVersion": {
                        "type": "string",
                        "description": "The startup script file version you want to use. If not set, latest s3 file version will be used.\n"
                    },
                    "startupScriptS3Path": {
                        "type": "string",
                        "description": "The relative path to the startup script file on your Amazon S3 storage bucket. For example, startup_script.sh.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Amazon MWAA Environment.\n"
                    },
                    "tags": {
                        "type": "string",
                        "description": "Tags.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the Managed Workflows Apache Airflow will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until Amazon MWAA Environment to be ready, after creation. Defaults to `true`.\n"
                    },
                    "webserverAccessMode": {
                        "type": "string",
                        "description": "Specifies whether the webserver should be accessible over the internet or via your specified VPC.  Defaults to `PUBLIC_ONLY`.\n",
                        "willReplaceOnChanges": true
                    },
                    "webserverUrl": {
                        "type": "string",
                        "description": "The webserver URL of the MWAA Environment.\n"
                    },
                    "weeklyMaintenanceWindowStart": {
                        "type": "string",
                        "description": "Specifies the start date for the weekly maintenance window.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsRdsTag:AwsRdsTag": {
            "description": "`duplocloud.AwsRdsTag` manages an AWS RDS tag in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\nimport * as random from \"@pulumi/random\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\n// Generate a random password.\nconst mypassword = new random.index.Password(\"mypassword\", {\n    length: 16,\n    special: false,\n});\n// Create an RDS instance.\nconst mydb = new duplocloud.RdsInstance(\"mydb\", {\n    tenantId: myapp.tenantId,\n    name: \"mydb\",\n    engine: 1,\n    engineVersion: \"12.5\",\n    size: \"db.t3.medium\",\n    masterUsername: \"myuser\",\n    masterPassword: mypassword.result,\n    encryptStorage: true,\n});\n// Create RDS Tag for type \"instance\".\nconst tag = new duplocloud.AwsRdsTag(\"tag\", {\n    tenantId: myapp.tenantId,\n    resourceType: \"instance\",\n    resourceId: mydb.identifier,\n    key: \"CreatedBy\",\n    value: \"DuploCloud\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\nimport pulumi_random as random\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\n# Generate a random password.\nmypassword = random.index.Password(\"mypassword\",\n    length=16,\n    special=False)\n# Create an RDS instance.\nmydb = duplocloud.RdsInstance(\"mydb\",\n    tenant_id=myapp.tenant_id,\n    name=\"mydb\",\n    engine=1,\n    engine_version=\"12.5\",\n    size=\"db.t3.medium\",\n    master_username=\"myuser\",\n    master_password=mypassword[\"result\"],\n    encrypt_storage=True)\n# Create RDS Tag for type \"instance\".\ntag = duplocloud.AwsRdsTag(\"tag\",\n    tenant_id=myapp.tenant_id,\n    resource_type=\"instance\",\n    resource_id=mydb.identifier,\n    key=\"CreatedBy\",\n    value=\"DuploCloud\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\nusing Random = Pulumi.Random;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    // Generate a random password.\n    var mypassword = new Random.Index.Password(\"mypassword\", new()\n    {\n        Length = 16,\n        Special = false,\n    });\n\n    // Create an RDS instance.\n    var mydb = new Duplocloud.RdsInstance(\"mydb\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"mydb\",\n        Engine = 1,\n        EngineVersion = \"12.5\",\n        Size = \"db.t3.medium\",\n        MasterUsername = \"myuser\",\n        MasterPassword = mypassword.Result,\n        EncryptStorage = true,\n    });\n\n    // Create RDS Tag for type \"instance\".\n    var tag = new Duplocloud.AwsRdsTag(\"tag\", new()\n    {\n        TenantId = myapp.TenantId,\n        ResourceType = \"instance\",\n        ResourceId = mydb.Identifier,\n        Key = \"CreatedBy\",\n        Value = \"DuploCloud\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi-random/sdk/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Generate a random password.\n\t\tmypassword, err := random.NewPassword(ctx, \"mypassword\", \u0026random.PasswordArgs{\n\t\t\tLength:  16,\n\t\t\tSpecial: false,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create an RDS instance.\n\t\tmydb, err := duplocloud.NewRdsInstance(ctx, \"mydb\", \u0026duplocloud.RdsInstanceArgs{\n\t\t\tTenantId:       myapp.TenantId,\n\t\t\tName:           pulumi.String(\"mydb\"),\n\t\t\tEngine:         pulumi.Int(1),\n\t\t\tEngineVersion:  pulumi.String(\"12.5\"),\n\t\t\tSize:           pulumi.String(\"db.t3.medium\"),\n\t\t\tMasterUsername: pulumi.String(\"myuser\"),\n\t\t\tMasterPassword: mypassword.Result,\n\t\t\tEncryptStorage: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create RDS Tag for type \"instance\".\n\t\t_, err = duplocloud.NewAwsRdsTag(ctx, \"tag\", \u0026duplocloud.AwsRdsTagArgs{\n\t\t\tTenantId:     myapp.TenantId,\n\t\t\tResourceType: pulumi.String(\"instance\"),\n\t\t\tResourceId:   mydb.Identifier,\n\t\t\tKey:          pulumi.String(\"CreatedBy\"),\n\t\t\tValue:        pulumi.String(\"DuploCloud\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.random.password;\nimport com.pulumi.random.PasswordArgs;\nimport com.pulumi.duplocloud.RdsInstance;\nimport com.pulumi.duplocloud.RdsInstanceArgs;\nimport com.pulumi.duplocloud.AwsRdsTag;\nimport com.pulumi.duplocloud.AwsRdsTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        // Generate a random password.\n        var mypassword = new Password(\"mypassword\", PasswordArgs.builder()\n            .length(16)\n            .special(false)\n            .build());\n\n        // Create an RDS instance.\n        var mydb = new RdsInstance(\"mydb\", RdsInstanceArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"mydb\")\n            .engine(1)\n            .engineVersion(\"12.5\")\n            .size(\"db.t3.medium\")\n            .masterUsername(\"myuser\")\n            .masterPassword(mypassword.result())\n            .encryptStorage(true)\n            .build());\n\n        // Create RDS Tag for type \"instance\".\n        var tag = new AwsRdsTag(\"tag\", AwsRdsTagArgs.builder()\n            .tenantId(myapp.tenantId())\n            .resourceType(\"instance\")\n            .resourceId(mydb.identifier())\n            .key(\"CreatedBy\")\n            .value(\"DuploCloud\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  # Generate a random password.\n  mypassword:\n    type: random:password\n    properties:\n      length: 16\n      special: false\n  # Create an RDS instance.\n  mydb:\n    type: duplocloud:RdsInstance\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: mydb\n      engine: 1 # PostgreSQL\n      engineVersion: '12.5'\n      size: db.t3.medium\n      masterUsername: myuser\n      masterPassword: ${mypassword.result}\n      encryptStorage: true\n  # Create RDS Tag for type \"instance\".\n  tag:\n    type: duplocloud:AwsRdsTag\n    properties:\n      tenantId: ${myapp.tenantId}\n      resourceType: instance\n      resourceId: ${mydb.identifier}\n      key: CreatedBy\n      value: DuploCloud\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing RDS Tag.\n\n - *TENANT_ID* is the tenant GUID.\n\n - *RESOURCE_TYPE* The type of the RDS resource, Valid vaues are - \"cluster\" and \"instance\".\n\n - *RESOURCE_ID* The RDS identifier.\n\n - *TAG_KEY* The tag name.\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsRdsTag:AwsRdsTag tag1 *TENANT_ID*/*RESOURCE_TYPE*/*RESOURCE_ID*/*TAG_KEY*\n```\n\n",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The tag name.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the RDS resource to manage the tag for.\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "The type of the RDS resource to manage the tag for. Valid values are `cluster` and `instance`.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the RDS tag will be created in.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the tag.\n"
                }
            },
            "required": [
                "key",
                "resourceId",
                "resourceType",
                "tenantId",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "The tag name.\n",
                    "willReplaceOnChanges": true
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the RDS resource to manage the tag for.\n",
                    "willReplaceOnChanges": true
                },
                "resourceType": {
                    "type": "string",
                    "description": "The type of the RDS resource to manage the tag for. Valid values are `cluster` and `instance`.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the RDS tag will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The value of the tag.\n"
                }
            },
            "requiredInputs": [
                "key",
                "resourceId",
                "resourceType",
                "tenantId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsRdsTag resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The tag name.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The ID of the RDS resource to manage the tag for.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "The type of the RDS resource to manage the tag for. Valid values are `cluster` and `instance`.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the RDS tag will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the tag.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsSnsTopic:AwsSnsTopic": {
            "description": "`duplocloud.AwsSnsTopic` manages a SNS topic in Duplo.\n\n## Import\n\nExample: Importing an existing AWS SNS Topic\n\n - *TENANT_ID* is the tenant GUID\n\n - *ARN* The ARN of the created Amazon SNS Topic.\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsSnsTopic:AwsSnsTopic sns_topic *TENANT_ID*/*ARN*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN of the SNS topic.\n"
                },
                "fifoContentBasedDeduplication": {
                    "type": "boolean",
                    "description": "Whether to enable content based deduplication for fifo type SNS topics Defaults to `false`.\n"
                },
                "fifoTopic": {
                    "type": "boolean",
                    "description": "Whether the topic processes messages as fifo or not Defaults to `false`.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the SNS topic.\n"
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "The ID of an AWS-managed customer master key (CMK) for Amazon SNS or a custom CMK.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the topic. Topic names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters long.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the SNS topic will be created in.\n"
                }
            },
            "required": [
                "arn",
                "fullname",
                "kmsKeyId",
                "name",
                "tenantId"
            ],
            "inputProperties": {
                "fifoContentBasedDeduplication": {
                    "type": "boolean",
                    "description": "Whether to enable content based deduplication for fifo type SNS topics Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "fifoTopic": {
                    "type": "boolean",
                    "description": "Whether the topic processes messages as fifo or not Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "The ID of an AWS-managed customer master key (CMK) for Amazon SNS or a custom CMK.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the topic. Topic names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters long.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the SNS topic will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsSnsTopic resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the SNS topic.\n"
                    },
                    "fifoContentBasedDeduplication": {
                        "type": "boolean",
                        "description": "Whether to enable content based deduplication for fifo type SNS topics Defaults to `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "fifoTopic": {
                        "type": "boolean",
                        "description": "Whether the topic processes messages as fifo or not Defaults to `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the SNS topic.\n"
                    },
                    "kmsKeyId": {
                        "type": "string",
                        "description": "The ID of an AWS-managed customer master key (CMK) for Amazon SNS or a custom CMK.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the topic. Topic names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters long.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the SNS topic will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsSqsQueue:AwsSqsQueue": {
            "description": "`duplocloud.AwsSqsQueue` manages a SQS queue in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst sqsQueue = new duplocloud.AwsSqsQueue(\"sqs_queue\", {\n    tenantId: myapp.tenantId,\n    name: \"duplo_queue\",\n    fifoQueue: true,\n    messageRetentionSeconds: 345600,\n    visibilityTimeoutSeconds: 30,\n    contentBasedDeduplication: true,\n    delaySeconds: 10,\n});\n// SQS queue with dead letter queue configuration\nconst sqsQueueWithDlq = new duplocloud.AwsSqsQueue(\"sqs_queue_with_dlq\", {\n    tenantId: myapp.tenantId,\n    name: \"duplo_queue\",\n    fifoQueue: true,\n    messageRetentionSeconds: 345600,\n    visibilityTimeoutSeconds: 30,\n    contentBasedDeduplication: true,\n    delaySeconds: 10,\n    deadLetterQueueConfiguration: {\n        targetSqsDlqName: sqsQueue.fullname,\n        maxMessageReceiveAttempts: 5,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nsqs_queue = duplocloud.AwsSqsQueue(\"sqs_queue\",\n    tenant_id=myapp.tenant_id,\n    name=\"duplo_queue\",\n    fifo_queue=True,\n    message_retention_seconds=345600,\n    visibility_timeout_seconds=30,\n    content_based_deduplication=True,\n    delay_seconds=10)\n# SQS queue with dead letter queue configuration\nsqs_queue_with_dlq = duplocloud.AwsSqsQueue(\"sqs_queue_with_dlq\",\n    tenant_id=myapp.tenant_id,\n    name=\"duplo_queue\",\n    fifo_queue=True,\n    message_retention_seconds=345600,\n    visibility_timeout_seconds=30,\n    content_based_deduplication=True,\n    delay_seconds=10,\n    dead_letter_queue_configuration={\n        \"target_sqs_dlq_name\": sqs_queue.fullname,\n        \"max_message_receive_attempts\": 5,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var sqsQueue = new Duplocloud.AwsSqsQueue(\"sqs_queue\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"duplo_queue\",\n        FifoQueue = true,\n        MessageRetentionSeconds = 345600,\n        VisibilityTimeoutSeconds = 30,\n        ContentBasedDeduplication = true,\n        DelaySeconds = 10,\n    });\n\n    // SQS queue with dead letter queue configuration\n    var sqsQueueWithDlq = new Duplocloud.AwsSqsQueue(\"sqs_queue_with_dlq\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"duplo_queue\",\n        FifoQueue = true,\n        MessageRetentionSeconds = 345600,\n        VisibilityTimeoutSeconds = 30,\n        ContentBasedDeduplication = true,\n        DelaySeconds = 10,\n        DeadLetterQueueConfiguration = new Duplocloud.Inputs.AwsSqsQueueDeadLetterQueueConfigurationArgs\n        {\n            TargetSqsDlqName = sqsQueue.Fullname,\n            MaxMessageReceiveAttempts = 5,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsqsQueue, err := duplocloud.NewAwsSqsQueue(ctx, \"sqs_queue\", \u0026duplocloud.AwsSqsQueueArgs{\n\t\t\tTenantId:                  myapp.TenantId,\n\t\t\tName:                      pulumi.String(\"duplo_queue\"),\n\t\t\tFifoQueue:                 pulumi.Bool(true),\n\t\t\tMessageRetentionSeconds:   pulumi.Int(345600),\n\t\t\tVisibilityTimeoutSeconds:  pulumi.Int(30),\n\t\t\tContentBasedDeduplication: pulumi.Bool(true),\n\t\t\tDelaySeconds:              pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// SQS queue with dead letter queue configuration\n\t\t_, err = duplocloud.NewAwsSqsQueue(ctx, \"sqs_queue_with_dlq\", \u0026duplocloud.AwsSqsQueueArgs{\n\t\t\tTenantId:                  myapp.TenantId,\n\t\t\tName:                      pulumi.String(\"duplo_queue\"),\n\t\t\tFifoQueue:                 pulumi.Bool(true),\n\t\t\tMessageRetentionSeconds:   pulumi.Int(345600),\n\t\t\tVisibilityTimeoutSeconds:  pulumi.Int(30),\n\t\t\tContentBasedDeduplication: pulumi.Bool(true),\n\t\t\tDelaySeconds:              pulumi.Int(10),\n\t\t\tDeadLetterQueueConfiguration: \u0026duplocloud.AwsSqsQueueDeadLetterQueueConfigurationArgs{\n\t\t\t\tTargetSqsDlqName:          sqsQueue.Fullname,\n\t\t\t\tMaxMessageReceiveAttempts: pulumi.Int(5),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsSqsQueue;\nimport com.pulumi.duplocloud.AwsSqsQueueArgs;\nimport com.pulumi.duplocloud.inputs.AwsSqsQueueDeadLetterQueueConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var sqsQueue = new AwsSqsQueue(\"sqsQueue\", AwsSqsQueueArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"duplo_queue\")\n            .fifoQueue(true)\n            .messageRetentionSeconds(345600)\n            .visibilityTimeoutSeconds(30)\n            .contentBasedDeduplication(true)\n            .delaySeconds(10)\n            .build());\n\n        // SQS queue with dead letter queue configuration\n        var sqsQueueWithDlq = new AwsSqsQueue(\"sqsQueueWithDlq\", AwsSqsQueueArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"duplo_queue\")\n            .fifoQueue(true)\n            .messageRetentionSeconds(345600)\n            .visibilityTimeoutSeconds(30)\n            .contentBasedDeduplication(true)\n            .delaySeconds(10)\n            .deadLetterQueueConfiguration(AwsSqsQueueDeadLetterQueueConfigurationArgs.builder()\n                .targetSqsDlqName(sqsQueue.fullname())\n                .maxMessageReceiveAttempts(5)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  sqsQueue:\n    type: duplocloud:AwsSqsQueue\n    name: sqs_queue\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: duplo_queue\n      fifoQueue: true\n      messageRetentionSeconds: 345600\n      visibilityTimeoutSeconds: 30\n      contentBasedDeduplication: true\n      delaySeconds: 10\n  # SQS queue with dead letter queue configuration\n  sqsQueueWithDlq:\n    type: duplocloud:AwsSqsQueue\n    name: sqs_queue_with_dlq\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: duplo_queue\n      fifoQueue: true\n      messageRetentionSeconds: 345600\n      visibilityTimeoutSeconds: 30\n      contentBasedDeduplication: true\n      delaySeconds: 10\n      deadLetterQueueConfiguration:\n        targetSqsDlqName: ${sqsQueue.fullname}\n        maxMessageReceiveAttempts: 5\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS SQS Queue\n\n - *TENANT_ID* is the tenant GUID\n\n - *URL* The URL for the created Amazon SQS queue.\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsSqsQueue:AwsSqsQueue sqs_queue *TENANT_ID*/*URL*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN of the SQS queue.\n"
                },
                "contentBasedDeduplication": {
                    "type": "boolean",
                    "description": "Enables content-based deduplication for FIFO queues.\n"
                },
                "deadLetterQueueConfiguration": {
                    "$ref": "#/types/duplocloud:index/AwsSqsQueueDeadLetterQueueConfiguration:AwsSqsQueueDeadLetterQueueConfiguration",
                    "description": "SQS configuration for the SQS resource\n"
                },
                "deduplicationScope": {
                    "type": "string",
                    "description": "Specifies whether message deduplication occurs at the message group or queue level. Valid values are `messageGroup` and `queue`.\n"
                },
                "delaySeconds": {
                    "type": "integer",
                    "description": "Postpone the delivery of new messages to consumers for a number of seconds seconds range [0-900]\n"
                },
                "fifoQueue": {
                    "type": "boolean",
                    "description": "Boolean designating a FIFO queue. If not set, it defaults to `false` making it standard.\n"
                },
                "fifoThroughputLimit": {
                    "type": "string",
                    "description": "Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are `perQueue` (default) and `perMessageGroupId`.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the SQS queue.\n"
                },
                "messageRetentionSeconds": {
                    "type": "integer",
                    "description": "The number of seconds Amazon SQS retains a message. Integer representing seconds, from 60 (1 minute) to 1209600 (14 days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the queue. Queue names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and have up to 80 characters long which is inclusive of duplo prefix (duploservices-{tenant_name}-) appended by the system.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the SQS queue will be created in.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL for the created Amazon SQS queue.\n"
                },
                "visibilityTimeoutSeconds": {
                    "type": "integer",
                    "description": "The visibility timeout for the queue. An integer from 0 to 43200 (12 hours).\n"
                }
            },
            "required": [
                "arn",
                "contentBasedDeduplication",
                "deduplicationScope",
                "delaySeconds",
                "fifoThroughputLimit",
                "fullname",
                "messageRetentionSeconds",
                "name",
                "tenantId",
                "url",
                "visibilityTimeoutSeconds"
            ],
            "inputProperties": {
                "contentBasedDeduplication": {
                    "type": "boolean",
                    "description": "Enables content-based deduplication for FIFO queues.\n"
                },
                "deadLetterQueueConfiguration": {
                    "$ref": "#/types/duplocloud:index/AwsSqsQueueDeadLetterQueueConfiguration:AwsSqsQueueDeadLetterQueueConfiguration",
                    "description": "SQS configuration for the SQS resource\n"
                },
                "deduplicationScope": {
                    "type": "string",
                    "description": "Specifies whether message deduplication occurs at the message group or queue level. Valid values are `messageGroup` and `queue`.\n"
                },
                "delaySeconds": {
                    "type": "integer",
                    "description": "Postpone the delivery of new messages to consumers for a number of seconds seconds range [0-900]\n"
                },
                "fifoQueue": {
                    "type": "boolean",
                    "description": "Boolean designating a FIFO queue. If not set, it defaults to `false` making it standard.\n"
                },
                "fifoThroughputLimit": {
                    "type": "string",
                    "description": "Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are `perQueue` (default) and `perMessageGroupId`.\n"
                },
                "messageRetentionSeconds": {
                    "type": "integer",
                    "description": "The number of seconds Amazon SQS retains a message. Integer representing seconds, from 60 (1 minute) to 1209600 (14 days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the queue. Queue names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and have up to 80 characters long which is inclusive of duplo prefix (duploservices-{tenant_name}-) appended by the system.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the SQS queue will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "visibilityTimeoutSeconds": {
                    "type": "integer",
                    "description": "The visibility timeout for the queue. An integer from 0 to 43200 (12 hours).\n"
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsSqsQueue resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the SQS queue.\n"
                    },
                    "contentBasedDeduplication": {
                        "type": "boolean",
                        "description": "Enables content-based deduplication for FIFO queues.\n"
                    },
                    "deadLetterQueueConfiguration": {
                        "$ref": "#/types/duplocloud:index/AwsSqsQueueDeadLetterQueueConfiguration:AwsSqsQueueDeadLetterQueueConfiguration",
                        "description": "SQS configuration for the SQS resource\n"
                    },
                    "deduplicationScope": {
                        "type": "string",
                        "description": "Specifies whether message deduplication occurs at the message group or queue level. Valid values are `messageGroup` and `queue`.\n"
                    },
                    "delaySeconds": {
                        "type": "integer",
                        "description": "Postpone the delivery of new messages to consumers for a number of seconds seconds range [0-900]\n"
                    },
                    "fifoQueue": {
                        "type": "boolean",
                        "description": "Boolean designating a FIFO queue. If not set, it defaults to `false` making it standard.\n"
                    },
                    "fifoThroughputLimit": {
                        "type": "string",
                        "description": "Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are `perQueue` (default) and `perMessageGroupId`.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the SQS queue.\n"
                    },
                    "messageRetentionSeconds": {
                        "type": "integer",
                        "description": "The number of seconds Amazon SQS retains a message. Integer representing seconds, from 60 (1 minute) to 1209600 (14 days).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the queue. Queue names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and have up to 80 characters long which is inclusive of duplo prefix (duploservices-{tenant_name}-) appended by the system.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the SQS queue will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL for the created Amazon SQS queue.\n"
                    },
                    "visibilityTimeoutSeconds": {
                        "type": "integer",
                        "description": "The visibility timeout for the queue. An integer from 0 to 43200 (12 hours).\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsSsmParameter:AwsSsmParameter": {
            "description": "`duplocloud.AwsSsmParameter` manages an AWS SSM parameter in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst ssmParam = new duplocloud.AwsSsmParameter(\"ssm_param\", {\n    tenantId: myapp.tenantId,\n    name: \"ssm_param\",\n    type: \"String\",\n    value: \"ssm_param_value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nssm_param = duplocloud.AwsSsmParameter(\"ssm_param\",\n    tenant_id=myapp.tenant_id,\n    name=\"ssm_param\",\n    type=\"String\",\n    value=\"ssm_param_value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var ssmParam = new Duplocloud.AwsSsmParameter(\"ssm_param\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"ssm_param\",\n        Type = \"String\",\n        Value = \"ssm_param_value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsSsmParameter(ctx, \"ssm_param\", \u0026duplocloud.AwsSsmParameterArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tName:     pulumi.String(\"ssm_param\"),\n\t\t\tType:     pulumi.String(\"String\"),\n\t\t\tValue:    pulumi.String(\"ssm_param_value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AwsSsmParameter;\nimport com.pulumi.duplocloud.AwsSsmParameterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var ssmParam = new AwsSsmParameter(\"ssmParam\", AwsSsmParameterArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"ssm_param\")\n            .type(\"String\")\n            .value(\"ssm_param_value\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  ssmParam:\n    type: duplocloud:AwsSsmParameter\n    name: ssm_param\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: ssm_param\n      type: String\n      value: ssm_param_value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS SSM Parameter\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* The name for the created Amazon SSM Parameter.\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsSsmParameter:AwsSsmParameter ssm_param *TENANT_ID*/*NAME*\n```\n\n",
            "properties": {
                "allowedPattern": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SSM parameter.\n"
                },
                "keyId": {
                    "type": "string"
                },
                "lastModifiedDate": {
                    "type": "string"
                },
                "lastModifiedUser": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSM parameter.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the SSM parameter will be created in.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the SSM parameter. Valid values are `String`, `StringList`, and `SecureString`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the SSM parameter.\n",
                    "secret": true
                }
            },
            "required": [
                "allowedPattern",
                "description",
                "keyId",
                "lastModifiedDate",
                "lastModifiedUser",
                "name",
                "tenantId",
                "type",
                "value"
            ],
            "inputProperties": {
                "allowedPattern": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SSM parameter.\n"
                },
                "keyId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSM parameter.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the SSM parameter will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the SSM parameter. Valid values are `String`, `StringList`, and `SecureString`.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The value of the SSM parameter.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "tenantId",
                "type",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsSsmParameter resources.\n",
                "properties": {
                    "allowedPattern": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the SSM parameter.\n"
                    },
                    "keyId": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string"
                    },
                    "lastModifiedUser": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSM parameter.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the SSM parameter will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the SSM parameter. Valid values are `String`, `StringList`, and `SecureString`.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the SSM parameter.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsTargetGroupAttributes:AwsTargetGroupAttributes": {
            "description": "`duplocloud.AwsTargetGroupAttributes` manages an aws target group attributes in Duplo.\n\n## Import\n\nExample: Importing an existing AWS target group attributes.\n\n - *TENANT_ID* is the tenant GUID\n\n - *TARGET_GROUP_ARN* is the ARN of target group.\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsTargetGroupAttributes:AwsTargetGroupAttributes tgAttrs *TENANT_ID*/*TARGET_GROUP_ARN*\n```\n\n",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsTargetGroupAttributesAttribute:AwsTargetGroupAttributesAttribute"
                    }
                },
                "isEcsLb": {
                    "type": "boolean",
                    "description": "Whether or not to look up the LB via an ECS service name instead of replication controller name.\n"
                },
                "isPassthroughLb": {
                    "type": "boolean",
                    "description": "Whether or not to look up the LB via the LB name instead of replication controller name.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port used to connect with the target.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "Name of the ecs service or replication controller.\n"
                },
                "targetGroupArn": {
                    "type": "string",
                    "description": "ARN of the Target Group.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws target group attributes will be created in.\n"
                }
            },
            "required": [
                "attributes",
                "tenantId"
            ],
            "inputProperties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsTargetGroupAttributesAttribute:AwsTargetGroupAttributesAttribute"
                    }
                },
                "isEcsLb": {
                    "type": "boolean",
                    "description": "Whether or not to look up the LB via an ECS service name instead of replication controller name.\n"
                },
                "isPassthroughLb": {
                    "type": "boolean",
                    "description": "Whether or not to look up the LB via the LB name instead of replication controller name.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port used to connect with the target.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "Name of the ecs service or replication controller.\n"
                },
                "targetGroupArn": {
                    "type": "string",
                    "description": "ARN of the Target Group.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the aws target group attributes will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsTargetGroupAttributes resources.\n",
                "properties": {
                    "attributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsTargetGroupAttributesAttribute:AwsTargetGroupAttributesAttribute"
                        }
                    },
                    "isEcsLb": {
                        "type": "boolean",
                        "description": "Whether or not to look up the LB via an ECS service name instead of replication controller name.\n"
                    },
                    "isPassthroughLb": {
                        "type": "boolean",
                        "description": "Whether or not to look up the LB via the LB name instead of replication controller name.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port used to connect with the target.\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "Name of the ecs service or replication controller.\n"
                    },
                    "targetGroupArn": {
                        "type": "string",
                        "description": "ARN of the Target Group.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the aws target group attributes will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsTimestreamwriteDatabase:AwsTimestreamwriteDatabase": {
            "description": "`duplocloud.AwsTimestreamwriteDatabase` manages an aws Timestream database resource in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenantId = \"d186700c-ad18-4525-9593-aad467c843ff\";\nconst kmsKey = duplocloud.getTenantAwsKmsKey({\n    tenantId: tenantId,\n});\nconst timestreamwriteDatabase = new duplocloud.AwsTimestreamwriteDatabase(\"timestreamwrite_database\", {\n    tenantId: tenantId,\n    name: \"test\",\n    kmsKeyId: kmsKey.then(kmsKey =\u003e kmsKey.keyArn),\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant_id = \"d186700c-ad18-4525-9593-aad467c843ff\"\nkms_key = duplocloud.get_tenant_aws_kms_key(tenant_id=tenant_id)\ntimestreamwrite_database = duplocloud.AwsTimestreamwriteDatabase(\"timestreamwrite_database\",\n    tenant_id=tenant_id,\n    name=\"test\",\n    kms_key_id=kms_key.key_arn)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenantId = \"d186700c-ad18-4525-9593-aad467c843ff\";\n\n    var kmsKey = Duplocloud.GetTenantAwsKmsKey.Invoke(new()\n    {\n        TenantId = tenantId,\n    });\n\n    var timestreamwriteDatabase = new Duplocloud.AwsTimestreamwriteDatabase(\"timestreamwrite_database\", new()\n    {\n        TenantId = tenantId,\n        Name = \"test\",\n        KmsKeyId = kmsKey.Apply(getTenantAwsKmsKeyResult =\u003e getTenantAwsKmsKeyResult.KeyArn),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenantId := \"d186700c-ad18-4525-9593-aad467c843ff\"\n\t\tkmsKey, err := duplocloud.GetTenantAwsKmsKey(ctx, \u0026duplocloud.GetTenantAwsKmsKeyArgs{\n\t\t\tTenantId: tenantId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsTimestreamwriteDatabase(ctx, \"timestreamwrite_database\", \u0026duplocloud.AwsTimestreamwriteDatabaseArgs{\n\t\t\tTenantId: pulumi.String(tenantId),\n\t\t\tName:     pulumi.String(\"test\"),\n\t\t\tKmsKeyId: pulumi.String(kmsKey.KeyArn),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantAwsKmsKeyArgs;\nimport com.pulumi.duplocloud.AwsTimestreamwriteDatabase;\nimport com.pulumi.duplocloud.AwsTimestreamwriteDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tenantId = \"d186700c-ad18-4525-9593-aad467c843ff\";\n\n        final var kmsKey = DuplocloudFunctions.getTenantAwsKmsKey(GetTenantAwsKmsKeyArgs.builder()\n            .tenantId(tenantId)\n            .build());\n\n        var timestreamwriteDatabase = new AwsTimestreamwriteDatabase(\"timestreamwriteDatabase\", AwsTimestreamwriteDatabaseArgs.builder()\n            .tenantId(tenantId)\n            .name(\"test\")\n            .kmsKeyId(kmsKey.applyValue(getTenantAwsKmsKeyResult -\u003e getTenantAwsKmsKeyResult.keyArn()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  timestreamwriteDatabase:\n    type: duplocloud:AwsTimestreamwriteDatabase\n    name: timestreamwrite_database\n    properties:\n      tenantId: ${tenantId}\n      name: test\n      kmsKeyId: ${kmsKey.keyArn}\nvariables:\n  tenantId: d186700c-ad18-4525-9593-aad467c843ff\n  kmsKey:\n    fn::invoke:\n      function: duplocloud:getTenantAwsKmsKey\n      arguments:\n        tenantId: ${tenantId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS Timestream Database\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the short name of AWS Timestream Database\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsTimestreamwriteDatabase:AwsTimestreamwriteDatabase timestreamwrite_database *TENANT_ID*/*NAME*\n```\n\n",
            "properties": {
                "allTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsTimestreamwriteDatabaseAllTag:AwsTimestreamwriteDatabaseAllTag"
                    },
                    "description": "A complete list of tags for this time stream database, even ones not being managed by this resource.\n"
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN that uniquely identifies this database.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the Timestream Database.\n"
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "The ARN (not Alias ARN) of the KMS key to be used to encrypt the data stored in the database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the Timestream Database.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "specifiedTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags being managed by this resource.\n"
                },
                "tableCount": {
                    "type": "integer",
                    "description": "The total number of tables found within the Timestream database.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsTimestreamwriteDatabaseTag:AwsTimestreamwriteDatabaseTag"
                    },
                    "description": "Tags in key-value format.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the Timestream Database will be created in.\n"
                }
            },
            "required": [
                "allTags",
                "arn",
                "fullname",
                "kmsKeyId",
                "name",
                "specifiedTags",
                "tableCount",
                "tenantId"
            ],
            "inputProperties": {
                "kmsKeyId": {
                    "type": "string",
                    "description": "The ARN (not Alias ARN) of the KMS key to be used to encrypt the data stored in the database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the Timestream Database.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsTimestreamwriteDatabaseTag:AwsTimestreamwriteDatabaseTag"
                    },
                    "description": "Tags in key-value format.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the Timestream Database will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsTimestreamwriteDatabase resources.\n",
                "properties": {
                    "allTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsTimestreamwriteDatabaseAllTag:AwsTimestreamwriteDatabaseAllTag"
                        },
                        "description": "A complete list of tags for this time stream database, even ones not being managed by this resource.\n"
                    },
                    "arn": {
                        "type": "string",
                        "description": "The ARN that uniquely identifies this database.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the Timestream Database.\n"
                    },
                    "kmsKeyId": {
                        "type": "string",
                        "description": "The ARN (not Alias ARN) of the KMS key to be used to encrypt the data stored in the database.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the Timestream Database.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "specifiedTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags being managed by this resource.\n"
                    },
                    "tableCount": {
                        "type": "integer",
                        "description": "The total number of tables found within the Timestream database.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsTimestreamwriteDatabaseTag:AwsTimestreamwriteDatabaseTag"
                        },
                        "description": "Tags in key-value format.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the Timestream Database will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/awsTimestreamwriteTable:AwsTimestreamwriteTable": {
            "description": "`duplocloud.AwsTimestreamwriteTable` manages an aws Timestream Table resource in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenantId = \"2a80c75d-9f58-4572-83b7-157b05bce259\";\nconst kmsKey = duplocloud.getTenantAwsKmsKey({\n    tenantId: tenantId,\n});\nconst timestreamwriteDatabase = new duplocloud.AwsTimestreamwriteDatabase(\"timestreamwrite_database\", {\n    tenantId: tenantId,\n    name: \"test\",\n    kmsKeyId: kmsKey.then(kmsKey =\u003e kmsKey.keyArn),\n});\nconst timestreamwriteDatabaseTbl = new duplocloud.AwsTimestreamwriteTable(\"timestreamwrite_database_tbl\", {\n    tenantId: tenantId,\n    databaseName: timestreamwriteDatabase.fullname,\n    name: \"example\",\n    retentionProperties: {\n        magneticStoreRetentionPeriodInDays: 30,\n        memoryStoreRetentionPeriodInHours: 8,\n    },\n    magneticStoreWriteProperties: {\n        enableMagneticStoreWrites: true,\n        magneticStoreRejectedDataLocation: {\n            s3Configuration: {\n                bucketName: \"test\",\n                encryptionOption: \"SSE_KMS\",\n                kmsKeyId: kmsKey.then(kmsKey =\u003e kmsKey.keyArn),\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant_id = \"2a80c75d-9f58-4572-83b7-157b05bce259\"\nkms_key = duplocloud.get_tenant_aws_kms_key(tenant_id=tenant_id)\ntimestreamwrite_database = duplocloud.AwsTimestreamwriteDatabase(\"timestreamwrite_database\",\n    tenant_id=tenant_id,\n    name=\"test\",\n    kms_key_id=kms_key.key_arn)\ntimestreamwrite_database_tbl = duplocloud.AwsTimestreamwriteTable(\"timestreamwrite_database_tbl\",\n    tenant_id=tenant_id,\n    database_name=timestreamwrite_database.fullname,\n    name=\"example\",\n    retention_properties={\n        \"magnetic_store_retention_period_in_days\": 30,\n        \"memory_store_retention_period_in_hours\": 8,\n    },\n    magnetic_store_write_properties={\n        \"enable_magnetic_store_writes\": True,\n        \"magnetic_store_rejected_data_location\": {\n            \"s3_configuration\": {\n                \"bucket_name\": \"test\",\n                \"encryption_option\": \"SSE_KMS\",\n                \"kms_key_id\": kms_key.key_arn,\n            },\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenantId = \"2a80c75d-9f58-4572-83b7-157b05bce259\";\n\n    var kmsKey = Duplocloud.GetTenantAwsKmsKey.Invoke(new()\n    {\n        TenantId = tenantId,\n    });\n\n    var timestreamwriteDatabase = new Duplocloud.AwsTimestreamwriteDatabase(\"timestreamwrite_database\", new()\n    {\n        TenantId = tenantId,\n        Name = \"test\",\n        KmsKeyId = kmsKey.Apply(getTenantAwsKmsKeyResult =\u003e getTenantAwsKmsKeyResult.KeyArn),\n    });\n\n    var timestreamwriteDatabaseTbl = new Duplocloud.AwsTimestreamwriteTable(\"timestreamwrite_database_tbl\", new()\n    {\n        TenantId = tenantId,\n        DatabaseName = timestreamwriteDatabase.Fullname,\n        Name = \"example\",\n        RetentionProperties = new Duplocloud.Inputs.AwsTimestreamwriteTableRetentionPropertiesArgs\n        {\n            MagneticStoreRetentionPeriodInDays = 30,\n            MemoryStoreRetentionPeriodInHours = 8,\n        },\n        MagneticStoreWriteProperties = new Duplocloud.Inputs.AwsTimestreamwriteTableMagneticStoreWritePropertiesArgs\n        {\n            EnableMagneticStoreWrites = true,\n            MagneticStoreRejectedDataLocation = new Duplocloud.Inputs.AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs\n            {\n                S3Configuration = new Duplocloud.Inputs.AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs\n                {\n                    BucketName = \"test\",\n                    EncryptionOption = \"SSE_KMS\",\n                    KmsKeyId = kmsKey.Apply(getTenantAwsKmsKeyResult =\u003e getTenantAwsKmsKeyResult.KeyArn),\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenantId := \"2a80c75d-9f58-4572-83b7-157b05bce259\"\n\t\tkmsKey, err := duplocloud.GetTenantAwsKmsKey(ctx, \u0026duplocloud.GetTenantAwsKmsKeyArgs{\n\t\t\tTenantId: tenantId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttimestreamwriteDatabase, err := duplocloud.NewAwsTimestreamwriteDatabase(ctx, \"timestreamwrite_database\", \u0026duplocloud.AwsTimestreamwriteDatabaseArgs{\n\t\t\tTenantId: pulumi.String(tenantId),\n\t\t\tName:     pulumi.String(\"test\"),\n\t\t\tKmsKeyId: pulumi.String(kmsKey.KeyArn),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsTimestreamwriteTable(ctx, \"timestreamwrite_database_tbl\", \u0026duplocloud.AwsTimestreamwriteTableArgs{\n\t\t\tTenantId:     pulumi.String(tenantId),\n\t\t\tDatabaseName: timestreamwriteDatabase.Fullname,\n\t\t\tName:         pulumi.String(\"example\"),\n\t\t\tRetentionProperties: \u0026duplocloud.AwsTimestreamwriteTableRetentionPropertiesArgs{\n\t\t\t\tMagneticStoreRetentionPeriodInDays: pulumi.Int(30),\n\t\t\t\tMemoryStoreRetentionPeriodInHours:  pulumi.Int(8),\n\t\t\t},\n\t\t\tMagneticStoreWriteProperties: \u0026duplocloud.AwsTimestreamwriteTableMagneticStoreWritePropertiesArgs{\n\t\t\t\tEnableMagneticStoreWrites: pulumi.Bool(true),\n\t\t\t\tMagneticStoreRejectedDataLocation: \u0026duplocloud.AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs{\n\t\t\t\t\tS3Configuration: \u0026duplocloud.AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs{\n\t\t\t\t\t\tBucketName:       pulumi.String(\"test\"),\n\t\t\t\t\t\tEncryptionOption: pulumi.String(\"SSE_KMS\"),\n\t\t\t\t\t\tKmsKeyId:         pulumi.String(kmsKey.KeyArn),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantAwsKmsKeyArgs;\nimport com.pulumi.duplocloud.AwsTimestreamwriteDatabase;\nimport com.pulumi.duplocloud.AwsTimestreamwriteDatabaseArgs;\nimport com.pulumi.duplocloud.AwsTimestreamwriteTable;\nimport com.pulumi.duplocloud.AwsTimestreamwriteTableArgs;\nimport com.pulumi.duplocloud.inputs.AwsTimestreamwriteTableRetentionPropertiesArgs;\nimport com.pulumi.duplocloud.inputs.AwsTimestreamwriteTableMagneticStoreWritePropertiesArgs;\nimport com.pulumi.duplocloud.inputs.AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs;\nimport com.pulumi.duplocloud.inputs.AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tenantId = \"2a80c75d-9f58-4572-83b7-157b05bce259\";\n\n        final var kmsKey = DuplocloudFunctions.getTenantAwsKmsKey(GetTenantAwsKmsKeyArgs.builder()\n            .tenantId(tenantId)\n            .build());\n\n        var timestreamwriteDatabase = new AwsTimestreamwriteDatabase(\"timestreamwriteDatabase\", AwsTimestreamwriteDatabaseArgs.builder()\n            .tenantId(tenantId)\n            .name(\"test\")\n            .kmsKeyId(kmsKey.applyValue(getTenantAwsKmsKeyResult -\u003e getTenantAwsKmsKeyResult.keyArn()))\n            .build());\n\n        var timestreamwriteDatabaseTbl = new AwsTimestreamwriteTable(\"timestreamwriteDatabaseTbl\", AwsTimestreamwriteTableArgs.builder()\n            .tenantId(tenantId)\n            .databaseName(timestreamwriteDatabase.fullname())\n            .name(\"example\")\n            .retentionProperties(AwsTimestreamwriteTableRetentionPropertiesArgs.builder()\n                .magneticStoreRetentionPeriodInDays(30)\n                .memoryStoreRetentionPeriodInHours(8)\n                .build())\n            .magneticStoreWriteProperties(AwsTimestreamwriteTableMagneticStoreWritePropertiesArgs.builder()\n                .enableMagneticStoreWrites(true)\n                .magneticStoreRejectedDataLocation(AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs.builder()\n                    .s3Configuration(AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs.builder()\n                        .bucketName(\"test\")\n                        .encryptionOption(\"SSE_KMS\")\n                        .kmsKeyId(kmsKey.applyValue(getTenantAwsKmsKeyResult -\u003e getTenantAwsKmsKeyResult.keyArn()))\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  timestreamwriteDatabase:\n    type: duplocloud:AwsTimestreamwriteDatabase\n    name: timestreamwrite_database\n    properties:\n      tenantId: ${tenantId}\n      name: test\n      kmsKeyId: ${kmsKey.keyArn}\n  timestreamwriteDatabaseTbl:\n    type: duplocloud:AwsTimestreamwriteTable\n    name: timestreamwrite_database_tbl\n    properties:\n      tenantId: ${tenantId}\n      databaseName: ${timestreamwriteDatabase.fullname}\n      name: example\n      retentionProperties:\n        magneticStoreRetentionPeriodInDays: 30\n        memoryStoreRetentionPeriodInHours: 8\n      magneticStoreWriteProperties:\n        enableMagneticStoreWrites: true\n        magneticStoreRejectedDataLocation:\n          s3Configuration:\n            bucketName: test\n            encryptionOption: SSE_KMS\n            kmsKeyId: ${kmsKey.keyArn}\nvariables:\n  tenantId: 2a80c75d-9f58-4572-83b7-157b05bce259\n  kmsKey:\n    fn::invoke:\n      function: duplocloud:getTenantAwsKmsKey\n      arguments:\n        tenantId: ${tenantId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS Timestream Table\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the short name of Timestream Table\n\n#\n\n```sh\n$ pulumi import duplocloud:index/awsTimestreamwriteTable:AwsTimestreamwriteTable timestreamwrite_table *TENANT_ID*/*NAME*\n```\n\n",
            "properties": {
                "allTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsTimestreamwriteTableAllTag:AwsTimestreamwriteTableAllTag"
                    },
                    "description": "A complete list of tags for this time stream database, even ones not being managed by this resource.\n"
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN that uniquely identifies this Table.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The full name of the Timestream database.\n"
                },
                "magneticStoreWriteProperties": {
                    "$ref": "#/types/duplocloud:index/AwsTimestreamwriteTableMagneticStoreWriteProperties:AwsTimestreamwriteTableMagneticStoreWriteProperties",
                    "description": "Contains properties to set on the table when enabling magnetic store writes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the Timestream Table.\n"
                },
                "retentionProperties": {
                    "$ref": "#/types/duplocloud:index/AwsTimestreamwriteTableRetentionProperties:AwsTimestreamwriteTableRetentionProperties",
                    "description": "The retention duration for the memory store and magnetic store.\n"
                },
                "specifiedTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags being managed by this resource.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsTimestreamwriteTableTag:AwsTimestreamwriteTableTag"
                    },
                    "description": "Tags in key-value format.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the Timestream Table will be created in.\n"
                },
                "waitForDeployment": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                }
            },
            "required": [
                "allTags",
                "arn",
                "databaseName",
                "magneticStoreWriteProperties",
                "name",
                "retentionProperties",
                "specifiedTags",
                "tenantId"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The full name of the Timestream database.\n",
                    "willReplaceOnChanges": true
                },
                "magneticStoreWriteProperties": {
                    "$ref": "#/types/duplocloud:index/AwsTimestreamwriteTableMagneticStoreWriteProperties:AwsTimestreamwriteTableMagneticStoreWriteProperties",
                    "description": "Contains properties to set on the table when enabling magnetic store writes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the Timestream Table.\n",
                    "willReplaceOnChanges": true
                },
                "retentionProperties": {
                    "$ref": "#/types/duplocloud:index/AwsTimestreamwriteTableRetentionProperties:AwsTimestreamwriteTableRetentionProperties",
                    "description": "The retention duration for the memory store and magnetic store.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AwsTimestreamwriteTableTag:AwsTimestreamwriteTableTag"
                    },
                    "description": "Tags in key-value format.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the Timestream Table will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "waitForDeployment": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsTimestreamwriteTable resources.\n",
                "properties": {
                    "allTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsTimestreamwriteTableAllTag:AwsTimestreamwriteTableAllTag"
                        },
                        "description": "A complete list of tags for this time stream database, even ones not being managed by this resource.\n"
                    },
                    "arn": {
                        "type": "string",
                        "description": "The ARN that uniquely identifies this Table.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The full name of the Timestream database.\n",
                        "willReplaceOnChanges": true
                    },
                    "magneticStoreWriteProperties": {
                        "$ref": "#/types/duplocloud:index/AwsTimestreamwriteTableMagneticStoreWriteProperties:AwsTimestreamwriteTableMagneticStoreWriteProperties",
                        "description": "Contains properties to set on the table when enabling magnetic store writes.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the Timestream Table.\n",
                        "willReplaceOnChanges": true
                    },
                    "retentionProperties": {
                        "$ref": "#/types/duplocloud:index/AwsTimestreamwriteTableRetentionProperties:AwsTimestreamwriteTableRetentionProperties",
                        "description": "The retention duration for the memory store and magnetic store.\n"
                    },
                    "specifiedTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags being managed by this resource.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AwsTimestreamwriteTableTag:AwsTimestreamwriteTableTag"
                        },
                        "description": "Tags in key-value format.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the Timestream Table will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForDeployment": {
                        "type": "boolean",
                        "description": "Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureAvailabilitySet:AzureAvailabilitySet": {
            "description": "`duplocloud.AzureAvailabilitySet` manages logical groupings of VMs that enhance reliability by placing VMs in different fault domains to minimize correlated failures, offering improved VM-to-VM latency and high availability, with no extra cost beyond the VM instances themselves, though they may still be affected by shared infrastructure failures.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst st = new duplocloud.AzureAvailabilitySet(\"st\", {\n    tenantId: myapp.tenantId,\n    name: \"availset\",\n    useManagedDisk: \"Aligned\",\n    platformUpdateDomainCount: 5,\n    platformFaultDomainCount: 2,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nst = duplocloud.AzureAvailabilitySet(\"st\",\n    tenant_id=myapp.tenant_id,\n    name=\"availset\",\n    use_managed_disk=\"Aligned\",\n    platform_update_domain_count=5,\n    platform_fault_domain_count=2)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var st = new Duplocloud.AzureAvailabilitySet(\"st\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"availset\",\n        UseManagedDisk = \"Aligned\",\n        PlatformUpdateDomainCount = 5,\n        PlatformFaultDomainCount = 2,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureAvailabilitySet(ctx, \"st\", \u0026duplocloud.AzureAvailabilitySetArgs{\n\t\t\tTenantId:                  myapp.TenantId,\n\t\t\tName:                      pulumi.String(\"availset\"),\n\t\t\tUseManagedDisk:            pulumi.String(\"Aligned\"),\n\t\t\tPlatformUpdateDomainCount: pulumi.Int(5),\n\t\t\tPlatformFaultDomainCount:  pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureAvailabilitySet;\nimport com.pulumi.duplocloud.AzureAvailabilitySetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var st = new AzureAvailabilitySet(\"st\", AzureAvailabilitySetArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"availset\")\n            .useManagedDisk(\"Aligned\")\n            .platformUpdateDomainCount(5)\n            .platformFaultDomainCount(2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  st:\n    type: duplocloud:AzureAvailabilitySet\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: availset\n      useManagedDisk: Aligned\n      platformUpdateDomainCount: 5\n      platformFaultDomainCount: 2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Availablitu set\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the  name of the Azure Availability set\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureAvailabilitySet:AzureAvailabilitySet this *TENANT_ID*/availability-set/*NAME*\n```\n\n",
            "properties": {
                "availabilitySetId": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name for availability set\n"
                },
                "platformFaultDomainCount": {
                    "type": "integer",
                    "description": "Specify platform fault domain count betweem 1-3, for availability set. Virtual machines in the same fault domain share a common power source and physical network switch. Defaults to `2`.\n"
                },
                "platformUpdateDomainCount": {
                    "type": "integer",
                    "description": "Specify platform update domain count between 1-20, for availability set. Virtual machines in the same update domain will be restarted together during planned maintenance. Azure never restarts more than one update domain at a time. Defaults to `5`.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the host will be created in.\n"
                },
                "type": {
                    "type": "string"
                },
                "useManagedDisk": {
                    "type": "string",
                    "description": "Set this to `Aligned` if you plan to create virtual machines in this availability set with managed disks. Defaults to `Classic`.\n"
                },
                "virtualMachines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureAvailabilitySetVirtualMachine:AzureAvailabilitySetVirtualMachine"
                    }
                }
            },
            "required": [
                "availabilitySetId",
                "location",
                "name",
                "tags",
                "tenantId",
                "type",
                "virtualMachines"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name for availability set\n",
                    "willReplaceOnChanges": true
                },
                "platformFaultDomainCount": {
                    "type": "integer",
                    "description": "Specify platform fault domain count betweem 1-3, for availability set. Virtual machines in the same fault domain share a common power source and physical network switch. Defaults to `2`.\n",
                    "willReplaceOnChanges": true
                },
                "platformUpdateDomainCount": {
                    "type": "integer",
                    "description": "Specify platform update domain count between 1-20, for availability set. Virtual machines in the same update domain will be restarted together during planned maintenance. Azure never restarts more than one update domain at a time. Defaults to `5`.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the host will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "useManagedDisk": {
                    "type": "string",
                    "description": "Set this to `Aligned` if you plan to create virtual machines in this availability set with managed disks. Defaults to `Classic`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureAvailabilitySet resources.\n",
                "properties": {
                    "availabilitySetId": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for availability set\n",
                        "willReplaceOnChanges": true
                    },
                    "platformFaultDomainCount": {
                        "type": "integer",
                        "description": "Specify platform fault domain count betweem 1-3, for availability set. Virtual machines in the same fault domain share a common power source and physical network switch. Defaults to `2`.\n",
                        "willReplaceOnChanges": true
                    },
                    "platformUpdateDomainCount": {
                        "type": "integer",
                        "description": "Specify platform update domain count between 1-20, for availability set. Virtual machines in the same update domain will be restarted together during planned maintenance. Azure never restarts more than one update domain at a time. Defaults to `5`.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the host will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string"
                    },
                    "useManagedDisk": {
                        "type": "string",
                        "description": "Set this to `Aligned` if you plan to create virtual machines in this availability set with managed disks. Defaults to `Classic`.\n",
                        "willReplaceOnChanges": true
                    },
                    "virtualMachines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AzureAvailabilitySetVirtualMachine:AzureAvailabilitySetVirtualMachine"
                        }
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureDatafactory:AzureDatafactory": {
            "description": "`duplocloud.AzureDatafactory` manages datafactory in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst df = new duplocloud.AzureDatafactory(\"df\", {\n    tenantId: myapp.tenantId,\n    name: \"tf-dft2\",\n    publicAccess: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\ndf = duplocloud.AzureDatafactory(\"df\",\n    tenant_id=myapp.tenant_id,\n    name=\"tf-dft2\",\n    public_access=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var df = new Duplocloud.AzureDatafactory(\"df\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"tf-dft2\",\n        PublicAccess = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureDatafactory(ctx, \"df\", \u0026duplocloud.AzureDatafactoryArgs{\n\t\t\tTenantId:     myapp.TenantId,\n\t\t\tName:         pulumi.String(\"tf-dft2\"),\n\t\t\tPublicAccess: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureDatafactory;\nimport com.pulumi.duplocloud.AzureDatafactoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var df = new AzureDatafactory(\"df\", AzureDatafactoryArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"tf-dft2\")\n            .publicAccess(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  df:\n    type: duplocloud:AzureDatafactory\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: tf-dft2\n      publicAccess: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Datafactory\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the name of the the Azure Datafactory\n\n#\n\nimport duplocloud_azure_datafactory.df *TENANT_ID*/datafactory/*NAME*\n\n",
            "properties": {
                "etag": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the datafactory\n"
                },
                "publicAccess": {
                    "type": "boolean",
                    "description": "Enable or disable public access to datafactory Defaults to `false`.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure node pool will be created in.\n"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "required": [
                "etag",
                "location",
                "name",
                "tenantId",
                "type",
                "version"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the datafactory\n",
                    "willReplaceOnChanges": true
                },
                "publicAccess": {
                    "type": "boolean",
                    "description": "Enable or disable public access to datafactory Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure node pool will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureDatafactory resources.\n",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the datafactory\n",
                        "willReplaceOnChanges": true
                    },
                    "publicAccess": {
                        "type": "boolean",
                        "description": "Enable or disable public access to datafactory Defaults to `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure node pool will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureK8NodePool:AzureK8NodePool": {
            "description": "`duplocloud.AzureK8NodePool` manages a Node Pool of Kubernetes Cluster in Duplo.\n\n## Import\n\nExample: Importing an existing Azure K8S Node Pool\n\n - *TENANT_ID* is the tenant GUID\n\n - *FRIENDLY_NAME* is the duplo generated name of the the Azure K8S Node Pool\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureK8NodePool:AzureK8NodePool node_pool *TENANT_ID*/*FRIENDLY_NAME*\n```\n\n",
            "properties": {
                "allocationTag": {
                    "type": "string",
                    "description": "Allocation tags for this node pool.\n"
                },
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "availability zones of node pool\n"
                },
                "desiredCapacity": {
                    "type": "integer",
                    "description": "The initial number of nodes which should exist within this Node.\n"
                },
                "enableAutoScaling": {
                    "type": "boolean",
                    "description": "Whether to enable auto-scaler.\n"
                },
                "identifier": {
                    "type": "integer",
                    "description": "Node pool identifier. This field is deprecated, Please use `name` instead. identifier has been deprecated instead use name\n",
                    "deprecationMessage": "identifier has been deprecated instead use name"
                },
                "maxCapacity": {
                    "type": "integer",
                    "description": "The maximum number of nodes which should exist within this Node Pool.\n"
                },
                "minCapacity": {
                    "type": "integer",
                    "description": "The minimum number of nodes which should exist within this Node Pool.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the node pool.\n"
                },
                "nodeLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureK8NodePoolNodeLabel:AzureK8NodePoolNodeLabel"
                    },
                    "description": "Kubernetes labels which should be applied to nodes in this Node Pool.\n"
                },
                "nodeTaints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Kubernetes taints which should be applied to nodes in the agent pool.\n"
                },
                "osDiskSizeGb": {
                    "type": "integer",
                    "description": "The Agent Operating System disk size in GB.\n"
                },
                "osSku": {
                    "type": "string",
                    "description": "Specifies the OS SKU used by the agent pool. Possible values are `AzureLinux`, `Ubuntu`, `Windows2019` and `Windows2022`\n"
                },
                "osType": {
                    "type": "string",
                    "description": "Specifies the OS used by the agent pool. Possible values are `Linux`, `Windows`. Defaults to `Linux`.\n"
                },
                "scalePriority": {
                    "$ref": "#/types/duplocloud:index/AzureK8NodePoolScalePriority:AzureK8NodePoolScalePriority",
                    "description": "specify the priority for scaling operations,supported priority Regular or Spot\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure node pool will be created in.\n"
                },
                "vmSize": {
                    "type": "string",
                    "description": "The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this forces a new resource to be created.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until node pool to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "required": [
                "allocationTag",
                "availabilityZones",
                "desiredCapacity",
                "enableAutoScaling",
                "identifier",
                "maxCapacity",
                "minCapacity",
                "name",
                "nodeLabels",
                "nodeTaints",
                "osDiskSizeGb",
                "osSku",
                "scalePriority",
                "tenantId",
                "vmSize"
            ],
            "inputProperties": {
                "allocationTag": {
                    "type": "string",
                    "description": "Allocation tags for this node pool.\n"
                },
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "availability zones of node pool\n",
                    "willReplaceOnChanges": true
                },
                "desiredCapacity": {
                    "type": "integer",
                    "description": "The initial number of nodes which should exist within this Node.\n"
                },
                "enableAutoScaling": {
                    "type": "boolean",
                    "description": "Whether to enable auto-scaler.\n"
                },
                "identifier": {
                    "type": "integer",
                    "description": "Node pool identifier. This field is deprecated, Please use `name` instead. identifier has been deprecated instead use name\n",
                    "deprecationMessage": "identifier has been deprecated instead use name"
                },
                "maxCapacity": {
                    "type": "integer",
                    "description": "The maximum number of nodes which should exist within this Node Pool.\n"
                },
                "minCapacity": {
                    "type": "integer",
                    "description": "The minimum number of nodes which should exist within this Node Pool.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the node pool.\n"
                },
                "nodeLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureK8NodePoolNodeLabel:AzureK8NodePoolNodeLabel"
                    },
                    "description": "Kubernetes labels which should be applied to nodes in this Node Pool.\n"
                },
                "nodeTaints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Kubernetes taints which should be applied to nodes in the agent pool.\n"
                },
                "osDiskSizeGb": {
                    "type": "integer",
                    "description": "The Agent Operating System disk size in GB.\n"
                },
                "osSku": {
                    "type": "string",
                    "description": "Specifies the OS SKU used by the agent pool. Possible values are `AzureLinux`, `Ubuntu`, `Windows2019` and `Windows2022`\n"
                },
                "osType": {
                    "type": "string",
                    "description": "Specifies the OS used by the agent pool. Possible values are `Linux`, `Windows`. Defaults to `Linux`.\n"
                },
                "scalePriority": {
                    "$ref": "#/types/duplocloud:index/AzureK8NodePoolScalePriority:AzureK8NodePoolScalePriority",
                    "description": "specify the priority for scaling operations,supported priority Regular or Spot\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure node pool will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "vmSize": {
                    "type": "string",
                    "description": "The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this forces a new resource to be created.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until node pool to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "desiredCapacity",
                "maxCapacity",
                "minCapacity",
                "tenantId",
                "vmSize"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureK8NodePool resources.\n",
                "properties": {
                    "allocationTag": {
                        "type": "string",
                        "description": "Allocation tags for this node pool.\n"
                    },
                    "availabilityZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "availability zones of node pool\n",
                        "willReplaceOnChanges": true
                    },
                    "desiredCapacity": {
                        "type": "integer",
                        "description": "The initial number of nodes which should exist within this Node.\n"
                    },
                    "enableAutoScaling": {
                        "type": "boolean",
                        "description": "Whether to enable auto-scaler.\n"
                    },
                    "identifier": {
                        "type": "integer",
                        "description": "Node pool identifier. This field is deprecated, Please use `name` instead. identifier has been deprecated instead use name\n",
                        "deprecationMessage": "identifier has been deprecated instead use name"
                    },
                    "maxCapacity": {
                        "type": "integer",
                        "description": "The maximum number of nodes which should exist within this Node Pool.\n"
                    },
                    "minCapacity": {
                        "type": "integer",
                        "description": "The minimum number of nodes which should exist within this Node Pool.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the node pool.\n"
                    },
                    "nodeLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AzureK8NodePoolNodeLabel:AzureK8NodePoolNodeLabel"
                        },
                        "description": "Kubernetes labels which should be applied to nodes in this Node Pool.\n"
                    },
                    "nodeTaints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Kubernetes taints which should be applied to nodes in the agent pool.\n"
                    },
                    "osDiskSizeGb": {
                        "type": "integer",
                        "description": "The Agent Operating System disk size in GB.\n"
                    },
                    "osSku": {
                        "type": "string",
                        "description": "Specifies the OS SKU used by the agent pool. Possible values are `AzureLinux`, `Ubuntu`, `Windows2019` and `Windows2022`\n"
                    },
                    "osType": {
                        "type": "string",
                        "description": "Specifies the OS used by the agent pool. Possible values are `Linux`, `Windows`. Defaults to `Linux`.\n"
                    },
                    "scalePriority": {
                        "$ref": "#/types/duplocloud:index/AzureK8NodePoolScalePriority:AzureK8NodePoolScalePriority",
                        "description": "specify the priority for scaling operations,supported priority Regular or Spot\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure node pool will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "vmSize": {
                        "type": "string",
                        "description": "The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this forces a new resource to be created.\n"
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until node pool to be ready, after creation. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureK8sCluster:AzureK8sCluster": {
            "description": "`duplocloud.AzureK8sCluster` manages an azure kubernetes cluster in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst infra = new duplocloud.Infrastructure(\"infra\", {\n    infraName: \"tst-0206\",\n    accountId: \"143ffc59-9394-4ec6-8f5a-c408a238be62\",\n    cloud: 2,\n    azcount: 2,\n    region: \"West US 2\",\n    enableK8Cluster: false,\n    addressPrefix: \"10.50.0.0/16\",\n    subnetCidr: 0,\n    subnetName: \"sub01\",\n    subnetAddressPrefix: \"10.50.1.0/24\",\n});\nconst cluster = new duplocloud.AzureK8sCluster(\"cluster\", {infraName: infra.infraName});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ninfra = duplocloud.Infrastructure(\"infra\",\n    infra_name=\"tst-0206\",\n    account_id=\"143ffc59-9394-4ec6-8f5a-c408a238be62\",\n    cloud=2,\n    azcount=2,\n    region=\"West US 2\",\n    enable_k8_cluster=False,\n    address_prefix=\"10.50.0.0/16\",\n    subnet_cidr=0,\n    subnet_name=\"sub01\",\n    subnet_address_prefix=\"10.50.1.0/24\")\ncluster = duplocloud.AzureK8sCluster(\"cluster\", infra_name=infra.infra_name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infra = new Duplocloud.Infrastructure(\"infra\", new()\n    {\n        InfraName = \"tst-0206\",\n        AccountId = \"143ffc59-9394-4ec6-8f5a-c408a238be62\",\n        Cloud = 2,\n        Azcount = 2,\n        Region = \"West US 2\",\n        EnableK8Cluster = false,\n        AddressPrefix = \"10.50.0.0/16\",\n        SubnetCidr = 0,\n        SubnetName = \"sub01\",\n        SubnetAddressPrefix = \"10.50.1.0/24\",\n    });\n\n    var cluster = new Duplocloud.AzureK8sCluster(\"cluster\", new()\n    {\n        InfraName = infra.InfraName,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinfra, err := duplocloud.NewInfrastructure(ctx, \"infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:           pulumi.String(\"tst-0206\"),\n\t\t\tAccountId:           pulumi.String(\"143ffc59-9394-4ec6-8f5a-c408a238be62\"),\n\t\t\tCloud:               pulumi.Int(2),\n\t\t\tAzcount:             pulumi.Int(2),\n\t\t\tRegion:              pulumi.String(\"West US 2\"),\n\t\t\tEnableK8Cluster:     pulumi.Bool(false),\n\t\t\tAddressPrefix:       pulumi.String(\"10.50.0.0/16\"),\n\t\t\tSubnetCidr:          pulumi.Int(0),\n\t\t\tSubnetName:          pulumi.String(\"sub01\"),\n\t\t\tSubnetAddressPrefix: pulumi.String(\"10.50.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureK8sCluster(ctx, \"cluster\", \u0026duplocloud.AzureK8sClusterArgs{\n\t\t\tInfraName: infra.InfraName,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport com.pulumi.duplocloud.AzureK8sCluster;\nimport com.pulumi.duplocloud.AzureK8sClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var infra = new Infrastructure(\"infra\", InfrastructureArgs.builder()\n            .infraName(\"tst-0206\")\n            .accountId(\"143ffc59-9394-4ec6-8f5a-c408a238be62\")\n            .cloud(2)\n            .azcount(2)\n            .region(\"West US 2\")\n            .enableK8Cluster(false)\n            .addressPrefix(\"10.50.0.0/16\")\n            .subnetCidr(0)\n            .subnetName(\"sub01\")\n            .subnetAddressPrefix(\"10.50.1.0/24\")\n            .build());\n\n        var cluster = new AzureK8sCluster(\"cluster\", AzureK8sClusterArgs.builder()\n            .infraName(infra.infraName())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  infra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: tst-0206\n      accountId: 143ffc59-9394-4ec6-8f5a-c408a238be62\n      cloud: 2\n      azcount: 2\n      region: West US 2\n      enableK8Cluster: false\n      addressPrefix: 10.50.0.0/16\n      subnetCidr: 0\n      subnetName: sub01\n      subnetAddressPrefix: 10.50.1.0/24\n  cluster:\n    type: duplocloud:AzureK8sCluster\n    properties:\n      infraName: ${infra.infraName}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure K8S Cluster\n\n - *INFRA_NAME* is the infrastructure name\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureK8sCluster:AzureK8sCluster cluster v2/admin/InfrastructureV2/*INFRA_NAME*\n```\n\n",
            "properties": {
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure.\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "Version of Kubernetes specified when creating the AKS managed cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the aks. If not specified default name would be infra name\n"
                },
                "networkPlugin": {
                    "type": "string",
                    "description": "Network plugin to use for networking. Valid values are: `azure` and `kubenet`.\n"
                },
                "outboundType": {
                    "type": "string",
                    "description": "The outbound (egress) routing method which should be used for this Kubernetes Cluster. Valid values are: `loadBalancer` and `userDefinedRouting`.\n"
                },
                "privateClusterEnabled": {
                    "type": "boolean",
                    "description": "Should this Kubernetes Cluster have its API server only exposed on internal IP addresses? This provides a Private IP Address for the Kubernetes API on the Virtual Network where the Kubernetes Cluster is located. Defaults to `false`.\n"
                },
                "resourceGroupName": {
                    "type": "string",
                    "description": "The name of the aks resource group.\n"
                },
                "vmSize": {
                    "type": "string",
                    "description": "The size of the Virtual Machine.\n"
                }
            },
            "required": [
                "infraName",
                "kubernetesVersion",
                "name",
                "networkPlugin",
                "outboundType",
                "resourceGroupName",
                "vmSize"
            ],
            "inputProperties": {
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure.\n",
                    "willReplaceOnChanges": true
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "Version of Kubernetes specified when creating the AKS managed cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the aks. If not specified default name would be infra name\n"
                },
                "networkPlugin": {
                    "type": "string",
                    "description": "Network plugin to use for networking. Valid values are: `azure` and `kubenet`.\n"
                },
                "outboundType": {
                    "type": "string",
                    "description": "The outbound (egress) routing method which should be used for this Kubernetes Cluster. Valid values are: `loadBalancer` and `userDefinedRouting`.\n"
                },
                "privateClusterEnabled": {
                    "type": "boolean",
                    "description": "Should this Kubernetes Cluster have its API server only exposed on internal IP addresses? This provides a Private IP Address for the Kubernetes API on the Virtual Network where the Kubernetes Cluster is located. Defaults to `false`.\n"
                },
                "resourceGroupName": {
                    "type": "string",
                    "description": "The name of the aks resource group.\n"
                },
                "vmSize": {
                    "type": "string",
                    "description": "The size of the Virtual Machine.\n"
                }
            },
            "requiredInputs": [
                "infraName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureK8sCluster resources.\n",
                "properties": {
                    "infraName": {
                        "type": "string",
                        "description": "The name of the infrastructure.\n",
                        "willReplaceOnChanges": true
                    },
                    "kubernetesVersion": {
                        "type": "string",
                        "description": "Version of Kubernetes specified when creating the AKS managed cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the aks. If not specified default name would be infra name\n"
                    },
                    "networkPlugin": {
                        "type": "string",
                        "description": "Network plugin to use for networking. Valid values are: `azure` and `kubenet`.\n"
                    },
                    "outboundType": {
                        "type": "string",
                        "description": "The outbound (egress) routing method which should be used for this Kubernetes Cluster. Valid values are: `loadBalancer` and `userDefinedRouting`.\n"
                    },
                    "privateClusterEnabled": {
                        "type": "boolean",
                        "description": "Should this Kubernetes Cluster have its API server only exposed on internal IP addresses? This provides a Private IP Address for the Kubernetes API on the Virtual Network where the Kubernetes Cluster is located. Defaults to `false`.\n"
                    },
                    "resourceGroupName": {
                        "type": "string",
                        "description": "The name of the aks resource group.\n"
                    },
                    "vmSize": {
                        "type": "string",
                        "description": "The size of the Virtual Machine.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureKeyVaultSecret:AzureKeyVaultSecret": {
            "description": "`duplocloud.AzureKeyVaultSecret` manages a Key Vault Secret in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst myappAzureKeyVaultSecret = new duplocloud.AzureKeyVaultSecret(\"myapp\", {\n    tenantId: myapp.tenantId,\n    name: \"base01-test\",\n    value: \"tst\",\n    type: \"duplo_container_env\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmyapp_azure_key_vault_secret = duplocloud.AzureKeyVaultSecret(\"myapp\",\n    tenant_id=myapp.tenant_id,\n    name=\"base01-test\",\n    value=\"tst\",\n    type=\"duplo_container_env\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var myappAzureKeyVaultSecret = new Duplocloud.AzureKeyVaultSecret(\"myapp\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"base01-test\",\n        Value = \"tst\",\n        Type = \"duplo_container_env\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureKeyVaultSecret(ctx, \"myapp\", \u0026duplocloud.AzureKeyVaultSecretArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tName:     pulumi.String(\"base01-test\"),\n\t\t\tValue:    pulumi.String(\"tst\"),\n\t\t\tType:     pulumi.String(\"duplo_container_env\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureKeyVaultSecret;\nimport com.pulumi.duplocloud.AzureKeyVaultSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var myappAzureKeyVaultSecret = new AzureKeyVaultSecret(\"myappAzureKeyVaultSecret\", AzureKeyVaultSecretArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"base01-test\")\n            .value(\"tst\")\n            .type(\"duplo_container_env\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  myappAzureKeyVaultSecret:\n    type: duplocloud:AzureKeyVaultSecret\n    name: myapp\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: base01-test\n      value: tst\n      type: duplo_container_env\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Key Vault Secret\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the Azure Key Vault Secret\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureKeyVaultSecret:AzureKeyVaultSecret mykvsecret *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Determines whether the object is enabled.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "Duplo will generate name of the Key Vault Secret.\n"
                },
                "keyVaultId": {
                    "type": "string",
                    "description": "The ID of the Key Vault where the Secret should be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Key Vault Secret. Changing this forces a new resource to be created.\n"
                },
                "recoveryLevel": {
                    "type": "string",
                    "description": "Reflects the deletion recovery level currently in effect for secrets in the current vault.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the key vault secret will be created in.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the content type for the Key Vault Secret. Defaults to `duplo_container_env`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Specifies the value of the Key vault secret.\n",
                    "secret": true
                },
                "vaultBaseUrl": {
                    "type": "string",
                    "description": "Base URL of the Azure Key Vault\n"
                },
                "version": {
                    "type": "string",
                    "description": "The current version of the Key Vault Secret.\n"
                }
            },
            "required": [
                "enabled",
                "fullname",
                "name",
                "recoveryLevel",
                "tenantId",
                "value",
                "vaultBaseUrl",
                "version"
            ],
            "inputProperties": {
                "keyVaultId": {
                    "type": "string",
                    "description": "The ID of the Key Vault where the Secret should be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Key Vault Secret. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the key vault secret will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the content type for the Key Vault Secret. Defaults to `duplo_container_env`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Specifies the value of the Key vault secret.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "tenantId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureKeyVaultSecret resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Determines whether the object is enabled.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "Duplo will generate name of the Key Vault Secret.\n"
                    },
                    "keyVaultId": {
                        "type": "string",
                        "description": "The ID of the Key Vault where the Secret should be created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the Key Vault Secret. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "recoveryLevel": {
                        "type": "string",
                        "description": "Reflects the deletion recovery level currently in effect for secrets in the current vault.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the key vault secret will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Specifies the content type for the Key Vault Secret. Defaults to `duplo_container_env`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Specifies the value of the Key vault secret.\n",
                        "secret": true
                    },
                    "vaultBaseUrl": {
                        "type": "string",
                        "description": "Base URL of the Azure Key Vault\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The current version of the Key Vault Secret.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureLogAnalyticsWorkspace:AzureLogAnalyticsWorkspace": {
            "description": "`duplocloud.AzureLogAnalyticsWorkspace` manages an Azure Log Analytics Workspace in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst logAnalyticsWorkspace = new duplocloud.AzureLogAnalyticsWorkspace(\"log_analytics_workspace\", {\n    infraName: \"demo\",\n    resourceGroupName: \"duploinfra-demo\",\n    name: \"test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nlog_analytics_workspace = duplocloud.AzureLogAnalyticsWorkspace(\"log_analytics_workspace\",\n    infra_name=\"demo\",\n    resource_group_name=\"duploinfra-demo\",\n    name=\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var logAnalyticsWorkspace = new Duplocloud.AzureLogAnalyticsWorkspace(\"log_analytics_workspace\", new()\n    {\n        InfraName = \"demo\",\n        ResourceGroupName = \"duploinfra-demo\",\n        Name = \"test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewAzureLogAnalyticsWorkspace(ctx, \"log_analytics_workspace\", \u0026duplocloud.AzureLogAnalyticsWorkspaceArgs{\n\t\t\tInfraName:         pulumi.String(\"demo\"),\n\t\t\tResourceGroupName: pulumi.String(\"duploinfra-demo\"),\n\t\t\tName:              pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.AzureLogAnalyticsWorkspace;\nimport com.pulumi.duplocloud.AzureLogAnalyticsWorkspaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var logAnalyticsWorkspace = new AzureLogAnalyticsWorkspace(\"logAnalyticsWorkspace\", AzureLogAnalyticsWorkspaceArgs.builder()\n            .infraName(\"demo\")\n            .resourceGroupName(\"duploinfra-demo\")\n            .name(\"test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  logAnalyticsWorkspace:\n    type: duplocloud:AzureLogAnalyticsWorkspace\n    name: log_analytics_workspace\n    properties:\n      infraName: demo\n      resourceGroupName: duploinfra-demo\n      name: test\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Log Analytics Workspace\n\n - *INFRA_NAME* is the name of duplo infra.\n\n - *NAME* is the name of the Log Analytics Workspace\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureLogAnalyticsWorkspace:AzureLogAnalyticsWorkspace log_analytics_workspace *INFRA_NAME*/*NAME*\n```\n\n",
            "properties": {
                "azureId": {
                    "type": "string"
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.\n"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Log Analytics Workspace. Workspace name should include 4-63 letters, digits or '-'. The '-' shouldn't be the first or the last symbol. Changing this forces a new resource to be created.\n"
                },
                "publicNetworkAccessForIngestion": {
                    "type": "string"
                },
                "publicNetworkAccessForQuery": {
                    "type": "string"
                },
                "resourceGroupName": {
                    "type": "string",
                    "description": "The name of the resource group in which the Log Analytics workspace is created. Changing this forces a new resource to be created.\n"
                },
                "retentionInDays": {
                    "type": "integer"
                },
                "sku": {
                    "type": "string"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Log Analytics Workspace to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "required": [
                "azureId",
                "infraName",
                "location",
                "name",
                "publicNetworkAccessForIngestion",
                "publicNetworkAccessForQuery",
                "resourceGroupName",
                "retentionInDays",
                "sku"
            ],
            "inputProperties": {
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Log Analytics Workspace. Workspace name should include 4-63 letters, digits or '-'. The '-' shouldn't be the first or the last symbol. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "resourceGroupName": {
                    "type": "string",
                    "description": "The name of the resource group in which the Log Analytics workspace is created. Changing this forces a new resource to be created.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Log Analytics Workspace to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "infraName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureLogAnalyticsWorkspace resources.\n",
                "properties": {
                    "azureId": {
                        "type": "string"
                    },
                    "infraName": {
                        "type": "string",
                        "description": "The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "location": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the Log Analytics Workspace. Workspace name should include 4-63 letters, digits or '-'. The '-' shouldn't be the first or the last symbol. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicNetworkAccessForIngestion": {
                        "type": "string"
                    },
                    "publicNetworkAccessForQuery": {
                        "type": "string"
                    },
                    "resourceGroupName": {
                        "type": "string",
                        "description": "The name of the resource group in which the Log Analytics workspace is created. Changing this forces a new resource to be created.\n"
                    },
                    "retentionInDays": {
                        "type": "integer"
                    },
                    "sku": {
                        "type": "string"
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until Log Analytics Workspace to be ready, after creation. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureMssqlDatabase:AzureMssqlDatabase": {
            "description": "`duplocloud.AzureMssqlDatabase` manages an azure mssql database in Duplo.\n\n## Import\n\nExample: Importing an existing Azure MS SQL databse\n\n - *TENANT_ID* is the tenant GUID\n\n - *SERVER_NAME* is the short name of the Azure MS SQL Server\n\n - *DB_NAME* is the short name of the Azure MS SQL Database\n\n```sh\n$ pulumi import duplocloud:index/azureMssqlDatabase:AzureMssqlDatabase myMsSqlDb *TENANT_ID*/*SERVER_NAME*/*DB_NAME*\n```\n\n",
            "properties": {
                "collation": {
                    "type": "string",
                    "description": "Specifies the collation of the database.\n"
                },
                "elasticPoolId": {
                    "type": "string",
                    "description": "Specifies the id of the elastic pool containing this database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the MS SQL Database.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "The name of the MS SQL Server on which to create the database.\n"
                },
                "sku": {
                    "$ref": "#/types/duplocloud:index/AzureMssqlDatabaseSku:AzureMssqlDatabaseSku"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure mssql database will be created in.\n"
                }
            },
            "required": [
                "collation",
                "name",
                "serverName",
                "tenantId"
            ],
            "inputProperties": {
                "collation": {
                    "type": "string",
                    "description": "Specifies the collation of the database.\n",
                    "willReplaceOnChanges": true
                },
                "elasticPoolId": {
                    "type": "string",
                    "description": "Specifies the id of the elastic pool containing this database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the MS SQL Database.\n",
                    "willReplaceOnChanges": true
                },
                "serverName": {
                    "type": "string",
                    "description": "The name of the MS SQL Server on which to create the database.\n",
                    "willReplaceOnChanges": true
                },
                "sku": {
                    "$ref": "#/types/duplocloud:index/AzureMssqlDatabaseSku:AzureMssqlDatabaseSku"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure mssql database will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serverName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureMssqlDatabase resources.\n",
                "properties": {
                    "collation": {
                        "type": "string",
                        "description": "Specifies the collation of the database.\n",
                        "willReplaceOnChanges": true
                    },
                    "elasticPoolId": {
                        "type": "string",
                        "description": "Specifies the id of the elastic pool containing this database.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the MS SQL Database.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverName": {
                        "type": "string",
                        "description": "The name of the MS SQL Server on which to create the database.\n",
                        "willReplaceOnChanges": true
                    },
                    "sku": {
                        "$ref": "#/types/duplocloud:index/AzureMssqlDatabaseSku:AzureMssqlDatabaseSku"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure mssql database will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureMssqlElasticpool:AzureMssqlElasticpool": {
            "description": "`duplocloud.AzureMssqlElasticpool` manages an azure mssql elastic pool in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst mssqlElasticpool = new duplocloud.AzureMssqlElasticpool(\"mssql_elasticpool\", {\n    tenantId: myapp.tenantId,\n    name: \"mssql-ep\",\n    serverName: \"mysqlserver\",\n    sku: {\n        name: \"StandardPool\",\n        capacity: 50,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmssql_elasticpool = duplocloud.AzureMssqlElasticpool(\"mssql_elasticpool\",\n    tenant_id=myapp.tenant_id,\n    name=\"mssql-ep\",\n    server_name=\"mysqlserver\",\n    sku={\n        \"name\": \"StandardPool\",\n        \"capacity\": 50,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var mssqlElasticpool = new Duplocloud.AzureMssqlElasticpool(\"mssql_elasticpool\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"mssql-ep\",\n        ServerName = \"mysqlserver\",\n        Sku = new Duplocloud.Inputs.AzureMssqlElasticpoolSkuArgs\n        {\n            Name = \"StandardPool\",\n            Capacity = 50,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureMssqlElasticpool(ctx, \"mssql_elasticpool\", \u0026duplocloud.AzureMssqlElasticpoolArgs{\n\t\t\tTenantId:   myapp.TenantId,\n\t\t\tName:       pulumi.String(\"mssql-ep\"),\n\t\t\tServerName: pulumi.String(\"mysqlserver\"),\n\t\t\tSku: \u0026duplocloud.AzureMssqlElasticpoolSkuArgs{\n\t\t\t\tName:     pulumi.String(\"StandardPool\"),\n\t\t\t\tCapacity: pulumi.Int(50),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureMssqlElasticpool;\nimport com.pulumi.duplocloud.AzureMssqlElasticpoolArgs;\nimport com.pulumi.duplocloud.inputs.AzureMssqlElasticpoolSkuArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var mssqlElasticpool = new AzureMssqlElasticpool(\"mssqlElasticpool\", AzureMssqlElasticpoolArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"mssql-ep\")\n            .serverName(\"mysqlserver\")\n            .sku(AzureMssqlElasticpoolSkuArgs.builder()\n                .name(\"StandardPool\")\n                .capacity(50)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  mssqlElasticpool:\n    type: duplocloud:AzureMssqlElasticpool\n    name: mssql_elasticpool\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: mssql-ep\n      serverName: mysqlserver\n      sku:\n        name: StandardPool\n        capacity: 50\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure MS SQL databse\n\n - *TENANT_ID* is the tenant GUID\n\n - *SERVER_NAME* is the short name of the Azure MS SQL Server\n\n - *EP_NAME* is the short name of the Azure MS SQL Elastic Pool\n\n```sh\n$ pulumi import duplocloud:index/azureMssqlElasticpool:AzureMssqlElasticpool myMsSqlEP *TENANT_ID*/*SERVER_NAME*/*EP_NAME*\n```\n\n",
            "properties": {
                "elasticPoolId": {
                    "type": "string",
                    "description": "The ID of the MS SQL Elastic Pool.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the MS SQL elastic pool.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "The name of the SQL Server on which to create the elastic pool.\n"
                },
                "sku": {
                    "$ref": "#/types/duplocloud:index/AzureMssqlElasticpoolSku:AzureMssqlElasticpoolSku"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure mssql elastic pool will be created in.\n"
                }
            },
            "required": [
                "elasticPoolId",
                "name",
                "serverName",
                "tenantId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the MS SQL elastic pool.\n",
                    "willReplaceOnChanges": true
                },
                "serverName": {
                    "type": "string",
                    "description": "The name of the SQL Server on which to create the elastic pool.\n",
                    "willReplaceOnChanges": true
                },
                "sku": {
                    "$ref": "#/types/duplocloud:index/AzureMssqlElasticpoolSku:AzureMssqlElasticpoolSku"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure mssql elastic pool will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serverName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureMssqlElasticpool resources.\n",
                "properties": {
                    "elasticPoolId": {
                        "type": "string",
                        "description": "The ID of the MS SQL Elastic Pool.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the MS SQL elastic pool.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverName": {
                        "type": "string",
                        "description": "The name of the SQL Server on which to create the elastic pool.\n",
                        "willReplaceOnChanges": true
                    },
                    "sku": {
                        "$ref": "#/types/duplocloud:index/AzureMssqlElasticpoolSku:AzureMssqlElasticpoolSku"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure mssql elastic pool will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureMssqlServer:AzureMssqlServer": {
            "description": "`duplocloud.AzureMssqlServer` manages an azure mssql server in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst mssqlServer = new duplocloud.AzureMssqlServer(\"mssql_server\", {\n    tenantId: myapp.tenantId,\n    name: \"mssql-test\",\n    administratorLogin: \"testroot\",\n    administratorLoginPassword: \"P@ssword12345\",\n    version: \"12.0\",\n    minimumTlsVersion: \"1.2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmssql_server = duplocloud.AzureMssqlServer(\"mssql_server\",\n    tenant_id=myapp.tenant_id,\n    name=\"mssql-test\",\n    administrator_login=\"testroot\",\n    administrator_login_password=\"P@ssword12345\",\n    version=\"12.0\",\n    minimum_tls_version=\"1.2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var mssqlServer = new Duplocloud.AzureMssqlServer(\"mssql_server\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"mssql-test\",\n        AdministratorLogin = \"testroot\",\n        AdministratorLoginPassword = \"P@ssword12345\",\n        Version = \"12.0\",\n        MinimumTlsVersion = \"1.2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureMssqlServer(ctx, \"mssql_server\", \u0026duplocloud.AzureMssqlServerArgs{\n\t\t\tTenantId:                   myapp.TenantId,\n\t\t\tName:                       pulumi.String(\"mssql-test\"),\n\t\t\tAdministratorLogin:         pulumi.String(\"testroot\"),\n\t\t\tAdministratorLoginPassword: pulumi.String(\"P@ssword12345\"),\n\t\t\tVersion:                    pulumi.String(\"12.0\"),\n\t\t\tMinimumTlsVersion:          pulumi.String(\"1.2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureMssqlServer;\nimport com.pulumi.duplocloud.AzureMssqlServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var mssqlServer = new AzureMssqlServer(\"mssqlServer\", AzureMssqlServerArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"mssql-test\")\n            .administratorLogin(\"testroot\")\n            .administratorLoginPassword(\"P@ssword12345\")\n            .version(\"12.0\")\n            .minimumTlsVersion(\"1.2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  mssqlServer:\n    type: duplocloud:AzureMssqlServer\n    name: mssql_server\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: mssql-test\n      administratorLogin: testroot\n      administratorLoginPassword: P@ssword12345\n      version: '12.0'\n      minimumTlsVersion: '1.2'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure MS SQL Server\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the Azure MS SQL Server\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureMssqlServer:AzureMssqlServer myMsSqlServer *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "administratorLogin": {
                    "type": "string",
                    "description": "The Administrator Login for the  MS sql Server.\n"
                },
                "administratorLoginPassword": {
                    "type": "string",
                    "description": "The Password associated with the `administrator_login` for the MS sql Server.\n",
                    "secret": true
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name of the Azure SQL Server.\n"
                },
                "minimumTlsVersion": {
                    "type": "string",
                    "description": "The Minimum TLS Version for all SQL Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Microsoft SQL Server. This needs to be globally unique within Azure.\n"
                },
                "publicNetworkAccess": {
                    "type": "string",
                    "description": "Whether public network access is enabled or disabled for this server. Valid values are `Enabled` or `Disabled`.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure mssql server will be created in.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version for the new server. Valid values are: `2.0` (for v11 server) and `12.0` (for v12 server).\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "required": [
                "administratorLogin",
                "fqdn",
                "minimumTlsVersion",
                "name",
                "publicNetworkAccess",
                "tags",
                "tenantId",
                "version"
            ],
            "inputProperties": {
                "administratorLogin": {
                    "type": "string",
                    "description": "The Administrator Login for the  MS sql Server.\n",
                    "willReplaceOnChanges": true
                },
                "administratorLoginPassword": {
                    "type": "string",
                    "description": "The Password associated with the `administrator_login` for the MS sql Server.\n",
                    "secret": true
                },
                "minimumTlsVersion": {
                    "type": "string",
                    "description": "The Minimum TLS Version for all SQL Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Microsoft SQL Server. This needs to be globally unique within Azure.\n",
                    "willReplaceOnChanges": true
                },
                "publicNetworkAccess": {
                    "type": "string",
                    "description": "Whether public network access is enabled or disabled for this server. Valid values are `Enabled` or `Disabled`.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure mssql server will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "The version for the new server. Valid values are: `2.0` (for v11 server) and `12.0` (for v12 server).\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "tenantId",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureMssqlServer resources.\n",
                "properties": {
                    "administratorLogin": {
                        "type": "string",
                        "description": "The Administrator Login for the  MS sql Server.\n",
                        "willReplaceOnChanges": true
                    },
                    "administratorLoginPassword": {
                        "type": "string",
                        "description": "The Password associated with the `administrator_login` for the MS sql Server.\n",
                        "secret": true
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The fully qualified domain name of the Azure SQL Server.\n"
                    },
                    "minimumTlsVersion": {
                        "type": "string",
                        "description": "The Minimum TLS Version for all SQL Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Microsoft SQL Server. This needs to be globally unique within Azure.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicNetworkAccess": {
                        "type": "string",
                        "description": "Whether public network access is enabled or disabled for this server. Valid values are `Enabled` or `Disabled`.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure mssql server will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "The version for the new server. Valid values are: `2.0` (for v11 server) and `12.0` (for v12 server).\n",
                        "willReplaceOnChanges": true
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureMysqlDatabase:AzureMysqlDatabase": {
            "description": "`duplocloud.AzureMysqlDatabase` manages an Azure mysql database in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst mydb = new duplocloud.AzureMysqlDatabase(\"mydb\", {\n    tenantId: myapp.tenantId,\n    name: \"mysql-test\",\n    administratorLogin: \"testroot\",\n    administratorLoginPassword: \"P@ssword12345\",\n    storageMb: 102400,\n    version: \"5.7\",\n    skuName: \"GP_Gen5_4\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmydb = duplocloud.AzureMysqlDatabase(\"mydb\",\n    tenant_id=myapp.tenant_id,\n    name=\"mysql-test\",\n    administrator_login=\"testroot\",\n    administrator_login_password=\"P@ssword12345\",\n    storage_mb=102400,\n    version=\"5.7\",\n    sku_name=\"GP_Gen5_4\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var mydb = new Duplocloud.AzureMysqlDatabase(\"mydb\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"mysql-test\",\n        AdministratorLogin = \"testroot\",\n        AdministratorLoginPassword = \"P@ssword12345\",\n        StorageMb = 102400,\n        Version = \"5.7\",\n        SkuName = \"GP_Gen5_4\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureMysqlDatabase(ctx, \"mydb\", \u0026duplocloud.AzureMysqlDatabaseArgs{\n\t\t\tTenantId:                   myapp.TenantId,\n\t\t\tName:                       pulumi.String(\"mysql-test\"),\n\t\t\tAdministratorLogin:         pulumi.String(\"testroot\"),\n\t\t\tAdministratorLoginPassword: pulumi.String(\"P@ssword12345\"),\n\t\t\tStorageMb:                  pulumi.Int(102400),\n\t\t\tVersion:                    pulumi.String(\"5.7\"),\n\t\t\tSkuName:                    pulumi.String(\"GP_Gen5_4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureMysqlDatabase;\nimport com.pulumi.duplocloud.AzureMysqlDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var mydb = new AzureMysqlDatabase(\"mydb\", AzureMysqlDatabaseArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"mysql-test\")\n            .administratorLogin(\"testroot\")\n            .administratorLoginPassword(\"P@ssword12345\")\n            .storageMb(102400)\n            .version(5.7)\n            .skuName(\"GP_Gen5_4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  mydb:\n    type: duplocloud:AzureMysqlDatabase\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: mysql-test\n      administratorLogin: testroot\n      administratorLoginPassword: P@ssword12345\n      storageMb: 102400\n      version: 5.7\n      skuName: GP_Gen5_4\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Mysql Database\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the Azure Mysql Database\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureMysqlDatabase:AzureMysqlDatabase mysqlDatabase *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "administratorLogin": {
                    "type": "string",
                    "description": "The Administrator Login for the MySQL Server.\n"
                },
                "administratorLoginPassword": {
                    "type": "string",
                    "description": "The Password associated with the `administrator_login` for the MySQL Server.\n",
                    "secret": true
                },
                "backupRetentionDays": {
                    "type": "integer",
                    "description": "Backup retention days for the server, supported values are between `7` and `35` days.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The FQDN of the MySQL Server.\n"
                },
                "geoRedundantBackup": {
                    "type": "string",
                    "description": "Turn Geo-redundant server backups on/off.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the MySQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.\n"
                },
                "skuName": {
                    "type": "string",
                    "description": "Specifies the SKU Name for this MySQL Server.\n"
                },
                "sslEnforcement": {
                    "type": "string",
                    "description": "Specifies if SSL should be enforced on connections.\n"
                },
                "storageMb": {
                    "type": "integer",
                    "description": "Max storage allowed for a server. Possible values are between `5120` MB(5GB) and `1048576` MB(1TB) for the Basic SKU and between `5120` MB(5GB) and `4194304` MB(4TB) for General Purpose/Memory Optimized SKUs.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure mysql database will be created in.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Specifies the version of MySQL to use. Valid values are `5.7`, or `8.0`. Changing this forces a new resource to be created.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until MySql Server instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "required": [
                "administratorLogin",
                "backupRetentionDays",
                "fqdn",
                "geoRedundantBackup",
                "name",
                "skuName",
                "sslEnforcement",
                "storageMb",
                "tags",
                "tenantId",
                "version"
            ],
            "inputProperties": {
                "administratorLogin": {
                    "type": "string",
                    "description": "The Administrator Login for the MySQL Server.\n",
                    "willReplaceOnChanges": true
                },
                "administratorLoginPassword": {
                    "type": "string",
                    "description": "The Password associated with the `administrator_login` for the MySQL Server.\n",
                    "secret": true
                },
                "backupRetentionDays": {
                    "type": "integer",
                    "description": "Backup retention days for the server, supported values are between `7` and `35` days.\n"
                },
                "geoRedundantBackup": {
                    "type": "string",
                    "description": "Turn Geo-redundant server backups on/off.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the MySQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.\n",
                    "willReplaceOnChanges": true
                },
                "skuName": {
                    "type": "string",
                    "description": "Specifies the SKU Name for this MySQL Server.\n"
                },
                "sslEnforcement": {
                    "type": "string",
                    "description": "Specifies if SSL should be enforced on connections.\n"
                },
                "storageMb": {
                    "type": "integer",
                    "description": "Max storage allowed for a server. Possible values are between `5120` MB(5GB) and `1048576` MB(1TB) for the Basic SKU and between `5120` MB(5GB) and `4194304` MB(4TB) for General Purpose/Memory Optimized SKUs.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure mysql database will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "Specifies the version of MySQL to use. Valid values are `5.7`, or `8.0`. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until MySql Server instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "skuName",
                "tenantId",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureMysqlDatabase resources.\n",
                "properties": {
                    "administratorLogin": {
                        "type": "string",
                        "description": "The Administrator Login for the MySQL Server.\n",
                        "willReplaceOnChanges": true
                    },
                    "administratorLoginPassword": {
                        "type": "string",
                        "description": "The Password associated with the `administrator_login` for the MySQL Server.\n",
                        "secret": true
                    },
                    "backupRetentionDays": {
                        "type": "integer",
                        "description": "Backup retention days for the server, supported values are between `7` and `35` days.\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The FQDN of the MySQL Server.\n"
                    },
                    "geoRedundantBackup": {
                        "type": "string",
                        "description": "Turn Geo-redundant server backups on/off.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the MySQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.\n",
                        "willReplaceOnChanges": true
                    },
                    "skuName": {
                        "type": "string",
                        "description": "Specifies the SKU Name for this MySQL Server.\n"
                    },
                    "sslEnforcement": {
                        "type": "string",
                        "description": "Specifies if SSL should be enforced on connections.\n"
                    },
                    "storageMb": {
                        "type": "integer",
                        "description": "Max storage allowed for a server. Possible values are between `5120` MB(5GB) and `1048576` MB(1TB) for the Basic SKU and between `5120` MB(5GB) and `4194304` MB(4TB) for General Purpose/Memory Optimized SKUs.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure mysql database will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Specifies the version of MySQL to use. Valid values are `5.7`, or `8.0`. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until MySql Server instance to be ready, after creation. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureNetworkSecurityRule:AzureNetworkSecurityRule": {
            "description": "`duplocloud.AzureNetworkSecurityRule` manages an Azure security group rule in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst securityRule = new duplocloud.AzureNetworkSecurityRule(\"security_rule\", {\n    infraName: \"demo\",\n    networkSecurityGroupName: \"duploinfra-sub01\",\n    name: \"test-sg-rule\",\n    sourceRuleType: 0,\n    destinationRuleType: 0,\n    protocol: \"tcp\",\n    sourcePortRange: \"*\",\n    destinationPortRange: \"*\",\n    sourceAddressPrefix: \"49.207.178.47/32\",\n    destinationAddressPrefix: \"*\",\n    access: \"Allow\",\n    priority: 200,\n    direction: \"Inbound\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nsecurity_rule = duplocloud.AzureNetworkSecurityRule(\"security_rule\",\n    infra_name=\"demo\",\n    network_security_group_name=\"duploinfra-sub01\",\n    name=\"test-sg-rule\",\n    source_rule_type=0,\n    destination_rule_type=0,\n    protocol=\"tcp\",\n    source_port_range=\"*\",\n    destination_port_range=\"*\",\n    source_address_prefix=\"49.207.178.47/32\",\n    destination_address_prefix=\"*\",\n    access=\"Allow\",\n    priority=200,\n    direction=\"Inbound\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var securityRule = new Duplocloud.AzureNetworkSecurityRule(\"security_rule\", new()\n    {\n        InfraName = \"demo\",\n        NetworkSecurityGroupName = \"duploinfra-sub01\",\n        Name = \"test-sg-rule\",\n        SourceRuleType = 0,\n        DestinationRuleType = 0,\n        Protocol = \"tcp\",\n        SourcePortRange = \"*\",\n        DestinationPortRange = \"*\",\n        SourceAddressPrefix = \"49.207.178.47/32\",\n        DestinationAddressPrefix = \"*\",\n        Access = \"Allow\",\n        Priority = 200,\n        Direction = \"Inbound\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewAzureNetworkSecurityRule(ctx, \"security_rule\", \u0026duplocloud.AzureNetworkSecurityRuleArgs{\n\t\t\tInfraName:                pulumi.String(\"demo\"),\n\t\t\tNetworkSecurityGroupName: pulumi.String(\"duploinfra-sub01\"),\n\t\t\tName:                     pulumi.String(\"test-sg-rule\"),\n\t\t\tSourceRuleType:           pulumi.Int(0),\n\t\t\tDestinationRuleType:      pulumi.Int(0),\n\t\t\tProtocol:                 pulumi.String(\"tcp\"),\n\t\t\tSourcePortRange:          pulumi.String(\"*\"),\n\t\t\tDestinationPortRange:     pulumi.String(\"*\"),\n\t\t\tSourceAddressPrefix:      pulumi.String(\"49.207.178.47/32\"),\n\t\t\tDestinationAddressPrefix: pulumi.String(\"*\"),\n\t\t\tAccess:                   pulumi.String(\"Allow\"),\n\t\t\tPriority:                 pulumi.Int(200),\n\t\t\tDirection:                pulumi.String(\"Inbound\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.AzureNetworkSecurityRule;\nimport com.pulumi.duplocloud.AzureNetworkSecurityRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var securityRule = new AzureNetworkSecurityRule(\"securityRule\", AzureNetworkSecurityRuleArgs.builder()\n            .infraName(\"demo\")\n            .networkSecurityGroupName(\"duploinfra-sub01\")\n            .name(\"test-sg-rule\")\n            .sourceRuleType(0)\n            .destinationRuleType(0)\n            .protocol(\"tcp\")\n            .sourcePortRange(\"*\")\n            .destinationPortRange(\"*\")\n            .sourceAddressPrefix(\"49.207.178.47/32\")\n            .destinationAddressPrefix(\"*\")\n            .access(\"Allow\")\n            .priority(200)\n            .direction(\"Inbound\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  securityRule:\n    type: duplocloud:AzureNetworkSecurityRule\n    name: security_rule\n    properties:\n      infraName: demo\n      networkSecurityGroupName: duploinfra-sub01\n      name: test-sg-rule\n      sourceRuleType: 0\n      destinationRuleType: 0\n      protocol: tcp\n      sourcePortRange: '*'\n      destinationPortRange: '*'\n      sourceAddressPrefix: 49.207.178.47/32\n      destinationAddressPrefix: '*'\n      access: Allow\n      priority: 200\n      direction: Inbound\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Security Group Rule\n\n - *INFRA_NAME* is the Duplo Infra\n\n - *SG_FULL_NAME* is the fullname of the Security Group, Example- \"duploinfra-\u003cSG_SHORT_NAME\u003e\"\n\n - *RULE_FULL_NAME* is the fullname of the Security Group Rule\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureNetworkSecurityRule:AzureNetworkSecurityRule security_rule *INFRA_NAME*/*SG_FULL_NAME*/*RULE_FULL_NAME*\n```\n\n",
            "properties": {
                "access": {
                    "type": "string",
                    "description": "Specifies whether network traffic is allowed or denied. Possible values are `Allow` and `Deny`.\n"
                },
                "destinationAddressPrefix": {
                    "type": "string",
                    "description": "CIDR or destination IP range or * to match any IP.\n"
                },
                "destinationPortRange": {
                    "type": "string",
                    "description": "Destination Port or Range. Integer or range between `0` and `65535` or `*` to match any.\n"
                },
                "destinationRuleType": {
                    "type": "integer",
                    "description": "Type of the destination security rule. Possible values include `0(IP Address)`, `1(Service Tag)`, `2(Application Security Group)`.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are `Inbound` and `Outbound`.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The fullname of the security group rule.\n"
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure.  Infrastructure names are globally unique and less than 13 characters.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group rule.\n"
                },
                "networkSecurityGroupName": {
                    "type": "string",
                    "description": "The name of the Network Security Group that we want to attach the rule to.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Specifies the priority of the rule.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Network protocol this rule applies to. Possible values include `tcp`, `udp`, `icmp`, `esp`, `ah` or `*` (which matches all).\n"
                },
                "sourceAddressPrefix": {
                    "type": "string",
                    "description": "CIDR or source IP range or * to match any IP.\n"
                },
                "sourcePortRange": {
                    "type": "string",
                    "description": "Source Port or Range. Integer or range between `0` and `65535` or `*` to match any.\n"
                },
                "sourceRuleType": {
                    "type": "integer",
                    "description": "Type of the source security rule. Possible values include `0(IP Address)`, `1(Service Tag)`, `2(Application Security Group)`.\n"
                }
            },
            "required": [
                "access",
                "destinationRuleType",
                "direction",
                "fullname",
                "infraName",
                "name",
                "networkSecurityGroupName",
                "priority",
                "protocol",
                "sourceRuleType"
            ],
            "inputProperties": {
                "access": {
                    "type": "string",
                    "description": "Specifies whether network traffic is allowed or denied. Possible values are `Allow` and `Deny`.\n"
                },
                "destinationAddressPrefix": {
                    "type": "string",
                    "description": "CIDR or destination IP range or * to match any IP.\n"
                },
                "destinationPortRange": {
                    "type": "string",
                    "description": "Destination Port or Range. Integer or range between `0` and `65535` or `*` to match any.\n"
                },
                "destinationRuleType": {
                    "type": "integer",
                    "description": "Type of the destination security rule. Possible values include `0(IP Address)`, `1(Service Tag)`, `2(Application Security Group)`.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are `Inbound` and `Outbound`.\n"
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure.  Infrastructure names are globally unique and less than 13 characters.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group rule.\n",
                    "willReplaceOnChanges": true
                },
                "networkSecurityGroupName": {
                    "type": "string",
                    "description": "The name of the Network Security Group that we want to attach the rule to.\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Specifies the priority of the rule.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Network protocol this rule applies to. Possible values include `tcp`, `udp`, `icmp`, `esp`, `ah` or `*` (which matches all).\n"
                },
                "sourceAddressPrefix": {
                    "type": "string",
                    "description": "CIDR or source IP range or * to match any IP.\n"
                },
                "sourcePortRange": {
                    "type": "string",
                    "description": "Source Port or Range. Integer or range between `0` and `65535` or `*` to match any.\n"
                },
                "sourceRuleType": {
                    "type": "integer",
                    "description": "Type of the source security rule. Possible values include `0(IP Address)`, `1(Service Tag)`, `2(Application Security Group)`.\n"
                }
            },
            "requiredInputs": [
                "access",
                "destinationRuleType",
                "direction",
                "infraName",
                "networkSecurityGroupName",
                "priority",
                "protocol",
                "sourceRuleType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureNetworkSecurityRule resources.\n",
                "properties": {
                    "access": {
                        "type": "string",
                        "description": "Specifies whether network traffic is allowed or denied. Possible values are `Allow` and `Deny`.\n"
                    },
                    "destinationAddressPrefix": {
                        "type": "string",
                        "description": "CIDR or destination IP range or * to match any IP.\n"
                    },
                    "destinationPortRange": {
                        "type": "string",
                        "description": "Destination Port or Range. Integer or range between `0` and `65535` or `*` to match any.\n"
                    },
                    "destinationRuleType": {
                        "type": "integer",
                        "description": "Type of the destination security rule. Possible values include `0(IP Address)`, `1(Service Tag)`, `2(Application Security Group)`.\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are `Inbound` and `Outbound`.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The fullname of the security group rule.\n"
                    },
                    "infraName": {
                        "type": "string",
                        "description": "The name of the infrastructure.  Infrastructure names are globally unique and less than 13 characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the security group rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkSecurityGroupName": {
                        "type": "string",
                        "description": "The name of the Network Security Group that we want to attach the rule to.\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Specifies the priority of the rule.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Network protocol this rule applies to. Possible values include `tcp`, `udp`, `icmp`, `esp`, `ah` or `*` (which matches all).\n"
                    },
                    "sourceAddressPrefix": {
                        "type": "string",
                        "description": "CIDR or source IP range or * to match any IP.\n"
                    },
                    "sourcePortRange": {
                        "type": "string",
                        "description": "Source Port or Range. Integer or range between `0` and `65535` or `*` to match any.\n"
                    },
                    "sourceRuleType": {
                        "type": "integer",
                        "description": "Type of the source security rule. Possible values include `0(IP Address)`, `1(Service Tag)`, `2(Application Security Group)`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azurePostgresqlDatabase:AzurePostgresqlDatabase": {
            "description": "`duplocloud.AzurePostgresqlDatabase` manages an azure postgresql database in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst mydb = new duplocloud.AzurePostgresqlDatabase(\"mydb\", {\n    tenantId: myapp.tenantId,\n    name: \"postgresql-test\",\n    administratorLogin: \"testroot\",\n    administratorLoginPassword: \"P@ssword12345\",\n    storageMb: 102400,\n    version: \"11\",\n    skuName: \"B_Gen5_2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmydb = duplocloud.AzurePostgresqlDatabase(\"mydb\",\n    tenant_id=myapp.tenant_id,\n    name=\"postgresql-test\",\n    administrator_login=\"testroot\",\n    administrator_login_password=\"P@ssword12345\",\n    storage_mb=102400,\n    version=\"11\",\n    sku_name=\"B_Gen5_2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var mydb = new Duplocloud.AzurePostgresqlDatabase(\"mydb\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"postgresql-test\",\n        AdministratorLogin = \"testroot\",\n        AdministratorLoginPassword = \"P@ssword12345\",\n        StorageMb = 102400,\n        Version = \"11\",\n        SkuName = \"B_Gen5_2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzurePostgresqlDatabase(ctx, \"mydb\", \u0026duplocloud.AzurePostgresqlDatabaseArgs{\n\t\t\tTenantId:                   myapp.TenantId,\n\t\t\tName:                       pulumi.String(\"postgresql-test\"),\n\t\t\tAdministratorLogin:         pulumi.String(\"testroot\"),\n\t\t\tAdministratorLoginPassword: pulumi.String(\"P@ssword12345\"),\n\t\t\tStorageMb:                  pulumi.Int(102400),\n\t\t\tVersion:                    pulumi.String(\"11\"),\n\t\t\tSkuName:                    pulumi.String(\"B_Gen5_2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzurePostgresqlDatabase;\nimport com.pulumi.duplocloud.AzurePostgresqlDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var mydb = new AzurePostgresqlDatabase(\"mydb\", AzurePostgresqlDatabaseArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"postgresql-test\")\n            .administratorLogin(\"testroot\")\n            .administratorLoginPassword(\"P@ssword12345\")\n            .storageMb(102400)\n            .version(11)\n            .skuName(\"B_Gen5_2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  mydb:\n    type: duplocloud:AzurePostgresqlDatabase\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: postgresql-test\n      administratorLogin: testroot\n      administratorLoginPassword: P@ssword12345\n      storageMb: 102400\n      version: 11\n      skuName: B_Gen5_2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure PostgreSQL Database\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the Azure PostgreSQL Database\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azurePostgresqlDatabase:AzurePostgresqlDatabase myPostgreSQLDatabase *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "administratorLogin": {
                    "type": "string",
                    "description": "The Administrator Login for the PostgreSQL Server.\n"
                },
                "administratorLoginPassword": {
                    "type": "string",
                    "description": "The Password associated with the `administrator_login` for the PostgreSQL Server.\n",
                    "secret": true
                },
                "backupRetentionDays": {
                    "type": "integer",
                    "description": "Backup retention days for the server, supported values are between `7` and `35` days.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The FQDN of the PostgreSQL Server.\n"
                },
                "geoRedundantBackup": {
                    "type": "string",
                    "description": "Turn Geo-redundant server backups on/off.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.\n"
                },
                "skuName": {
                    "type": "string",
                    "description": "Specifies the SKU Name for this PostgreSQL Server.\n"
                },
                "sslEnforcement": {
                    "type": "string",
                    "description": "Specifies if SSL should be enforced on connections.\n"
                },
                "storageMb": {
                    "type": "integer",
                    "description": "Max storage allowed for a server. Possible values are between `5120` MB(5GB) and `1048576` MB(1TB) for the Basic SKU and between `5120` MB(5GB) and `16777216` MB(16TB) for General Purpose/Memory Optimized SKUs.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure postgresql database will be created in.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Specifies the version of PostgreSQL to use. Valid values are `9.5`, `9.6`, `10`, `10.0`, and `11`. Changing this forces a new resource to be created.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "required": [
                "administratorLogin",
                "backupRetentionDays",
                "fqdn",
                "geoRedundantBackup",
                "name",
                "skuName",
                "sslEnforcement",
                "storageMb",
                "tags",
                "tenantId",
                "version"
            ],
            "inputProperties": {
                "administratorLogin": {
                    "type": "string",
                    "description": "The Administrator Login for the PostgreSQL Server.\n",
                    "willReplaceOnChanges": true
                },
                "administratorLoginPassword": {
                    "type": "string",
                    "description": "The Password associated with the `administrator_login` for the PostgreSQL Server.\n",
                    "secret": true
                },
                "backupRetentionDays": {
                    "type": "integer",
                    "description": "Backup retention days for the server, supported values are between `7` and `35` days.\n"
                },
                "geoRedundantBackup": {
                    "type": "string",
                    "description": "Turn Geo-redundant server backups on/off.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.\n",
                    "willReplaceOnChanges": true
                },
                "skuName": {
                    "type": "string",
                    "description": "Specifies the SKU Name for this PostgreSQL Server.\n"
                },
                "sslEnforcement": {
                    "type": "string",
                    "description": "Specifies if SSL should be enforced on connections.\n"
                },
                "storageMb": {
                    "type": "integer",
                    "description": "Max storage allowed for a server. Possible values are between `5120` MB(5GB) and `1048576` MB(1TB) for the Basic SKU and between `5120` MB(5GB) and `16777216` MB(16TB) for General Purpose/Memory Optimized SKUs.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure postgresql database will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "Specifies the version of PostgreSQL to use. Valid values are `9.5`, `9.6`, `10`, `10.0`, and `11`. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "skuName",
                "tenantId",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzurePostgresqlDatabase resources.\n",
                "properties": {
                    "administratorLogin": {
                        "type": "string",
                        "description": "The Administrator Login for the PostgreSQL Server.\n",
                        "willReplaceOnChanges": true
                    },
                    "administratorLoginPassword": {
                        "type": "string",
                        "description": "The Password associated with the `administrator_login` for the PostgreSQL Server.\n",
                        "secret": true
                    },
                    "backupRetentionDays": {
                        "type": "integer",
                        "description": "Backup retention days for the server, supported values are between `7` and `35` days.\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The FQDN of the PostgreSQL Server.\n"
                    },
                    "geoRedundantBackup": {
                        "type": "string",
                        "description": "Turn Geo-redundant server backups on/off.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.\n",
                        "willReplaceOnChanges": true
                    },
                    "skuName": {
                        "type": "string",
                        "description": "Specifies the SKU Name for this PostgreSQL Server.\n"
                    },
                    "sslEnforcement": {
                        "type": "string",
                        "description": "Specifies if SSL should be enforced on connections.\n"
                    },
                    "storageMb": {
                        "type": "integer",
                        "description": "Max storage allowed for a server. Possible values are between `5120` MB(5GB) and `1048576` MB(1TB) for the Basic SKU and between `5120` MB(5GB) and `16777216` MB(16TB) for General Purpose/Memory Optimized SKUs.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure postgresql database will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Specifies the version of PostgreSQL to use. Valid values are `9.5`, `9.6`, `10`, `10.0`, and `11`. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azurePostgresqlFlexibleDatabase:AzurePostgresqlFlexibleDatabase": {
            "description": "`duplocloud.AzurePostgresqlFlexibleDatabase` manages an azure postgresql flexible  database in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst db = new duplocloud.AzurePostgresqlFlexibleDatabase(\"db\", {\n    tenantId: myapp.tenantId,\n    name: \"psqlflex\",\n    serviceTier: \"Burstable\",\n    hardware: \"Standard_B2ms\",\n    highAvailability: \"Disabled\",\n    storageGb: 64,\n    version: \"16\",\n    subnet: \"subnet\",\n    administratorLogin: \"tftry\",\n    administratorLoginPassword: \"trynew#1\",\n    backupRetentionDays: 7,\n    geoRedundantBackup: \"Enabled\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\ndb = duplocloud.AzurePostgresqlFlexibleDatabase(\"db\",\n    tenant_id=myapp.tenant_id,\n    name=\"psqlflex\",\n    service_tier=\"Burstable\",\n    hardware=\"Standard_B2ms\",\n    high_availability=\"Disabled\",\n    storage_gb=64,\n    version=\"16\",\n    subnet=\"subnet\",\n    administrator_login=\"tftry\",\n    administrator_login_password=\"trynew#1\",\n    backup_retention_days=7,\n    geo_redundant_backup=\"Enabled\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var db = new Duplocloud.AzurePostgresqlFlexibleDatabase(\"db\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"psqlflex\",\n        ServiceTier = \"Burstable\",\n        Hardware = \"Standard_B2ms\",\n        HighAvailability = \"Disabled\",\n        StorageGb = 64,\n        Version = \"16\",\n        Subnet = \"subnet\",\n        AdministratorLogin = \"tftry\",\n        AdministratorLoginPassword = \"trynew#1\",\n        BackupRetentionDays = 7,\n        GeoRedundantBackup = \"Enabled\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzurePostgresqlFlexibleDatabase(ctx, \"db\", \u0026duplocloud.AzurePostgresqlFlexibleDatabaseArgs{\n\t\t\tTenantId:                   myapp.TenantId,\n\t\t\tName:                       pulumi.String(\"psqlflex\"),\n\t\t\tServiceTier:                pulumi.String(\"Burstable\"),\n\t\t\tHardware:                   pulumi.String(\"Standard_B2ms\"),\n\t\t\tHighAvailability:           pulumi.String(\"Disabled\"),\n\t\t\tStorageGb:                  pulumi.Int(64),\n\t\t\tVersion:                    pulumi.String(\"16\"),\n\t\t\tSubnet:                     pulumi.String(\"subnet\"),\n\t\t\tAdministratorLogin:         pulumi.String(\"tftry\"),\n\t\t\tAdministratorLoginPassword: pulumi.String(\"trynew#1\"),\n\t\t\tBackupRetentionDays:        pulumi.Int(7),\n\t\t\tGeoRedundantBackup:         pulumi.String(\"Enabled\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzurePostgresqlFlexibleDatabase;\nimport com.pulumi.duplocloud.AzurePostgresqlFlexibleDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var db = new AzurePostgresqlFlexibleDatabase(\"db\", AzurePostgresqlFlexibleDatabaseArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"psqlflex\")\n            .serviceTier(\"Burstable\")\n            .hardware(\"Standard_B2ms\")\n            .highAvailability(\"Disabled\")\n            .storageGb(64)\n            .version(\"16\")\n            .subnet(\"subnet\")\n            .administratorLogin(\"tftry\")\n            .administratorLoginPassword(\"trynew#1\")\n            .backupRetentionDays(7)\n            .geoRedundantBackup(\"Enabled\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  db:\n    type: duplocloud:AzurePostgresqlFlexibleDatabase\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: psqlflex\n      serviceTier: Burstable\n      hardware: Standard_B2ms\n      highAvailability: Disabled\n      storageGb: 64\n      version: '16'\n      subnet: subnet\n      administratorLogin: tftry\n      administratorLoginPassword: trynew#1\n      backupRetentionDays: 7\n      geoRedundantBackup: Enabled\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure PostgreSQL Database\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the Azure PostgreSQL Database\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azurePostgresqlFlexibleDatabase:AzurePostgresqlFlexibleDatabase myPostgreSQLDatabase *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "administratorLogin": {
                    "type": "string",
                    "description": "The Administrator Login for the PostgreSQL Server.\n"
                },
                "administratorLoginPassword": {
                    "type": "string",
                    "description": "The Password associated with the `administrator_login` for the PostgreSQL Server.\n",
                    "secret": true
                },
                "backupRetentionDays": {
                    "type": "integer",
                    "description": "Backup retention days for the server, supported values are between `7` and `35` days. Note: Updation allowed on updating with higher retention days value from current\n"
                },
                "geoRedundantBackup": {
                    "type": "string",
                    "description": "Turn Geo-redundant server backups Enabled/Disabled. To enable or disable geo*redundant*backup resource need to be recreated\n"
                },
                "hardware": {
                    "type": "string",
                    "description": "Specify compute based on service tier by prepending Standard_ keyword from following document https://azure.microsoft.com/en-in/pricing/details/postgresql/flexible-server\n"
                },
                "highAvailability": {
                    "type": "string",
                    "description": "High availability options— Disabled, SameZone, and ZoneRedundant — are applicable if the service tier is set to GeneralPurpose or MemoryOptimized. Defaults to `Disabled`.\n"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.\n"
                },
                "serviceTier": {
                    "type": "string",
                    "description": "Specify service*tier among `Burstable`, `GeneralPurpose` or `MemoryOptimized`. Note: should disable high*availability before updating to Burstable\n"
                },
                "storageGb": {
                    "type": "integer",
                    "description": "Max storage allowed for a server. Possible values are `32`,`64`,`128`,`256`,`512`,`1024`,`2048`,`4096`,`8192`,`16384`,`32768` GB. Note: Updation allowed on updating with higher storage size from current\n"
                },
                "subnet": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure postgresql database will be created in.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Specifies the version of PostgreSQL Flexible DB to use. Valid values are `16`,`15`,`14`,`13`,`12`,`11`. Changing this forces a new resource to be created.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "required": [
                "administratorLogin",
                "administratorLoginPassword",
                "backupRetentionDays",
                "geoRedundantBackup",
                "hardware",
                "location",
                "name",
                "serviceTier",
                "storageGb",
                "subnet",
                "tags",
                "tenantId",
                "version"
            ],
            "inputProperties": {
                "administratorLogin": {
                    "type": "string",
                    "description": "The Administrator Login for the PostgreSQL Server.\n",
                    "willReplaceOnChanges": true
                },
                "administratorLoginPassword": {
                    "type": "string",
                    "description": "The Password associated with the `administrator_login` for the PostgreSQL Server.\n",
                    "secret": true
                },
                "backupRetentionDays": {
                    "type": "integer",
                    "description": "Backup retention days for the server, supported values are between `7` and `35` days. Note: Updation allowed on updating with higher retention days value from current\n"
                },
                "geoRedundantBackup": {
                    "type": "string",
                    "description": "Turn Geo-redundant server backups Enabled/Disabled. To enable or disable geo*redundant*backup resource need to be recreated\n",
                    "willReplaceOnChanges": true
                },
                "hardware": {
                    "type": "string",
                    "description": "Specify compute based on service tier by prepending Standard_ keyword from following document https://azure.microsoft.com/en-in/pricing/details/postgresql/flexible-server\n"
                },
                "highAvailability": {
                    "type": "string",
                    "description": "High availability options— Disabled, SameZone, and ZoneRedundant — are applicable if the service tier is set to GeneralPurpose or MemoryOptimized. Defaults to `Disabled`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.\n",
                    "willReplaceOnChanges": true
                },
                "serviceTier": {
                    "type": "string",
                    "description": "Specify service*tier among `Burstable`, `GeneralPurpose` or `MemoryOptimized`. Note: should disable high*availability before updating to Burstable\n"
                },
                "storageGb": {
                    "type": "integer",
                    "description": "Max storage allowed for a server. Possible values are `32`,`64`,`128`,`256`,`512`,`1024`,`2048`,`4096`,`8192`,`16384`,`32768` GB. Note: Updation allowed on updating with higher storage size from current\n"
                },
                "subnet": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure postgresql database will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "Specifies the version of PostgreSQL Flexible DB to use. Valid values are `16`,`15`,`14`,`13`,`12`,`11`. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "administratorLogin",
                "administratorLoginPassword",
                "hardware",
                "serviceTier",
                "subnet",
                "tenantId",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzurePostgresqlFlexibleDatabase resources.\n",
                "properties": {
                    "administratorLogin": {
                        "type": "string",
                        "description": "The Administrator Login for the PostgreSQL Server.\n",
                        "willReplaceOnChanges": true
                    },
                    "administratorLoginPassword": {
                        "type": "string",
                        "description": "The Password associated with the `administrator_login` for the PostgreSQL Server.\n",
                        "secret": true
                    },
                    "backupRetentionDays": {
                        "type": "integer",
                        "description": "Backup retention days for the server, supported values are between `7` and `35` days. Note: Updation allowed on updating with higher retention days value from current\n"
                    },
                    "geoRedundantBackup": {
                        "type": "string",
                        "description": "Turn Geo-redundant server backups Enabled/Disabled. To enable or disable geo*redundant*backup resource need to be recreated\n",
                        "willReplaceOnChanges": true
                    },
                    "hardware": {
                        "type": "string",
                        "description": "Specify compute based on service tier by prepending Standard_ keyword from following document https://azure.microsoft.com/en-in/pricing/details/postgresql/flexible-server\n"
                    },
                    "highAvailability": {
                        "type": "string",
                        "description": "High availability options— Disabled, SameZone, and ZoneRedundant — are applicable if the service tier is set to GeneralPurpose or MemoryOptimized. Defaults to `Disabled`.\n"
                    },
                    "location": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceTier": {
                        "type": "string",
                        "description": "Specify service*tier among `Burstable`, `GeneralPurpose` or `MemoryOptimized`. Note: should disable high*availability before updating to Burstable\n"
                    },
                    "storageGb": {
                        "type": "integer",
                        "description": "Max storage allowed for a server. Possible values are `32`,`64`,`128`,`256`,`512`,`1024`,`2048`,`4096`,`8192`,`16384`,`32768` GB. Note: Updation allowed on updating with higher storage size from current\n"
                    },
                    "subnet": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure postgresql database will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Specifies the version of PostgreSQL Flexible DB to use. Valid values are `16`,`15`,`14`,`13`,`12`,`11`. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azurePrivateEndpoint:AzurePrivateEndpoint": {
            "description": "`duplocloud.AzurePrivateEndpoint` manages an azure private endpoint in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst mssqlServerPrivateEndpoint = new duplocloud.AzurePrivateEndpoint(\"mssql_server_private_endpoint\", {\n    tenantId: myapp.tenantId,\n    name: \"pe-duplo-tf\",\n    subnetId: \"/subscriptions/\u003csubscription-id\u003e/resourceGroups/\u003cresource-group\u003e/providers/Microsoft.Network/virtualNetworks/tmerge/subnets/duploinfra-default\",\n    privateLinkServiceConnections: [{\n        name: \"pe-mssql\",\n        privateConnectionResourceId: \"/subscriptions/\u003csubscription-id\u003e/resourceGroups/duploservices-jee556/providers/Microsoft.Sql/servers/thisistotestprivateendpoint\",\n        groupIds: [\"sqlServer\"],\n    }],\n});\nconst storageServerPrivateEndpoint = new duplocloud.AzurePrivateEndpoint(\"storage_server_private_endpoint\", {\n    tenantId: myapp.tenantId,\n    name: \"pe-duplo-tf-storage\",\n    subnetId: \"/subscriptions/\u003csubscription-id\u003e/resourceGroups/\u003cresource-group\u003e/providers/Microsoft.Network/virtualNetworks/tmerge/subnets/duploinfra-default\",\n    privateLinkServiceConnections: [{\n        name: \"pe-storage\",\n        privateConnectionResourceId: \"/subscriptions/\u003csubscription-id\u003e/resourceGroups/duploservices-jee556/providers/Microsoft.Storage/storageAccounts/letsfixprivateendpoint\",\n        groupIds: [\"Blob\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmssql_server_private_endpoint = duplocloud.AzurePrivateEndpoint(\"mssql_server_private_endpoint\",\n    tenant_id=myapp.tenant_id,\n    name=\"pe-duplo-tf\",\n    subnet_id=\"/subscriptions/\u003csubscription-id\u003e/resourceGroups/\u003cresource-group\u003e/providers/Microsoft.Network/virtualNetworks/tmerge/subnets/duploinfra-default\",\n    private_link_service_connections=[{\n        \"name\": \"pe-mssql\",\n        \"private_connection_resource_id\": \"/subscriptions/\u003csubscription-id\u003e/resourceGroups/duploservices-jee556/providers/Microsoft.Sql/servers/thisistotestprivateendpoint\",\n        \"group_ids\": [\"sqlServer\"],\n    }])\nstorage_server_private_endpoint = duplocloud.AzurePrivateEndpoint(\"storage_server_private_endpoint\",\n    tenant_id=myapp.tenant_id,\n    name=\"pe-duplo-tf-storage\",\n    subnet_id=\"/subscriptions/\u003csubscription-id\u003e/resourceGroups/\u003cresource-group\u003e/providers/Microsoft.Network/virtualNetworks/tmerge/subnets/duploinfra-default\",\n    private_link_service_connections=[{\n        \"name\": \"pe-storage\",\n        \"private_connection_resource_id\": \"/subscriptions/\u003csubscription-id\u003e/resourceGroups/duploservices-jee556/providers/Microsoft.Storage/storageAccounts/letsfixprivateendpoint\",\n        \"group_ids\": [\"Blob\"],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var mssqlServerPrivateEndpoint = new Duplocloud.AzurePrivateEndpoint(\"mssql_server_private_endpoint\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"pe-duplo-tf\",\n        SubnetId = \"/subscriptions/\u003csubscription-id\u003e/resourceGroups/\u003cresource-group\u003e/providers/Microsoft.Network/virtualNetworks/tmerge/subnets/duploinfra-default\",\n        PrivateLinkServiceConnections = new[]\n        {\n            new Duplocloud.Inputs.AzurePrivateEndpointPrivateLinkServiceConnectionArgs\n            {\n                Name = \"pe-mssql\",\n                PrivateConnectionResourceId = \"/subscriptions/\u003csubscription-id\u003e/resourceGroups/duploservices-jee556/providers/Microsoft.Sql/servers/thisistotestprivateendpoint\",\n                GroupIds = new[]\n                {\n                    \"sqlServer\",\n                },\n            },\n        },\n    });\n\n    var storageServerPrivateEndpoint = new Duplocloud.AzurePrivateEndpoint(\"storage_server_private_endpoint\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"pe-duplo-tf-storage\",\n        SubnetId = \"/subscriptions/\u003csubscription-id\u003e/resourceGroups/\u003cresource-group\u003e/providers/Microsoft.Network/virtualNetworks/tmerge/subnets/duploinfra-default\",\n        PrivateLinkServiceConnections = new[]\n        {\n            new Duplocloud.Inputs.AzurePrivateEndpointPrivateLinkServiceConnectionArgs\n            {\n                Name = \"pe-storage\",\n                PrivateConnectionResourceId = \"/subscriptions/\u003csubscription-id\u003e/resourceGroups/duploservices-jee556/providers/Microsoft.Storage/storageAccounts/letsfixprivateendpoint\",\n                GroupIds = new[]\n                {\n                    \"Blob\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzurePrivateEndpoint(ctx, \"mssql_server_private_endpoint\", \u0026duplocloud.AzurePrivateEndpointArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tName:     pulumi.String(\"pe-duplo-tf\"),\n\t\t\tSubnetId: pulumi.String(\"/subscriptions/\u003csubscription-id\u003e/resourceGroups/\u003cresource-group\u003e/providers/Microsoft.Network/virtualNetworks/tmerge/subnets/duploinfra-default\"),\n\t\t\tPrivateLinkServiceConnections: duplocloud.AzurePrivateEndpointPrivateLinkServiceConnectionArray{\n\t\t\t\t\u0026duplocloud.AzurePrivateEndpointPrivateLinkServiceConnectionArgs{\n\t\t\t\t\tName:                        pulumi.String(\"pe-mssql\"),\n\t\t\t\t\tPrivateConnectionResourceId: pulumi.String(\"/subscriptions/\u003csubscription-id\u003e/resourceGroups/duploservices-jee556/providers/Microsoft.Sql/servers/thisistotestprivateendpoint\"),\n\t\t\t\t\tGroupIds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"sqlServer\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzurePrivateEndpoint(ctx, \"storage_server_private_endpoint\", \u0026duplocloud.AzurePrivateEndpointArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tName:     pulumi.String(\"pe-duplo-tf-storage\"),\n\t\t\tSubnetId: pulumi.String(\"/subscriptions/\u003csubscription-id\u003e/resourceGroups/\u003cresource-group\u003e/providers/Microsoft.Network/virtualNetworks/tmerge/subnets/duploinfra-default\"),\n\t\t\tPrivateLinkServiceConnections: duplocloud.AzurePrivateEndpointPrivateLinkServiceConnectionArray{\n\t\t\t\t\u0026duplocloud.AzurePrivateEndpointPrivateLinkServiceConnectionArgs{\n\t\t\t\t\tName:                        pulumi.String(\"pe-storage\"),\n\t\t\t\t\tPrivateConnectionResourceId: pulumi.String(\"/subscriptions/\u003csubscription-id\u003e/resourceGroups/duploservices-jee556/providers/Microsoft.Storage/storageAccounts/letsfixprivateendpoint\"),\n\t\t\t\t\tGroupIds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Blob\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzurePrivateEndpoint;\nimport com.pulumi.duplocloud.AzurePrivateEndpointArgs;\nimport com.pulumi.duplocloud.inputs.AzurePrivateEndpointPrivateLinkServiceConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var mssqlServerPrivateEndpoint = new AzurePrivateEndpoint(\"mssqlServerPrivateEndpoint\", AzurePrivateEndpointArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"pe-duplo-tf\")\n            .subnetId(\"/subscriptions/\u003csubscription-id\u003e/resourceGroups/\u003cresource-group\u003e/providers/Microsoft.Network/virtualNetworks/tmerge/subnets/duploinfra-default\")\n            .privateLinkServiceConnections(AzurePrivateEndpointPrivateLinkServiceConnectionArgs.builder()\n                .name(\"pe-mssql\")\n                .privateConnectionResourceId(\"/subscriptions/\u003csubscription-id\u003e/resourceGroups/duploservices-jee556/providers/Microsoft.Sql/servers/thisistotestprivateendpoint\")\n                .groupIds(\"sqlServer\")\n                .build())\n            .build());\n\n        var storageServerPrivateEndpoint = new AzurePrivateEndpoint(\"storageServerPrivateEndpoint\", AzurePrivateEndpointArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"pe-duplo-tf-storage\")\n            .subnetId(\"/subscriptions/\u003csubscription-id\u003e/resourceGroups/\u003cresource-group\u003e/providers/Microsoft.Network/virtualNetworks/tmerge/subnets/duploinfra-default\")\n            .privateLinkServiceConnections(AzurePrivateEndpointPrivateLinkServiceConnectionArgs.builder()\n                .name(\"pe-storage\")\n                .privateConnectionResourceId(\"/subscriptions/\u003csubscription-id\u003e/resourceGroups/duploservices-jee556/providers/Microsoft.Storage/storageAccounts/letsfixprivateendpoint\")\n                .groupIds(\"Blob\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  mssqlServerPrivateEndpoint:\n    type: duplocloud:AzurePrivateEndpoint\n    name: mssql_server_private_endpoint\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: pe-duplo-tf\n      subnetId: /subscriptions/\u003csubscription-id\u003e/resourceGroups/\u003cresource-group\u003e/providers/Microsoft.Network/virtualNetworks/tmerge/subnets/duploinfra-default\n      privateLinkServiceConnections:\n        - name: pe-mssql\n          privateConnectionResourceId: /subscriptions/\u003csubscription-id\u003e/resourceGroups/duploservices-jee556/providers/Microsoft.Sql/servers/thisistotestprivateendpoint\n          groupIds:\n            - sqlServer\n  storageServerPrivateEndpoint:\n    type: duplocloud:AzurePrivateEndpoint\n    name: storage_server_private_endpoint\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: pe-duplo-tf-storage\n      subnetId: /subscriptions/\u003csubscription-id\u003e/resourceGroups/\u003cresource-group\u003e/providers/Microsoft.Network/virtualNetworks/tmerge/subnets/duploinfra-default\n      privateLinkServiceConnections:\n        - name: pe-storage\n          privateConnectionResourceId: /subscriptions/\u003csubscription-id\u003e/resourceGroups/duploservices-jee556/providers/Microsoft.Storage/storageAccounts/letsfixprivateendpoint\n          groupIds:\n            - Blob\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Private Endpoint\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the name of the Azure  Private Endpoint\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azurePrivateEndpoint:AzurePrivateEndpoint private_endpoint *TENANT_ID*/*NAME*\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Specifies the Name of the Private Endpoint.\n"
                },
                "privateLinkServiceConnections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzurePrivateEndpointPrivateLinkServiceConnection:AzurePrivateEndpointPrivateLinkServiceConnection"
                    },
                    "description": "Specifies private link service connections.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the Subnet from which Private IP Addresses will be allocated for this Private Endpoint.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure private endpoint will be created in.\n"
                }
            },
            "required": [
                "name",
                "privateLinkServiceConnections",
                "subnetId",
                "tenantId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Specifies the Name of the Private Endpoint.\n",
                    "willReplaceOnChanges": true
                },
                "privateLinkServiceConnections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzurePrivateEndpointPrivateLinkServiceConnection:AzurePrivateEndpointPrivateLinkServiceConnection"
                    },
                    "description": "Specifies private link service connections.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the Subnet from which Private IP Addresses will be allocated for this Private Endpoint.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure private endpoint will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "privateLinkServiceConnections",
                "subnetId",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzurePrivateEndpoint resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specifies the Name of the Private Endpoint.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateLinkServiceConnections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AzurePrivateEndpointPrivateLinkServiceConnection:AzurePrivateEndpointPrivateLinkServiceConnection"
                        },
                        "description": "Specifies private link service connections.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of the Subnet from which Private IP Addresses will be allocated for this Private Endpoint.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure private endpoint will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureRecoveryServicesVault:AzureRecoveryServicesVault": {
            "description": "`duplocloud.AzureRecoveryServicesVault` manages an Azure Recovery Services Vault in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst recoveryServicesVault = new duplocloud.AzureRecoveryServicesVault(\"recovery_services_vault\", {\n    infraName: \"demo\",\n    resourceGroupName: \"duploinfra-demo\",\n    name: \"test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nrecovery_services_vault = duplocloud.AzureRecoveryServicesVault(\"recovery_services_vault\",\n    infra_name=\"demo\",\n    resource_group_name=\"duploinfra-demo\",\n    name=\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var recoveryServicesVault = new Duplocloud.AzureRecoveryServicesVault(\"recovery_services_vault\", new()\n    {\n        InfraName = \"demo\",\n        ResourceGroupName = \"duploinfra-demo\",\n        Name = \"test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewAzureRecoveryServicesVault(ctx, \"recovery_services_vault\", \u0026duplocloud.AzureRecoveryServicesVaultArgs{\n\t\t\tInfraName:         pulumi.String(\"demo\"),\n\t\t\tResourceGroupName: pulumi.String(\"duploinfra-demo\"),\n\t\t\tName:              pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.AzureRecoveryServicesVault;\nimport com.pulumi.duplocloud.AzureRecoveryServicesVaultArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var recoveryServicesVault = new AzureRecoveryServicesVault(\"recoveryServicesVault\", AzureRecoveryServicesVaultArgs.builder()\n            .infraName(\"demo\")\n            .resourceGroupName(\"duploinfra-demo\")\n            .name(\"test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  recoveryServicesVault:\n    type: duplocloud:AzureRecoveryServicesVault\n    name: recovery_services_vault\n    properties:\n      infraName: demo\n      resourceGroupName: duploinfra-demo\n      name: test\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Recovery Services Vault\n\n - *INFRA_NAME* is the name of duplo infra.\n\n - *NAME* is the name of the Recovery Services Vault\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureRecoveryServicesVault:AzureRecoveryServicesVault recovery_services_vault *INFRA_NAME*/*NAME*\n```\n\n",
            "properties": {
                "azureId": {
                    "type": "string"
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.\n"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.\n"
                },
                "resourceGroupName": {
                    "type": "string",
                    "description": "The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.\n"
                },
                "sku": {
                    "type": "string"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Recovery Services Vault to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "required": [
                "azureId",
                "infraName",
                "location",
                "name",
                "resourceGroupName",
                "sku"
            ],
            "inputProperties": {
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "resourceGroupName": {
                    "type": "string",
                    "description": "The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Recovery Services Vault to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "infraName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureRecoveryServicesVault resources.\n",
                "properties": {
                    "azureId": {
                        "type": "string"
                    },
                    "infraName": {
                        "type": "string",
                        "description": "The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "location": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceGroupName": {
                        "type": "string",
                        "description": "The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.\n"
                    },
                    "sku": {
                        "type": "string"
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until Recovery Services Vault to be ready, after creation. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureRedisCache:AzureRedisCache": {
            "description": "`duplocloud.AzureRedisCache` manages an Azure redis cache in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst myCache = new duplocloud.AzureRedisCache(\"myCache\", {\n    tenantId: myapp.tenantId,\n    name: \"cache-test\",\n    capacity: 1,\n    family: \"p\",\n    skuName: \"Premium\",\n    subnetId: \"/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\",\n    enableNonSslPort: false,\n    shardCount: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmy_cache = duplocloud.AzureRedisCache(\"myCache\",\n    tenant_id=myapp.tenant_id,\n    name=\"cache-test\",\n    capacity=1,\n    family=\"p\",\n    sku_name=\"Premium\",\n    subnet_id=\"/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\",\n    enable_non_ssl_port=False,\n    shard_count=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var myCache = new Duplocloud.AzureRedisCache(\"myCache\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"cache-test\",\n        Capacity = 1,\n        Family = \"p\",\n        SkuName = \"Premium\",\n        SubnetId = \"/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\",\n        EnableNonSslPort = false,\n        ShardCount = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureRedisCache(ctx, \"myCache\", \u0026duplocloud.AzureRedisCacheArgs{\n\t\t\tTenantId:         myapp.TenantId,\n\t\t\tName:             pulumi.String(\"cache-test\"),\n\t\t\tCapacity:         pulumi.Int(1),\n\t\t\tFamily:           pulumi.String(\"p\"),\n\t\t\tSkuName:          pulumi.String(\"Premium\"),\n\t\t\tSubnetId:         pulumi.String(\"/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\"),\n\t\t\tEnableNonSslPort: pulumi.Bool(false),\n\t\t\tShardCount:       pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureRedisCache;\nimport com.pulumi.duplocloud.AzureRedisCacheArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var myCache = new AzureRedisCache(\"myCache\", AzureRedisCacheArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"cache-test\")\n            .capacity(1)\n            .family(\"p\")\n            .skuName(\"Premium\")\n            .subnetId(\"/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\")\n            .enableNonSslPort(false)\n            .shardCount(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  myCache:\n    type: duplocloud:AzureRedisCache\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: cache-test\n      capacity: 1\n      family: p\n      skuName: Premium\n      subnetId: /subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\n      enableNonSslPort: false\n      shardCount: 1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Redis Cache\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the Azure Redis Cache\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureRedisCache:AzureRedisCache myRedisCache *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "capacity": {
                    "type": "integer",
                    "description": "The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`\n"
                },
                "enableNonSslPort": {
                    "type": "boolean",
                    "description": "Enable the non-SSL port (6379) Defaults to `false`.\n"
                },
                "family": {
                    "type": "string",
                    "description": "The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)\n"
                },
                "hostname": {
                    "type": "string"
                },
                "minimumTlsVersion": {
                    "type": "string",
                    "description": "The minimum TLS version.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Redis instance. Changing this forces a new resource to be created.\n"
                },
                "port": {
                    "type": "integer"
                },
                "redisVersion": {
                    "type": "string",
                    "description": "Redis version. Only major version needed. Valid values: `4`, `6`.\n"
                },
                "shardCount": {
                    "type": "integer",
                    "description": "Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.\n"
                },
                "skuName": {
                    "type": "string",
                    "description": "The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.\n"
                },
                "sslPort": {
                    "type": "integer"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure redis cache will be created in.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "required": [
                "capacity",
                "family",
                "hostname",
                "name",
                "port",
                "redisVersion",
                "skuName",
                "sslPort",
                "tags",
                "tenantId"
            ],
            "inputProperties": {
                "capacity": {
                    "type": "integer",
                    "description": "The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`\n"
                },
                "enableNonSslPort": {
                    "type": "boolean",
                    "description": "Enable the non-SSL port (6379) Defaults to `false`.\n"
                },
                "family": {
                    "type": "string",
                    "description": "The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)\n"
                },
                "minimumTlsVersion": {
                    "type": "string",
                    "description": "The minimum TLS version.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Redis instance. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "redisVersion": {
                    "type": "string",
                    "description": "Redis version. Only major version needed. Valid values: `4`, `6`.\n"
                },
                "shardCount": {
                    "type": "integer",
                    "description": "Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.\n"
                },
                "skuName": {
                    "type": "string",
                    "description": "The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure redis cache will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "capacity",
                "family",
                "skuName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureRedisCache resources.\n",
                "properties": {
                    "capacity": {
                        "type": "integer",
                        "description": "The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`\n"
                    },
                    "enableNonSslPort": {
                        "type": "boolean",
                        "description": "Enable the non-SSL port (6379) Defaults to `false`.\n"
                    },
                    "family": {
                        "type": "string",
                        "description": "The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)\n"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "minimumTlsVersion": {
                        "type": "string",
                        "description": "The minimum TLS version.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Redis instance. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "redisVersion": {
                        "type": "string",
                        "description": "Redis version. Only major version needed. Valid values: `4`, `6`.\n"
                    },
                    "shardCount": {
                        "type": "integer",
                        "description": "Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.\n"
                    },
                    "skuName": {
                        "type": "string",
                        "description": "The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.\n"
                    },
                    "sslPort": {
                        "type": "integer"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure redis cache will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureSqlFirewallRule:AzureSqlFirewallRule": {
            "description": "`duplocloud.AzureSqlFirewallRule` allows you to manage an Azure SQL Firewall Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst sqlFirewallRule = new duplocloud.AzureSqlFirewallRule(\"sql_firewall_rule\", {\n    tenantId: myapp.tenantId,\n    name: \"test-rule\",\n    serverName: \"test-server\",\n    startIpAddress: \"10.0.17.62\",\n    endIpAddress: \"10.0.17.62\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nsql_firewall_rule = duplocloud.AzureSqlFirewallRule(\"sql_firewall_rule\",\n    tenant_id=myapp.tenant_id,\n    name=\"test-rule\",\n    server_name=\"test-server\",\n    start_ip_address=\"10.0.17.62\",\n    end_ip_address=\"10.0.17.62\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var sqlFirewallRule = new Duplocloud.AzureSqlFirewallRule(\"sql_firewall_rule\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"test-rule\",\n        ServerName = \"test-server\",\n        StartIpAddress = \"10.0.17.62\",\n        EndIpAddress = \"10.0.17.62\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureSqlFirewallRule(ctx, \"sql_firewall_rule\", \u0026duplocloud.AzureSqlFirewallRuleArgs{\n\t\t\tTenantId:       myapp.TenantId,\n\t\t\tName:           pulumi.String(\"test-rule\"),\n\t\t\tServerName:     pulumi.String(\"test-server\"),\n\t\t\tStartIpAddress: pulumi.String(\"10.0.17.62\"),\n\t\t\tEndIpAddress:   pulumi.String(\"10.0.17.62\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureSqlFirewallRule;\nimport com.pulumi.duplocloud.AzureSqlFirewallRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var sqlFirewallRule = new AzureSqlFirewallRule(\"sqlFirewallRule\", AzureSqlFirewallRuleArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"test-rule\")\n            .serverName(\"test-server\")\n            .startIpAddress(\"10.0.17.62\")\n            .endIpAddress(\"10.0.17.62\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  sqlFirewallRule:\n    type: duplocloud:AzureSqlFirewallRule\n    name: sql_firewall_rule\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: test-rule\n      serverName: test-server\n      startIpAddress: 10.0.17.62\n      endIpAddress: 10.0.17.62\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure SQL server Firewall Rule\n\n - *TENANT_ID* is the tenant GUID\n\n - *SERVER_NAME* is the name of the Azure Sql server\n\n - *RULE_NAME* is the name of the Azure Sql server Firewall Rule\n\n```sh\n$ pulumi import duplocloud:index/azureSqlFirewallRule:AzureSqlFirewallRule sql_firewall_rule *TENANT_ID*/*SERVER_NAME*/*RULE_NAME*\n```\n\n",
            "properties": {
                "azureId": {
                    "type": "string",
                    "description": "The ID of the SQL firewall rule.\n"
                },
                "endIpAddress": {
                    "type": "string",
                    "description": "The ending IP address to allow through the firewall for this rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the firewall rule.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "The name of the SQL Server on which to create the Firewall Rule.\n"
                },
                "startIpAddress": {
                    "type": "string",
                    "description": "The starting IP address to allow through the firewall for this rule.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the sql firewall rule will be created in.\n"
                }
            },
            "required": [
                "azureId",
                "endIpAddress",
                "name",
                "serverName",
                "startIpAddress",
                "tenantId"
            ],
            "inputProperties": {
                "endIpAddress": {
                    "type": "string",
                    "description": "The ending IP address to allow through the firewall for this rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the firewall rule.\n",
                    "willReplaceOnChanges": true
                },
                "serverName": {
                    "type": "string",
                    "description": "The name of the SQL Server on which to create the Firewall Rule.\n",
                    "willReplaceOnChanges": true
                },
                "startIpAddress": {
                    "type": "string",
                    "description": "The starting IP address to allow through the firewall for this rule.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the sql firewall rule will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "endIpAddress",
                "serverName",
                "startIpAddress",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureSqlFirewallRule resources.\n",
                "properties": {
                    "azureId": {
                        "type": "string",
                        "description": "The ID of the SQL firewall rule.\n"
                    },
                    "endIpAddress": {
                        "type": "string",
                        "description": "The ending IP address to allow through the firewall for this rule.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the firewall rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverName": {
                        "type": "string",
                        "description": "The name of the SQL Server on which to create the Firewall Rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "startIpAddress": {
                        "type": "string",
                        "description": "The starting IP address to allow through the firewall for this rule.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the sql firewall rule will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureSqlManagedDatabase:AzureSqlManagedDatabase": {
            "description": "`duplocloud.AzureSqlManagedDatabase` manages an azure sql managed database in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst mydb = new duplocloud.AzureSqlManagedDatabase(\"mydb\", {\n    tenantId: myapp.tenantId,\n    name: \"db-test\",\n    administratorLogin: \"testroot\",\n    administratorLoginPassword: \"P@ssword12345\",\n    minimumTlsVersion: \"1.2\",\n    skuName: \"GP_Gen5\",\n    vcores: 4,\n    storageSizeInGb: 32,\n    subnetId: \"/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmydb = duplocloud.AzureSqlManagedDatabase(\"mydb\",\n    tenant_id=myapp.tenant_id,\n    name=\"db-test\",\n    administrator_login=\"testroot\",\n    administrator_login_password=\"P@ssword12345\",\n    minimum_tls_version=\"1.2\",\n    sku_name=\"GP_Gen5\",\n    vcores=4,\n    storage_size_in_gb=32,\n    subnet_id=\"/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var mydb = new Duplocloud.AzureSqlManagedDatabase(\"mydb\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"db-test\",\n        AdministratorLogin = \"testroot\",\n        AdministratorLoginPassword = \"P@ssword12345\",\n        MinimumTlsVersion = \"1.2\",\n        SkuName = \"GP_Gen5\",\n        Vcores = 4,\n        StorageSizeInGb = 32,\n        SubnetId = \"/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureSqlManagedDatabase(ctx, \"mydb\", \u0026duplocloud.AzureSqlManagedDatabaseArgs{\n\t\t\tTenantId:                   myapp.TenantId,\n\t\t\tName:                       pulumi.String(\"db-test\"),\n\t\t\tAdministratorLogin:         pulumi.String(\"testroot\"),\n\t\t\tAdministratorLoginPassword: pulumi.String(\"P@ssword12345\"),\n\t\t\tMinimumTlsVersion:          pulumi.String(\"1.2\"),\n\t\t\tSkuName:                    pulumi.String(\"GP_Gen5\"),\n\t\t\tVcores:                     pulumi.Int(4),\n\t\t\tStorageSizeInGb:            pulumi.Int(32),\n\t\t\tSubnetId:                   pulumi.String(\"/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureSqlManagedDatabase;\nimport com.pulumi.duplocloud.AzureSqlManagedDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var mydb = new AzureSqlManagedDatabase(\"mydb\", AzureSqlManagedDatabaseArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"db-test\")\n            .administratorLogin(\"testroot\")\n            .administratorLoginPassword(\"P@ssword12345\")\n            .minimumTlsVersion(\"1.2\")\n            .skuName(\"GP_Gen5\")\n            .vcores(4)\n            .storageSizeInGb(32)\n            .subnetId(\"/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  mydb:\n    type: duplocloud:AzureSqlManagedDatabase\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: db-test\n      administratorLogin: testroot\n      administratorLoginPassword: P@ssword12345\n      minimumTlsVersion: '1.2'\n      skuName: GP_Gen5\n      vcores: 4\n      storageSizeInGb: 32\n      subnetId: /subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Sql Managed Database\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the Azure Sql Managed Database\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureSqlManagedDatabase:AzureSqlManagedDatabase myManagedSQLDatabase *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "administratorLogin": {
                    "type": "string",
                    "description": "The administrator login name for the new server. Changing this forces a new resource to be created.\n"
                },
                "administratorLoginPassword": {
                    "type": "string",
                    "description": "The password associated with the `administrator_login` user. Needs to comply with Azure's Password Policy\n",
                    "secret": true
                },
                "collation": {
                    "type": "string"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name of the sql managed instance.\n"
                },
                "minimumTlsVersion": {
                    "type": "string",
                    "description": "The Minimum TLS Version for all SQL managed Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SQL Managed Instance. This needs to be globally unique within Azure.\n"
                },
                "publicDataEndpointEnabled": {
                    "type": "boolean",
                    "description": "Is the public data endpoint enabled? Default value is `false`.\n"
                },
                "skuName": {
                    "type": "string",
                    "description": "Specifies the SKU Name for the SQL Managed Instance. Valid values include `GP_Gen4`, `GP_Gen5`, `BC_Gen4`, `BC_Gen5`. Changing this forces a new resource to be created.\n"
                },
                "storageSizeInGb": {
                    "type": "integer",
                    "description": "Maximum storage space for your instance. It should be a multiple of 32GB.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet resource id that the SQL Managed Instance will be associated with.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure sql managed database will be created in.\n"
                },
                "vcores": {
                    "type": "integer",
                    "description": "Number of cores that should be assigned to your instance. Values can be `8`, `16`, or `24` if `sku_name` is `GP_Gen4`, or `8`, `16`, `24`, `32`, or `40` if `sku_name` is `GP_Gen5`\n"
                }
            },
            "required": [
                "administratorLogin",
                "administratorLoginPassword",
                "collation",
                "fqdn",
                "minimumTlsVersion",
                "name",
                "publicDataEndpointEnabled",
                "skuName",
                "storageSizeInGb",
                "subnetId",
                "tags",
                "tenantId",
                "vcores"
            ],
            "inputProperties": {
                "administratorLogin": {
                    "type": "string",
                    "description": "The administrator login name for the new server. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "administratorLoginPassword": {
                    "type": "string",
                    "description": "The password associated with the `administrator_login` user. Needs to comply with Azure's Password Policy\n",
                    "secret": true
                },
                "minimumTlsVersion": {
                    "type": "string",
                    "description": "The Minimum TLS Version for all SQL managed Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SQL Managed Instance. This needs to be globally unique within Azure.\n",
                    "willReplaceOnChanges": true
                },
                "publicDataEndpointEnabled": {
                    "type": "boolean",
                    "description": "Is the public data endpoint enabled? Default value is `false`.\n"
                },
                "skuName": {
                    "type": "string",
                    "description": "Specifies the SKU Name for the SQL Managed Instance. Valid values include `GP_Gen4`, `GP_Gen5`, `BC_Gen4`, `BC_Gen5`. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "storageSizeInGb": {
                    "type": "integer",
                    "description": "Maximum storage space for your instance. It should be a multiple of 32GB.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet resource id that the SQL Managed Instance will be associated with.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure sql managed database will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "vcores": {
                    "type": "integer",
                    "description": "Number of cores that should be assigned to your instance. Values can be `8`, `16`, or `24` if `sku_name` is `GP_Gen4`, or `8`, `16`, `24`, `32`, or `40` if `sku_name` is `GP_Gen5`\n"
                }
            },
            "requiredInputs": [
                "administratorLogin",
                "administratorLoginPassword",
                "skuName",
                "storageSizeInGb",
                "subnetId",
                "tenantId",
                "vcores"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureSqlManagedDatabase resources.\n",
                "properties": {
                    "administratorLogin": {
                        "type": "string",
                        "description": "The administrator login name for the new server. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "administratorLoginPassword": {
                        "type": "string",
                        "description": "The password associated with the `administrator_login` user. Needs to comply with Azure's Password Policy\n",
                        "secret": true
                    },
                    "collation": {
                        "type": "string"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The fully qualified domain name of the sql managed instance.\n"
                    },
                    "minimumTlsVersion": {
                        "type": "string",
                        "description": "The Minimum TLS Version for all SQL managed Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SQL Managed Instance. This needs to be globally unique within Azure.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicDataEndpointEnabled": {
                        "type": "boolean",
                        "description": "Is the public data endpoint enabled? Default value is `false`.\n"
                    },
                    "skuName": {
                        "type": "string",
                        "description": "Specifies the SKU Name for the SQL Managed Instance. Valid values include `GP_Gen4`, `GP_Gen5`, `BC_Gen4`, `BC_Gen5`. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageSizeInGb": {
                        "type": "integer",
                        "description": "Maximum storage space for your instance. It should be a multiple of 32GB.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The subnet resource id that the SQL Managed Instance will be associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure sql managed database will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "vcores": {
                        "type": "integer",
                        "description": "Number of cores that should be assigned to your instance. Values can be `8`, `16`, or `24` if `sku_name` is `GP_Gen4`, or `8`, `16`, `24`, `32`, or `40` if `sku_name` is `GP_Gen5`\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureSqlVirtualNetworkRule:AzureSqlVirtualNetworkRule": {
            "description": "`duplocloud.AzureSqlVirtualNetworkRule` allows you to add, update, or remove an Azure SQL server to a subnet of a virtual network.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst sqlVnetRule = new duplocloud.AzureSqlVirtualNetworkRule(\"sql_vnet_rule\", {\n    tenantId: myapp.tenantId,\n    name: \"test-rule\",\n    serverName: \"test-server\",\n    subnetId: \"/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\",\n    ignoreMissingVnetServiceEndpoint: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nsql_vnet_rule = duplocloud.AzureSqlVirtualNetworkRule(\"sql_vnet_rule\",\n    tenant_id=myapp.tenant_id,\n    name=\"test-rule\",\n    server_name=\"test-server\",\n    subnet_id=\"/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\",\n    ignore_missing_vnet_service_endpoint=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var sqlVnetRule = new Duplocloud.AzureSqlVirtualNetworkRule(\"sql_vnet_rule\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"test-rule\",\n        ServerName = \"test-server\",\n        SubnetId = \"/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\",\n        IgnoreMissingVnetServiceEndpoint = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureSqlVirtualNetworkRule(ctx, \"sql_vnet_rule\", \u0026duplocloud.AzureSqlVirtualNetworkRuleArgs{\n\t\t\tTenantId:                         myapp.TenantId,\n\t\t\tName:                             pulumi.String(\"test-rule\"),\n\t\t\tServerName:                       pulumi.String(\"test-server\"),\n\t\t\tSubnetId:                         pulumi.String(\"/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\"),\n\t\t\tIgnoreMissingVnetServiceEndpoint: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureSqlVirtualNetworkRule;\nimport com.pulumi.duplocloud.AzureSqlVirtualNetworkRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var sqlVnetRule = new AzureSqlVirtualNetworkRule(\"sqlVnetRule\", AzureSqlVirtualNetworkRuleArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"test-rule\")\n            .serverName(\"test-server\")\n            .subnetId(\"/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\")\n            .ignoreMissingVnetServiceEndpoint(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  sqlVnetRule:\n    type: duplocloud:AzureSqlVirtualNetworkRule\n    name: sql_vnet_rule\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: test-rule\n      serverName: test-server\n      subnetId: /subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default\n      ignoreMissingVnetServiceEndpoint: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure SQL server Vnet Rule\n\n - *TENANT_ID* is the tenant GUID\n\n - *SERVER_NAME* is the name of the Azure Sql server\n\n - *RULE_NAME* is the name of the Azure Sql server Vnet Rule\n\n```sh\n$ pulumi import duplocloud:index/azureSqlVirtualNetworkRule:AzureSqlVirtualNetworkRule sql_vnet_rule *TENANT_ID*/*SERVER_NAME*/*RULE_NAME*\n```\n\n",
            "properties": {
                "azureId": {
                    "type": "string",
                    "description": "The ID of the SQL virtual network rule.\n"
                },
                "ignoreMissingVnetServiceEndpoint": {
                    "type": "boolean",
                    "description": "Create the virtual network rule before the subnet has the virtual network service endpoint enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SQL virtual network rule.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "The name of the SQL Server to which this SQL virtual network rule will be applied to.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet that the SQL server will be connected to.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the sql virtual network rule will be created in.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "required": [
                "azureId",
                "ignoreMissingVnetServiceEndpoint",
                "name",
                "serverName",
                "subnetId",
                "tenantId"
            ],
            "inputProperties": {
                "ignoreMissingVnetServiceEndpoint": {
                    "type": "boolean",
                    "description": "Create the virtual network rule before the subnet has the virtual network service endpoint enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SQL virtual network rule.\n",
                    "willReplaceOnChanges": true
                },
                "serverName": {
                    "type": "string",
                    "description": "The name of the SQL Server to which this SQL virtual network rule will be applied to.\n",
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet that the SQL server will be connected to.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the sql virtual network rule will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "serverName",
                "subnetId",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureSqlVirtualNetworkRule resources.\n",
                "properties": {
                    "azureId": {
                        "type": "string",
                        "description": "The ID of the SQL virtual network rule.\n"
                    },
                    "ignoreMissingVnetServiceEndpoint": {
                        "type": "boolean",
                        "description": "Create the virtual network rule before the subnet has the virtual network service endpoint enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SQL virtual network rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverName": {
                        "type": "string",
                        "description": "The name of the SQL Server to which this SQL virtual network rule will be applied to.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of the subnet that the SQL server will be connected to.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the sql virtual network rule will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureStorageAccount:AzureStorageAccount": {
            "description": "`duplocloud.AzureStorageAccount` manages an Azure storage account in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst myappAzureStorageAccount = new duplocloud.AzureStorageAccount(\"myapp\", {\n    tenantId: myapp.tenantId,\n    name: \"storagacctest\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmyapp_azure_storage_account = duplocloud.AzureStorageAccount(\"myapp\",\n    tenant_id=myapp.tenant_id,\n    name=\"storagacctest\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var myappAzureStorageAccount = new Duplocloud.AzureStorageAccount(\"myapp\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"storagacctest\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureStorageAccount(ctx, \"myapp\", \u0026duplocloud.AzureStorageAccountArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tName:     pulumi.String(\"storagacctest\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureStorageAccount;\nimport com.pulumi.duplocloud.AzureStorageAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var myappAzureStorageAccount = new AzureStorageAccount(\"myappAzureStorageAccount\", AzureStorageAccountArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"storagacctest\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  myappAzureStorageAccount:\n    type: duplocloud:AzureStorageAccount\n    name: myapp\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: storagacctest\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure storage account\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the Azure storage account\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureStorageAccount:AzureStorageAccount mystorageaccount *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the storage account will be created in.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until azure storage account to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "required": [
                "name",
                "tenantId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the storage account will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until azure storage account to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureStorageAccount resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the storage account will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until azure storage account to be ready, after creation. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureStorageShareFile:AzureStorageShareFile": {
            "description": "`duplocloud.AzureStorageShareFile` manages an Azure storage share file in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst shareFile = new duplocloud.AzureStorageShareFile(\"share_file\", {\n    tenantId: myapp.tenantId,\n    name: \"test-share-file\",\n    storageAccountName: \"test-st-account\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nshare_file = duplocloud.AzureStorageShareFile(\"share_file\",\n    tenant_id=myapp.tenant_id,\n    name=\"test-share-file\",\n    storage_account_name=\"test-st-account\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var shareFile = new Duplocloud.AzureStorageShareFile(\"share_file\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"test-share-file\",\n        StorageAccountName = \"test-st-account\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureStorageShareFile(ctx, \"share_file\", \u0026duplocloud.AzureStorageShareFileArgs{\n\t\t\tTenantId:           myapp.TenantId,\n\t\t\tName:               pulumi.String(\"test-share-file\"),\n\t\t\tStorageAccountName: pulumi.String(\"test-st-account\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureStorageShareFile;\nimport com.pulumi.duplocloud.AzureStorageShareFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var shareFile = new AzureStorageShareFile(\"shareFile\", AzureStorageShareFileArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"test-share-file\")\n            .storageAccountName(\"test-st-account\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  shareFile:\n    type: duplocloud:AzureStorageShareFile\n    name: share_file\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: test-share-file\n      storageAccountName: test-st-account\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure storage account share file\n\n - *TENANT_ID* is the tenant GUID\n\n - *STORAGE_ACCOUNT_NAME* is the name of the Azure storage account\n\n - *NAME* is the name of the share file\n\n```sh\n$ pulumi import duplocloud:index/azureStorageShareFile:AzureStorageShareFile share_file *TENANT_ID*/*STORAGE_ACCOUNT_NAME*/*NAME*\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name (or path) of the File that should be created within this File Share. Changing this forces a new resource to be created.\n"
                },
                "storageAccountName": {
                    "type": "string",
                    "description": "Specifies the storage account in which to create the share. Changing this forces a new resource to be created.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure storage account share file will be created in.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the File Share.\n"
                }
            },
            "required": [
                "name",
                "storageAccountName",
                "tenantId",
                "url"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name (or path) of the File that should be created within this File Share. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "storageAccountName": {
                    "type": "string",
                    "description": "Specifies the storage account in which to create the share. Changing this forces a new resource to be created.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure storage account share file will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "storageAccountName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureStorageShareFile resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name (or path) of the File that should be created within this File Share. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageAccountName": {
                        "type": "string",
                        "description": "Specifies the storage account in which to create the share. Changing this forces a new resource to be created.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure storage account share file will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the File Share.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureStorageclassBlob:AzureStorageclassBlob": {
            "description": "`duplocloud.AzureStorageclassBlob` manages an Azure storage class blob in Duplo.\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Blob. Changing this forces a new resource to be created.\n"
                },
                "storageAccountName": {
                    "type": "string",
                    "description": "Specifies the storage class in which to create the blob. Changing this forces a new resource to be created.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure storage class blob will be created in.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Blob.\n"
                }
            },
            "required": [
                "name",
                "storageAccountName",
                "tenantId",
                "url"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Blob. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "storageAccountName": {
                    "type": "string",
                    "description": "Specifies the storage class in which to create the blob. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure storage class blob will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "storageAccountName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureStorageclassBlob resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Blob. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageAccountName": {
                        "type": "string",
                        "description": "Specifies the storage class in which to create the blob. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure storage class blob will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the Blob.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureStorageclassQueue:AzureStorageclassQueue": {
            "description": "`duplocloud.AzureStorageclassQueue` manages an Azure storage class queue in Duplo.\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Queue. Changing this forces a new resource to be created.\n"
                },
                "storageAccountName": {
                    "type": "string",
                    "description": "Specifies the storage class in which to create the queue. Changing this forces a new resource to be created.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure storage class queue will be created in.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Queue.\n"
                }
            },
            "required": [
                "name",
                "storageAccountName",
                "tenantId",
                "url"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Queue. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "storageAccountName": {
                    "type": "string",
                    "description": "Specifies the storage class in which to create the queue. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure storage class queue will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "storageAccountName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureStorageclassQueue resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Queue. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageAccountName": {
                        "type": "string",
                        "description": "Specifies the storage class in which to create the queue. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure storage class queue will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the Queue.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureStorageclassTable:AzureStorageclassTable": {
            "description": "`duplocloud.AzureStorageclassTable` manages an Azure storage class table in Duplo.\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Table. Changing this forces a new resource to be created.\n"
                },
                "storageAccountName": {
                    "type": "string",
                    "description": "Specifies the storage class in which to create the table. Changing this forces a new resource to be created.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure storage class table will be created in.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Table.\n"
                }
            },
            "required": [
                "name",
                "storageAccountName",
                "tenantId",
                "url"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Table. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "storageAccountName": {
                    "type": "string",
                    "description": "Specifies the storage class in which to create the table. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure storage class table will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "storageAccountName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureStorageclassTable resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Table. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageAccountName": {
                        "type": "string",
                        "description": "Specifies the storage class in which to create the table. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure storage class table will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the Table.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureTenantKeyVault:AzureTenantKeyVault": {
            "description": "`duplocloud.AzureTenantKeyVault` manages a azure Key Vault in DuploCloud.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"test\",\n    planId: \"test\",\n});\nconst kv = new duplocloud.AzureTenantKeyVault(\"kv\", {\n    tenantId: tenant.tenantId,\n    name: \"tst-kv001\",\n    skuName: \"standard\",\n    purgeProtectionEnabled: true,\n    softDeleteRetentionDays: 90,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"test\",\n    plan_id=\"test\")\nkv = duplocloud.AzureTenantKeyVault(\"kv\",\n    tenant_id=tenant.tenant_id,\n    name=\"tst-kv001\",\n    sku_name=\"standard\",\n    purge_protection_enabled=True,\n    soft_delete_retention_days=90)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"test\",\n        PlanId = \"test\",\n    });\n\n    var kv = new Duplocloud.AzureTenantKeyVault(\"kv\", new()\n    {\n        TenantId = tenant.TenantId,\n        Name = \"tst-kv001\",\n        SkuName = \"standard\",\n        PurgeProtectionEnabled = true,\n        SoftDeleteRetentionDays = 90,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenant, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"test\"),\n\t\t\tPlanId:      pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureTenantKeyVault(ctx, \"kv\", \u0026duplocloud.AzureTenantKeyVaultArgs{\n\t\t\tTenantId:                tenant.TenantId,\n\t\t\tName:                    pulumi.String(\"tst-kv001\"),\n\t\t\tSkuName:                 pulumi.String(\"standard\"),\n\t\t\tPurgeProtectionEnabled:  pulumi.Bool(true),\n\t\t\tSoftDeleteRetentionDays: pulumi.Int(90),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureTenantKeyVault;\nimport com.pulumi.duplocloud.AzureTenantKeyVaultArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"test\")\n            .planId(\"test\")\n            .build());\n\n        var kv = new AzureTenantKeyVault(\"kv\", AzureTenantKeyVaultArgs.builder()\n            .tenantId(tenant.tenantId())\n            .name(\"tst-kv001\")\n            .skuName(\"standard\")\n            .purgeProtectionEnabled(true)\n            .softDeleteRetentionDays(90)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: test\n      planId: test\n  kv:\n    type: duplocloud:AzureTenantKeyVault\n    properties:\n      tenantId: ${tenant.tenantId}\n      name: tst-kv001\n      skuName: standard\n      purgeProtectionEnabled: true\n      softDeleteRetentionDays: 90\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Tenant Key Vault\n\n - *TENANT_ID* is the tenant GUID\n\n - *VAULT_NAME* is the short name of the Azure Tenant Key Vault\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureTenantKeyVault:AzureTenantKeyVault kv *TENANT_ID*/*VAULT_NAME*\n```\n\n",
            "properties": {
                "azureId": {
                    "type": "string",
                    "description": "The azure ID of the Key Vault.\n"
                },
                "enabledForDiskEncryption": {
                    "type": "boolean",
                    "description": "Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Key Vault.\n"
                },
                "purgeProtectionEnabled": {
                    "type": "boolean",
                    "description": "Is Purge Protection enabled for this Key Vault?\n"
                },
                "skuName": {
                    "type": "string",
                    "description": "The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.\n"
                },
                "softDeleteRetentionDays": {
                    "type": "integer",
                    "description": "The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days. Defaults to `90`.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the DuploCloud tenant that the key vault will be created in.\n"
                },
                "vaultUri": {
                    "type": "string",
                    "description": "The URI of the Key Vault, used for performing operations on keys and secrets.\n"
                }
            },
            "required": [
                "azureId",
                "enabledForDiskEncryption",
                "name",
                "purgeProtectionEnabled",
                "skuName",
                "tenantId",
                "vaultUri"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Key Vault.\n",
                    "willReplaceOnChanges": true
                },
                "purgeProtectionEnabled": {
                    "type": "boolean",
                    "description": "Is Purge Protection enabled for this Key Vault?\n"
                },
                "skuName": {
                    "type": "string",
                    "description": "The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.\n"
                },
                "softDeleteRetentionDays": {
                    "type": "integer",
                    "description": "The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days. Defaults to `90`.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the DuploCloud tenant that the key vault will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "skuName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureTenantKeyVault resources.\n",
                "properties": {
                    "azureId": {
                        "type": "string",
                        "description": "The azure ID of the Key Vault.\n"
                    },
                    "enabledForDiskEncryption": {
                        "type": "boolean",
                        "description": "Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the Key Vault.\n",
                        "willReplaceOnChanges": true
                    },
                    "purgeProtectionEnabled": {
                        "type": "boolean",
                        "description": "Is Purge Protection enabled for this Key Vault?\n"
                    },
                    "skuName": {
                        "type": "string",
                        "description": "The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.\n"
                    },
                    "softDeleteRetentionDays": {
                        "type": "integer",
                        "description": "The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days. Defaults to `90`.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the DuploCloud tenant that the key vault will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "vaultUri": {
                        "type": "string",
                        "description": "The URI of the Key Vault, used for performing operations on keys and secrets.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureTenantKeyVaultSecret:AzureTenantKeyVaultSecret": {
            "description": "`duplocloud.AzureTenantKeyVaultSecret` manages a azure Key Vault secret in DuploCloud.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"test\",\n    planId: \"test\",\n});\nconst kv = new duplocloud.AzureTenantKeyVault(\"kv\", {\n    tenantId: tenant.tenantId,\n    name: \"tst-kv001\",\n    skuName: \"standard\",\n    purgeProtectionEnabled: true,\n    softDeleteRetentionDays: 90,\n});\nconst kvSecret = new duplocloud.AzureTenantKeyVaultSecret(\"kv_secret\", {\n    tenantId: tenant.tenantId,\n    vaultName: kv.name,\n    name: \"Sec001\",\n    value: \"SecVal001\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"test\",\n    plan_id=\"test\")\nkv = duplocloud.AzureTenantKeyVault(\"kv\",\n    tenant_id=tenant.tenant_id,\n    name=\"tst-kv001\",\n    sku_name=\"standard\",\n    purge_protection_enabled=True,\n    soft_delete_retention_days=90)\nkv_secret = duplocloud.AzureTenantKeyVaultSecret(\"kv_secret\",\n    tenant_id=tenant.tenant_id,\n    vault_name=kv.name,\n    name=\"Sec001\",\n    value=\"SecVal001\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"test\",\n        PlanId = \"test\",\n    });\n\n    var kv = new Duplocloud.AzureTenantKeyVault(\"kv\", new()\n    {\n        TenantId = tenant.TenantId,\n        Name = \"tst-kv001\",\n        SkuName = \"standard\",\n        PurgeProtectionEnabled = true,\n        SoftDeleteRetentionDays = 90,\n    });\n\n    var kvSecret = new Duplocloud.AzureTenantKeyVaultSecret(\"kv_secret\", new()\n    {\n        TenantId = tenant.TenantId,\n        VaultName = kv.Name,\n        Name = \"Sec001\",\n        Value = \"SecVal001\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenant, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"test\"),\n\t\t\tPlanId:      pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tkv, err := duplocloud.NewAzureTenantKeyVault(ctx, \"kv\", \u0026duplocloud.AzureTenantKeyVaultArgs{\n\t\t\tTenantId:                tenant.TenantId,\n\t\t\tName:                    pulumi.String(\"tst-kv001\"),\n\t\t\tSkuName:                 pulumi.String(\"standard\"),\n\t\t\tPurgeProtectionEnabled:  pulumi.Bool(true),\n\t\t\tSoftDeleteRetentionDays: pulumi.Int(90),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureTenantKeyVaultSecret(ctx, \"kv_secret\", \u0026duplocloud.AzureTenantKeyVaultSecretArgs{\n\t\t\tTenantId:  tenant.TenantId,\n\t\t\tVaultName: kv.Name,\n\t\t\tName:      pulumi.String(\"Sec001\"),\n\t\t\tValue:     pulumi.String(\"SecVal001\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureTenantKeyVault;\nimport com.pulumi.duplocloud.AzureTenantKeyVaultArgs;\nimport com.pulumi.duplocloud.AzureTenantKeyVaultSecret;\nimport com.pulumi.duplocloud.AzureTenantKeyVaultSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"test\")\n            .planId(\"test\")\n            .build());\n\n        var kv = new AzureTenantKeyVault(\"kv\", AzureTenantKeyVaultArgs.builder()\n            .tenantId(tenant.tenantId())\n            .name(\"tst-kv001\")\n            .skuName(\"standard\")\n            .purgeProtectionEnabled(true)\n            .softDeleteRetentionDays(90)\n            .build());\n\n        var kvSecret = new AzureTenantKeyVaultSecret(\"kvSecret\", AzureTenantKeyVaultSecretArgs.builder()\n            .tenantId(tenant.tenantId())\n            .vaultName(kv.name())\n            .name(\"Sec001\")\n            .value(\"SecVal001\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: test\n      planId: test\n  kv:\n    type: duplocloud:AzureTenantKeyVault\n    properties:\n      tenantId: ${tenant.tenantId}\n      name: tst-kv001\n      skuName: standard\n      purgeProtectionEnabled: true\n      softDeleteRetentionDays: 90\n  kvSecret:\n    type: duplocloud:AzureTenantKeyVaultSecret\n    name: kv_secret\n    properties:\n      tenantId: ${tenant.tenantId}\n      vaultName: ${kv.name}\n      name: Sec001\n      value: SecVal001\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Key Vault Secret\n\n - *TENANT_ID* is the tenant GUID\n\n - *VAULT_NAME* is the name of the Azure Key Vault\n\n - *SECRET_NAME* is the name of the Azure Key Vault Secret\n\n```sh\n$ pulumi import duplocloud:index/azureTenantKeyVaultSecret:AzureTenantKeyVaultSecret kv_secret *TENANT_ID*/*VAULT_NAME*/*SECRET_NAME*\n```\n\n",
            "properties": {
                "azureId": {
                    "type": "string",
                    "description": "The azure ID of the Key Vault secret.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "Specifies the content type for the Key Vault Secret.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Key Vault Secret.\n"
                },
                "recoveryLevel": {
                    "type": "string",
                    "description": "Reflects the deletion recovery level currently in effect for secrets in the current vault.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the DuploCloud tenant that the key vault secret will be created in.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Specifies the value of the Key Vault Secret. Changing this will create a new version of the Key Vault Secret.\n"
                },
                "vaultBaseUrl": {
                    "type": "string",
                    "description": "Base URL of the Azure Key Vault\n"
                },
                "vaultName": {
                    "type": "string",
                    "description": "Name of the Key Vault where the Secret should be created.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The current version of the Key Vault Secret.\n"
                }
            },
            "required": [
                "azureId",
                "contentType",
                "name",
                "recoveryLevel",
                "tenantId",
                "value",
                "vaultBaseUrl",
                "vaultName",
                "version"
            ],
            "inputProperties": {
                "contentType": {
                    "type": "string",
                    "description": "Specifies the content type for the Key Vault Secret.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Key Vault Secret.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the DuploCloud tenant that the key vault secret will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Specifies the value of the Key Vault Secret. Changing this will create a new version of the Key Vault Secret.\n",
                    "willReplaceOnChanges": true
                },
                "vaultName": {
                    "type": "string",
                    "description": "Name of the Key Vault where the Secret should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId",
                "value",
                "vaultName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureTenantKeyVaultSecret resources.\n",
                "properties": {
                    "azureId": {
                        "type": "string",
                        "description": "The azure ID of the Key Vault secret.\n"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "Specifies the content type for the Key Vault Secret.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the Key Vault Secret.\n",
                        "willReplaceOnChanges": true
                    },
                    "recoveryLevel": {
                        "type": "string",
                        "description": "Reflects the deletion recovery level currently in effect for secrets in the current vault.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the DuploCloud tenant that the key vault secret will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "Specifies the value of the Key Vault Secret. Changing this will create a new version of the Key Vault Secret.\n",
                        "willReplaceOnChanges": true
                    },
                    "vaultBaseUrl": {
                        "type": "string",
                        "description": "Base URL of the Azure Key Vault\n"
                    },
                    "vaultName": {
                        "type": "string",
                        "description": "Name of the Key Vault where the Secret should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "The current version of the Key Vault Secret.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureVaultBackupPolicy:AzureVaultBackupPolicy": {
            "description": "`duplocloud.AzureVaultBackupPolicy` manages a Vault Backup Policy in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst backupPolicy = new duplocloud.AzureVaultBackupPolicy(\"backup_policy\", {\n    infraName: \"test-infra\",\n    name: \"rt01\",\n    timezone: \"UTC\",\n    backup: {\n        frequency: \"Daily\",\n        time: \"23:00\",\n    },\n    retentionDaily: {\n        count: 10,\n    },\n    retentionWeekly: {\n        count: 42,\n        weekdays: [\n            \"Sunday\",\n            \"Wednesday\",\n            \"Friday\",\n            \"Saturday\",\n        ],\n    },\n    retentionMonthly: {\n        count: 7,\n        weekdays: [\n            \"Sunday\",\n            \"Wednesday\",\n        ],\n        weeks: [\n            \"First\",\n            \"Last\",\n        ],\n    },\n    retentionYearly: {\n        count: 77,\n        weekdays: [\"Sunday\"],\n        weeks: [\"Last\"],\n        months: [\"January\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nbackup_policy = duplocloud.AzureVaultBackupPolicy(\"backup_policy\",\n    infra_name=\"test-infra\",\n    name=\"rt01\",\n    timezone=\"UTC\",\n    backup={\n        \"frequency\": \"Daily\",\n        \"time\": \"23:00\",\n    },\n    retention_daily={\n        \"count\": 10,\n    },\n    retention_weekly={\n        \"count\": 42,\n        \"weekdays\": [\n            \"Sunday\",\n            \"Wednesday\",\n            \"Friday\",\n            \"Saturday\",\n        ],\n    },\n    retention_monthly={\n        \"count\": 7,\n        \"weekdays\": [\n            \"Sunday\",\n            \"Wednesday\",\n        ],\n        \"weeks\": [\n            \"First\",\n            \"Last\",\n        ],\n    },\n    retention_yearly={\n        \"count\": 77,\n        \"weekdays\": [\"Sunday\"],\n        \"weeks\": [\"Last\"],\n        \"months\": [\"January\"],\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backupPolicy = new Duplocloud.AzureVaultBackupPolicy(\"backup_policy\", new()\n    {\n        InfraName = \"test-infra\",\n        Name = \"rt01\",\n        Timezone = \"UTC\",\n        Backup = new Duplocloud.Inputs.AzureVaultBackupPolicyBackupArgs\n        {\n            Frequency = \"Daily\",\n            Time = \"23:00\",\n        },\n        RetentionDaily = new Duplocloud.Inputs.AzureVaultBackupPolicyRetentionDailyArgs\n        {\n            Count = 10,\n        },\n        RetentionWeekly = new Duplocloud.Inputs.AzureVaultBackupPolicyRetentionWeeklyArgs\n        {\n            Count = 42,\n            Weekdays = new[]\n            {\n                \"Sunday\",\n                \"Wednesday\",\n                \"Friday\",\n                \"Saturday\",\n            },\n        },\n        RetentionMonthly = new Duplocloud.Inputs.AzureVaultBackupPolicyRetentionMonthlyArgs\n        {\n            Count = 7,\n            Weekdays = new[]\n            {\n                \"Sunday\",\n                \"Wednesday\",\n            },\n            Weeks = new[]\n            {\n                \"First\",\n                \"Last\",\n            },\n        },\n        RetentionYearly = new Duplocloud.Inputs.AzureVaultBackupPolicyRetentionYearlyArgs\n        {\n            Count = 77,\n            Weekdays = new[]\n            {\n                \"Sunday\",\n            },\n            Weeks = new[]\n            {\n                \"Last\",\n            },\n            Months = new[]\n            {\n                \"January\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewAzureVaultBackupPolicy(ctx, \"backup_policy\", \u0026duplocloud.AzureVaultBackupPolicyArgs{\n\t\t\tInfraName: pulumi.String(\"test-infra\"),\n\t\t\tName:      pulumi.String(\"rt01\"),\n\t\t\tTimezone:  pulumi.String(\"UTC\"),\n\t\t\tBackup: \u0026duplocloud.AzureVaultBackupPolicyBackupArgs{\n\t\t\t\tFrequency: pulumi.String(\"Daily\"),\n\t\t\t\tTime:      pulumi.String(\"23:00\"),\n\t\t\t},\n\t\t\tRetentionDaily: \u0026duplocloud.AzureVaultBackupPolicyRetentionDailyArgs{\n\t\t\t\tCount: pulumi.Int(10),\n\t\t\t},\n\t\t\tRetentionWeekly: \u0026duplocloud.AzureVaultBackupPolicyRetentionWeeklyArgs{\n\t\t\t\tCount: pulumi.Int(42),\n\t\t\t\tWeekdays: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"Sunday\"),\n\t\t\t\t\tpulumi.String(\"Wednesday\"),\n\t\t\t\t\tpulumi.String(\"Friday\"),\n\t\t\t\t\tpulumi.String(\"Saturday\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRetentionMonthly: \u0026duplocloud.AzureVaultBackupPolicyRetentionMonthlyArgs{\n\t\t\t\tCount: pulumi.Int(7),\n\t\t\t\tWeekdays: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"Sunday\"),\n\t\t\t\t\tpulumi.String(\"Wednesday\"),\n\t\t\t\t},\n\t\t\t\tWeeks: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"First\"),\n\t\t\t\t\tpulumi.String(\"Last\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRetentionYearly: \u0026duplocloud.AzureVaultBackupPolicyRetentionYearlyArgs{\n\t\t\t\tCount: pulumi.Int(77),\n\t\t\t\tWeekdays: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"Sunday\"),\n\t\t\t\t},\n\t\t\t\tWeeks: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"Last\"),\n\t\t\t\t},\n\t\t\t\tMonths: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"January\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.AzureVaultBackupPolicy;\nimport com.pulumi.duplocloud.AzureVaultBackupPolicyArgs;\nimport com.pulumi.duplocloud.inputs.AzureVaultBackupPolicyBackupArgs;\nimport com.pulumi.duplocloud.inputs.AzureVaultBackupPolicyRetentionDailyArgs;\nimport com.pulumi.duplocloud.inputs.AzureVaultBackupPolicyRetentionWeeklyArgs;\nimport com.pulumi.duplocloud.inputs.AzureVaultBackupPolicyRetentionMonthlyArgs;\nimport com.pulumi.duplocloud.inputs.AzureVaultBackupPolicyRetentionYearlyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backupPolicy = new AzureVaultBackupPolicy(\"backupPolicy\", AzureVaultBackupPolicyArgs.builder()\n            .infraName(\"test-infra\")\n            .name(\"rt01\")\n            .timezone(\"UTC\")\n            .backup(AzureVaultBackupPolicyBackupArgs.builder()\n                .frequency(\"Daily\")\n                .time(\"23:00\")\n                .build())\n            .retentionDaily(AzureVaultBackupPolicyRetentionDailyArgs.builder()\n                .count(10)\n                .build())\n            .retentionWeekly(AzureVaultBackupPolicyRetentionWeeklyArgs.builder()\n                .count(42)\n                .weekdays(                \n                    \"Sunday\",\n                    \"Wednesday\",\n                    \"Friday\",\n                    \"Saturday\")\n                .build())\n            .retentionMonthly(AzureVaultBackupPolicyRetentionMonthlyArgs.builder()\n                .count(7)\n                .weekdays(                \n                    \"Sunday\",\n                    \"Wednesday\")\n                .weeks(                \n                    \"First\",\n                    \"Last\")\n                .build())\n            .retentionYearly(AzureVaultBackupPolicyRetentionYearlyArgs.builder()\n                .count(77)\n                .weekdays(\"Sunday\")\n                .weeks(\"Last\")\n                .months(\"January\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backupPolicy:\n    type: duplocloud:AzureVaultBackupPolicy\n    name: backup_policy\n    properties:\n      infraName: test-infra\n      name: rt01\n      timezone: UTC\n      backup:\n        frequency: Daily\n        time: 23:00\n      retentionDaily:\n        count: 10\n      retentionWeekly:\n        count: 42\n        weekdays:\n          - Sunday\n          - Wednesday\n          - Friday\n          - Saturday\n      retentionMonthly:\n        count: 7\n        weekdays:\n          - Sunday\n          - Wednesday\n        weeks:\n          - First\n          - Last\n      retentionYearly:\n        count: 77\n        weekdays:\n          - Sunday\n        weeks:\n          - Last\n        months:\n          - January\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Vault Backup Policy\n\n - *INFRA_NAME* is the Duplo infra name.\n\n - *NAME* is the name of the Azure Vault Backup Policy\n\n```sh\n$ pulumi import duplocloud:index/azureVaultBackupPolicy:AzureVaultBackupPolicy backup_policy *INFRA_NAME*/*NAME*\n```\n\n",
            "properties": {
                "azureId": {
                    "type": "string",
                    "description": "Azure id for vault backup policy.\n"
                },
                "backup": {
                    "$ref": "#/types/duplocloud:index/AzureVaultBackupPolicyBackup:AzureVaultBackupPolicyBackup"
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure.  Infrastructure names are globally unique and less than 13 characters.\n"
                },
                "instantRestoreRetentionDays": {
                    "type": "integer",
                    "description": "Specifies the instant restore retention range in days.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the vault backup policy.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "Type of the Backup Policy. Defaults to `V1`.\n"
                },
                "retentionDaily": {
                    "$ref": "#/types/duplocloud:index/AzureVaultBackupPolicyRetentionDaily:AzureVaultBackupPolicyRetentionDaily"
                },
                "retentionMonthly": {
                    "$ref": "#/types/duplocloud:index/AzureVaultBackupPolicyRetentionMonthly:AzureVaultBackupPolicyRetentionMonthly"
                },
                "retentionWeekly": {
                    "$ref": "#/types/duplocloud:index/AzureVaultBackupPolicyRetentionWeekly:AzureVaultBackupPolicyRetentionWeekly"
                },
                "retentionYearly": {
                    "$ref": "#/types/duplocloud:index/AzureVaultBackupPolicyRetentionYearly:AzureVaultBackupPolicyRetentionYearly"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the timezone. Defaults to `UTC`.\n"
                }
            },
            "required": [
                "azureId",
                "backup",
                "infraName",
                "instantRestoreRetentionDays",
                "name"
            ],
            "inputProperties": {
                "backup": {
                    "$ref": "#/types/duplocloud:index/AzureVaultBackupPolicyBackup:AzureVaultBackupPolicyBackup"
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure.  Infrastructure names are globally unique and less than 13 characters.\n",
                    "willReplaceOnChanges": true
                },
                "instantRestoreRetentionDays": {
                    "type": "integer",
                    "description": "Specifies the instant restore retention range in days.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the vault backup policy.\n",
                    "willReplaceOnChanges": true
                },
                "policyType": {
                    "type": "string",
                    "description": "Type of the Backup Policy. Defaults to `V1`.\n",
                    "willReplaceOnChanges": true
                },
                "retentionDaily": {
                    "$ref": "#/types/duplocloud:index/AzureVaultBackupPolicyRetentionDaily:AzureVaultBackupPolicyRetentionDaily"
                },
                "retentionMonthly": {
                    "$ref": "#/types/duplocloud:index/AzureVaultBackupPolicyRetentionMonthly:AzureVaultBackupPolicyRetentionMonthly"
                },
                "retentionWeekly": {
                    "$ref": "#/types/duplocloud:index/AzureVaultBackupPolicyRetentionWeekly:AzureVaultBackupPolicyRetentionWeekly"
                },
                "retentionYearly": {
                    "$ref": "#/types/duplocloud:index/AzureVaultBackupPolicyRetentionYearly:AzureVaultBackupPolicyRetentionYearly"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the timezone. Defaults to `UTC`.\n"
                }
            },
            "requiredInputs": [
                "backup",
                "infraName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureVaultBackupPolicy resources.\n",
                "properties": {
                    "azureId": {
                        "type": "string",
                        "description": "Azure id for vault backup policy.\n"
                    },
                    "backup": {
                        "$ref": "#/types/duplocloud:index/AzureVaultBackupPolicyBackup:AzureVaultBackupPolicyBackup"
                    },
                    "infraName": {
                        "type": "string",
                        "description": "The name of the infrastructure.  Infrastructure names are globally unique and less than 13 characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "instantRestoreRetentionDays": {
                        "type": "integer",
                        "description": "Specifies the instant restore retention range in days.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the vault backup policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "policyType": {
                        "type": "string",
                        "description": "Type of the Backup Policy. Defaults to `V1`.\n",
                        "willReplaceOnChanges": true
                    },
                    "retentionDaily": {
                        "$ref": "#/types/duplocloud:index/AzureVaultBackupPolicyRetentionDaily:AzureVaultBackupPolicyRetentionDaily"
                    },
                    "retentionMonthly": {
                        "$ref": "#/types/duplocloud:index/AzureVaultBackupPolicyRetentionMonthly:AzureVaultBackupPolicyRetentionMonthly"
                    },
                    "retentionWeekly": {
                        "$ref": "#/types/duplocloud:index/AzureVaultBackupPolicyRetentionWeekly:AzureVaultBackupPolicyRetentionWeekly"
                    },
                    "retentionYearly": {
                        "$ref": "#/types/duplocloud:index/AzureVaultBackupPolicyRetentionYearly:AzureVaultBackupPolicyRetentionYearly"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Specifies the timezone. Defaults to `UTC`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureVirtualMachine:AzureVirtualMachine": {
            "description": "`duplocloud.AzureVirtualMachine` manages an Azure virtual machine in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst azVm = new duplocloud.AzureVirtualMachine(\"az_vm\", {\n    tenantId: myapp.tenantId,\n    friendlyName: \"test-vm\",\n    imageId: \"16.04-LTS;Canonical;UbuntuServer\",\n    capacity: \"Standard_D2s_v3\",\n    agentPlatform: 0,\n    adminUsername: \"azureuser\",\n    adminPassword: \"Root!12345\",\n    diskSizeGb: 50,\n    subnetId: \"duploinfra-default\",\n    minionTags: [{\n        key: \"AllocationTags\",\n        value: \"test-host\",\n    }],\n    tags: [\n        {\n            key: \"CreatedBy\",\n            value: \"duplo\",\n        },\n        {\n            key: \"Owner\",\n            value: \"duplo\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\naz_vm = duplocloud.AzureVirtualMachine(\"az_vm\",\n    tenant_id=myapp.tenant_id,\n    friendly_name=\"test-vm\",\n    image_id=\"16.04-LTS;Canonical;UbuntuServer\",\n    capacity=\"Standard_D2s_v3\",\n    agent_platform=0,\n    admin_username=\"azureuser\",\n    admin_password=\"Root!12345\",\n    disk_size_gb=50,\n    subnet_id=\"duploinfra-default\",\n    minion_tags=[{\n        \"key\": \"AllocationTags\",\n        \"value\": \"test-host\",\n    }],\n    tags=[\n        {\n            \"key\": \"CreatedBy\",\n            \"value\": \"duplo\",\n        },\n        {\n            \"key\": \"Owner\",\n            \"value\": \"duplo\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var azVm = new Duplocloud.AzureVirtualMachine(\"az_vm\", new()\n    {\n        TenantId = myapp.TenantId,\n        FriendlyName = \"test-vm\",\n        ImageId = \"16.04-LTS;Canonical;UbuntuServer\",\n        Capacity = \"Standard_D2s_v3\",\n        AgentPlatform = 0,\n        AdminUsername = \"azureuser\",\n        AdminPassword = \"Root!12345\",\n        DiskSizeGb = 50,\n        SubnetId = \"duploinfra-default\",\n        MinionTags = new[]\n        {\n            new Duplocloud.Inputs.AzureVirtualMachineMinionTagArgs\n            {\n                Key = \"AllocationTags\",\n                Value = \"test-host\",\n            },\n        },\n        Tags = new[]\n        {\n            new Duplocloud.Inputs.AzureVirtualMachineTagArgs\n            {\n                Key = \"CreatedBy\",\n                Value = \"duplo\",\n            },\n            new Duplocloud.Inputs.AzureVirtualMachineTagArgs\n            {\n                Key = \"Owner\",\n                Value = \"duplo\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureVirtualMachine(ctx, \"az_vm\", \u0026duplocloud.AzureVirtualMachineArgs{\n\t\t\tTenantId:      myapp.TenantId,\n\t\t\tFriendlyName:  pulumi.String(\"test-vm\"),\n\t\t\tImageId:       pulumi.String(\"16.04-LTS;Canonical;UbuntuServer\"),\n\t\t\tCapacity:      pulumi.String(\"Standard_D2s_v3\"),\n\t\t\tAgentPlatform: pulumi.Int(0),\n\t\t\tAdminUsername: pulumi.String(\"azureuser\"),\n\t\t\tAdminPassword: pulumi.String(\"Root!12345\"),\n\t\t\tDiskSizeGb:    pulumi.Int(50),\n\t\t\tSubnetId:      pulumi.String(\"duploinfra-default\"),\n\t\t\tMinionTags: duplocloud.AzureVirtualMachineMinionTagArray{\n\t\t\t\t\u0026duplocloud.AzureVirtualMachineMinionTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"AllocationTags\"),\n\t\t\t\t\tValue: pulumi.String(\"test-host\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: duplocloud.AzureVirtualMachineTagArray{\n\t\t\t\t\u0026duplocloud.AzureVirtualMachineTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"CreatedBy\"),\n\t\t\t\t\tValue: pulumi.String(\"duplo\"),\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.AzureVirtualMachineTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"Owner\"),\n\t\t\t\t\tValue: pulumi.String(\"duplo\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureVirtualMachine;\nimport com.pulumi.duplocloud.AzureVirtualMachineArgs;\nimport com.pulumi.duplocloud.inputs.AzureVirtualMachineMinionTagArgs;\nimport com.pulumi.duplocloud.inputs.AzureVirtualMachineTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var azVm = new AzureVirtualMachine(\"azVm\", AzureVirtualMachineArgs.builder()\n            .tenantId(myapp.tenantId())\n            .friendlyName(\"test-vm\")\n            .imageId(\"16.04-LTS;Canonical;UbuntuServer\")\n            .capacity(\"Standard_D2s_v3\")\n            .agentPlatform(0)\n            .adminUsername(\"azureuser\")\n            .adminPassword(\"Root!12345\")\n            .diskSizeGb(50)\n            .subnetId(\"duploinfra-default\")\n            .minionTags(AzureVirtualMachineMinionTagArgs.builder()\n                .key(\"AllocationTags\")\n                .value(\"test-host\")\n                .build())\n            .tags(            \n                AzureVirtualMachineTagArgs.builder()\n                    .key(\"CreatedBy\")\n                    .value(\"duplo\")\n                    .build(),\n                AzureVirtualMachineTagArgs.builder()\n                    .key(\"Owner\")\n                    .value(\"duplo\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  azVm:\n    type: duplocloud:AzureVirtualMachine\n    name: az_vm\n    properties:\n      tenantId: ${myapp.tenantId}\n      friendlyName: test-vm\n      imageId: 16.04-LTS;Canonical;UbuntuServer\n      capacity: Standard_D2s_v3\n      agentPlatform: 0 # Duplo native container agent\n      adminUsername: azureuser\n      adminPassword: Root!12345\n      diskSizeGb: 50\n      subnetId: duploinfra-default\n      minionTags:\n        - key: AllocationTags\n          value: test-host\n      tags:\n        - key: CreatedBy\n          value: duplo\n        - key: Owner\n          value: duplo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Virtual Machine\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the Azure Virtual Machine\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureVirtualMachine:AzureVirtualMachine myvm *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "adDomainType": {
                    "type": "string",
                    "description": "Specify domain service provided by Microsoft Azure for managing identities and access in the cloud. Valid values are `aadjoin` or `addsjoin`.\n"
                },
                "adminPassword": {
                    "type": "string",
                    "description": "The password associated with the local administrator account.\n",
                    "secret": true
                },
                "adminUsername": {
                    "type": "string",
                    "description": "Specifies the name of the local administrator account.\n"
                },
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent pool that this host is added to. Defaults to `0`.\n"
                },
                "allocatedPublicIp": {
                    "type": "boolean",
                    "description": "Whether or not to allocate a public IP. Defaults to `false`.\n"
                },
                "availabilitySetId": {
                    "type": "string",
                    "description": "Specify availability set id to which virtual machine should be added to\n"
                },
                "base64UserData": {
                    "type": "string",
                    "description": "Base64 encoded user data to associated with the host.\n"
                },
                "capacity": {
                    "type": "string",
                    "description": "Specifies the [size of the Virtual Machine](https://docs.microsoft.com/azure/virtual-machines/sizes-general). See also [Azure VM Naming Conventions](https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions).\n"
                },
                "diskControlType": {
                    "type": "string",
                    "description": "disk control types refer to the different levels of management and performance control provided for disks attached to virtual machines (VMs)\n"
                },
                "diskSizeGb": {
                    "type": "integer",
                    "description": "Specifies the size of the OS Disk in gigabytes Defaults to `128`.\n"
                },
                "enableEncryptAtHost": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "enableLogAnalytics": {
                    "type": "boolean",
                    "description": "Enable log analytics on virtual machine. Defaults to `false`.\n"
                },
                "enableSecurityBoot": {
                    "type": "boolean",
                    "description": "Specify to enable Secure Boot for your VM. Used with security_type=TrustedLaunch Defaults to `true`.\n"
                },
                "enableVtpm": {
                    "type": "boolean",
                    "description": "Specify to enable virtual Trusted Platform Module (vTPM) for Azure VM. Used with security_type=TrustedLaunch Defaults to `true`.\n"
                },
                "encryptDisk": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "friendlyName": {
                    "type": "string",
                    "description": "The short name of the host.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the host.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The Image ID to use to create virtual machine. Provide id as semicolon separated string with sequence of sku, publisher and offer. For example, 16.04-LTS;Canonical;UbuntuServe\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The Azure Virtual Machine ID of the host.\n"
                },
                "isMinion": {
                    "type": "boolean"
                },
                "joinDomain": {
                    "type": "boolean",
                    "description": "Join a Windows Server virtual machine to an Azure Active Directory Domain Services. Defaults to `false`.\n"
                },
                "minionTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineMinionTag:AzureVirtualMachineMinionTag"
                    },
                    "description": "A map of tags to assign to the resource. Example - `AllocationTags` can be passed as tag key with any value.\n"
                },
                "osDiskType": {
                    "type": "string",
                    "description": "Specifies the type of managed disk to create. Possible values are either `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_ZRS` or `UltraSSD_LRS`.\n"
                },
                "securityType": {
                    "type": "string",
                    "description": "Specify \"Standard\" or \"TrustedLaunch\" security type. Defaults to \"Standard\".\n\t\tUse TrustedLaunch for the security of \"Generation 2\" virtual machines (VMs).\n\t\t[Supported Sizes](https://learn.microsoft.com/en-us/azure/virtual-machines/trusted-launch#virtual-machines-sizes)\n\t\t Defaults to `Standard`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the host.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet ID which should be associated with the Virtual Machine.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineTag:AzureVirtualMachineTag"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the host will be created in.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).\n"
                },
                "userAccount": {
                    "type": "string",
                    "description": "The name of the tenant that the host will be created in.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineVolume:AzureVirtualMachineVolume"
                    }
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until azure virtual machine to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "required": [
                "adDomainType",
                "adminUsername",
                "availabilitySetId",
                "base64UserData",
                "capacity",
                "diskControlType",
                "friendlyName",
                "fullname",
                "imageId",
                "instanceId",
                "isMinion",
                "minionTags",
                "osDiskType",
                "status",
                "subnetId",
                "tags",
                "tenantId",
                "userAccount"
            ],
            "inputProperties": {
                "adDomainType": {
                    "type": "string",
                    "description": "Specify domain service provided by Microsoft Azure for managing identities and access in the cloud. Valid values are `aadjoin` or `addsjoin`.\n"
                },
                "adminPassword": {
                    "type": "string",
                    "description": "The password associated with the local administrator account.\n",
                    "secret": true
                },
                "adminUsername": {
                    "type": "string",
                    "description": "Specifies the name of the local administrator account.\n"
                },
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent pool that this host is added to. Defaults to `0`.\n"
                },
                "allocatedPublicIp": {
                    "type": "boolean",
                    "description": "Whether or not to allocate a public IP. Defaults to `false`.\n"
                },
                "availabilitySetId": {
                    "type": "string",
                    "description": "Specify availability set id to which virtual machine should be added to\n",
                    "willReplaceOnChanges": true
                },
                "base64UserData": {
                    "type": "string",
                    "description": "Base64 encoded user data to associated with the host.\n",
                    "willReplaceOnChanges": true
                },
                "capacity": {
                    "type": "string",
                    "description": "Specifies the [size of the Virtual Machine](https://docs.microsoft.com/azure/virtual-machines/sizes-general). See also [Azure VM Naming Conventions](https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions).\n"
                },
                "diskControlType": {
                    "type": "string",
                    "description": "disk control types refer to the different levels of management and performance control provided for disks attached to virtual machines (VMs)\n"
                },
                "diskSizeGb": {
                    "type": "integer",
                    "description": "Specifies the size of the OS Disk in gigabytes Defaults to `128`.\n"
                },
                "enableEncryptAtHost": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "enableLogAnalytics": {
                    "type": "boolean",
                    "description": "Enable log analytics on virtual machine. Defaults to `false`.\n"
                },
                "enableSecurityBoot": {
                    "type": "boolean",
                    "description": "Specify to enable Secure Boot for your VM. Used with security_type=TrustedLaunch Defaults to `true`.\n"
                },
                "enableVtpm": {
                    "type": "boolean",
                    "description": "Specify to enable virtual Trusted Platform Module (vTPM) for Azure VM. Used with security_type=TrustedLaunch Defaults to `true`.\n"
                },
                "encryptDisk": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "friendlyName": {
                    "type": "string",
                    "description": "The short name of the host.\n",
                    "willReplaceOnChanges": true
                },
                "imageId": {
                    "type": "string",
                    "description": "The Image ID to use to create virtual machine. Provide id as semicolon separated string with sequence of sku, publisher and offer. For example, 16.04-LTS;Canonical;UbuntuServe\n",
                    "willReplaceOnChanges": true
                },
                "isMinion": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "joinDomain": {
                    "type": "boolean",
                    "description": "Join a Windows Server virtual machine to an Azure Active Directory Domain Services. Defaults to `false`.\n"
                },
                "minionTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineMinionTag:AzureVirtualMachineMinionTag"
                    },
                    "description": "A map of tags to assign to the resource. Example - `AllocationTags` can be passed as tag key with any value.\n"
                },
                "osDiskType": {
                    "type": "string",
                    "description": "Specifies the type of managed disk to create. Possible values are either `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_ZRS` or `UltraSSD_LRS`.\n"
                },
                "securityType": {
                    "type": "string",
                    "description": "Specify \"Standard\" or \"TrustedLaunch\" security type. Defaults to \"Standard\".\n\t\tUse TrustedLaunch for the security of \"Generation 2\" virtual machines (VMs).\n\t\t[Supported Sizes](https://learn.microsoft.com/en-us/azure/virtual-machines/trusted-launch#virtual-machines-sizes)\n\t\t Defaults to `Standard`.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet ID which should be associated with the Virtual Machine.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineTag:AzureVirtualMachineTag"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the host will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).\n",
                    "willReplaceOnChanges": true
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineVolume:AzureVirtualMachineVolume"
                    },
                    "willReplaceOnChanges": true
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until azure virtual machine to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "adminUsername",
                "capacity",
                "friendlyName",
                "imageId",
                "subnetId",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureVirtualMachine resources.\n",
                "properties": {
                    "adDomainType": {
                        "type": "string",
                        "description": "Specify domain service provided by Microsoft Azure for managing identities and access in the cloud. Valid values are `aadjoin` or `addsjoin`.\n"
                    },
                    "adminPassword": {
                        "type": "string",
                        "description": "The password associated with the local administrator account.\n",
                        "secret": true
                    },
                    "adminUsername": {
                        "type": "string",
                        "description": "Specifies the name of the local administrator account.\n"
                    },
                    "agentPlatform": {
                        "type": "integer",
                        "description": "The numeric ID of the container agent pool that this host is added to. Defaults to `0`.\n"
                    },
                    "allocatedPublicIp": {
                        "type": "boolean",
                        "description": "Whether or not to allocate a public IP. Defaults to `false`.\n"
                    },
                    "availabilitySetId": {
                        "type": "string",
                        "description": "Specify availability set id to which virtual machine should be added to\n",
                        "willReplaceOnChanges": true
                    },
                    "base64UserData": {
                        "type": "string",
                        "description": "Base64 encoded user data to associated with the host.\n",
                        "willReplaceOnChanges": true
                    },
                    "capacity": {
                        "type": "string",
                        "description": "Specifies the [size of the Virtual Machine](https://docs.microsoft.com/azure/virtual-machines/sizes-general). See also [Azure VM Naming Conventions](https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions).\n"
                    },
                    "diskControlType": {
                        "type": "string",
                        "description": "disk control types refer to the different levels of management and performance control provided for disks attached to virtual machines (VMs)\n"
                    },
                    "diskSizeGb": {
                        "type": "integer",
                        "description": "Specifies the size of the OS Disk in gigabytes Defaults to `128`.\n"
                    },
                    "enableEncryptAtHost": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "enableLogAnalytics": {
                        "type": "boolean",
                        "description": "Enable log analytics on virtual machine. Defaults to `false`.\n"
                    },
                    "enableSecurityBoot": {
                        "type": "boolean",
                        "description": "Specify to enable Secure Boot for your VM. Used with security_type=TrustedLaunch Defaults to `true`.\n"
                    },
                    "enableVtpm": {
                        "type": "boolean",
                        "description": "Specify to enable virtual Trusted Platform Module (vTPM) for Azure VM. Used with security_type=TrustedLaunch Defaults to `true`.\n"
                    },
                    "encryptDisk": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "friendlyName": {
                        "type": "string",
                        "description": "The short name of the host.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the host.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The Image ID to use to create virtual machine. Provide id as semicolon separated string with sequence of sku, publisher and offer. For example, 16.04-LTS;Canonical;UbuntuServe\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The Azure Virtual Machine ID of the host.\n"
                    },
                    "isMinion": {
                        "type": "boolean",
                        "willReplaceOnChanges": true
                    },
                    "joinDomain": {
                        "type": "boolean",
                        "description": "Join a Windows Server virtual machine to an Azure Active Directory Domain Services. Defaults to `false`.\n"
                    },
                    "minionTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AzureVirtualMachineMinionTag:AzureVirtualMachineMinionTag"
                        },
                        "description": "A map of tags to assign to the resource. Example - `AllocationTags` can be passed as tag key with any value.\n"
                    },
                    "osDiskType": {
                        "type": "string",
                        "description": "Specifies the type of managed disk to create. Possible values are either `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_ZRS` or `UltraSSD_LRS`.\n"
                    },
                    "securityType": {
                        "type": "string",
                        "description": "Specify \"Standard\" or \"TrustedLaunch\" security type. Defaults to \"Standard\".\n\t\tUse TrustedLaunch for the security of \"Generation 2\" virtual machines (VMs).\n\t\t[Supported Sizes](https://learn.microsoft.com/en-us/azure/virtual-machines/trusted-launch#virtual-machines-sizes)\n\t\t Defaults to `Standard`.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the host.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "Subnet ID which should be associated with the Virtual Machine.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AzureVirtualMachineTag:AzureVirtualMachineTag"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the host will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).\n",
                        "willReplaceOnChanges": true
                    },
                    "userAccount": {
                        "type": "string",
                        "description": "The name of the tenant that the host will be created in.\n"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AzureVirtualMachineVolume:AzureVirtualMachineVolume"
                        },
                        "willReplaceOnChanges": true
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until azure virtual machine to be ready, after creation. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureVirtualMachineScaleSet:AzureVirtualMachineScaleSet": {
            "description": "`duplocloud.AzureVirtualMachineScaleSet` manages an azure virtual machine scale set in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst vmss = new duplocloud.AzureVirtualMachineScaleSet(\"vmss\", {\n    tenantId: myapp.tenantId,\n    name: \"tstvmss\",\n    sku: {\n        tier: \"Standard\",\n        name: \"Standard_D1_v2\",\n        capacity: 2,\n    },\n    osProfile: {\n        adminPassword: \"DuploTest007\",\n        adminUsername: \"duploadmin\",\n        computerNamePrefix: \"tst\",\n    },\n    storageProfileImageReference: {\n        sku: \"2016-Datacenter\",\n        publisher: \"MicrosoftWindowsServer\",\n        offer: \"WindowsServer\",\n        version: \"latest\",\n    },\n    networkProfiles: [{\n        name: \"tstvmss\",\n        primary: true,\n        ipConfigurations: [{\n            name: \"tstvmss\",\n            subnetId: \"/subscriptions/143ffc59-9394-4ec6-8f5a-c408a238be62/resourceGroups/duploinfra-testdb/providers/Microsoft.Network/virtualNetworks/testdb/subnets/duploinfra-sub01\",\n        }],\n        ipForwarding: true,\n    }],\n    upgradePolicyMode: \"Manual\",\n    overprovision: true,\n    singlePlacementGroup: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nvmss = duplocloud.AzureVirtualMachineScaleSet(\"vmss\",\n    tenant_id=myapp.tenant_id,\n    name=\"tstvmss\",\n    sku={\n        \"tier\": \"Standard\",\n        \"name\": \"Standard_D1_v2\",\n        \"capacity\": 2,\n    },\n    os_profile={\n        \"admin_password\": \"DuploTest007\",\n        \"admin_username\": \"duploadmin\",\n        \"computer_name_prefix\": \"tst\",\n    },\n    storage_profile_image_reference={\n        \"sku\": \"2016-Datacenter\",\n        \"publisher\": \"MicrosoftWindowsServer\",\n        \"offer\": \"WindowsServer\",\n        \"version\": \"latest\",\n    },\n    network_profiles=[{\n        \"name\": \"tstvmss\",\n        \"primary\": True,\n        \"ip_configurations\": [{\n            \"name\": \"tstvmss\",\n            \"subnet_id\": \"/subscriptions/143ffc59-9394-4ec6-8f5a-c408a238be62/resourceGroups/duploinfra-testdb/providers/Microsoft.Network/virtualNetworks/testdb/subnets/duploinfra-sub01\",\n        }],\n        \"ip_forwarding\": True,\n    }],\n    upgrade_policy_mode=\"Manual\",\n    overprovision=True,\n    single_placement_group=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var vmss = new Duplocloud.AzureVirtualMachineScaleSet(\"vmss\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"tstvmss\",\n        Sku = new Duplocloud.Inputs.AzureVirtualMachineScaleSetSkuArgs\n        {\n            Tier = \"Standard\",\n            Name = \"Standard_D1_v2\",\n            Capacity = 2,\n        },\n        OsProfile = new Duplocloud.Inputs.AzureVirtualMachineScaleSetOsProfileArgs\n        {\n            AdminPassword = \"DuploTest007\",\n            AdminUsername = \"duploadmin\",\n            ComputerNamePrefix = \"tst\",\n        },\n        StorageProfileImageReference = new Duplocloud.Inputs.AzureVirtualMachineScaleSetStorageProfileImageReferenceArgs\n        {\n            Sku = \"2016-Datacenter\",\n            Publisher = \"MicrosoftWindowsServer\",\n            Offer = \"WindowsServer\",\n            Version = \"latest\",\n        },\n        NetworkProfiles = new[]\n        {\n            new Duplocloud.Inputs.AzureVirtualMachineScaleSetNetworkProfileArgs\n            {\n                Name = \"tstvmss\",\n                Primary = true,\n                IpConfigurations = new[]\n                {\n                    new Duplocloud.Inputs.AzureVirtualMachineScaleSetNetworkProfileIpConfigurationArgs\n                    {\n                        Name = \"tstvmss\",\n                        SubnetId = \"/subscriptions/143ffc59-9394-4ec6-8f5a-c408a238be62/resourceGroups/duploinfra-testdb/providers/Microsoft.Network/virtualNetworks/testdb/subnets/duploinfra-sub01\",\n                    },\n                },\n                IpForwarding = true,\n            },\n        },\n        UpgradePolicyMode = \"Manual\",\n        Overprovision = true,\n        SinglePlacementGroup = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureVirtualMachineScaleSet(ctx, \"vmss\", \u0026duplocloud.AzureVirtualMachineScaleSetArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tName:     pulumi.String(\"tstvmss\"),\n\t\t\tSku: \u0026duplocloud.AzureVirtualMachineScaleSetSkuArgs{\n\t\t\t\tTier:     pulumi.String(\"Standard\"),\n\t\t\t\tName:     pulumi.String(\"Standard_D1_v2\"),\n\t\t\t\tCapacity: pulumi.Int(2),\n\t\t\t},\n\t\t\tOsProfile: \u0026duplocloud.AzureVirtualMachineScaleSetOsProfileArgs{\n\t\t\t\tAdminPassword:      pulumi.String(\"DuploTest007\"),\n\t\t\t\tAdminUsername:      pulumi.String(\"duploadmin\"),\n\t\t\t\tComputerNamePrefix: pulumi.String(\"tst\"),\n\t\t\t},\n\t\t\tStorageProfileImageReference: \u0026duplocloud.AzureVirtualMachineScaleSetStorageProfileImageReferenceArgs{\n\t\t\t\tSku:       pulumi.String(\"2016-Datacenter\"),\n\t\t\t\tPublisher: pulumi.String(\"MicrosoftWindowsServer\"),\n\t\t\t\tOffer:     pulumi.String(\"WindowsServer\"),\n\t\t\t\tVersion:   pulumi.String(\"latest\"),\n\t\t\t},\n\t\t\tNetworkProfiles: duplocloud.AzureVirtualMachineScaleSetNetworkProfileArray{\n\t\t\t\t\u0026duplocloud.AzureVirtualMachineScaleSetNetworkProfileArgs{\n\t\t\t\t\tName:    pulumi.String(\"tstvmss\"),\n\t\t\t\t\tPrimary: pulumi.Bool(true),\n\t\t\t\t\tIpConfigurations: duplocloud.AzureVirtualMachineScaleSetNetworkProfileIpConfigurationArray{\n\t\t\t\t\t\t\u0026duplocloud.AzureVirtualMachineScaleSetNetworkProfileIpConfigurationArgs{\n\t\t\t\t\t\t\tName:     pulumi.String(\"tstvmss\"),\n\t\t\t\t\t\t\tSubnetId: pulumi.String(\"/subscriptions/143ffc59-9394-4ec6-8f5a-c408a238be62/resourceGroups/duploinfra-testdb/providers/Microsoft.Network/virtualNetworks/testdb/subnets/duploinfra-sub01\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tIpForwarding: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tUpgradePolicyMode:    pulumi.String(\"Manual\"),\n\t\t\tOverprovision:        pulumi.Bool(true),\n\t\t\tSinglePlacementGroup: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureVirtualMachineScaleSet;\nimport com.pulumi.duplocloud.AzureVirtualMachineScaleSetArgs;\nimport com.pulumi.duplocloud.inputs.AzureVirtualMachineScaleSetSkuArgs;\nimport com.pulumi.duplocloud.inputs.AzureVirtualMachineScaleSetOsProfileArgs;\nimport com.pulumi.duplocloud.inputs.AzureVirtualMachineScaleSetStorageProfileImageReferenceArgs;\nimport com.pulumi.duplocloud.inputs.AzureVirtualMachineScaleSetNetworkProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var vmss = new AzureVirtualMachineScaleSet(\"vmss\", AzureVirtualMachineScaleSetArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"tstvmss\")\n            .sku(AzureVirtualMachineScaleSetSkuArgs.builder()\n                .tier(\"Standard\")\n                .name(\"Standard_D1_v2\")\n                .capacity(2)\n                .build())\n            .osProfile(AzureVirtualMachineScaleSetOsProfileArgs.builder()\n                .adminPassword(\"DuploTest007\")\n                .adminUsername(\"duploadmin\")\n                .computerNamePrefix(\"tst\")\n                .build())\n            .storageProfileImageReference(AzureVirtualMachineScaleSetStorageProfileImageReferenceArgs.builder()\n                .sku(\"2016-Datacenter\")\n                .publisher(\"MicrosoftWindowsServer\")\n                .offer(\"WindowsServer\")\n                .version(\"latest\")\n                .build())\n            .networkProfiles(AzureVirtualMachineScaleSetNetworkProfileArgs.builder()\n                .name(\"tstvmss\")\n                .primary(true)\n                .ipConfigurations(AzureVirtualMachineScaleSetNetworkProfileIpConfigurationArgs.builder()\n                    .name(\"tstvmss\")\n                    .subnetId(\"/subscriptions/143ffc59-9394-4ec6-8f5a-c408a238be62/resourceGroups/duploinfra-testdb/providers/Microsoft.Network/virtualNetworks/testdb/subnets/duploinfra-sub01\")\n                    .build())\n                .ipForwarding(true)\n                .build())\n            .upgradePolicyMode(\"Manual\")\n            .overprovision(true)\n            .singlePlacementGroup(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  vmss:\n    type: duplocloud:AzureVirtualMachineScaleSet\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: tstvmss\n      sku:\n        tier: Standard\n        name: Standard_D1_v2\n        capacity: 2\n      osProfile:\n        adminPassword: DuploTest007\n        adminUsername: duploadmin\n        computerNamePrefix: tst\n      storageProfileImageReference:\n        sku: 2016-Datacenter\n        publisher: MicrosoftWindowsServer\n        offer: WindowsServer\n        version: latest\n      networkProfiles:\n        - name: tstvmss\n          primary: true\n          ipConfigurations:\n            - name: tstvmss\n              subnetId: /subscriptions/143ffc59-9394-4ec6-8f5a-c408a238be62/resourceGroups/duploinfra-testdb/providers/Microsoft.Network/virtualNetworks/testdb/subnets/duploinfra-sub01\n          ipForwarding: true\n      upgradePolicyMode: Manual\n      overprovision: true\n      singlePlacementGroup: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Virtual Machine Scale Set\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the Azure Virtual Machine Scale Set\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureVirtualMachineScaleSet:AzureVirtualMachineScaleSet myvmss *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent pool that this VM is added to. Defaults to `0`.\n"
                },
                "allocationTags": {
                    "type": "string"
                },
                "automaticOsUpgrade": {
                    "type": "boolean",
                    "description": "Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgrade_policy_mode` is set to `Rolling`. Defaults to `false`.\n"
                },
                "bootDiagnostics": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetBootDiagnostics:AzureVirtualMachineScaleSetBootDiagnostics"
                },
                "evictionPolicy": {
                    "type": "string",
                    "description": "Specifies the eviction policy for Virtual Machines in this Scale Set.\n"
                },
                "extensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetExtension:AzureVirtualMachineScaleSetExtension"
                    }
                },
                "healthProbeId": {
                    "type": "string",
                    "description": "Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgrade_policy_mode`\n"
                },
                "identity": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetIdentity:AzureVirtualMachineScaleSetIdentity"
                },
                "isMinion": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "licenseType": {
                    "type": "string",
                    "description": "Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.\n"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the virtual machine scale set resource.\n"
                },
                "networkProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetNetworkProfile:AzureVirtualMachineScaleSetNetworkProfile"
                    }
                },
                "osProfile": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfile:AzureVirtualMachineScaleSetOsProfile"
                },
                "osProfileLinuxConfig": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfileLinuxConfig:AzureVirtualMachineScaleSetOsProfileLinuxConfig"
                },
                "osProfileSecrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfileSecret:AzureVirtualMachineScaleSetOsProfileSecret"
                    }
                },
                "osProfileWindowsConfig": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfileWindowsConfig:AzureVirtualMachineScaleSetOsProfileWindowsConfig"
                },
                "overprovision": {
                    "type": "boolean",
                    "description": "Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.\n"
                },
                "plan": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetPlan:AzureVirtualMachineScaleSetPlan"
                },
                "priority": {
                    "type": "string",
                    "description": "Specifies the priority for the Virtual Machines in the Scale Set. Defaults to `Regular`.\n"
                },
                "proximityPlacementGroupId": {
                    "type": "string",
                    "description": "The ID of the Proximity Placement Group to which this Virtual Machine should be assigned.\n"
                },
                "rollingUpgradePolicy": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetRollingUpgradePolicy:AzureVirtualMachineScaleSetRollingUpgradePolicy"
                },
                "singlePlacementGroup": {
                    "type": "boolean",
                    "description": "Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Defaults to `true`.\n"
                },
                "sku": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetSku:AzureVirtualMachineScaleSetSku"
                },
                "storageProfileDataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetStorageProfileDataDisk:AzureVirtualMachineScaleSetStorageProfileDataDisk"
                    }
                },
                "storageProfileImageReference": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetStorageProfileImageReference:AzureVirtualMachineScaleSetStorageProfileImageReference"
                },
                "storageProfileOsDisk": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetStorageProfileOsDisk:AzureVirtualMachineScaleSetStorageProfileOsDisk"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure virtual machine scale set will be created in.\n"
                },
                "upgradePolicyMode": {
                    "type": "string",
                    "description": "Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing Rolling, you will need to set a health probe.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until virtual machine scale set to be ready, after creation. Defaults to `true`.\n"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "identity",
                "licenseType",
                "location",
                "name",
                "networkProfiles",
                "osProfile",
                "osProfileLinuxConfig",
                "osProfileWindowsConfig",
                "sku",
                "storageProfileImageReference",
                "storageProfileOsDisk",
                "tenantId",
                "upgradePolicyMode"
            ],
            "inputProperties": {
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent pool that this VM is added to. Defaults to `0`.\n",
                    "willReplaceOnChanges": true
                },
                "allocationTags": {
                    "type": "string"
                },
                "automaticOsUpgrade": {
                    "type": "boolean",
                    "description": "Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgrade_policy_mode` is set to `Rolling`. Defaults to `false`.\n"
                },
                "bootDiagnostics": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetBootDiagnostics:AzureVirtualMachineScaleSetBootDiagnostics"
                },
                "evictionPolicy": {
                    "type": "string",
                    "description": "Specifies the eviction policy for Virtual Machines in this Scale Set.\n",
                    "willReplaceOnChanges": true
                },
                "extensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetExtension:AzureVirtualMachineScaleSetExtension"
                    }
                },
                "healthProbeId": {
                    "type": "string",
                    "description": "Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgrade_policy_mode`\n"
                },
                "identity": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetIdentity:AzureVirtualMachineScaleSetIdentity"
                },
                "isMinion": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "licenseType": {
                    "type": "string",
                    "description": "Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the virtual machine scale set resource.\n",
                    "willReplaceOnChanges": true
                },
                "networkProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetNetworkProfile:AzureVirtualMachineScaleSetNetworkProfile"
                    }
                },
                "osProfile": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfile:AzureVirtualMachineScaleSetOsProfile"
                },
                "osProfileLinuxConfig": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfileLinuxConfig:AzureVirtualMachineScaleSetOsProfileLinuxConfig"
                },
                "osProfileSecrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfileSecret:AzureVirtualMachineScaleSetOsProfileSecret"
                    }
                },
                "osProfileWindowsConfig": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfileWindowsConfig:AzureVirtualMachineScaleSetOsProfileWindowsConfig"
                },
                "overprovision": {
                    "type": "boolean",
                    "description": "Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.\n"
                },
                "plan": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetPlan:AzureVirtualMachineScaleSetPlan"
                },
                "priority": {
                    "type": "string",
                    "description": "Specifies the priority for the Virtual Machines in the Scale Set. Defaults to `Regular`.\n",
                    "willReplaceOnChanges": true
                },
                "proximityPlacementGroupId": {
                    "type": "string",
                    "description": "The ID of the Proximity Placement Group to which this Virtual Machine should be assigned.\n",
                    "willReplaceOnChanges": true
                },
                "rollingUpgradePolicy": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetRollingUpgradePolicy:AzureVirtualMachineScaleSetRollingUpgradePolicy"
                },
                "singlePlacementGroup": {
                    "type": "boolean",
                    "description": "Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Defaults to `true`.\n",
                    "willReplaceOnChanges": true
                },
                "sku": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetSku:AzureVirtualMachineScaleSetSku"
                },
                "storageProfileDataDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetStorageProfileDataDisk:AzureVirtualMachineScaleSetStorageProfileDataDisk"
                    }
                },
                "storageProfileImageReference": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetStorageProfileImageReference:AzureVirtualMachineScaleSetStorageProfileImageReference"
                },
                "storageProfileOsDisk": {
                    "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetStorageProfileOsDisk:AzureVirtualMachineScaleSetStorageProfileOsDisk"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure virtual machine scale set will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "upgradePolicyMode": {
                    "type": "string",
                    "description": "Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing Rolling, you will need to set a health probe.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until virtual machine scale set to be ready, after creation. Defaults to `true`.\n"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "networkProfiles",
                "osProfile",
                "sku",
                "tenantId",
                "upgradePolicyMode"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureVirtualMachineScaleSet resources.\n",
                "properties": {
                    "agentPlatform": {
                        "type": "integer",
                        "description": "The numeric ID of the container agent pool that this VM is added to. Defaults to `0`.\n",
                        "willReplaceOnChanges": true
                    },
                    "allocationTags": {
                        "type": "string"
                    },
                    "automaticOsUpgrade": {
                        "type": "boolean",
                        "description": "Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgrade_policy_mode` is set to `Rolling`. Defaults to `false`.\n"
                    },
                    "bootDiagnostics": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetBootDiagnostics:AzureVirtualMachineScaleSetBootDiagnostics"
                    },
                    "evictionPolicy": {
                        "type": "string",
                        "description": "Specifies the eviction policy for Virtual Machines in this Scale Set.\n",
                        "willReplaceOnChanges": true
                    },
                    "extensions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetExtension:AzureVirtualMachineScaleSetExtension"
                        }
                    },
                    "healthProbeId": {
                        "type": "string",
                        "description": "Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgrade_policy_mode`\n"
                    },
                    "identity": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetIdentity:AzureVirtualMachineScaleSetIdentity"
                    },
                    "isMinion": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "licenseType": {
                        "type": "string",
                        "description": "Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.\n"
                    },
                    "location": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the virtual machine scale set resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetNetworkProfile:AzureVirtualMachineScaleSetNetworkProfile"
                        }
                    },
                    "osProfile": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfile:AzureVirtualMachineScaleSetOsProfile"
                    },
                    "osProfileLinuxConfig": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfileLinuxConfig:AzureVirtualMachineScaleSetOsProfileLinuxConfig"
                    },
                    "osProfileSecrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfileSecret:AzureVirtualMachineScaleSetOsProfileSecret"
                        }
                    },
                    "osProfileWindowsConfig": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetOsProfileWindowsConfig:AzureVirtualMachineScaleSetOsProfileWindowsConfig"
                    },
                    "overprovision": {
                        "type": "boolean",
                        "description": "Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.\n"
                    },
                    "plan": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetPlan:AzureVirtualMachineScaleSetPlan"
                    },
                    "priority": {
                        "type": "string",
                        "description": "Specifies the priority for the Virtual Machines in the Scale Set. Defaults to `Regular`.\n",
                        "willReplaceOnChanges": true
                    },
                    "proximityPlacementGroupId": {
                        "type": "string",
                        "description": "The ID of the Proximity Placement Group to which this Virtual Machine should be assigned.\n",
                        "willReplaceOnChanges": true
                    },
                    "rollingUpgradePolicy": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetRollingUpgradePolicy:AzureVirtualMachineScaleSetRollingUpgradePolicy"
                    },
                    "singlePlacementGroup": {
                        "type": "boolean",
                        "description": "Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Defaults to `true`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sku": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetSku:AzureVirtualMachineScaleSetSku"
                    },
                    "storageProfileDataDisks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetStorageProfileDataDisk:AzureVirtualMachineScaleSetStorageProfileDataDisk"
                        }
                    },
                    "storageProfileImageReference": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetStorageProfileImageReference:AzureVirtualMachineScaleSetStorageProfileImageReference"
                    },
                    "storageProfileOsDisk": {
                        "$ref": "#/types/duplocloud:index/AzureVirtualMachineScaleSetStorageProfileOsDisk:AzureVirtualMachineScaleSetStorageProfileOsDisk"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure virtual machine scale set will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "upgradePolicyMode": {
                        "type": "string",
                        "description": "Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing Rolling, you will need to set a health probe.\n"
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until virtual machine scale set to be ready, after creation. Defaults to `true`.\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureVmFeature:AzureVmFeature": {
            "description": "`duplocloud.AzureVmFeature` manages an Azure VM Feature in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\n// supported feature names are \"loganalytics\", \"publicip\", \"addsjoin\", and \"aadjoin\"\nconst vmFeature = new duplocloud.AzureVmFeature(\"vm_feature\", {\n    tenantId: myapp.tenantId,\n    componentId: \"p01-host01\",\n    featureName: \"aadjoin\",\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\n# supported feature names are \"loganalytics\", \"publicip\", \"addsjoin\", and \"aadjoin\"\nvm_feature = duplocloud.AzureVmFeature(\"vm_feature\",\n    tenant_id=myapp.tenant_id,\n    component_id=\"p01-host01\",\n    feature_name=\"aadjoin\",\n    enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    // supported feature names are \"loganalytics\", \"publicip\", \"addsjoin\", and \"aadjoin\"\n    var vmFeature = new Duplocloud.AzureVmFeature(\"vm_feature\", new()\n    {\n        TenantId = myapp.TenantId,\n        ComponentId = \"p01-host01\",\n        FeatureName = \"aadjoin\",\n        Enabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// supported feature names are \"loganalytics\", \"publicip\", \"addsjoin\", and \"aadjoin\"\n\t\t_, err = duplocloud.NewAzureVmFeature(ctx, \"vm_feature\", \u0026duplocloud.AzureVmFeatureArgs{\n\t\t\tTenantId:    myapp.TenantId,\n\t\t\tComponentId: pulumi.String(\"p01-host01\"),\n\t\t\tFeatureName: pulumi.String(\"aadjoin\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureVmFeature;\nimport com.pulumi.duplocloud.AzureVmFeatureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        // supported feature names are \"loganalytics\", \"publicip\", \"addsjoin\", and \"aadjoin\"\n        var vmFeature = new AzureVmFeature(\"vmFeature\", AzureVmFeatureArgs.builder()\n            .tenantId(myapp.tenantId())\n            .componentId(\"p01-host01\")\n            .featureName(\"aadjoin\")\n            .enabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  # supported feature names are \"loganalytics\", \"publicip\", \"addsjoin\", and \"aadjoin\"\n  vmFeature:\n    type: duplocloud:AzureVmFeature\n    name: vm_feature\n    properties:\n      tenantId: ${myapp.tenantId}\n      componentId: p01-host01\n      featureName: aadjoin\n      enabled: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Virtual Machine Feature\n\n - *TENANT_ID* is the tenant GUID\n\n - *VM_NAME* is the short name of the Azure Virtual Machine\n\n - *FEATURE_NAME* is the short name of the Azure Virtual Machine Feature\n\n#\n\n```sh\n$ pulumi import duplocloud:index/azureVmFeature:AzureVmFeature vm_feature *TENANT_ID*/*VM_NAME*/*FEATURE_NAME*\n```\n\n",
            "properties": {
                "componentId": {
                    "type": "string",
                    "description": "Specifies the name of the VM created in duplo. Changing this forces a new resource to be created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The status of the VM feature. By default, this is set to false.\n"
                },
                "featureName": {
                    "type": "string",
                    "description": "The name of the VM feature to be enabled.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure vm feature will be created in.\n"
                }
            },
            "required": [
                "componentId",
                "enabled",
                "featureName",
                "tenantId"
            ],
            "inputProperties": {
                "componentId": {
                    "type": "string",
                    "description": "Specifies the name of the VM created in duplo. Changing this forces a new resource to be created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The status of the VM feature. By default, this is set to false.\n"
                },
                "featureName": {
                    "type": "string",
                    "description": "The name of the VM feature to be enabled.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure vm feature will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "componentId",
                "enabled",
                "featureName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureVmFeature resources.\n",
                "properties": {
                    "componentId": {
                        "type": "string",
                        "description": "Specifies the name of the VM created in duplo. Changing this forces a new resource to be created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The status of the VM feature. By default, this is set to false.\n"
                    },
                    "featureName": {
                        "type": "string",
                        "description": "The name of the VM feature to be enabled.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure vm feature will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/azureVmMaintenanceConfiguration:AzureVmMaintenanceConfiguration": {
            "description": "`duplocloud.AzureVmMaintenanceConfiguration` manages maintenance window to an azure vm\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst mt = new duplocloud.AzureVmMaintenanceConfiguration(\"mt\", {\n    tenantId: myapp.tenantId,\n    vmName: \"schedl\",\n    window: {\n        startTime: \"2024-11-12 00:00\",\n        expirationTime: \"2024-11-19 00:00\",\n        duration: \"06:00\",\n        recurEvery: \"1Month day1,day2,day3,day4,day5,day6,day7,day8,day9,day10,day11,day12,day13,day14,day15,day16,day17,day18,day19,day20,day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31,day-1\",\n        timeZone: \"India Standard Time\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmt = duplocloud.AzureVmMaintenanceConfiguration(\"mt\",\n    tenant_id=myapp.tenant_id,\n    vm_name=\"schedl\",\n    window={\n        \"start_time\": \"2024-11-12 00:00\",\n        \"expiration_time\": \"2024-11-19 00:00\",\n        \"duration\": \"06:00\",\n        \"recur_every\": \"1Month day1,day2,day3,day4,day5,day6,day7,day8,day9,day10,day11,day12,day13,day14,day15,day16,day17,day18,day19,day20,day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31,day-1\",\n        \"time_zone\": \"India Standard Time\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var mt = new Duplocloud.AzureVmMaintenanceConfiguration(\"mt\", new()\n    {\n        TenantId = myapp.TenantId,\n        VmName = \"schedl\",\n        Window = new Duplocloud.Inputs.AzureVmMaintenanceConfigurationWindowArgs\n        {\n            StartTime = \"2024-11-12 00:00\",\n            ExpirationTime = \"2024-11-19 00:00\",\n            Duration = \"06:00\",\n            RecurEvery = \"1Month day1,day2,day3,day4,day5,day6,day7,day8,day9,day10,day11,day12,day13,day14,day15,day16,day17,day18,day19,day20,day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31,day-1\",\n            TimeZone = \"India Standard Time\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAzureVmMaintenanceConfiguration(ctx, \"mt\", \u0026duplocloud.AzureVmMaintenanceConfigurationArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tVmName:   pulumi.String(\"schedl\"),\n\t\t\tWindow: \u0026duplocloud.AzureVmMaintenanceConfigurationWindowArgs{\n\t\t\t\tStartTime:      pulumi.String(\"2024-11-12 00:00\"),\n\t\t\t\tExpirationTime: pulumi.String(\"2024-11-19 00:00\"),\n\t\t\t\tDuration:       pulumi.String(\"06:00\"),\n\t\t\t\tRecurEvery:     pulumi.String(\"1Month day1,day2,day3,day4,day5,day6,day7,day8,day9,day10,day11,day12,day13,day14,day15,day16,day17,day18,day19,day20,day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31,day-1\"),\n\t\t\t\tTimeZone:       pulumi.String(\"India Standard Time\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.AzureVmMaintenanceConfiguration;\nimport com.pulumi.duplocloud.AzureVmMaintenanceConfigurationArgs;\nimport com.pulumi.duplocloud.inputs.AzureVmMaintenanceConfigurationWindowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var mt = new AzureVmMaintenanceConfiguration(\"mt\", AzureVmMaintenanceConfigurationArgs.builder()\n            .tenantId(myapp.tenantId())\n            .vmName(\"schedl\")\n            .window(AzureVmMaintenanceConfigurationWindowArgs.builder()\n                .startTime(\"2024-11-12 00:00\")\n                .expirationTime(\"2024-11-19 00:00\")\n                .duration(\"06:00\")\n                .recurEvery(\"1Month day1,day2,day3,day4,day5,day6,day7,day8,day9,day10,day11,day12,day13,day14,day15,day16,day17,day18,day19,day20,day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31,day-1\")\n                .timeZone(\"India Standard Time\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  mt:\n    type: duplocloud:AzureVmMaintenanceConfiguration\n    properties:\n      tenantId: ${myapp.tenantId}\n      vmName: schedl\n      window:\n        startTime: 2024-11-12 00:00\n        expirationTime: 2024-11-19 00:00\n        duration: 06:00\n        recurEvery: 1Month day1,day2,day3,day4,day5,day6,day7,day8,day9,day10,day11,day12,day13,day14,day15,day16,day17,day18,day19,day20,day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31,day-1\n        timeZone: India Standard Time\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Azure Virtual Machine Feature\n\n - *TENANT_ID* is the tenant GUID\n\n - *VM_NAME* is the short name of the Azure Virtual Machine\n\n```sh\n$ pulumi import duplocloud:index/azureVmMaintenanceConfiguration:AzureVmMaintenanceConfiguration maintenance *TENANT_ID*/*VM_NAME*/maintenance-configuration\n```\n\n",
            "properties": {
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure vm feature will be created in.\n"
                },
                "visiblity": {
                    "type": "string",
                    "description": "The visibility of the Maintenance Configuration. The only allowable value is Custom. Defaults to `Custom`.\n"
                },
                "vmName": {
                    "type": "string",
                    "description": "The name of the virtual machine where maintenance configuration need to be configured.\n"
                },
                "window": {
                    "$ref": "#/types/duplocloud:index/AzureVmMaintenanceConfigurationWindow:AzureVmMaintenanceConfigurationWindow",
                    "description": "Block to configure maintenance window\n"
                }
            },
            "required": [
                "tenantId",
                "vmName",
                "window"
            ],
            "inputProperties": {
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the azure vm feature will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "visiblity": {
                    "type": "string",
                    "description": "The visibility of the Maintenance Configuration. The only allowable value is Custom. Defaults to `Custom`.\n"
                },
                "vmName": {
                    "type": "string",
                    "description": "The name of the virtual machine where maintenance configuration need to be configured.\n",
                    "willReplaceOnChanges": true
                },
                "window": {
                    "$ref": "#/types/duplocloud:index/AzureVmMaintenanceConfigurationWindow:AzureVmMaintenanceConfigurationWindow",
                    "description": "Block to configure maintenance window\n"
                }
            },
            "requiredInputs": [
                "tenantId",
                "vmName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureVmMaintenanceConfiguration resources.\n",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the azure vm feature will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "visiblity": {
                        "type": "string",
                        "description": "The visibility of the Maintenance Configuration. The only allowable value is Custom. Defaults to `Custom`.\n"
                    },
                    "vmName": {
                        "type": "string",
                        "description": "The name of the virtual machine where maintenance configuration need to be configured.\n",
                        "willReplaceOnChanges": true
                    },
                    "window": {
                        "$ref": "#/types/duplocloud:index/AzureVmMaintenanceConfigurationWindow:AzureVmMaintenanceConfigurationWindow",
                        "description": "Block to configure maintenance window\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/byoh:Byoh": {
            "description": "`duplocloud.Byoh` manages BYOH in Duplo.\n\n## Import\n\nExample: Importing an existing BYOH Instance.\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the name of BYOH Instance.\n\n#\n\n```sh\n$ pulumi import duplocloud:index/byoh:Byoh byoh *TENANT_ID*/*NAME*\n```\n\n",
            "properties": {
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent pool that this instance is added to. Defaults to `0`.\n"
                },
                "allocationTag": {
                    "type": "string",
                    "description": "Allocation tag for BYOH instance.\n"
                },
                "connectionUrl": {
                    "type": "string"
                },
                "directAddress": {
                    "type": "string",
                    "description": "IP address of the BYOH instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the BYOH instance. Changing this forces a new resource to be created.\n"
                },
                "networkAgentUrl": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "Password of the BYOH instance.\n",
                    "secret": true
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private key for BYOH instance.\n",
                    "secret": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/ByohTag:ByohTag"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the BYHO will be created in.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username of the BYOH instance.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until BYOH instance to be connected to the fleet, after creation. Defaults to `false`.\n"
                }
            },
            "required": [
                "allocationTag",
                "connectionUrl",
                "directAddress",
                "name",
                "networkAgentUrl",
                "tags",
                "tenantId"
            ],
            "inputProperties": {
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent pool that this instance is added to. Defaults to `0`.\n",
                    "willReplaceOnChanges": true
                },
                "allocationTag": {
                    "type": "string",
                    "description": "Allocation tag for BYOH instance.\n"
                },
                "directAddress": {
                    "type": "string",
                    "description": "IP address of the BYOH instance.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the BYOH instance. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "Password of the BYOH instance.\n",
                    "secret": true
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private key for BYOH instance.\n",
                    "secret": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the BYHO will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "Username of the BYOH instance.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until BYOH instance to be connected to the fleet, after creation. Defaults to `false`.\n"
                }
            },
            "requiredInputs": [
                "directAddress",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Byoh resources.\n",
                "properties": {
                    "agentPlatform": {
                        "type": "integer",
                        "description": "The numeric ID of the container agent pool that this instance is added to. Defaults to `0`.\n",
                        "willReplaceOnChanges": true
                    },
                    "allocationTag": {
                        "type": "string",
                        "description": "Allocation tag for BYOH instance.\n"
                    },
                    "connectionUrl": {
                        "type": "string"
                    },
                    "directAddress": {
                        "type": "string",
                        "description": "IP address of the BYOH instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the BYOH instance. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkAgentUrl": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password of the BYOH instance.\n",
                        "secret": true
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "Private key for BYOH instance.\n",
                        "secret": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/ByohTag:ByohTag"
                        },
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the BYHO will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "username": {
                        "type": "string",
                        "description": "Username of the BYOH instance.\n"
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until BYOH instance to be connected to the fleet, after creation. Defaults to `false`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/dockerCredentials:DockerCredentials": {
            "description": "`duplocloud.DockerCredentials` manages the docker credentials for the tenant in Duplo.\n\nThis resource allows you take control of docker registry credentials for a specific tenant.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst duplo_app = new duplocloud.Tenant(\"duplo-app\", {\n    accountName: \"duplo-app\",\n    planId: \"default\",\n    allowDeletion: true,\n});\nconst dockerCreds = new duplocloud.DockerCredentials(\"docker_creds\", {\n    tenantId: duplo_app.tenantId,\n    userName: \"myname\",\n    email: \"abc@xyz.com\",\n    password: \"p@assW0rd\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nduplo_app = duplocloud.Tenant(\"duplo-app\",\n    account_name=\"duplo-app\",\n    plan_id=\"default\",\n    allow_deletion=True)\ndocker_creds = duplocloud.DockerCredentials(\"docker_creds\",\n    tenant_id=duplo_app.tenant_id,\n    user_name=\"myname\",\n    email=\"abc@xyz.com\",\n    password=\"p@assW0rd\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var duplo_app = new Duplocloud.Tenant(\"duplo-app\", new()\n    {\n        AccountName = \"duplo-app\",\n        PlanId = \"default\",\n        AllowDeletion = true,\n    });\n\n    var dockerCreds = new Duplocloud.DockerCredentials(\"docker_creds\", new()\n    {\n        TenantId = duplo_app.TenantId,\n        UserName = \"myname\",\n        Email = \"abc@xyz.com\",\n        Password = \"p@assW0rd\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewTenant(ctx, \"duplo-app\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName:   pulumi.String(\"duplo-app\"),\n\t\t\tPlanId:        pulumi.String(\"default\"),\n\t\t\tAllowDeletion: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewDockerCredentials(ctx, \"docker_creds\", \u0026duplocloud.DockerCredentialsArgs{\n\t\t\tTenantId: duplo_app.TenantId,\n\t\t\tUserName: pulumi.String(\"myname\"),\n\t\t\tEmail:    pulumi.String(\"abc@xyz.com\"),\n\t\t\tPassword: pulumi.String(\"p@assW0rd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.DockerCredentials;\nimport com.pulumi.duplocloud.DockerCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var duplo_app = new Tenant(\"duplo-app\", TenantArgs.builder()\n            .accountName(\"duplo-app\")\n            .planId(\"default\")\n            .allowDeletion(true)\n            .build());\n\n        var dockerCreds = new DockerCredentials(\"dockerCreds\", DockerCredentialsArgs.builder()\n            .tenantId(duplo_app.tenantId())\n            .userName(\"myname\")\n            .email(\"abc@xyz.com\")\n            .password(\"p@assW0rd\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  duplo-app:\n    type: duplocloud:Tenant\n    properties:\n      accountName: duplo-app\n      planId: default\n      allowDeletion: true\n  dockerCreds:\n    type: duplocloud:DockerCredentials\n    name: docker_creds\n    properties:\n      tenantId: ${[\"duplo-app\"].tenantId}\n      userName: myname\n      email: abc@xyz.com\n      password: p@assW0rd\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing Docker Credentials\n\n - *TENANT_ID* is the tenant GUID\n\n#\n\n```sh\n$ pulumi import duplocloud:index/dockerCredentials:DockerCredentials myDockerCreds *TENANT_ID*\n```\n\n",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "registry": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the docker credentials will be created in.\n"
                },
                "userName": {
                    "type": "string"
                }
            },
            "required": [
                "email",
                "password",
                "registry",
                "tenantId",
                "userName"
            ],
            "inputProperties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "registry": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the docker credentials will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "email",
                "password",
                "tenantId",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DockerCredentials resources.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "registry": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the docker credentials will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/duploService:DuploService": {
            "description": "## Example Usage\n\n### Deploy NGINX service using DuploCloud Platform's native container agent.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Before creating an NGINX service, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\nconst infra = new duplocloud.Infrastructure(\"infra\", {\n    infraName: \"dev\",\n    cloud: 0,\n    region: \"us-east-1\",\n    enableK8Cluster: false,\n    addressPrefix: \"10.13.0.0/16\",\n});\n// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"dev\",\n    planId: infra.infraName,\n});\n// You will need a DuploCloud host to launch the Duplo service, so create a host using following resource configuration.\nconst image = duplocloud.getNativeHostImageOutput({\n    tenantId: tenant.tenantId,\n    isKubernetes: false,\n});\nconst host = new duplocloud.AwsHost(\"host\", {\n    tenantId: tenant.tenantId,\n    friendlyName: \"host01\",\n    imageId: image.apply(image =\u003e image.imageId),\n    capacity: \"t3a.small\",\n    agentPlatform: 0,\n    zone: 0,\n    userAccount: tenant.accountName,\n    keypairType: 1,\n});\nconst myservice = new duplocloud.DuploService(\"myservice\", {\n    tenantId: tenant.tenantId,\n    name: \"myservice\",\n    agentPlatform: 0,\n    dockerImage: \"nginx:latest\",\n    replicas: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Before creating an NGINX service, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\ninfra = duplocloud.Infrastructure(\"infra\",\n    infra_name=\"dev\",\n    cloud=0,\n    region=\"us-east-1\",\n    enable_k8_cluster=False,\n    address_prefix=\"10.13.0.0/16\")\n# Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"dev\",\n    plan_id=infra.infra_name)\n# You will need a DuploCloud host to launch the Duplo service, so create a host using following resource configuration.\nimage = duplocloud.get_native_host_image_output(tenant_id=tenant.tenant_id,\n    is_kubernetes=False)\nhost = duplocloud.AwsHost(\"host\",\n    tenant_id=tenant.tenant_id,\n    friendly_name=\"host01\",\n    image_id=image.image_id,\n    capacity=\"t3a.small\",\n    agent_platform=0,\n    zone=0,\n    user_account=tenant.account_name,\n    keypair_type=1)\nmyservice = duplocloud.DuploService(\"myservice\",\n    tenant_id=tenant.tenant_id,\n    name=\"myservice\",\n    agent_platform=0,\n    docker_image=\"nginx:latest\",\n    replicas=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Before creating an NGINX service, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\n    var infra = new Duplocloud.Infrastructure(\"infra\", new()\n    {\n        InfraName = \"dev\",\n        Cloud = 0,\n        Region = \"us-east-1\",\n        EnableK8Cluster = false,\n        AddressPrefix = \"10.13.0.0/16\",\n    });\n\n    // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"dev\",\n        PlanId = infra.InfraName,\n    });\n\n    // You will need a DuploCloud host to launch the Duplo service, so create a host using following resource configuration.\n    var image = Duplocloud.GetNativeHostImage.Invoke(new()\n    {\n        TenantId = tenant.TenantId,\n        IsKubernetes = false,\n    });\n\n    var host = new Duplocloud.AwsHost(\"host\", new()\n    {\n        TenantId = tenant.TenantId,\n        FriendlyName = \"host01\",\n        ImageId = image.Apply(getNativeHostImageResult =\u003e getNativeHostImageResult.ImageId),\n        Capacity = \"t3a.small\",\n        AgentPlatform = 0,\n        Zone = 0,\n        UserAccount = tenant.AccountName,\n        KeypairType = 1,\n    });\n\n    var myservice = new Duplocloud.DuploService(\"myservice\", new()\n    {\n        TenantId = tenant.TenantId,\n        Name = \"myservice\",\n        AgentPlatform = 0,\n        DockerImage = \"nginx:latest\",\n        Replicas = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Before creating an NGINX service, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\n\t\tinfra, err := duplocloud.NewInfrastructure(ctx, \"infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"dev\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-east-1\"),\n\t\t\tEnableK8Cluster: pulumi.Bool(false),\n\t\t\tAddressPrefix:   pulumi.String(\"10.13.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n\t\ttenant, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"dev\"),\n\t\t\tPlanId:      infra.InfraName,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// You will need a DuploCloud host to launch the Duplo service, so create a host using following resource configuration.\n\t\timage := duplocloud.GetNativeHostImageOutput(ctx, duplocloud.GetNativeHostImageOutputArgs{\n\t\t\tTenantId:     tenant.TenantId,\n\t\t\tIsKubernetes: pulumi.Bool(false),\n\t\t}, nil)\n\t\t_, err = duplocloud.NewAwsHost(ctx, \"host\", \u0026duplocloud.AwsHostArgs{\n\t\t\tTenantId:     tenant.TenantId,\n\t\t\tFriendlyName: pulumi.String(\"host01\"),\n\t\t\tImageId: pulumi.String(image.ApplyT(func(image duplocloud.GetNativeHostImageResult) (*string, error) {\n\t\t\t\treturn \u0026image.ImageId, nil\n\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t\tCapacity:      pulumi.String(\"t3a.small\"),\n\t\t\tAgentPlatform: pulumi.Int(0),\n\t\t\tZone:          pulumi.Int(0),\n\t\t\tUserAccount:   tenant.AccountName,\n\t\t\tKeypairType:   pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewDuploService(ctx, \"myservice\", \u0026duplocloud.DuploServiceArgs{\n\t\t\tTenantId:      tenant.TenantId,\n\t\t\tName:          pulumi.String(\"myservice\"),\n\t\t\tAgentPlatform: pulumi.Int(0),\n\t\t\tDockerImage:   pulumi.String(\"nginx:latest\"),\n\t\t\tReplicas:      pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetNativeHostImageArgs;\nimport com.pulumi.duplocloud.AwsHost;\nimport com.pulumi.duplocloud.AwsHostArgs;\nimport com.pulumi.duplocloud.DuploService;\nimport com.pulumi.duplocloud.DuploServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Before creating an NGINX service, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\n        var infra = new Infrastructure(\"infra\", InfrastructureArgs.builder()\n            .infraName(\"dev\")\n            .cloud(0)\n            .region(\"us-east-1\")\n            .enableK8Cluster(false)\n            .addressPrefix(\"10.13.0.0/16\")\n            .build());\n\n        // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"dev\")\n            .planId(infra.infraName())\n            .build());\n\n        // You will need a DuploCloud host to launch the Duplo service, so create a host using following resource configuration.\n        final var image = DuplocloudFunctions.getNativeHostImage(GetNativeHostImageArgs.builder()\n            .tenantId(tenant.tenantId())\n            .isKubernetes(false)\n            .build());\n\n        var host = new AwsHost(\"host\", AwsHostArgs.builder()\n            .tenantId(tenant.tenantId())\n            .friendlyName(\"host01\")\n            .imageId(image.applyValue(getNativeHostImageResult -\u003e getNativeHostImageResult).applyValue(image -\u003e image.applyValue(getNativeHostImageResult -\u003e getNativeHostImageResult.imageId())))\n            .capacity(\"t3a.small\")\n            .agentPlatform(0)\n            .zone(0)\n            .userAccount(tenant.accountName())\n            .keypairType(1)\n            .build());\n\n        var myservice = new DuploService(\"myservice\", DuploServiceArgs.builder()\n            .tenantId(tenant.tenantId())\n            .name(\"myservice\")\n            .agentPlatform(0)\n            .dockerImage(\"nginx:latest\")\n            .replicas(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Before creating an NGINX service, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\n  infra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: dev\n      cloud: 0 # AWS Cloud\n      region: us-east-1\n      enableK8Cluster: false # for native container agent\n      addressPrefix: 10.13.0.0/16\n  # Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: dev\n      planId: ${infra.infraName}\n  host:\n    type: duplocloud:AwsHost\n    properties:\n      tenantId: ${tenant.tenantId}\n      friendlyName: host01\n      imageId: ${image.imageId}\n      capacity: t3a.small\n      agentPlatform: 0 # Duplo native container agent\n      zone: 0 # Zone A\n      userAccount: ${tenant.accountName}\n      keypairType: 1\n  myservice:\n    type: duplocloud:DuploService\n    properties:\n      tenantId: ${tenant.tenantId}\n      name: myservice\n      agentPlatform: 0 # Duplo native container agent\n      dockerImage: nginx:latest\n      replicas: 1\nvariables:\n  # You will need a DuploCloud host to launch the Duplo service, so create a host using following resource configuration.\n  image:\n    fn::invoke:\n      function: duplocloud:getNativeHostImage\n      arguments:\n        tenantId: ${tenant.tenantId}\n        isKubernetes: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Deploy NGINX service inside the 'nonprod' tenant using DuploCloud Platform's native container agent with host networking and the environment variables - NGINX_HOST and NGINX_PORT\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Ensure the 'nonprod' tenant is already created before deploying the Nginx duplo service.\nconst tenant = duplocloud.getTenant({\n    name: \"nonprod\",\n});\n// Create a data source to retrieve the Machine Image ID to be used by the host\nconst image = tenant.then(tenant =\u003e duplocloud.getNativeHostImage({\n    tenantId: tenant.id,\n    isKubernetes: false,\n}));\nconst host = new duplocloud.AwsHost(\"host\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    friendlyName: \"host01\",\n    imageId: image.then(image =\u003e image.imageId),\n    capacity: \"t3a.small\",\n    agentPlatform: 0,\n    zone: 0,\n    userAccount: tenant.then(tenant =\u003e tenant.name),\n    keypairType: 1,\n});\n// Create the DuploCloud service\nconst myservice = new duplocloud.DuploService(\"myservice\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"myservice\",\n    agentPlatform: 0,\n    dockerImage: \"nginx:latest\",\n    replicas: 1,\n    extraConfig: JSON.stringify({\n        NGINX_HOST: \"foo\",\n        NGINX_PORT: \"8080\",\n    }),\n    otherDockerHostConfig: JSON.stringify({\n        NetworkMode: \"host\",\n        CapAdd: [\"NET_ADMIN\"],\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_duplocloud as duplocloud\n\n# Ensure the 'nonprod' tenant is already created before deploying the Nginx duplo service.\ntenant = duplocloud.get_tenant(name=\"nonprod\")\n# Create a data source to retrieve the Machine Image ID to be used by the host\nimage = duplocloud.get_native_host_image(tenant_id=tenant.id,\n    is_kubernetes=False)\nhost = duplocloud.AwsHost(\"host\",\n    tenant_id=tenant.id,\n    friendly_name=\"host01\",\n    image_id=image.image_id,\n    capacity=\"t3a.small\",\n    agent_platform=0,\n    zone=0,\n    user_account=tenant.name,\n    keypair_type=1)\n# Create the DuploCloud service\nmyservice = duplocloud.DuploService(\"myservice\",\n    tenant_id=tenant.id,\n    name=\"myservice\",\n    agent_platform=0,\n    docker_image=\"nginx:latest\",\n    replicas=1,\n    extra_config=json.dumps({\n        \"NGINX_HOST\": \"foo\",\n        \"NGINX_PORT\": \"8080\",\n    }),\n    other_docker_host_config=json.dumps({\n        \"NetworkMode\": \"host\",\n        \"CapAdd\": [\"NET_ADMIN\"],\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'nonprod' tenant is already created before deploying the Nginx duplo service.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"nonprod\",\n    });\n\n    // Create a data source to retrieve the Machine Image ID to be used by the host\n    var image = Duplocloud.GetNativeHostImage.Invoke(new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        IsKubernetes = false,\n    });\n\n    var host = new Duplocloud.AwsHost(\"host\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        FriendlyName = \"host01\",\n        ImageId = image.Apply(getNativeHostImageResult =\u003e getNativeHostImageResult.ImageId),\n        Capacity = \"t3a.small\",\n        AgentPlatform = 0,\n        Zone = 0,\n        UserAccount = tenant.Apply(getTenantResult =\u003e getTenantResult.Name),\n        KeypairType = 1,\n    });\n\n    // Create the DuploCloud service\n    var myservice = new Duplocloud.DuploService(\"myservice\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"myservice\",\n        AgentPlatform = 0,\n        DockerImage = \"nginx:latest\",\n        Replicas = 1,\n        ExtraConfig = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"NGINX_HOST\"] = \"foo\",\n            [\"NGINX_PORT\"] = \"8080\",\n        }),\n        OtherDockerHostConfig = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"NetworkMode\"] = \"host\",\n            [\"CapAdd\"] = new[]\n            {\n                \"NET_ADMIN\",\n            },\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'nonprod' tenant is already created before deploying the Nginx duplo service.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"nonprod\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a data source to retrieve the Machine Image ID to be used by the host\n\t\timage, err := duplocloud.GetNativeHostImage(ctx, \u0026duplocloud.GetNativeHostImageArgs{\n\t\t\tTenantId:     tenant.Id,\n\t\t\tIsKubernetes: pulumi.BoolRef(false),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewAwsHost(ctx, \"host\", \u0026duplocloud.AwsHostArgs{\n\t\t\tTenantId:      pulumi.String(tenant.Id),\n\t\t\tFriendlyName:  pulumi.String(\"host01\"),\n\t\t\tImageId:       pulumi.String(image.ImageId),\n\t\t\tCapacity:      pulumi.String(\"t3a.small\"),\n\t\t\tAgentPlatform: pulumi.Int(0),\n\t\t\tZone:          pulumi.Int(0),\n\t\t\tUserAccount:   pulumi.String(tenant.Name),\n\t\t\tKeypairType:   pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"NGINX_HOST\": \"foo\",\n\t\t\t\"NGINX_PORT\": \"8080\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"NetworkMode\": \"host\",\n\t\t\t\"CapAdd\": []string{\n\t\t\t\t\"NET_ADMIN\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t// Create the DuploCloud service\n\t\t_, err = duplocloud.NewDuploService(ctx, \"myservice\", \u0026duplocloud.DuploServiceArgs{\n\t\t\tTenantId:              pulumi.String(tenant.Id),\n\t\t\tName:                  pulumi.String(\"myservice\"),\n\t\t\tAgentPlatform:         pulumi.Int(0),\n\t\t\tDockerImage:           pulumi.String(\"nginx:latest\"),\n\t\t\tReplicas:              pulumi.Int(1),\n\t\t\tExtraConfig:           pulumi.String(json0),\n\t\t\tOtherDockerHostConfig: pulumi.String(json1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.inputs.GetNativeHostImageArgs;\nimport com.pulumi.duplocloud.AwsHost;\nimport com.pulumi.duplocloud.AwsHostArgs;\nimport com.pulumi.duplocloud.DuploService;\nimport com.pulumi.duplocloud.DuploServiceArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'nonprod' tenant is already created before deploying the Nginx duplo service.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"nonprod\")\n            .build());\n\n        // Create a data source to retrieve the Machine Image ID to be used by the host\n        final var image = DuplocloudFunctions.getNativeHostImage(GetNativeHostImageArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .isKubernetes(false)\n            .build());\n\n        var host = new AwsHost(\"host\", AwsHostArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .friendlyName(\"host01\")\n            .imageId(image.applyValue(getNativeHostImageResult -\u003e getNativeHostImageResult.imageId()))\n            .capacity(\"t3a.small\")\n            .agentPlatform(0)\n            .zone(0)\n            .userAccount(tenant.applyValue(getTenantResult -\u003e getTenantResult.name()))\n            .keypairType(1)\n            .build());\n\n        // Create the DuploCloud service\n        var myservice = new DuploService(\"myservice\", DuploServiceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"myservice\")\n            .agentPlatform(0)\n            .dockerImage(\"nginx:latest\")\n            .replicas(1)\n            .extraConfig(serializeJson(\n                jsonObject(\n                    jsonProperty(\"NGINX_HOST\", \"foo\"),\n                    jsonProperty(\"NGINX_PORT\", \"8080\")\n                )))\n            .otherDockerHostConfig(serializeJson(\n                jsonObject(\n                    jsonProperty(\"NetworkMode\", \"host\"),\n                    jsonProperty(\"CapAdd\", jsonArray(\"NET_ADMIN\"))\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  host:\n    type: duplocloud:AwsHost\n    properties:\n      tenantId: ${tenant.id}\n      friendlyName: host01\n      imageId: ${image.imageId}\n      capacity: t3a.small\n      agentPlatform: 0 # Duplo native container agent\n      zone: 0 # Zone A\n      userAccount: ${tenant.name}\n      keypairType: 1\n  # Create the DuploCloud service\n  myservice:\n    type: duplocloud:DuploService\n    properties:\n      tenantId: ${tenant.id}\n      name: myservice\n      agentPlatform: 0 # Duplo native container agent\n      dockerImage: nginx:latest\n      replicas: 1\n      extraConfig:\n        fn::toJSON:\n          NGINX_HOST: foo\n          NGINX_PORT: '8080'\n      otherDockerHostConfig:\n        fn::toJSON:\n          NetworkMode: host\n          CapAdd:\n            - NET_ADMIN\nvariables:\n  # Ensure the 'nonprod' tenant is already created before deploying the Nginx duplo service.\n  tenant: # You will need a DuploCloud host to launch the Duplo service, so create a host\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: nonprod\n  # Create a data source to retrieve the Machine Image ID to be used by the host\n  image:\n    fn::invoke:\n      function: duplocloud:getNativeHostImage\n      arguments:\n        tenantId: ${tenant.id}\n        isKubernetes: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Deploy NGINX service named nginx inside the 'dev' tenant and set the resource requests and limits. Set cpu requests and limits to 200m and 300m respectively and set memory requests and limits to 100Mi and 300Mi respectively\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\n// Assuming that a host already exists in the tenant, create a service\nconst nginx = new duplocloud.DuploService(\"nginx\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"nginx\",\n    agentPlatform: 7,\n    dockerImage: \"nginx:latest\",\n    replicas: 1,\n    otherDockerConfig: JSON.stringify({\n        Resources: {\n            requests: {\n                cpu: \"200m\",\n                memory: \"100Mi\",\n            },\n            limits: {\n                cpu: \"300m\",\n                memory: \"300Mi\",\n            },\n        },\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_duplocloud as duplocloud\n\n# Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\ntenant = duplocloud.get_tenant(name=\"dev\")\n# Assuming that a host already exists in the tenant, create a service\nnginx = duplocloud.DuploService(\"nginx\",\n    tenant_id=tenant.id,\n    name=\"nginx\",\n    agent_platform=7,\n    docker_image=\"nginx:latest\",\n    replicas=1,\n    other_docker_config=json.dumps({\n        \"Resources\": {\n            \"requests\": {\n                \"cpu\": \"200m\",\n                \"memory\": \"100Mi\",\n            },\n            \"limits\": {\n                \"cpu\": \"300m\",\n                \"memory\": \"300Mi\",\n            },\n        },\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    // Assuming that a host already exists in the tenant, create a service\n    var nginx = new Duplocloud.DuploService(\"nginx\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"nginx\",\n        AgentPlatform = 7,\n        DockerImage = \"nginx:latest\",\n        Replicas = 1,\n        OtherDockerConfig = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"Resources\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"requests\"] = new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"cpu\"] = \"200m\",\n                    [\"memory\"] = \"100Mi\",\n                },\n                [\"limits\"] = new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"cpu\"] = \"300m\",\n                    [\"memory\"] = \"300Mi\",\n                },\n            },\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Resources\": map[string]interface{}{\n\t\t\t\t\"requests\": map[string]interface{}{\n\t\t\t\t\t\"cpu\":    \"200m\",\n\t\t\t\t\t\"memory\": \"100Mi\",\n\t\t\t\t},\n\t\t\t\t\"limits\": map[string]interface{}{\n\t\t\t\t\t\"cpu\":    \"300m\",\n\t\t\t\t\t\"memory\": \"300Mi\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t// Assuming that a host already exists in the tenant, create a service\n\t\t_, err = duplocloud.NewDuploService(ctx, \"nginx\", \u0026duplocloud.DuploServiceArgs{\n\t\t\tTenantId:          pulumi.String(tenant.Id),\n\t\t\tName:              pulumi.String(\"nginx\"),\n\t\t\tAgentPlatform:     pulumi.Int(7),\n\t\t\tDockerImage:       pulumi.String(\"nginx:latest\"),\n\t\t\tReplicas:          pulumi.Int(1),\n\t\t\tOtherDockerConfig: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.DuploService;\nimport com.pulumi.duplocloud.DuploServiceArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        // Assuming that a host already exists in the tenant, create a service\n        var nginx = new DuploService(\"nginx\", DuploServiceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"nginx\")\n            .agentPlatform(7)\n            .dockerImage(\"nginx:latest\")\n            .replicas(1)\n            .otherDockerConfig(serializeJson(\n                jsonObject(\n                    jsonProperty(\"Resources\", jsonObject(\n                        jsonProperty(\"requests\", jsonObject(\n                            jsonProperty(\"cpu\", \"200m\"),\n                            jsonProperty(\"memory\", \"100Mi\")\n                        )),\n                        jsonProperty(\"limits\", jsonObject(\n                            jsonProperty(\"cpu\", \"300m\"),\n                            jsonProperty(\"memory\", \"300Mi\")\n                        ))\n                    ))\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Assuming that a host already exists in the tenant, create a service\n  nginx:\n    type: duplocloud:DuploService\n    properties:\n      tenantId: ${tenant.id}\n      name: nginx\n      agentPlatform: 7 # Duplo EKS container agent\n      dockerImage: nginx:latest\n      replicas: 1\n      otherDockerConfig:\n        fn::toJSON:\n          Resources:\n            requests:\n              cpu: 200m\n              memory: 100Mi\n            limits:\n              cpu: 300m\n              memory: 300Mi\nvariables:\n  # Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Deploy an Nginx service named nginx inside the prod tenant and mount these environment variables from the kubernetes secrets - 1. FOO: bar 2. PING: pong\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Ensure the 'prod' tenant is already created before deploying the Nginx duplo service.\nconst tenant = duplocloud.getTenant({\n    name: \"prod\",\n});\n// Create a secret with the env vars values 1. FOO: bar 2. PING: pong if it does not exist\nconst nginx = new duplocloud.K8Secret(\"nginx\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    secretName: \"nginx-secret\",\n    secretType: \"Opaque\",\n    secretData: JSON.stringify({\n        FOO: \"bar\",\n        PING: \"pong\",\n    }),\n});\n// Assuming that a host exists in the tenant.\nconst nginxDuploService = new duplocloud.DuploService(\"nginx\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"nginx\",\n    agentPlatform: 7,\n    dockerImage: \"nginx:latest\",\n    replicas: 1,\n    otherDockerConfig: pulumi.jsonStringify({\n        EnvFrom: [{\n            secretRef: {\n                name: nginx.secretName,\n            },\n        }],\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_duplocloud as duplocloud\n\n# Ensure the 'prod' tenant is already created before deploying the Nginx duplo service.\ntenant = duplocloud.get_tenant(name=\"prod\")\n# Create a secret with the env vars values 1. FOO: bar 2. PING: pong if it does not exist\nnginx = duplocloud.K8Secret(\"nginx\",\n    tenant_id=tenant.id,\n    secret_name=\"nginx-secret\",\n    secret_type=\"Opaque\",\n    secret_data=json.dumps({\n        \"FOO\": \"bar\",\n        \"PING\": \"pong\",\n    }))\n# Assuming that a host exists in the tenant.\nnginx_duplo_service = duplocloud.DuploService(\"nginx\",\n    tenant_id=tenant.id,\n    name=\"nginx\",\n    agent_platform=7,\n    docker_image=\"nginx:latest\",\n    replicas=1,\n    other_docker_config=pulumi.Output.json_dumps({\n        \"EnvFrom\": [{\n            \"secretRef\": {\n                \"name\": nginx.secret_name,\n            },\n        }],\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'prod' tenant is already created before deploying the Nginx duplo service.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"prod\",\n    });\n\n    // Create a secret with the env vars values 1. FOO: bar 2. PING: pong if it does not exist\n    var nginx = new Duplocloud.K8Secret(\"nginx\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        SecretName = \"nginx-secret\",\n        SecretType = \"Opaque\",\n        SecretData = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"FOO\"] = \"bar\",\n            [\"PING\"] = \"pong\",\n        }),\n    });\n\n    // Assuming that a host exists in the tenant.\n    var nginxDuploService = new Duplocloud.DuploService(\"nginx\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"nginx\",\n        AgentPlatform = 7,\n        DockerImage = \"nginx:latest\",\n        Replicas = 1,\n        OtherDockerConfig = Output.JsonSerialize(Output.Create(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"EnvFrom\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"secretRef\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"name\"] = nginx.SecretName,\n                    },\n                },\n            },\n        })),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'prod' tenant is already created before deploying the Nginx duplo service.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"prod\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"FOO\":  \"bar\",\n\t\t\t\"PING\": \"pong\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t// Create a secret with the env vars values 1. FOO: bar 2. PING: pong if it does not exist\n\t\tnginx, err := duplocloud.NewK8Secret(ctx, \"nginx\", \u0026duplocloud.K8SecretArgs{\n\t\t\tTenantId:   pulumi.String(tenant.Id),\n\t\t\tSecretName: pulumi.String(\"nginx-secret\"),\n\t\t\tSecretType: pulumi.String(\"Opaque\"),\n\t\t\tSecretData: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Assuming that a host exists in the tenant.\n\t\t_, err = duplocloud.NewDuploService(ctx, \"nginx\", \u0026duplocloud.DuploServiceArgs{\n\t\t\tTenantId:      pulumi.String(tenant.Id),\n\t\t\tName:          pulumi.String(\"nginx\"),\n\t\t\tAgentPlatform: pulumi.Int(7),\n\t\t\tDockerImage:   pulumi.String(\"nginx:latest\"),\n\t\t\tReplicas:      pulumi.Int(1),\n\t\t\tOtherDockerConfig: nginx.SecretName.ApplyT(func(secretName string) (pulumi.String, error) {\n\t\t\t\tvar _zero pulumi.String\n\t\t\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\t\t\"EnvFrom\": []map[string]interface{}{\n\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\"secretRef\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\"name\": secretName,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn _zero, err\n\t\t\t\t}\n\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\treturn pulumi.String(json1), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.K8Secret;\nimport com.pulumi.duplocloud.K8SecretArgs;\nimport com.pulumi.duplocloud.DuploService;\nimport com.pulumi.duplocloud.DuploServiceArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'prod' tenant is already created before deploying the Nginx duplo service.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"prod\")\n            .build());\n\n        // Create a secret with the env vars values 1. FOO: bar 2. PING: pong if it does not exist\n        var nginx = new K8Secret(\"nginx\", K8SecretArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .secretName(\"nginx-secret\")\n            .secretType(\"Opaque\")\n            .secretData(serializeJson(\n                jsonObject(\n                    jsonProperty(\"FOO\", \"bar\"),\n                    jsonProperty(\"PING\", \"pong\")\n                )))\n            .build());\n\n        // Assuming that a host exists in the tenant.\n        var nginxDuploService = new DuploService(\"nginxDuploService\", DuploServiceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"nginx\")\n            .agentPlatform(7)\n            .dockerImage(\"nginx:latest\")\n            .replicas(1)\n            .otherDockerConfig(nginx.secretName().applyValue(secretName -\u003e serializeJson(\n                jsonObject(\n                    jsonProperty(\"EnvFrom\", jsonArray(jsonObject(\n                        jsonProperty(\"secretRef\", jsonObject(\n                            jsonProperty(\"name\", secretName)\n                        ))\n                    )))\n                ))))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a secret with the env vars values 1. FOO: bar 2. PING: pong if it does not exist\n  nginx:\n    type: duplocloud:K8Secret\n    properties:\n      tenantId: ${tenant.id}\n      secretName: nginx-secret\n      secretType: Opaque\n      secretData:\n        fn::toJSON:\n          FOO: bar\n          PING: pong\n  # Assuming that a host exists in the tenant.\n  nginxDuploService:\n    type: duplocloud:DuploService\n    name: nginx\n    properties:\n      tenantId: ${tenant.id}\n      name: nginx\n      agentPlatform: 7 # Duplo EKS container agent\n      dockerImage: nginx:latest\n      replicas: 1\n      otherDockerConfig:\n        fn::toJSON:\n          EnvFrom:\n            - secretRef:\n                name: ${nginx.secretName}\nvariables:\n  # Ensure the 'prod' tenant is already created before deploying the Nginx duplo service.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: prod\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Deploy an Nginx service named nginx inside the dev tenant, and mount these environment variables from the kubernetes configmap - 1. FOO: bar 2. PING: pong\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\n// Create a configmap with the env vars values 1. FOO: bar 2. PING: pong if it does not exists\nconst nginx = new duplocloud.K8ConfigMap(\"nginx\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"nginx-cm\",\n    data: JSON.stringify({\n        FOO: \"bar\",\n        PING: \"pong\",\n    }),\n});\n// Ensure that the host is also created in the tenant.\nconst nginxDuploService = new duplocloud.DuploService(\"nginx\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"nginx\",\n    agentPlatform: 7,\n    dockerImage: \"nginx:latest\",\n    replicas: 1,\n    otherDockerConfig: pulumi.jsonStringify({\n        EnvFrom: [{\n            configMapRef: {\n                name: nginx.name,\n            },\n        }],\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_duplocloud as duplocloud\n\n# Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\ntenant = duplocloud.get_tenant(name=\"dev\")\n# Create a configmap with the env vars values 1. FOO: bar 2. PING: pong if it does not exists\nnginx = duplocloud.K8ConfigMap(\"nginx\",\n    tenant_id=tenant.id,\n    name=\"nginx-cm\",\n    data=json.dumps({\n        \"FOO\": \"bar\",\n        \"PING\": \"pong\",\n    }))\n# Ensure that the host is also created in the tenant.\nnginx_duplo_service = duplocloud.DuploService(\"nginx\",\n    tenant_id=tenant.id,\n    name=\"nginx\",\n    agent_platform=7,\n    docker_image=\"nginx:latest\",\n    replicas=1,\n    other_docker_config=pulumi.Output.json_dumps({\n        \"EnvFrom\": [{\n            \"configMapRef\": {\n                \"name\": nginx.name,\n            },\n        }],\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    // Create a configmap with the env vars values 1. FOO: bar 2. PING: pong if it does not exists\n    var nginx = new Duplocloud.K8ConfigMap(\"nginx\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"nginx-cm\",\n        Data = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"FOO\"] = \"bar\",\n            [\"PING\"] = \"pong\",\n        }),\n    });\n\n    // Ensure that the host is also created in the tenant.\n    var nginxDuploService = new Duplocloud.DuploService(\"nginx\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"nginx\",\n        AgentPlatform = 7,\n        DockerImage = \"nginx:latest\",\n        Replicas = 1,\n        OtherDockerConfig = Output.JsonSerialize(Output.Create(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"EnvFrom\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"configMapRef\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"name\"] = nginx.Name,\n                    },\n                },\n            },\n        })),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"FOO\":  \"bar\",\n\t\t\t\"PING\": \"pong\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t// Create a configmap with the env vars values 1. FOO: bar 2. PING: pong if it does not exists\n\t\tnginx, err := duplocloud.NewK8ConfigMap(ctx, \"nginx\", \u0026duplocloud.K8ConfigMapArgs{\n\t\t\tTenantId: pulumi.String(tenant.Id),\n\t\t\tName:     pulumi.String(\"nginx-cm\"),\n\t\t\tData:     pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Ensure that the host is also created in the tenant.\n\t\t_, err = duplocloud.NewDuploService(ctx, \"nginx\", \u0026duplocloud.DuploServiceArgs{\n\t\t\tTenantId:      pulumi.String(tenant.Id),\n\t\t\tName:          pulumi.String(\"nginx\"),\n\t\t\tAgentPlatform: pulumi.Int(7),\n\t\t\tDockerImage:   pulumi.String(\"nginx:latest\"),\n\t\t\tReplicas:      pulumi.Int(1),\n\t\t\tOtherDockerConfig: nginx.Name.ApplyT(func(name string) (pulumi.String, error) {\n\t\t\t\tvar _zero pulumi.String\n\t\t\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\t\t\"EnvFrom\": []map[string]interface{}{\n\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\"configMapRef\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\"name\": name,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn _zero, err\n\t\t\t\t}\n\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\treturn pulumi.String(json1), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.K8ConfigMap;\nimport com.pulumi.duplocloud.K8ConfigMapArgs;\nimport com.pulumi.duplocloud.DuploService;\nimport com.pulumi.duplocloud.DuploServiceArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        // Create a configmap with the env vars values 1. FOO: bar 2. PING: pong if it does not exists\n        var nginx = new K8ConfigMap(\"nginx\", K8ConfigMapArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"nginx-cm\")\n            .data(serializeJson(\n                jsonObject(\n                    jsonProperty(\"FOO\", \"bar\"),\n                    jsonProperty(\"PING\", \"pong\")\n                )))\n            .build());\n\n        // Ensure that the host is also created in the tenant.\n        var nginxDuploService = new DuploService(\"nginxDuploService\", DuploServiceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"nginx\")\n            .agentPlatform(7)\n            .dockerImage(\"nginx:latest\")\n            .replicas(1)\n            .otherDockerConfig(nginx.name().applyValue(name -\u003e serializeJson(\n                jsonObject(\n                    jsonProperty(\"EnvFrom\", jsonArray(jsonObject(\n                        jsonProperty(\"configMapRef\", jsonObject(\n                            jsonProperty(\"name\", name)\n                        ))\n                    )))\n                ))))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a configmap with the env vars values 1. FOO: bar 2. PING: pong if it does not exists\n  nginx:\n    type: duplocloud:K8ConfigMap\n    properties:\n      tenantId: ${tenant.id}\n      name: nginx-cm\n      data:\n        fn::toJSON:\n          FOO: bar\n          PING: pong\n  # Ensure that the host is also created in the tenant.\n  nginxDuploService:\n    type: duplocloud:DuploService\n    name: nginx\n    properties:\n      tenantId: ${tenant.id}\n      name: nginx\n      agentPlatform: 7 # Duplo EKS container agent\n      dockerImage: nginx:latest\n      replicas: 1\n      otherDockerConfig:\n        fn::toJSON:\n          EnvFrom:\n            - configMapRef:\n                name: ${nginx.name}\nvariables:\n  # Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Deploy an Nginx service named nginx inside the dev tenant, and set the replica count to 5\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\n// Ensure that the host is also created in the tenant.\nconst nginx = new duplocloud.DuploService(\"nginx\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"nginx\",\n    agentPlatform: 7,\n    dockerImage: \"nginx:latest\",\n    replicas: 5,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\ntenant = duplocloud.get_tenant(name=\"dev\")\n# Ensure that the host is also created in the tenant.\nnginx = duplocloud.DuploService(\"nginx\",\n    tenant_id=tenant.id,\n    name=\"nginx\",\n    agent_platform=7,\n    docker_image=\"nginx:latest\",\n    replicas=5)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    // Ensure that the host is also created in the tenant.\n    var nginx = new Duplocloud.DuploService(\"nginx\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"nginx\",\n        AgentPlatform = 7,\n        DockerImage = \"nginx:latest\",\n        Replicas = 5,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Ensure that the host is also created in the tenant.\n\t\t_, err = duplocloud.NewDuploService(ctx, \"nginx\", \u0026duplocloud.DuploServiceArgs{\n\t\t\tTenantId:      pulumi.String(tenant.Id),\n\t\t\tName:          pulumi.String(\"nginx\"),\n\t\t\tAgentPlatform: pulumi.Int(7),\n\t\t\tDockerImage:   pulumi.String(\"nginx:latest\"),\n\t\t\tReplicas:      pulumi.Int(5),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.DuploService;\nimport com.pulumi.duplocloud.DuploServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        // Ensure that the host is also created in the tenant.\n        var nginx = new DuploService(\"nginx\", DuploServiceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"nginx\")\n            .agentPlatform(7)\n            .dockerImage(\"nginx:latest\")\n            .replicas(5)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Ensure that the host is also created in the tenant.\n  nginx:\n    type: duplocloud:DuploService\n    properties:\n      tenantId: ${tenant.id}\n      name: nginx\n      agentPlatform: 7 # Duplo EKS container agent\n      dockerImage: nginx:latest\n      replicas: 5\nvariables:\n  # Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Deploy an Nginx service named nginx with liveliness probe. Create it inside the dev tenant which already exists.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\n// Assuming a host already exists in the tenant, create the duplo service\nconst nginx = new duplocloud.DuploService(\"nginx\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"nginx\",\n    agentPlatform: 7,\n    dockerImage: \"nginx:latest\",\n    replicas: 1,\n    otherDockerConfig: JSON.stringify({\n        LivenessProbe: {\n            initialDelaySeconds: 10,\n            periodSeconds: 30,\n            successThreshold: 1,\n            httpGet: {\n                path: \"/health\",\n                port: 80,\n            },\n        },\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_duplocloud as duplocloud\n\n# Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\ntenant = duplocloud.get_tenant(name=\"dev\")\n# Assuming a host already exists in the tenant, create the duplo service\nnginx = duplocloud.DuploService(\"nginx\",\n    tenant_id=tenant.id,\n    name=\"nginx\",\n    agent_platform=7,\n    docker_image=\"nginx:latest\",\n    replicas=1,\n    other_docker_config=json.dumps({\n        \"LivenessProbe\": {\n            \"initialDelaySeconds\": 10,\n            \"periodSeconds\": 30,\n            \"successThreshold\": 1,\n            \"httpGet\": {\n                \"path\": \"/health\",\n                \"port\": 80,\n            },\n        },\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    // Assuming a host already exists in the tenant, create the duplo service\n    var nginx = new Duplocloud.DuploService(\"nginx\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"nginx\",\n        AgentPlatform = 7,\n        DockerImage = \"nginx:latest\",\n        Replicas = 1,\n        OtherDockerConfig = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"LivenessProbe\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"initialDelaySeconds\"] = 10,\n                [\"periodSeconds\"] = 30,\n                [\"successThreshold\"] = 1,\n                [\"httpGet\"] = new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"path\"] = \"/health\",\n                    [\"port\"] = 80,\n                },\n            },\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"LivenessProbe\": map[string]interface{}{\n\t\t\t\t\"initialDelaySeconds\": 10,\n\t\t\t\t\"periodSeconds\":       30,\n\t\t\t\t\"successThreshold\":    1,\n\t\t\t\t\"httpGet\": map[string]interface{}{\n\t\t\t\t\t\"path\": \"/health\",\n\t\t\t\t\t\"port\": 80,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t// Assuming a host already exists in the tenant, create the duplo service\n\t\t_, err = duplocloud.NewDuploService(ctx, \"nginx\", \u0026duplocloud.DuploServiceArgs{\n\t\t\tTenantId:          pulumi.String(tenant.Id),\n\t\t\tName:              pulumi.String(\"nginx\"),\n\t\t\tAgentPlatform:     pulumi.Int(7),\n\t\t\tDockerImage:       pulumi.String(\"nginx:latest\"),\n\t\t\tReplicas:          pulumi.Int(1),\n\t\t\tOtherDockerConfig: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.DuploService;\nimport com.pulumi.duplocloud.DuploServiceArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        // Assuming a host already exists in the tenant, create the duplo service\n        var nginx = new DuploService(\"nginx\", DuploServiceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"nginx\")\n            .agentPlatform(7)\n            .dockerImage(\"nginx:latest\")\n            .replicas(1)\n            .otherDockerConfig(serializeJson(\n                jsonObject(\n                    jsonProperty(\"LivenessProbe\", jsonObject(\n                        jsonProperty(\"initialDelaySeconds\", 10),\n                        jsonProperty(\"periodSeconds\", 30),\n                        jsonProperty(\"successThreshold\", 1),\n                        jsonProperty(\"httpGet\", jsonObject(\n                            jsonProperty(\"path\", \"/health\"),\n                            jsonProperty(\"port\", 80)\n                        ))\n                    ))\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Assuming a host already exists in the tenant, create the duplo service\n  nginx:\n    type: duplocloud:DuploService\n    properties:\n      tenantId: ${tenant.id}\n      name: nginx\n      agentPlatform: 7 # Duplo EKS container agent\n      dockerImage: nginx:latest\n      replicas: 1\n      otherDockerConfig:\n        fn::toJSON:\n          LivenessProbe:\n            initialDelaySeconds: 10\n            periodSeconds: 30\n            successThreshold: 1\n            httpGet:\n              path: /health\n              port: 80\nvariables:\n  # Ensure the 'dev' tenant is already created before deploying the Nginx duplo service.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing service\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the name of the service\n\n#\n\n```sh\n$ pulumi import duplocloud:index/duploService:DuploService myservice v2/subscriptions/*TENANT_ID*/ReplicationControllerApiV2/*NAME*\n```\n\n",
            "properties": {
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent to use for deployment. Should be one of: - `0` : Duplo Native container agent -\n`7` : Linux container agent for Kubernetes\n"
                },
                "allocationTags": {
                    "type": "string"
                },
                "anyHostAllowed": {
                    "type": "boolean",
                    "description": "Whether or not the service can run on hosts in other tenants (within the the same plan as the current tenant).\n"
                },
                "cloud": {
                    "type": "integer",
                    "description": "The numeric ID of the cloud provider to launch the service in. Should be one of: - `0` : AWS (Default) - `1` : Oracle -\n`2` : Azure - `3` : Google - `4` : Byoh - `5` : Unknown - `6` : DigitalOcean - `10` : OnPrem\n"
                },
                "cloudCredsFromK8sServiceAccount": {
                    "type": "boolean",
                    "description": "Whether or not the service gets it's cloud credentials from Kubernetes service account.\n"
                },
                "commands": {
                    "type": "string"
                },
                "dockerImage": {
                    "type": "string",
                    "description": "The docker image to use for the launched container(s).\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The service domain (whichever fqdn_ex or fqdn which is non empty)\n"
                },
                "extraConfig": {
                    "type": "string"
                },
                "forceRecreateOnVolumesChange": {
                    "type": "boolean",
                    "description": "if 'force_recreate_on_volumes_change=true' and any changing to Volumes, will results in forceNew and hence recreating\nthe resource.\n"
                },
                "forceStatefulSet": {
                    "type": "boolean",
                    "description": "Whether or not to force a StatefulSet to be created.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain associated with the service\n"
                },
                "fqdnEx": {
                    "type": "string",
                    "description": "External fully qualified domain associated with the service\n"
                },
                "hpaSpecs": {
                    "type": "string"
                },
                "index": {
                    "type": "integer",
                    "description": "The index of the service.\n"
                },
                "isDaemonset": {
                    "type": "boolean",
                    "description": "Whether or not to enable DaemonSet.\n"
                },
                "isUniqueK8sNodeRequired": {
                    "type": "boolean",
                    "description": "Whether or not the replicas must be scheduled on separate Kubernetes nodes. Only supported on Kubernetes.\n"
                },
                "lbSyncedDeployment": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service to create.\n"
                },
                "otherDockerConfig": {
                    "type": "string"
                },
                "otherDockerHostConfig": {
                    "type": "string"
                },
                "parentDomain": {
                    "type": "string",
                    "description": "The service's parent domain\n"
                },
                "replicaCollocationAllowed": {
                    "type": "boolean",
                    "description": "Allow replica collocation for the service. If this is set then 2 replicas can be on the same host.\n"
                },
                "replicas": {
                    "type": "integer",
                    "description": "The number of container replicas to deploy.\n"
                },
                "replicasMatchingAsgName": {
                    "type": "string"
                },
                "shouldSpreadAcrossZones": {
                    "type": "boolean",
                    "description": "Whether or not the replicas must be spread across availability zones. Only supported on Kubernetes.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/DuploServiceTag:DuploServiceTag"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the service will be created in.\n"
                },
                "volumes": {
                    "type": "string",
                    "description": "Volumes to be attached to pod.\n"
                }
            },
            "required": [
                "dockerImage",
                "domain",
                "fqdn",
                "fqdnEx",
                "hpaSpecs",
                "index",
                "name",
                "otherDockerConfig",
                "parentDomain",
                "replicaCollocationAllowed",
                "tags",
                "tenantId"
            ],
            "inputProperties": {
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent to use for deployment. Should be one of: - `0` : Duplo Native container agent -\n`7` : Linux container agent for Kubernetes\n"
                },
                "allocationTags": {
                    "type": "string"
                },
                "anyHostAllowed": {
                    "type": "boolean",
                    "description": "Whether or not the service can run on hosts in other tenants (within the the same plan as the current tenant).\n"
                },
                "cloud": {
                    "type": "integer",
                    "description": "The numeric ID of the cloud provider to launch the service in. Should be one of: - `0` : AWS (Default) - `1` : Oracle -\n`2` : Azure - `3` : Google - `4` : Byoh - `5` : Unknown - `6` : DigitalOcean - `10` : OnPrem\n"
                },
                "cloudCredsFromK8sServiceAccount": {
                    "type": "boolean",
                    "description": "Whether or not the service gets it's cloud credentials from Kubernetes service account.\n"
                },
                "commands": {
                    "type": "string"
                },
                "dockerImage": {
                    "type": "string",
                    "description": "The docker image to use for the launched container(s).\n"
                },
                "extraConfig": {
                    "type": "string"
                },
                "forceRecreateOnVolumesChange": {
                    "type": "boolean",
                    "description": "if 'force_recreate_on_volumes_change=true' and any changing to Volumes, will results in forceNew and hence recreating\nthe resource.\n"
                },
                "forceStatefulSet": {
                    "type": "boolean",
                    "description": "Whether or not to force a StatefulSet to be created.\n"
                },
                "hpaSpecs": {
                    "type": "string"
                },
                "isDaemonset": {
                    "type": "boolean",
                    "description": "Whether or not to enable DaemonSet.\n"
                },
                "isUniqueK8sNodeRequired": {
                    "type": "boolean",
                    "description": "Whether or not the replicas must be scheduled on separate Kubernetes nodes. Only supported on Kubernetes.\n"
                },
                "lbSyncedDeployment": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service to create.\n",
                    "willReplaceOnChanges": true
                },
                "otherDockerConfig": {
                    "type": "string"
                },
                "otherDockerHostConfig": {
                    "type": "string"
                },
                "replicaCollocationAllowed": {
                    "type": "boolean",
                    "description": "Allow replica collocation for the service. If this is set then 2 replicas can be on the same host.\n"
                },
                "replicas": {
                    "type": "integer",
                    "description": "The number of container replicas to deploy.\n"
                },
                "replicasMatchingAsgName": {
                    "type": "string"
                },
                "shouldSpreadAcrossZones": {
                    "type": "boolean",
                    "description": "Whether or not the replicas must be spread across availability zones. Only supported on Kubernetes.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the service will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "volumes": {
                    "type": "string",
                    "description": "Volumes to be attached to pod.\n"
                }
            },
            "requiredInputs": [
                "dockerImage",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DuploService resources.\n",
                "properties": {
                    "agentPlatform": {
                        "type": "integer",
                        "description": "The numeric ID of the container agent to use for deployment. Should be one of: - `0` : Duplo Native container agent -\n`7` : Linux container agent for Kubernetes\n"
                    },
                    "allocationTags": {
                        "type": "string"
                    },
                    "anyHostAllowed": {
                        "type": "boolean",
                        "description": "Whether or not the service can run on hosts in other tenants (within the the same plan as the current tenant).\n"
                    },
                    "cloud": {
                        "type": "integer",
                        "description": "The numeric ID of the cloud provider to launch the service in. Should be one of: - `0` : AWS (Default) - `1` : Oracle -\n`2` : Azure - `3` : Google - `4` : Byoh - `5` : Unknown - `6` : DigitalOcean - `10` : OnPrem\n"
                    },
                    "cloudCredsFromK8sServiceAccount": {
                        "type": "boolean",
                        "description": "Whether or not the service gets it's cloud credentials from Kubernetes service account.\n"
                    },
                    "commands": {
                        "type": "string"
                    },
                    "dockerImage": {
                        "type": "string",
                        "description": "The docker image to use for the launched container(s).\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The service domain (whichever fqdn_ex or fqdn which is non empty)\n"
                    },
                    "extraConfig": {
                        "type": "string"
                    },
                    "forceRecreateOnVolumesChange": {
                        "type": "boolean",
                        "description": "if 'force_recreate_on_volumes_change=true' and any changing to Volumes, will results in forceNew and hence recreating\nthe resource.\n"
                    },
                    "forceStatefulSet": {
                        "type": "boolean",
                        "description": "Whether or not to force a StatefulSet to be created.\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The fully qualified domain associated with the service\n"
                    },
                    "fqdnEx": {
                        "type": "string",
                        "description": "External fully qualified domain associated with the service\n"
                    },
                    "hpaSpecs": {
                        "type": "string"
                    },
                    "index": {
                        "type": "integer",
                        "description": "The index of the service.\n"
                    },
                    "isDaemonset": {
                        "type": "boolean",
                        "description": "Whether or not to enable DaemonSet.\n"
                    },
                    "isUniqueK8sNodeRequired": {
                        "type": "boolean",
                        "description": "Whether or not the replicas must be scheduled on separate Kubernetes nodes. Only supported on Kubernetes.\n"
                    },
                    "lbSyncedDeployment": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "otherDockerConfig": {
                        "type": "string"
                    },
                    "otherDockerHostConfig": {
                        "type": "string"
                    },
                    "parentDomain": {
                        "type": "string",
                        "description": "The service's parent domain\n"
                    },
                    "replicaCollocationAllowed": {
                        "type": "boolean",
                        "description": "Allow replica collocation for the service. If this is set then 2 replicas can be on the same host.\n"
                    },
                    "replicas": {
                        "type": "integer",
                        "description": "The number of container replicas to deploy.\n"
                    },
                    "replicasMatchingAsgName": {
                        "type": "string"
                    },
                    "shouldSpreadAcrossZones": {
                        "type": "boolean",
                        "description": "Whether or not the replicas must be spread across availability zones. Only supported on Kubernetes.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/DuploServiceTag:DuploServiceTag"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the service will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "volumes": {
                        "type": "string",
                        "description": "Volumes to be attached to pod.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/duploServiceLbconfigs:DuploServiceLbconfigs": {
            "description": "`duplocloud.DuploServiceLbconfigs` manages load balancer configuration(s) for a container-based service in Duplo.\n\nNOTE: For Amazon ECS services, see the `duplocloud.EcsService` resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\n// Deploy NGINX using Duplo's native container agent, and configure a load balancer.\nconst myservice = new duplocloud.DuploService(\"myservice\", {\n    tenantId: myapp.tenantId,\n    name: \"myservice\",\n    agentPlatform: 0,\n    dockerImage: \"nginx:latest\",\n    replicas: 1,\n});\nconst myserviceDuploServiceLbconfigs = new duplocloud.DuploServiceLbconfigs(\"myservice\", {\n    tenantId: myservice.tenantId,\n    replicationControllerName: myservice.name,\n    lbconfigs: [{\n        externalPort: 80,\n        healthCheckUrl: \"/\",\n        isNative: false,\n        lbType: 1,\n        port: \"80\",\n        protocol: \"http\",\n        healthCheck: {\n            healthyThreshold: 4,\n            unhealthyThreshold: 4,\n            timeout: 50,\n            interval: 30,\n            httpSuccessCodes: \"200-399\",\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\n# Deploy NGINX using Duplo's native container agent, and configure a load balancer.\nmyservice = duplocloud.DuploService(\"myservice\",\n    tenant_id=myapp.tenant_id,\n    name=\"myservice\",\n    agent_platform=0,\n    docker_image=\"nginx:latest\",\n    replicas=1)\nmyservice_duplo_service_lbconfigs = duplocloud.DuploServiceLbconfigs(\"myservice\",\n    tenant_id=myservice.tenant_id,\n    replication_controller_name=myservice.name,\n    lbconfigs=[{\n        \"external_port\": 80,\n        \"health_check_url\": \"/\",\n        \"is_native\": False,\n        \"lb_type\": 1,\n        \"port\": \"80\",\n        \"protocol\": \"http\",\n        \"health_check\": {\n            \"healthy_threshold\": 4,\n            \"unhealthy_threshold\": 4,\n            \"timeout\": 50,\n            \"interval\": 30,\n            \"http_success_codes\": \"200-399\",\n        },\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    // Deploy NGINX using Duplo's native container agent, and configure a load balancer.\n    var myservice = new Duplocloud.DuploService(\"myservice\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"myservice\",\n        AgentPlatform = 0,\n        DockerImage = \"nginx:latest\",\n        Replicas = 1,\n    });\n\n    var myserviceDuploServiceLbconfigs = new Duplocloud.DuploServiceLbconfigs(\"myservice\", new()\n    {\n        TenantId = myservice.TenantId,\n        ReplicationControllerName = myservice.Name,\n        Lbconfigs = new[]\n        {\n            new Duplocloud.Inputs.DuploServiceLbconfigsLbconfigArgs\n            {\n                ExternalPort = 80,\n                HealthCheckUrl = \"/\",\n                IsNative = false,\n                LbType = 1,\n                Port = \"80\",\n                Protocol = \"http\",\n                HealthCheck = new Duplocloud.Inputs.DuploServiceLbconfigsLbconfigHealthCheckArgs\n                {\n                    HealthyThreshold = 4,\n                    UnhealthyThreshold = 4,\n                    Timeout = 50,\n                    Interval = 30,\n                    HttpSuccessCodes = \"200-399\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Deploy NGINX using Duplo's native container agent, and configure a load balancer.\n\t\tmyservice, err := duplocloud.NewDuploService(ctx, \"myservice\", \u0026duplocloud.DuploServiceArgs{\n\t\t\tTenantId:      myapp.TenantId,\n\t\t\tName:          pulumi.String(\"myservice\"),\n\t\t\tAgentPlatform: pulumi.Int(0),\n\t\t\tDockerImage:   pulumi.String(\"nginx:latest\"),\n\t\t\tReplicas:      pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewDuploServiceLbconfigs(ctx, \"myservice\", \u0026duplocloud.DuploServiceLbconfigsArgs{\n\t\t\tTenantId:                  myservice.TenantId,\n\t\t\tReplicationControllerName: myservice.Name,\n\t\t\tLbconfigs: duplocloud.DuploServiceLbconfigsLbconfigArray{\n\t\t\t\t\u0026duplocloud.DuploServiceLbconfigsLbconfigArgs{\n\t\t\t\t\tExternalPort:   pulumi.Int(80),\n\t\t\t\t\tHealthCheckUrl: pulumi.String(\"/\"),\n\t\t\t\t\tIsNative:       pulumi.Bool(false),\n\t\t\t\t\tLbType:         pulumi.Int(1),\n\t\t\t\t\tPort:           pulumi.String(\"80\"),\n\t\t\t\t\tProtocol:       pulumi.String(\"http\"),\n\t\t\t\t\tHealthCheck: \u0026duplocloud.DuploServiceLbconfigsLbconfigHealthCheckArgs{\n\t\t\t\t\t\tHealthyThreshold:   pulumi.Int(4),\n\t\t\t\t\t\tUnhealthyThreshold: pulumi.Int(4),\n\t\t\t\t\t\tTimeout:            pulumi.Int(50),\n\t\t\t\t\t\tInterval:           pulumi.Int(30),\n\t\t\t\t\t\tHttpSuccessCodes:   pulumi.String(\"200-399\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.DuploService;\nimport com.pulumi.duplocloud.DuploServiceArgs;\nimport com.pulumi.duplocloud.DuploServiceLbconfigs;\nimport com.pulumi.duplocloud.DuploServiceLbconfigsArgs;\nimport com.pulumi.duplocloud.inputs.DuploServiceLbconfigsLbconfigArgs;\nimport com.pulumi.duplocloud.inputs.DuploServiceLbconfigsLbconfigHealthCheckArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        // Deploy NGINX using Duplo's native container agent, and configure a load balancer.\n        var myservice = new DuploService(\"myservice\", DuploServiceArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"myservice\")\n            .agentPlatform(0)\n            .dockerImage(\"nginx:latest\")\n            .replicas(1)\n            .build());\n\n        var myserviceDuploServiceLbconfigs = new DuploServiceLbconfigs(\"myserviceDuploServiceLbconfigs\", DuploServiceLbconfigsArgs.builder()\n            .tenantId(myservice.tenantId())\n            .replicationControllerName(myservice.name())\n            .lbconfigs(DuploServiceLbconfigsLbconfigArgs.builder()\n                .externalPort(80)\n                .healthCheckUrl(\"/\")\n                .isNative(false)\n                .lbType(1)\n                .port(\"80\")\n                .protocol(\"http\")\n                .healthCheck(DuploServiceLbconfigsLbconfigHealthCheckArgs.builder()\n                    .healthyThreshold(4)\n                    .unhealthyThreshold(4)\n                    .timeout(50)\n                    .interval(30)\n                    .httpSuccessCodes(\"200-399\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  # Deploy NGINX using Duplo's native container agent, and configure a load balancer.\n  myservice:\n    type: duplocloud:DuploService\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: myservice\n      agentPlatform: 0 # Duplo native container agent\n      dockerImage: nginx:latest\n      replicas: 1\n  myserviceDuploServiceLbconfigs:\n    type: duplocloud:DuploServiceLbconfigs\n    name: myservice\n    properties:\n      tenantId: ${myservice.tenantId}\n      replicationControllerName: ${myservice.name}\n      lbconfigs:\n        - externalPort: 80\n          healthCheckUrl: /\n          isNative: false\n          lbType: 1\n          port: '80'\n          protocol: http\n          healthCheck:\n            healthyThreshold: 4\n            unhealthyThreshold: 4\n            timeout: 50\n            interval: 30\n            httpSuccessCodes: 200-399\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing service's load balancer configurations\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the name of the service\n\n#\n\n```sh\n$ pulumi import duplocloud:index/duploServiceLbconfigs:DuploServiceLbconfigs myservice v2/subscriptions/*TENANT_ID*/ServiceLBConfigsV2/*NAME*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The load balancer ARN.\n"
                },
                "lbconfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/DuploServiceLbconfigsLbconfig:DuploServiceLbconfigsLbconfig"
                    }
                },
                "replicationControllerName": {
                    "type": "string",
                    "description": "The name of the duplo service.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The load balancer's current status.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that hosts the duplo service.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Duplo considers all of the load balancers ready\n"
                }
            },
            "required": [
                "arn",
                "lbconfigs",
                "replicationControllerName",
                "status",
                "tenantId"
            ],
            "inputProperties": {
                "lbconfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/DuploServiceLbconfigsLbconfig:DuploServiceLbconfigsLbconfig"
                    }
                },
                "replicationControllerName": {
                    "type": "string",
                    "description": "The name of the duplo service.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that hosts the duplo service.\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Duplo considers all of the load balancers ready\n"
                }
            },
            "requiredInputs": [
                "lbconfigs",
                "replicationControllerName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DuploServiceLbconfigs resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The load balancer ARN.\n"
                    },
                    "lbconfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/DuploServiceLbconfigsLbconfig:DuploServiceLbconfigsLbconfig"
                        }
                    },
                    "replicationControllerName": {
                        "type": "string",
                        "description": "The name of the duplo service.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The load balancer's current status.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that hosts the duplo service.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until Duplo considers all of the load balancers ready\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/duploServiceParams:DuploServiceParams": {
            "description": "`duplocloud.DuploServiceLbconfigs` manages additional configuration for a container-based service in Duplo.\n\nNOTE: For Amazon ECS services, see the `duplocloud.EcsService` resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\n// Deploy NGINX using Duplo's native container agent, and configure additional load balancer settings.\nconst myservice = new duplocloud.DuploService(\"myservice\", {\n    tenantId: myapp.tenantId,\n    name: \"myservice\",\n    agentPlatform: 0,\n    dockerImage: \"nginx:latest\",\n    replicas: 1,\n});\nconst myserviceDuploServiceLbconfigs = new duplocloud.DuploServiceLbconfigs(\"myservice\", {\n    tenantId: myservice.tenantId,\n    replicationControllerName: myservice.name,\n    lbconfigs: [{\n        externalPort: 80,\n        healthCheckUrl: \"/\",\n        isNative: false,\n        lbType: 1,\n        port: \"80\",\n        protocol: \"http\",\n    }],\n});\nconst myserviceDuploServiceParams = new duplocloud.DuploServiceParams(\"myservice\", {\n    tenantId: myserviceDuploServiceLbconfigs.tenantId,\n    replicationControllerName: myserviceDuploServiceLbconfigs.replicationControllerName,\n    dnsPrfx: \"myservice\",\n    dropInvalidHeaders: true,\n    enableAccessLogs: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\n# Deploy NGINX using Duplo's native container agent, and configure additional load balancer settings.\nmyservice = duplocloud.DuploService(\"myservice\",\n    tenant_id=myapp.tenant_id,\n    name=\"myservice\",\n    agent_platform=0,\n    docker_image=\"nginx:latest\",\n    replicas=1)\nmyservice_duplo_service_lbconfigs = duplocloud.DuploServiceLbconfigs(\"myservice\",\n    tenant_id=myservice.tenant_id,\n    replication_controller_name=myservice.name,\n    lbconfigs=[{\n        \"external_port\": 80,\n        \"health_check_url\": \"/\",\n        \"is_native\": False,\n        \"lb_type\": 1,\n        \"port\": \"80\",\n        \"protocol\": \"http\",\n    }])\nmyservice_duplo_service_params = duplocloud.DuploServiceParams(\"myservice\",\n    tenant_id=myservice_duplo_service_lbconfigs.tenant_id,\n    replication_controller_name=myservice_duplo_service_lbconfigs.replication_controller_name,\n    dns_prfx=\"myservice\",\n    drop_invalid_headers=True,\n    enable_access_logs=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    // Deploy NGINX using Duplo's native container agent, and configure additional load balancer settings.\n    var myservice = new Duplocloud.DuploService(\"myservice\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"myservice\",\n        AgentPlatform = 0,\n        DockerImage = \"nginx:latest\",\n        Replicas = 1,\n    });\n\n    var myserviceDuploServiceLbconfigs = new Duplocloud.DuploServiceLbconfigs(\"myservice\", new()\n    {\n        TenantId = myservice.TenantId,\n        ReplicationControllerName = myservice.Name,\n        Lbconfigs = new[]\n        {\n            new Duplocloud.Inputs.DuploServiceLbconfigsLbconfigArgs\n            {\n                ExternalPort = 80,\n                HealthCheckUrl = \"/\",\n                IsNative = false,\n                LbType = 1,\n                Port = \"80\",\n                Protocol = \"http\",\n            },\n        },\n    });\n\n    var myserviceDuploServiceParams = new Duplocloud.DuploServiceParams(\"myservice\", new()\n    {\n        TenantId = myserviceDuploServiceLbconfigs.TenantId,\n        ReplicationControllerName = myserviceDuploServiceLbconfigs.ReplicationControllerName,\n        DnsPrfx = \"myservice\",\n        DropInvalidHeaders = true,\n        EnableAccessLogs = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Deploy NGINX using Duplo's native container agent, and configure additional load balancer settings.\n\t\tmyservice, err := duplocloud.NewDuploService(ctx, \"myservice\", \u0026duplocloud.DuploServiceArgs{\n\t\t\tTenantId:      myapp.TenantId,\n\t\t\tName:          pulumi.String(\"myservice\"),\n\t\t\tAgentPlatform: pulumi.Int(0),\n\t\t\tDockerImage:   pulumi.String(\"nginx:latest\"),\n\t\t\tReplicas:      pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyserviceDuploServiceLbconfigs, err := duplocloud.NewDuploServiceLbconfigs(ctx, \"myservice\", \u0026duplocloud.DuploServiceLbconfigsArgs{\n\t\t\tTenantId:                  myservice.TenantId,\n\t\t\tReplicationControllerName: myservice.Name,\n\t\t\tLbconfigs: duplocloud.DuploServiceLbconfigsLbconfigArray{\n\t\t\t\t\u0026duplocloud.DuploServiceLbconfigsLbconfigArgs{\n\t\t\t\t\tExternalPort:   pulumi.Int(80),\n\t\t\t\t\tHealthCheckUrl: pulumi.String(\"/\"),\n\t\t\t\t\tIsNative:       pulumi.Bool(false),\n\t\t\t\t\tLbType:         pulumi.Int(1),\n\t\t\t\t\tPort:           pulumi.String(\"80\"),\n\t\t\t\t\tProtocol:       pulumi.String(\"http\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewDuploServiceParams(ctx, \"myservice\", \u0026duplocloud.DuploServiceParamsArgs{\n\t\t\tTenantId:                  myserviceDuploServiceLbconfigs.TenantId,\n\t\t\tReplicationControllerName: myserviceDuploServiceLbconfigs.ReplicationControllerName,\n\t\t\tDnsPrfx:                   pulumi.String(\"myservice\"),\n\t\t\tDropInvalidHeaders:        pulumi.Bool(true),\n\t\t\tEnableAccessLogs:          pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.DuploService;\nimport com.pulumi.duplocloud.DuploServiceArgs;\nimport com.pulumi.duplocloud.DuploServiceLbconfigs;\nimport com.pulumi.duplocloud.DuploServiceLbconfigsArgs;\nimport com.pulumi.duplocloud.inputs.DuploServiceLbconfigsLbconfigArgs;\nimport com.pulumi.duplocloud.DuploServiceParams;\nimport com.pulumi.duplocloud.DuploServiceParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        // Deploy NGINX using Duplo's native container agent, and configure additional load balancer settings.\n        var myservice = new DuploService(\"myservice\", DuploServiceArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"myservice\")\n            .agentPlatform(0)\n            .dockerImage(\"nginx:latest\")\n            .replicas(1)\n            .build());\n\n        var myserviceDuploServiceLbconfigs = new DuploServiceLbconfigs(\"myserviceDuploServiceLbconfigs\", DuploServiceLbconfigsArgs.builder()\n            .tenantId(myservice.tenantId())\n            .replicationControllerName(myservice.name())\n            .lbconfigs(DuploServiceLbconfigsLbconfigArgs.builder()\n                .externalPort(80)\n                .healthCheckUrl(\"/\")\n                .isNative(false)\n                .lbType(1)\n                .port(\"80\")\n                .protocol(\"http\")\n                .build())\n            .build());\n\n        var myserviceDuploServiceParams = new DuploServiceParams(\"myserviceDuploServiceParams\", DuploServiceParamsArgs.builder()\n            .tenantId(myserviceDuploServiceLbconfigs.tenantId())\n            .replicationControllerName(myserviceDuploServiceLbconfigs.replicationControllerName())\n            .dnsPrfx(\"myservice\")\n            .dropInvalidHeaders(true)\n            .enableAccessLogs(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  # Deploy NGINX using Duplo's native container agent, and configure additional load balancer settings.\n  myservice:\n    type: duplocloud:DuploService\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: myservice\n      agentPlatform: 0 # Duplo native container agent\n      dockerImage: nginx:latest\n      replicas: 1\n  myserviceDuploServiceLbconfigs:\n    type: duplocloud:DuploServiceLbconfigs\n    name: myservice\n    properties:\n      tenantId: ${myservice.tenantId}\n      replicationControllerName: ${myservice.name}\n      lbconfigs:\n        - externalPort: 80\n          healthCheckUrl: /\n          isNative: false\n          lbType: 1\n          port: '80'\n          protocol: http\n  myserviceDuploServiceParams:\n    type: duplocloud:DuploServiceParams\n    name: myservice\n    properties:\n      tenantId: ${myserviceDuploServiceLbconfigs.tenantId}\n      replicationControllerName: ${myserviceDuploServiceLbconfigs.replicationControllerName}\n      dnsPrfx: myservice\n      dropInvalidHeaders: true\n      enableAccessLogs: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing service's parameters\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the name of the service\n\n#\n\n```sh\n$ pulumi import duplocloud:index/duploServiceParams:DuploServiceParams myservice v2/subscriptions/*TENANT_ID*/ReplicationControllerParamsV2/*NAME*\n```\n\n",
            "properties": {
                "dnsPrfx": {
                    "type": "string",
                    "description": "The DNS prefix to assign to this service's load balancer.\n"
                },
                "dropInvalidHeaders": {
                    "type": "boolean",
                    "description": "Whether or not to drop invalid HTTP headers received by the load balancer.\n"
                },
                "enableAccessLogs": {
                    "type": "boolean",
                    "description": "Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan\n"
                },
                "httpToHttpsRedirect": {
                    "type": "boolean",
                    "description": "Whether or not to enable http to https redirection.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.\n"
                },
                "loadBalancerArn": {
                    "type": "string",
                    "description": "The load balancer ARN.\n"
                },
                "loadBalancerName": {
                    "type": "string",
                    "description": "The load balancer name.\n"
                },
                "replicationControllerName": {
                    "type": "string",
                    "description": "The name of the duplo service.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that hosts the duplo service.\n"
                },
                "webaclid": {
                    "type": "string",
                    "description": "The ARN of a web application firewall to associate this load balancer.\n"
                }
            },
            "required": [
                "dnsPrfx",
                "dropInvalidHeaders",
                "enableAccessLogs",
                "httpToHttpsRedirect",
                "idleTimeout",
                "loadBalancerArn",
                "loadBalancerName",
                "replicationControllerName",
                "tenantId",
                "webaclid"
            ],
            "inputProperties": {
                "dnsPrfx": {
                    "type": "string",
                    "description": "The DNS prefix to assign to this service's load balancer.\n"
                },
                "dropInvalidHeaders": {
                    "type": "boolean",
                    "description": "Whether or not to drop invalid HTTP headers received by the load balancer.\n"
                },
                "enableAccessLogs": {
                    "type": "boolean",
                    "description": "Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan\n"
                },
                "httpToHttpsRedirect": {
                    "type": "boolean",
                    "description": "Whether or not to enable http to https redirection.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.\n"
                },
                "replicationControllerName": {
                    "type": "string",
                    "description": "The name of the duplo service.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that hosts the duplo service.\n",
                    "willReplaceOnChanges": true
                },
                "webaclid": {
                    "type": "string",
                    "description": "The ARN of a web application firewall to associate this load balancer.\n"
                }
            },
            "requiredInputs": [
                "replicationControllerName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DuploServiceParams resources.\n",
                "properties": {
                    "dnsPrfx": {
                        "type": "string",
                        "description": "The DNS prefix to assign to this service's load balancer.\n"
                    },
                    "dropInvalidHeaders": {
                        "type": "boolean",
                        "description": "Whether or not to drop invalid HTTP headers received by the load balancer.\n"
                    },
                    "enableAccessLogs": {
                        "type": "boolean",
                        "description": "Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan\n"
                    },
                    "httpToHttpsRedirect": {
                        "type": "boolean",
                        "description": "Whether or not to enable http to https redirection.\n"
                    },
                    "idleTimeout": {
                        "type": "integer",
                        "description": "The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.\n"
                    },
                    "loadBalancerArn": {
                        "type": "string",
                        "description": "The load balancer ARN.\n"
                    },
                    "loadBalancerName": {
                        "type": "string",
                        "description": "The load balancer name.\n"
                    },
                    "replicationControllerName": {
                        "type": "string",
                        "description": "The name of the duplo service.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that hosts the duplo service.\n",
                        "willReplaceOnChanges": true
                    },
                    "webaclid": {
                        "type": "string",
                        "description": "The ARN of a web application firewall to associate this load balancer.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/ecacheInstance:EcacheInstance": {
            "description": "## Example Usage\n\n### Create an Amazon ElastiCache cluster of type Redis.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Before creating a ElastiCache cluster, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\nconst infra = new duplocloud.Infrastructure(\"infra\", {\n    infraName: \"prod\",\n    cloud: 0,\n    region: \"us-west-2\",\n    enableK8Cluster: false,\n    addressPrefix: \"10.11.0.0/16\",\n});\n// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"prod\",\n    planId: infra.infraName,\n});\n// Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\nconst redisCache = new duplocloud.EcacheInstance(\"redis_cache\", {\n    tenantId: tenant.tenantId,\n    name: \"mycache\",\n    cacheType: 0,\n    replicas: 1,\n    size: \"cache.t2.small\",\n    enableClusterMode: true,\n    numberOfShards: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Before creating a ElastiCache cluster, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\ninfra = duplocloud.Infrastructure(\"infra\",\n    infra_name=\"prod\",\n    cloud=0,\n    region=\"us-west-2\",\n    enable_k8_cluster=False,\n    address_prefix=\"10.11.0.0/16\")\n# Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"prod\",\n    plan_id=infra.infra_name)\n# Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\nredis_cache = duplocloud.EcacheInstance(\"redis_cache\",\n    tenant_id=tenant.tenant_id,\n    name=\"mycache\",\n    cache_type=0,\n    replicas=1,\n    size=\"cache.t2.small\",\n    enable_cluster_mode=True,\n    number_of_shards=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Before creating a ElastiCache cluster, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\n    var infra = new Duplocloud.Infrastructure(\"infra\", new()\n    {\n        InfraName = \"prod\",\n        Cloud = 0,\n        Region = \"us-west-2\",\n        EnableK8Cluster = false,\n        AddressPrefix = \"10.11.0.0/16\",\n    });\n\n    // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"prod\",\n        PlanId = infra.InfraName,\n    });\n\n    // Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\n    var redisCache = new Duplocloud.EcacheInstance(\"redis_cache\", new()\n    {\n        TenantId = tenant.TenantId,\n        Name = \"mycache\",\n        CacheType = 0,\n        Replicas = 1,\n        Size = \"cache.t2.small\",\n        EnableClusterMode = true,\n        NumberOfShards = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Before creating a ElastiCache cluster, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\n\t\tinfra, err := duplocloud.NewInfrastructure(ctx, \"infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"prod\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-west-2\"),\n\t\t\tEnableK8Cluster: pulumi.Bool(false),\n\t\t\tAddressPrefix:   pulumi.String(\"10.11.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n\t\ttenant, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"prod\"),\n\t\t\tPlanId:      infra.InfraName,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\n\t\t_, err = duplocloud.NewEcacheInstance(ctx, \"redis_cache\", \u0026duplocloud.EcacheInstanceArgs{\n\t\t\tTenantId:          tenant.TenantId,\n\t\t\tName:              pulumi.String(\"mycache\"),\n\t\t\tCacheType:         pulumi.Int(0),\n\t\t\tReplicas:          pulumi.Int(1),\n\t\t\tSize:              pulumi.String(\"cache.t2.small\"),\n\t\t\tEnableClusterMode: pulumi.Bool(true),\n\t\t\tNumberOfShards:    pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.EcacheInstance;\nimport com.pulumi.duplocloud.EcacheInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Before creating a ElastiCache cluster, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\n        var infra = new Infrastructure(\"infra\", InfrastructureArgs.builder()\n            .infraName(\"prod\")\n            .cloud(0)\n            .region(\"us-west-2\")\n            .enableK8Cluster(false)\n            .addressPrefix(\"10.11.0.0/16\")\n            .build());\n\n        // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"prod\")\n            .planId(infra.infraName())\n            .build());\n\n        // Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\n        var redisCache = new EcacheInstance(\"redisCache\", EcacheInstanceArgs.builder()\n            .tenantId(tenant.tenantId())\n            .name(\"mycache\")\n            .cacheType(0)\n            .replicas(1)\n            .size(\"cache.t2.small\")\n            .enableClusterMode(true)\n            .numberOfShards(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Before creating a ElastiCache cluster, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\n  infra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: prod\n      cloud: 0 # AWS Cloud\n      region: us-west-2\n      enableK8Cluster: false\n      addressPrefix: 10.11.0.0/16\n  # Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: prod\n      planId: ${infra.infraName}\n  # Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\n  redisCache:\n    type: duplocloud:EcacheInstance\n    name: redis_cache\n    properties:\n      tenantId: ${tenant.tenantId}\n      name: mycache\n      cacheType: 0 # 0: Redis, 1: Memcache\n      replicas: 1\n      size: cache.t2.small\n      enableClusterMode: true # applicable only for Redis\n      numberOfShards: 1 # applicable only for Redis\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create an Amazon ElastiCache cluster of type Redis with 2 replicas of type cache.t2.small in dev tenant.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\n// Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\nconst redisCache = new duplocloud.EcacheInstance(\"redis_cache\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"mycache\",\n    cacheType: 0,\n    replicas: 2,\n    size: \"cache.t2.small\",\n    enableClusterMode: true,\n    numberOfShards: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\ntenant = duplocloud.get_tenant(name=\"dev\")\n# Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\nredis_cache = duplocloud.EcacheInstance(\"redis_cache\",\n    tenant_id=tenant.id,\n    name=\"mycache\",\n    cache_type=0,\n    replicas=2,\n    size=\"cache.t2.small\",\n    enable_cluster_mode=True,\n    number_of_shards=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    // Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\n    var redisCache = new Duplocloud.EcacheInstance(\"redis_cache\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"mycache\",\n        CacheType = 0,\n        Replicas = 2,\n        Size = \"cache.t2.small\",\n        EnableClusterMode = true,\n        NumberOfShards = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\n\t\t_, err = duplocloud.NewEcacheInstance(ctx, \"redis_cache\", \u0026duplocloud.EcacheInstanceArgs{\n\t\t\tTenantId:          pulumi.String(tenant.Id),\n\t\t\tName:              pulumi.String(\"mycache\"),\n\t\t\tCacheType:         pulumi.Int(0),\n\t\t\tReplicas:          pulumi.Int(2),\n\t\t\tSize:              pulumi.String(\"cache.t2.small\"),\n\t\t\tEnableClusterMode: pulumi.Bool(true),\n\t\t\tNumberOfShards:    pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.EcacheInstance;\nimport com.pulumi.duplocloud.EcacheInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        // Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\n        var redisCache = new EcacheInstance(\"redisCache\", EcacheInstanceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"mycache\")\n            .cacheType(0)\n            .replicas(2)\n            .size(\"cache.t2.small\")\n            .enableClusterMode(true)\n            .numberOfShards(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\n  redisCache:\n    type: duplocloud:EcacheInstance\n    name: redis_cache\n    properties:\n      tenantId: ${tenant.id}\n      name: mycache\n      cacheType: 0 # 0: Redis, 1: Memcache\n      replicas: 2\n      size: cache.t2.small\n      enableClusterMode: true # applicable only for Redis\n      numberOfShards: 1 # applicable only for Redis\nvariables:\n  # Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create an Amazon ElastiCache of type Redis with log delivery configuration and automatic failover enabled in dev tenant.\n\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\n// Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache.\nconst redisCache = new duplocloud.EcacheInstance(\"redis_cache\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"mycache\",\n    cacheType: 0,\n    replicas: 2,\n    size: \"cache.t2.small\",\n    automaticFailoverEnabled: true,\n    logDeliveryConfigurations: [\n        {\n            logGroup: \"/elasticache/redis\",\n            destinationType: \"cloudwatch-logs\",\n            logFormat: \"text\",\n            logType: \"slow-log\",\n        },\n        {\n            logGroup: \"/elasticache/redis\",\n            destinationType: \"cloudwatch-logs\",\n            logFormat: \"json\",\n            logType: \"engine-log\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\ntenant = duplocloud.get_tenant(name=\"dev\")\n# Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache.\nredis_cache = duplocloud.EcacheInstance(\"redis_cache\",\n    tenant_id=tenant.id,\n    name=\"mycache\",\n    cache_type=0,\n    replicas=2,\n    size=\"cache.t2.small\",\n    automatic_failover_enabled=True,\n    log_delivery_configurations=[\n        {\n            \"log_group\": \"/elasticache/redis\",\n            \"destination_type\": \"cloudwatch-logs\",\n            \"log_format\": \"text\",\n            \"log_type\": \"slow-log\",\n        },\n        {\n            \"log_group\": \"/elasticache/redis\",\n            \"destination_type\": \"cloudwatch-logs\",\n            \"log_format\": \"json\",\n            \"log_type\": \"engine-log\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    // Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache.\n    var redisCache = new Duplocloud.EcacheInstance(\"redis_cache\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"mycache\",\n        CacheType = 0,\n        Replicas = 2,\n        Size = \"cache.t2.small\",\n        AutomaticFailoverEnabled = true,\n        LogDeliveryConfigurations = new[]\n        {\n            new Duplocloud.Inputs.EcacheInstanceLogDeliveryConfigurationArgs\n            {\n                LogGroup = \"/elasticache/redis\",\n                DestinationType = \"cloudwatch-logs\",\n                LogFormat = \"text\",\n                LogType = \"slow-log\",\n            },\n            new Duplocloud.Inputs.EcacheInstanceLogDeliveryConfigurationArgs\n            {\n                LogGroup = \"/elasticache/redis\",\n                DestinationType = \"cloudwatch-logs\",\n                LogFormat = \"json\",\n                LogType = \"engine-log\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache.\n\t\t_, err = duplocloud.NewEcacheInstance(ctx, \"redis_cache\", \u0026duplocloud.EcacheInstanceArgs{\n\t\t\tTenantId:                 pulumi.String(tenant.Id),\n\t\t\tName:                     pulumi.String(\"mycache\"),\n\t\t\tCacheType:                pulumi.Int(0),\n\t\t\tReplicas:                 pulumi.Int(2),\n\t\t\tSize:                     pulumi.String(\"cache.t2.small\"),\n\t\t\tAutomaticFailoverEnabled: pulumi.Bool(true),\n\t\t\tLogDeliveryConfigurations: duplocloud.EcacheInstanceLogDeliveryConfigurationArray{\n\t\t\t\t\u0026duplocloud.EcacheInstanceLogDeliveryConfigurationArgs{\n\t\t\t\t\tLogGroup:        pulumi.String(\"/elasticache/redis\"),\n\t\t\t\t\tDestinationType: pulumi.String(\"cloudwatch-logs\"),\n\t\t\t\t\tLogFormat:       pulumi.String(\"text\"),\n\t\t\t\t\tLogType:         pulumi.String(\"slow-log\"),\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.EcacheInstanceLogDeliveryConfigurationArgs{\n\t\t\t\t\tLogGroup:        pulumi.String(\"/elasticache/redis\"),\n\t\t\t\t\tDestinationType: pulumi.String(\"cloudwatch-logs\"),\n\t\t\t\t\tLogFormat:       pulumi.String(\"json\"),\n\t\t\t\t\tLogType:         pulumi.String(\"engine-log\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.EcacheInstance;\nimport com.pulumi.duplocloud.EcacheInstanceArgs;\nimport com.pulumi.duplocloud.inputs.EcacheInstanceLogDeliveryConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        // Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache.\n        var redisCache = new EcacheInstance(\"redisCache\", EcacheInstanceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"mycache\")\n            .cacheType(0)\n            .replicas(2)\n            .size(\"cache.t2.small\")\n            .automaticFailoverEnabled(true)\n            .logDeliveryConfigurations(            \n                EcacheInstanceLogDeliveryConfigurationArgs.builder()\n                    .logGroup(\"/elasticache/redis\")\n                    .destinationType(\"cloudwatch-logs\")\n                    .logFormat(\"text\")\n                    .logType(\"slow-log\")\n                    .build(),\n                EcacheInstanceLogDeliveryConfigurationArgs.builder()\n                    .logGroup(\"/elasticache/redis\")\n                    .destinationType(\"cloudwatch-logs\")\n                    .logFormat(\"json\")\n                    .logType(\"engine-log\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache.\n  redisCache:\n    type: duplocloud:EcacheInstance\n    name: redis_cache\n    properties:\n      tenantId: ${tenant.id}\n      name: mycache\n      cacheType: 0 # 0: Redis, 1: Memcache\n      replicas: 2\n      size: cache.t2.small\n      automaticFailoverEnabled: true # minimum 2 replicas or enable_cluster_mode is true\n      logDeliveryConfigurations:\n        - logGroup: /elasticache/redis\n          destinationType: cloudwatch-logs\n          logFormat: text\n          logType: slow-log\n        - logGroup: /elasticache/redis\n          destinationType: cloudwatch-logs\n          logFormat: json\n          logType: engine-log\nvariables:\n  # Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Set up an ElastiCache Redis cluster with 2 shards and 2 cache.t2.small replicas in the dev tenant.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\n// Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\nconst redisCache = new duplocloud.EcacheInstance(\"redis_cache\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"mycache\",\n    cacheType: 0,\n    replicas: 2,\n    size: \"cache.t2.small\",\n    enableClusterMode: true,\n    numberOfShards: 2,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\ntenant = duplocloud.get_tenant(name=\"dev\")\n# Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\nredis_cache = duplocloud.EcacheInstance(\"redis_cache\",\n    tenant_id=tenant.id,\n    name=\"mycache\",\n    cache_type=0,\n    replicas=2,\n    size=\"cache.t2.small\",\n    enable_cluster_mode=True,\n    number_of_shards=2)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    // Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\n    var redisCache = new Duplocloud.EcacheInstance(\"redis_cache\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"mycache\",\n        CacheType = 0,\n        Replicas = 2,\n        Size = \"cache.t2.small\",\n        EnableClusterMode = true,\n        NumberOfShards = 2,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\n\t\t_, err = duplocloud.NewEcacheInstance(ctx, \"redis_cache\", \u0026duplocloud.EcacheInstanceArgs{\n\t\t\tTenantId:          pulumi.String(tenant.Id),\n\t\t\tName:              pulumi.String(\"mycache\"),\n\t\t\tCacheType:         pulumi.Int(0),\n\t\t\tReplicas:          pulumi.Int(2),\n\t\t\tSize:              pulumi.String(\"cache.t2.small\"),\n\t\t\tEnableClusterMode: pulumi.Bool(true),\n\t\t\tNumberOfShards:    pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.EcacheInstance;\nimport com.pulumi.duplocloud.EcacheInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        // Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\n        var redisCache = new EcacheInstance(\"redisCache\", EcacheInstanceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"mycache\")\n            .cacheType(0)\n            .replicas(2)\n            .size(\"cache.t2.small\")\n            .enableClusterMode(true)\n            .numberOfShards(2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.\n  redisCache:\n    type: duplocloud:EcacheInstance\n    name: redis_cache\n    properties:\n      tenantId: ${tenant.id}\n      name: mycache\n      cacheType: 0 # 0: Redis, 1: Memcache\n      replicas: 2\n      size: cache.t2.small\n      enableClusterMode: true # applicable only for Redis\n      numberOfShards: 2 # applicable only for Redis\nvariables:\n  # Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create an Amazon ElastiCache cluster of type Memcached.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\n// Use the tenant_id from the duplocloud_tenant data source, which will be populated after the tenant data source is created, when setting up the Memcached ElastiCache cluster.\nconst memCache = new duplocloud.EcacheInstance(\"mem_cache\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"mycache\",\n    cacheType: 1,\n    replicas: 1,\n    size: \"cache.t2.small\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\ntenant = duplocloud.get_tenant(name=\"dev\")\n# Use the tenant_id from the duplocloud_tenant data source, which will be populated after the tenant data source is created, when setting up the Memcached ElastiCache cluster.\nmem_cache = duplocloud.EcacheInstance(\"mem_cache\",\n    tenant_id=tenant.id,\n    name=\"mycache\",\n    cache_type=1,\n    replicas=1,\n    size=\"cache.t2.small\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    // Use the tenant_id from the duplocloud_tenant data source, which will be populated after the tenant data source is created, when setting up the Memcached ElastiCache cluster.\n    var memCache = new Duplocloud.EcacheInstance(\"mem_cache\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"mycache\",\n        CacheType = 1,\n        Replicas = 1,\n        Size = \"cache.t2.small\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Use the tenant_id from the duplocloud_tenant data source, which will be populated after the tenant data source is created, when setting up the Memcached ElastiCache cluster.\n\t\t_, err = duplocloud.NewEcacheInstance(ctx, \"mem_cache\", \u0026duplocloud.EcacheInstanceArgs{\n\t\t\tTenantId:  pulumi.String(tenant.Id),\n\t\t\tName:      pulumi.String(\"mycache\"),\n\t\t\tCacheType: pulumi.Int(1),\n\t\t\tReplicas:  pulumi.Int(1),\n\t\t\tSize:      pulumi.String(\"cache.t2.small\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.EcacheInstance;\nimport com.pulumi.duplocloud.EcacheInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        // Use the tenant_id from the duplocloud_tenant data source, which will be populated after the tenant data source is created, when setting up the Memcached ElastiCache cluster.\n        var memCache = new EcacheInstance(\"memCache\", EcacheInstanceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"mycache\")\n            .cacheType(1)\n            .replicas(1)\n            .size(\"cache.t2.small\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Use the tenant_id from the duplocloud_tenant data source, which will be populated after the tenant data source is created, when setting up the Memcached ElastiCache cluster.\n  memCache:\n    type: duplocloud:EcacheInstance\n    name: mem_cache\n    properties:\n      tenantId: ${tenant.id}\n      name: mycache\n      cacheType: 1 # 0: Redis, 1: Memcache\n      replicas: 1\n      size: cache.t2.small\nvariables:\n  # Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create an Amazon ElastiCache with snapshot window\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst mycaches = new duplocloud.EcacheInstance(\"mycaches\", {\n    tenantId: tenant.id,\n    name: \"mycache\",\n    cacheType: 0,\n    replicas: 2,\n    size: \"cache.t3.small\",\n    engineVersion: \"7.1\",\n    snapshotWindow: \"04:00-13:00\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmycaches = duplocloud.EcacheInstance(\"mycaches\",\n    tenant_id=tenant[\"id\"],\n    name=\"mycache\",\n    cache_type=0,\n    replicas=2,\n    size=\"cache.t3.small\",\n    engine_version=\"7.1\",\n    snapshot_window=\"04:00-13:00\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mycaches = new Duplocloud.EcacheInstance(\"mycaches\", new()\n    {\n        TenantId = tenant.Id,\n        Name = \"mycache\",\n        CacheType = 0,\n        Replicas = 2,\n        Size = \"cache.t3.small\",\n        EngineVersion = \"7.1\",\n        SnapshotWindow = \"04:00-13:00\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewEcacheInstance(ctx, \"mycaches\", \u0026duplocloud.EcacheInstanceArgs{\n\t\t\tTenantId:       pulumi.Any(tenant.Id),\n\t\t\tName:           pulumi.String(\"mycache\"),\n\t\t\tCacheType:      pulumi.Int(0),\n\t\t\tReplicas:       pulumi.Int(2),\n\t\t\tSize:           pulumi.String(\"cache.t3.small\"),\n\t\t\tEngineVersion:  pulumi.String(\"7.1\"),\n\t\t\tSnapshotWindow: pulumi.String(\"04:00-13:00\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.EcacheInstance;\nimport com.pulumi.duplocloud.EcacheInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mycaches = new EcacheInstance(\"mycaches\", EcacheInstanceArgs.builder()\n            .tenantId(tenant.id())\n            .name(\"mycache\")\n            .cacheType(0)\n            .replicas(2)\n            .size(\"cache.t3.small\")\n            .engineVersion(\"7.1\")\n            .snapshotWindow(\"04:00-13:00\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mycaches:\n    type: duplocloud:EcacheInstance\n    properties:\n      tenantId: ${tenant.id}\n      name: mycache\n      cacheType: 0\n      replicas: 2\n      size: cache.t3.small\n      engineVersion: '7.1'\n      snapshotWindow: 04:00-13:00\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS ElastiCache cluster\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the AWS ElastiCache cluster\n\n#\n\n```sh\n$ pulumi import duplocloud:index/ecacheInstance:EcacheInstance mycluster v2/subscriptions/*TENANT_ID*/ECacheDBInstance/*SHORT_NAME*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN of the elasticache instance.\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "Set a password for authenticating to the ElastiCache instance.  Only supported if `encryption_in_transit` is to to `true`.\n"
                },
                "automaticFailoverEnabled": {
                    "type": "boolean",
                    "description": "Enables automatic failover.\n"
                },
                "cacheType": {
                    "type": "integer",
                    "description": "The numerical index of elasticache instance type. Should be one of: - `0` : Redis - `1` : Memcache\n"
                },
                "enableClusterMode": {
                    "type": "boolean",
                    "description": "Flag to enable/disable redis cluster mode.\n"
                },
                "encryptionAtRest": {
                    "type": "boolean",
                    "description": "Enables encryption-at-rest.\n"
                },
                "encryptionInTransit": {
                    "type": "boolean",
                    "description": "Enables encryption-in-transit.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the elasticache instance.\n"
                },
                "engineVersion": {
                    "type": "string",
                    "description": "The engine version of the elastic instance. See AWS documentation for the [available Redis instance\ntypes](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/supported-engine-versions.html) or the [available\nMemcached instance\ntypes](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/supported-engine-versions-mc.html).\n"
                },
                "host": {
                    "type": "string",
                    "description": "The DNS hostname of the elasticache instance.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The full name of the elasticache instance.\n"
                },
                "instanceStatus": {
                    "type": "string",
                    "description": "The status of the elasticache instance.\n"
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "The globally unique identifier for the key.\n"
                },
                "logDeliveryConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/EcacheInstanceLogDeliveryConfiguration:EcacheInstanceLogDeliveryConfiguration"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the elasticache instance.  Duplo will add a prefix to the name.  You can retrieve the full name from the `identifier` attribute.\n"
                },
                "numberOfShards": {
                    "type": "integer",
                    "description": "The number of shards to create. Applicable only if enable_cluster_mode is set to true\n"
                },
                "parameterGroupName": {
                    "type": "string",
                    "description": "The REDIS parameter group to supply.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The listening port of the elasticache instance.\n"
                },
                "replicas": {
                    "type": "integer",
                    "description": "The number of replicas to create. Supported number of replicas is 1 to 6\n"
                },
                "size": {
                    "type": "string",
                    "description": "The instance type of the elasticache instance.\nSee AWS documentation for the [available instance types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html).\n"
                },
                "snapshotArns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify the ARN of a Redis RDB snapshot file stored in Amazon S3. User should have the access to export snapshot to s3\nbucket. One can find steps to provide access to export snapshot to s3 on following link\nhttps://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html\n"
                },
                "snapshotName": {
                    "type": "string",
                    "description": "Select the snapshot/backup you want to use for creating redis.\n"
                },
                "snapshotRetentionLimit": {
                    "type": "integer",
                    "description": "Specify retention limit in days. Accepted values - 1-35.\n"
                },
                "snapshotWindow": {
                    "type": "string",
                    "description": "Specify snapshot window limit The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of\nyour node group (shard). Example: 05:00-09:00. If you do not specify this parameter, ElastiCache automatically chooses\nan appropriate time range.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the elasticache instance will be created in.\n"
                }
            },
            "required": [
                "arn",
                "enableClusterMode",
                "endpoint",
                "host",
                "identifier",
                "instanceStatus",
                "kmsKeyId",
                "name",
                "numberOfShards",
                "parameterGroupName",
                "port",
                "size",
                "snapshotArns",
                "snapshotName",
                "snapshotRetentionLimit",
                "snapshotWindow",
                "tenantId"
            ],
            "inputProperties": {
                "authToken": {
                    "type": "string",
                    "description": "Set a password for authenticating to the ElastiCache instance.  Only supported if `encryption_in_transit` is to to `true`.\n",
                    "willReplaceOnChanges": true
                },
                "automaticFailoverEnabled": {
                    "type": "boolean",
                    "description": "Enables automatic failover.\n",
                    "willReplaceOnChanges": true
                },
                "cacheType": {
                    "type": "integer",
                    "description": "The numerical index of elasticache instance type. Should be one of: - `0` : Redis - `1` : Memcache\n",
                    "willReplaceOnChanges": true
                },
                "enableClusterMode": {
                    "type": "boolean",
                    "description": "Flag to enable/disable redis cluster mode.\n"
                },
                "encryptionAtRest": {
                    "type": "boolean",
                    "description": "Enables encryption-at-rest.\n",
                    "willReplaceOnChanges": true
                },
                "encryptionInTransit": {
                    "type": "boolean",
                    "description": "Enables encryption-in-transit.\n",
                    "willReplaceOnChanges": true
                },
                "engineVersion": {
                    "type": "string",
                    "description": "The engine version of the elastic instance. See AWS documentation for the [available Redis instance\ntypes](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/supported-engine-versions.html) or the [available\nMemcached instance\ntypes](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/supported-engine-versions-mc.html).\n",
                    "willReplaceOnChanges": true
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "The globally unique identifier for the key.\n",
                    "willReplaceOnChanges": true
                },
                "logDeliveryConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/EcacheInstanceLogDeliveryConfiguration:EcacheInstanceLogDeliveryConfiguration"
                    },
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the elasticache instance.  Duplo will add a prefix to the name.  You can retrieve the full name from the `identifier` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "numberOfShards": {
                    "type": "integer",
                    "description": "The number of shards to create. Applicable only if enable_cluster_mode is set to true\n"
                },
                "parameterGroupName": {
                    "type": "string",
                    "description": "The REDIS parameter group to supply.\n",
                    "willReplaceOnChanges": true
                },
                "replicas": {
                    "type": "integer",
                    "description": "The number of replicas to create. Supported number of replicas is 1 to 6\n",
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "string",
                    "description": "The instance type of the elasticache instance.\nSee AWS documentation for the [available instance types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html).\n",
                    "willReplaceOnChanges": true
                },
                "snapshotArns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify the ARN of a Redis RDB snapshot file stored in Amazon S3. User should have the access to export snapshot to s3\nbucket. One can find steps to provide access to export snapshot to s3 on following link\nhttps://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html\n"
                },
                "snapshotName": {
                    "type": "string",
                    "description": "Select the snapshot/backup you want to use for creating redis.\n"
                },
                "snapshotRetentionLimit": {
                    "type": "integer",
                    "description": "Specify retention limit in days. Accepted values - 1-35.\n"
                },
                "snapshotWindow": {
                    "type": "string",
                    "description": "Specify snapshot window limit The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of\nyour node group (shard). Example: 05:00-09:00. If you do not specify this parameter, ElastiCache automatically chooses\nan appropriate time range.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the elasticache instance will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "size",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EcacheInstance resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the elasticache instance.\n"
                    },
                    "authToken": {
                        "type": "string",
                        "description": "Set a password for authenticating to the ElastiCache instance.  Only supported if `encryption_in_transit` is to to `true`.\n",
                        "willReplaceOnChanges": true
                    },
                    "automaticFailoverEnabled": {
                        "type": "boolean",
                        "description": "Enables automatic failover.\n",
                        "willReplaceOnChanges": true
                    },
                    "cacheType": {
                        "type": "integer",
                        "description": "The numerical index of elasticache instance type. Should be one of: - `0` : Redis - `1` : Memcache\n",
                        "willReplaceOnChanges": true
                    },
                    "enableClusterMode": {
                        "type": "boolean",
                        "description": "Flag to enable/disable redis cluster mode.\n"
                    },
                    "encryptionAtRest": {
                        "type": "boolean",
                        "description": "Enables encryption-at-rest.\n",
                        "willReplaceOnChanges": true
                    },
                    "encryptionInTransit": {
                        "type": "boolean",
                        "description": "Enables encryption-in-transit.\n",
                        "willReplaceOnChanges": true
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the elasticache instance.\n"
                    },
                    "engineVersion": {
                        "type": "string",
                        "description": "The engine version of the elastic instance. See AWS documentation for the [available Redis instance\ntypes](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/supported-engine-versions.html) or the [available\nMemcached instance\ntypes](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/supported-engine-versions-mc.html).\n",
                        "willReplaceOnChanges": true
                    },
                    "host": {
                        "type": "string",
                        "description": "The DNS hostname of the elasticache instance.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "The full name of the elasticache instance.\n"
                    },
                    "instanceStatus": {
                        "type": "string",
                        "description": "The status of the elasticache instance.\n"
                    },
                    "kmsKeyId": {
                        "type": "string",
                        "description": "The globally unique identifier for the key.\n",
                        "willReplaceOnChanges": true
                    },
                    "logDeliveryConfigurations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/EcacheInstanceLogDeliveryConfiguration:EcacheInstanceLogDeliveryConfiguration"
                        },
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the elasticache instance.  Duplo will add a prefix to the name.  You can retrieve the full name from the `identifier` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "numberOfShards": {
                        "type": "integer",
                        "description": "The number of shards to create. Applicable only if enable_cluster_mode is set to true\n"
                    },
                    "parameterGroupName": {
                        "type": "string",
                        "description": "The REDIS parameter group to supply.\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "The listening port of the elasticache instance.\n"
                    },
                    "replicas": {
                        "type": "integer",
                        "description": "The number of replicas to create. Supported number of replicas is 1 to 6\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "The instance type of the elasticache instance.\nSee AWS documentation for the [available instance types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html).\n",
                        "willReplaceOnChanges": true
                    },
                    "snapshotArns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specify the ARN of a Redis RDB snapshot file stored in Amazon S3. User should have the access to export snapshot to s3\nbucket. One can find steps to provide access to export snapshot to s3 on following link\nhttps://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html\n"
                    },
                    "snapshotName": {
                        "type": "string",
                        "description": "Select the snapshot/backup you want to use for creating redis.\n"
                    },
                    "snapshotRetentionLimit": {
                        "type": "integer",
                        "description": "Specify retention limit in days. Accepted values - 1-35.\n"
                    },
                    "snapshotWindow": {
                        "type": "string",
                        "description": "Specify snapshot window limit The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of\nyour node group (shard). Example: 05:00-09:00. If you do not specify this parameter, ElastiCache automatically chooses\nan appropriate time range.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the elasticache instance will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/ecsService:EcsService": {
            "description": "`duplocloud.EcsService` manages a Amazon ECS service in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst myservice = new duplocloud.EcsTaskDefinition(\"myservice\", {});\n// Deploy NGINX using ECS\nconst myserviceEcsService = new duplocloud.EcsService(\"myservice\", {\n    tenantId: myapp.tenantId,\n    taskDefinition: myservice.arn,\n    replicas: 2,\n    loadBalancers: [{\n        lbType: 1,\n        port: \"8080\",\n        externalPort: 80,\n        protocol: \"HTTP\",\n        enableAccessLogs: false,\n        dropInvalidHeaders: true,\n        healthCheckUrl: \"https://example.healthcheckurl.com/healthcheck\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmyservice = duplocloud.EcsTaskDefinition(\"myservice\")\n# Deploy NGINX using ECS\nmyservice_ecs_service = duplocloud.EcsService(\"myservice\",\n    tenant_id=myapp.tenant_id,\n    task_definition=myservice.arn,\n    replicas=2,\n    load_balancers=[{\n        \"lb_type\": 1,\n        \"port\": \"8080\",\n        \"external_port\": 80,\n        \"protocol\": \"HTTP\",\n        \"enable_access_logs\": False,\n        \"drop_invalid_headers\": True,\n        \"health_check_url\": \"https://example.healthcheckurl.com/healthcheck\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var myservice = new Duplocloud.EcsTaskDefinition(\"myservice\");\n\n    // Deploy NGINX using ECS\n    var myserviceEcsService = new Duplocloud.EcsService(\"myservice\", new()\n    {\n        TenantId = myapp.TenantId,\n        TaskDefinition = myservice.Arn,\n        Replicas = 2,\n        LoadBalancers = new[]\n        {\n            new Duplocloud.Inputs.EcsServiceLoadBalancerArgs\n            {\n                LbType = 1,\n                Port = \"8080\",\n                ExternalPort = 80,\n                Protocol = \"HTTP\",\n                EnableAccessLogs = false,\n                DropInvalidHeaders = true,\n                HealthCheckUrl = \"https://example.healthcheckurl.com/healthcheck\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyservice, err := duplocloud.NewEcsTaskDefinition(ctx, \"myservice\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Deploy NGINX using ECS\n\t\t_, err = duplocloud.NewEcsService(ctx, \"myservice\", \u0026duplocloud.EcsServiceArgs{\n\t\t\tTenantId:       myapp.TenantId,\n\t\t\tTaskDefinition: myservice.Arn,\n\t\t\tReplicas:       pulumi.Int(2),\n\t\t\tLoadBalancers: duplocloud.EcsServiceLoadBalancerArray{\n\t\t\t\t\u0026duplocloud.EcsServiceLoadBalancerArgs{\n\t\t\t\t\tLbType:             pulumi.Int(1),\n\t\t\t\t\tPort:               pulumi.String(\"8080\"),\n\t\t\t\t\tExternalPort:       pulumi.Int(80),\n\t\t\t\t\tProtocol:           pulumi.String(\"HTTP\"),\n\t\t\t\t\tEnableAccessLogs:   pulumi.Bool(false),\n\t\t\t\t\tDropInvalidHeaders: pulumi.Bool(true),\n\t\t\t\t\tHealthCheckUrl:     pulumi.String(\"https://example.healthcheckurl.com/healthcheck\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.EcsTaskDefinition;\nimport com.pulumi.duplocloud.EcsService;\nimport com.pulumi.duplocloud.EcsServiceArgs;\nimport com.pulumi.duplocloud.inputs.EcsServiceLoadBalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var myservice = new EcsTaskDefinition(\"myservice\");\n\n        // Deploy NGINX using ECS\n        var myserviceEcsService = new EcsService(\"myserviceEcsService\", EcsServiceArgs.builder()\n            .tenantId(myapp.tenantId())\n            .taskDefinition(myservice.arn())\n            .replicas(2)\n            .loadBalancers(EcsServiceLoadBalancerArgs.builder()\n                .lbType(1)\n                .port(\"8080\")\n                .externalPort(80)\n                .protocol(\"HTTP\")\n                .enableAccessLogs(false)\n                .dropInvalidHeaders(true)\n                .healthCheckUrl(\"https://example.healthcheckurl.com/healthcheck\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  myservice:\n    type: duplocloud:EcsTaskDefinition\n  # Deploy NGINX using ECS\n  myserviceEcsService:\n    type: duplocloud:EcsService\n    name: myservice\n    properties:\n      tenantId: ${myapp.tenantId}\n      taskDefinition: ${myservice.arn}\n      replicas: 2\n      loadBalancers:\n        - lbType: 1\n          port: '8080'\n          externalPort: 80\n          protocol: HTTP\n          enableAccessLogs: false\n          dropInvalidHeaders: true\n          healthCheckUrl: https://example.healthcheckurl.com/healthcheck\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing service\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the short name of the service\n\n#\n\n```sh\n$ pulumi import duplocloud:index/ecsService:EcsService myservice v2/subscriptions/*TENANT_ID*/EcsServiceApiV2/*NAME*\n```\n\n",
            "properties": {
                "capacityProviderStrategies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/EcsServiceCapacityProviderStrategy:EcsServiceCapacityProviderStrategy"
                    }
                },
                "dnsPrfx": {
                    "type": "string",
                    "description": "The DNS prefix to assign to this service's load balancer.\n"
                },
                "healthCheckGracePeriodSeconds": {
                    "type": "integer"
                },
                "index": {
                    "type": "integer",
                    "description": "The index of the ecs service.\n"
                },
                "isTargetGroupOnly": {
                    "type": "boolean"
                },
                "loadBalancers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/EcsServiceLoadBalancer:EcsServiceLoadBalancer"
                    },
                    "description": "Zero or more load balancer configurations to associate with this service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service to create.\n"
                },
                "oldTaskDefinitionBufferSize": {
                    "type": "integer",
                    "description": "The number of older task definitions to retain in AWS.\n"
                },
                "replicas": {
                    "type": "integer",
                    "description": "The number of container replicas to create.\n"
                },
                "targetGroupArns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "taskDefinition": {
                    "type": "string",
                    "description": "The ARN of the task definition to use.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the service will be created in.\n"
                },
                "waitUntilTargetsReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until all target groups are created for ecs service, after creation.\n"
                }
            },
            "required": [
                "capacityProviderStrategies",
                "index",
                "name",
                "replicas",
                "targetGroupArns",
                "taskDefinition",
                "tenantId"
            ],
            "inputProperties": {
                "capacityProviderStrategies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/EcsServiceCapacityProviderStrategy:EcsServiceCapacityProviderStrategy"
                    }
                },
                "dnsPrfx": {
                    "type": "string",
                    "description": "The DNS prefix to assign to this service's load balancer.\n"
                },
                "healthCheckGracePeriodSeconds": {
                    "type": "integer"
                },
                "isTargetGroupOnly": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "loadBalancers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/EcsServiceLoadBalancer:EcsServiceLoadBalancer"
                    },
                    "description": "Zero or more load balancer configurations to associate with this service.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service to create.\n",
                    "willReplaceOnChanges": true
                },
                "oldTaskDefinitionBufferSize": {
                    "type": "integer",
                    "description": "The number of older task definitions to retain in AWS.\n"
                },
                "replicas": {
                    "type": "integer",
                    "description": "The number of container replicas to create.\n"
                },
                "taskDefinition": {
                    "type": "string",
                    "description": "The ARN of the task definition to use.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the service will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilTargetsReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until all target groups are created for ecs service, after creation.\n"
                }
            },
            "requiredInputs": [
                "replicas",
                "taskDefinition",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EcsService resources.\n",
                "properties": {
                    "capacityProviderStrategies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/EcsServiceCapacityProviderStrategy:EcsServiceCapacityProviderStrategy"
                        }
                    },
                    "dnsPrfx": {
                        "type": "string",
                        "description": "The DNS prefix to assign to this service's load balancer.\n"
                    },
                    "healthCheckGracePeriodSeconds": {
                        "type": "integer"
                    },
                    "index": {
                        "type": "integer",
                        "description": "The index of the ecs service.\n"
                    },
                    "isTargetGroupOnly": {
                        "type": "boolean",
                        "willReplaceOnChanges": true
                    },
                    "loadBalancers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/EcsServiceLoadBalancer:EcsServiceLoadBalancer"
                        },
                        "description": "Zero or more load balancer configurations to associate with this service.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "oldTaskDefinitionBufferSize": {
                        "type": "integer",
                        "description": "The number of older task definitions to retain in AWS.\n"
                    },
                    "replicas": {
                        "type": "integer",
                        "description": "The number of container replicas to create.\n"
                    },
                    "targetGroupArns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "taskDefinition": {
                        "type": "string",
                        "description": "The ARN of the task definition to use.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the service will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitUntilTargetsReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until all target groups are created for ecs service, after creation.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/ecsTaskDefinition:EcsTaskDefinition": {
            "description": "`duplocloud.EcsTaskDefinition` manages a Amazon ECS task definition in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\n// Create a task definition for NGINX using ECS\nconst myservice = new duplocloud.EcsTaskDefinition(\"myservice\", {\n    tenantId: myapp.tenantId,\n    family: \"duploservices-default-myservice\",\n    containerDefinitions: JSON.stringify([{\n        Name: \"default\",\n        Image: \"nginx:latest\",\n        Environment: [{\n            Name: \"NGINX_HOST\",\n            Value: \"foo\",\n        }],\n        PortMappings: [{\n            ContainerPort: \"80\",\n            HostPort: \"80\",\n            Protocol: {\n                Value: \"tcp\",\n            },\n        }],\n    }]),\n    cpu: \"256\",\n    memory: \"1024\",\n    requiresCompatibilities: [\"FARGATE\"],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\n# Create a task definition for NGINX using ECS\nmyservice = duplocloud.EcsTaskDefinition(\"myservice\",\n    tenant_id=myapp.tenant_id,\n    family=\"duploservices-default-myservice\",\n    container_definitions=json.dumps([{\n        \"Name\": \"default\",\n        \"Image\": \"nginx:latest\",\n        \"Environment\": [{\n            \"Name\": \"NGINX_HOST\",\n            \"Value\": \"foo\",\n        }],\n        \"PortMappings\": [{\n            \"ContainerPort\": \"80\",\n            \"HostPort\": \"80\",\n            \"Protocol\": {\n                \"Value\": \"tcp\",\n            },\n        }],\n    }]),\n    cpu=\"256\",\n    memory=\"1024\",\n    requires_compatibilities=[\"FARGATE\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    // Create a task definition for NGINX using ECS\n    var myservice = new Duplocloud.EcsTaskDefinition(\"myservice\", new()\n    {\n        TenantId = myapp.TenantId,\n        Family = \"duploservices-default-myservice\",\n        ContainerDefinitions = JsonSerializer.Serialize(new[]\n        {\n            new Dictionary\u003cstring, object?\u003e\n            {\n                [\"Name\"] = \"default\",\n                [\"Image\"] = \"nginx:latest\",\n                [\"Environment\"] = new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"Name\"] = \"NGINX_HOST\",\n                        [\"Value\"] = \"foo\",\n                    },\n                },\n                [\"PortMappings\"] = new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"ContainerPort\"] = \"80\",\n                        [\"HostPort\"] = \"80\",\n                        [\"Protocol\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"Value\"] = \"tcp\",\n                        },\n                    },\n                },\n            },\n        }),\n        Cpu = \"256\",\n        Memory = \"1024\",\n        RequiresCompatibilities = new[]\n        {\n            \"FARGATE\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal([]map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"Name\":  \"default\",\n\t\t\t\t\"Image\": \"nginx:latest\",\n\t\t\t\t\"Environment\": []map[string]interface{}{\n\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\"Name\":  \"NGINX_HOST\",\n\t\t\t\t\t\t\"Value\": \"foo\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"PortMappings\": []map[string]interface{}{\n\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\"ContainerPort\": \"80\",\n\t\t\t\t\t\t\"HostPort\":      \"80\",\n\t\t\t\t\t\t\"Protocol\": map[string]interface{}{\n\t\t\t\t\t\t\t\"Value\": \"tcp\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t// Create a task definition for NGINX using ECS\n\t\t_, err = duplocloud.NewEcsTaskDefinition(ctx, \"myservice\", \u0026duplocloud.EcsTaskDefinitionArgs{\n\t\t\tTenantId:             myapp.TenantId,\n\t\t\tFamily:               pulumi.String(\"duploservices-default-myservice\"),\n\t\t\tContainerDefinitions: pulumi.String(json0),\n\t\t\tCpu:                  pulumi.String(\"256\"),\n\t\t\tMemory:               pulumi.String(\"1024\"),\n\t\t\tRequiresCompatibilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"FARGATE\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.EcsTaskDefinition;\nimport com.pulumi.duplocloud.EcsTaskDefinitionArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        // Create a task definition for NGINX using ECS\n        var myservice = new EcsTaskDefinition(\"myservice\", EcsTaskDefinitionArgs.builder()\n            .tenantId(myapp.tenantId())\n            .family(\"duploservices-default-myservice\")\n            .containerDefinitions(serializeJson(\n                jsonArray(jsonObject(\n                    jsonProperty(\"Name\", \"default\"),\n                    jsonProperty(\"Image\", \"nginx:latest\"),\n                    jsonProperty(\"Environment\", jsonArray(jsonObject(\n                        jsonProperty(\"Name\", \"NGINX_HOST\"),\n                        jsonProperty(\"Value\", \"foo\")\n                    ))),\n                    jsonProperty(\"PortMappings\", jsonArray(jsonObject(\n                        jsonProperty(\"ContainerPort\", \"80\"),\n                        jsonProperty(\"HostPort\", \"80\"),\n                        jsonProperty(\"Protocol\", jsonObject(\n                            jsonProperty(\"Value\", \"tcp\")\n                        ))\n                    )))\n                ))))\n            .cpu(\"256\")\n            .memory(\"1024\")\n            .requiresCompatibilities(\"FARGATE\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  # Create a task definition for NGINX using ECS\n  myservice:\n    type: duplocloud:EcsTaskDefinition\n    properties:\n      tenantId: ${myapp.tenantId}\n      family: duploservices-default-myservice\n      containerDefinitions:\n        fn::toJSON:\n          - Name: default\n            Image: nginx:latest\n            Environment:\n              - Name: NGINX_HOST\n                Value: foo\n            PortMappings:\n              - ContainerPort: '80'\n                HostPort: '80'\n                Protocol:\n                  Value: tcp\n      cpu: '256'\n      memory: '1024'\n      requiresCompatibilities:\n        - FARGATE\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing ECS task definition\n\n - *TENANT_ID* is the tenant GUID\n\n - *ARN* is the full ARN of the task definition\n\n#\n\n```sh\n$ pulumi import duplocloud:index/ecsTaskDefinition:EcsTaskDefinition myservice subscriptions/*TENANT_ID*/EcsTaskDefinition/*ARN*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN of the task definition.\n"
                },
                "containerDefinitions": {
                    "type": "string"
                },
                "containerDefinitionsUpdates": {
                    "type": "string",
                    "description": "container_definitions updates in backend\n"
                },
                "cpu": {
                    "type": "string"
                },
                "executionRoleArn": {
                    "type": "string"
                },
                "family": {
                    "type": "string",
                    "description": "The name of the task definition to create.\n"
                },
                "fullFamilyName": {
                    "type": "string",
                    "description": "The name of the task definition to create.\n"
                },
                "inferenceAccelerators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/EcsTaskDefinitionInferenceAccelerator:EcsTaskDefinitionInferenceAccelerator"
                    }
                },
                "ipcMode": {
                    "type": "string"
                },
                "memory": {
                    "type": "string"
                },
                "networkMode": {
                    "type": "string",
                    "description": "Defaults to `awsvpc`.\n"
                },
                "pidMode": {
                    "type": "string"
                },
                "placementConstraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/EcsTaskDefinitionPlacementConstraint:EcsTaskDefinitionPlacementConstraint"
                    }
                },
                "preventTfDestroy": {
                    "type": "boolean"
                },
                "proxyConfiguration": {
                    "$ref": "#/types/duplocloud:index/EcsTaskDefinitionProxyConfiguration:EcsTaskDefinitionProxyConfiguration"
                },
                "requiresAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/EcsTaskDefinitionRequiresAttribute:EcsTaskDefinitionRequiresAttribute"
                    }
                },
                "requiresCompatibilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires compatibilities for running jobs. Valid values are [FARGATE]\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "The current revision of the task definition.\n"
                },
                "runtimePlatform": {
                    "$ref": "#/types/duplocloud:index/EcsTaskDefinitionRuntimePlatform:EcsTaskDefinitionRuntimePlatform",
                    "description": "Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the task definition.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/EcsTaskDefinitionTag:EcsTaskDefinitionTag"
                    }
                },
                "taskRoleArn": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the task definition will be created in.\n"
                },
                "volumes": {
                    "type": "string",
                    "description": "Defaults to `[]`.\n"
                }
            },
            "required": [
                "arn",
                "containerDefinitions",
                "containerDefinitionsUpdates",
                "executionRoleArn",
                "family",
                "fullFamilyName",
                "requiresAttributes",
                "requiresCompatibilities",
                "revision",
                "runtimePlatform",
                "status",
                "tags",
                "taskRoleArn",
                "tenantId"
            ],
            "inputProperties": {
                "containerDefinitions": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cpu": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "family": {
                    "type": "string",
                    "description": "The name of the task definition to create.\n",
                    "willReplaceOnChanges": true
                },
                "inferenceAccelerators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/EcsTaskDefinitionInferenceAccelerator:EcsTaskDefinitionInferenceAccelerator"
                    },
                    "willReplaceOnChanges": true
                },
                "ipcMode": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "memory": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "networkMode": {
                    "type": "string",
                    "description": "Defaults to `awsvpc`.\n",
                    "willReplaceOnChanges": true
                },
                "pidMode": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "placementConstraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/EcsTaskDefinitionPlacementConstraint:EcsTaskDefinitionPlacementConstraint"
                    },
                    "willReplaceOnChanges": true
                },
                "preventTfDestroy": {
                    "type": "boolean"
                },
                "proxyConfiguration": {
                    "$ref": "#/types/duplocloud:index/EcsTaskDefinitionProxyConfiguration:EcsTaskDefinitionProxyConfiguration",
                    "willReplaceOnChanges": true
                },
                "requiresAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/EcsTaskDefinitionRequiresAttribute:EcsTaskDefinitionRequiresAttribute"
                    },
                    "willReplaceOnChanges": true
                },
                "requiresCompatibilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires compatibilities for running jobs. Valid values are [FARGATE]\n"
                },
                "runtimePlatform": {
                    "$ref": "#/types/duplocloud:index/EcsTaskDefinitionRuntimePlatform:EcsTaskDefinitionRuntimePlatform",
                    "description": "Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the task definition will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "volumes": {
                    "type": "string",
                    "description": "Defaults to `[]`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "containerDefinitions",
                "family",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EcsTaskDefinition resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the task definition.\n"
                    },
                    "containerDefinitions": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "containerDefinitionsUpdates": {
                        "type": "string",
                        "description": "container_definitions updates in backend\n"
                    },
                    "cpu": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "executionRoleArn": {
                        "type": "string"
                    },
                    "family": {
                        "type": "string",
                        "description": "The name of the task definition to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullFamilyName": {
                        "type": "string",
                        "description": "The name of the task definition to create.\n"
                    },
                    "inferenceAccelerators": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/EcsTaskDefinitionInferenceAccelerator:EcsTaskDefinitionInferenceAccelerator"
                        },
                        "willReplaceOnChanges": true
                    },
                    "ipcMode": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "memory": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "networkMode": {
                        "type": "string",
                        "description": "Defaults to `awsvpc`.\n",
                        "willReplaceOnChanges": true
                    },
                    "pidMode": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "placementConstraints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/EcsTaskDefinitionPlacementConstraint:EcsTaskDefinitionPlacementConstraint"
                        },
                        "willReplaceOnChanges": true
                    },
                    "preventTfDestroy": {
                        "type": "boolean"
                    },
                    "proxyConfiguration": {
                        "$ref": "#/types/duplocloud:index/EcsTaskDefinitionProxyConfiguration:EcsTaskDefinitionProxyConfiguration",
                        "willReplaceOnChanges": true
                    },
                    "requiresAttributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/EcsTaskDefinitionRequiresAttribute:EcsTaskDefinitionRequiresAttribute"
                        },
                        "willReplaceOnChanges": true
                    },
                    "requiresCompatibilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Requires compatibilities for running jobs. Valid values are [FARGATE]\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "The current revision of the task definition.\n"
                    },
                    "runtimePlatform": {
                        "$ref": "#/types/duplocloud:index/EcsTaskDefinitionRuntimePlatform:EcsTaskDefinitionRuntimePlatform",
                        "description": "Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the task definition.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/EcsTaskDefinitionTag:EcsTaskDefinitionTag"
                        }
                    },
                    "taskRoleArn": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the task definition will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "volumes": {
                        "type": "string",
                        "description": "Defaults to `[]`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/emrCluster:EmrCluster": {
            "description": "`duplocloud.EmrCluster` manages an AWS emrCluster in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\n// Example 1:  EMR cluster with auto-scaling.\nconst test = new duplocloud.EmrCluster(\"test\", {\n    tenantId: myapp.tenantId,\n    name: \"emrp1\",\n    releaseLabel: \"emr-6.2.0\",\n    logUri: \"s3://name-of-my-bucket\",\n    visibleToAllUsers: true,\n    masterInstanceType: \"m4.large\",\n    slaveInstanceType: \"m4.large\",\n    instanceCount: 3,\n    keepJobFlowAliveWhenNoSteps: true,\n    applications: JSON.stringify([\n        {\n            Name: \"Hadoop\",\n        },\n        {\n            Name: \"JupyterHub\",\n        },\n        {\n            Name: \"Spark\",\n        },\n        {\n            Name: \"Hive\",\n        },\n    ]),\n    managedScalingPolicy: JSON.stringify({\n        ComputeLimits: {\n            UnitType: \"Instances\",\n            MinimumCapacityUnits: 2,\n            MaximumCapacityUnits: 5,\n            MaximumOnDemandCapacityUnits: 5,\n            MaximumCoreCapacityUnits: 3,\n        },\n    }),\n    configurations: JSON.stringify([{\n        Classification: \"hive-site\",\n        Properties: {\n            \"hive.metastore.client.factory.class\": \"com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory\",\n            \"spark.sql.catalog.my_catalog\": \"org.apache.iceberg.spark.SparkCatalog\",\n            \"spark.sql.catalog.my_catalog.catalog-impl\": \"org.apache.iceberg.aws.glue.GlueCatalog\",\n            \"spark.sql.catalog.my_catalog.io-impl\": \"org.apache.iceberg.aws.s3.S3FileIO\",\n            \"spark.sql.catalog.my_catalog.lock-impl\": \"org.apache.iceberg.aws.glue.DynamoLockManager\",\n            \"spark.sql.catalog.my_catalog.lock.table\": \"myGlueLockTable\",\n            \"spark.sql.catalog.sampledb.warehouse\": \"s3://name-of-my-bucket/parquet5\",\n        },\n    }]),\n    bootstrapActions: JSON.stringify([{\n        Name: \"InstallApacheIceberg\",\n        ScriptBootstrapAction: {\n            Args: [\n                \"name\",\n                \"value\",\n            ],\n            Path: \"s3://name-of-my-bucket/bootstrap-iceberg.sh\",\n        },\n    }]),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\n# Example 1:  EMR cluster with auto-scaling.\ntest = duplocloud.EmrCluster(\"test\",\n    tenant_id=myapp.tenant_id,\n    name=\"emrp1\",\n    release_label=\"emr-6.2.0\",\n    log_uri=\"s3://name-of-my-bucket\",\n    visible_to_all_users=True,\n    master_instance_type=\"m4.large\",\n    slave_instance_type=\"m4.large\",\n    instance_count=3,\n    keep_job_flow_alive_when_no_steps=True,\n    applications=json.dumps([\n        {\n            \"Name\": \"Hadoop\",\n        },\n        {\n            \"Name\": \"JupyterHub\",\n        },\n        {\n            \"Name\": \"Spark\",\n        },\n        {\n            \"Name\": \"Hive\",\n        },\n    ]),\n    managed_scaling_policy=json.dumps({\n        \"ComputeLimits\": {\n            \"UnitType\": \"Instances\",\n            \"MinimumCapacityUnits\": 2,\n            \"MaximumCapacityUnits\": 5,\n            \"MaximumOnDemandCapacityUnits\": 5,\n            \"MaximumCoreCapacityUnits\": 3,\n        },\n    }),\n    configurations=json.dumps([{\n        \"Classification\": \"hive-site\",\n        \"Properties\": {\n            \"hive.metastore.client.factory.class\": \"com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory\",\n            \"spark.sql.catalog.my_catalog\": \"org.apache.iceberg.spark.SparkCatalog\",\n            \"spark.sql.catalog.my_catalog.catalog-impl\": \"org.apache.iceberg.aws.glue.GlueCatalog\",\n            \"spark.sql.catalog.my_catalog.io-impl\": \"org.apache.iceberg.aws.s3.S3FileIO\",\n            \"spark.sql.catalog.my_catalog.lock-impl\": \"org.apache.iceberg.aws.glue.DynamoLockManager\",\n            \"spark.sql.catalog.my_catalog.lock.table\": \"myGlueLockTable\",\n            \"spark.sql.catalog.sampledb.warehouse\": \"s3://name-of-my-bucket/parquet5\",\n        },\n    }]),\n    bootstrap_actions=json.dumps([{\n        \"Name\": \"InstallApacheIceberg\",\n        \"ScriptBootstrapAction\": {\n            \"Args\": [\n                \"name\",\n                \"value\",\n            ],\n            \"Path\": \"s3://name-of-my-bucket/bootstrap-iceberg.sh\",\n        },\n    }]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    // Example 1:  EMR cluster with auto-scaling.\n    var test = new Duplocloud.EmrCluster(\"test\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"emrp1\",\n        ReleaseLabel = \"emr-6.2.0\",\n        LogUri = \"s3://name-of-my-bucket\",\n        VisibleToAllUsers = true,\n        MasterInstanceType = \"m4.large\",\n        SlaveInstanceType = \"m4.large\",\n        InstanceCount = 3,\n        KeepJobFlowAliveWhenNoSteps = true,\n        Applications = JsonSerializer.Serialize(new[]\n        {\n            new Dictionary\u003cstring, object?\u003e\n            {\n                [\"Name\"] = \"Hadoop\",\n            },\n            new Dictionary\u003cstring, object?\u003e\n            {\n                [\"Name\"] = \"JupyterHub\",\n            },\n            new Dictionary\u003cstring, object?\u003e\n            {\n                [\"Name\"] = \"Spark\",\n            },\n            new Dictionary\u003cstring, object?\u003e\n            {\n                [\"Name\"] = \"Hive\",\n            },\n        }),\n        ManagedScalingPolicy = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"ComputeLimits\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"UnitType\"] = \"Instances\",\n                [\"MinimumCapacityUnits\"] = 2,\n                [\"MaximumCapacityUnits\"] = 5,\n                [\"MaximumOnDemandCapacityUnits\"] = 5,\n                [\"MaximumCoreCapacityUnits\"] = 3,\n            },\n        }),\n        Configurations = JsonSerializer.Serialize(new[]\n        {\n            new Dictionary\u003cstring, object?\u003e\n            {\n                [\"Classification\"] = \"hive-site\",\n                [\"Properties\"] = new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"hive.metastore.client.factory.class\"] = \"com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory\",\n                    [\"spark.sql.catalog.my_catalog\"] = \"org.apache.iceberg.spark.SparkCatalog\",\n                    [\"spark.sql.catalog.my_catalog.catalog-impl\"] = \"org.apache.iceberg.aws.glue.GlueCatalog\",\n                    [\"spark.sql.catalog.my_catalog.io-impl\"] = \"org.apache.iceberg.aws.s3.S3FileIO\",\n                    [\"spark.sql.catalog.my_catalog.lock-impl\"] = \"org.apache.iceberg.aws.glue.DynamoLockManager\",\n                    [\"spark.sql.catalog.my_catalog.lock.table\"] = \"myGlueLockTable\",\n                    [\"spark.sql.catalog.sampledb.warehouse\"] = \"s3://name-of-my-bucket/parquet5\",\n                },\n            },\n        }),\n        BootstrapActions = JsonSerializer.Serialize(new[]\n        {\n            new Dictionary\u003cstring, object?\u003e\n            {\n                [\"Name\"] = \"InstallApacheIceberg\",\n                [\"ScriptBootstrapAction\"] = new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Args\"] = new[]\n                    {\n                        \"name\",\n                        \"value\",\n                    },\n                    [\"Path\"] = \"s3://name-of-my-bucket/bootstrap-iceberg.sh\",\n                },\n            },\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal([]map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"Name\": \"Hadoop\",\n\t\t\t},\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"Name\": \"JupyterHub\",\n\t\t\t},\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"Name\": \"Spark\",\n\t\t\t},\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"Name\": \"Hive\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"ComputeLimits\": map[string]interface{}{\n\t\t\t\t\"UnitType\":                     \"Instances\",\n\t\t\t\t\"MinimumCapacityUnits\":         2,\n\t\t\t\t\"MaximumCapacityUnits\":         5,\n\t\t\t\t\"MaximumOnDemandCapacityUnits\": 5,\n\t\t\t\t\"MaximumCoreCapacityUnits\":     3,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\ttmpJSON2, err := json.Marshal([]map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"Classification\": \"hive-site\",\n\t\t\t\t\"Properties\": map[string]interface{}{\n\t\t\t\t\t\"hive.metastore.client.factory.class\":       \"com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory\",\n\t\t\t\t\t\"spark.sql.catalog.my_catalog\":              \"org.apache.iceberg.spark.SparkCatalog\",\n\t\t\t\t\t\"spark.sql.catalog.my_catalog.catalog-impl\": \"org.apache.iceberg.aws.glue.GlueCatalog\",\n\t\t\t\t\t\"spark.sql.catalog.my_catalog.io-impl\":      \"org.apache.iceberg.aws.s3.S3FileIO\",\n\t\t\t\t\t\"spark.sql.catalog.my_catalog.lock-impl\":    \"org.apache.iceberg.aws.glue.DynamoLockManager\",\n\t\t\t\t\t\"spark.sql.catalog.my_catalog.lock.table\":   \"myGlueLockTable\",\n\t\t\t\t\t\"spark.sql.catalog.sampledb.warehouse\":      \"s3://name-of-my-bucket/parquet5\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson2 := string(tmpJSON2)\n\t\ttmpJSON3, err := json.Marshal([]map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"Name\": \"InstallApacheIceberg\",\n\t\t\t\t\"ScriptBootstrapAction\": map[string]interface{}{\n\t\t\t\t\t\"Args\": []string{\n\t\t\t\t\t\t\"name\",\n\t\t\t\t\t\t\"value\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Path\": \"s3://name-of-my-bucket/bootstrap-iceberg.sh\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson3 := string(tmpJSON3)\n\t\t// Example 1:  EMR cluster with auto-scaling.\n\t\t_, err = duplocloud.NewEmrCluster(ctx, \"test\", \u0026duplocloud.EmrClusterArgs{\n\t\t\tTenantId:                    myapp.TenantId,\n\t\t\tName:                        pulumi.String(\"emrp1\"),\n\t\t\tReleaseLabel:                pulumi.String(\"emr-6.2.0\"),\n\t\t\tLogUri:                      pulumi.String(\"s3://name-of-my-bucket\"),\n\t\t\tVisibleToAllUsers:           pulumi.Bool(true),\n\t\t\tMasterInstanceType:          pulumi.String(\"m4.large\"),\n\t\t\tSlaveInstanceType:           pulumi.String(\"m4.large\"),\n\t\t\tInstanceCount:               pulumi.Int(3),\n\t\t\tKeepJobFlowAliveWhenNoSteps: pulumi.Bool(true),\n\t\t\tApplications:                pulumi.String(json0),\n\t\t\tManagedScalingPolicy:        pulumi.String(json1),\n\t\t\tConfigurations:              pulumi.String(json2),\n\t\t\tBootstrapActions:            pulumi.String(json3),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.EmrCluster;\nimport com.pulumi.duplocloud.EmrClusterArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        // Example 1:  EMR cluster with auto-scaling.\n        var test = new EmrCluster(\"test\", EmrClusterArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"emrp1\")\n            .releaseLabel(\"emr-6.2.0\")\n            .logUri(\"s3://name-of-my-bucket\")\n            .visibleToAllUsers(true)\n            .masterInstanceType(\"m4.large\")\n            .slaveInstanceType(\"m4.large\")\n            .instanceCount(3)\n            .keepJobFlowAliveWhenNoSteps(true)\n            .applications(serializeJson(\n                jsonArray(\n                    jsonObject(\n                        jsonProperty(\"Name\", \"Hadoop\")\n                    ), \n                    jsonObject(\n                        jsonProperty(\"Name\", \"JupyterHub\")\n                    ), \n                    jsonObject(\n                        jsonProperty(\"Name\", \"Spark\")\n                    ), \n                    jsonObject(\n                        jsonProperty(\"Name\", \"Hive\")\n                    )\n                )))\n            .managedScalingPolicy(serializeJson(\n                jsonObject(\n                    jsonProperty(\"ComputeLimits\", jsonObject(\n                        jsonProperty(\"UnitType\", \"Instances\"),\n                        jsonProperty(\"MinimumCapacityUnits\", 2),\n                        jsonProperty(\"MaximumCapacityUnits\", 5),\n                        jsonProperty(\"MaximumOnDemandCapacityUnits\", 5),\n                        jsonProperty(\"MaximumCoreCapacityUnits\", 3)\n                    ))\n                )))\n            .configurations(serializeJson(\n                jsonArray(jsonObject(\n                    jsonProperty(\"Classification\", \"hive-site\"),\n                    jsonProperty(\"Properties\", jsonObject(\n                        jsonProperty(\"hive.metastore.client.factory.class\", \"com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory\"),\n                        jsonProperty(\"spark.sql.catalog.my_catalog\", \"org.apache.iceberg.spark.SparkCatalog\"),\n                        jsonProperty(\"spark.sql.catalog.my_catalog.catalog-impl\", \"org.apache.iceberg.aws.glue.GlueCatalog\"),\n                        jsonProperty(\"spark.sql.catalog.my_catalog.io-impl\", \"org.apache.iceberg.aws.s3.S3FileIO\"),\n                        jsonProperty(\"spark.sql.catalog.my_catalog.lock-impl\", \"org.apache.iceberg.aws.glue.DynamoLockManager\"),\n                        jsonProperty(\"spark.sql.catalog.my_catalog.lock.table\", \"myGlueLockTable\"),\n                        jsonProperty(\"spark.sql.catalog.sampledb.warehouse\", \"s3://name-of-my-bucket/parquet5\")\n                    ))\n                ))))\n            .bootstrapActions(serializeJson(\n                jsonArray(jsonObject(\n                    jsonProperty(\"Name\", \"InstallApacheIceberg\"),\n                    jsonProperty(\"ScriptBootstrapAction\", jsonObject(\n                        jsonProperty(\"Args\", jsonArray(\n                            \"name\", \n                            \"value\"\n                        )),\n                        jsonProperty(\"Path\", \"s3://name-of-my-bucket/bootstrap-iceberg.sh\")\n                    ))\n                ))))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  # Example 1:  EMR cluster with auto-scaling.\n  test:\n    type: duplocloud:EmrCluster\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: emrp1\n      releaseLabel: emr-6.2.0\n      logUri: s3://name-of-my-bucket\n      visibleToAllUsers: true\n      masterInstanceType: m4.large\n      slaveInstanceType: m4.large\n      instanceCount: 3\n      keepJobFlowAliveWhenNoSteps: true\n      applications:\n        fn::toJSON:\n          - Name: Hadoop\n          - Name: JupyterHub\n          - Name: Spark\n          - Name: Hive\n      managedScalingPolicy:\n        fn::toJSON:\n          ComputeLimits:\n            UnitType: Instances\n            MinimumCapacityUnits: 2\n            MaximumCapacityUnits: 5\n            MaximumOnDemandCapacityUnits: 5\n            MaximumCoreCapacityUnits: 3\n      configurations:\n        fn::toJSON:\n          - Classification: hive-site\n            Properties:\n              hive.metastore.client.factory.class: com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory\n              spark.sql.catalog.my_catalog: org.apache.iceberg.spark.SparkCatalog\n              spark.sql.catalog.my_catalog.catalog-impl: org.apache.iceberg.aws.glue.GlueCatalog\n              spark.sql.catalog.my_catalog.io-impl: org.apache.iceberg.aws.s3.S3FileIO\n              spark.sql.catalog.my_catalog.lock-impl: org.apache.iceberg.aws.glue.DynamoLockManager\n              spark.sql.catalog.my_catalog.lock.table: myGlueLockTable\n              spark.sql.catalog.sampledb.warehouse: s3://name-of-my-bucket/parquet5\n      bootstrapActions:\n        fn::toJSON:\n          - Name: InstallApacheIceberg\n            ScriptBootstrapAction:\n              Args:\n                - name\n                - value\n              Path: s3://name-of-my-bucket/bootstrap-iceberg.sh\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing EMR cluster\n\n - *TENANT_ID* is the tenant GUID\n\n - *JOB_FLOW_ID* is the EMR cluster job flow ID\n\n#\n\n```sh\n$ pulumi import duplocloud:index/emrCluster:EmrCluster mycluster *TENANT_ID*/*JOB_FLOW_ID*\n```\n\n",
            "properties": {
                "additionalInfo": {
                    "type": "string",
                    "description": "Emr - additional_info.\n"
                },
                "additionalInfoHash": {
                    "type": "string"
                },
                "applications": {
                    "type": "string",
                    "description": "Emr - list of applications to be installed.\n"
                },
                "applicationsHash": {
                    "type": "string"
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN of the emrCluster.\n"
                },
                "bootstrapActions": {
                    "type": "string",
                    "description": "Emr - list of bootstrap_actions to be installed.\n"
                },
                "bootstrapActionsHash": {
                    "type": "string"
                },
                "configurations": {
                    "type": "string",
                    "description": "Emr - list of application configurations to be updated.\n"
                },
                "configurationsHash": {
                    "type": "string"
                },
                "customAmiId": {
                    "type": "string",
                    "description": "EMR CustomAmiId.\n"
                },
                "ebsRootVolumeSize": {
                    "type": "integer",
                    "description": "Emr Cluster Ec2 ebs*root*volume_size settings.\n"
                },
                "fullName": {
                    "type": "string",
                    "description": "full_name - Duplo will add a prefix to the name.\n"
                },
                "instanceCount": {
                    "type": "integer",
                    "description": "Emr Instance Count.\n"
                },
                "instanceFleets": {
                    "type": "string",
                    "description": "Emr - instance_fleets.\n"
                },
                "instanceFleetsHash": {
                    "type": "string"
                },
                "instanceGroups": {
                    "type": "string",
                    "description": "Emr - instance_groups.\n"
                },
                "instanceGroupsHash": {
                    "type": "string"
                },
                "jobFlowId": {
                    "type": "string",
                    "description": "job flow id.\n"
                },
                "keepJobFlowAliveWhenNoSteps": {
                    "type": "boolean",
                    "description": "Keep Job Flow Alive When No Steps. Emr Cluster will be terminated if true. Defaults to `true`.\n"
                },
                "logUri": {
                    "type": "string",
                    "description": "S3 bucket path for logs.\n"
                },
                "managedScalingPolicy": {
                    "type": "string",
                    "description": "Emr - managed*scaling*policy.\n"
                },
                "managedScalingPolicyHash": {
                    "type": "string"
                },
                "masterInstanceType": {
                    "type": "string",
                    "description": "Emr MasterInstanceType. Supported InstanceTypes e.g. m4.large\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the emrCluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "releaseLabel": {
                    "type": "string",
                    "description": "EMR ReleaseLabel.\n"
                },
                "scaleDownBehavior": {
                    "type": "string",
                    "description": "Emr scale*down*behavior. Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.\n"
                },
                "slaveInstanceType": {
                    "type": "string",
                    "description": "Emr SlaveInstanceType. Supported InstanceTypes e.g. m4.large\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the emrCluster.\n"
                },
                "stepConcurrencyLevel": {
                    "type": "integer",
                    "description": "Emr Cluster step*concurrency*level settings. Defaults to `1`.\n"
                },
                "steps": {
                    "type": "string",
                    "description": "Emr - list of steps to be run after cluster is ready.\n"
                },
                "stepsHash": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the emrCluster will be created in.\n"
                },
                "terminationProtection": {
                    "type": "boolean",
                    "description": "Emr termination protection setting.\n"
                },
                "visibleToAllUsers": {
                    "type": "boolean",
                    "description": "Emr Cluster visible to all users settings.\n"
                }
            },
            "required": [
                "additionalInfoHash",
                "applicationsHash",
                "arn",
                "bootstrapActionsHash",
                "configurationsHash",
                "fullName",
                "instanceFleetsHash",
                "instanceGroupsHash",
                "jobFlowId",
                "managedScalingPolicyHash",
                "name",
                "releaseLabel",
                "status",
                "stepsHash",
                "tenantId"
            ],
            "inputProperties": {
                "additionalInfo": {
                    "type": "string",
                    "description": "Emr - additional_info.\n",
                    "willReplaceOnChanges": true
                },
                "applications": {
                    "type": "string",
                    "description": "Emr - list of applications to be installed.\n",
                    "willReplaceOnChanges": true
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN of the emrCluster.\n"
                },
                "bootstrapActions": {
                    "type": "string",
                    "description": "Emr - list of bootstrap_actions to be installed.\n",
                    "willReplaceOnChanges": true
                },
                "configurations": {
                    "type": "string",
                    "description": "Emr - list of application configurations to be updated.\n",
                    "willReplaceOnChanges": true
                },
                "customAmiId": {
                    "type": "string",
                    "description": "EMR CustomAmiId.\n",
                    "willReplaceOnChanges": true
                },
                "ebsRootVolumeSize": {
                    "type": "integer",
                    "description": "Emr Cluster Ec2 ebs*root*volume_size settings.\n",
                    "willReplaceOnChanges": true
                },
                "fullName": {
                    "type": "string",
                    "description": "full_name - Duplo will add a prefix to the name.\n"
                },
                "instanceCount": {
                    "type": "integer",
                    "description": "Emr Instance Count.\n",
                    "willReplaceOnChanges": true
                },
                "instanceFleets": {
                    "type": "string",
                    "description": "Emr - instance_fleets.\n",
                    "willReplaceOnChanges": true
                },
                "instanceGroups": {
                    "type": "string",
                    "description": "Emr - instance_groups.\n",
                    "willReplaceOnChanges": true
                },
                "jobFlowId": {
                    "type": "string",
                    "description": "job flow id.\n"
                },
                "keepJobFlowAliveWhenNoSteps": {
                    "type": "boolean",
                    "description": "Keep Job Flow Alive When No Steps. Emr Cluster will be terminated if true. Defaults to `true`.\n",
                    "willReplaceOnChanges": true
                },
                "logUri": {
                    "type": "string",
                    "description": "S3 bucket path for logs.\n",
                    "willReplaceOnChanges": true
                },
                "managedScalingPolicy": {
                    "type": "string",
                    "description": "Emr - managed*scaling*policy.\n",
                    "willReplaceOnChanges": true
                },
                "masterInstanceType": {
                    "type": "string",
                    "description": "Emr MasterInstanceType. Supported InstanceTypes e.g. m4.large\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the emrCluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "releaseLabel": {
                    "type": "string",
                    "description": "EMR ReleaseLabel.\n",
                    "willReplaceOnChanges": true
                },
                "scaleDownBehavior": {
                    "type": "string",
                    "description": "Emr scale*down*behavior. Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.\n",
                    "willReplaceOnChanges": true
                },
                "slaveInstanceType": {
                    "type": "string",
                    "description": "Emr SlaveInstanceType. Supported InstanceTypes e.g. m4.large\n",
                    "willReplaceOnChanges": true
                },
                "status": {
                    "type": "string",
                    "description": "The status of the emrCluster.\n"
                },
                "stepConcurrencyLevel": {
                    "type": "integer",
                    "description": "Emr Cluster step*concurrency*level settings. Defaults to `1`.\n",
                    "willReplaceOnChanges": true
                },
                "steps": {
                    "type": "string",
                    "description": "Emr - list of steps to be run after cluster is ready.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the emrCluster will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "terminationProtection": {
                    "type": "boolean",
                    "description": "Emr termination protection setting.\n",
                    "willReplaceOnChanges": true
                },
                "visibleToAllUsers": {
                    "type": "boolean",
                    "description": "Emr Cluster visible to all users settings.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "releaseLabel",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmrCluster resources.\n",
                "properties": {
                    "additionalInfo": {
                        "type": "string",
                        "description": "Emr - additional_info.\n",
                        "willReplaceOnChanges": true
                    },
                    "additionalInfoHash": {
                        "type": "string"
                    },
                    "applications": {
                        "type": "string",
                        "description": "Emr - list of applications to be installed.\n",
                        "willReplaceOnChanges": true
                    },
                    "applicationsHash": {
                        "type": "string"
                    },
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the emrCluster.\n"
                    },
                    "bootstrapActions": {
                        "type": "string",
                        "description": "Emr - list of bootstrap_actions to be installed.\n",
                        "willReplaceOnChanges": true
                    },
                    "bootstrapActionsHash": {
                        "type": "string"
                    },
                    "configurations": {
                        "type": "string",
                        "description": "Emr - list of application configurations to be updated.\n",
                        "willReplaceOnChanges": true
                    },
                    "configurationsHash": {
                        "type": "string"
                    },
                    "customAmiId": {
                        "type": "string",
                        "description": "EMR CustomAmiId.\n",
                        "willReplaceOnChanges": true
                    },
                    "ebsRootVolumeSize": {
                        "type": "integer",
                        "description": "Emr Cluster Ec2 ebs*root*volume_size settings.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullName": {
                        "type": "string",
                        "description": "full_name - Duplo will add a prefix to the name.\n"
                    },
                    "instanceCount": {
                        "type": "integer",
                        "description": "Emr Instance Count.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceFleets": {
                        "type": "string",
                        "description": "Emr - instance_fleets.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceFleetsHash": {
                        "type": "string"
                    },
                    "instanceGroups": {
                        "type": "string",
                        "description": "Emr - instance_groups.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceGroupsHash": {
                        "type": "string"
                    },
                    "jobFlowId": {
                        "type": "string",
                        "description": "job flow id.\n"
                    },
                    "keepJobFlowAliveWhenNoSteps": {
                        "type": "boolean",
                        "description": "Keep Job Flow Alive When No Steps. Emr Cluster will be terminated if true. Defaults to `true`.\n",
                        "willReplaceOnChanges": true
                    },
                    "logUri": {
                        "type": "string",
                        "description": "S3 bucket path for logs.\n",
                        "willReplaceOnChanges": true
                    },
                    "managedScalingPolicy": {
                        "type": "string",
                        "description": "Emr - managed*scaling*policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "managedScalingPolicyHash": {
                        "type": "string"
                    },
                    "masterInstanceType": {
                        "type": "string",
                        "description": "Emr MasterInstanceType. Supported InstanceTypes e.g. m4.large\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the emrCluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "releaseLabel": {
                        "type": "string",
                        "description": "EMR ReleaseLabel.\n",
                        "willReplaceOnChanges": true
                    },
                    "scaleDownBehavior": {
                        "type": "string",
                        "description": "Emr scale*down*behavior. Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.\n",
                        "willReplaceOnChanges": true
                    },
                    "slaveInstanceType": {
                        "type": "string",
                        "description": "Emr SlaveInstanceType. Supported InstanceTypes e.g. m4.large\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the emrCluster.\n"
                    },
                    "stepConcurrencyLevel": {
                        "type": "integer",
                        "description": "Emr Cluster step*concurrency*level settings. Defaults to `1`.\n",
                        "willReplaceOnChanges": true
                    },
                    "steps": {
                        "type": "string",
                        "description": "Emr - list of steps to be run after cluster is ready.\n",
                        "willReplaceOnChanges": true
                    },
                    "stepsHash": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the emrCluster will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "terminationProtection": {
                        "type": "boolean",
                        "description": "Emr termination protection setting.\n",
                        "willReplaceOnChanges": true
                    },
                    "visibleToAllUsers": {
                        "type": "boolean",
                        "description": "Emr Cluster visible to all users settings.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/gcpCloudFunction:GcpCloudFunction": {
            "description": "`duplocloud.GcpCloudFunction` manages a GCP cloud function in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\n// A simple cloud function with an HTTPS trigger\nconst myfunc = new duplocloud.GcpCloudFunction(\"myfunc\", {\n    tenantId: myapp.tenantId,\n    name: \"myfunc\",\n    sourceArchiveUrl: \"gs://my-function-code-bucket/myfunc.zip\",\n    entrypoint: \"my_entrypoint\",\n    runtime: \"nodejs10\",\n    availableMemoryMb: 256,\n    ingressType: 1,\n    timeout: 60,\n    environmentVariables: {\n        foo: \"bar\",\n    },\n    httpsTrigger: {},\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\n# A simple cloud function with an HTTPS trigger\nmyfunc = duplocloud.GcpCloudFunction(\"myfunc\",\n    tenant_id=myapp.tenant_id,\n    name=\"myfunc\",\n    source_archive_url=\"gs://my-function-code-bucket/myfunc.zip\",\n    entrypoint=\"my_entrypoint\",\n    runtime=\"nodejs10\",\n    available_memory_mb=256,\n    ingress_type=1,\n    timeout=60,\n    environment_variables={\n        \"foo\": \"bar\",\n    },\n    https_trigger={})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    // A simple cloud function with an HTTPS trigger\n    var myfunc = new Duplocloud.GcpCloudFunction(\"myfunc\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"myfunc\",\n        SourceArchiveUrl = \"gs://my-function-code-bucket/myfunc.zip\",\n        Entrypoint = \"my_entrypoint\",\n        Runtime = \"nodejs10\",\n        AvailableMemoryMb = 256,\n        IngressType = 1,\n        Timeout = 60,\n        EnvironmentVariables = \n        {\n            { \"foo\", \"bar\" },\n        },\n        HttpsTrigger = null,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// A simple cloud function with an HTTPS trigger\n\t\t_, err = duplocloud.NewGcpCloudFunction(ctx, \"myfunc\", \u0026duplocloud.GcpCloudFunctionArgs{\n\t\t\tTenantId:          myapp.TenantId,\n\t\t\tName:              pulumi.String(\"myfunc\"),\n\t\t\tSourceArchiveUrl:  pulumi.String(\"gs://my-function-code-bucket/myfunc.zip\"),\n\t\t\tEntrypoint:        pulumi.String(\"my_entrypoint\"),\n\t\t\tRuntime:           pulumi.String(\"nodejs10\"),\n\t\t\tAvailableMemoryMb: pulumi.Int(256),\n\t\t\tIngressType:       pulumi.Int(1),\n\t\t\tTimeout:           pulumi.Int(60),\n\t\t\tEnvironmentVariables: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t},\n\t\t\tHttpsTrigger: \u0026duplocloud.GcpCloudFunctionHttpsTriggerArgs{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.GcpCloudFunction;\nimport com.pulumi.duplocloud.GcpCloudFunctionArgs;\nimport com.pulumi.duplocloud.inputs.GcpCloudFunctionHttpsTriggerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        // A simple cloud function with an HTTPS trigger\n        var myfunc = new GcpCloudFunction(\"myfunc\", GcpCloudFunctionArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"myfunc\")\n            .sourceArchiveUrl(\"gs://my-function-code-bucket/myfunc.zip\")\n            .entrypoint(\"my_entrypoint\")\n            .runtime(\"nodejs10\")\n            .availableMemoryMb(256)\n            .ingressType(1)\n            .timeout(60)\n            .environmentVariables(Map.of(\"foo\", \"bar\"))\n            .httpsTrigger()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  # A simple cloud function with an HTTPS trigger\n  myfunc:\n    type: duplocloud:GcpCloudFunction\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: myfunc\n      sourceArchiveUrl: gs://my-function-code-bucket/myfunc.zip\n      entrypoint: my_entrypoint\n      runtime: nodejs10\n      availableMemoryMb: 256\n      ingressType: 1 # Allow All\n      timeout: 60\n      environmentVariables:\n        foo: bar\n      httpsTrigger: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing GCP cloud function\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the GCP cloud function\n\n#\n\n```sh\n$ pulumi import duplocloud:index/gcpCloudFunction:GcpCloudFunction myfunc *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "allowUnauthenticated": {
                    "type": "boolean",
                    "description": "Whether or not to allow unauthenticated invocations.\n"
                },
                "availableMemoryMb": {
                    "type": "integer",
                    "description": "The amount of memory available to the cloud function.\n"
                },
                "buildEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The build environment variables for this cloud function.\n"
                },
                "buildId": {
                    "type": "string",
                    "description": "The ID of the cloud build that built the cloud function.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cloud function.\n"
                },
                "entrypoint": {
                    "type": "string",
                    "description": "The entry point of the cloud function.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables for this cloud function.\n"
                },
                "eventTrigger": {
                    "$ref": "#/types/duplocloud:index/GcpCloudFunctionEventTrigger:GcpCloudFunctionEventTrigger",
                    "description": "Specifies an event trigger for the cloud function.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the cloud function.\n"
                },
                "httpsTrigger": {
                    "$ref": "#/types/duplocloud:index/GcpCloudFunctionHttpsTrigger:GcpCloudFunctionHttpsTrigger",
                    "description": "Specifies an HTTPS trigger for the cloud function.\n"
                },
                "ingressType": {
                    "type": "integer",
                    "description": "The numerical index of ingress type to use for this cloud function. Should be one of: - `1` : Allow all - `2` : Allow\ninternal traffic - `3` : Allow internal traffic and GCP load balancing\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The labels assigned to this cloud function.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the cloud function. Duplo will add a prefix to the name. You can retrieve the full name from the\n`fullname` attribute.\n"
                },
                "requireHttps": {
                    "type": "boolean",
                    "description": "Whether or not to require HTTPS.\n"
                },
                "runtime": {
                    "type": "string",
                    "description": "The runtime of the cloud function. Should be one of: - `nodejs10` : Node.js 10 - `nodejs12` : Node.js 12 - `nodejs14` :\nNode.js 14 - `python37` : Python 3.7 - `python38` : Python 3.8 - `python39` : Python 3.9 - `go111` : Go 1.11 - `go113` :\nGo 1.13 - `java11` : Java 11 - `dotnet3` : .NET Framework 3 - `ruby26` : Ruby 2.6 - `ruby27` : Ruby 2.7 - `nodejs6` :\nNode.js 6 (deprecated) - `nodejs8` : Node.js 8 (deprecated)\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "The SelfLink of the cloud function.\n"
                },
                "sourceArchiveUrl": {
                    "type": "string",
                    "description": "The cloud storage URL where the cloud function package is located.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the cloud function will be created in.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The execution time limit for the cloud function.\n"
                },
                "versionId": {
                    "type": "integer",
                    "description": "The current version of the cloud function.\n"
                },
                "vpcNetworkingType": {
                    "type": "integer",
                    "description": "The numerical index of the VPC networking type to use for this cloud function. Should be one of: - `0` : All traffic\nthrough the VPC - `1` : Only private traffic through the VPC - `2` : No VPC networking\n"
                }
            },
            "required": [
                "buildEnvironmentVariables",
                "buildId",
                "description",
                "entrypoint",
                "environmentVariables",
                "fullname",
                "labels",
                "name",
                "runtime",
                "selfLink",
                "sourceArchiveUrl",
                "tenantId",
                "versionId"
            ],
            "inputProperties": {
                "allowUnauthenticated": {
                    "type": "boolean",
                    "description": "Whether or not to allow unauthenticated invocations.\n"
                },
                "availableMemoryMb": {
                    "type": "integer",
                    "description": "The amount of memory available to the cloud function.\n"
                },
                "buildEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The build environment variables for this cloud function.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cloud function.\n"
                },
                "entrypoint": {
                    "type": "string",
                    "description": "The entry point of the cloud function.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables for this cloud function.\n"
                },
                "eventTrigger": {
                    "$ref": "#/types/duplocloud:index/GcpCloudFunctionEventTrigger:GcpCloudFunctionEventTrigger",
                    "description": "Specifies an event trigger for the cloud function.\n"
                },
                "httpsTrigger": {
                    "$ref": "#/types/duplocloud:index/GcpCloudFunctionHttpsTrigger:GcpCloudFunctionHttpsTrigger",
                    "description": "Specifies an HTTPS trigger for the cloud function.\n"
                },
                "ingressType": {
                    "type": "integer",
                    "description": "The numerical index of ingress type to use for this cloud function. Should be one of: - `1` : Allow all - `2` : Allow\ninternal traffic - `3` : Allow internal traffic and GCP load balancing\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The labels assigned to this cloud function.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the cloud function. Duplo will add a prefix to the name. You can retrieve the full name from the\n`fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "requireHttps": {
                    "type": "boolean",
                    "description": "Whether or not to require HTTPS.\n"
                },
                "runtime": {
                    "type": "string",
                    "description": "The runtime of the cloud function. Should be one of: - `nodejs10` : Node.js 10 - `nodejs12` : Node.js 12 - `nodejs14` :\nNode.js 14 - `python37` : Python 3.7 - `python38` : Python 3.8 - `python39` : Python 3.9 - `go111` : Go 1.11 - `go113` :\nGo 1.13 - `java11` : Java 11 - `dotnet3` : .NET Framework 3 - `ruby26` : Ruby 2.6 - `ruby27` : Ruby 2.7 - `nodejs6` :\nNode.js 6 (deprecated) - `nodejs8` : Node.js 8 (deprecated)\n"
                },
                "sourceArchiveUrl": {
                    "type": "string",
                    "description": "The cloud storage URL where the cloud function package is located.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the cloud function will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "timeout": {
                    "type": "integer",
                    "description": "The execution time limit for the cloud function.\n"
                },
                "vpcNetworkingType": {
                    "type": "integer",
                    "description": "The numerical index of the VPC networking type to use for this cloud function. Should be one of: - `0` : All traffic\nthrough the VPC - `1` : Only private traffic through the VPC - `2` : No VPC networking\n"
                }
            },
            "requiredInputs": [
                "entrypoint",
                "runtime",
                "sourceArchiveUrl",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpCloudFunction resources.\n",
                "properties": {
                    "allowUnauthenticated": {
                        "type": "boolean",
                        "description": "Whether or not to allow unauthenticated invocations.\n"
                    },
                    "availableMemoryMb": {
                        "type": "integer",
                        "description": "The amount of memory available to the cloud function.\n"
                    },
                    "buildEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The build environment variables for this cloud function.\n"
                    },
                    "buildId": {
                        "type": "string",
                        "description": "The ID of the cloud build that built the cloud function.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the cloud function.\n"
                    },
                    "entrypoint": {
                        "type": "string",
                        "description": "The entry point of the cloud function.\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables for this cloud function.\n"
                    },
                    "eventTrigger": {
                        "$ref": "#/types/duplocloud:index/GcpCloudFunctionEventTrigger:GcpCloudFunctionEventTrigger",
                        "description": "Specifies an event trigger for the cloud function.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the cloud function.\n"
                    },
                    "httpsTrigger": {
                        "$ref": "#/types/duplocloud:index/GcpCloudFunctionHttpsTrigger:GcpCloudFunctionHttpsTrigger",
                        "description": "Specifies an HTTPS trigger for the cloud function.\n"
                    },
                    "ingressType": {
                        "type": "integer",
                        "description": "The numerical index of ingress type to use for this cloud function. Should be one of: - `1` : Allow all - `2` : Allow\ninternal traffic - `3` : Allow internal traffic and GCP load balancing\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The labels assigned to this cloud function.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the cloud function. Duplo will add a prefix to the name. You can retrieve the full name from the\n`fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "requireHttps": {
                        "type": "boolean",
                        "description": "Whether or not to require HTTPS.\n"
                    },
                    "runtime": {
                        "type": "string",
                        "description": "The runtime of the cloud function. Should be one of: - `nodejs10` : Node.js 10 - `nodejs12` : Node.js 12 - `nodejs14` :\nNode.js 14 - `python37` : Python 3.7 - `python38` : Python 3.8 - `python39` : Python 3.9 - `go111` : Go 1.11 - `go113` :\nGo 1.13 - `java11` : Java 11 - `dotnet3` : .NET Framework 3 - `ruby26` : Ruby 2.6 - `ruby27` : Ruby 2.7 - `nodejs6` :\nNode.js 6 (deprecated) - `nodejs8` : Node.js 8 (deprecated)\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "The SelfLink of the cloud function.\n"
                    },
                    "sourceArchiveUrl": {
                        "type": "string",
                        "description": "The cloud storage URL where the cloud function package is located.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the cloud function will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The execution time limit for the cloud function.\n"
                    },
                    "versionId": {
                        "type": "integer",
                        "description": "The current version of the cloud function.\n"
                    },
                    "vpcNetworkingType": {
                        "type": "integer",
                        "description": "The numerical index of the VPC networking type to use for this cloud function. Should be one of: - `0` : All traffic\nthrough the VPC - `1` : Only private traffic through the VPC - `2` : No VPC networking\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/gcpFirestore:GcpFirestore": {
            "description": "`duplocloud.GcpFirestore` manages a GCP firestore in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst app = new duplocloud.GcpFirestore(\"app\", {\n    tenantId: myapp.tenantId,\n    name: \"firestore-tf-2\",\n    type: \"FIRESTORE_NATIVE\",\n    locationId: \"us-west2\",\n    enableDeleteProtection: false,\n    enablePointInTimeRecovery: false,\n});\nconst firestore_app = new duplocloud.GcpFirestore(\"firestore-app\", {});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\napp = duplocloud.GcpFirestore(\"app\",\n    tenant_id=myapp.tenant_id,\n    name=\"firestore-tf-2\",\n    type=\"FIRESTORE_NATIVE\",\n    location_id=\"us-west2\",\n    enable_delete_protection=False,\n    enable_point_in_time_recovery=False)\nfirestore_app = duplocloud.GcpFirestore(\"firestore-app\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var app = new Duplocloud.GcpFirestore(\"app\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"firestore-tf-2\",\n        Type = \"FIRESTORE_NATIVE\",\n        LocationId = \"us-west2\",\n        EnableDeleteProtection = false,\n        EnablePointInTimeRecovery = false,\n    });\n\n    var firestore_app = new Duplocloud.GcpFirestore(\"firestore-app\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewGcpFirestore(ctx, \"app\", \u0026duplocloud.GcpFirestoreArgs{\n\t\t\tTenantId:                  myapp.TenantId,\n\t\t\tName:                      pulumi.String(\"firestore-tf-2\"),\n\t\t\tType:                      pulumi.String(\"FIRESTORE_NATIVE\"),\n\t\t\tLocationId:                pulumi.String(\"us-west2\"),\n\t\t\tEnableDeleteProtection:    pulumi.Bool(false),\n\t\t\tEnablePointInTimeRecovery: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewGcpFirestore(ctx, \"firestore-app\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.GcpFirestore;\nimport com.pulumi.duplocloud.GcpFirestoreArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var app = new GcpFirestore(\"app\", GcpFirestoreArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"firestore-tf-2\")\n            .type(\"FIRESTORE_NATIVE\")\n            .locationId(\"us-west2\")\n            .enableDeleteProtection(false)\n            .enablePointInTimeRecovery(false)\n            .build());\n\n        var firestore_app = new GcpFirestore(\"firestore-app\");\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  app:\n    type: duplocloud:GcpFirestore\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: firestore-tf-2\n      type: FIRESTORE_NATIVE\n      locationId: us-west2\n      enableDeleteProtection: false\n      enablePointInTimeRecovery: false\n  firestore-app:\n    type: duplocloud:GcpFirestore\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing GCP Firestore\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the  name of the Firestore\n\n#\n\n```sh\n$ pulumi import duplocloud:index/gcpFirestore:GcpFirestore firestore-app *TENANT_ID*/*NAME*\n```\n\n",
            "properties": {
                "appEngineIntegrationMode": {
                    "type": "string"
                },
                "concurrencyMode": {
                    "type": "string"
                },
                "earliestVersionTime": {
                    "type": "string"
                },
                "enableDeleteProtection": {
                    "type": "boolean",
                    "description": "Delete protection prevents accidental deletion of firestore. Defaults to `false`.\n"
                },
                "enablePointInTimeRecovery": {
                    "type": "boolean",
                    "description": "Restores data to a specific moment in time, enhancing data protection and recovery capabilities. Defaults to `false`.\n"
                },
                "etag": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the firestore.\n"
                },
                "locationId": {
                    "type": "string",
                    "description": "Location for firestore\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the firestore will be created in.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Firestore supports type `FIRESTORE_NATIVE` and `DATASTORE_MODE`\n"
                },
                "uid": {
                    "type": "string"
                },
                "versionRetentionPeriod": {
                    "type": "string"
                }
            },
            "required": [
                "appEngineIntegrationMode",
                "concurrencyMode",
                "earliestVersionTime",
                "etag",
                "fullname",
                "locationId",
                "name",
                "tenantId",
                "type",
                "uid",
                "versionRetentionPeriod"
            ],
            "inputProperties": {
                "enableDeleteProtection": {
                    "type": "boolean",
                    "description": "Delete protection prevents accidental deletion of firestore. Defaults to `false`.\n"
                },
                "enablePointInTimeRecovery": {
                    "type": "boolean",
                    "description": "Restores data to a specific moment in time, enhancing data protection and recovery capabilities. Defaults to `false`.\n"
                },
                "locationId": {
                    "type": "string",
                    "description": "Location for firestore\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the firestore will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Firestore supports type `FIRESTORE_NATIVE` and `DATASTORE_MODE`\n"
                }
            },
            "requiredInputs": [
                "locationId",
                "tenantId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpFirestore resources.\n",
                "properties": {
                    "appEngineIntegrationMode": {
                        "type": "string"
                    },
                    "concurrencyMode": {
                        "type": "string"
                    },
                    "earliestVersionTime": {
                        "type": "string"
                    },
                    "enableDeleteProtection": {
                        "type": "boolean",
                        "description": "Delete protection prevents accidental deletion of firestore. Defaults to `false`.\n"
                    },
                    "enablePointInTimeRecovery": {
                        "type": "boolean",
                        "description": "Restores data to a specific moment in time, enhancing data protection and recovery capabilities. Defaults to `false`.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the firestore.\n"
                    },
                    "locationId": {
                        "type": "string",
                        "description": "Location for firestore\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the firestore will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Firestore supports type `FIRESTORE_NATIVE` and `DATASTORE_MODE`\n"
                    },
                    "uid": {
                        "type": "string"
                    },
                    "versionRetentionPeriod": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/gcpHost:GcpHost": {
            "description": "The duplocloud.GcpHost used to manage or configure virtual machine at gcp\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst host = new duplocloud.GcpHost(\"host\", {\n    tenantId: myapp.tenantId,\n    friendlyName: \"tfnewhost\",\n    capacity: \"e2-medium\",\n    zone: \"us-west2-a\",\n    agentPlatform: 0,\n    metadata: {\n        OsDiskSize: \"10\",\n        startup_script: \"echo \\\"Hello from test startup script!\\\" \u003e /test.txt\\n\",\n    },\n    tags: [\"networktag\"],\n    imageId: \"projects/{project}/global/images/{image}\",\n    labels: {\n        resource: \"label\",\n    },\n    userAccount: \"abc@xyz.com\",\n    allocatedPublicIp: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nhost = duplocloud.GcpHost(\"host\",\n    tenant_id=myapp.tenant_id,\n    friendly_name=\"tfnewhost\",\n    capacity=\"e2-medium\",\n    zone=\"us-west2-a\",\n    agent_platform=0,\n    metadata={\n        \"OsDiskSize\": \"10\",\n        \"startup_script\": \"echo \\\"Hello from test startup script!\\\" \u003e /test.txt\\n\",\n    },\n    tags=[\"networktag\"],\n    image_id=\"projects/{project}/global/images/{image}\",\n    labels={\n        \"resource\": \"label\",\n    },\n    user_account=\"abc@xyz.com\",\n    allocated_public_ip=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var host = new Duplocloud.GcpHost(\"host\", new()\n    {\n        TenantId = myapp.TenantId,\n        FriendlyName = \"tfnewhost\",\n        Capacity = \"e2-medium\",\n        Zone = \"us-west2-a\",\n        AgentPlatform = 0,\n        Metadata = \n        {\n            { \"OsDiskSize\", \"10\" },\n            { \"startup_script\", @\"echo \"\"Hello from test startup script!\"\" \u003e /test.txt\n\" },\n        },\n        Tags = new[]\n        {\n            \"networktag\",\n        },\n        ImageId = \"projects/{project}/global/images/{image}\",\n        Labels = \n        {\n            { \"resource\", \"label\" },\n        },\n        UserAccount = \"abc@xyz.com\",\n        AllocatedPublicIp = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewGcpHost(ctx, \"host\", \u0026duplocloud.GcpHostArgs{\n\t\t\tTenantId:      myapp.TenantId,\n\t\t\tFriendlyName:  pulumi.String(\"tfnewhost\"),\n\t\t\tCapacity:      pulumi.String(\"e2-medium\"),\n\t\t\tZone:          pulumi.String(\"us-west2-a\"),\n\t\t\tAgentPlatform: pulumi.Int(0),\n\t\t\tMetadata: pulumi.StringMap{\n\t\t\t\t\"OsDiskSize\":     pulumi.String(\"10\"),\n\t\t\t\t\"startup_script\": pulumi.String(\"echo \\\"Hello from test startup script!\\\" \u003e /test.txt\\n\"),\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"networktag\"),\n\t\t\t},\n\t\t\tImageId: pulumi.String(\"projects/{project}/global/images/{image}\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"resource\": pulumi.String(\"label\"),\n\t\t\t},\n\t\t\tUserAccount:       pulumi.String(\"abc@xyz.com\"),\n\t\t\tAllocatedPublicIp: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.GcpHost;\nimport com.pulumi.duplocloud.GcpHostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var host = new GcpHost(\"host\", GcpHostArgs.builder()\n            .tenantId(myapp.tenantId())\n            .friendlyName(\"tfnewhost\")\n            .capacity(\"e2-medium\")\n            .zone(\"us-west2-a\")\n            .agentPlatform(0)\n            .metadata(Map.ofEntries(\n                Map.entry(\"OsDiskSize\", \"10\"),\n                Map.entry(\"startup_script\", \"\"\"\necho \"Hello from test startup script!\" \u003e /test.txt\n                \"\"\")\n            ))\n            .tags(\"networktag\")\n            .imageId(\"projects/{project}/global/images/{image}\")\n            .labels(Map.of(\"resource\", \"label\"))\n            .userAccount(\"abc@xyz.com\")\n            .allocatedPublicIp(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  host:\n    type: duplocloud:GcpHost\n    properties:\n      tenantId: ${myapp.tenantId}\n      friendlyName: tfnewhost\n      capacity: e2-medium\n      zone: us-west2-a\n      agentPlatform: 0\n      metadata:\n        OsDiskSize: '10'\n        startup_script: |\n          echo \"Hello from test startup script!\" \u003e /test.txt\n      tags:\n        - networktag\n      imageId: projects/{project}/global/images/{image}\n      labels:\n        resource: label\n      userAccount: abc@xyz.com\n      allocatedPublicIp: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing AWS host\n\n - *TENANT_ID* is the tenant GUID\n\n - *INSTANCE_ID* is the GCP VM instance ID\n\n#\n\n```sh\n$ pulumi import duplocloud:index/gcpHost:GcpHost myhost v2/subscriptions/*TENANT_ID*/gcpHost/*INSTANCE_ID*\n```\n\n",
            "properties": {
                "acceleratorCount": {
                    "type": "integer",
                    "description": "The number of the guest accelerator cards exposed to this instance. Defaults to `0`.\n"
                },
                "acceleratorType": {
                    "type": "string",
                    "description": "The accelerator type resource to expose to this instance\n"
                },
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent pool that this host is added to. Defaults to `0`.\n"
                },
                "allocatedPublicIp": {
                    "type": "boolean",
                    "description": "Whether or not to allocate a public IP. Defaults to `false`.\n"
                },
                "architecture": {
                    "type": "string"
                },
                "capacity": {
                    "type": "string",
                    "description": "The machine type to create\n"
                },
                "friendlyName": {
                    "type": "string",
                    "description": "The name of the vm.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the vm.\n"
                },
                "identityRole": {
                    "type": "string"
                },
                "imageId": {
                    "type": "string",
                    "description": "The image from which to initialize this vm\n"
                },
                "instanceId": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs assigned to the vm\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Configuration, metadata used when creating the host.\\n\\n*Note: To configure OS disk size OsDiskSize can be specified as Key and its size as value, size value should be atleast 10, Similarly to added start up script one can pass the key as startup_script and startup command as its value*\n"
                },
                "privateIpAddress": {
                    "type": "string"
                },
                "publicIpAddress": {
                    "type": "string"
                },
                "selfLink": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of network tags that can be added to the vm\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the host will be created in.\n"
                },
                "userAccount": {
                    "type": "string",
                    "description": "The email id of the user.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone that the machine should be created in\n"
                }
            },
            "required": [
                "acceleratorType",
                "architecture",
                "capacity",
                "friendlyName",
                "fullname",
                "identityRole",
                "imageId",
                "instanceId",
                "labels",
                "metadata",
                "privateIpAddress",
                "publicIpAddress",
                "selfLink",
                "status",
                "tags",
                "tenantId",
                "userAccount",
                "zone"
            ],
            "inputProperties": {
                "acceleratorCount": {
                    "type": "integer",
                    "description": "The number of the guest accelerator cards exposed to this instance. Defaults to `0`.\n",
                    "willReplaceOnChanges": true
                },
                "acceleratorType": {
                    "type": "string",
                    "description": "The accelerator type resource to expose to this instance\n",
                    "willReplaceOnChanges": true
                },
                "agentPlatform": {
                    "type": "integer",
                    "description": "The numeric ID of the container agent pool that this host is added to. Defaults to `0`.\n",
                    "willReplaceOnChanges": true
                },
                "allocatedPublicIp": {
                    "type": "boolean",
                    "description": "Whether or not to allocate a public IP. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "capacity": {
                    "type": "string",
                    "description": "The machine type to create\n"
                },
                "friendlyName": {
                    "type": "string",
                    "description": "The name of the vm.\n",
                    "willReplaceOnChanges": true
                },
                "imageId": {
                    "type": "string",
                    "description": "The image from which to initialize this vm\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs assigned to the vm\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Configuration, metadata used when creating the host.\\n\\n*Note: To configure OS disk size OsDiskSize can be specified as Key and its size as value, size value should be atleast 10, Similarly to added start up script one can pass the key as startup_script and startup command as its value*\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of network tags that can be added to the vm\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the host will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "userAccount": {
                    "type": "string",
                    "description": "The email id of the user.\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone that the machine should be created in\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "capacity",
                "friendlyName",
                "imageId",
                "tenantId",
                "userAccount",
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpHost resources.\n",
                "properties": {
                    "acceleratorCount": {
                        "type": "integer",
                        "description": "The number of the guest accelerator cards exposed to this instance. Defaults to `0`.\n",
                        "willReplaceOnChanges": true
                    },
                    "acceleratorType": {
                        "type": "string",
                        "description": "The accelerator type resource to expose to this instance\n",
                        "willReplaceOnChanges": true
                    },
                    "agentPlatform": {
                        "type": "integer",
                        "description": "The numeric ID of the container agent pool that this host is added to. Defaults to `0`.\n",
                        "willReplaceOnChanges": true
                    },
                    "allocatedPublicIp": {
                        "type": "boolean",
                        "description": "Whether or not to allocate a public IP. Defaults to `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "architecture": {
                        "type": "string"
                    },
                    "capacity": {
                        "type": "string",
                        "description": "The machine type to create\n"
                    },
                    "friendlyName": {
                        "type": "string",
                        "description": "The name of the vm.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the vm.\n"
                    },
                    "identityRole": {
                        "type": "string"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The image from which to initialize this vm\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs assigned to the vm\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Configuration, metadata used when creating the host.\\n\\n*Note: To configure OS disk size OsDiskSize can be specified as Key and its size as value, size value should be atleast 10, Similarly to added start up script one can pass the key as startup_script and startup command as its value*\n"
                    },
                    "privateIpAddress": {
                        "type": "string"
                    },
                    "publicIpAddress": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of network tags that can be added to the vm\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the host will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "userAccount": {
                        "type": "string",
                        "description": "The email id of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Defaults to `true`.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone that the machine should be created in\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/gcpInfraMaintenanceWindow:GcpInfraMaintenanceWindow": {
            "description": "`duplocloud.GcpInfraMaintenanceWindow` applies maintenance window to an gcp infrastructure\n\n## Import\n\nExample: Importing an existing gcp infra maintenace window resource\n\n - *INFRANAME* Name of the infrastructure\n\n#\n\n```sh\n$ pulumi import duplocloud:index/gcpInfraMaintenanceWindow:GcpInfraMaintenanceWindow infra maintenance-window/*INFRANAME*\n```\n\n",
            "properties": {
                "dailyMaintenanceStartTime": {
                    "type": "string",
                    "description": "Time window specified for daily maintenance operations. Specify 'start_time 'in RFC3339 format HH:MM, where HH : [00-23] and MM : [00-59] GMT\n"
                },
                "exclusions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpInfraMaintenanceWindowExclusion:GcpInfraMaintenanceWindowExclusion"
                    },
                    "description": "Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows. A cluster can have up to 20 maintenance exclusions at a time\n"
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure where maintenance windows need to be scheduled.\n"
                },
                "recurringWindow": {
                    "$ref": "#/types/duplocloud:index/GcpInfraMaintenanceWindowRecurringWindow:GcpInfraMaintenanceWindowRecurringWindow"
                }
            },
            "required": [
                "infraName"
            ],
            "inputProperties": {
                "dailyMaintenanceStartTime": {
                    "type": "string",
                    "description": "Time window specified for daily maintenance operations. Specify 'start_time 'in RFC3339 format HH:MM, where HH : [00-23] and MM : [00-59] GMT\n",
                    "willReplaceOnChanges": true
                },
                "exclusions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpInfraMaintenanceWindowExclusion:GcpInfraMaintenanceWindowExclusion"
                    },
                    "description": "Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows. A cluster can have up to 20 maintenance exclusions at a time\n"
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure where maintenance windows need to be scheduled.\n",
                    "willReplaceOnChanges": true
                },
                "recurringWindow": {
                    "$ref": "#/types/duplocloud:index/GcpInfraMaintenanceWindowRecurringWindow:GcpInfraMaintenanceWindowRecurringWindow",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "infraName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpInfraMaintenanceWindow resources.\n",
                "properties": {
                    "dailyMaintenanceStartTime": {
                        "type": "string",
                        "description": "Time window specified for daily maintenance operations. Specify 'start_time 'in RFC3339 format HH:MM, where HH : [00-23] and MM : [00-59] GMT\n",
                        "willReplaceOnChanges": true
                    },
                    "exclusions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/GcpInfraMaintenanceWindowExclusion:GcpInfraMaintenanceWindowExclusion"
                        },
                        "description": "Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows. A cluster can have up to 20 maintenance exclusions at a time\n"
                    },
                    "infraName": {
                        "type": "string",
                        "description": "The name of the infrastructure where maintenance windows need to be scheduled.\n",
                        "willReplaceOnChanges": true
                    },
                    "recurringWindow": {
                        "$ref": "#/types/duplocloud:index/GcpInfraMaintenanceWindowRecurringWindow:GcpInfraMaintenanceWindowRecurringWindow",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/gcpInfraSecurityRule:GcpInfraSecurityRule": {
            "description": "`duplocloud.GcpInfraSecurityRule` applies gcp security rule to  infra\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst irule = new duplocloud.GcpInfraSecurityRule(\"irule\", {\n    infraName: \"test\",\n    name: \"test-infra-r14\",\n    description: \"test rule for infra test\",\n    portsAndProtocols: [\n        {\n            ports: [\n                \"24\",\n                \"23-89\",\n            ],\n            serviceProtocol: \"tcp\",\n        },\n        {\n            ports: [\"100\"],\n            serviceProtocol: \"udp\",\n        },\n    ],\n    sourceRanges: [\"0.0.0.0/32\"],\n    ruleType: \"ALLOW\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nirule = duplocloud.GcpInfraSecurityRule(\"irule\",\n    infra_name=\"test\",\n    name=\"test-infra-r14\",\n    description=\"test rule for infra test\",\n    ports_and_protocols=[\n        {\n            \"ports\": [\n                \"24\",\n                \"23-89\",\n            ],\n            \"service_protocol\": \"tcp\",\n        },\n        {\n            \"ports\": [\"100\"],\n            \"service_protocol\": \"udp\",\n        },\n    ],\n    source_ranges=[\"0.0.0.0/32\"],\n    rule_type=\"ALLOW\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var irule = new Duplocloud.GcpInfraSecurityRule(\"irule\", new()\n    {\n        InfraName = \"test\",\n        Name = \"test-infra-r14\",\n        Description = \"test rule for infra test\",\n        PortsAndProtocols = new[]\n        {\n            new Duplocloud.Inputs.GcpInfraSecurityRulePortsAndProtocolArgs\n            {\n                Ports = new[]\n                {\n                    \"24\",\n                    \"23-89\",\n                },\n                ServiceProtocol = \"tcp\",\n            },\n            new Duplocloud.Inputs.GcpInfraSecurityRulePortsAndProtocolArgs\n            {\n                Ports = new[]\n                {\n                    \"100\",\n                },\n                ServiceProtocol = \"udp\",\n            },\n        },\n        SourceRanges = new[]\n        {\n            \"0.0.0.0/32\",\n        },\n        RuleType = \"ALLOW\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewGcpInfraSecurityRule(ctx, \"irule\", \u0026duplocloud.GcpInfraSecurityRuleArgs{\n\t\t\tInfraName:   pulumi.String(\"test\"),\n\t\t\tName:        pulumi.String(\"test-infra-r14\"),\n\t\t\tDescription: pulumi.String(\"test rule for infra test\"),\n\t\t\tPortsAndProtocols: duplocloud.GcpInfraSecurityRulePortsAndProtocolArray{\n\t\t\t\t\u0026duplocloud.GcpInfraSecurityRulePortsAndProtocolArgs{\n\t\t\t\t\tPorts: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"24\"),\n\t\t\t\t\t\tpulumi.String(\"23-89\"),\n\t\t\t\t\t},\n\t\t\t\t\tServiceProtocol: pulumi.String(\"tcp\"),\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.GcpInfraSecurityRulePortsAndProtocolArgs{\n\t\t\t\t\tPorts: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"100\"),\n\t\t\t\t\t},\n\t\t\t\t\tServiceProtocol: pulumi.String(\"udp\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSourceRanges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"0.0.0.0/32\"),\n\t\t\t},\n\t\t\tRuleType: pulumi.String(\"ALLOW\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.GcpInfraSecurityRule;\nimport com.pulumi.duplocloud.GcpInfraSecurityRuleArgs;\nimport com.pulumi.duplocloud.inputs.GcpInfraSecurityRulePortsAndProtocolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var irule = new GcpInfraSecurityRule(\"irule\", GcpInfraSecurityRuleArgs.builder()\n            .infraName(\"test\")\n            .name(\"test-infra-r14\")\n            .description(\"test rule for infra test\")\n            .portsAndProtocols(            \n                GcpInfraSecurityRulePortsAndProtocolArgs.builder()\n                    .ports(                    \n                        \"24\",\n                        \"23-89\")\n                    .serviceProtocol(\"tcp\")\n                    .build(),\n                GcpInfraSecurityRulePortsAndProtocolArgs.builder()\n                    .ports(\"100\")\n                    .serviceProtocol(\"udp\")\n                    .build())\n            .sourceRanges(\"0.0.0.0/32\")\n            .ruleType(\"ALLOW\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  irule:\n    type: duplocloud:GcpInfraSecurityRule\n    properties:\n      infraName: test\n      name: test-infra-r14\n      description: test rule for infra test\n      portsAndProtocols:\n        - ports:\n            - '24'\n            - 23-89\n          serviceProtocol: tcp\n        - ports:\n            - '100'\n          serviceProtocol: udp\n      sourceRanges:\n        - 0.0.0.0/32\n      ruleType: ALLOW\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing S3 bucket\n\n - *INFRA_NAME* is the name of infrastructure\n\n - *RULE_NAME* is the  name of the security rule\n\n#\n\n```sh\n$ pulumi import duplocloud:index/gcpInfraSecurityRule:GcpInfraSecurityRule irule *INFRA_NAME/security-rule/*RULE_NAME*\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description related to the rule\n"
                },
                "direction": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string",
                    "description": "Duplocloud prefixed rule name\n"
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure where rule gets applied\n"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specify rule name\n"
                },
                "network": {
                    "type": "string"
                },
                "portsAndProtocols": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpInfraSecurityRulePortsAndProtocol:GcpInfraSecurityRulePortsAndProtocol"
                    }
                },
                "priority": {
                    "type": "integer"
                },
                "ruleType": {
                    "type": "string",
                    "description": "Specify type of access rule (ALLOW , DENY)\n"
                },
                "selfLink": {
                    "type": "string"
                },
                "sourceRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The lists of IPv4 or IPv6 addresses in CIDR format that specify the source of traffic for a firewall rule\n"
                },
                "sourceTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "description",
                "direction",
                "fullname",
                "infraName",
                "kind",
                "name",
                "network",
                "portsAndProtocols",
                "priority",
                "ruleType",
                "selfLink",
                "sourceRanges",
                "sourceTags"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description related to the rule\n"
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure where rule gets applied\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specify rule name\n",
                    "willReplaceOnChanges": true
                },
                "portsAndProtocols": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpInfraSecurityRulePortsAndProtocol:GcpInfraSecurityRulePortsAndProtocol"
                    }
                },
                "ruleType": {
                    "type": "string",
                    "description": "Specify type of access rule (ALLOW , DENY)\n",
                    "willReplaceOnChanges": true
                },
                "sourceRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The lists of IPv4 or IPv6 addresses in CIDR format that specify the source of traffic for a firewall rule\n"
                }
            },
            "requiredInputs": [
                "infraName",
                "portsAndProtocols",
                "ruleType",
                "sourceRanges"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpInfraSecurityRule resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description related to the rule\n"
                    },
                    "direction": {
                        "type": "string"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "Duplocloud prefixed rule name\n"
                    },
                    "infraName": {
                        "type": "string",
                        "description": "The name of the infrastructure where rule gets applied\n",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specify rule name\n",
                        "willReplaceOnChanges": true
                    },
                    "network": {
                        "type": "string"
                    },
                    "portsAndProtocols": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/GcpInfraSecurityRulePortsAndProtocol:GcpInfraSecurityRulePortsAndProtocol"
                        }
                    },
                    "priority": {
                        "type": "integer"
                    },
                    "ruleType": {
                        "type": "string",
                        "description": "Specify type of access rule (ALLOW , DENY)\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "sourceRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The lists of IPv4 or IPv6 addresses in CIDR format that specify the source of traffic for a firewall rule\n"
                    },
                    "sourceTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/gcpNodePool:GcpNodePool": {
            "description": "`duplocloud_gcp_k8_node_pools` manages a GCP Node Pool in Duplo.\n\n## Import\n\nExample: Importing an existing GCP Node Pool\n\n - *TENANT_ID* is the tenant GUID\n\n - *FULLNAME* is the  name of the Node Pool\n\n#\n\n```sh\n$ pulumi import duplocloud:index/gcpNodePool:GcpNodePool node_pool *TENANT_ID*/*FULLNAME*\n```\n\n",
            "properties": {
                "accelerators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpNodePoolAccelerator:GcpNodePoolAccelerator"
                    }
                },
                "autoRepair": {
                    "type": "boolean",
                    "description": "Whether the nodes will be automatically repaired.\n"
                },
                "autoUpgrade": {
                    "type": "boolean",
                    "description": "Whether the nodes will be automatically upgraded.\n"
                },
                "discSizeGb": {
                    "type": "integer",
                    "description": "Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the\ndefault disk size is 100GB.\n"
                },
                "discType": {
                    "type": "string",
                    "description": "Type of the disk attached to each node If unspecified, the default disk type is 'pd-standard'\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`\nattribute.\n"
                },
                "imageType": {
                    "type": "string",
                    "description": "The image type to use for this node. Note that for a given image type, the latest version of it will be used\n"
                },
                "initialNodeCount": {
                    "type": "integer",
                    "description": "The initial node count for the pool\n"
                },
                "isAutoscalingEnabled": {
                    "type": "boolean",
                    "description": "Is autoscaling enabled for this node pool.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The map of Kubernetes labels (key/value pairs) to be applied to each node.\n"
                },
                "linuxNodeConfig": {
                    "$ref": "#/types/duplocloud:index/GcpNodePoolLinuxNodeConfig:GcpNodePoolLinuxNodeConfig",
                    "description": "Parameters that can be configured on Linux nodes\n"
                },
                "locationPolicy": {
                    "type": "string",
                    "description": "Update strategy of the node pool.\n"
                },
                "machineType": {
                    "type": "string",
                    "description": "The name of a Google Compute Engine machine type. If unspecified, the default machine type is e2-medium.\n"
                },
                "maxNodeCount": {
                    "type": "integer",
                    "description": "Maximum number of nodes for one location in the NodePool. Must be \u003e= minNodeCount.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The metadata key/value pairs assigned to instances in the cluster.\n"
                },
                "minNodeCount": {
                    "type": "integer",
                    "description": "Minimum number of nodes for one location in the NodePool. Must be \u003e= 1 and \u003c= maxNodeCount.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`\nattribute.\n"
                },
                "nodePoolLoggingConfig": {
                    "$ref": "#/types/duplocloud:index/GcpNodePoolNodePoolLoggingConfig:GcpNodePoolNodePoolLoggingConfig",
                    "description": "Logging configuration.\n"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of Google API scopes to be made available on all of the node VMs under the default service account.\n"
                },
                "resourceLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Resource labels associated to node pool\n"
                },
                "spot": {
                    "type": "boolean",
                    "description": "Spot flag for enabling Spot VM\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls\nand are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpNodePoolTaint:GcpNodePoolTaint"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the node pool will be created in.\n"
                },
                "totalMaxNodeCount": {
                    "type": "integer",
                    "description": "Maximum number of nodes for one location in the NodePool. Must be \u003e= minNodeCount.\n"
                },
                "totalMinNodeCount": {
                    "type": "integer",
                    "description": "Minimum number of nodes for one location in the NodePool. Must be \u003e= 1 and \u003c= maxNodeCount.\n"
                },
                "upgradeSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpNodePoolUpgradeSetting:GcpNodePoolUpgradeSetting"
                    },
                    "description": "Upgrade settings control disruption and speed of the upgrade.\n"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Google Compute Engine zones in which the NodePool's nodes should be located.\n"
                }
            },
            "required": [
                "autoRepair",
                "autoUpgrade",
                "discSizeGb",
                "discType",
                "fullname",
                "imageType",
                "isAutoscalingEnabled",
                "labels",
                "linuxNodeConfig",
                "machineType",
                "metadata",
                "name",
                "nodePoolLoggingConfig",
                "oauthScopes",
                "resourceLabels",
                "tags",
                "tenantId",
                "upgradeSettings",
                "zones"
            ],
            "inputProperties": {
                "accelerators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpNodePoolAccelerator:GcpNodePoolAccelerator"
                    }
                },
                "autoRepair": {
                    "type": "boolean",
                    "description": "Whether the nodes will be automatically repaired.\n"
                },
                "autoUpgrade": {
                    "type": "boolean",
                    "description": "Whether the nodes will be automatically upgraded.\n"
                },
                "discSizeGb": {
                    "type": "integer",
                    "description": "Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the\ndefault disk size is 100GB.\n"
                },
                "discType": {
                    "type": "string",
                    "description": "Type of the disk attached to each node If unspecified, the default disk type is 'pd-standard'\n"
                },
                "imageType": {
                    "type": "string",
                    "description": "The image type to use for this node. Note that for a given image type, the latest version of it will be used\n"
                },
                "initialNodeCount": {
                    "type": "integer",
                    "description": "The initial node count for the pool\n"
                },
                "isAutoscalingEnabled": {
                    "type": "boolean",
                    "description": "Is autoscaling enabled for this node pool.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The map of Kubernetes labels (key/value pairs) to be applied to each node.\n"
                },
                "linuxNodeConfig": {
                    "$ref": "#/types/duplocloud:index/GcpNodePoolLinuxNodeConfig:GcpNodePoolLinuxNodeConfig",
                    "description": "Parameters that can be configured on Linux nodes\n"
                },
                "locationPolicy": {
                    "type": "string",
                    "description": "Update strategy of the node pool.\n"
                },
                "machineType": {
                    "type": "string",
                    "description": "The name of a Google Compute Engine machine type. If unspecified, the default machine type is e2-medium.\n"
                },
                "maxNodeCount": {
                    "type": "integer",
                    "description": "Maximum number of nodes for one location in the NodePool. Must be \u003e= minNodeCount.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The metadata key/value pairs assigned to instances in the cluster.\n"
                },
                "minNodeCount": {
                    "type": "integer",
                    "description": "Minimum number of nodes for one location in the NodePool. Must be \u003e= 1 and \u003c= maxNodeCount.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`\nattribute.\n",
                    "willReplaceOnChanges": true
                },
                "nodePoolLoggingConfig": {
                    "$ref": "#/types/duplocloud:index/GcpNodePoolNodePoolLoggingConfig:GcpNodePoolNodePoolLoggingConfig",
                    "description": "Logging configuration.\n"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of Google API scopes to be made available on all of the node VMs under the default service account.\n"
                },
                "resourceLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Resource labels associated to node pool\n"
                },
                "spot": {
                    "type": "boolean",
                    "description": "Spot flag for enabling Spot VM\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls\nand are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpNodePoolTaint:GcpNodePoolTaint"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the node pool will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "totalMaxNodeCount": {
                    "type": "integer",
                    "description": "Maximum number of nodes for one location in the NodePool. Must be \u003e= minNodeCount.\n"
                },
                "totalMinNodeCount": {
                    "type": "integer",
                    "description": "Minimum number of nodes for one location in the NodePool. Must be \u003e= 1 and \u003c= maxNodeCount.\n"
                },
                "upgradeSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpNodePoolUpgradeSetting:GcpNodePoolUpgradeSetting"
                    },
                    "description": "Upgrade settings control disruption and speed of the upgrade.\n"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Google Compute Engine zones in which the NodePool's nodes should be located.\n"
                }
            },
            "requiredInputs": [
                "imageType",
                "machineType",
                "tenantId",
                "zones"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpNodePool resources.\n",
                "properties": {
                    "accelerators": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/GcpNodePoolAccelerator:GcpNodePoolAccelerator"
                        }
                    },
                    "autoRepair": {
                        "type": "boolean",
                        "description": "Whether the nodes will be automatically repaired.\n"
                    },
                    "autoUpgrade": {
                        "type": "boolean",
                        "description": "Whether the nodes will be automatically upgraded.\n"
                    },
                    "discSizeGb": {
                        "type": "integer",
                        "description": "Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the\ndefault disk size is 100GB.\n"
                    },
                    "discType": {
                        "type": "string",
                        "description": "Type of the disk attached to each node If unspecified, the default disk type is 'pd-standard'\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`\nattribute.\n"
                    },
                    "imageType": {
                        "type": "string",
                        "description": "The image type to use for this node. Note that for a given image type, the latest version of it will be used\n"
                    },
                    "initialNodeCount": {
                        "type": "integer",
                        "description": "The initial node count for the pool\n"
                    },
                    "isAutoscalingEnabled": {
                        "type": "boolean",
                        "description": "Is autoscaling enabled for this node pool.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The map of Kubernetes labels (key/value pairs) to be applied to each node.\n"
                    },
                    "linuxNodeConfig": {
                        "$ref": "#/types/duplocloud:index/GcpNodePoolLinuxNodeConfig:GcpNodePoolLinuxNodeConfig",
                        "description": "Parameters that can be configured on Linux nodes\n"
                    },
                    "locationPolicy": {
                        "type": "string",
                        "description": "Update strategy of the node pool.\n"
                    },
                    "machineType": {
                        "type": "string",
                        "description": "The name of a Google Compute Engine machine type. If unspecified, the default machine type is e2-medium.\n"
                    },
                    "maxNodeCount": {
                        "type": "integer",
                        "description": "Maximum number of nodes for one location in the NodePool. Must be \u003e= minNodeCount.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The metadata key/value pairs assigned to instances in the cluster.\n"
                    },
                    "minNodeCount": {
                        "type": "integer",
                        "description": "Minimum number of nodes for one location in the NodePool. Must be \u003e= 1 and \u003c= maxNodeCount.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`\nattribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodePoolLoggingConfig": {
                        "$ref": "#/types/duplocloud:index/GcpNodePoolNodePoolLoggingConfig:GcpNodePoolNodePoolLoggingConfig",
                        "description": "Logging configuration.\n"
                    },
                    "oauthScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The set of Google API scopes to be made available on all of the node VMs under the default service account.\n"
                    },
                    "resourceLabels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Resource labels associated to node pool\n"
                    },
                    "spot": {
                        "type": "boolean",
                        "description": "Spot flag for enabling Spot VM\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls\nand are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.\n"
                    },
                    "taints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/GcpNodePoolTaint:GcpNodePoolTaint"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the node pool will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "totalMaxNodeCount": {
                        "type": "integer",
                        "description": "Maximum number of nodes for one location in the NodePool. Must be \u003e= minNodeCount.\n"
                    },
                    "totalMinNodeCount": {
                        "type": "integer",
                        "description": "Minimum number of nodes for one location in the NodePool. Must be \u003e= 1 and \u003c= maxNodeCount.\n"
                    },
                    "upgradeSettings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/GcpNodePoolUpgradeSetting:GcpNodePoolUpgradeSetting"
                        },
                        "description": "Upgrade settings control disruption and speed of the upgrade.\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Google Compute Engine zones in which the NodePool's nodes should be located.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/gcpPubsubTopic:GcpPubsubTopic": {
            "description": "`duplocloud.GcpPubsubTopic` manages a GCP pubsub topic in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst mytopic = new duplocloud.GcpPubsubTopic(\"mytopic\", {\n    tenantId: myapp.tenantId,\n    name: \"mytopic\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmytopic = duplocloud.GcpPubsubTopic(\"mytopic\",\n    tenant_id=myapp.tenant_id,\n    name=\"mytopic\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var mytopic = new Duplocloud.GcpPubsubTopic(\"mytopic\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"mytopic\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewGcpPubsubTopic(ctx, \"mytopic\", \u0026duplocloud.GcpPubsubTopicArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tName:     pulumi.String(\"mytopic\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.GcpPubsubTopic;\nimport com.pulumi.duplocloud.GcpPubsubTopicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var mytopic = new GcpPubsubTopic(\"mytopic\", GcpPubsubTopicArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"mytopic\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  mytopic:\n    type: duplocloud:GcpPubsubTopic\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: mytopic\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing GCP pubsub topic\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the GCP pubsub topic\n\n#\n\n```sh\n$ pulumi import duplocloud:index/gcpPubsubTopic:GcpPubsubTopic mytopic *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "fullname": {
                    "type": "string",
                    "description": "The full name of the pubsub topic.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The labels assigned to this pubsub topic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the pubsub topic.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "The SelfLink of the pubsub topic.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the pubsub topic will be created in.\n"
                }
            },
            "required": [
                "fullname",
                "labels",
                "name",
                "selfLink",
                "tenantId"
            ],
            "inputProperties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The labels assigned to this pubsub topic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the pubsub topic.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the pubsub topic will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpPubsubTopic resources.\n",
                "properties": {
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the pubsub topic.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The labels assigned to this pubsub topic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the pubsub topic.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "The SelfLink of the pubsub topic.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the pubsub topic will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/gcpRedisInstance:GcpRedisInstance": {
            "description": "`duplocloud.GcpRedisInstance` manages a GCP redis instance in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst redis_demo = new duplocloud.GcpRedisInstance(\"redis-demo\", {\n    tenantId: myapp.tenantId,\n    name: \"redis-demo\",\n    displayName: \"redis-demo\",\n    tier: \"BASIC\",\n    redisVersion: \"REDIS_4_0\",\n    memorySizeGb: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nredis_demo = duplocloud.GcpRedisInstance(\"redis-demo\",\n    tenant_id=myapp.tenant_id,\n    name=\"redis-demo\",\n    display_name=\"redis-demo\",\n    tier=\"BASIC\",\n    redis_version=\"REDIS_4_0\",\n    memory_size_gb=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var redis_demo = new Duplocloud.GcpRedisInstance(\"redis-demo\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"redis-demo\",\n        DisplayName = \"redis-demo\",\n        Tier = \"BASIC\",\n        RedisVersion = \"REDIS_4_0\",\n        MemorySizeGb = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewGcpRedisInstance(ctx, \"redis-demo\", \u0026duplocloud.GcpRedisInstanceArgs{\n\t\t\tTenantId:     myapp.TenantId,\n\t\t\tName:         pulumi.String(\"redis-demo\"),\n\t\t\tDisplayName:  pulumi.String(\"redis-demo\"),\n\t\t\tTier:         pulumi.String(\"BASIC\"),\n\t\t\tRedisVersion: pulumi.String(\"REDIS_4_0\"),\n\t\t\tMemorySizeGb: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.GcpRedisInstance;\nimport com.pulumi.duplocloud.GcpRedisInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var redis_demo = new GcpRedisInstance(\"redis-demo\", GcpRedisInstanceArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"redis-demo\")\n            .displayName(\"redis-demo\")\n            .tier(\"BASIC\")\n            .redisVersion(\"REDIS_4_0\")\n            .memorySizeGb(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  redis-demo:\n    type: duplocloud:GcpRedisInstance\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: redis-demo\n      displayName: redis-demo\n      tier: BASIC\n      redisVersion: REDIS_4_0\n      memorySizeGb: 1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing GCP RedisInstance\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the  name of the RedisInstance\n\n#\n\n```sh\n$ pulumi import duplocloud:index/gcpRedisInstance:GcpRedisInstance memory-cache *TENANT_ID*/*NAME*\n```\n\n",
            "properties": {
                "authEnabled": {
                    "type": "boolean",
                    "description": "Enable OSS Redis AUTH. Defaults to false (AUTH disabled).\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "User-provided name for the instance.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the of the Redis instance.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Resource labels for user-provided metadata.\n"
                },
                "memorySizeGb": {
                    "type": "integer",
                    "description": "Redis memory size in GiB.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Short name of the Redis instance. Duplo adds a prefix; retrieve the full name from `fullname`.\n"
                },
                "readReplicasEnabled": {
                    "type": "boolean",
                    "description": "Enable read replica mode (can only be set during instance creation).\n"
                },
                "redisConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Redis configuration parameters. See https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs for supported parameters.\n"
                },
                "redisVersion": {
                    "type": "string",
                    "description": "Version of Redis software. Defaults to the latest supported version.\n"
                },
                "replicaCount": {
                    "type": "integer",
                    "description": "Number of replica nodes. Valid range for Standard Tier with read replicas enabled is [1-5], default is 2. For basic tier, valid value is 0, default is 0. Defaults to `0`.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "GUID of the tenant the Redis instance will be created in.\n"
                },
                "tier": {
                    "type": "string",
                    "description": "Service tier. Must be one of ['BASIC', 'STANDARD_HA'].\n"
                },
                "transitEncryptionEnabled": {
                    "type": "boolean",
                    "description": "Enable TLS for the Redis instance. Defaults to disabled.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until redis instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "required": [
                "authEnabled",
                "displayName",
                "fullname",
                "labels",
                "memorySizeGb",
                "name",
                "readReplicasEnabled",
                "redisConfigs",
                "redisVersion",
                "tenantId",
                "tier",
                "transitEncryptionEnabled"
            ],
            "inputProperties": {
                "authEnabled": {
                    "type": "boolean",
                    "description": "Enable OSS Redis AUTH. Defaults to false (AUTH disabled).\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "User-provided name for the instance.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Resource labels for user-provided metadata.\n"
                },
                "memorySizeGb": {
                    "type": "integer",
                    "description": "Redis memory size in GiB.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Short name of the Redis instance. Duplo adds a prefix; retrieve the full name from `fullname`.\n",
                    "willReplaceOnChanges": true
                },
                "readReplicasEnabled": {
                    "type": "boolean",
                    "description": "Enable read replica mode (can only be set during instance creation).\n"
                },
                "redisConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Redis configuration parameters. See https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs for supported parameters.\n"
                },
                "redisVersion": {
                    "type": "string",
                    "description": "Version of Redis software. Defaults to the latest supported version.\n"
                },
                "replicaCount": {
                    "type": "integer",
                    "description": "Number of replica nodes. Valid range for Standard Tier with read replicas enabled is [1-5], default is 2. For basic tier, valid value is 0, default is 0. Defaults to `0`.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "GUID of the tenant the Redis instance will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "tier": {
                    "type": "string",
                    "description": "Service tier. Must be one of ['BASIC', 'STANDARD_HA'].\n",
                    "willReplaceOnChanges": true
                },
                "transitEncryptionEnabled": {
                    "type": "boolean",
                    "description": "Enable TLS for the Redis instance. Defaults to disabled.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until redis instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "memorySizeGb",
                "tenantId",
                "tier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpRedisInstance resources.\n",
                "properties": {
                    "authEnabled": {
                        "type": "boolean",
                        "description": "Enable OSS Redis AUTH. Defaults to false (AUTH disabled).\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "User-provided name for the instance.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the of the Redis instance.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Resource labels for user-provided metadata.\n"
                    },
                    "memorySizeGb": {
                        "type": "integer",
                        "description": "Redis memory size in GiB.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Short name of the Redis instance. Duplo adds a prefix; retrieve the full name from `fullname`.\n",
                        "willReplaceOnChanges": true
                    },
                    "readReplicasEnabled": {
                        "type": "boolean",
                        "description": "Enable read replica mode (can only be set during instance creation).\n"
                    },
                    "redisConfigs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Redis configuration parameters. See https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs for supported parameters.\n"
                    },
                    "redisVersion": {
                        "type": "string",
                        "description": "Version of Redis software. Defaults to the latest supported version.\n"
                    },
                    "replicaCount": {
                        "type": "integer",
                        "description": "Number of replica nodes. Valid range for Standard Tier with read replicas enabled is [1-5], default is 2. For basic tier, valid value is 0, default is 0. Defaults to `0`.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "GUID of the tenant the Redis instance will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "tier": {
                        "type": "string",
                        "description": "Service tier. Must be one of ['BASIC', 'STANDARD_HA'].\n",
                        "willReplaceOnChanges": true
                    },
                    "transitEncryptionEnabled": {
                        "type": "boolean",
                        "description": "Enable TLS for the Redis instance. Defaults to disabled.\n"
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until redis instance to be ready, after creation. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/gcpSchedulerJob:GcpSchedulerJob": {
            "description": "`duplocloud.GcpSchedulerJob` manages a GCP scheduler job in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\n// A simple scheduler job with an HTTPS target, running at 9 am daily.\nconst myjob = new duplocloud.GcpSchedulerJob(\"myjob\", {\n    tenantId: myapp.tenantId,\n    name: \"myjob\",\n    schedule: \"* 9 * * *\",\n    timezone: \"America/New_York\",\n    httpTarget: {\n        method: \"GET\",\n        uri: \"https://www.google.com\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\n# A simple scheduler job with an HTTPS target, running at 9 am daily.\nmyjob = duplocloud.GcpSchedulerJob(\"myjob\",\n    tenant_id=myapp.tenant_id,\n    name=\"myjob\",\n    schedule=\"* 9 * * *\",\n    timezone=\"America/New_York\",\n    http_target={\n        \"method\": \"GET\",\n        \"uri\": \"https://www.google.com\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    // A simple scheduler job with an HTTPS target, running at 9 am daily.\n    var myjob = new Duplocloud.GcpSchedulerJob(\"myjob\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"myjob\",\n        Schedule = \"* 9 * * *\",\n        Timezone = \"America/New_York\",\n        HttpTarget = new Duplocloud.Inputs.GcpSchedulerJobHttpTargetArgs\n        {\n            Method = \"GET\",\n            Uri = \"https://www.google.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// A simple scheduler job with an HTTPS target, running at 9 am daily.\n\t\t_, err = duplocloud.NewGcpSchedulerJob(ctx, \"myjob\", \u0026duplocloud.GcpSchedulerJobArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tName:     pulumi.String(\"myjob\"),\n\t\t\tSchedule: pulumi.String(\"* 9 * * *\"),\n\t\t\tTimezone: pulumi.String(\"America/New_York\"),\n\t\t\tHttpTarget: \u0026duplocloud.GcpSchedulerJobHttpTargetArgs{\n\t\t\t\tMethod: pulumi.String(\"GET\"),\n\t\t\t\tUri:    pulumi.String(\"https://www.google.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.GcpSchedulerJob;\nimport com.pulumi.duplocloud.GcpSchedulerJobArgs;\nimport com.pulumi.duplocloud.inputs.GcpSchedulerJobHttpTargetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        // A simple scheduler job with an HTTPS target, running at 9 am daily.\n        var myjob = new GcpSchedulerJob(\"myjob\", GcpSchedulerJobArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"myjob\")\n            .schedule(\"* 9 * * *\")\n            .timezone(\"America/New_York\")\n            .httpTarget(GcpSchedulerJobHttpTargetArgs.builder()\n                .method(\"GET\")\n                .uri(\"https://www.google.com\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  # A simple scheduler job with an HTTPS target, running at 9 am daily.\n  myjob:\n    type: duplocloud:GcpSchedulerJob\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: myjob\n      schedule: '* 9 * * *'\n      timezone: America/New_York\n      httpTarget:\n        method: GET\n        uri: https://www.google.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing GCP scheduler job\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the GCP scheduler job\n\n#\n\n```sh\n$ pulumi import duplocloud:index/gcpSchedulerJob:GcpSchedulerJob myjob *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "appEngineTarget": {
                    "$ref": "#/types/duplocloud:index/GcpSchedulerJobAppEngineTarget:GcpSchedulerJobAppEngineTarget",
                    "description": "Specifies an App Engine target for the scheduler job.\n"
                },
                "attemptDeadline": {
                    "type": "string",
                    "description": "The attempt deadline for the scheduler job.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the scheduler job.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the scheduler job.\n"
                },
                "httpTarget": {
                    "$ref": "#/types/duplocloud:index/GcpSchedulerJobHttpTarget:GcpSchedulerJobHttpTarget",
                    "description": "Specifies an HTTP target for the scheduler job.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the scheduler job.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "pubsubTarget": {
                    "$ref": "#/types/duplocloud:index/GcpSchedulerJobPubsubTarget:GcpSchedulerJobPubsubTarget",
                    "description": "Specifies a pubsub target for the scheduler job.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "The desired schedule, in cron format.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "The SelfLink of the scheduler job.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the scheduler job will be created in.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The timezone used to determine the schedule, in UNIX format\n"
                }
            },
            "required": [
                "attemptDeadline",
                "description",
                "fullname",
                "name",
                "schedule",
                "selfLink",
                "tenantId",
                "timezone"
            ],
            "inputProperties": {
                "appEngineTarget": {
                    "$ref": "#/types/duplocloud:index/GcpSchedulerJobAppEngineTarget:GcpSchedulerJobAppEngineTarget",
                    "description": "Specifies an App Engine target for the scheduler job.\n"
                },
                "attemptDeadline": {
                    "type": "string",
                    "description": "The attempt deadline for the scheduler job.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the scheduler job.\n"
                },
                "httpTarget": {
                    "$ref": "#/types/duplocloud:index/GcpSchedulerJobHttpTarget:GcpSchedulerJobHttpTarget",
                    "description": "Specifies an HTTP target for the scheduler job.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the scheduler job.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "pubsubTarget": {
                    "$ref": "#/types/duplocloud:index/GcpSchedulerJobPubsubTarget:GcpSchedulerJobPubsubTarget",
                    "description": "Specifies a pubsub target for the scheduler job.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "The desired schedule, in cron format.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the scheduler job will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "timezone": {
                    "type": "string",
                    "description": "The timezone used to determine the schedule, in UNIX format\n"
                }
            },
            "requiredInputs": [
                "schedule",
                "tenantId",
                "timezone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpSchedulerJob resources.\n",
                "properties": {
                    "appEngineTarget": {
                        "$ref": "#/types/duplocloud:index/GcpSchedulerJobAppEngineTarget:GcpSchedulerJobAppEngineTarget",
                        "description": "Specifies an App Engine target for the scheduler job.\n"
                    },
                    "attemptDeadline": {
                        "type": "string",
                        "description": "The attempt deadline for the scheduler job.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the scheduler job.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the scheduler job.\n"
                    },
                    "httpTarget": {
                        "$ref": "#/types/duplocloud:index/GcpSchedulerJobHttpTarget:GcpSchedulerJobHttpTarget",
                        "description": "Specifies an HTTP target for the scheduler job.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the scheduler job.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "pubsubTarget": {
                        "$ref": "#/types/duplocloud:index/GcpSchedulerJobPubsubTarget:GcpSchedulerJobPubsubTarget",
                        "description": "Specifies a pubsub target for the scheduler job.\n"
                    },
                    "schedule": {
                        "type": "string",
                        "description": "The desired schedule, in cron format.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "The SelfLink of the scheduler job.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the scheduler job will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The timezone used to determine the schedule, in UNIX format\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/gcpSqlDatabaseInstance:GcpSqlDatabaseInstance": {
            "description": "`duplocloud.GcpSqlDatabaseInstance` manages a GCP SQL Database Instance in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst sqlInstance = new duplocloud.GcpSqlDatabaseInstance(\"sql_instance\", {\n    tenantId: myapp.tenantId,\n    name: \"sqlinstances01\",\n    databaseVersion: \"MYSQL_8_0\",\n    tier: \"db-n1-standard-1\",\n    diskSize: 17,\n    labels: {\n        \"managed-by\": \"duplocloud\",\n        \"created-by\": \"terraform\",\n    },\n});\n// Backup configuration example\nconst sql = new duplocloud.GcpSqlDatabaseInstance(\"sql\", {\n    tenantId: myapp.tenantId,\n    name: \"mysqlbckp\",\n    databaseVersion: \"POSTGRES_14\",\n    diskSize: 10,\n    tier: \"db-f1-micro\",\n    rootPassword: \"qwerty\",\n    needBackup: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nsql_instance = duplocloud.GcpSqlDatabaseInstance(\"sql_instance\",\n    tenant_id=myapp.tenant_id,\n    name=\"sqlinstances01\",\n    database_version=\"MYSQL_8_0\",\n    tier=\"db-n1-standard-1\",\n    disk_size=17,\n    labels={\n        \"managed-by\": \"duplocloud\",\n        \"created-by\": \"terraform\",\n    })\n# Backup configuration example\nsql = duplocloud.GcpSqlDatabaseInstance(\"sql\",\n    tenant_id=myapp.tenant_id,\n    name=\"mysqlbckp\",\n    database_version=\"POSTGRES_14\",\n    disk_size=10,\n    tier=\"db-f1-micro\",\n    root_password=\"qwerty\",\n    need_backup=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var sqlInstance = new Duplocloud.GcpSqlDatabaseInstance(\"sql_instance\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"sqlinstances01\",\n        DatabaseVersion = \"MYSQL_8_0\",\n        Tier = \"db-n1-standard-1\",\n        DiskSize = 17,\n        Labels = \n        {\n            { \"managed-by\", \"duplocloud\" },\n            { \"created-by\", \"terraform\" },\n        },\n    });\n\n    // Backup configuration example\n    var sql = new Duplocloud.GcpSqlDatabaseInstance(\"sql\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"mysqlbckp\",\n        DatabaseVersion = \"POSTGRES_14\",\n        DiskSize = 10,\n        Tier = \"db-f1-micro\",\n        RootPassword = \"qwerty\",\n        NeedBackup = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewGcpSqlDatabaseInstance(ctx, \"sql_instance\", \u0026duplocloud.GcpSqlDatabaseInstanceArgs{\n\t\t\tTenantId:        myapp.TenantId,\n\t\t\tName:            pulumi.String(\"sqlinstances01\"),\n\t\t\tDatabaseVersion: pulumi.String(\"MYSQL_8_0\"),\n\t\t\tTier:            pulumi.String(\"db-n1-standard-1\"),\n\t\t\tDiskSize:        pulumi.Int(17),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"managed-by\": pulumi.String(\"duplocloud\"),\n\t\t\t\t\"created-by\": pulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Backup configuration example\n\t\t_, err = duplocloud.NewGcpSqlDatabaseInstance(ctx, \"sql\", \u0026duplocloud.GcpSqlDatabaseInstanceArgs{\n\t\t\tTenantId:        myapp.TenantId,\n\t\t\tName:            pulumi.String(\"mysqlbckp\"),\n\t\t\tDatabaseVersion: pulumi.String(\"POSTGRES_14\"),\n\t\t\tDiskSize:        pulumi.Int(10),\n\t\t\tTier:            pulumi.String(\"db-f1-micro\"),\n\t\t\tRootPassword:    pulumi.String(\"qwerty\"),\n\t\t\tNeedBackup:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.GcpSqlDatabaseInstance;\nimport com.pulumi.duplocloud.GcpSqlDatabaseInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var sqlInstance = new GcpSqlDatabaseInstance(\"sqlInstance\", GcpSqlDatabaseInstanceArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"sqlinstances01\")\n            .databaseVersion(\"MYSQL_8_0\")\n            .tier(\"db-n1-standard-1\")\n            .diskSize(17)\n            .labels(Map.ofEntries(\n                Map.entry(\"managed-by\", \"duplocloud\"),\n                Map.entry(\"created-by\", \"terraform\")\n            ))\n            .build());\n\n        // Backup configuration example\n        var sql = new GcpSqlDatabaseInstance(\"sql\", GcpSqlDatabaseInstanceArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"mysqlbckp\")\n            .databaseVersion(\"POSTGRES_14\")\n            .diskSize(10)\n            .tier(\"db-f1-micro\")\n            .rootPassword(\"qwerty\")\n            .needBackup(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  sqlInstance:\n    type: duplocloud:GcpSqlDatabaseInstance\n    name: sql_instance\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: sqlinstances01\n      databaseVersion: MYSQL_8_0\n      tier: db-n1-standard-1\n      diskSize: 17\n      labels:\n        managed-by: duplocloud\n        created-by: terraform\n  # Backup configuration example\n  sql:\n    type: duplocloud:GcpSqlDatabaseInstance\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: mysqlbckp\n      databaseVersion: POSTGRES_14\n      diskSize: 10\n      tier: db-f1-micro\n      rootPassword: qwerty\n      needBackup: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing GCP SQL database instance\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the GCP SQL database instance\n\n#\n\n```sh\n$ pulumi import duplocloud:index/gcpSqlDatabaseInstance:GcpSqlDatabaseInstance sql_instance *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "connectionName": {
                    "type": "string",
                    "description": "Connection name of the database.\n"
                },
                "databaseVersion": {
                    "type": "string",
                    "description": "The MySQL, PostgreSQL or SQL Server version to use.Supported values include `MYSQL_5_6`,`MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`,`POSTGRES_11`,`POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `POSTGRES_15`,`POSTGRES_16`,`POSTGRES_17`, `SQLSERVER_2017_STANDARD`,`SQLSERVER_2017_ENTERPRISE`,`SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`,`SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,`SQLSERVER_2019_WEB`,`SQLSERVER_2022_WEB`,`SQLSERVER_2022_EXPRESS`,`SQLSERVER_2022_ENTERPRISE`,`SQLSERVER_2022_STANDARD`.[Database Version Policies](https://cloud.google.com/sql/docs/db-versions) includes an up-to-date reference of supported versions.\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the sql database.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses of the database.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the sql database.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "needBackup": {
                    "type": "boolean",
                    "description": "Flag to enable backup process on delete of database Defaults to `true`.\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "Provide root password for specific database versions.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "The SelfLink of the sql database.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the sql database will be created in.\n"
                },
                "tier": {
                    "type": "string",
                    "description": "The machine type to use. See tiers for more details and supported versions. Postgres supports only shared-core machine types, and custom machine types such as `db-custom-2-13312`.See the [Custom Machine Type Documentation](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) to learn about specifying custom machine types.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until sql database instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "required": [
                "connectionName",
                "databaseVersion",
                "diskSize",
                "fullname",
                "ipAddresses",
                "labels",
                "name",
                "rootPassword",
                "selfLink",
                "tenantId",
                "tier"
            ],
            "inputProperties": {
                "databaseVersion": {
                    "type": "string",
                    "description": "The MySQL, PostgreSQL or SQL Server version to use.Supported values include `MYSQL_5_6`,`MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`,`POSTGRES_11`,`POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `POSTGRES_15`,`POSTGRES_16`,`POSTGRES_17`, `SQLSERVER_2017_STANDARD`,`SQLSERVER_2017_ENTERPRISE`,`SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`,`SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,`SQLSERVER_2019_WEB`,`SQLSERVER_2022_WEB`,`SQLSERVER_2022_EXPRESS`,`SQLSERVER_2022_ENTERPRISE`,`SQLSERVER_2022_STANDARD`.[Database Version Policies](https://cloud.google.com/sql/docs/db-versions) includes an up-to-date reference of supported versions.\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the sql database.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "needBackup": {
                    "type": "boolean",
                    "description": "Flag to enable backup process on delete of database Defaults to `true`.\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "Provide root password for specific database versions.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the sql database will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "tier": {
                    "type": "string",
                    "description": "The machine type to use. See tiers for more details and supported versions. Postgres supports only shared-core machine types, and custom machine types such as `db-custom-2-13312`.See the [Custom Machine Type Documentation](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) to learn about specifying custom machine types.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until sql database instance to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "databaseVersion",
                "tenantId",
                "tier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpSqlDatabaseInstance resources.\n",
                "properties": {
                    "connectionName": {
                        "type": "string",
                        "description": "Connection name of the database.\n"
                    },
                    "databaseVersion": {
                        "type": "string",
                        "description": "The MySQL, PostgreSQL or SQL Server version to use.Supported values include `MYSQL_5_6`,`MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`,`POSTGRES_11`,`POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `POSTGRES_15`,`POSTGRES_16`,`POSTGRES_17`, `SQLSERVER_2017_STANDARD`,`SQLSERVER_2017_ENTERPRISE`,`SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`,`SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,`SQLSERVER_2019_WEB`,`SQLSERVER_2022_WEB`,`SQLSERVER_2022_EXPRESS`,`SQLSERVER_2022_ENTERPRISE`,`SQLSERVER_2022_STANDARD`.[Database Version Policies](https://cloud.google.com/sql/docs/db-versions) includes an up-to-date reference of supported versions.\n"
                    },
                    "diskSize": {
                        "type": "integer",
                        "description": "The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the sql database.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IP addresses of the database.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of string keys and values that can be used to organize and categorize this resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the sql database.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "needBackup": {
                        "type": "boolean",
                        "description": "Flag to enable backup process on delete of database Defaults to `true`.\n"
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "Provide root password for specific database versions.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "The SelfLink of the sql database.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the sql database will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "tier": {
                        "type": "string",
                        "description": "The machine type to use. See tiers for more details and supported versions. Postgres supports only shared-core machine types, and custom machine types such as `db-custom-2-13312`.See the [Custom Machine Type Documentation](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) to learn about specifying custom machine types.\n"
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until sql database instance to be ready, after creation. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/gcpStorageBucket:GcpStorageBucket": {
            "description": "`duplocloud.GcpStorageBucket` manages a GCP storage bucket in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst mybucket = new duplocloud.GcpStorageBucket(\"mybucket\", {\n    tenantId: myapp.tenantId,\n    name: \"mybucket\",\n    enableVersioning: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmybucket = duplocloud.GcpStorageBucket(\"mybucket\",\n    tenant_id=myapp.tenant_id,\n    name=\"mybucket\",\n    enable_versioning=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var mybucket = new Duplocloud.GcpStorageBucket(\"mybucket\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"mybucket\",\n        EnableVersioning = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewGcpStorageBucket(ctx, \"mybucket\", \u0026duplocloud.GcpStorageBucketArgs{\n\t\t\tTenantId:         myapp.TenantId,\n\t\t\tName:             pulumi.String(\"mybucket\"),\n\t\t\tEnableVersioning: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.GcpStorageBucket;\nimport com.pulumi.duplocloud.GcpStorageBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var mybucket = new GcpStorageBucket(\"mybucket\", GcpStorageBucketArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"mybucket\")\n            .enableVersioning(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  mybucket:\n    type: duplocloud:GcpStorageBucket\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: mybucket\n      enableVersioning: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing GCP storage bucket\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORT_NAME* is the short name of the GCP storage bucket\n\n#\n\n```sh\n$ pulumi import duplocloud:index/gcpStorageBucket:GcpStorageBucket mybucket *TENANT_ID*/*SHORT_NAME*\n```\n\n",
            "properties": {
                "allowPublicAccess": {
                    "type": "boolean",
                    "description": "Whether or not public access might be allowed for the storage bucket. Defaults to `false`.\n"
                },
                "enableVersioning": {
                    "type": "boolean",
                    "description": "Whether or not versioning is enabled for the storage bucket. Defaults to `false`.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the storage bucket.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The labels assigned to this storage bucket.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the storage bucket.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "The SelfLink of the storage bucket.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the storage bucket will be created in.\n"
                }
            },
            "required": [
                "fullname",
                "labels",
                "name",
                "selfLink",
                "tenantId"
            ],
            "inputProperties": {
                "allowPublicAccess": {
                    "type": "boolean",
                    "description": "Whether or not public access might be allowed for the storage bucket. Defaults to `false`.\n"
                },
                "enableVersioning": {
                    "type": "boolean",
                    "description": "Whether or not versioning is enabled for the storage bucket. Defaults to `false`.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The labels assigned to this storage bucket.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the storage bucket.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the storage bucket will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpStorageBucket resources.\n",
                "properties": {
                    "allowPublicAccess": {
                        "type": "boolean",
                        "description": "Whether or not public access might be allowed for the storage bucket. Defaults to `false`.\n"
                    },
                    "enableVersioning": {
                        "type": "boolean",
                        "description": "Whether or not versioning is enabled for the storage bucket. Defaults to `false`.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the storage bucket.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The labels assigned to this storage bucket.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the storage bucket.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "The SelfLink of the storage bucket.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the storage bucket will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/gcpStorageBucketV2:GcpStorageBucketV2": {
            "description": "## Example Usage\n\n## Import\n\nExample: Importing an existing S3 bucket\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORTNAME* is the short name of the S3 bucket (without the duploservices prefix)\n\n#\n\n```sh\n$ pulumi import duplocloud:index/gcpStorageBucketV2:GcpStorageBucketV2 mybucket *TENANT_ID*/*SHORTNAME*\n```\n\n",
            "properties": {
                "allowPublicAccess": {
                    "type": "boolean",
                    "description": "Whether or not to remove the public access block from the bucket.\n"
                },
                "defaultEncryption": {
                    "$ref": "#/types/duplocloud:index/GcpStorageBucketV2DefaultEncryption:GcpStorageBucketV2DefaultEncryption",
                    "description": "Default encryption settings for objects uploaded to the bucket.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "Bucket self link.\n"
                },
                "enableVersioning": {
                    "type": "boolean",
                    "description": "Whether or not to enable versioning.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the storage bucket.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The labels assigned to this storage bucket.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location is to set region/multi region, applicable for gcp cloud.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the storage bucket.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the storage bucket will be created in.\n"
                }
            },
            "required": [
                "allowPublicAccess",
                "defaultEncryption",
                "domainName",
                "enableVersioning",
                "fullname",
                "labels",
                "location",
                "name",
                "tenantId"
            ],
            "inputProperties": {
                "allowPublicAccess": {
                    "type": "boolean",
                    "description": "Whether or not to remove the public access block from the bucket.\n"
                },
                "defaultEncryption": {
                    "$ref": "#/types/duplocloud:index/GcpStorageBucketV2DefaultEncryption:GcpStorageBucketV2DefaultEncryption",
                    "description": "Default encryption settings for objects uploaded to the bucket.\n"
                },
                "enableVersioning": {
                    "type": "boolean",
                    "description": "Whether or not to enable versioning.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The labels assigned to this storage bucket.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location is to set region/multi region, applicable for gcp cloud.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the storage bucket.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the storage bucket will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpStorageBucketV2 resources.\n",
                "properties": {
                    "allowPublicAccess": {
                        "type": "boolean",
                        "description": "Whether or not to remove the public access block from the bucket.\n"
                    },
                    "defaultEncryption": {
                        "$ref": "#/types/duplocloud:index/GcpStorageBucketV2DefaultEncryption:GcpStorageBucketV2DefaultEncryption",
                        "description": "Default encryption settings for objects uploaded to the bucket.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "Bucket self link.\n"
                    },
                    "enableVersioning": {
                        "type": "boolean",
                        "description": "Whether or not to enable versioning.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the storage bucket.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The labels assigned to this storage bucket.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location is to set region/multi region, applicable for gcp cloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the storage bucket.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the storage bucket will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/gcpTenantSecurityRule:GcpTenantSecurityRule": {
            "description": "`duplocloud.GcpTenantSecurityRule` applies gcp security rule to  target tenantId\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst trule = new duplocloud.GcpTenantSecurityRule(\"trule\", {\n    tenantId: myapp.tenantId,\n    name: \"tenant-rule\",\n    description: \"security rule for target tenant\",\n    portsAndProtocols: [\n        {\n            ports: [\n                \"24\",\n                \"23-89\",\n            ],\n            serviceProtocol: \"tcp\",\n        },\n        {\n            ports: [\"100\"],\n            serviceProtocol: \"udp\",\n        },\n    ],\n    sourceRanges: [\"0.0.0.0/32\"],\n    ruleType: \"ALLOW\",\n    targetTenantId: \"\u003ctarget-tenant-id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\ntrule = duplocloud.GcpTenantSecurityRule(\"trule\",\n    tenant_id=myapp.tenant_id,\n    name=\"tenant-rule\",\n    description=\"security rule for target tenant\",\n    ports_and_protocols=[\n        {\n            \"ports\": [\n                \"24\",\n                \"23-89\",\n            ],\n            \"service_protocol\": \"tcp\",\n        },\n        {\n            \"ports\": [\"100\"],\n            \"service_protocol\": \"udp\",\n        },\n    ],\n    source_ranges=[\"0.0.0.0/32\"],\n    rule_type=\"ALLOW\",\n    target_tenant_id=\"\u003ctarget-tenant-id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var trule = new Duplocloud.GcpTenantSecurityRule(\"trule\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"tenant-rule\",\n        Description = \"security rule for target tenant\",\n        PortsAndProtocols = new[]\n        {\n            new Duplocloud.Inputs.GcpTenantSecurityRulePortsAndProtocolArgs\n            {\n                Ports = new[]\n                {\n                    \"24\",\n                    \"23-89\",\n                },\n                ServiceProtocol = \"tcp\",\n            },\n            new Duplocloud.Inputs.GcpTenantSecurityRulePortsAndProtocolArgs\n            {\n                Ports = new[]\n                {\n                    \"100\",\n                },\n                ServiceProtocol = \"udp\",\n            },\n        },\n        SourceRanges = new[]\n        {\n            \"0.0.0.0/32\",\n        },\n        RuleType = \"ALLOW\",\n        TargetTenantId = \"\u003ctarget-tenant-id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewGcpTenantSecurityRule(ctx, \"trule\", \u0026duplocloud.GcpTenantSecurityRuleArgs{\n\t\t\tTenantId:    myapp.TenantId,\n\t\t\tName:        pulumi.String(\"tenant-rule\"),\n\t\t\tDescription: pulumi.String(\"security rule for target tenant\"),\n\t\t\tPortsAndProtocols: duplocloud.GcpTenantSecurityRulePortsAndProtocolArray{\n\t\t\t\t\u0026duplocloud.GcpTenantSecurityRulePortsAndProtocolArgs{\n\t\t\t\t\tPorts: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"24\"),\n\t\t\t\t\t\tpulumi.String(\"23-89\"),\n\t\t\t\t\t},\n\t\t\t\t\tServiceProtocol: pulumi.String(\"tcp\"),\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.GcpTenantSecurityRulePortsAndProtocolArgs{\n\t\t\t\t\tPorts: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"100\"),\n\t\t\t\t\t},\n\t\t\t\t\tServiceProtocol: pulumi.String(\"udp\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSourceRanges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"0.0.0.0/32\"),\n\t\t\t},\n\t\t\tRuleType:       pulumi.String(\"ALLOW\"),\n\t\t\tTargetTenantId: pulumi.String(\"\u003ctarget-tenant-id\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.GcpTenantSecurityRule;\nimport com.pulumi.duplocloud.GcpTenantSecurityRuleArgs;\nimport com.pulumi.duplocloud.inputs.GcpTenantSecurityRulePortsAndProtocolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var trule = new GcpTenantSecurityRule(\"trule\", GcpTenantSecurityRuleArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"tenant-rule\")\n            .description(\"security rule for target tenant\")\n            .portsAndProtocols(            \n                GcpTenantSecurityRulePortsAndProtocolArgs.builder()\n                    .ports(                    \n                        \"24\",\n                        \"23-89\")\n                    .serviceProtocol(\"tcp\")\n                    .build(),\n                GcpTenantSecurityRulePortsAndProtocolArgs.builder()\n                    .ports(\"100\")\n                    .serviceProtocol(\"udp\")\n                    .build())\n            .sourceRanges(\"0.0.0.0/32\")\n            .ruleType(\"ALLOW\")\n            .targetTenantId(\"\u003ctarget-tenant-id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  trule:\n    type: duplocloud:GcpTenantSecurityRule\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: tenant-rule\n      description: security rule for target tenant\n      portsAndProtocols:\n        - ports:\n            - '24'\n            - 23-89\n          serviceProtocol: tcp\n        - ports:\n            - '100'\n          serviceProtocol: udp\n      sourceRanges:\n        - 0.0.0.0/32\n      ruleType: ALLOW\n      targetTenantId: \u003ctarget-tenant-id\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing GCP storage bucket\n\n - *TENANT_ID* is the tenant GUID\n\n - *RULE_NAME* is the  name of the security rule\n\n#\n\n```sh\n$ pulumi import duplocloud:index/gcpTenantSecurityRule:GcpTenantSecurityRule trule *TENANT_ID*/security-rule/*RULE_NAME*\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description related to the rule\n"
                },
                "direction": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string",
                    "description": "Duplocloud prefixed rule name\n"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specify rule name\n"
                },
                "network": {
                    "type": "string"
                },
                "portsAndProtocols": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpTenantSecurityRulePortsAndProtocol:GcpTenantSecurityRulePortsAndProtocol"
                    }
                },
                "priority": {
                    "type": "integer"
                },
                "ruleType": {
                    "type": "string",
                    "description": "Specify type of access rule (ALLOW , DENY)\n"
                },
                "selfLink": {
                    "type": "string"
                },
                "sourceRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The lists of IPv4 or IPv6 addresses in CIDR format that specify the source of traffic for a firewall rule\n"
                },
                "sourceServiceAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sourceTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "targetServiceAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "targetTenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant to which security rule need to be applied\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant.\n"
                }
            },
            "required": [
                "description",
                "direction",
                "fullname",
                "kind",
                "name",
                "network",
                "portsAndProtocols",
                "priority",
                "ruleType",
                "selfLink",
                "sourceRanges",
                "sourceServiceAccounts",
                "sourceTags",
                "targetServiceAccounts",
                "targetTenantId",
                "tenantId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description related to the rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specify rule name\n",
                    "willReplaceOnChanges": true
                },
                "portsAndProtocols": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/GcpTenantSecurityRulePortsAndProtocol:GcpTenantSecurityRulePortsAndProtocol"
                    }
                },
                "ruleType": {
                    "type": "string",
                    "description": "Specify type of access rule (ALLOW , DENY)\n",
                    "willReplaceOnChanges": true
                },
                "sourceRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The lists of IPv4 or IPv6 addresses in CIDR format that specify the source of traffic for a firewall rule\n"
                },
                "targetTenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant to which security rule need to be applied\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "portsAndProtocols",
                "ruleType",
                "sourceRanges",
                "targetTenantId",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpTenantSecurityRule resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description related to the rule\n"
                    },
                    "direction": {
                        "type": "string"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "Duplocloud prefixed rule name\n"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specify rule name\n",
                        "willReplaceOnChanges": true
                    },
                    "network": {
                        "type": "string"
                    },
                    "portsAndProtocols": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/GcpTenantSecurityRulePortsAndProtocol:GcpTenantSecurityRulePortsAndProtocol"
                        }
                    },
                    "priority": {
                        "type": "integer"
                    },
                    "ruleType": {
                        "type": "string",
                        "description": "Specify type of access rule (ALLOW , DENY)\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "sourceRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The lists of IPv4 or IPv6 addresses in CIDR format that specify the source of traffic for a firewall rule\n"
                    },
                    "sourceServiceAccounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sourceTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "targetServiceAccounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "targetTenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant to which security rule need to be applied\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/infrastructure:Infrastructure": {
            "description": "## Example Usage\n\n### Create a DuploCloud infrastructure named nonprod\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst infra = new duplocloud.Infrastructure(\"infra\", {\n    infraName: \"nonprod\",\n    cloud: 0,\n    region: \"us-west-2\",\n    enableK8Cluster: true,\n    addressPrefix: \"10.11.0.0/16\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ninfra = duplocloud.Infrastructure(\"infra\",\n    infra_name=\"nonprod\",\n    cloud=0,\n    region=\"us-west-2\",\n    enable_k8_cluster=True,\n    address_prefix=\"10.11.0.0/16\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infra = new Duplocloud.Infrastructure(\"infra\", new()\n    {\n        InfraName = \"nonprod\",\n        Cloud = 0,\n        Region = \"us-west-2\",\n        EnableK8Cluster = true,\n        AddressPrefix = \"10.11.0.0/16\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewInfrastructure(ctx, \"infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"nonprod\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-west-2\"),\n\t\t\tEnableK8Cluster: pulumi.Bool(true),\n\t\t\tAddressPrefix:   pulumi.String(\"10.11.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var infra = new Infrastructure(\"infra\", InfrastructureArgs.builder()\n            .infraName(\"nonprod\")\n            .cloud(0)\n            .region(\"us-west-2\")\n            .enableK8Cluster(true)\n            .addressPrefix(\"10.11.0.0/16\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  infra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: nonprod\n      cloud: 0 # 0-AWS, 1- Oracle, 2- Azure, 3-Google; Defaults to 0\n      region: us-west-2\n      enableK8Cluster: true\n      addressPrefix: 10.11.0.0/16\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a DuploCloud infrastructure named nonprod with cidr 10.34.0.0/16 in us-west-2 region\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst infra = new duplocloud.Infrastructure(\"infra\", {\n    infraName: \"nonprod\",\n    cloud: 0,\n    region: \"us-west-2\",\n    enableK8Cluster: true,\n    addressPrefix: \"10.34.0.0/16\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ninfra = duplocloud.Infrastructure(\"infra\",\n    infra_name=\"nonprod\",\n    cloud=0,\n    region=\"us-west-2\",\n    enable_k8_cluster=True,\n    address_prefix=\"10.34.0.0/16\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infra = new Duplocloud.Infrastructure(\"infra\", new()\n    {\n        InfraName = \"nonprod\",\n        Cloud = 0,\n        Region = \"us-west-2\",\n        EnableK8Cluster = true,\n        AddressPrefix = \"10.34.0.0/16\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewInfrastructure(ctx, \"infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"nonprod\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-west-2\"),\n\t\t\tEnableK8Cluster: pulumi.Bool(true),\n\t\t\tAddressPrefix:   pulumi.String(\"10.34.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var infra = new Infrastructure(\"infra\", InfrastructureArgs.builder()\n            .infraName(\"nonprod\")\n            .cloud(0)\n            .region(\"us-west-2\")\n            .enableK8Cluster(true)\n            .addressPrefix(\"10.34.0.0/16\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  infra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: nonprod\n      cloud: 0 # 0-AWS, 1- Oracle, 2- Azure, 3-Google\n      region: us-west-2\n      enableK8Cluster: true\n      addressPrefix: 10.34.0.0/16\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a DuploCloud infrastructure named nonprod with cidr 10.30.0.0/16 in us-east-1 region with EKS cluster\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst infra = new duplocloud.Infrastructure(\"infra\", {\n    infraName: \"nonprod\",\n    cloud: 0,\n    region: \"us-east-1\",\n    azcount: 2,\n    enableK8Cluster: true,\n    addressPrefix: \"10.30.0.0/16\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ninfra = duplocloud.Infrastructure(\"infra\",\n    infra_name=\"nonprod\",\n    cloud=0,\n    region=\"us-east-1\",\n    azcount=2,\n    enable_k8_cluster=True,\n    address_prefix=\"10.30.0.0/16\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infra = new Duplocloud.Infrastructure(\"infra\", new()\n    {\n        InfraName = \"nonprod\",\n        Cloud = 0,\n        Region = \"us-east-1\",\n        Azcount = 2,\n        EnableK8Cluster = true,\n        AddressPrefix = \"10.30.0.0/16\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewInfrastructure(ctx, \"infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"nonprod\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-east-1\"),\n\t\t\tAzcount:         pulumi.Int(2),\n\t\t\tEnableK8Cluster: pulumi.Bool(true),\n\t\t\tAddressPrefix:   pulumi.String(\"10.30.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var infra = new Infrastructure(\"infra\", InfrastructureArgs.builder()\n            .infraName(\"nonprod\")\n            .cloud(0)\n            .region(\"us-east-1\")\n            .azcount(2)\n            .enableK8Cluster(true)\n            .addressPrefix(\"10.30.0.0/16\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  infra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: nonprod\n      cloud: 0 # 0-AWS, 1- Oracle, 2- Azure, 3-Google\n      region: us-east-1\n      azcount: 2 # The number of availability zones.\n      enableK8Cluster: true\n      addressPrefix: 10.30.0.0/16\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a DuploCloud infrastructure named 'prod' in the us-east-2 region, with a VPC CIDR of 10.30.0.0/16, a subnet mask of 24, and EKS cluster enabled\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst infra = new duplocloud.Infrastructure(\"infra\", {\n    infraName: \"prod\",\n    cloud: 0,\n    region: \"us-east-2\",\n    azcount: 2,\n    enableK8Cluster: true,\n    addressPrefix: \"10.30.0.0/16\",\n    subnetCidr: 24,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ninfra = duplocloud.Infrastructure(\"infra\",\n    infra_name=\"prod\",\n    cloud=0,\n    region=\"us-east-2\",\n    azcount=2,\n    enable_k8_cluster=True,\n    address_prefix=\"10.30.0.0/16\",\n    subnet_cidr=24)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infra = new Duplocloud.Infrastructure(\"infra\", new()\n    {\n        InfraName = \"prod\",\n        Cloud = 0,\n        Region = \"us-east-2\",\n        Azcount = 2,\n        EnableK8Cluster = true,\n        AddressPrefix = \"10.30.0.0/16\",\n        SubnetCidr = 24,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewInfrastructure(ctx, \"infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"prod\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-east-2\"),\n\t\t\tAzcount:         pulumi.Int(2),\n\t\t\tEnableK8Cluster: pulumi.Bool(true),\n\t\t\tAddressPrefix:   pulumi.String(\"10.30.0.0/16\"),\n\t\t\tSubnetCidr:      pulumi.Int(24),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var infra = new Infrastructure(\"infra\", InfrastructureArgs.builder()\n            .infraName(\"prod\")\n            .cloud(0)\n            .region(\"us-east-2\")\n            .azcount(2)\n            .enableK8Cluster(true)\n            .addressPrefix(\"10.30.0.0/16\")\n            .subnetCidr(24)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  infra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: prod\n      cloud: 0 # 0-AWS, 1- Oracle, 2- Azure, 3-Google\n      region: us-east-2\n      azcount: 2 # The number of availability zones.\n      enableK8Cluster: true\n      addressPrefix: 10.30.0.0/16\n      subnetCidr: 24\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a DuploCloud infrastructure named 'prod' in the us-east-2 region, with a VPC CIDR of 10.30.0.0/16, a subnet mask of 24, and an EKS cluster disabled with an ingress controller\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst prodInfra = new duplocloud.Infrastructure(\"prod_infra\", {\n    infraName: \"prod\",\n    cloud: 0,\n    region: \"us-east-2\",\n    azcount: 2,\n    enableK8Cluster: false,\n    addressPrefix: \"10.30.0.0/16\",\n    subnetCidr: 24,\n});\nconst settings = new duplocloud.InfrastructureSetting(\"settings\", {\n    infraName: prodInfra.infraName,\n    settings: [{\n        key: \"EnableAwsAlbIngress\",\n        value: \"true\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nprod_infra = duplocloud.Infrastructure(\"prod_infra\",\n    infra_name=\"prod\",\n    cloud=0,\n    region=\"us-east-2\",\n    azcount=2,\n    enable_k8_cluster=False,\n    address_prefix=\"10.30.0.0/16\",\n    subnet_cidr=24)\nsettings = duplocloud.InfrastructureSetting(\"settings\",\n    infra_name=prod_infra.infra_name,\n    settings=[{\n        \"key\": \"EnableAwsAlbIngress\",\n        \"value\": \"true\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prodInfra = new Duplocloud.Infrastructure(\"prod_infra\", new()\n    {\n        InfraName = \"prod\",\n        Cloud = 0,\n        Region = \"us-east-2\",\n        Azcount = 2,\n        EnableK8Cluster = false,\n        AddressPrefix = \"10.30.0.0/16\",\n        SubnetCidr = 24,\n    });\n\n    var settings = new Duplocloud.InfrastructureSetting(\"settings\", new()\n    {\n        InfraName = prodInfra.InfraName,\n        Settings = new[]\n        {\n            new Duplocloud.Inputs.InfrastructureSettingSettingArgs\n            {\n                Key = \"EnableAwsAlbIngress\",\n                Value = \"true\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprodInfra, err := duplocloud.NewInfrastructure(ctx, \"prod_infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"prod\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-east-2\"),\n\t\t\tAzcount:         pulumi.Int(2),\n\t\t\tEnableK8Cluster: pulumi.Bool(false),\n\t\t\tAddressPrefix:   pulumi.String(\"10.30.0.0/16\"),\n\t\t\tSubnetCidr:      pulumi.Int(24),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewInfrastructureSetting(ctx, \"settings\", \u0026duplocloud.InfrastructureSettingArgs{\n\t\t\tInfraName: prodInfra.InfraName,\n\t\t\tSettings: duplocloud.InfrastructureSettingSettingArray{\n\t\t\t\t\u0026duplocloud.InfrastructureSettingSettingArgs{\n\t\t\t\t\tKey:   pulumi.String(\"EnableAwsAlbIngress\"),\n\t\t\t\t\tValue: pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport com.pulumi.duplocloud.InfrastructureSetting;\nimport com.pulumi.duplocloud.InfrastructureSettingArgs;\nimport com.pulumi.duplocloud.inputs.InfrastructureSettingSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var prodInfra = new Infrastructure(\"prodInfra\", InfrastructureArgs.builder()\n            .infraName(\"prod\")\n            .cloud(0)\n            .region(\"us-east-2\")\n            .azcount(2)\n            .enableK8Cluster(false)\n            .addressPrefix(\"10.30.0.0/16\")\n            .subnetCidr(24)\n            .build());\n\n        var settings = new InfrastructureSetting(\"settings\", InfrastructureSettingArgs.builder()\n            .infraName(prodInfra.infraName())\n            .settings(InfrastructureSettingSettingArgs.builder()\n                .key(\"EnableAwsAlbIngress\")\n                .value(\"true\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  prodInfra:\n    type: duplocloud:Infrastructure\n    name: prod_infra\n    properties:\n      infraName: prod\n      cloud: 0 # 0-AWS, 1- Oracle, 2- Azure, 3-Google\n      region: us-east-2\n      azcount: 2 # The number of availability zones.\n      enableK8Cluster: false\n      addressPrefix: 10.30.0.0/16\n      subnetCidr: 24\n  settings:\n    type: duplocloud:InfrastructureSetting\n    properties:\n      infraName: ${prodInfra.infraName}\n      settings:\n        - key: EnableAwsAlbIngress\n          value: 'true'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a DuploCloud infrastructure named 'nonprod' in the us-west-2 region, with a VPC CIDR of 10.60.0.0/16, a subnet mask of 24, and an EKS cluster enabled with an autoscaler\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst nonprodInfra = new duplocloud.Infrastructure(\"nonprod_infra\", {\n    infraName: \"nonprod\",\n    cloud: 0,\n    region: \"us-west-2\",\n    azcount: 2,\n    enableK8Cluster: true,\n    addressPrefix: \"10.60.0.0/16\",\n    subnetCidr: 24,\n});\nconst nonprodSettings = new duplocloud.InfrastructureSetting(\"nonprod_settings\", {\n    infraName: nonprodInfra.infraName,\n    settings: [{\n        key: \"EnableClusterAutoscaler\",\n        value: \"true\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nnonprod_infra = duplocloud.Infrastructure(\"nonprod_infra\",\n    infra_name=\"nonprod\",\n    cloud=0,\n    region=\"us-west-2\",\n    azcount=2,\n    enable_k8_cluster=True,\n    address_prefix=\"10.60.0.0/16\",\n    subnet_cidr=24)\nnonprod_settings = duplocloud.InfrastructureSetting(\"nonprod_settings\",\n    infra_name=nonprod_infra.infra_name,\n    settings=[{\n        \"key\": \"EnableClusterAutoscaler\",\n        \"value\": \"true\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nonprodInfra = new Duplocloud.Infrastructure(\"nonprod_infra\", new()\n    {\n        InfraName = \"nonprod\",\n        Cloud = 0,\n        Region = \"us-west-2\",\n        Azcount = 2,\n        EnableK8Cluster = true,\n        AddressPrefix = \"10.60.0.0/16\",\n        SubnetCidr = 24,\n    });\n\n    var nonprodSettings = new Duplocloud.InfrastructureSetting(\"nonprod_settings\", new()\n    {\n        InfraName = nonprodInfra.InfraName,\n        Settings = new[]\n        {\n            new Duplocloud.Inputs.InfrastructureSettingSettingArgs\n            {\n                Key = \"EnableClusterAutoscaler\",\n                Value = \"true\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnonprodInfra, err := duplocloud.NewInfrastructure(ctx, \"nonprod_infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"nonprod\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-west-2\"),\n\t\t\tAzcount:         pulumi.Int(2),\n\t\t\tEnableK8Cluster: pulumi.Bool(true),\n\t\t\tAddressPrefix:   pulumi.String(\"10.60.0.0/16\"),\n\t\t\tSubnetCidr:      pulumi.Int(24),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewInfrastructureSetting(ctx, \"nonprod_settings\", \u0026duplocloud.InfrastructureSettingArgs{\n\t\t\tInfraName: nonprodInfra.InfraName,\n\t\t\tSettings: duplocloud.InfrastructureSettingSettingArray{\n\t\t\t\t\u0026duplocloud.InfrastructureSettingSettingArgs{\n\t\t\t\t\tKey:   pulumi.String(\"EnableClusterAutoscaler\"),\n\t\t\t\t\tValue: pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport com.pulumi.duplocloud.InfrastructureSetting;\nimport com.pulumi.duplocloud.InfrastructureSettingArgs;\nimport com.pulumi.duplocloud.inputs.InfrastructureSettingSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var nonprodInfra = new Infrastructure(\"nonprodInfra\", InfrastructureArgs.builder()\n            .infraName(\"nonprod\")\n            .cloud(0)\n            .region(\"us-west-2\")\n            .azcount(2)\n            .enableK8Cluster(true)\n            .addressPrefix(\"10.60.0.0/16\")\n            .subnetCidr(24)\n            .build());\n\n        var nonprodSettings = new InfrastructureSetting(\"nonprodSettings\", InfrastructureSettingArgs.builder()\n            .infraName(nonprodInfra.infraName())\n            .settings(InfrastructureSettingSettingArgs.builder()\n                .key(\"EnableClusterAutoscaler\")\n                .value(\"true\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  nonprodInfra:\n    type: duplocloud:Infrastructure\n    name: nonprod_infra\n    properties:\n      infraName: nonprod\n      cloud: 0 # 0-AWS, 1- Oracle, 2- Azure, 3-Google\n      region: us-west-2\n      azcount: 2 # The number of availability zones.\n      enableK8Cluster: true\n      addressPrefix: 10.60.0.0/16\n      subnetCidr: 24\n  nonprodSettings:\n    type: duplocloud:InfrastructureSetting\n    name: nonprod_settings\n    properties:\n      infraName: ${nonprodInfra.infraName}\n      settings:\n        - key: EnableClusterAutoscaler\n          value: 'true'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a DuploCloud infrastructure named 'nonprod' in the us-west-2 region, with a VPC CIDR of 10.60.0.0/16, a subnet mask of 24, and an EKS cluster enabled with an autoscaler, ingress controller, and Secrets Store CSI Driver\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst nonprodInfra = new duplocloud.Infrastructure(\"nonprod_infra\", {\n    infraName: \"nonprod\",\n    cloud: 0,\n    region: \"us-west-2\",\n    azcount: 2,\n    enableK8Cluster: true,\n    addressPrefix: \"10.60.0.0/16\",\n    subnetCidr: 24,\n});\nconst nonprodSettings = new duplocloud.InfrastructureSetting(\"nonprod_settings\", {\n    infraName: nonprodInfra.infraName,\n    settings: [\n        {\n            key: \"EnableClusterAutoscaler\",\n            value: \"true\",\n        },\n        {\n            key: \"EnableAwsAlbIngress\",\n            value: \"true\",\n        },\n        {\n            key: \"EnableSecretCsiDriver\",\n            value: \"true\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nnonprod_infra = duplocloud.Infrastructure(\"nonprod_infra\",\n    infra_name=\"nonprod\",\n    cloud=0,\n    region=\"us-west-2\",\n    azcount=2,\n    enable_k8_cluster=True,\n    address_prefix=\"10.60.0.0/16\",\n    subnet_cidr=24)\nnonprod_settings = duplocloud.InfrastructureSetting(\"nonprod_settings\",\n    infra_name=nonprod_infra.infra_name,\n    settings=[\n        {\n            \"key\": \"EnableClusterAutoscaler\",\n            \"value\": \"true\",\n        },\n        {\n            \"key\": \"EnableAwsAlbIngress\",\n            \"value\": \"true\",\n        },\n        {\n            \"key\": \"EnableSecretCsiDriver\",\n            \"value\": \"true\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nonprodInfra = new Duplocloud.Infrastructure(\"nonprod_infra\", new()\n    {\n        InfraName = \"nonprod\",\n        Cloud = 0,\n        Region = \"us-west-2\",\n        Azcount = 2,\n        EnableK8Cluster = true,\n        AddressPrefix = \"10.60.0.0/16\",\n        SubnetCidr = 24,\n    });\n\n    var nonprodSettings = new Duplocloud.InfrastructureSetting(\"nonprod_settings\", new()\n    {\n        InfraName = nonprodInfra.InfraName,\n        Settings = new[]\n        {\n            new Duplocloud.Inputs.InfrastructureSettingSettingArgs\n            {\n                Key = \"EnableClusterAutoscaler\",\n                Value = \"true\",\n            },\n            new Duplocloud.Inputs.InfrastructureSettingSettingArgs\n            {\n                Key = \"EnableAwsAlbIngress\",\n                Value = \"true\",\n            },\n            new Duplocloud.Inputs.InfrastructureSettingSettingArgs\n            {\n                Key = \"EnableSecretCsiDriver\",\n                Value = \"true\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnonprodInfra, err := duplocloud.NewInfrastructure(ctx, \"nonprod_infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"nonprod\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-west-2\"),\n\t\t\tAzcount:         pulumi.Int(2),\n\t\t\tEnableK8Cluster: pulumi.Bool(true),\n\t\t\tAddressPrefix:   pulumi.String(\"10.60.0.0/16\"),\n\t\t\tSubnetCidr:      pulumi.Int(24),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewInfrastructureSetting(ctx, \"nonprod_settings\", \u0026duplocloud.InfrastructureSettingArgs{\n\t\t\tInfraName: nonprodInfra.InfraName,\n\t\t\tSettings: duplocloud.InfrastructureSettingSettingArray{\n\t\t\t\t\u0026duplocloud.InfrastructureSettingSettingArgs{\n\t\t\t\t\tKey:   pulumi.String(\"EnableClusterAutoscaler\"),\n\t\t\t\t\tValue: pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.InfrastructureSettingSettingArgs{\n\t\t\t\t\tKey:   pulumi.String(\"EnableAwsAlbIngress\"),\n\t\t\t\t\tValue: pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.InfrastructureSettingSettingArgs{\n\t\t\t\t\tKey:   pulumi.String(\"EnableSecretCsiDriver\"),\n\t\t\t\t\tValue: pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport com.pulumi.duplocloud.InfrastructureSetting;\nimport com.pulumi.duplocloud.InfrastructureSettingArgs;\nimport com.pulumi.duplocloud.inputs.InfrastructureSettingSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var nonprodInfra = new Infrastructure(\"nonprodInfra\", InfrastructureArgs.builder()\n            .infraName(\"nonprod\")\n            .cloud(0)\n            .region(\"us-west-2\")\n            .azcount(2)\n            .enableK8Cluster(true)\n            .addressPrefix(\"10.60.0.0/16\")\n            .subnetCidr(24)\n            .build());\n\n        var nonprodSettings = new InfrastructureSetting(\"nonprodSettings\", InfrastructureSettingArgs.builder()\n            .infraName(nonprodInfra.infraName())\n            .settings(            \n                InfrastructureSettingSettingArgs.builder()\n                    .key(\"EnableClusterAutoscaler\")\n                    .value(\"true\")\n                    .build(),\n                InfrastructureSettingSettingArgs.builder()\n                    .key(\"EnableAwsAlbIngress\")\n                    .value(\"true\")\n                    .build(),\n                InfrastructureSettingSettingArgs.builder()\n                    .key(\"EnableSecretCsiDriver\")\n                    .value(\"true\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  nonprodInfra:\n    type: duplocloud:Infrastructure\n    name: nonprod_infra\n    properties:\n      infraName: nonprod\n      cloud: 0 # 0-AWS, 1- Oracle, 2- Azure, 3-Google\n      region: us-west-2\n      azcount: 2 # The number of availability zones.\n      enableK8Cluster: true\n      addressPrefix: 10.60.0.0/16\n      subnetCidr: 24\n  nonprodSettings:\n    type: duplocloud:InfrastructureSetting\n    name: nonprod_settings\n    properties:\n      infraName: ${nonprodInfra.infraName}\n      settings:\n        - key: EnableClusterAutoscaler\n          value: 'true'\n        - key: EnableAwsAlbIngress\n          value: 'true'\n        - key: EnableSecretCsiDriver\n          value: 'true'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a DuploCloud infrastructure named 'prod' in the us-east-2 region, with a VPC CIDR of 10.50.0.0/16, a subnet mask of 22, and ECS cluster enabled\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst infra = new duplocloud.Infrastructure(\"infra\", {\n    infraName: \"prod\",\n    cloud: 0,\n    region: \"us-east-2\",\n    azcount: 2,\n    enableEcsCluster: true,\n    addressPrefix: \"10.50.0.0/16\",\n    subnetCidr: 22,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ninfra = duplocloud.Infrastructure(\"infra\",\n    infra_name=\"prod\",\n    cloud=0,\n    region=\"us-east-2\",\n    azcount=2,\n    enable_ecs_cluster=True,\n    address_prefix=\"10.50.0.0/16\",\n    subnet_cidr=22)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infra = new Duplocloud.Infrastructure(\"infra\", new()\n    {\n        InfraName = \"prod\",\n        Cloud = 0,\n        Region = \"us-east-2\",\n        Azcount = 2,\n        EnableEcsCluster = true,\n        AddressPrefix = \"10.50.0.0/16\",\n        SubnetCidr = 22,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewInfrastructure(ctx, \"infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:        pulumi.String(\"prod\"),\n\t\t\tCloud:            pulumi.Int(0),\n\t\t\tRegion:           pulumi.String(\"us-east-2\"),\n\t\t\tAzcount:          pulumi.Int(2),\n\t\t\tEnableEcsCluster: pulumi.Bool(true),\n\t\t\tAddressPrefix:    pulumi.String(\"10.50.0.0/16\"),\n\t\t\tSubnetCidr:       pulumi.Int(22),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var infra = new Infrastructure(\"infra\", InfrastructureArgs.builder()\n            .infraName(\"prod\")\n            .cloud(0)\n            .region(\"us-east-2\")\n            .azcount(2)\n            .enableEcsCluster(true)\n            .addressPrefix(\"10.50.0.0/16\")\n            .subnetCidr(22)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  infra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: prod\n      cloud: 0 # 0-AWS, 1- Oracle, 2- Azure, 3-Google\n      region: us-east-2\n      azcount: 2 # The number of availability zones.\n      enableEcsCluster: true\n      addressPrefix: 10.50.0.0/16\n      subnetCidr: 22\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a DuploCloud infrastructure named 'prod' in the us-east-2 region, with a VPC CIDR of 10.49.0.0/16, a subnet mask of 24, and EKS, ECS cluster enabled\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst infra = new duplocloud.Infrastructure(\"infra\", {\n    infraName: \"prod\",\n    cloud: 0,\n    region: \"us-east-2\",\n    azcount: 2,\n    enableK8Cluster: true,\n    enableEcsCluster: true,\n    addressPrefix: \"10.49.0.0/16\",\n    subnetCidr: 24,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ninfra = duplocloud.Infrastructure(\"infra\",\n    infra_name=\"prod\",\n    cloud=0,\n    region=\"us-east-2\",\n    azcount=2,\n    enable_k8_cluster=True,\n    enable_ecs_cluster=True,\n    address_prefix=\"10.49.0.0/16\",\n    subnet_cidr=24)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infra = new Duplocloud.Infrastructure(\"infra\", new()\n    {\n        InfraName = \"prod\",\n        Cloud = 0,\n        Region = \"us-east-2\",\n        Azcount = 2,\n        EnableK8Cluster = true,\n        EnableEcsCluster = true,\n        AddressPrefix = \"10.49.0.0/16\",\n        SubnetCidr = 24,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewInfrastructure(ctx, \"infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:        pulumi.String(\"prod\"),\n\t\t\tCloud:            pulumi.Int(0),\n\t\t\tRegion:           pulumi.String(\"us-east-2\"),\n\t\t\tAzcount:          pulumi.Int(2),\n\t\t\tEnableK8Cluster:  pulumi.Bool(true),\n\t\t\tEnableEcsCluster: pulumi.Bool(true),\n\t\t\tAddressPrefix:    pulumi.String(\"10.49.0.0/16\"),\n\t\t\tSubnetCidr:       pulumi.Int(24),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var infra = new Infrastructure(\"infra\", InfrastructureArgs.builder()\n            .infraName(\"prod\")\n            .cloud(0)\n            .region(\"us-east-2\")\n            .azcount(2)\n            .enableK8Cluster(true)\n            .enableEcsCluster(true)\n            .addressPrefix(\"10.49.0.0/16\")\n            .subnetCidr(24)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  infra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: prod\n      cloud: 0 # 0-AWS, 1- Oracle, 2- Azure, 3-Google\n      region: us-east-2\n      azcount: 2 # The number of availability zones.\n      enableK8Cluster: true\n      enableEcsCluster: true\n      addressPrefix: 10.49.0.0/16\n      subnetCidr: 24\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Set up a DuploCloud infrastructure named 'nonprod' in the us-west-2 region, with a VPC CIDR of 10.60.0.0/16, a subnet mask of 24, and an EKS cluster configured with an autoscaler, ingress controller, and Secrets Store CSI Driver using variables and dynamic blocks.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst config = new pulumi.Config();\nconst infraSettings = config.getObject\u003cArray\u003c{key?: string, value?: string}\u003e\u003e(\"infraSettings\") || [\n    {\n        key: \"EnableAwsAlbIngress\",\n        value: \"true\",\n    },\n    {\n        key: \"EnableClusterAutoscaler\",\n        value: \"true\",\n    },\n    {\n        key: \"EnableSecretCsiDriver\",\n        value: \"true\",\n    },\n];\nconst nonprodInfra = new duplocloud.Infrastructure(\"nonprod_infra\", {\n    infraName: \"nonprod\",\n    cloud: 0,\n    region: \"us-west-2\",\n    azcount: 2,\n    enableK8Cluster: true,\n    addressPrefix: \"10.60.0.0/16\",\n    subnetCidr: 22,\n});\nconst nonprodSettings = new duplocloud.InfrastructureSetting(\"nonprod_settings\", {\n    settings: infraSettings.map((v, k) =\u003e ({key: k, value: v})).map(entry =\u003e ({\n        key: entry.value.key,\n        value: entry.value.value,\n    })),\n    infraName: nonprodInfra.infraName,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nconfig = pulumi.Config()\ninfra_settings = config.get_object(\"infraSettings\")\nif infra_settings is None:\n    infra_settings = [\n        {\n            \"key\": \"EnableAwsAlbIngress\",\n            \"value\": \"true\",\n        },\n        {\n            \"key\": \"EnableClusterAutoscaler\",\n            \"value\": \"true\",\n        },\n        {\n            \"key\": \"EnableSecretCsiDriver\",\n            \"value\": \"true\",\n        },\n    ]\nnonprod_infra = duplocloud.Infrastructure(\"nonprod_infra\",\n    infra_name=\"nonprod\",\n    cloud=0,\n    region=\"us-west-2\",\n    azcount=2,\n    enable_k8_cluster=True,\n    address_prefix=\"10.60.0.0/16\",\n    subnet_cidr=22)\nnonprod_settings = duplocloud.InfrastructureSetting(\"nonprod_settings\",\n    settings=[{\n        \"key\": entry[\"value\"][\"key\"],\n        \"value\": entry[\"value\"][\"value\"],\n    } for entry in [{\"key\": k, \"value\": v} for k, v in infra_settings]],\n    infra_name=nonprod_infra.infra_name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var infraSettings = config.GetObject\u003cInfraSettings[]\u003e(\"infraSettings\") ?? new[]\n    {\n        \n        {\n            { \"key\", \"EnableAwsAlbIngress\" },\n            { \"value\", \"true\" },\n        },\n        \n        {\n            { \"key\", \"EnableClusterAutoscaler\" },\n            { \"value\", \"true\" },\n        },\n        \n        {\n            { \"key\", \"EnableSecretCsiDriver\" },\n            { \"value\", \"true\" },\n        },\n    };\n    var nonprodInfra = new Duplocloud.Infrastructure(\"nonprod_infra\", new()\n    {\n        InfraName = \"nonprod\",\n        Cloud = 0,\n        Region = \"us-west-2\",\n        Azcount = 2,\n        EnableK8Cluster = true,\n        AddressPrefix = \"10.60.0.0/16\",\n        SubnetCidr = 22,\n    });\n\n    var nonprodSettings = new Duplocloud.InfrastructureSetting(\"nonprod_settings\", new()\n    {\n        Settings = infraSettings.Select((v, k) =\u003e new { Key = k, Value = v }).Select(entry =\u003e \n        {\n            return new Duplocloud.Inputs.InfrastructureSettingSettingArgs\n            {\n                Key = entry.Value.Key,\n                Value = entry.Value.Value,\n            };\n        }).ToList(),\n        InfraName = nonprodInfra.InfraName,\n    });\n\n});\n\npublic class InfraSettings\n{\n    public string key { get; set; }\n    public string value { get; set; }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing infrastructure\n\n - *NAME* is the infrastructure name\n\n#\n\n```sh\n$ pulumi import duplocloud:index/infrastructure:Infrastructure myinfra v2/admin/InfrastructureV2/*NAME*\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The cloud account ID.\n"
                },
                "addressPrefix": {
                    "type": "string",
                    "description": "The CIDR to use for the VPC or VNet.\n"
                },
                "allSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructureAllSetting:InfrastructureAllSetting"
                    },
                    "description": "A complete list of configuration settings for this infrastructure, even ones not being managed by this resource.\n"
                },
                "azcount": {
                    "type": "integer",
                    "description": "The number of availability zones. Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.\n"
                },
                "cloud": {
                    "type": "integer",
                    "description": "The numerical index of cloud provider to use for the infrastructure. Should be one of: - `0` : AWS - `2` : Azure - `3` :\nGoogle\n"
                },
                "clusterIpCidr": {
                    "type": "string",
                    "description": "cluster IP CIDR defines a private IP address range used for internal Kubernetes services.\n"
                },
                "customDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructureCustomData:InfrastructureCustomData"
                    },
                    "description": "A list of configuration settings to apply on creation, expressed as key / value pairs.\n",
                    "deprecationMessage": "The custom_data argument is only applied on creation, and is deprecated in favor of the settings argument."
                },
                "deleteUnspecifiedSettings": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any settings not specified by this resource. **WARNING:** It is not\nrecommended to change the default value of `false`.\n"
                },
                "enableContainerInsights": {
                    "type": "boolean",
                    "description": "Whether or not to enable container insights for an ECS cluster.\n"
                },
                "enableEcsCluster": {
                    "type": "boolean",
                    "description": "Whether or not to provision an ECS cluster.\n"
                },
                "enableK8Cluster": {
                    "type": "boolean",
                    "description": "Whether or not to provision a kubernetes cluster.\n"
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.\n"
                },
                "isServerlessKubernetes": {
                    "type": "boolean",
                    "description": "Whether or not to make GKE with autopilot.\n"
                },
                "privateSubnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructurePrivateSubnet:InfrastructurePrivateSubnet"
                    },
                    "description": "The private subnets for the VPC or VNet.\n"
                },
                "publicSubnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructurePublicSubnet:InfrastructurePublicSubnet"
                    },
                    "description": "The public subnets for the VPC or VNet.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud provider region. The Duplo portal must have already been configured to support this region.\n"
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructureSecurityGroup:InfrastructureSecurityGroup"
                    },
                    "description": "The security groups for the VPC or VNet.\n"
                },
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructureSetting:InfrastructureSetting"
                    },
                    "description": "A list of configuration settings to manage, expressed as key / value pairs.\n"
                },
                "specifiedSettings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of configuration setting key being managed by this resource.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the infrastructure.\n"
                },
                "subnetAddressPrefix": {
                    "type": "string",
                    "description": "The address prefixe to use for the subnet. This is applicable only for Azure\n"
                },
                "subnetCidr": {
                    "type": "integer",
                    "description": "The CIDR subnet size (in bits) for the automatically created subnets. This is applicable only for AWS.\n"
                },
                "subnetFullname": {
                    "type": "string",
                    "description": "The full name of the subnet. This is applicable only for Azure.\n"
                },
                "subnetName": {
                    "type": "string",
                    "description": "The name of the subnet. This is applicable only for Azure.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC or VNet ID.\n"
                },
                "vpcName": {
                    "type": "string",
                    "description": "The VPC or VNet name.\n"
                },
                "waitUntilDeleted": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Duplo has destroyed the infrastructure.\n"
                }
            },
            "required": [
                "accountId",
                "addressPrefix",
                "allSettings",
                "clusterIpCidr",
                "enableContainerInsights",
                "enableEcsCluster",
                "enableK8Cluster",
                "infraName",
                "isServerlessKubernetes",
                "privateSubnets",
                "publicSubnets",
                "region",
                "securityGroups",
                "specifiedSettings",
                "status",
                "subnetAddressPrefix",
                "subnetFullname",
                "subnetName",
                "vpcId",
                "vpcName"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The cloud account ID.\n",
                    "willReplaceOnChanges": true
                },
                "addressPrefix": {
                    "type": "string",
                    "description": "The CIDR to use for the VPC or VNet.\n",
                    "willReplaceOnChanges": true
                },
                "azcount": {
                    "type": "integer",
                    "description": "The number of availability zones. Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.\n",
                    "willReplaceOnChanges": true
                },
                "cloud": {
                    "type": "integer",
                    "description": "The numerical index of cloud provider to use for the infrastructure. Should be one of: - `0` : AWS - `2` : Azure - `3` :\nGoogle\n",
                    "willReplaceOnChanges": true
                },
                "clusterIpCidr": {
                    "type": "string",
                    "description": "cluster IP CIDR defines a private IP address range used for internal Kubernetes services.\n",
                    "willReplaceOnChanges": true
                },
                "customDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructureCustomData:InfrastructureCustomData"
                    },
                    "description": "A list of configuration settings to apply on creation, expressed as key / value pairs.\n",
                    "deprecationMessage": "The custom_data argument is only applied on creation, and is deprecated in favor of the settings argument."
                },
                "deleteUnspecifiedSettings": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any settings not specified by this resource. **WARNING:** It is not\nrecommended to change the default value of `false`.\n"
                },
                "enableContainerInsights": {
                    "type": "boolean",
                    "description": "Whether or not to enable container insights for an ECS cluster.\n"
                },
                "enableEcsCluster": {
                    "type": "boolean",
                    "description": "Whether or not to provision an ECS cluster.\n"
                },
                "enableK8Cluster": {
                    "type": "boolean",
                    "description": "Whether or not to provision a kubernetes cluster.\n",
                    "willReplaceOnChanges": true
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.\n",
                    "willReplaceOnChanges": true
                },
                "isServerlessKubernetes": {
                    "type": "boolean",
                    "description": "Whether or not to make GKE with autopilot.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud provider region. The Duplo portal must have already been configured to support this region.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructureSetting:InfrastructureSetting"
                    },
                    "description": "A list of configuration settings to manage, expressed as key / value pairs.\n"
                },
                "subnetAddressPrefix": {
                    "type": "string",
                    "description": "The address prefixe to use for the subnet. This is applicable only for Azure\n",
                    "willReplaceOnChanges": true
                },
                "subnetCidr": {
                    "type": "integer",
                    "description": "The CIDR subnet size (in bits) for the automatically created subnets. This is applicable only for AWS.\n",
                    "willReplaceOnChanges": true
                },
                "subnetName": {
                    "type": "string",
                    "description": "The name of the subnet. This is applicable only for Azure.\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilDeleted": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Duplo has destroyed the infrastructure.\n"
                }
            },
            "requiredInputs": [
                "addressPrefix",
                "enableK8Cluster",
                "infraName",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Infrastructure resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The cloud account ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "addressPrefix": {
                        "type": "string",
                        "description": "The CIDR to use for the VPC or VNet.\n",
                        "willReplaceOnChanges": true
                    },
                    "allSettings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/InfrastructureAllSetting:InfrastructureAllSetting"
                        },
                        "description": "A complete list of configuration settings for this infrastructure, even ones not being managed by this resource.\n"
                    },
                    "azcount": {
                        "type": "integer",
                        "description": "The number of availability zones. Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloud": {
                        "type": "integer",
                        "description": "The numerical index of cloud provider to use for the infrastructure. Should be one of: - `0` : AWS - `2` : Azure - `3` :\nGoogle\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterIpCidr": {
                        "type": "string",
                        "description": "cluster IP CIDR defines a private IP address range used for internal Kubernetes services.\n",
                        "willReplaceOnChanges": true
                    },
                    "customDatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/InfrastructureCustomData:InfrastructureCustomData"
                        },
                        "description": "A list of configuration settings to apply on creation, expressed as key / value pairs.\n",
                        "deprecationMessage": "The custom_data argument is only applied on creation, and is deprecated in favor of the settings argument."
                    },
                    "deleteUnspecifiedSettings": {
                        "type": "boolean",
                        "description": "Whether or not this resource should delete any settings not specified by this resource. **WARNING:** It is not\nrecommended to change the default value of `false`.\n"
                    },
                    "enableContainerInsights": {
                        "type": "boolean",
                        "description": "Whether or not to enable container insights for an ECS cluster.\n"
                    },
                    "enableEcsCluster": {
                        "type": "boolean",
                        "description": "Whether or not to provision an ECS cluster.\n"
                    },
                    "enableK8Cluster": {
                        "type": "boolean",
                        "description": "Whether or not to provision a kubernetes cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "infraName": {
                        "type": "string",
                        "description": "The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "isServerlessKubernetes": {
                        "type": "boolean",
                        "description": "Whether or not to make GKE with autopilot.\n"
                    },
                    "privateSubnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/InfrastructurePrivateSubnet:InfrastructurePrivateSubnet"
                        },
                        "description": "The private subnets for the VPC or VNet.\n"
                    },
                    "publicSubnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/InfrastructurePublicSubnet:InfrastructurePublicSubnet"
                        },
                        "description": "The public subnets for the VPC or VNet.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The cloud provider region. The Duplo portal must have already been configured to support this region.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/InfrastructureSecurityGroup:InfrastructureSecurityGroup"
                        },
                        "description": "The security groups for the VPC or VNet.\n"
                    },
                    "settings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/InfrastructureSetting:InfrastructureSetting"
                        },
                        "description": "A list of configuration settings to manage, expressed as key / value pairs.\n"
                    },
                    "specifiedSettings": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of configuration setting key being managed by this resource.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the infrastructure.\n"
                    },
                    "subnetAddressPrefix": {
                        "type": "string",
                        "description": "The address prefixe to use for the subnet. This is applicable only for Azure\n",
                        "willReplaceOnChanges": true
                    },
                    "subnetCidr": {
                        "type": "integer",
                        "description": "The CIDR subnet size (in bits) for the automatically created subnets. This is applicable only for AWS.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnetFullname": {
                        "type": "string",
                        "description": "The full name of the subnet. This is applicable only for Azure.\n"
                    },
                    "subnetName": {
                        "type": "string",
                        "description": "The name of the subnet. This is applicable only for Azure.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The VPC or VNet ID.\n"
                    },
                    "vpcName": {
                        "type": "string",
                        "description": "The VPC or VNet name.\n"
                    },
                    "waitUntilDeleted": {
                        "type": "boolean",
                        "description": "Whether or not to wait until Duplo has destroyed the infrastructure.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/infrastructureOnprem:InfrastructureOnprem": {
            "description": "`duplocloud.InfrastructureOnprem` adds support to integrate on premise infra into duplocloud\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n//## Create a DuploCloud onpremise infrastructure named onprem with eks vendor\n//## Solution:\nconst infra = new duplocloud.InfrastructureOnprem(\"infra\", {\n    infraName: \"onprem\",\n    clusterName: \"onprem\",\n    region: \"us-west-2\",\n    azcount: 2,\n    enableK8Cluster: true,\n    vendor: 2,\n    clusterEndpoint: \"https://BB3C2589BAE34AD680060B5FDBA12BA1.gr7.us-west-2.eks.amazonaws.com\",\n    apiToken: \"\u003capi-token\u003e\",\n    clusterCertificateAuthorityData: \"\u003ccertificate-authority-data\u003e\",\n    dataCenter: \"us\",\n    eksConfig: {\n        privateSubnets: [\n            \"subnet-06c1b3a338ace60ce\",\n            \"subnet-09252308e1a093bda\",\n        ],\n        publicSubnets: [\n            \"subnet-0d5b3c3a3ae9d129f\",\n            \"subnet-065ab3e894092dd1c\",\n        ],\n        ingressSecurityGroupIds: [\"sg-0331e348b886ed796\"],\n        vpcId: \"vpc-0961fc6b0903ad63f\",\n    },\n    customDatas: [{\n        key: \"K8sVersion\",\n        value: \"1.31\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n### Create a DuploCloud onpremise infrastructure named onprem with eks vendor\n### Solution:\ninfra = duplocloud.InfrastructureOnprem(\"infra\",\n    infra_name=\"onprem\",\n    cluster_name=\"onprem\",\n    region=\"us-west-2\",\n    azcount=2,\n    enable_k8_cluster=True,\n    vendor=2,\n    cluster_endpoint=\"https://BB3C2589BAE34AD680060B5FDBA12BA1.gr7.us-west-2.eks.amazonaws.com\",\n    api_token=\"\u003capi-token\u003e\",\n    cluster_certificate_authority_data=\"\u003ccertificate-authority-data\u003e\",\n    data_center=\"us\",\n    eks_config={\n        \"private_subnets\": [\n            \"subnet-06c1b3a338ace60ce\",\n            \"subnet-09252308e1a093bda\",\n        ],\n        \"public_subnets\": [\n            \"subnet-0d5b3c3a3ae9d129f\",\n            \"subnet-065ab3e894092dd1c\",\n        ],\n        \"ingress_security_group_ids\": [\"sg-0331e348b886ed796\"],\n        \"vpc_id\": \"vpc-0961fc6b0903ad63f\",\n    },\n    custom_datas=[{\n        \"key\": \"K8sVersion\",\n        \"value\": \"1.31\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    //## Create a DuploCloud onpremise infrastructure named onprem with eks vendor\n    //## Solution:\n    var infra = new Duplocloud.InfrastructureOnprem(\"infra\", new()\n    {\n        InfraName = \"onprem\",\n        ClusterName = \"onprem\",\n        Region = \"us-west-2\",\n        Azcount = 2,\n        EnableK8Cluster = true,\n        Vendor = 2,\n        ClusterEndpoint = \"https://BB3C2589BAE34AD680060B5FDBA12BA1.gr7.us-west-2.eks.amazonaws.com\",\n        ApiToken = \"\u003capi-token\u003e\",\n        ClusterCertificateAuthorityData = \"\u003ccertificate-authority-data\u003e\",\n        DataCenter = \"us\",\n        EksConfig = new Duplocloud.Inputs.InfrastructureOnpremEksConfigArgs\n        {\n            PrivateSubnets = new[]\n            {\n                \"subnet-06c1b3a338ace60ce\",\n                \"subnet-09252308e1a093bda\",\n            },\n            PublicSubnets = new[]\n            {\n                \"subnet-0d5b3c3a3ae9d129f\",\n                \"subnet-065ab3e894092dd1c\",\n            },\n            IngressSecurityGroupIds = new[]\n            {\n                \"sg-0331e348b886ed796\",\n            },\n            VpcId = \"vpc-0961fc6b0903ad63f\",\n        },\n        CustomDatas = new[]\n        {\n            new Duplocloud.Inputs.InfrastructureOnpremCustomDataArgs\n            {\n                Key = \"K8sVersion\",\n                Value = \"1.31\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// ## Create a DuploCloud onpremise infrastructure named onprem with eks vendor\n\t\t// ## Solution:\n\t\t_, err := duplocloud.NewInfrastructureOnprem(ctx, \"infra\", \u0026duplocloud.InfrastructureOnpremArgs{\n\t\t\tInfraName:                       pulumi.String(\"onprem\"),\n\t\t\tClusterName:                     pulumi.String(\"onprem\"),\n\t\t\tRegion:                          pulumi.String(\"us-west-2\"),\n\t\t\tAzcount:                         pulumi.Int(2),\n\t\t\tEnableK8Cluster:                 pulumi.Bool(true),\n\t\t\tVendor:                          pulumi.Int(2),\n\t\t\tClusterEndpoint:                 pulumi.String(\"https://BB3C2589BAE34AD680060B5FDBA12BA1.gr7.us-west-2.eks.amazonaws.com\"),\n\t\t\tApiToken:                        pulumi.String(\"\u003capi-token\u003e\"),\n\t\t\tClusterCertificateAuthorityData: pulumi.String(\"\u003ccertificate-authority-data\u003e\"),\n\t\t\tDataCenter:                      pulumi.String(\"us\"),\n\t\t\tEksConfig: \u0026duplocloud.InfrastructureOnpremEksConfigArgs{\n\t\t\t\tPrivateSubnets: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"subnet-06c1b3a338ace60ce\"),\n\t\t\t\t\tpulumi.String(\"subnet-09252308e1a093bda\"),\n\t\t\t\t},\n\t\t\t\tPublicSubnets: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"subnet-0d5b3c3a3ae9d129f\"),\n\t\t\t\t\tpulumi.String(\"subnet-065ab3e894092dd1c\"),\n\t\t\t\t},\n\t\t\t\tIngressSecurityGroupIds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"sg-0331e348b886ed796\"),\n\t\t\t\t},\n\t\t\t\tVpcId: pulumi.String(\"vpc-0961fc6b0903ad63f\"),\n\t\t\t},\n\t\t\tCustomDatas: duplocloud.InfrastructureOnpremCustomDataArray{\n\t\t\t\t\u0026duplocloud.InfrastructureOnpremCustomDataArgs{\n\t\t\t\t\tKey:   pulumi.String(\"K8sVersion\"),\n\t\t\t\t\tValue: pulumi.String(\"1.31\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.InfrastructureOnprem;\nimport com.pulumi.duplocloud.InfrastructureOnpremArgs;\nimport com.pulumi.duplocloud.inputs.InfrastructureOnpremEksConfigArgs;\nimport com.pulumi.duplocloud.inputs.InfrastructureOnpremCustomDataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        //## Create a DuploCloud onpremise infrastructure named onprem with eks vendor\n        //## Solution:\n        var infra = new InfrastructureOnprem(\"infra\", InfrastructureOnpremArgs.builder()\n            .infraName(\"onprem\")\n            .clusterName(\"onprem\")\n            .region(\"us-west-2\")\n            .azcount(2)\n            .enableK8Cluster(true)\n            .vendor(2)\n            .clusterEndpoint(\"https://BB3C2589BAE34AD680060B5FDBA12BA1.gr7.us-west-2.eks.amazonaws.com\")\n            .apiToken(\"\u003capi-token\u003e\")\n            .clusterCertificateAuthorityData(\"\u003ccertificate-authority-data\u003e\")\n            .dataCenter(\"us\")\n            .eksConfig(InfrastructureOnpremEksConfigArgs.builder()\n                .privateSubnets(                \n                    \"subnet-06c1b3a338ace60ce\",\n                    \"subnet-09252308e1a093bda\")\n                .publicSubnets(                \n                    \"subnet-0d5b3c3a3ae9d129f\",\n                    \"subnet-065ab3e894092dd1c\")\n                .ingressSecurityGroupIds(\"sg-0331e348b886ed796\")\n                .vpcId(\"vpc-0961fc6b0903ad63f\")\n                .build())\n            .customDatas(InfrastructureOnpremCustomDataArgs.builder()\n                .key(\"K8sVersion\")\n                .value(\"1.31\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ### Create a DuploCloud onpremise infrastructure named onprem with eks vendor\n\n  ### Solution:\n  infra:\n    type: duplocloud:InfrastructureOnprem\n    properties:\n      infraName: onprem\n      clusterName: onprem\n      region: us-west-2\n      azcount: 2\n      enableK8Cluster: true\n      vendor: 2\n      clusterEndpoint: https://BB3C2589BAE34AD680060B5FDBA12BA1.gr7.us-west-2.eks.amazonaws.com\n      apiToken: \u003capi-token\u003e\n      clusterCertificateAuthorityData: \u003ccertificate-authority-data\u003e\n      dataCenter: us\n      eksConfig:\n        privateSubnets:\n          - subnet-06c1b3a338ace60ce\n          - subnet-09252308e1a093bda\n        publicSubnets:\n          - subnet-0d5b3c3a3ae9d129f\n          - subnet-065ab3e894092dd1c\n        ingressSecurityGroupIds:\n          - sg-0331e348b886ed796\n        vpcId: vpc-0961fc6b0903ad63f\n      customDatas:\n        - key: K8sVersion\n          value: '1.31'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing infrastructure\n\n - *NAME* is the infrastructure name\n\n#\n\n```sh\n$ pulumi import duplocloud:index/infrastructureOnprem:InfrastructureOnprem myinfra v2/admin/Infrastructure/OnPremises/*NAME*\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The cloud account ID. Used with GCP cloud\n"
                },
                "apiToken": {
                    "type": "string",
                    "description": "Token to access cluster API's\n"
                },
                "azcount": {
                    "type": "integer",
                    "description": "The number of availability zones.  Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.\n"
                },
                "clusterCertificateAuthorityData": {
                    "type": "string",
                    "description": "Required to validate API server certificates and kubelet client certificates\n"
                },
                "clusterEndpoint": {
                    "type": "string",
                    "description": "Endpoint URL of K8 cluster\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "Name of the on premise k8 cluster\n"
                },
                "customDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructureOnpremCustomData:InfrastructureOnpremCustomData"
                    },
                    "description": "A list of configuration settings to apply on creation, expressed as key / value pairs.\n"
                },
                "dataCenter": {
                    "type": "string",
                    "description": "Datacenter name of the onpremise cluster\n"
                },
                "eksConfig": {
                    "$ref": "#/types/duplocloud:index/InfrastructureOnpremEksConfig:InfrastructureOnpremEksConfig",
                    "description": "EKS configuration for on premise infra if vendor is selected as 2\n"
                },
                "enableK8Cluster": {
                    "type": "boolean",
                    "description": "Whether or not to provision a kubernetes cluster.\n"
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure.  Infrastructure names are globally unique and less than 13 characters.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cloud provider region.  The Duplo portal must have already been configured to support this region.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the infrastructure.\n"
                },
                "vendor": {
                    "type": "integer",
                    "description": "Type of on premise vendor \\n\\n0 - Rancher\\n\\n1 - Generic\\n\\n2 - EKS\\n\\n\n"
                }
            },
            "required": [
                "accountId",
                "apiToken",
                "clusterCertificateAuthorityData",
                "clusterEndpoint",
                "clusterName",
                "dataCenter",
                "enableK8Cluster",
                "infraName",
                "region",
                "status",
                "vendor"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The cloud account ID. Used with GCP cloud\n",
                    "willReplaceOnChanges": true
                },
                "apiToken": {
                    "type": "string",
                    "description": "Token to access cluster API's\n",
                    "willReplaceOnChanges": true
                },
                "azcount": {
                    "type": "integer",
                    "description": "The number of availability zones.  Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.\n",
                    "willReplaceOnChanges": true
                },
                "clusterCertificateAuthorityData": {
                    "type": "string",
                    "description": "Required to validate API server certificates and kubelet client certificates\n",
                    "willReplaceOnChanges": true
                },
                "clusterEndpoint": {
                    "type": "string",
                    "description": "Endpoint URL of K8 cluster\n",
                    "willReplaceOnChanges": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "Name of the on premise k8 cluster\n",
                    "willReplaceOnChanges": true
                },
                "customDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructureOnpremCustomData:InfrastructureOnpremCustomData"
                    },
                    "description": "A list of configuration settings to apply on creation, expressed as key / value pairs.\n",
                    "willReplaceOnChanges": true
                },
                "dataCenter": {
                    "type": "string",
                    "description": "Datacenter name of the onpremise cluster\n",
                    "willReplaceOnChanges": true
                },
                "eksConfig": {
                    "$ref": "#/types/duplocloud:index/InfrastructureOnpremEksConfig:InfrastructureOnpremEksConfig",
                    "description": "EKS configuration for on premise infra if vendor is selected as 2\n",
                    "willReplaceOnChanges": true
                },
                "enableK8Cluster": {
                    "type": "boolean",
                    "description": "Whether or not to provision a kubernetes cluster.\n",
                    "willReplaceOnChanges": true
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure.  Infrastructure names are globally unique and less than 13 characters.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The cloud provider region.  The Duplo portal must have already been configured to support this region.\n",
                    "willReplaceOnChanges": true
                },
                "vendor": {
                    "type": "integer",
                    "description": "Type of on premise vendor \\n\\n0 - Rancher\\n\\n1 - Generic\\n\\n2 - EKS\\n\\n\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiToken",
                "clusterCertificateAuthorityData",
                "clusterEndpoint",
                "clusterName",
                "dataCenter",
                "enableK8Cluster",
                "infraName",
                "region",
                "vendor"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InfrastructureOnprem resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The cloud account ID. Used with GCP cloud\n",
                        "willReplaceOnChanges": true
                    },
                    "apiToken": {
                        "type": "string",
                        "description": "Token to access cluster API's\n",
                        "willReplaceOnChanges": true
                    },
                    "azcount": {
                        "type": "integer",
                        "description": "The number of availability zones.  Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterCertificateAuthorityData": {
                        "type": "string",
                        "description": "Required to validate API server certificates and kubelet client certificates\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterEndpoint": {
                        "type": "string",
                        "description": "Endpoint URL of K8 cluster\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "Name of the on premise k8 cluster\n",
                        "willReplaceOnChanges": true
                    },
                    "customDatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/InfrastructureOnpremCustomData:InfrastructureOnpremCustomData"
                        },
                        "description": "A list of configuration settings to apply on creation, expressed as key / value pairs.\n",
                        "willReplaceOnChanges": true
                    },
                    "dataCenter": {
                        "type": "string",
                        "description": "Datacenter name of the onpremise cluster\n",
                        "willReplaceOnChanges": true
                    },
                    "eksConfig": {
                        "$ref": "#/types/duplocloud:index/InfrastructureOnpremEksConfig:InfrastructureOnpremEksConfig",
                        "description": "EKS configuration for on premise infra if vendor is selected as 2\n",
                        "willReplaceOnChanges": true
                    },
                    "enableK8Cluster": {
                        "type": "boolean",
                        "description": "Whether or not to provision a kubernetes cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "infraName": {
                        "type": "string",
                        "description": "The name of the infrastructure.  Infrastructure names are globally unique and less than 13 characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The cloud provider region.  The Duplo portal must have already been configured to support this region.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the infrastructure.\n"
                    },
                    "vendor": {
                        "type": "integer",
                        "description": "Type of on premise vendor \\n\\n0 - Rancher\\n\\n1 - Generic\\n\\n2 - EKS\\n\\n\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/infrastructureSetting:InfrastructureSetting": {
            "description": "`duplocloud.InfrastructureSetting` manages a infrastructure's configuration in Duplo.\n\nInfrastructure settings are initially populated by Duplo when an infrastructure is created.  This resource allows you take control of individual configuration settings for a specific infrastructure.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myinfra = new duplocloud.Infrastructure(\"myinfra\", {\n    infraName: \"myinfra\",\n    cloud: 0,\n    region: \"us-east-1\",\n    azcount: 2,\n    enableK8Cluster: true,\n    addressPrefix: \"10.34.0.0/16\",\n    subnetCidr: 24,\n});\nconst settings = new duplocloud.InfrastructureSetting(\"settings\", {\n    infraName: myinfra.name,\n    settings: [\n        {\n            key: \"EnableSecretCsiDriver\",\n            value: \"true\",\n        },\n        {\n            key: \"EnableAWSEfsVolumes\",\n            value: \"true\",\n        },\n        {\n            key: \"EnableAwsAlbIngress\",\n            value: \"true\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyinfra = duplocloud.Infrastructure(\"myinfra\",\n    infra_name=\"myinfra\",\n    cloud=0,\n    region=\"us-east-1\",\n    azcount=2,\n    enable_k8_cluster=True,\n    address_prefix=\"10.34.0.0/16\",\n    subnet_cidr=24)\nsettings = duplocloud.InfrastructureSetting(\"settings\",\n    infra_name=myinfra.name,\n    settings=[\n        {\n            \"key\": \"EnableSecretCsiDriver\",\n            \"value\": \"true\",\n        },\n        {\n            \"key\": \"EnableAWSEfsVolumes\",\n            \"value\": \"true\",\n        },\n        {\n            \"key\": \"EnableAwsAlbIngress\",\n            \"value\": \"true\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myinfra = new Duplocloud.Infrastructure(\"myinfra\", new()\n    {\n        InfraName = \"myinfra\",\n        Cloud = 0,\n        Region = \"us-east-1\",\n        Azcount = 2,\n        EnableK8Cluster = true,\n        AddressPrefix = \"10.34.0.0/16\",\n        SubnetCidr = 24,\n    });\n\n    var settings = new Duplocloud.InfrastructureSetting(\"settings\", new()\n    {\n        InfraName = myinfra.Name,\n        Settings = new[]\n        {\n            new Duplocloud.Inputs.InfrastructureSettingSettingArgs\n            {\n                Key = \"EnableSecretCsiDriver\",\n                Value = \"true\",\n            },\n            new Duplocloud.Inputs.InfrastructureSettingSettingArgs\n            {\n                Key = \"EnableAWSEfsVolumes\",\n                Value = \"true\",\n            },\n            new Duplocloud.Inputs.InfrastructureSettingSettingArgs\n            {\n                Key = \"EnableAwsAlbIngress\",\n                Value = \"true\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyinfra, err := duplocloud.NewInfrastructure(ctx, \"myinfra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"myinfra\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-east-1\"),\n\t\t\tAzcount:         pulumi.Int(2),\n\t\t\tEnableK8Cluster: pulumi.Bool(true),\n\t\t\tAddressPrefix:   pulumi.String(\"10.34.0.0/16\"),\n\t\t\tSubnetCidr:      pulumi.Int(24),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewInfrastructureSetting(ctx, \"settings\", \u0026duplocloud.InfrastructureSettingArgs{\n\t\t\tInfraName: myinfra.Name,\n\t\t\tSettings: duplocloud.InfrastructureSettingSettingArray{\n\t\t\t\t\u0026duplocloud.InfrastructureSettingSettingArgs{\n\t\t\t\t\tKey:   pulumi.String(\"EnableSecretCsiDriver\"),\n\t\t\t\t\tValue: pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.InfrastructureSettingSettingArgs{\n\t\t\t\t\tKey:   pulumi.String(\"EnableAWSEfsVolumes\"),\n\t\t\t\t\tValue: pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.InfrastructureSettingSettingArgs{\n\t\t\t\t\tKey:   pulumi.String(\"EnableAwsAlbIngress\"),\n\t\t\t\t\tValue: pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport com.pulumi.duplocloud.InfrastructureSetting;\nimport com.pulumi.duplocloud.InfrastructureSettingArgs;\nimport com.pulumi.duplocloud.inputs.InfrastructureSettingSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myinfra = new Infrastructure(\"myinfra\", InfrastructureArgs.builder()\n            .infraName(\"myinfra\")\n            .cloud(0)\n            .region(\"us-east-1\")\n            .azcount(2)\n            .enableK8Cluster(true)\n            .addressPrefix(\"10.34.0.0/16\")\n            .subnetCidr(24)\n            .build());\n\n        var settings = new InfrastructureSetting(\"settings\", InfrastructureSettingArgs.builder()\n            .infraName(myinfra.name())\n            .settings(            \n                InfrastructureSettingSettingArgs.builder()\n                    .key(\"EnableSecretCsiDriver\")\n                    .value(\"true\")\n                    .build(),\n                InfrastructureSettingSettingArgs.builder()\n                    .key(\"EnableAWSEfsVolumes\")\n                    .value(\"true\")\n                    .build(),\n                InfrastructureSettingSettingArgs.builder()\n                    .key(\"EnableAwsAlbIngress\")\n                    .value(\"true\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myinfra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: myinfra\n      cloud: 0 # AWS\n      region: us-east-1\n      azcount: 2\n      enableK8Cluster: true\n      addressPrefix: 10.34.0.0/16\n      subnetCidr: 24\n  settings:\n    type: duplocloud:InfrastructureSetting\n    properties:\n      infraName: ${myinfra.name}\n      settings:\n        - key: EnableSecretCsiDriver\n          value: 'true'\n        - key: EnableAWSEfsVolumes\n          value: 'true'\n        - key: EnableAwsAlbIngress\n          value: 'true'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing infrastructure setting\n\n - *NAME* is the infrastructure name\n\n#\n\n```sh\n$ pulumi import duplocloud:index/infrastructureSetting:InfrastructureSetting settings *NAME*\n```\n\n",
            "properties": {
                "customDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructureSettingCustomData:InfrastructureSettingCustomData"
                    },
                    "description": "A complete list of configuration settings for this infrastructure, even ones not being managed by this resource. The custom*data argument is only applied on creation, and is deprecated in favor of the settings argument.\n",
                    "deprecationMessage": "The custom_data argument is only applied on creation, and is deprecated in favor of the settings argument."
                },
                "deleteUnspecifiedSettings": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any settings not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure to configure.\n"
                },
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructureSettingSetting:InfrastructureSettingSetting"
                    },
                    "description": "A list of configuration settings to manage, expressed as key / value pairs.\n"
                },
                "specifiedSettings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of configuration setting key being managed by this resource.\n"
                }
            },
            "required": [
                "infraName",
                "specifiedSettings"
            ],
            "inputProperties": {
                "customDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructureSettingCustomData:InfrastructureSettingCustomData"
                    },
                    "description": "A complete list of configuration settings for this infrastructure, even ones not being managed by this resource. The custom*data argument is only applied on creation, and is deprecated in favor of the settings argument.\n",
                    "deprecationMessage": "The custom_data argument is only applied on creation, and is deprecated in favor of the settings argument."
                },
                "deleteUnspecifiedSettings": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any settings not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                },
                "infraName": {
                    "type": "string",
                    "description": "The name of the infrastructure to configure.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/InfrastructureSettingSetting:InfrastructureSettingSetting"
                    },
                    "description": "A list of configuration settings to manage, expressed as key / value pairs.\n"
                }
            },
            "requiredInputs": [
                "infraName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InfrastructureSetting resources.\n",
                "properties": {
                    "customDatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/InfrastructureSettingCustomData:InfrastructureSettingCustomData"
                        },
                        "description": "A complete list of configuration settings for this infrastructure, even ones not being managed by this resource. The custom*data argument is only applied on creation, and is deprecated in favor of the settings argument.\n",
                        "deprecationMessage": "The custom_data argument is only applied on creation, and is deprecated in favor of the settings argument."
                    },
                    "deleteUnspecifiedSettings": {
                        "type": "boolean",
                        "description": "Whether or not this resource should delete any settings not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                    },
                    "infraName": {
                        "type": "string",
                        "description": "The name of the infrastructure to configure.\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/InfrastructureSettingSetting:InfrastructureSettingSetting"
                        },
                        "description": "A list of configuration settings to manage, expressed as key / value pairs.\n"
                    },
                    "specifiedSettings": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of configuration setting key being managed by this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/infrastructureSubnet:InfrastructureSubnet": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// For AWS\nconst aws_subnet = new duplocloud.InfrastructureSubnet(\"aws-subnet\", {\n    name: \"mySubnet\",\n    infraName: \"myinfra\",\n    cidrBlock: \"10.34.1.0/24\",\n    type: \"private\",\n    zone: \"A\",\n});\n// For Azure\nconst az_subnet = new duplocloud.InfrastructureSubnet(\"az-subnet\", {\n    name: \"mySubnet\",\n    infraName: \"myinfra\",\n    cidrBlock: \"10.34.1.0/24\",\n    type: \"appgwsubnet\",\n    serviceEndpoints: [\"Microsoft.Storage\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# For AWS\naws_subnet = duplocloud.InfrastructureSubnet(\"aws-subnet\",\n    name=\"mySubnet\",\n    infra_name=\"myinfra\",\n    cidr_block=\"10.34.1.0/24\",\n    type=\"private\",\n    zone=\"A\")\n# For Azure\naz_subnet = duplocloud.InfrastructureSubnet(\"az-subnet\",\n    name=\"mySubnet\",\n    infra_name=\"myinfra\",\n    cidr_block=\"10.34.1.0/24\",\n    type=\"appgwsubnet\",\n    service_endpoints=[\"Microsoft.Storage\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // For AWS\n    var aws_subnet = new Duplocloud.InfrastructureSubnet(\"aws-subnet\", new()\n    {\n        Name = \"mySubnet\",\n        InfraName = \"myinfra\",\n        CidrBlock = \"10.34.1.0/24\",\n        Type = \"private\",\n        Zone = \"A\",\n    });\n\n    // For Azure\n    var az_subnet = new Duplocloud.InfrastructureSubnet(\"az-subnet\", new()\n    {\n        Name = \"mySubnet\",\n        InfraName = \"myinfra\",\n        CidrBlock = \"10.34.1.0/24\",\n        Type = \"appgwsubnet\",\n        ServiceEndpoints = new[]\n        {\n            \"Microsoft.Storage\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// For AWS\n\t\t_, err := duplocloud.NewInfrastructureSubnet(ctx, \"aws-subnet\", \u0026duplocloud.InfrastructureSubnetArgs{\n\t\t\tName:      pulumi.String(\"mySubnet\"),\n\t\t\tInfraName: pulumi.String(\"myinfra\"),\n\t\t\tCidrBlock: pulumi.String(\"10.34.1.0/24\"),\n\t\t\tType:      pulumi.String(\"private\"),\n\t\t\tZone:      pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// For Azure\n\t\t_, err = duplocloud.NewInfrastructureSubnet(ctx, \"az-subnet\", \u0026duplocloud.InfrastructureSubnetArgs{\n\t\t\tName:      pulumi.String(\"mySubnet\"),\n\t\t\tInfraName: pulumi.String(\"myinfra\"),\n\t\t\tCidrBlock: pulumi.String(\"10.34.1.0/24\"),\n\t\t\tType:      pulumi.String(\"appgwsubnet\"),\n\t\t\tServiceEndpoints: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Microsoft.Storage\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.InfrastructureSubnet;\nimport com.pulumi.duplocloud.InfrastructureSubnetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // For AWS\n        var aws_subnet = new InfrastructureSubnet(\"aws-subnet\", InfrastructureSubnetArgs.builder()\n            .name(\"mySubnet\")\n            .infraName(\"myinfra\")\n            .cidrBlock(\"10.34.1.0/24\")\n            .type(\"private\")\n            .zone(\"A\")\n            .build());\n\n        // For Azure\n        var az_subnet = new InfrastructureSubnet(\"az-subnet\", InfrastructureSubnetArgs.builder()\n            .name(\"mySubnet\")\n            .infraName(\"myinfra\")\n            .cidrBlock(\"10.34.1.0/24\")\n            .type(\"appgwsubnet\")\n            .serviceEndpoints(\"Microsoft.Storage\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # For AWS\n  aws-subnet:\n    type: duplocloud:InfrastructureSubnet\n    properties:\n      name: mySubnet\n      infraName: myinfra\n      cidrBlock: 10.34.1.0/24\n      type: private\n      zone: A\n  # For Azure\n  az-subnet:\n    type: duplocloud:InfrastructureSubnet\n    properties:\n      name: mySubnet\n      infraName: myinfra\n      cidrBlock: 10.34.1.0/24\n      type: appgwsubnet\n      serviceEndpoints:\n        - Microsoft.Storage\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing infrastructure subnet\n\n - *INFRA_NAME* is the infrastructure name\n\n - *NAME* is the infrastructure subnet name\n\n - *ADDRESS_PREFIX* is the infrastructure subnet address prefix\n\n#\n\n```sh\n$ pulumi import duplocloud:index/infrastructureSubnet:InfrastructureSubnet subnet *INFRA_NAME*/*NAME*/*ADDRESS_PREFIX*\n```\n\n",
            "properties": {
                "cidrBlock": {
                    "type": "string"
                },
                "infraName": {
                    "type": "string"
                },
                "isolatedNetwork": {
                    "type": "boolean",
                    "description": "Determines whether the isolated network is enabled. This is applicable only for Azure subnets. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string"
                },
                "serviceEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Service endpoints to associate with the azure subnet. Possible values include: `Microsoft.AzureActiveDirectory`, `Microsoft.AzureCosmosDB`, `Microsoft.ContainerRegistry`, `Microsoft.EventHub`, `Microsoft.KeyVault`, `Microsoft.ServiceBus`,`Microsoft.Sql`, `Microsoft.Storage` and `Microsoft.Web`. This is applicable only for Azure subnets.\n"
                },
                "subnetId": {
                    "type": "string"
                },
                "subnetName": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tagsAll": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Specify subnet type. `private` and `public` is used for AWS subnet. Will be one of `none`, `appgwsubnet`, `appgw-internal-subnet`, `azurebastionsubnet`, `managedinstance`, `databrick-workspace`, `mysql-flexiserver`, `postgres-flexiserver` is used for azure.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The Duplo zone that the subnet resides in.  Will be one of:  `\"A\"`, `\"B\"`, `\"C\"`, or `\"D\"`. This is applicable only for AWS subnets.\n"
                }
            },
            "required": [
                "cidrBlock",
                "infraName",
                "name",
                "serviceEndpoints",
                "subnetId",
                "subnetName",
                "tagsAll",
                "type"
            ],
            "inputProperties": {
                "cidrBlock": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "infraName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "isolatedNetwork": {
                    "type": "boolean",
                    "description": "Determines whether the isolated network is enabled. This is applicable only for Azure subnets. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "serviceEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Service endpoints to associate with the azure subnet. Possible values include: `Microsoft.AzureActiveDirectory`, `Microsoft.AzureCosmosDB`, `Microsoft.ContainerRegistry`, `Microsoft.EventHub`, `Microsoft.KeyVault`, `Microsoft.ServiceBus`,`Microsoft.Sql`, `Microsoft.Storage` and `Microsoft.Web`. This is applicable only for Azure subnets.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Specify subnet type. `private` and `public` is used for AWS subnet. Will be one of `none`, `appgwsubnet`, `appgw-internal-subnet`, `azurebastionsubnet`, `managedinstance`, `databrick-workspace`, `mysql-flexiserver`, `postgres-flexiserver` is used for azure.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "The Duplo zone that the subnet resides in.  Will be one of:  `\"A\"`, `\"B\"`, `\"C\"`, or `\"D\"`. This is applicable only for AWS subnets.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cidrBlock",
                "infraName",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InfrastructureSubnet resources.\n",
                "properties": {
                    "cidrBlock": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "infraName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "isolatedNetwork": {
                        "type": "boolean",
                        "description": "Determines whether the isolated network is enabled. This is applicable only for Azure subnets. Defaults to `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpoints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Service endpoints to associate with the azure subnet. Possible values include: `Microsoft.AzureActiveDirectory`, `Microsoft.AzureCosmosDB`, `Microsoft.ContainerRegistry`, `Microsoft.EventHub`, `Microsoft.KeyVault`, `Microsoft.ServiceBus`,`Microsoft.Sql`, `Microsoft.Storage` and `Microsoft.Web`. This is applicable only for Azure subnets.\n"
                    },
                    "subnetId": {
                        "type": "string"
                    },
                    "subnetName": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tagsAll": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "Specify subnet type. `private` and `public` is used for AWS subnet. Will be one of `none`, `appgwsubnet`, `appgw-internal-subnet`, `azurebastionsubnet`, `managedinstance`, `databrick-workspace`, `mysql-flexiserver`, `postgres-flexiserver` is used for azure.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "The Duplo zone that the subnet resides in.  Will be one of:  `\"A\"`, `\"B\"`, `\"C\"`, or `\"D\"`. This is applicable only for AWS subnets.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/k8ConfigMap:K8ConfigMap": {
            "description": "`duplocloud.K8ConfigMap` manages a kubernetes configmap in a Duplo tenant.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst myappK8ConfigMap = new duplocloud.K8ConfigMap(\"myapp\", {\n    tenantId: myapp.tenantId,\n    name: \"myconfigmap\",\n    data: JSON.stringify({\n        foo: \"bar2\",\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmyapp_k8_config_map = duplocloud.K8ConfigMap(\"myapp\",\n    tenant_id=myapp.tenant_id,\n    name=\"myconfigmap\",\n    data=json.dumps({\n        \"foo\": \"bar2\",\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var myappK8ConfigMap = new Duplocloud.K8ConfigMap(\"myapp\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"myconfigmap\",\n        Data = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"foo\"] = \"bar2\",\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"foo\": \"bar2\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = duplocloud.NewK8ConfigMap(ctx, \"myapp\", \u0026duplocloud.K8ConfigMapArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tName:     pulumi.String(\"myconfigmap\"),\n\t\t\tData:     pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.K8ConfigMap;\nimport com.pulumi.duplocloud.K8ConfigMapArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var myappK8ConfigMap = new K8ConfigMap(\"myappK8ConfigMap\", K8ConfigMapArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"myconfigmap\")\n            .data(serializeJson(\n                jsonObject(\n                    jsonProperty(\"foo\", \"bar2\")\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  myappK8ConfigMap:\n    type: duplocloud:K8ConfigMap\n    name: myapp\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: myconfigmap\n      data:\n        fn::toJSON:\n          foo: bar2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing kubernetes config map\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the config map name\n\n#\n\n```sh\n$ pulumi import duplocloud:index/k8ConfigMap:K8ConfigMap myapp v2/subscriptions/*TENANT_ID*/K8ConfigMapApiV2/*NAME*\n```\n\n",
            "properties": {
                "data": {
                    "type": "string",
                    "description": "A JSON encoded string representing the configmap data. You can use the `jsonencode()` function to build this from JSON.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "A JSON encoded string representing the configmap metadata. You can use the `jsondecode()` function to parse this, if needed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the configmap.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the configmap will be created in.\n"
                }
            },
            "required": [
                "data",
                "metadata",
                "name",
                "tenantId"
            ],
            "inputProperties": {
                "data": {
                    "type": "string",
                    "description": "A JSON encoded string representing the configmap data. You can use the `jsonencode()` function to build this from JSON.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the configmap.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the configmap will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "data",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8ConfigMap resources.\n",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "A JSON encoded string representing the configmap data. You can use the `jsonencode()` function to build this from JSON.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "A JSON encoded string representing the configmap metadata. You can use the `jsondecode()` function to parse this, if needed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the configmap.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the configmap will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/k8HelmRelease:K8HelmRelease": {
            "description": "`duplocloud_helm_release` manages helm release at duplocloud\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst release = new duplocloud.K8HelmRelease(\"release\", {\n    tenantId: myapp.tenantId,\n    name: \"helm-release-name\",\n    interval: \"05m00s\",\n    releaseName: \"helm-release-1\",\n    charts: [{\n        name: \"chart-name\",\n        version: \"v1\",\n        reconcileStrategy: \"ChartVersion\",\n        sourceType: \"HelmRepository\",\n        sourceName: repo.name,\n    }],\n    values: JSON.stringify({\n        replicaCount: 2,\n        serviceAccount: {\n            create: false,\n        },\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nrelease = duplocloud.K8HelmRelease(\"release\",\n    tenant_id=myapp.tenant_id,\n    name=\"helm-release-name\",\n    interval=\"05m00s\",\n    release_name=\"helm-release-1\",\n    charts=[{\n        \"name\": \"chart-name\",\n        \"version\": \"v1\",\n        \"reconcile_strategy\": \"ChartVersion\",\n        \"source_type\": \"HelmRepository\",\n        \"source_name\": repo[\"name\"],\n    }],\n    values=json.dumps({\n        \"replicaCount\": 2,\n        \"serviceAccount\": {\n            \"create\": False,\n        },\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var release = new Duplocloud.K8HelmRelease(\"release\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"helm-release-name\",\n        Interval = \"05m00s\",\n        ReleaseName = \"helm-release-1\",\n        Charts = new[]\n        {\n            new Duplocloud.Inputs.K8HelmReleaseChartArgs\n            {\n                Name = \"chart-name\",\n                Version = \"v1\",\n                ReconcileStrategy = \"ChartVersion\",\n                SourceType = \"HelmRepository\",\n                SourceName = repo.Name,\n            },\n        },\n        Values = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"replicaCount\"] = 2,\n            [\"serviceAccount\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"create\"] = false,\n            },\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"replicaCount\": 2,\n\t\t\t\"serviceAccount\": map[string]interface{}{\n\t\t\t\t\"create\": false,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = duplocloud.NewK8HelmRelease(ctx, \"release\", \u0026duplocloud.K8HelmReleaseArgs{\n\t\t\tTenantId:    myapp.TenantId,\n\t\t\tName:        pulumi.String(\"helm-release-name\"),\n\t\t\tInterval:    pulumi.String(\"05m00s\"),\n\t\t\tReleaseName: pulumi.String(\"helm-release-1\"),\n\t\t\tCharts: duplocloud.K8HelmReleaseChartArray{\n\t\t\t\t\u0026duplocloud.K8HelmReleaseChartArgs{\n\t\t\t\t\tName:              pulumi.String(\"chart-name\"),\n\t\t\t\t\tVersion:           pulumi.String(\"v1\"),\n\t\t\t\t\tReconcileStrategy: pulumi.String(\"ChartVersion\"),\n\t\t\t\t\tSourceType:        pulumi.String(\"HelmRepository\"),\n\t\t\t\t\tSourceName:        pulumi.Any(repo.Name),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValues: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.K8HelmRelease;\nimport com.pulumi.duplocloud.K8HelmReleaseArgs;\nimport com.pulumi.duplocloud.inputs.K8HelmReleaseChartArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var release = new K8HelmRelease(\"release\", K8HelmReleaseArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"helm-release-name\")\n            .interval(\"05m00s\")\n            .releaseName(\"helm-release-1\")\n            .charts(K8HelmReleaseChartArgs.builder()\n                .name(\"chart-name\")\n                .version(\"v1\")\n                .reconcileStrategy(\"ChartVersion\")\n                .sourceType(\"HelmRepository\")\n                .sourceName(repo.name())\n                .build())\n            .values(serializeJson(\n                jsonObject(\n                    jsonProperty(\"replicaCount\", 2),\n                    jsonProperty(\"serviceAccount\", jsonObject(\n                        jsonProperty(\"create\", false)\n                    ))\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  release:\n    type: duplocloud:K8HelmRelease\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: helm-release-name\n      interval: 05m00s\n      releaseName: helm-release-1\n      charts:\n        - name: chart-name\n          version: v1\n          reconcileStrategy: ChartVersion\n          sourceType: HelmRepository\n          sourceName: ${repo.name}\n      values:\n        fn::toJSON:\n          replicaCount: 2\n          serviceAccount:\n            create: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing helm release\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the helm release name\n\n#\n\n```sh\n$ pulumi import duplocloud:index/k8HelmRelease:K8HelmRelease release *TENANT_ID*/helm-release/*NAME*\n```\n\n",
            "properties": {
                "charts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8HelmReleaseChart:K8HelmReleaseChart"
                    },
                    "description": "Helm chart\n"
                },
                "interval": {
                    "type": "string",
                    "description": "Interval related to helm release Defaults to `5m0s`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the helm chart\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Provide release name to identify specific deployment of helm chart.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the storage bucket will be created in.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Customise an helm chart.\n"
                }
            },
            "required": [
                "charts",
                "name",
                "releaseName",
                "tenantId"
            ],
            "inputProperties": {
                "charts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8HelmReleaseChart:K8HelmReleaseChart"
                    },
                    "description": "Helm chart\n",
                    "willReplaceOnChanges": true
                },
                "interval": {
                    "type": "string",
                    "description": "Interval related to helm release Defaults to `5m0s`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the helm chart\n",
                    "willReplaceOnChanges": true
                },
                "releaseName": {
                    "type": "string",
                    "description": "Provide release name to identify specific deployment of helm chart.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the storage bucket will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "values": {
                    "type": "string",
                    "description": "Customise an helm chart.\n"
                }
            },
            "requiredInputs": [
                "releaseName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8HelmRelease resources.\n",
                "properties": {
                    "charts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/K8HelmReleaseChart:K8HelmReleaseChart"
                        },
                        "description": "Helm chart\n",
                        "willReplaceOnChanges": true
                    },
                    "interval": {
                        "type": "string",
                        "description": "Interval related to helm release Defaults to `5m0s`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the helm chart\n",
                        "willReplaceOnChanges": true
                    },
                    "releaseName": {
                        "type": "string",
                        "description": "Provide release name to identify specific deployment of helm chart.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the storage bucket will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "values": {
                        "type": "string",
                        "description": "Customise an helm chart.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/k8HelmRepository:K8HelmRepository": {
            "description": "`duplocloud_helm_repository` manages helm repository in duplocloud\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst repo = new duplocloud.index.HelmRepository(\"repo\", {\n    tenantId: myapp.tenantId,\n    name: \"repo-name\",\n    interval: \"06m00s\",\n    url: \"https://helm.github.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nrepo = duplocloud.index.HelmRepository(\"repo\",\n    tenant_id=myapp.tenant_id,\n    name=repo-name,\n    interval=06m00s,\n    url=https://helm.github.com)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var repo = new Duplocloud.Index.HelmRepository(\"repo\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"repo-name\",\n        Interval = \"06m00s\",\n        Url = \"https://helm.github.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewHelmRepository(ctx, \"repo\", \u0026duplocloud.HelmRepositoryArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tName:     \"repo-name\",\n\t\t\tInterval: \"06m00s\",\n\t\t\tUrl:      \"https://helm.github.com\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.helmRepository;\nimport com.pulumi.duplocloud.HelmRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var repo = new HelmRepository(\"repo\", HelmRepositoryArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"repo-name\")\n            .interval(\"06m00s\")\n            .url(\"https://helm.github.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  repo:\n    type: duplocloud:helmRepository\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: repo-name\n      interval: 06m00s\n      url: https://helm.github.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing helm repository\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the helm repository name\n\n#\n\n```sh\n$ pulumi import duplocloud:index/k8HelmRepository:K8HelmRepository repo *TENANT_ID*/helm-repository/*NAME*\n```\n\n",
            "properties": {
                "interval": {
                    "type": "string",
                    "description": "The interval associated to helm repository Defaults to `5m0s`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier name for the helm repository in duplocloud\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the storage bucket will be created in.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of helm repository to be attached\n"
                }
            },
            "required": [
                "name",
                "tenantId",
                "url"
            ],
            "inputProperties": {
                "interval": {
                    "type": "string",
                    "description": "The interval associated to helm repository Defaults to `5m0s`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier name for the helm repository in duplocloud\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the storage bucket will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "The url of helm repository to be attached\n"
                }
            },
            "requiredInputs": [
                "tenantId",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8HelmRepository resources.\n",
                "properties": {
                    "interval": {
                        "type": "string",
                        "description": "The interval associated to helm repository Defaults to `5m0s`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier name for the helm repository in duplocloud\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the storage bucket will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The url of helm repository to be attached\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/k8Ingress:K8Ingress": {
            "description": "`duplocloud.K8Ingress` manages a kubernetes Ingress in a Duplo tenant.\n\n## Import\n\nExample: Importing an existing kubernetes ingress\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the ingress name\n\n#\n\n```sh\n$ pulumi import duplocloud:index/k8Ingress:K8Ingress ingress v3/subscriptions/*TENANT_ID*/k8s/ingress/*NAME*\n```\n\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the ingress that may be used to store arbitrary metadata.\n"
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "The ingress class name references an IngressClass resource that contains additional configuration including the name of the controller that should implement the class.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the service. May match selectors of replication controllers and services.\n"
                },
                "lbconfig": {
                    "$ref": "#/types/duplocloud:index/K8IngressLbconfig:K8IngressLbconfig",
                    "description": "The load balancer configuration. This is required when `ingress_class_name` is set to `alb`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Ingress.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8IngressRule:K8IngressRule"
                    },
                    "description": "A list of host rules used to configure the Ingress.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the Ingress will be created in.\n"
                },
                "tls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8IngressTl:K8IngressTl"
                    },
                    "description": "Block represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI\n"
                }
            },
            "required": [
                "annotations",
                "ingressClassName",
                "labels",
                "lbconfig",
                "name",
                "rules",
                "tenantId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the ingress that may be used to store arbitrary metadata.\n"
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "The ingress class name references an IngressClass resource that contains additional configuration including the name of the controller that should implement the class.\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the service. May match selectors of replication controllers and services.\n"
                },
                "lbconfig": {
                    "$ref": "#/types/duplocloud:index/K8IngressLbconfig:K8IngressLbconfig",
                    "description": "The load balancer configuration. This is required when `ingress_class_name` is set to `alb`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Ingress.\n",
                    "willReplaceOnChanges": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8IngressRule:K8IngressRule"
                    },
                    "description": "A list of host rules used to configure the Ingress.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the Ingress will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "tls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8IngressTl:K8IngressTl"
                    },
                    "description": "Block represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI\n"
                }
            },
            "requiredInputs": [
                "ingressClassName",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8Ingress resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "An unstructured key value map stored with the ingress that may be used to store arbitrary metadata.\n"
                    },
                    "ingressClassName": {
                        "type": "string",
                        "description": "The ingress class name references an IngressClass resource that contains additional configuration including the name of the controller that should implement the class.\n",
                        "willReplaceOnChanges": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the service. May match selectors of replication controllers and services.\n"
                    },
                    "lbconfig": {
                        "$ref": "#/types/duplocloud:index/K8IngressLbconfig:K8IngressLbconfig",
                        "description": "The load balancer configuration. This is required when `ingress_class_name` is set to `alb`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Ingress.\n",
                        "willReplaceOnChanges": true
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/K8IngressRule:K8IngressRule"
                        },
                        "description": "A list of host rules used to configure the Ingress.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the Ingress will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "tls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/K8IngressTl:K8IngressTl"
                        },
                        "description": "Block represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/k8PersistentVolumeClaim:K8PersistentVolumeClaim": {
            "description": "`duplocloud.K8PersistentVolumeClaim` manages a kubernetes persistent volume claim in a Duplo tenant.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenantId = \"3a0b2ea5-7403-4765-ad6e-8771ca8fa0fd\";\nconst pvc = new duplocloud.K8PersistentVolumeClaim(\"pvc\", {\n    tenantId: tenantId,\n    name: \"pvc\",\n    spec: {\n        accessModes: [\"ReadWriteMany\"],\n        volumeMode: \"Filesystem\",\n        storageClassName: \"duploservices-dev02-sc\",\n        resources: {\n            limits: {\n                storage: \"20Gi\",\n            },\n            requests: {\n                storage: \"10Gi\",\n            },\n        },\n    },\n    annotations: {\n        a1: \"v1\",\n        a2: \"v2\",\n    },\n    labels: {\n        l1: \"v1\",\n        l2: \"v2\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant_id = \"3a0b2ea5-7403-4765-ad6e-8771ca8fa0fd\"\npvc = duplocloud.K8PersistentVolumeClaim(\"pvc\",\n    tenant_id=tenant_id,\n    name=\"pvc\",\n    spec={\n        \"access_modes\": [\"ReadWriteMany\"],\n        \"volume_mode\": \"Filesystem\",\n        \"storage_class_name\": \"duploservices-dev02-sc\",\n        \"resources\": {\n            \"limits\": {\n                \"storage\": \"20Gi\",\n            },\n            \"requests\": {\n                \"storage\": \"10Gi\",\n            },\n        },\n    },\n    annotations={\n        \"a1\": \"v1\",\n        \"a2\": \"v2\",\n    },\n    labels={\n        \"l1\": \"v1\",\n        \"l2\": \"v2\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenantId = \"3a0b2ea5-7403-4765-ad6e-8771ca8fa0fd\";\n\n    var pvc = new Duplocloud.K8PersistentVolumeClaim(\"pvc\", new()\n    {\n        TenantId = tenantId,\n        Name = \"pvc\",\n        Spec = new Duplocloud.Inputs.K8PersistentVolumeClaimSpecArgs\n        {\n            AccessModes = new[]\n            {\n                \"ReadWriteMany\",\n            },\n            VolumeMode = \"Filesystem\",\n            StorageClassName = \"duploservices-dev02-sc\",\n            Resources = new Duplocloud.Inputs.K8PersistentVolumeClaimSpecResourcesArgs\n            {\n                Limits = \n                {\n                    { \"storage\", \"20Gi\" },\n                },\n                Requests = \n                {\n                    { \"storage\", \"10Gi\" },\n                },\n            },\n        },\n        Annotations = \n        {\n            { \"a1\", \"v1\" },\n            { \"a2\", \"v2\" },\n        },\n        Labels = \n        {\n            { \"l1\", \"v1\" },\n            { \"l2\", \"v2\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenantId := \"3a0b2ea5-7403-4765-ad6e-8771ca8fa0fd\"\n\t\t_, err := duplocloud.NewK8PersistentVolumeClaim(ctx, \"pvc\", \u0026duplocloud.K8PersistentVolumeClaimArgs{\n\t\t\tTenantId: pulumi.String(tenantId),\n\t\t\tName:     pulumi.String(\"pvc\"),\n\t\t\tSpec: \u0026duplocloud.K8PersistentVolumeClaimSpecArgs{\n\t\t\t\tAccessModes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ReadWriteMany\"),\n\t\t\t\t},\n\t\t\t\tVolumeMode:       pulumi.String(\"Filesystem\"),\n\t\t\t\tStorageClassName: pulumi.String(\"duploservices-dev02-sc\"),\n\t\t\t\tResources: \u0026duplocloud.K8PersistentVolumeClaimSpecResourcesArgs{\n\t\t\t\t\tLimits: pulumi.StringMap{\n\t\t\t\t\t\t\"storage\": pulumi.String(\"20Gi\"),\n\t\t\t\t\t},\n\t\t\t\t\tRequests: pulumi.StringMap{\n\t\t\t\t\t\t\"storage\": pulumi.String(\"10Gi\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tAnnotations: pulumi.StringMap{\n\t\t\t\t\"a1\": pulumi.String(\"v1\"),\n\t\t\t\t\"a2\": pulumi.String(\"v2\"),\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"l1\": pulumi.String(\"v1\"),\n\t\t\t\t\"l2\": pulumi.String(\"v2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.K8PersistentVolumeClaim;\nimport com.pulumi.duplocloud.K8PersistentVolumeClaimArgs;\nimport com.pulumi.duplocloud.inputs.K8PersistentVolumeClaimSpecArgs;\nimport com.pulumi.duplocloud.inputs.K8PersistentVolumeClaimSpecResourcesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tenantId = \"3a0b2ea5-7403-4765-ad6e-8771ca8fa0fd\";\n\n        var pvc = new K8PersistentVolumeClaim(\"pvc\", K8PersistentVolumeClaimArgs.builder()\n            .tenantId(tenantId)\n            .name(\"pvc\")\n            .spec(K8PersistentVolumeClaimSpecArgs.builder()\n                .accessModes(\"ReadWriteMany\")\n                .volumeMode(\"Filesystem\")\n                .storageClassName(\"duploservices-dev02-sc\")\n                .resources(K8PersistentVolumeClaimSpecResourcesArgs.builder()\n                    .limits(Map.of(\"storage\", \"20Gi\"))\n                    .requests(Map.of(\"storage\", \"10Gi\"))\n                    .build())\n                .build())\n            .annotations(Map.ofEntries(\n                Map.entry(\"a1\", \"v1\"),\n                Map.entry(\"a2\", \"v2\")\n            ))\n            .labels(Map.ofEntries(\n                Map.entry(\"l1\", \"v1\"),\n                Map.entry(\"l2\", \"v2\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pvc:\n    type: duplocloud:K8PersistentVolumeClaim\n    properties:\n      tenantId: ${tenantId}\n      name: pvc\n      spec:\n        accessModes:\n          - ReadWriteMany\n        volumeMode: Filesystem\n        storageClassName: duploservices-dev02-sc\n        resources:\n          limits:\n            storage: 20Gi\n          requests:\n            storage: 10Gi\n      annotations:\n        a1: v1\n        a2: v2\n      labels:\n        l1: v1\n        l2: v2\nvariables:\n  tenantId: 3a0b2ea5-7403-4765-ad6e-8771ca8fa0fd\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing kubernetes Persistent Volume Claim\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the name of Persistent Volume Claim\n\n#\n\n```sh\n$ pulumi import duplocloud:index/k8PersistentVolumeClaim:K8PersistentVolumeClaim pvc v3/subscriptions/*TENANT_ID*/k8s/pvc/*NAME*\n```\n\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the persistent volume claim.\n"
                },
                "spec": {
                    "$ref": "#/types/duplocloud:index/K8PersistentVolumeClaimSpec:K8PersistentVolumeClaimSpec",
                    "description": "Spec defines the desired characteristics of a volume requested by a pod author. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the persistent volume claim will be created in.\n"
                }
            },
            "required": [
                "annotations",
                "labels",
                "name",
                "spec",
                "tenantId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the persistent volume claim.\n",
                    "willReplaceOnChanges": true
                },
                "spec": {
                    "$ref": "#/types/duplocloud:index/K8PersistentVolumeClaimSpec:K8PersistentVolumeClaimSpec",
                    "description": "Spec defines the desired characteristics of a volume requested by a pod author. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the persistent volume claim will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "spec",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8PersistentVolumeClaim resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the service.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the persistent volume claim.\n",
                        "willReplaceOnChanges": true
                    },
                    "spec": {
                        "$ref": "#/types/duplocloud:index/K8PersistentVolumeClaimSpec:K8PersistentVolumeClaimSpec",
                        "description": "Spec defines the desired characteristics of a volume requested by a pod author. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the persistent volume claim will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/k8Secret:K8Secret": {
            "description": "`duplocloud.K8Secret` manages a kubernetes secret in a Duplo tenant.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  myappK8Secret:\n    type: duplocloud:K8Secret\n    name: myapp\n    properties:\n      tenantId: ${myapp.tenantId}\n      secretName: mysecret\n      secretType: Opaque\n      secretData:\n        fn::toJSON:\n          foo: bar2\n      secretLabel:\n        keyA: ValueA\n        keyB: ValueB\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing kubernetes secret\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the config map name\n\n#\n\n```sh\n$ pulumi import duplocloud:index/k8Secret:K8Secret myapp v2/subscriptions/*TENANT_ID*/K8SecretApiV2/*NAME*\n```\n\n",
            "properties": {
                "clientSecretVersion": {
                    "type": "string"
                },
                "secretAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the secret\n"
                },
                "secretData": {
                    "type": "string",
                    "description": "A JSON encoded string representing the secret metadata. You can use the `jsonencode()` function to convert map or object data, if needed. You can use the `jsondecode()` function to read data.\n",
                    "secret": true
                },
                "secretLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the secret\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "The name of the secret.\n"
                },
                "secretType": {
                    "type": "string",
                    "description": "The type of the secret.  Usually `\"Opaque\"`.\n"
                },
                "secretVersion": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the secret will be created in.\n"
                }
            },
            "required": [
                "clientSecretVersion",
                "secretAnnotations",
                "secretLabels",
                "secretName",
                "secretType",
                "secretVersion",
                "tenantId"
            ],
            "inputProperties": {
                "secretAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the secret\n"
                },
                "secretData": {
                    "type": "string",
                    "description": "A JSON encoded string representing the secret metadata. You can use the `jsonencode()` function to convert map or object data, if needed. You can use the `jsondecode()` function to read data.\n",
                    "secret": true
                },
                "secretLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the secret\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "The name of the secret.\n",
                    "willReplaceOnChanges": true
                },
                "secretType": {
                    "type": "string",
                    "description": "The type of the secret.  Usually `\"Opaque\"`.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the secret will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "secretName",
                "secretType",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8Secret resources.\n",
                "properties": {
                    "clientSecretVersion": {
                        "type": "string"
                    },
                    "secretAnnotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the secret\n"
                    },
                    "secretData": {
                        "type": "string",
                        "description": "A JSON encoded string representing the secret metadata. You can use the `jsonencode()` function to convert map or object data, if needed. You can use the `jsondecode()` function to read data.\n",
                        "secret": true
                    },
                    "secretLabels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the secret\n"
                    },
                    "secretName": {
                        "type": "string",
                        "description": "The name of the secret.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretType": {
                        "type": "string",
                        "description": "The type of the secret.  Usually `\"Opaque\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretVersion": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the secret will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/k8SecretProviderClass:K8SecretProviderClass": {
            "description": "`duplocloud.K8SecretProviderClass` manages a kubernetes Secret Provider Class in a Duplo tenant.\n\n## Import\n\nExample: Importing an existing kubernetes secret provider class\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the secret provider class name\n\n#\n\n```sh\n$ pulumi import duplocloud:index/k8SecretProviderClass:K8SecretProviderClass spc v3/subscriptions/*TENANT_ID*/k8s/secretproviderclass/*NAME*\n```\n\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the secret provider class that may be used to store arbitrary metadata.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Secret Provider Class.\n"
                },
                "parameters": {
                    "type": "string",
                    "description": "The parameters section contains the details of the mount request.\n"
                },
                "secretObjects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8SecretProviderClassSecretObject:K8SecretProviderClassSecretObject"
                    },
                    "description": "You may want to create a Kubernetes Secret to mirror the mounted content. Use the optional secretObjects field to define the desired state of the synced Kubernetes secret objects\n"
                },
                "secretProvider": {
                    "type": "string",
                    "description": "Provider to be used.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the Secret Provider Class will be created in.\n"
                }
            },
            "required": [
                "annotations",
                "labels",
                "name",
                "parameters",
                "secretObjects",
                "secretProvider",
                "tenantId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the secret provider class that may be used to store arbitrary metadata.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Secret Provider Class.\n",
                    "willReplaceOnChanges": true
                },
                "parameters": {
                    "type": "string",
                    "description": "The parameters section contains the details of the mount request.\n"
                },
                "secretObjects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8SecretProviderClassSecretObject:K8SecretProviderClassSecretObject"
                    },
                    "description": "You may want to create a Kubernetes Secret to mirror the mounted content. Use the optional secretObjects field to define the desired state of the synced Kubernetes secret objects\n"
                },
                "secretProvider": {
                    "type": "string",
                    "description": "Provider to be used.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the Secret Provider Class will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "secretProvider",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8SecretProviderClass resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "An unstructured key value map stored with the secret provider class that may be used to store arbitrary metadata.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the service.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Secret Provider Class.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "string",
                        "description": "The parameters section contains the details of the mount request.\n"
                    },
                    "secretObjects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/K8SecretProviderClassSecretObject:K8SecretProviderClassSecretObject"
                        },
                        "description": "You may want to create a Kubernetes Secret to mirror the mounted content. Use the optional secretObjects field to define the desired state of the synced Kubernetes secret objects\n"
                    },
                    "secretProvider": {
                        "type": "string",
                        "description": "Provider to be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the Secret Provider Class will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/k8StorageClass:K8StorageClass": {
            "description": "`duplocloud.K8StorageClass` manages a kubernetes storage class in a Duplo tenant.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenantId = \"3a0b2ea5-7403-4765-ad6e-8771ca8fa0fd\";\nconst sc = new duplocloud.K8StorageClass(\"sc\", {\n    tenantId: tenantId,\n    name: \"sc\",\n    storageProvisioner: \"efs.csi.aws.com\",\n    reclaimPolicy: \"Delete\",\n    volumeBindingMode: \"Immediate\",\n    allowVolumeExpansion: false,\n    parameters: {\n        fileSystemId: \"fs-0d2f79aca4712c6e8\",\n        basePath: \"/dynamic_provisioning\",\n        directoryPerms: \"700\",\n        gidRangeStart: \"1000\",\n        gidRangeEnd: \"2000\",\n        provisioningMode: \"efs-ap\",\n    },\n    annotations: {\n        a1: \"v1\",\n        a2: \"v2\",\n    },\n    labels: {\n        l1: \"v1\",\n        l2: \"v2\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant_id = \"3a0b2ea5-7403-4765-ad6e-8771ca8fa0fd\"\nsc = duplocloud.K8StorageClass(\"sc\",\n    tenant_id=tenant_id,\n    name=\"sc\",\n    storage_provisioner=\"efs.csi.aws.com\",\n    reclaim_policy=\"Delete\",\n    volume_binding_mode=\"Immediate\",\n    allow_volume_expansion=False,\n    parameters={\n        \"fileSystemId\": \"fs-0d2f79aca4712c6e8\",\n        \"basePath\": \"/dynamic_provisioning\",\n        \"directoryPerms\": \"700\",\n        \"gidRangeStart\": \"1000\",\n        \"gidRangeEnd\": \"2000\",\n        \"provisioningMode\": \"efs-ap\",\n    },\n    annotations={\n        \"a1\": \"v1\",\n        \"a2\": \"v2\",\n    },\n    labels={\n        \"l1\": \"v1\",\n        \"l2\": \"v2\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenantId = \"3a0b2ea5-7403-4765-ad6e-8771ca8fa0fd\";\n\n    var sc = new Duplocloud.K8StorageClass(\"sc\", new()\n    {\n        TenantId = tenantId,\n        Name = \"sc\",\n        StorageProvisioner = \"efs.csi.aws.com\",\n        ReclaimPolicy = \"Delete\",\n        VolumeBindingMode = \"Immediate\",\n        AllowVolumeExpansion = false,\n        Parameters = \n        {\n            { \"fileSystemId\", \"fs-0d2f79aca4712c6e8\" },\n            { \"basePath\", \"/dynamic_provisioning\" },\n            { \"directoryPerms\", \"700\" },\n            { \"gidRangeStart\", \"1000\" },\n            { \"gidRangeEnd\", \"2000\" },\n            { \"provisioningMode\", \"efs-ap\" },\n        },\n        Annotations = \n        {\n            { \"a1\", \"v1\" },\n            { \"a2\", \"v2\" },\n        },\n        Labels = \n        {\n            { \"l1\", \"v1\" },\n            { \"l2\", \"v2\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenantId := \"3a0b2ea5-7403-4765-ad6e-8771ca8fa0fd\"\n\t\t_, err := duplocloud.NewK8StorageClass(ctx, \"sc\", \u0026duplocloud.K8StorageClassArgs{\n\t\t\tTenantId:             pulumi.String(tenantId),\n\t\t\tName:                 pulumi.String(\"sc\"),\n\t\t\tStorageProvisioner:   pulumi.String(\"efs.csi.aws.com\"),\n\t\t\tReclaimPolicy:        pulumi.String(\"Delete\"),\n\t\t\tVolumeBindingMode:    pulumi.String(\"Immediate\"),\n\t\t\tAllowVolumeExpansion: pulumi.Bool(false),\n\t\t\tParameters: pulumi.StringMap{\n\t\t\t\t\"fileSystemId\":     pulumi.String(\"fs-0d2f79aca4712c6e8\"),\n\t\t\t\t\"basePath\":         pulumi.String(\"/dynamic_provisioning\"),\n\t\t\t\t\"directoryPerms\":   pulumi.String(\"700\"),\n\t\t\t\t\"gidRangeStart\":    pulumi.String(\"1000\"),\n\t\t\t\t\"gidRangeEnd\":      pulumi.String(\"2000\"),\n\t\t\t\t\"provisioningMode\": pulumi.String(\"efs-ap\"),\n\t\t\t},\n\t\t\tAnnotations: pulumi.StringMap{\n\t\t\t\t\"a1\": pulumi.String(\"v1\"),\n\t\t\t\t\"a2\": pulumi.String(\"v2\"),\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"l1\": pulumi.String(\"v1\"),\n\t\t\t\t\"l2\": pulumi.String(\"v2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.K8StorageClass;\nimport com.pulumi.duplocloud.K8StorageClassArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tenantId = \"3a0b2ea5-7403-4765-ad6e-8771ca8fa0fd\";\n\n        var sc = new K8StorageClass(\"sc\", K8StorageClassArgs.builder()\n            .tenantId(tenantId)\n            .name(\"sc\")\n            .storageProvisioner(\"efs.csi.aws.com\")\n            .reclaimPolicy(\"Delete\")\n            .volumeBindingMode(\"Immediate\")\n            .allowVolumeExpansion(false)\n            .parameters(Map.ofEntries(\n                Map.entry(\"fileSystemId\", \"fs-0d2f79aca4712c6e8\"),\n                Map.entry(\"basePath\", \"/dynamic_provisioning\"),\n                Map.entry(\"directoryPerms\", \"700\"),\n                Map.entry(\"gidRangeStart\", \"1000\"),\n                Map.entry(\"gidRangeEnd\", \"2000\"),\n                Map.entry(\"provisioningMode\", \"efs-ap\")\n            ))\n            .annotations(Map.ofEntries(\n                Map.entry(\"a1\", \"v1\"),\n                Map.entry(\"a2\", \"v2\")\n            ))\n            .labels(Map.ofEntries(\n                Map.entry(\"l1\", \"v1\"),\n                Map.entry(\"l2\", \"v2\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sc:\n    type: duplocloud:K8StorageClass\n    properties:\n      tenantId: ${tenantId}\n      name: sc\n      storageProvisioner: efs.csi.aws.com\n      reclaimPolicy: Delete\n      volumeBindingMode: Immediate\n      allowVolumeExpansion: false\n      parameters:\n        fileSystemId: fs-0d2f79aca4712c6e8\n        basePath: /dynamic_provisioning\n        directoryPerms: '700'\n        gidRangeStart: '1000'\n        gidRangeEnd: '2000'\n        provisioningMode: efs-ap\n      annotations:\n        a1: v1\n        a2: v2\n      labels:\n        l1: v1\n        l2: v2\nvariables:\n  tenantId: 3a0b2ea5-7403-4765-ad6e-8771ca8fa0fd\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing kubernetes storage class\n\n - *TENANT_ID* is the tenant GUID\n\n - *FULL_NAME* is the Duplo provided storage class name\n\n#\n\n```sh\n$ pulumi import duplocloud:index/k8StorageClass:K8StorageClass sc v3/subscriptions/*TENANT_ID*/k8s/storageclass/*FULL_NAME*\n```\n\n",
            "properties": {
                "allowVolumeExpansion": {
                    "type": "boolean",
                    "description": "Indicates whether the storage class allow volume expand Defaults to `false`.\n"
                },
                "allowedTopologies": {
                    "$ref": "#/types/duplocloud:index/K8StorageClassAllowedTopologies:K8StorageClassAllowedTopologies",
                    "description": "Restrict the node topologies where volumes can be dynamically provisioned.\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the storage class that may be used to store arbitrary metadata.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the storage class.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the storage class.\n"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The parameters for the provisioner that should create volumes of this storage class\n"
                },
                "reclaimPolicy": {
                    "type": "string",
                    "description": "Indicates the type of the reclaim policy Defaults to `Delete`.\n"
                },
                "storageProvisioner": {
                    "type": "string",
                    "description": "Indicates the type of the provisioner\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the storage class will be created in.\n"
                },
                "volumeBindingMode": {
                    "type": "string",
                    "description": "Indicates when volume binding and dynamic provisioning should occur Defaults to `Immediate`.\n"
                }
            },
            "required": [
                "annotations",
                "fullname",
                "labels",
                "name",
                "storageProvisioner",
                "tenantId"
            ],
            "inputProperties": {
                "allowVolumeExpansion": {
                    "type": "boolean",
                    "description": "Indicates whether the storage class allow volume expand Defaults to `false`.\n"
                },
                "allowedTopologies": {
                    "$ref": "#/types/duplocloud:index/K8StorageClassAllowedTopologies:K8StorageClassAllowedTopologies",
                    "description": "Restrict the node topologies where volumes can be dynamically provisioned.\n",
                    "willReplaceOnChanges": true
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the storage class that may be used to store arbitrary metadata.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the storage class.\n",
                    "willReplaceOnChanges": true
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The parameters for the provisioner that should create volumes of this storage class\n",
                    "willReplaceOnChanges": true
                },
                "reclaimPolicy": {
                    "type": "string",
                    "description": "Indicates the type of the reclaim policy Defaults to `Delete`.\n"
                },
                "storageProvisioner": {
                    "type": "string",
                    "description": "Indicates the type of the provisioner\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the storage class will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "volumeBindingMode": {
                    "type": "string",
                    "description": "Indicates when volume binding and dynamic provisioning should occur Defaults to `Immediate`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "storageProvisioner",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8StorageClass resources.\n",
                "properties": {
                    "allowVolumeExpansion": {
                        "type": "boolean",
                        "description": "Indicates whether the storage class allow volume expand Defaults to `false`.\n"
                    },
                    "allowedTopologies": {
                        "$ref": "#/types/duplocloud:index/K8StorageClassAllowedTopologies:K8StorageClassAllowedTopologies",
                        "description": "Restrict the node topologies where volumes can be dynamically provisioned.\n",
                        "willReplaceOnChanges": true
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "An unstructured key value map stored with the storage class that may be used to store arbitrary metadata.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the storage class.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the service.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the storage class.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The parameters for the provisioner that should create volumes of this storage class\n",
                        "willReplaceOnChanges": true
                    },
                    "reclaimPolicy": {
                        "type": "string",
                        "description": "Indicates the type of the reclaim policy Defaults to `Delete`.\n"
                    },
                    "storageProvisioner": {
                        "type": "string",
                        "description": "Indicates the type of the provisioner\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the storage class will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "volumeBindingMode": {
                        "type": "string",
                        "description": "Indicates when volume binding and dynamic provisioning should occur Defaults to `Immediate`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/k8sCronJob:K8sCronJob": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst myappK8sCronJob = new duplocloud.K8sCronJob(\"myapp\", {\n    tenantId: myapp.tenantId,\n    metadata: {\n        name: \"jobname\",\n    },\n    specs: [{\n        jobTemplate: {\n            spec: {\n                template: {\n                    spec: {\n                        containers: [{\n                            name: \"containername\",\n                            image: \"nginx:latest\",\n                        }],\n                    },\n                },\n            },\n        },\n        schedule: \"*/1 * * * *\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmyapp_k8s_cron_job = duplocloud.K8sCronJob(\"myapp\",\n    tenant_id=myapp.tenant_id,\n    metadata={\n        \"name\": \"jobname\",\n    },\n    specs=[{\n        \"job_template\": {\n            \"spec\": {\n                \"template\": {\n                    \"spec\": {\n                        \"containers\": [{\n                            \"name\": \"containername\",\n                            \"image\": \"nginx:latest\",\n                        }],\n                    },\n                },\n            },\n        },\n        \"schedule\": \"*/1 * * * *\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var myappK8sCronJob = new Duplocloud.K8sCronJob(\"myapp\", new()\n    {\n        TenantId = myapp.TenantId,\n        Metadata = new Duplocloud.Inputs.K8sCronJobMetadataArgs\n        {\n            Name = \"jobname\",\n        },\n        Specs = new[]\n        {\n            new Duplocloud.Inputs.K8sCronJobSpecArgs\n            {\n                JobTemplate = new Duplocloud.Inputs.K8sCronJobSpecJobTemplateArgs\n                {\n                    Spec = new Duplocloud.Inputs.K8sCronJobSpecJobTemplateSpecArgs\n                    {\n                        Template = new Duplocloud.Inputs.K8sCronJobSpecJobTemplateSpecTemplateArgs\n                        {\n                            Spec = new Duplocloud.Inputs.K8sCronJobSpecJobTemplateSpecTemplateSpecArgs\n                            {\n                                Containers = new[]\n                                {\n                                    new Duplocloud.Inputs.K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArgs\n                                    {\n                                        Name = \"containername\",\n                                        Image = \"nginx:latest\",\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n                Schedule = \"*/1 * * * *\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewK8sCronJob(ctx, \"myapp\", \u0026duplocloud.K8sCronJobArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tMetadata: \u0026duplocloud.K8sCronJobMetadataArgs{\n\t\t\t\tName: pulumi.String(\"jobname\"),\n\t\t\t},\n\t\t\tSpecs: duplocloud.K8sCronJobSpecArray{\n\t\t\t\t\u0026duplocloud.K8sCronJobSpecArgs{\n\t\t\t\t\tJobTemplate: \u0026duplocloud.K8sCronJobSpecJobTemplateArgs{\n\t\t\t\t\t\tSpec: \u0026duplocloud.K8sCronJobSpecJobTemplateSpecArgs{\n\t\t\t\t\t\t\tTemplate: \u0026duplocloud.K8sCronJobSpecJobTemplateSpecTemplateArgs{\n\t\t\t\t\t\t\t\tSpec: \u0026duplocloud.K8sCronJobSpecJobTemplateSpecTemplateSpecArgs{\n\t\t\t\t\t\t\t\t\tContainers: duplocloud.K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArray{\n\t\t\t\t\t\t\t\t\t\t\u0026duplocloud.K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArgs{\n\t\t\t\t\t\t\t\t\t\t\tName:  pulumi.String(\"containername\"),\n\t\t\t\t\t\t\t\t\t\t\tImage: pulumi.String(\"nginx:latest\"),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tSchedule: pulumi.String(\"*/1 * * * *\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.K8sCronJob;\nimport com.pulumi.duplocloud.K8sCronJobArgs;\nimport com.pulumi.duplocloud.inputs.K8sCronJobMetadataArgs;\nimport com.pulumi.duplocloud.inputs.K8sCronJobSpecArgs;\nimport com.pulumi.duplocloud.inputs.K8sCronJobSpecJobTemplateArgs;\nimport com.pulumi.duplocloud.inputs.K8sCronJobSpecJobTemplateSpecArgs;\nimport com.pulumi.duplocloud.inputs.K8sCronJobSpecJobTemplateSpecTemplateArgs;\nimport com.pulumi.duplocloud.inputs.K8sCronJobSpecJobTemplateSpecTemplateSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var myappK8sCronJob = new K8sCronJob(\"myappK8sCronJob\", K8sCronJobArgs.builder()\n            .tenantId(myapp.tenantId())\n            .metadata(K8sCronJobMetadataArgs.builder()\n                .name(\"jobname\")\n                .build())\n            .specs(K8sCronJobSpecArgs.builder()\n                .jobTemplate(K8sCronJobSpecJobTemplateArgs.builder()\n                    .spec(K8sCronJobSpecJobTemplateSpecArgs.builder()\n                        .template(K8sCronJobSpecJobTemplateSpecTemplateArgs.builder()\n                            .spec(K8sCronJobSpecJobTemplateSpecTemplateSpecArgs.builder()\n                                .containers(K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArgs.builder()\n                                    .name(\"containername\")\n                                    .image(\"nginx:latest\")\n                                    .build())\n                                .build())\n                            .build())\n                        .build())\n                    .build())\n                .schedule(\"*/1 * * * *\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  myappK8sCronJob:\n    type: duplocloud:K8sCronJob\n    name: myapp\n    properties:\n      tenantId: ${myapp.tenantId}\n      metadata:\n        name: jobname\n      specs:\n        - jobTemplate:\n            spec:\n              template:\n                spec:\n                  containers:\n                    - name: containername\n                      image: nginx:latest\n          schedule: '*/1 * * * *'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing kubernetes job\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the k8s job name\n\n#\n\n```sh\n$ pulumi import duplocloud:index/k8sCronJob:K8sCronJob myapp v3/subscriptions/*TENANT_ID*/k8s/cronjob/*NAME*\n```\n\n",
            "properties": {
                "isAnyHostAllowed": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "metadata": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobMetadata:K8sCronJobMetadata",
                    "description": "Standard cronjob's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpec:K8sCronJobSpec"
                    },
                    "description": "Spec of the cron job owned by the cluster\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the job will be created in.\n"
                }
            },
            "required": [
                "metadata",
                "tenantId"
            ],
            "inputProperties": {
                "isAnyHostAllowed": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "metadata": {
                    "$ref": "#/types/duplocloud:index/K8sCronJobMetadata:K8sCronJobMetadata",
                    "description": "Standard cronjob's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobSpec:K8sCronJobSpec"
                    },
                    "description": "Spec of the cron job owned by the cluster\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the job will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "metadata",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8sCronJob resources.\n",
                "properties": {
                    "isAnyHostAllowed": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "metadata": {
                        "$ref": "#/types/duplocloud:index/K8sCronJobMetadata:K8sCronJobMetadata",
                        "description": "Standard cronjob's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                    },
                    "specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/K8sCronJobSpec:K8sCronJobSpec"
                        },
                        "description": "Spec of the cron job owned by the cluster\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the job will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/k8sJob:K8sJob": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst myappK8sJob = new duplocloud.K8sJob(\"myapp\", {\n    tenantId: myapp.tenantId,\n    metadata: {\n        name: \"jobname\",\n    },\n    specs: [{\n        template: {\n            spec: {\n                containers: [{\n                    name: \"containername\",\n                    image: \"nginx:latest\",\n                }],\n            },\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmyapp_k8s_job = duplocloud.K8sJob(\"myapp\",\n    tenant_id=myapp.tenant_id,\n    metadata={\n        \"name\": \"jobname\",\n    },\n    specs=[{\n        \"template\": {\n            \"spec\": {\n                \"containers\": [{\n                    \"name\": \"containername\",\n                    \"image\": \"nginx:latest\",\n                }],\n            },\n        },\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var myappK8sJob = new Duplocloud.K8sJob(\"myapp\", new()\n    {\n        TenantId = myapp.TenantId,\n        Metadata = new Duplocloud.Inputs.K8sJobMetadataArgs\n        {\n            Name = \"jobname\",\n        },\n        Specs = new[]\n        {\n            new Duplocloud.Inputs.K8sJobSpecArgs\n            {\n                Template = new Duplocloud.Inputs.K8sJobSpecTemplateArgs\n                {\n                    Spec = new Duplocloud.Inputs.K8sJobSpecTemplateSpecArgs\n                    {\n                        Containers = new[]\n                        {\n                            new Duplocloud.Inputs.K8sJobSpecTemplateSpecContainerArgs\n                            {\n                                Name = \"containername\",\n                                Image = \"nginx:latest\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewK8sJob(ctx, \"myapp\", \u0026duplocloud.K8sJobArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tMetadata: \u0026duplocloud.K8sJobMetadataArgs{\n\t\t\t\tName: pulumi.String(\"jobname\"),\n\t\t\t},\n\t\t\tSpecs: duplocloud.K8sJobSpecArray{\n\t\t\t\t\u0026duplocloud.K8sJobSpecArgs{\n\t\t\t\t\tTemplate: \u0026duplocloud.K8sJobSpecTemplateArgs{\n\t\t\t\t\t\tSpec: \u0026duplocloud.K8sJobSpecTemplateSpecArgs{\n\t\t\t\t\t\t\tContainers: duplocloud.K8sJobSpecTemplateSpecContainerArray{\n\t\t\t\t\t\t\t\t\u0026duplocloud.K8sJobSpecTemplateSpecContainerArgs{\n\t\t\t\t\t\t\t\t\tName:  pulumi.String(\"containername\"),\n\t\t\t\t\t\t\t\t\tImage: pulumi.String(\"nginx:latest\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.K8sJob;\nimport com.pulumi.duplocloud.K8sJobArgs;\nimport com.pulumi.duplocloud.inputs.K8sJobMetadataArgs;\nimport com.pulumi.duplocloud.inputs.K8sJobSpecArgs;\nimport com.pulumi.duplocloud.inputs.K8sJobSpecTemplateArgs;\nimport com.pulumi.duplocloud.inputs.K8sJobSpecTemplateSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var myappK8sJob = new K8sJob(\"myappK8sJob\", K8sJobArgs.builder()\n            .tenantId(myapp.tenantId())\n            .metadata(K8sJobMetadataArgs.builder()\n                .name(\"jobname\")\n                .build())\n            .specs(K8sJobSpecArgs.builder()\n                .template(K8sJobSpecTemplateArgs.builder()\n                    .spec(K8sJobSpecTemplateSpecArgs.builder()\n                        .containers(K8sJobSpecTemplateSpecContainerArgs.builder()\n                            .name(\"containername\")\n                            .image(\"nginx:latest\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  myappK8sJob:\n    type: duplocloud:K8sJob\n    name: myapp\n    properties:\n      tenantId: ${myapp.tenantId}\n      metadata:\n        name: jobname\n      specs:\n        - template:\n            spec:\n              containers:\n                - name: containername\n                  image: nginx:latest\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing kubernetes job\n\n - *TENANT_ID* is the tenant GUID\n\n - *NAME* is the k8s job name\n\n#\n\n```sh\n$ pulumi import duplocloud:index/k8sJob:K8sJob myapp v3/subscriptions/*TENANT_ID*/k8s/job/*NAME*\n```\n\n",
            "properties": {
                "isAnyHostAllowed": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "metadata": {
                    "$ref": "#/types/duplocloud:index/K8sJobMetadata:K8sJobMetadata",
                    "description": "Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpec:K8sJobSpec"
                    },
                    "description": "Spec of the job owned by the cluster\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the job will be created in.\n"
                },
                "waitForCompletion": {
                    "type": "boolean"
                }
            },
            "required": [
                "metadata",
                "tenantId"
            ],
            "inputProperties": {
                "isAnyHostAllowed": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "metadata": {
                    "$ref": "#/types/duplocloud:index/K8sJobMetadata:K8sJobMetadata",
                    "description": "Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/K8sJobSpec:K8sJobSpec"
                    },
                    "description": "Spec of the job owned by the cluster\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the job will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "waitForCompletion": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "metadata",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8sJob resources.\n",
                "properties": {
                    "isAnyHostAllowed": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "metadata": {
                        "$ref": "#/types/duplocloud:index/K8sJobMetadata:K8sJobMetadata",
                        "description": "Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                    },
                    "specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/K8sJobSpec:K8sJobSpec"
                        },
                        "description": "Spec of the job owned by the cluster\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the job will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForCompletion": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/ociContainerengineNodePool:OciContainerengineNodePool": {
            "description": "`duplocloud.OciContainerengineNodePool` manages an OCI container node pool in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst myOciNodePool = new duplocloud.OciContainerengineNodePool(\"myOciNodePool\", {\n    tenantId: myapp.tenantId,\n    name: \"tf-test\",\n    nodeShape: \"VM.Standard2.1\",\n    nodeImageId: \"ocid1.image.oc1.ap-mumbai-1.aaaaaaaagosxifkwha6a6pi2fxx4idf3te3icdsf7z6jar2sxls6xycnehna\",\n    initialNodeLabels: [{\n        key: \"allocationtags\",\n        value: \"test\",\n    }],\n    nodeConfigDetails: {\n        size: 1,\n        placementConfigs: [{\n            availabilityDomain: \"uwFr:AP-MUMBAI-1-AD-1\",\n            subnetId: \"ocid1.subnet.oc1.ap-mumbai-1.aaaaaaaasz36nwww2zygjn7arpuq4fbz3z22kn6adlalldvld3b5nu6afuxa\",\n        }],\n        freeformTags: {\n            CreatedBy: \"duplo\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmy_oci_node_pool = duplocloud.OciContainerengineNodePool(\"myOciNodePool\",\n    tenant_id=myapp.tenant_id,\n    name=\"tf-test\",\n    node_shape=\"VM.Standard2.1\",\n    node_image_id=\"ocid1.image.oc1.ap-mumbai-1.aaaaaaaagosxifkwha6a6pi2fxx4idf3te3icdsf7z6jar2sxls6xycnehna\",\n    initial_node_labels=[{\n        \"key\": \"allocationtags\",\n        \"value\": \"test\",\n    }],\n    node_config_details={\n        \"size\": 1,\n        \"placement_configs\": [{\n            \"availability_domain\": \"uwFr:AP-MUMBAI-1-AD-1\",\n            \"subnet_id\": \"ocid1.subnet.oc1.ap-mumbai-1.aaaaaaaasz36nwww2zygjn7arpuq4fbz3z22kn6adlalldvld3b5nu6afuxa\",\n        }],\n        \"freeform_tags\": {\n            \"CreatedBy\": \"duplo\",\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var myOciNodePool = new Duplocloud.OciContainerengineNodePool(\"myOciNodePool\", new()\n    {\n        TenantId = myapp.TenantId,\n        Name = \"tf-test\",\n        NodeShape = \"VM.Standard2.1\",\n        NodeImageId = \"ocid1.image.oc1.ap-mumbai-1.aaaaaaaagosxifkwha6a6pi2fxx4idf3te3icdsf7z6jar2sxls6xycnehna\",\n        InitialNodeLabels = new[]\n        {\n            new Duplocloud.Inputs.OciContainerengineNodePoolInitialNodeLabelArgs\n            {\n                Key = \"allocationtags\",\n                Value = \"test\",\n            },\n        },\n        NodeConfigDetails = new Duplocloud.Inputs.OciContainerengineNodePoolNodeConfigDetailsArgs\n        {\n            Size = 1,\n            PlacementConfigs = new[]\n            {\n                new Duplocloud.Inputs.OciContainerengineNodePoolNodeConfigDetailsPlacementConfigArgs\n                {\n                    AvailabilityDomain = \"uwFr:AP-MUMBAI-1-AD-1\",\n                    SubnetId = \"ocid1.subnet.oc1.ap-mumbai-1.aaaaaaaasz36nwww2zygjn7arpuq4fbz3z22kn6adlalldvld3b5nu6afuxa\",\n                },\n            },\n            FreeformTags = \n            {\n                { \"CreatedBy\", \"duplo\" },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewOciContainerengineNodePool(ctx, \"myOciNodePool\", \u0026duplocloud.OciContainerengineNodePoolArgs{\n\t\t\tTenantId:    myapp.TenantId,\n\t\t\tName:        pulumi.String(\"tf-test\"),\n\t\t\tNodeShape:   pulumi.String(\"VM.Standard2.1\"),\n\t\t\tNodeImageId: pulumi.String(\"ocid1.image.oc1.ap-mumbai-1.aaaaaaaagosxifkwha6a6pi2fxx4idf3te3icdsf7z6jar2sxls6xycnehna\"),\n\t\t\tInitialNodeLabels: duplocloud.OciContainerengineNodePoolInitialNodeLabelArray{\n\t\t\t\t\u0026duplocloud.OciContainerengineNodePoolInitialNodeLabelArgs{\n\t\t\t\t\tKey:   pulumi.String(\"allocationtags\"),\n\t\t\t\t\tValue: pulumi.String(\"test\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNodeConfigDetails: \u0026duplocloud.OciContainerengineNodePoolNodeConfigDetailsArgs{\n\t\t\t\tSize: pulumi.Int(1),\n\t\t\t\tPlacementConfigs: duplocloud.OciContainerengineNodePoolNodeConfigDetailsPlacementConfigArray{\n\t\t\t\t\t\u0026duplocloud.OciContainerengineNodePoolNodeConfigDetailsPlacementConfigArgs{\n\t\t\t\t\t\tAvailabilityDomain: pulumi.String(\"uwFr:AP-MUMBAI-1-AD-1\"),\n\t\t\t\t\t\tSubnetId:           pulumi.String(\"ocid1.subnet.oc1.ap-mumbai-1.aaaaaaaasz36nwww2zygjn7arpuq4fbz3z22kn6adlalldvld3b5nu6afuxa\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tFreeformTags: pulumi.StringMap{\n\t\t\t\t\t\"CreatedBy\": pulumi.String(\"duplo\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.OciContainerengineNodePool;\nimport com.pulumi.duplocloud.OciContainerengineNodePoolArgs;\nimport com.pulumi.duplocloud.inputs.OciContainerengineNodePoolInitialNodeLabelArgs;\nimport com.pulumi.duplocloud.inputs.OciContainerengineNodePoolNodeConfigDetailsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var myOciNodePool = new OciContainerengineNodePool(\"myOciNodePool\", OciContainerengineNodePoolArgs.builder()\n            .tenantId(myapp.tenantId())\n            .name(\"tf-test\")\n            .nodeShape(\"VM.Standard2.1\")\n            .nodeImageId(\"ocid1.image.oc1.ap-mumbai-1.aaaaaaaagosxifkwha6a6pi2fxx4idf3te3icdsf7z6jar2sxls6xycnehna\")\n            .initialNodeLabels(OciContainerengineNodePoolInitialNodeLabelArgs.builder()\n                .key(\"allocationtags\")\n                .value(\"test\")\n                .build())\n            .nodeConfigDetails(OciContainerengineNodePoolNodeConfigDetailsArgs.builder()\n                .size(1)\n                .placementConfigs(OciContainerengineNodePoolNodeConfigDetailsPlacementConfigArgs.builder()\n                    .availabilityDomain(\"uwFr:AP-MUMBAI-1-AD-1\")\n                    .subnetId(\"ocid1.subnet.oc1.ap-mumbai-1.aaaaaaaasz36nwww2zygjn7arpuq4fbz3z22kn6adlalldvld3b5nu6afuxa\")\n                    .build())\n                .freeformTags(Map.of(\"CreatedBy\", \"duplo\"))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  myOciNodePool:\n    type: duplocloud:OciContainerengineNodePool\n    properties:\n      tenantId: ${myapp.tenantId}\n      name: tf-test\n      nodeShape: VM.Standard2.1\n      nodeImageId: ocid1.image.oc1.ap-mumbai-1.aaaaaaaagosxifkwha6a6pi2fxx4idf3te3icdsf7z6jar2sxls6xycnehna\n      initialNodeLabels:\n        - key: allocationtags\n          value: test\n      nodeConfigDetails:\n        size: 1\n        placementConfigs:\n          - availabilityDomain: uwFr:AP-MUMBAI-1-AD-1\n            subnetId: ocid1.subnet.oc1.ap-mumbai-1.aaaaaaaasz36nwww2zygjn7arpuq4fbz3z22kn6adlalldvld3b5nu6afuxa\n        freeformTags:\n          CreatedBy: duplo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing OCI Container Engine Node Pool\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORTNAME* is the short name of the cluster\n\n#\n\n```sh\n$ pulumi import duplocloud:index/ociContainerengineNodePool:OciContainerengineNodePool myOciNodePool *TENANT_ID*/*SHORTNAME*\n```\n\n",
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The OCID of the cluster to which this node pool is attached.\n"
                },
                "compartmentId": {
                    "type": "string",
                    "description": "The OCID of the compartment in which the node pool exists.\n"
                },
                "definedTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defined tags for this resource. Each key is predefined and scoped to a namespace.\n"
                },
                "freeformTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.\n"
                },
                "initialNodeLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolInitialNodeLabel:OciContainerengineNodePoolInitialNodeLabel"
                    }
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The version of Kubernetes to install on the nodes in the node pool.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the node pool.\n"
                },
                "nodeConfigDetails": {
                    "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolNodeConfigDetails:OciContainerengineNodePoolNodeConfigDetails"
                },
                "nodeImageId": {
                    "type": "string"
                },
                "nodeImageName": {
                    "type": "string"
                },
                "nodeMetadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "nodePoolId": {
                    "type": "string",
                    "description": "The OCID of the node pool.\n"
                },
                "nodeShape": {
                    "type": "string",
                    "description": "The name of the node shape of the nodes in the node pool.\n"
                },
                "nodeShapeConfig": {
                    "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolNodeShapeConfig:OciContainerengineNodePoolNodeShapeConfig"
                },
                "nodeSourceDetails": {
                    "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolNodeSourceDetails:OciContainerengineNodePoolNodeSourceDetails"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolNode:OciContainerengineNodePoolNode"
                    }
                },
                "quantityPerSubnet": {
                    "type": "integer"
                },
                "sshPublicKey": {
                    "type": "string"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "systemTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the Node Pool resource in Oracle Cloud Infrastructure Container Engine service be created in.\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until oci node pool to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "required": [
                "clusterId",
                "compartmentId",
                "kubernetesVersion",
                "name",
                "nodeConfigDetails",
                "nodeImageId",
                "nodeImageName",
                "nodePoolId",
                "nodeShape",
                "nodeShapeConfig",
                "nodeSourceDetails",
                "nodes",
                "quantityPerSubnet",
                "sshPublicKey",
                "subnetIds",
                "tenantId"
            ],
            "inputProperties": {
                "definedTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defined tags for this resource. Each key is predefined and scoped to a namespace.\n"
                },
                "freeformTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.\n"
                },
                "initialNodeLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolInitialNodeLabel:OciContainerengineNodePoolInitialNodeLabel"
                    }
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The version of Kubernetes to install on the nodes in the node pool.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the node pool.\n",
                    "willReplaceOnChanges": true
                },
                "nodeConfigDetails": {
                    "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolNodeConfigDetails:OciContainerengineNodePoolNodeConfigDetails"
                },
                "nodeImageId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "nodeImageName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "nodeMetadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "nodeShape": {
                    "type": "string",
                    "description": "The name of the node shape of the nodes in the node pool.\n",
                    "willReplaceOnChanges": true
                },
                "nodeShapeConfig": {
                    "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolNodeShapeConfig:OciContainerengineNodePoolNodeShapeConfig"
                },
                "nodeSourceDetails": {
                    "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolNodeSourceDetails:OciContainerengineNodePoolNodeSourceDetails"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolNode:OciContainerengineNodePoolNode"
                    }
                },
                "quantityPerSubnet": {
                    "type": "integer"
                },
                "sshPublicKey": {
                    "type": "string"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "systemTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the Node Pool resource in Oracle Cloud Infrastructure Container Engine service be created in.\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Whether or not to wait until oci node pool to be ready, after creation. Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "nodeShape",
                "nodeShapeConfig",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OciContainerengineNodePool resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The OCID of the cluster to which this node pool is attached.\n"
                    },
                    "compartmentId": {
                        "type": "string",
                        "description": "The OCID of the compartment in which the node pool exists.\n"
                    },
                    "definedTags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Defined tags for this resource. Each key is predefined and scoped to a namespace.\n"
                    },
                    "freeformTags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.\n"
                    },
                    "initialNodeLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolInitialNodeLabel:OciContainerengineNodePoolInitialNodeLabel"
                        }
                    },
                    "kubernetesVersion": {
                        "type": "string",
                        "description": "The version of Kubernetes to install on the nodes in the node pool.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the node pool.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodeConfigDetails": {
                        "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolNodeConfigDetails:OciContainerengineNodePoolNodeConfigDetails"
                    },
                    "nodeImageId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "nodeImageName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "nodeMetadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "nodePoolId": {
                        "type": "string",
                        "description": "The OCID of the node pool.\n"
                    },
                    "nodeShape": {
                        "type": "string",
                        "description": "The name of the node shape of the nodes in the node pool.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodeShapeConfig": {
                        "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolNodeShapeConfig:OciContainerengineNodePoolNodeShapeConfig"
                    },
                    "nodeSourceDetails": {
                        "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolNodeSourceDetails:OciContainerengineNodePoolNodeSourceDetails"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/OciContainerengineNodePoolNode:OciContainerengineNodePoolNode"
                        }
                    },
                    "quantityPerSubnet": {
                        "type": "integer"
                    },
                    "sshPublicKey": {
                        "type": "string"
                    },
                    "subnetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "systemTags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the Node Pool resource in Oracle Cloud Infrastructure Container Engine service be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Whether or not to wait until oci node pool to be ready, after creation. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/otherAgents:OtherAgents": {
            "description": "`duplocloud.OtherAgents` manages an other agents in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst agents = new duplocloud.OtherAgents(\"agents\", {\n    name: \"duplo-agents\",\n    agents: [{\n        agentName: \"CloudWatchAgent_0\",\n        agentLinuxPackagePath: \"https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb\",\n        linuxAgentInstallStatusCmd: \"sudo service amazon-cloudwatch-agent status | grep -wc 'running'\",\n        linuxAgentServiceName: \"amazon-cloudwatch-agent\",\n        linuxAgentUninstallStatusCmd: \"OS_FAMILY=$(cat /etc/os-release | grep PRETTY_NAME); if [[ $OS_FAMILY == *'Ubuntu'* ]]; then sudo apt-get purge --yes --force-yes amazon-cloudwatch-agent; else sudo yum remove -y AwsAgent; fi\",\n        linuxInstallCmd: \"OS_FAMILY=$(cat /etc/os-release | grep PRETTY_NAME); if [[ $OS_FAMILY == *'Ubuntu'* ]]; then wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb; sudo dpkg -i -E ./amazon-cloudwatch-agent.deb; sudo wget -O /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json https://cf-templates-3qf987fmmv5g-us-east-2.s3.us-east-2.amazonaws.com/amazon-cloudwatch-agent.json; sudo service amazon-cloudwatch-agent restart; else wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm; sudo rpm -U ./amazon-cloudwatch-agent.rpm; sudo wget -O /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json https://cf-templates-3qf987fmmv5g-us-east-2.s3.us-east-2.amazonaws.com/amazon-cloudwatch-agent.json \u0026\u0026 sudo service amazon-cloudwatch-agent restart; fi\",\n        windowsAgentServiceName: \"amazon-cloudwatch-agent\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nagents = duplocloud.OtherAgents(\"agents\",\n    name=\"duplo-agents\",\n    agents=[{\n        \"agent_name\": \"CloudWatchAgent_0\",\n        \"agent_linux_package_path\": \"https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb\",\n        \"linux_agent_install_status_cmd\": \"sudo service amazon-cloudwatch-agent status | grep -wc 'running'\",\n        \"linux_agent_service_name\": \"amazon-cloudwatch-agent\",\n        \"linux_agent_uninstall_status_cmd\": \"OS_FAMILY=$(cat /etc/os-release | grep PRETTY_NAME); if [[ $OS_FAMILY == *'Ubuntu'* ]]; then sudo apt-get purge --yes --force-yes amazon-cloudwatch-agent; else sudo yum remove -y AwsAgent; fi\",\n        \"linux_install_cmd\": \"OS_FAMILY=$(cat /etc/os-release | grep PRETTY_NAME); if [[ $OS_FAMILY == *'Ubuntu'* ]]; then wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb; sudo dpkg -i -E ./amazon-cloudwatch-agent.deb; sudo wget -O /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json https://cf-templates-3qf987fmmv5g-us-east-2.s3.us-east-2.amazonaws.com/amazon-cloudwatch-agent.json; sudo service amazon-cloudwatch-agent restart; else wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm; sudo rpm -U ./amazon-cloudwatch-agent.rpm; sudo wget -O /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json https://cf-templates-3qf987fmmv5g-us-east-2.s3.us-east-2.amazonaws.com/amazon-cloudwatch-agent.json \u0026\u0026 sudo service amazon-cloudwatch-agent restart; fi\",\n        \"windows_agent_service_name\": \"amazon-cloudwatch-agent\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var agents = new Duplocloud.OtherAgents(\"agents\", new()\n    {\n        Name = \"duplo-agents\",\n        Agents = new[]\n        {\n            new Duplocloud.Inputs.OtherAgentsAgentArgs\n            {\n                AgentName = \"CloudWatchAgent_0\",\n                AgentLinuxPackagePath = \"https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb\",\n                LinuxAgentInstallStatusCmd = \"sudo service amazon-cloudwatch-agent status | grep -wc 'running'\",\n                LinuxAgentServiceName = \"amazon-cloudwatch-agent\",\n                LinuxAgentUninstallStatusCmd = \"OS_FAMILY=$(cat /etc/os-release | grep PRETTY_NAME); if [[ $OS_FAMILY == *'Ubuntu'* ]]; then sudo apt-get purge --yes --force-yes amazon-cloudwatch-agent; else sudo yum remove -y AwsAgent; fi\",\n                LinuxInstallCmd = \"OS_FAMILY=$(cat /etc/os-release | grep PRETTY_NAME); if [[ $OS_FAMILY == *'Ubuntu'* ]]; then wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb; sudo dpkg -i -E ./amazon-cloudwatch-agent.deb; sudo wget -O /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json https://cf-templates-3qf987fmmv5g-us-east-2.s3.us-east-2.amazonaws.com/amazon-cloudwatch-agent.json; sudo service amazon-cloudwatch-agent restart; else wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm; sudo rpm -U ./amazon-cloudwatch-agent.rpm; sudo wget -O /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json https://cf-templates-3qf987fmmv5g-us-east-2.s3.us-east-2.amazonaws.com/amazon-cloudwatch-agent.json \u0026\u0026 sudo service amazon-cloudwatch-agent restart; fi\",\n                WindowsAgentServiceName = \"amazon-cloudwatch-agent\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewOtherAgents(ctx, \"agents\", \u0026duplocloud.OtherAgentsArgs{\n\t\t\tName: pulumi.String(\"duplo-agents\"),\n\t\t\tAgents: duplocloud.OtherAgentsAgentArray{\n\t\t\t\t\u0026duplocloud.OtherAgentsAgentArgs{\n\t\t\t\t\tAgentName:                    pulumi.String(\"CloudWatchAgent_0\"),\n\t\t\t\t\tAgentLinuxPackagePath:        pulumi.String(\"https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb\"),\n\t\t\t\t\tLinuxAgentInstallStatusCmd:   pulumi.String(\"sudo service amazon-cloudwatch-agent status | grep -wc 'running'\"),\n\t\t\t\t\tLinuxAgentServiceName:        pulumi.String(\"amazon-cloudwatch-agent\"),\n\t\t\t\t\tLinuxAgentUninstallStatusCmd: pulumi.String(\"OS_FAMILY=$(cat /etc/os-release | grep PRETTY_NAME); if [[ $OS_FAMILY == *'Ubuntu'* ]]; then sudo apt-get purge --yes --force-yes amazon-cloudwatch-agent; else sudo yum remove -y AwsAgent; fi\"),\n\t\t\t\t\tLinuxInstallCmd:              pulumi.String(\"OS_FAMILY=$(cat /etc/os-release | grep PRETTY_NAME); if [[ $OS_FAMILY == *'Ubuntu'* ]]; then wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb; sudo dpkg -i -E ./amazon-cloudwatch-agent.deb; sudo wget -O /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json https://cf-templates-3qf987fmmv5g-us-east-2.s3.us-east-2.amazonaws.com/amazon-cloudwatch-agent.json; sudo service amazon-cloudwatch-agent restart; else wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm; sudo rpm -U ./amazon-cloudwatch-agent.rpm; sudo wget -O /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json https://cf-templates-3qf987fmmv5g-us-east-2.s3.us-east-2.amazonaws.com/amazon-cloudwatch-agent.json \u0026\u0026 sudo service amazon-cloudwatch-agent restart; fi\"),\n\t\t\t\t\tWindowsAgentServiceName:      pulumi.String(\"amazon-cloudwatch-agent\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.OtherAgents;\nimport com.pulumi.duplocloud.OtherAgentsArgs;\nimport com.pulumi.duplocloud.inputs.OtherAgentsAgentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var agents = new OtherAgents(\"agents\", OtherAgentsArgs.builder()\n            .name(\"duplo-agents\")\n            .agents(OtherAgentsAgentArgs.builder()\n                .agentName(\"CloudWatchAgent_0\")\n                .agentLinuxPackagePath(\"https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb\")\n                .linuxAgentInstallStatusCmd(\"sudo service amazon-cloudwatch-agent status | grep -wc 'running'\")\n                .linuxAgentServiceName(\"amazon-cloudwatch-agent\")\n                .linuxAgentUninstallStatusCmd(\"OS_FAMILY=$(cat /etc/os-release | grep PRETTY_NAME); if [[ $OS_FAMILY == *'Ubuntu'* ]]; then sudo apt-get purge --yes --force-yes amazon-cloudwatch-agent; else sudo yum remove -y AwsAgent; fi\")\n                .linuxInstallCmd(\"OS_FAMILY=$(cat /etc/os-release | grep PRETTY_NAME); if [[ $OS_FAMILY == *'Ubuntu'* ]]; then wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb; sudo dpkg -i -E ./amazon-cloudwatch-agent.deb; sudo wget -O /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json https://cf-templates-3qf987fmmv5g-us-east-2.s3.us-east-2.amazonaws.com/amazon-cloudwatch-agent.json; sudo service amazon-cloudwatch-agent restart; else wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm; sudo rpm -U ./amazon-cloudwatch-agent.rpm; sudo wget -O /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json https://cf-templates-3qf987fmmv5g-us-east-2.s3.us-east-2.amazonaws.com/amazon-cloudwatch-agent.json \u0026\u0026 sudo service amazon-cloudwatch-agent restart; fi\")\n                .windowsAgentServiceName(\"amazon-cloudwatch-agent\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  agents:\n    type: duplocloud:OtherAgents\n    properties:\n      name: duplo-agents\n      agents:\n        - agentName: CloudWatchAgent_0\n          agentLinuxPackagePath: https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb\n          linuxAgentInstallStatusCmd: sudo service amazon-cloudwatch-agent status | grep -wc 'running'\n          linuxAgentServiceName: amazon-cloudwatch-agent\n          linuxAgentUninstallStatusCmd: OS_FAMILY=$(cat /etc/os-release | grep PRETTY_NAME); if [[ $OS_FAMILY == *'Ubuntu'* ]]; then sudo apt-get purge --yes --force-yes amazon-cloudwatch-agent; else sudo yum remove -y AwsAgent; fi\n          linuxInstallCmd: OS_FAMILY=$(cat /etc/os-release | grep PRETTY_NAME); if [[ $OS_FAMILY == *'Ubuntu'* ]]; then wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb; sudo dpkg -i -E ./amazon-cloudwatch-agent.deb; sudo wget -O /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json https://cf-templates-3qf987fmmv5g-us-east-2.s3.us-east-2.amazonaws.com/amazon-cloudwatch-agent.json; sudo service amazon-cloudwatch-agent restart; else wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm; sudo rpm -U ./amazon-cloudwatch-agent.rpm; sudo wget -O /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json https://cf-templates-3qf987fmmv5g-us-east-2.s3.us-east-2.amazonaws.com/amazon-cloudwatch-agent.json \u0026\u0026 sudo service amazon-cloudwatch-agent restart; fi\n          windowsAgentServiceName: amazon-cloudwatch-agent\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing other agents\n\n - *SHORTNAME* is the short name of the other agents\n\n#\n\n```sh\n$ pulumi import duplocloud:index/otherAgents:OtherAgents agents *SHORTNAME*\n```\n\n",
            "properties": {
                "agents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/OtherAgentsAgent:OtherAgentsAgent"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Resource name to create other agents in duplo.\n"
                }
            },
            "required": [
                "agents",
                "name"
            ],
            "inputProperties": {
                "agents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/OtherAgentsAgent:OtherAgentsAgent"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Resource name to create other agents in duplo.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "agents"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OtherAgents resources.\n",
                "properties": {
                    "agents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/OtherAgentsAgent:OtherAgentsAgent"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Resource name to create other agents in duplo.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/planCertificates:PlanCertificates": {
            "description": "`duplocloud.PlanCertificates` manages the list of certificates avaialble to a plan in Duplo.\n\nThis resource allows you take control of individual plan certificates for a specific plan.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  myplan:\n    type: duplocloud:PlanCertificates\n    properties:\n      planId: myplan\n      certificates:\n        - name: my-cert\n          id: aws:foo:bar\n        - name: another-cert\n          id: aws:foo:bar\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import duplocloud:index/planCertificates:PlanCertificates myplan PLAN_ID\n```\n\n",
            "properties": {
                "certificate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanCertificatesCertificate:PlanCertificatesCertificate"
                    },
                    "description": "A list of certificates to manage.\n"
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanCertificatesCertificate:PlanCertificatesCertificate"
                    },
                    "description": "A complete list of certificates for this plan, even ones not being managed by this resource.\n"
                },
                "deleteUnspecifiedCertificates": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan to configure.\n"
                },
                "specifiedCertificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of certificate names being managed by this resource.\n"
                }
            },
            "required": [
                "certificates",
                "planId",
                "specifiedCertificates"
            ],
            "inputProperties": {
                "certificate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanCertificatesCertificate:PlanCertificatesCertificate"
                    },
                    "description": "A list of certificates to manage.\n"
                },
                "deleteUnspecifiedCertificates": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan to configure.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "planId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlanCertificates resources.\n",
                "properties": {
                    "certificate": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/PlanCertificatesCertificate:PlanCertificatesCertificate"
                        },
                        "description": "A list of certificates to manage.\n"
                    },
                    "certificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/PlanCertificatesCertificate:PlanCertificatesCertificate"
                        },
                        "description": "A complete list of certificates for this plan, even ones not being managed by this resource.\n"
                    },
                    "deleteUnspecifiedCertificates": {
                        "type": "boolean",
                        "description": "Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The ID of the plan to configure.\n",
                        "willReplaceOnChanges": true
                    },
                    "specifiedCertificates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of certificate names being managed by this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/planConfigs:PlanConfigs": {
            "description": "`duplocloud.PlanConfigs` manages the list of configs avaialble to a plan in Duplo.\n\nThis resource allows you take control of individual configs for a specific plan.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  myplan:\n    type: duplocloud:PlanConfigs\n    properties:\n      planId: myplan\n      configs:\n        - key: foo\n          type: \"\"\n          value: bar\n        - key: my docker repo\n          type: DockerRegistryCreds\n          value:\n            fn::toJSON:\n              registry: https://index.docker.io/v1/\n              username: MY-USERNAME\n              password: MY-PASSWORD\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import duplocloud:index/planConfigs:PlanConfigs myplan PLAN_ID\n```\n\n",
            "properties": {
                "config": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanConfigsConfig:PlanConfigsConfig"
                    },
                    "description": "A list of configs to manage.\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanConfigsConfig:PlanConfigsConfig"
                    },
                    "description": "A complete list of configs for this plan, even ones not being managed by this resource.\n"
                },
                "deleteUnspecifiedConfigs": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any configs not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan to configure.\n"
                },
                "specifiedConfigs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of config keys being managed by this resource.\n"
                }
            },
            "required": [
                "configs",
                "planId",
                "specifiedConfigs"
            ],
            "inputProperties": {
                "config": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanConfigsConfig:PlanConfigsConfig"
                    },
                    "description": "A list of configs to manage.\n"
                },
                "deleteUnspecifiedConfigs": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any configs not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan to configure.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "planId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlanConfigs resources.\n",
                "properties": {
                    "config": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/PlanConfigsConfig:PlanConfigsConfig"
                        },
                        "description": "A list of configs to manage.\n"
                    },
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/PlanConfigsConfig:PlanConfigsConfig"
                        },
                        "description": "A complete list of configs for this plan, even ones not being managed by this resource.\n"
                    },
                    "deleteUnspecifiedConfigs": {
                        "type": "boolean",
                        "description": "Whether or not this resource should delete any configs not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The ID of the plan to configure.\n",
                        "willReplaceOnChanges": true
                    },
                    "specifiedConfigs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of config keys being managed by this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/planImages:PlanImages": {
            "description": "`duplocloud.PlanImages` manages the list of images avaialble to a plan in Duplo.\n\nThis resource allows you take control of individual images for a specific plan.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  myplan:\n    type: duplocloud:PlanImages\n    properties:\n      planId: myplan\n      images:\n        - name: eks-worker\n          imageId: ami-1234\n          os: linux\n          username: ec2-user\n        - name: other-ami\n          imageId: ami-1234\n          os: windows\n          username: Administrator\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import duplocloud:index/planImages:PlanImages myplan PLAN_ID/WAF_NAME\n```\n\n",
            "properties": {
                "deleteUnspecifiedImages": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any images not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                },
                "image": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanImagesImage:PlanImagesImage"
                    },
                    "description": "A list of images to manage.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanImagesImage:PlanImagesImage"
                    },
                    "description": "A complete list of images for this plan, even ones not being managed by this resource.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan to configure.\n"
                },
                "specifiedImages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of image names being managed by this resource.\n"
                }
            },
            "required": [
                "images",
                "planId",
                "specifiedImages"
            ],
            "inputProperties": {
                "deleteUnspecifiedImages": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any images not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                },
                "image": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanImagesImage:PlanImagesImage"
                    },
                    "description": "A list of images to manage.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan to configure.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "planId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlanImages resources.\n",
                "properties": {
                    "deleteUnspecifiedImages": {
                        "type": "boolean",
                        "description": "Whether or not this resource should delete any images not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                    },
                    "image": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/PlanImagesImage:PlanImagesImage"
                        },
                        "description": "A list of images to manage.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/PlanImagesImage:PlanImagesImage"
                        },
                        "description": "A complete list of images for this plan, even ones not being managed by this resource.\n"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The ID of the plan to configure.\n",
                        "willReplaceOnChanges": true
                    },
                    "specifiedImages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of image names being managed by this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/planKms:PlanKms": {
            "description": "`duplocloud.PlanKms` manages the list of kms avaialble to a plan in Duplo.\n\nThis resource allows you take control of individual plan kms for a specific plan.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myplan = new duplocloud.PlanKms(\"myplan\", {\n    planId: \"plan-name\",\n    kmsId: \"kms-id\",\n    kmsArn: \"kms-arn\",\n    kmsName: \"kms-name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyplan = duplocloud.PlanKms(\"myplan\",\n    plan_id=\"plan-name\",\n    kms_id=\"kms-id\",\n    kms_arn=\"kms-arn\",\n    kms_name=\"kms-name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myplan = new Duplocloud.PlanKms(\"myplan\", new()\n    {\n        PlanId = \"plan-name\",\n        KmsId = \"kms-id\",\n        KmsArn = \"kms-arn\",\n        KmsName = \"kms-name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewPlanKms(ctx, \"myplan\", \u0026duplocloud.PlanKmsArgs{\n\t\t\tPlanId:  pulumi.String(\"plan-name\"),\n\t\t\tKmsId:   pulumi.String(\"kms-id\"),\n\t\t\tKmsArn:  pulumi.String(\"kms-arn\"),\n\t\t\tKmsName: pulumi.String(\"kms-name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.PlanKms;\nimport com.pulumi.duplocloud.PlanKmsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myplan = new PlanKms(\"myplan\", PlanKmsArgs.builder()\n            .planId(\"plan-name\")\n            .kmsId(\"kms-id\")\n            .kmsArn(\"kms-arn\")\n            .kmsName(\"kms-name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myplan:\n    type: duplocloud:PlanKms\n    properties:\n      planId: plan-name\n      kmsId: kms-id\n      kmsArn: kms-arn\n      kmsName: kms-name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing WAF instance\n\n - *PLAN_ID* is the plan name\n\n - *KMS_NAME* is the name of the KMS\n\n```sh\n$ pulumi import duplocloud:index/planKms:PlanKms myplan *PLAN_ID*/kms/*KMS_NAME*\n```\n\n",
            "properties": {
                "kmsArn": {
                    "type": "string"
                },
                "kmsId": {
                    "type": "string"
                },
                "kmsName": {
                    "type": "string"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan to configure.\n"
                }
            },
            "required": [
                "kmsArn",
                "kmsId",
                "kmsName",
                "planId"
            ],
            "inputProperties": {
                "kmsArn": {
                    "type": "string"
                },
                "kmsId": {
                    "type": "string"
                },
                "kmsName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan to configure.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "kmsArn",
                "kmsId",
                "kmsName",
                "planId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlanKms resources.\n",
                "properties": {
                    "kmsArn": {
                        "type": "string"
                    },
                    "kmsId": {
                        "type": "string"
                    },
                    "kmsName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "planId": {
                        "type": "string",
                        "description": "The ID of the plan to configure.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/planKmsV2:PlanKmsV2": {
            "description": "`duplocloud.PlanKmsV2` manages the list of kms avaialble to a plan in Duplo.\n\nThis resource allows you take control of individual plan kms for a specific plan.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myplan = new duplocloud.PlanKmsV2(\"myplan\", {\n    planId: \"plan-name\",\n    kms: [{\n        id: \"kms-id\",\n        arn: \"kms-arn\",\n        name: \"kms-name\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyplan = duplocloud.PlanKmsV2(\"myplan\",\n    plan_id=\"plan-name\",\n    kms=[{\n        \"id\": \"kms-id\",\n        \"arn\": \"kms-arn\",\n        \"name\": \"kms-name\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myplan = new Duplocloud.PlanKmsV2(\"myplan\", new()\n    {\n        PlanId = \"plan-name\",\n        Kms = new[]\n        {\n            new Duplocloud.Inputs.PlanKmsV2KmArgs\n            {\n                Id = \"kms-id\",\n                Arn = \"kms-arn\",\n                Name = \"kms-name\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewPlanKmsV2(ctx, \"myplan\", \u0026duplocloud.PlanKmsV2Args{\n\t\t\tPlanId: pulumi.String(\"plan-name\"),\n\t\t\tKms: duplocloud.PlanKmsV2KmArray{\n\t\t\t\t\u0026duplocloud.PlanKmsV2KmArgs{\n\t\t\t\t\tId:   pulumi.String(\"kms-id\"),\n\t\t\t\t\tArn:  pulumi.String(\"kms-arn\"),\n\t\t\t\t\tName: pulumi.String(\"kms-name\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.PlanKmsV2;\nimport com.pulumi.duplocloud.PlanKmsV2Args;\nimport com.pulumi.duplocloud.inputs.PlanKmsV2KmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myplan = new PlanKmsV2(\"myplan\", PlanKmsV2Args.builder()\n            .planId(\"plan-name\")\n            .kms(PlanKmsV2KmArgs.builder()\n                .id(\"kms-id\")\n                .arn(\"kms-arn\")\n                .name(\"kms-name\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myplan:\n    type: duplocloud:PlanKmsV2\n    properties:\n      planId: plan-name\n      kms:\n        - id: kms-id\n          arn: kms-arn\n          name: kms-name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing WAF instance\n\n - *PLAN_ID* is the plan name\n\n```sh\n$ pulumi import duplocloud:index/planKmsV2:PlanKmsV2 myplan *PLAN_ID*/kms*\n```\n\n",
            "properties": {
                "deleteUnspecifiedKmsKeys": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                },
                "kms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanKmsV2Km:PlanKmsV2Km"
                    },
                    "description": "A list of KMS key to manage.\n"
                },
                "kmsKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanKmsV2KmsKey:PlanKmsV2KmsKey"
                    },
                    "description": "A list of KMS key to manage.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan to configure.\n"
                },
                "specifiedKmsKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of certificate names being managed by this resource.\n"
                }
            },
            "required": [
                "kmsKeys",
                "planId",
                "specifiedKmsKeys"
            ],
            "inputProperties": {
                "deleteUnspecifiedKmsKeys": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                },
                "kms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanKmsV2Km:PlanKmsV2Km"
                    },
                    "description": "A list of KMS key to manage.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan to configure.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "planId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlanKmsV2 resources.\n",
                "properties": {
                    "deleteUnspecifiedKmsKeys": {
                        "type": "boolean",
                        "description": "Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                    },
                    "kms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/PlanKmsV2Km:PlanKmsV2Km"
                        },
                        "description": "A list of KMS key to manage.\n"
                    },
                    "kmsKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/PlanKmsV2KmsKey:PlanKmsV2KmsKey"
                        },
                        "description": "A list of KMS key to manage.\n"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The ID of the plan to configure.\n",
                        "willReplaceOnChanges": true
                    },
                    "specifiedKmsKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of certificate names being managed by this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/planSettings:PlanSettings": {
            "description": "`duplocloud.PlanSettings` manages an plan settings in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myplanSettings = new duplocloud.PlanSettings(\"myplanSettings\", {\n    planId: \"myplan\",\n    unrestrictedExtLb: true,\n    dnsSetting: {\n        domainId: \"Z02791752705G9GHH8CYF\",\n        internalDnsSuffix: \".test.duplocloud.net\",\n        externalDnsSuffix: \".test.duplocloud.net\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyplan_settings = duplocloud.PlanSettings(\"myplanSettings\",\n    plan_id=\"myplan\",\n    unrestricted_ext_lb=True,\n    dns_setting={\n        \"domain_id\": \"Z02791752705G9GHH8CYF\",\n        \"internal_dns_suffix\": \".test.duplocloud.net\",\n        \"external_dns_suffix\": \".test.duplocloud.net\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myplanSettings = new Duplocloud.PlanSettings(\"myplanSettings\", new()\n    {\n        PlanId = \"myplan\",\n        UnrestrictedExtLb = true,\n        DnsSetting = new Duplocloud.Inputs.PlanSettingsDnsSettingArgs\n        {\n            DomainId = \"Z02791752705G9GHH8CYF\",\n            InternalDnsSuffix = \".test.duplocloud.net\",\n            ExternalDnsSuffix = \".test.duplocloud.net\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewPlanSettings(ctx, \"myplanSettings\", \u0026duplocloud.PlanSettingsArgs{\n\t\t\tPlanId:            pulumi.String(\"myplan\"),\n\t\t\tUnrestrictedExtLb: pulumi.Bool(true),\n\t\t\tDnsSetting: \u0026duplocloud.PlanSettingsDnsSettingArgs{\n\t\t\t\tDomainId:          pulumi.String(\"Z02791752705G9GHH8CYF\"),\n\t\t\t\tInternalDnsSuffix: pulumi.String(\".test.duplocloud.net\"),\n\t\t\t\tExternalDnsSuffix: pulumi.String(\".test.duplocloud.net\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.PlanSettings;\nimport com.pulumi.duplocloud.PlanSettingsArgs;\nimport com.pulumi.duplocloud.inputs.PlanSettingsDnsSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myplanSettings = new PlanSettings(\"myplanSettings\", PlanSettingsArgs.builder()\n            .planId(\"myplan\")\n            .unrestrictedExtLb(true)\n            .dnsSetting(PlanSettingsDnsSettingArgs.builder()\n                .domainId(\"Z02791752705G9GHH8CYF\")\n                .internalDnsSuffix(\".test.duplocloud.net\")\n                .externalDnsSuffix(\".test.duplocloud.net\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myplanSettings:\n    type: duplocloud:PlanSettings\n    properties:\n      planId: myplan\n      unrestrictedExtLb: true\n      dnsSetting:\n        domainId: Z02791752705G9GHH8CYF\n        internalDnsSuffix: .test.duplocloud.net\n        externalDnsSuffix: .test.duplocloud.net\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import duplocloud:index/planSettings:PlanSettings myplanSettings PLAN_ID\n```\n\n",
            "properties": {
                "allMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanSettingsAllMetadata:PlanSettingsAllMetadata"
                    },
                    "description": "A complete list of metadata for this plan, even ones not being managed by this resource.\n"
                },
                "dnsSetting": {
                    "$ref": "#/types/duplocloud:index/PlanSettingsDnsSetting:PlanSettingsDnsSetting"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanSettingsMetadata:PlanSettingsMetadata"
                    },
                    "description": "A list of metadata for the plan to manage.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan to configure.\n"
                },
                "specifiedMetadatas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of metadata being managed by this resource.\n"
                },
                "unrestrictedExtLb": {
                    "type": "boolean"
                }
            },
            "required": [
                "allMetadatas",
                "dnsSetting",
                "planId",
                "specifiedMetadatas",
                "unrestrictedExtLb"
            ],
            "inputProperties": {
                "dnsSetting": {
                    "$ref": "#/types/duplocloud:index/PlanSettingsDnsSetting:PlanSettingsDnsSetting"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanSettingsMetadata:PlanSettingsMetadata"
                    },
                    "description": "A list of metadata for the plan to manage.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan to configure.\n",
                    "willReplaceOnChanges": true
                },
                "specifiedMetadatas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of metadata being managed by this resource.\n"
                },
                "unrestrictedExtLb": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "planId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlanSettings resources.\n",
                "properties": {
                    "allMetadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/PlanSettingsAllMetadata:PlanSettingsAllMetadata"
                        },
                        "description": "A complete list of metadata for this plan, even ones not being managed by this resource.\n"
                    },
                    "dnsSetting": {
                        "$ref": "#/types/duplocloud:index/PlanSettingsDnsSetting:PlanSettingsDnsSetting"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/PlanSettingsMetadata:PlanSettingsMetadata"
                        },
                        "description": "A list of metadata for the plan to manage.\n"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The ID of the plan to configure.\n",
                        "willReplaceOnChanges": true
                    },
                    "specifiedMetadatas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of metadata being managed by this resource.\n"
                    },
                    "unrestrictedExtLb": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/planWaf:PlanWaf": {
            "description": "`duplocloud.PlanWaf` manages the list of waf's avaialble to a plan in Duplo.\n\nThis resource allows you take control of individual waf's for a specific plan.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myplan = new duplocloud.PlanWaf(\"myplan\", {\n    planId: \"plan-name\",\n    wafName: \"WebAcl name\",\n    wafArn: \"WebAcl ARN\",\n    dashboardUrl: \"dashboard url\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyplan = duplocloud.PlanWaf(\"myplan\",\n    plan_id=\"plan-name\",\n    waf_name=\"WebAcl name\",\n    waf_arn=\"WebAcl ARN\",\n    dashboard_url=\"dashboard url\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myplan = new Duplocloud.PlanWaf(\"myplan\", new()\n    {\n        PlanId = \"plan-name\",\n        WafName = \"WebAcl name\",\n        WafArn = \"WebAcl ARN\",\n        DashboardUrl = \"dashboard url\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewPlanWaf(ctx, \"myplan\", \u0026duplocloud.PlanWafArgs{\n\t\t\tPlanId:       pulumi.String(\"plan-name\"),\n\t\t\tWafName:      pulumi.String(\"WebAcl name\"),\n\t\t\tWafArn:       pulumi.String(\"WebAcl ARN\"),\n\t\t\tDashboardUrl: pulumi.String(\"dashboard url\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.PlanWaf;\nimport com.pulumi.duplocloud.PlanWafArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myplan = new PlanWaf(\"myplan\", PlanWafArgs.builder()\n            .planId(\"plan-name\")\n            .wafName(\"WebAcl name\")\n            .wafArn(\"WebAcl ARN\")\n            .dashboardUrl(\"dashboard url\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myplan:\n    type: duplocloud:PlanWaf\n    properties:\n      planId: plan-name\n      wafName: WebAcl name\n      wafArn: WebAcl ARN\n      dashboardUrl: dashboard url\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing WAF instance\n\n - *PLAN_ID* is the plan name\n\n - *WAF_NAME* is the name of the WAF\n\n#\n\n```sh\n$ pulumi import duplocloud:index/planWaf:PlanWaf myplan *PLAN_ID*/*WAF_NAME*\n```\n\n",
            "properties": {
                "dashboardUrl": {
                    "type": "string"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan for waf.\n"
                },
                "wafArn": {
                    "type": "string"
                },
                "wafName": {
                    "type": "string"
                }
            },
            "required": [
                "dashboardUrl",
                "planId",
                "wafArn",
                "wafName"
            ],
            "inputProperties": {
                "dashboardUrl": {
                    "type": "string"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan for waf.\n",
                    "willReplaceOnChanges": true
                },
                "wafArn": {
                    "type": "string"
                },
                "wafName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "planId",
                "wafArn",
                "wafName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlanWaf resources.\n",
                "properties": {
                    "dashboardUrl": {
                        "type": "string"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The ID of the plan for waf.\n",
                        "willReplaceOnChanges": true
                    },
                    "wafArn": {
                        "type": "string"
                    },
                    "wafName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/planWafV2:PlanWafV2": {
            "description": "`duplocloud.PlanWafV2` manages the list of waf's avaialble to a plan in Duplo.\n\nThis resource allows you take control of individual waf's for a specific plan.\n",
            "properties": {
                "deleteUnspecifiedWafs": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any wafs not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan for waf.\n"
                },
                "specifiedWafs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of wafs names being managed by this resource.\n"
                },
                "waf": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanWafV2Waf:PlanWafV2Waf"
                    }
                },
                "wafs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanWafV2Waf:PlanWafV2Waf"
                    },
                    "description": "A complete list of wafs for this plan, even ones not being managed by this resource.\n"
                }
            },
            "required": [
                "planId",
                "specifiedWafs",
                "waf",
                "wafs"
            ],
            "inputProperties": {
                "deleteUnspecifiedWafs": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any wafs not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The ID of the plan for waf.\n",
                    "willReplaceOnChanges": true
                },
                "waf": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/PlanWafV2Waf:PlanWafV2Waf"
                    }
                }
            },
            "requiredInputs": [
                "planId",
                "waf"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlanWafV2 resources.\n",
                "properties": {
                    "deleteUnspecifiedWafs": {
                        "type": "boolean",
                        "description": "Whether or not this resource should delete any wafs not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The ID of the plan for waf.\n",
                        "willReplaceOnChanges": true
                    },
                    "specifiedWafs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of wafs names being managed by this resource.\n"
                    },
                    "waf": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/PlanWafV2Waf:PlanWafV2Waf"
                        }
                    },
                    "wafs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/PlanWafV2Waf:PlanWafV2Waf"
                        },
                        "description": "A complete list of wafs for this plan, even ones not being managed by this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/rdsInstance:RdsInstance": {
            "description": "## Example Usage\n\n### Provision an RDS instance using the PostgreSQL engine named dev-db in DuploCloud platform.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\nimport * as random from \"@pulumi/random\";\n\n// Before creating an RDS instance, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\nconst infra = new duplocloud.Infrastructure(\"infra\", {\n    infraName: \"dev\",\n    cloud: 0,\n    region: \"us-east-1\",\n    enableK8Cluster: false,\n    addressPrefix: \"10.13.0.0/16\",\n});\n// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"dev\",\n    planId: infra.infraName,\n});\n// Generate a random password for the RDS instance.\nconst password = new random.index.Password(\"password\", {\n    length: 16,\n    special: false,\n});\n// Create an RDS instance.\nconst dev_db = new duplocloud.RdsInstance(\"dev-db\", {\n    tenantId: tenant.tenantId,\n    name: \"dev-db\",\n    engine: 1,\n    engineVersion: \"15.2\",\n    size: \"db.t3.medium\",\n    masterUsername: \"postgres\",\n    masterPassword: password.result,\n    encryptStorage: true,\n    backupRetentionPeriod: 7,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\nimport pulumi_random as random\n\n# Before creating an RDS instance, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\ninfra = duplocloud.Infrastructure(\"infra\",\n    infra_name=\"dev\",\n    cloud=0,\n    region=\"us-east-1\",\n    enable_k8_cluster=False,\n    address_prefix=\"10.13.0.0/16\")\n# Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"dev\",\n    plan_id=infra.infra_name)\n# Generate a random password for the RDS instance.\npassword = random.index.Password(\"password\",\n    length=16,\n    special=False)\n# Create an RDS instance.\ndev_db = duplocloud.RdsInstance(\"dev-db\",\n    tenant_id=tenant.tenant_id,\n    name=\"dev-db\",\n    engine=1,\n    engine_version=\"15.2\",\n    size=\"db.t3.medium\",\n    master_username=\"postgres\",\n    master_password=password[\"result\"],\n    encrypt_storage=True,\n    backup_retention_period=7)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\nusing Random = Pulumi.Random;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Before creating an RDS instance, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\n    var infra = new Duplocloud.Infrastructure(\"infra\", new()\n    {\n        InfraName = \"dev\",\n        Cloud = 0,\n        Region = \"us-east-1\",\n        EnableK8Cluster = false,\n        AddressPrefix = \"10.13.0.0/16\",\n    });\n\n    // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"dev\",\n        PlanId = infra.InfraName,\n    });\n\n    // Generate a random password for the RDS instance.\n    var password = new Random.Index.Password(\"password\", new()\n    {\n        Length = 16,\n        Special = false,\n    });\n\n    // Create an RDS instance.\n    var dev_db = new Duplocloud.RdsInstance(\"dev-db\", new()\n    {\n        TenantId = tenant.TenantId,\n        Name = \"dev-db\",\n        Engine = 1,\n        EngineVersion = \"15.2\",\n        Size = \"db.t3.medium\",\n        MasterUsername = \"postgres\",\n        MasterPassword = password.Result,\n        EncryptStorage = true,\n        BackupRetentionPeriod = 7,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi-random/sdk/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Before creating an RDS instance, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\n\t\tinfra, err := duplocloud.NewInfrastructure(ctx, \"infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"dev\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-east-1\"),\n\t\t\tEnableK8Cluster: pulumi.Bool(false),\n\t\t\tAddressPrefix:   pulumi.String(\"10.13.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n\t\ttenant, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"dev\"),\n\t\t\tPlanId:      infra.InfraName,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Generate a random password for the RDS instance.\n\t\tpassword, err := random.NewPassword(ctx, \"password\", \u0026random.PasswordArgs{\n\t\t\tLength:  16,\n\t\t\tSpecial: false,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create an RDS instance.\n\t\t_, err = duplocloud.NewRdsInstance(ctx, \"dev-db\", \u0026duplocloud.RdsInstanceArgs{\n\t\t\tTenantId:              tenant.TenantId,\n\t\t\tName:                  pulumi.String(\"dev-db\"),\n\t\t\tEngine:                pulumi.Int(1),\n\t\t\tEngineVersion:         pulumi.String(\"15.2\"),\n\t\t\tSize:                  pulumi.String(\"db.t3.medium\"),\n\t\t\tMasterUsername:        pulumi.String(\"postgres\"),\n\t\t\tMasterPassword:        password.Result,\n\t\t\tEncryptStorage:        pulumi.Bool(true),\n\t\t\tBackupRetentionPeriod: pulumi.Int(7),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.random.password;\nimport com.pulumi.random.PasswordArgs;\nimport com.pulumi.duplocloud.RdsInstance;\nimport com.pulumi.duplocloud.RdsInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Before creating an RDS instance, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\n        var infra = new Infrastructure(\"infra\", InfrastructureArgs.builder()\n            .infraName(\"dev\")\n            .cloud(0)\n            .region(\"us-east-1\")\n            .enableK8Cluster(false)\n            .addressPrefix(\"10.13.0.0/16\")\n            .build());\n\n        // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"dev\")\n            .planId(infra.infraName())\n            .build());\n\n        // Generate a random password for the RDS instance.\n        var password = new Password(\"password\", PasswordArgs.builder()\n            .length(16)\n            .special(false)\n            .build());\n\n        // Create an RDS instance.\n        var dev_db = new RdsInstance(\"dev-db\", RdsInstanceArgs.builder()\n            .tenantId(tenant.tenantId())\n            .name(\"dev-db\")\n            .engine(1)\n            .engineVersion(\"15.2\")\n            .size(\"db.t3.medium\")\n            .masterUsername(\"postgres\")\n            .masterPassword(password.result())\n            .encryptStorage(true)\n            .backupRetentionPeriod(7)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Before creating an RDS instance, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.\n  infra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: dev\n      cloud: 0 # AWS Cloud\n      region: us-east-1\n      enableK8Cluster: false\n      addressPrefix: 10.13.0.0/16\n  # Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: dev\n      planId: ${infra.infraName}\n  # Generate a random password for the RDS instance.\n  password:\n    type: random:password\n    properties:\n      length: 16\n      special: false\n  # Create an RDS instance.\n  dev-db:\n    type: duplocloud:RdsInstance\n    properties:\n      tenantId: ${tenant.tenantId}\n      name: dev-db\n      engine: 1 # PostgreSQL DB engine\n      engineVersion: '15.2'\n      size: db.t3.medium\n      masterUsername: postgres\n      masterPassword: ${password.result}\n      encryptStorage: true\n      backupRetentionPeriod: 7\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Provision an RDS instance using the PostgreSQL engine named dev-db with deletion protection enabled and multi-az enabled.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\nimport * as random from \"@pulumi/random\";\n\n// Ensure the 'dev' tenant is already created before creating the RDS instance.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\n// Generate a random password for the RDS instance.\nconst mypassword = new random.index.Password(\"mypassword\", {\n    length: 16,\n    special: false,\n});\nconst dev_db = new duplocloud.RdsInstance(\"dev-db\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"dev-db\",\n    engine: 1,\n    engineVersion: \"15.2\",\n    size: \"db.t3.medium\",\n    deletionProtection: true,\n    multiAz: true,\n    masterUsername: \"postgres\",\n    masterPassword: mypassword.result,\n    encryptStorage: true,\n    backupRetentionPeriod: 7,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\nimport pulumi_random as random\n\n# Ensure the 'dev' tenant is already created before creating the RDS instance.\ntenant = duplocloud.get_tenant(name=\"dev\")\n# Generate a random password for the RDS instance.\nmypassword = random.index.Password(\"mypassword\",\n    length=16,\n    special=False)\ndev_db = duplocloud.RdsInstance(\"dev-db\",\n    tenant_id=tenant.id,\n    name=\"dev-db\",\n    engine=1,\n    engine_version=\"15.2\",\n    size=\"db.t3.medium\",\n    deletion_protection=True,\n    multi_az=True,\n    master_username=\"postgres\",\n    master_password=mypassword[\"result\"],\n    encrypt_storage=True,\n    backup_retention_period=7)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\nusing Random = Pulumi.Random;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'dev' tenant is already created before creating the RDS instance.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    // Generate a random password for the RDS instance.\n    var mypassword = new Random.Index.Password(\"mypassword\", new()\n    {\n        Length = 16,\n        Special = false,\n    });\n\n    var dev_db = new Duplocloud.RdsInstance(\"dev-db\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"dev-db\",\n        Engine = 1,\n        EngineVersion = \"15.2\",\n        Size = \"db.t3.medium\",\n        DeletionProtection = true,\n        MultiAz = true,\n        MasterUsername = \"postgres\",\n        MasterPassword = mypassword.Result,\n        EncryptStorage = true,\n        BackupRetentionPeriod = 7,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi-random/sdk/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'dev' tenant is already created before creating the RDS instance.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Generate a random password for the RDS instance.\n\t\tmypassword, err := random.NewPassword(ctx, \"mypassword\", \u0026random.PasswordArgs{\n\t\t\tLength:  16,\n\t\t\tSpecial: false,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewRdsInstance(ctx, \"dev-db\", \u0026duplocloud.RdsInstanceArgs{\n\t\t\tTenantId:              pulumi.String(tenant.Id),\n\t\t\tName:                  pulumi.String(\"dev-db\"),\n\t\t\tEngine:                pulumi.Int(1),\n\t\t\tEngineVersion:         pulumi.String(\"15.2\"),\n\t\t\tSize:                  pulumi.String(\"db.t3.medium\"),\n\t\t\tDeletionProtection:    pulumi.Bool(true),\n\t\t\tMultiAz:               pulumi.Bool(true),\n\t\t\tMasterUsername:        pulumi.String(\"postgres\"),\n\t\t\tMasterPassword:        mypassword.Result,\n\t\t\tEncryptStorage:        pulumi.Bool(true),\n\t\t\tBackupRetentionPeriod: pulumi.Int(7),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.random.password;\nimport com.pulumi.random.PasswordArgs;\nimport com.pulumi.duplocloud.RdsInstance;\nimport com.pulumi.duplocloud.RdsInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'dev' tenant is already created before creating the RDS instance.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        // Generate a random password for the RDS instance.\n        var mypassword = new Password(\"mypassword\", PasswordArgs.builder()\n            .length(16)\n            .special(false)\n            .build());\n\n        var dev_db = new RdsInstance(\"dev-db\", RdsInstanceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"dev-db\")\n            .engine(1)\n            .engineVersion(\"15.2\")\n            .size(\"db.t3.medium\")\n            .deletionProtection(true)\n            .multiAz(true)\n            .masterUsername(\"postgres\")\n            .masterPassword(mypassword.result())\n            .encryptStorage(true)\n            .backupRetentionPeriod(7)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Generate a random password for the RDS instance.\n  mypassword:\n    type: random:password\n    properties:\n      length: 16\n      special: false\n  dev-db:\n    type: duplocloud:RdsInstance\n    properties:\n      tenantId: ${tenant.id}\n      name: dev-db\n      engine: 1 # PostgreSQL DB engine\n      engineVersion: '15.2'\n      size: db.t3.medium\n      deletionProtection: true\n      multiAz: true\n      masterUsername: postgres\n      masterPassword: ${mypassword.result}\n      encryptStorage: true\n      backupRetentionPeriod: 7\nvariables:\n  # Ensure the 'dev' tenant is already created before creating the RDS instance.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create an RDS instance using the Aurora-PostgreSQL engine named aurora-postgres-db with instance class db.m5.large.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\nimport * as random from \"@pulumi/random\";\n\n// Ensure the 'dev' tenant is already created before creating the RDS instance.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\n// Generate a random password for the RDS instance.\nconst mypassword = new random.index.Password(\"mypassword\", {\n    length: 16,\n    special: false,\n});\nconst aurora_postgres_db = new duplocloud.RdsInstance(\"aurora-postgres-db\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"aurora-postgres-db\",\n    engine: 9,\n    engineVersion: \"15.2\",\n    size: \"db.m5.large\",\n    masterUsername: \"postgres\",\n    masterPassword: mypassword.result,\n    encryptStorage: true,\n    backupRetentionPeriod: 7,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\nimport pulumi_random as random\n\n# Ensure the 'dev' tenant is already created before creating the RDS instance.\ntenant = duplocloud.get_tenant(name=\"dev\")\n# Generate a random password for the RDS instance.\nmypassword = random.index.Password(\"mypassword\",\n    length=16,\n    special=False)\naurora_postgres_db = duplocloud.RdsInstance(\"aurora-postgres-db\",\n    tenant_id=tenant.id,\n    name=\"aurora-postgres-db\",\n    engine=9,\n    engine_version=\"15.2\",\n    size=\"db.m5.large\",\n    master_username=\"postgres\",\n    master_password=mypassword[\"result\"],\n    encrypt_storage=True,\n    backup_retention_period=7)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\nusing Random = Pulumi.Random;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'dev' tenant is already created before creating the RDS instance.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    // Generate a random password for the RDS instance.\n    var mypassword = new Random.Index.Password(\"mypassword\", new()\n    {\n        Length = 16,\n        Special = false,\n    });\n\n    var aurora_postgres_db = new Duplocloud.RdsInstance(\"aurora-postgres-db\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"aurora-postgres-db\",\n        Engine = 9,\n        EngineVersion = \"15.2\",\n        Size = \"db.m5.large\",\n        MasterUsername = \"postgres\",\n        MasterPassword = mypassword.Result,\n        EncryptStorage = true,\n        BackupRetentionPeriod = 7,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi-random/sdk/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'dev' tenant is already created before creating the RDS instance.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Generate a random password for the RDS instance.\n\t\tmypassword, err := random.NewPassword(ctx, \"mypassword\", \u0026random.PasswordArgs{\n\t\t\tLength:  16,\n\t\t\tSpecial: false,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewRdsInstance(ctx, \"aurora-postgres-db\", \u0026duplocloud.RdsInstanceArgs{\n\t\t\tTenantId:              pulumi.String(tenant.Id),\n\t\t\tName:                  pulumi.String(\"aurora-postgres-db\"),\n\t\t\tEngine:                pulumi.Int(9),\n\t\t\tEngineVersion:         pulumi.String(\"15.2\"),\n\t\t\tSize:                  pulumi.String(\"db.m5.large\"),\n\t\t\tMasterUsername:        pulumi.String(\"postgres\"),\n\t\t\tMasterPassword:        mypassword.Result,\n\t\t\tEncryptStorage:        pulumi.Bool(true),\n\t\t\tBackupRetentionPeriod: pulumi.Int(7),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.random.password;\nimport com.pulumi.random.PasswordArgs;\nimport com.pulumi.duplocloud.RdsInstance;\nimport com.pulumi.duplocloud.RdsInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'dev' tenant is already created before creating the RDS instance.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        // Generate a random password for the RDS instance.\n        var mypassword = new Password(\"mypassword\", PasswordArgs.builder()\n            .length(16)\n            .special(false)\n            .build());\n\n        var aurora_postgres_db = new RdsInstance(\"aurora-postgres-db\", RdsInstanceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"aurora-postgres-db\")\n            .engine(9)\n            .engineVersion(\"15.2\")\n            .size(\"db.m5.large\")\n            .masterUsername(\"postgres\")\n            .masterPassword(mypassword.result())\n            .encryptStorage(true)\n            .backupRetentionPeriod(7)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Generate a random password for the RDS instance.\n  mypassword:\n    type: random:password\n    properties:\n      length: 16\n      special: false\n  aurora-postgres-db:\n    type: duplocloud:RdsInstance\n    properties:\n      tenantId: ${tenant.id}\n      name: aurora-postgres-db\n      engine: 9 # AuroraDB PostgreSQL engine\n      engineVersion: '15.2'\n      size: db.m5.large\n      masterUsername: postgres\n      masterPassword: ${mypassword.result}\n      encryptStorage: true\n      backupRetentionPeriod: 7\nvariables:\n  # Ensure the 'dev' tenant is already created before creating the RDS instance.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create an Aurora serverless RDS instance using the PostgreSQL engine named aurora-postgres with engine version 15.5, minimum capacity of 0.5, maximum capacity of 2, with deletion protection enabled and store the DB credentials in AWS secrets manager. Also create a read replica for this database.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\nimport * as random from \"@pulumi/random\";\n\n// Ensure the 'dev' tenant is already created before creating the RDS instance.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\n// Generate a random password for the RDS instance.\nconst mypassword = new random.index.Password(\"mypassword\", {\n    length: 16,\n    special: false,\n});\nconst aurora_serverless = new duplocloud.RdsInstance(\"aurora-serverless\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"aurora-postgres\",\n    engine: 9,\n    engineVersion: \"15.5\",\n    size: \"db.serverless\",\n    masterUsername: \"postgres\",\n    masterPassword: mypassword.result,\n    encryptStorage: true,\n    backupRetentionPeriod: 7,\n    v2ScalingConfiguration: {\n        minCapacity: 0.5,\n        maxCapacity: 2,\n    },\n    storeDetailsInSecretManager: true,\n    deletionProtection: true,\n});\nconst read_replica = new duplocloud.RdsReadReplica(\"read-replica\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"aurora-postgres-read-replica\",\n    size: \"db.serverless\",\n    clusterIdentifier: aurora_serverless.clusterIdentifier,\n}, {\n    dependsOn: [aurora_serverless],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\nimport pulumi_random as random\n\n# Ensure the 'dev' tenant is already created before creating the RDS instance.\ntenant = duplocloud.get_tenant(name=\"dev\")\n# Generate a random password for the RDS instance.\nmypassword = random.index.Password(\"mypassword\",\n    length=16,\n    special=False)\naurora_serverless = duplocloud.RdsInstance(\"aurora-serverless\",\n    tenant_id=tenant.id,\n    name=\"aurora-postgres\",\n    engine=9,\n    engine_version=\"15.5\",\n    size=\"db.serverless\",\n    master_username=\"postgres\",\n    master_password=mypassword[\"result\"],\n    encrypt_storage=True,\n    backup_retention_period=7,\n    v2_scaling_configuration={\n        \"min_capacity\": 0.5,\n        \"max_capacity\": 2,\n    },\n    store_details_in_secret_manager=True,\n    deletion_protection=True)\nread_replica = duplocloud.RdsReadReplica(\"read-replica\",\n    tenant_id=tenant.id,\n    name=\"aurora-postgres-read-replica\",\n    size=\"db.serverless\",\n    cluster_identifier=aurora_serverless.cluster_identifier,\n    opts = pulumi.ResourceOptions(depends_on=[aurora_serverless]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\nusing Random = Pulumi.Random;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'dev' tenant is already created before creating the RDS instance.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    // Generate a random password for the RDS instance.\n    var mypassword = new Random.Index.Password(\"mypassword\", new()\n    {\n        Length = 16,\n        Special = false,\n    });\n\n    var aurora_serverless = new Duplocloud.RdsInstance(\"aurora-serverless\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"aurora-postgres\",\n        Engine = 9,\n        EngineVersion = \"15.5\",\n        Size = \"db.serverless\",\n        MasterUsername = \"postgres\",\n        MasterPassword = mypassword.Result,\n        EncryptStorage = true,\n        BackupRetentionPeriod = 7,\n        V2ScalingConfiguration = new Duplocloud.Inputs.RdsInstanceV2ScalingConfigurationArgs\n        {\n            MinCapacity = 0.5,\n            MaxCapacity = 2,\n        },\n        StoreDetailsInSecretManager = true,\n        DeletionProtection = true,\n    });\n\n    var read_replica = new Duplocloud.RdsReadReplica(\"read-replica\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"aurora-postgres-read-replica\",\n        Size = \"db.serverless\",\n        ClusterIdentifier = aurora_serverless.ClusterIdentifier,\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            aurora_serverless,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi-random/sdk/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'dev' tenant is already created before creating the RDS instance.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Generate a random password for the RDS instance.\n\t\tmypassword, err := random.NewPassword(ctx, \"mypassword\", \u0026random.PasswordArgs{\n\t\t\tLength:  16,\n\t\t\tSpecial: false,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewRdsInstance(ctx, \"aurora-serverless\", \u0026duplocloud.RdsInstanceArgs{\n\t\t\tTenantId:              pulumi.String(tenant.Id),\n\t\t\tName:                  pulumi.String(\"aurora-postgres\"),\n\t\t\tEngine:                pulumi.Int(9),\n\t\t\tEngineVersion:         pulumi.String(\"15.5\"),\n\t\t\tSize:                  pulumi.String(\"db.serverless\"),\n\t\t\tMasterUsername:        pulumi.String(\"postgres\"),\n\t\t\tMasterPassword:        mypassword.Result,\n\t\t\tEncryptStorage:        pulumi.Bool(true),\n\t\t\tBackupRetentionPeriod: pulumi.Int(7),\n\t\t\tV2ScalingConfiguration: \u0026duplocloud.RdsInstanceV2ScalingConfigurationArgs{\n\t\t\t\tMinCapacity: pulumi.Float64(0.5),\n\t\t\t\tMaxCapacity: pulumi.Float64(2),\n\t\t\t},\n\t\t\tStoreDetailsInSecretManager: pulumi.Bool(true),\n\t\t\tDeletionProtection:          pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewRdsReadReplica(ctx, \"read-replica\", \u0026duplocloud.RdsReadReplicaArgs{\n\t\t\tTenantId:          pulumi.String(tenant.Id),\n\t\t\tName:              pulumi.String(\"aurora-postgres-read-replica\"),\n\t\t\tSize:              pulumi.String(\"db.serverless\"),\n\t\t\tClusterIdentifier: aurora_serverless.ClusterIdentifier,\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\taurora_serverless,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.random.password;\nimport com.pulumi.random.PasswordArgs;\nimport com.pulumi.duplocloud.RdsInstance;\nimport com.pulumi.duplocloud.RdsInstanceArgs;\nimport com.pulumi.duplocloud.inputs.RdsInstanceV2ScalingConfigurationArgs;\nimport com.pulumi.duplocloud.RdsReadReplica;\nimport com.pulumi.duplocloud.RdsReadReplicaArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'dev' tenant is already created before creating the RDS instance.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        // Generate a random password for the RDS instance.\n        var mypassword = new Password(\"mypassword\", PasswordArgs.builder()\n            .length(16)\n            .special(false)\n            .build());\n\n        var aurora_serverless = new RdsInstance(\"aurora-serverless\", RdsInstanceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"aurora-postgres\")\n            .engine(9)\n            .engineVersion(\"15.5\")\n            .size(\"db.serverless\")\n            .masterUsername(\"postgres\")\n            .masterPassword(mypassword.result())\n            .encryptStorage(true)\n            .backupRetentionPeriod(7)\n            .v2ScalingConfiguration(RdsInstanceV2ScalingConfigurationArgs.builder()\n                .minCapacity(0.5)\n                .maxCapacity(2)\n                .build())\n            .storeDetailsInSecretManager(true)\n            .deletionProtection(true)\n            .build());\n\n        var read_replica = new RdsReadReplica(\"read-replica\", RdsReadReplicaArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"aurora-postgres-read-replica\")\n            .size(\"db.serverless\")\n            .clusterIdentifier(aurora_serverless.clusterIdentifier())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(aurora_serverless)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Generate a random password for the RDS instance.\n  mypassword:\n    type: random:password\n    properties:\n      length: 16\n      special: false\n  aurora-serverless:\n    type: duplocloud:RdsInstance\n    properties:\n      tenantId: ${tenant.id}\n      name: aurora-postgres\n      engine: 9\n      engineVersion: '15.5'\n      size: db.serverless\n      masterUsername: postgres\n      masterPassword: ${mypassword.result}\n      encryptStorage: true\n      backupRetentionPeriod: 7\n      v2ScalingConfiguration:\n        minCapacity: 0.5\n        maxCapacity: 2\n      storeDetailsInSecretManager: true\n      deletionProtection: true\n  read-replica:\n    type: duplocloud:RdsReadReplica\n    properties:\n      tenantId: ${tenant.id}\n      name: aurora-postgres-read-replica\n      size: db.serverless\n      clusterIdentifier: ${[\"aurora-serverless\"].clusterIdentifier}\n    options:\n      dependsOn:\n        - ${[\"aurora-serverless\"]}\nvariables:\n  # Ensure the 'dev' tenant is already created before creating the RDS instance.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Provision an RDS instance using the MySQL engine named dev-db, with username mysql_user1 in DuploCloud platform.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\nimport * as random from \"@pulumi/random\";\n\n// Ensure the 'dev' tenant is already created before creating the RDS instance.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\n// Generate a random password for the RDS instance.\nconst mypassword = new random.index.Password(\"mypassword\", {\n    length: 16,\n    special: false,\n});\n// Create an RDS instance.\nconst dev_db = new duplocloud.RdsInstance(\"dev-db\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"dev-db\",\n    engine: 0,\n    engineVersion: \"8.0.32\",\n    size: \"db.t3.medium\",\n    masterUsername: \"mysql_user1\",\n    masterPassword: mypassword.result,\n    encryptStorage: true,\n    backupRetentionPeriod: 7,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\nimport pulumi_random as random\n\n# Ensure the 'dev' tenant is already created before creating the RDS instance.\ntenant = duplocloud.get_tenant(name=\"dev\")\n# Generate a random password for the RDS instance.\nmypassword = random.index.Password(\"mypassword\",\n    length=16,\n    special=False)\n# Create an RDS instance.\ndev_db = duplocloud.RdsInstance(\"dev-db\",\n    tenant_id=tenant.id,\n    name=\"dev-db\",\n    engine=0,\n    engine_version=\"8.0.32\",\n    size=\"db.t3.medium\",\n    master_username=\"mysql_user1\",\n    master_password=mypassword[\"result\"],\n    encrypt_storage=True,\n    backup_retention_period=7)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\nusing Random = Pulumi.Random;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'dev' tenant is already created before creating the RDS instance.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    // Generate a random password for the RDS instance.\n    var mypassword = new Random.Index.Password(\"mypassword\", new()\n    {\n        Length = 16,\n        Special = false,\n    });\n\n    // Create an RDS instance.\n    var dev_db = new Duplocloud.RdsInstance(\"dev-db\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"dev-db\",\n        Engine = 0,\n        EngineVersion = \"8.0.32\",\n        Size = \"db.t3.medium\",\n        MasterUsername = \"mysql_user1\",\n        MasterPassword = mypassword.Result,\n        EncryptStorage = true,\n        BackupRetentionPeriod = 7,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi-random/sdk/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'dev' tenant is already created before creating the RDS instance.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Generate a random password for the RDS instance.\n\t\tmypassword, err := random.NewPassword(ctx, \"mypassword\", \u0026random.PasswordArgs{\n\t\t\tLength:  16,\n\t\t\tSpecial: false,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create an RDS instance.\n\t\t_, err = duplocloud.NewRdsInstance(ctx, \"dev-db\", \u0026duplocloud.RdsInstanceArgs{\n\t\t\tTenantId:              pulumi.String(tenant.Id),\n\t\t\tName:                  pulumi.String(\"dev-db\"),\n\t\t\tEngine:                pulumi.Int(0),\n\t\t\tEngineVersion:         pulumi.String(\"8.0.32\"),\n\t\t\tSize:                  pulumi.String(\"db.t3.medium\"),\n\t\t\tMasterUsername:        pulumi.String(\"mysql_user1\"),\n\t\t\tMasterPassword:        mypassword.Result,\n\t\t\tEncryptStorage:        pulumi.Bool(true),\n\t\t\tBackupRetentionPeriod: pulumi.Int(7),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.random.password;\nimport com.pulumi.random.PasswordArgs;\nimport com.pulumi.duplocloud.RdsInstance;\nimport com.pulumi.duplocloud.RdsInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'dev' tenant is already created before creating the RDS instance.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        // Generate a random password for the RDS instance.\n        var mypassword = new Password(\"mypassword\", PasswordArgs.builder()\n            .length(16)\n            .special(false)\n            .build());\n\n        // Create an RDS instance.\n        var dev_db = new RdsInstance(\"dev-db\", RdsInstanceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"dev-db\")\n            .engine(0)\n            .engineVersion(\"8.0.32\")\n            .size(\"db.t3.medium\")\n            .masterUsername(\"mysql_user1\")\n            .masterPassword(mypassword.result())\n            .encryptStorage(true)\n            .backupRetentionPeriod(7)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Generate a random password for the RDS instance.\n  mypassword:\n    type: random:password\n    properties:\n      length: 16\n      special: false\n  # Create an RDS instance.\n  dev-db:\n    type: duplocloud:RdsInstance\n    properties:\n      tenantId: ${tenant.id}\n      name: dev-db\n      engine: 0 # MySQL DB engine\n      engineVersion: 8.0.32\n      size: db.t3.medium\n      masterUsername: mysql_user1\n      masterPassword: ${mypassword.result}\n      encryptStorage: true\n      backupRetentionPeriod: 7\nvariables:\n  # Ensure the 'dev' tenant is already created before creating the RDS instance.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Provision an RDS instance using the MySQL engine named dev-db with engine version 5.7, allocated storage 50 GB and enable IAM auth and logging for this DB.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\nimport * as random from \"@pulumi/random\";\n\n// Ensure the 'dev' tenant is already created before creating the RDS instance.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\n// Generate a random password for the RDS instance.\nconst mypassword = new random.index.Password(\"mypassword\", {\n    length: 16,\n    special: false,\n});\n// Create an RDS instance.\nconst dev_db = new duplocloud.RdsInstance(\"dev-db\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"dev-db\",\n    engine: 0,\n    engineVersion: \"5.7.44\",\n    size: \"db.t3.medium\",\n    masterUsername: \"mysql_user1\",\n    masterPassword: mypassword.result,\n    encryptStorage: true,\n    backupRetentionPeriod: 7,\n    allocatedStorage: 50,\n    enableIamAuth: true,\n    enableLogging: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\nimport pulumi_random as random\n\n# Ensure the 'dev' tenant is already created before creating the RDS instance.\ntenant = duplocloud.get_tenant(name=\"dev\")\n# Generate a random password for the RDS instance.\nmypassword = random.index.Password(\"mypassword\",\n    length=16,\n    special=False)\n# Create an RDS instance.\ndev_db = duplocloud.RdsInstance(\"dev-db\",\n    tenant_id=tenant.id,\n    name=\"dev-db\",\n    engine=0,\n    engine_version=\"5.7.44\",\n    size=\"db.t3.medium\",\n    master_username=\"mysql_user1\",\n    master_password=mypassword[\"result\"],\n    encrypt_storage=True,\n    backup_retention_period=7,\n    allocated_storage=50,\n    enable_iam_auth=True,\n    enable_logging=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\nusing Random = Pulumi.Random;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'dev' tenant is already created before creating the RDS instance.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    // Generate a random password for the RDS instance.\n    var mypassword = new Random.Index.Password(\"mypassword\", new()\n    {\n        Length = 16,\n        Special = false,\n    });\n\n    // Create an RDS instance.\n    var dev_db = new Duplocloud.RdsInstance(\"dev-db\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"dev-db\",\n        Engine = 0,\n        EngineVersion = \"5.7.44\",\n        Size = \"db.t3.medium\",\n        MasterUsername = \"mysql_user1\",\n        MasterPassword = mypassword.Result,\n        EncryptStorage = true,\n        BackupRetentionPeriod = 7,\n        AllocatedStorage = 50,\n        EnableIamAuth = true,\n        EnableLogging = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi-random/sdk/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'dev' tenant is already created before creating the RDS instance.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Generate a random password for the RDS instance.\n\t\tmypassword, err := random.NewPassword(ctx, \"mypassword\", \u0026random.PasswordArgs{\n\t\t\tLength:  16,\n\t\t\tSpecial: false,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create an RDS instance.\n\t\t_, err = duplocloud.NewRdsInstance(ctx, \"dev-db\", \u0026duplocloud.RdsInstanceArgs{\n\t\t\tTenantId:              pulumi.String(tenant.Id),\n\t\t\tName:                  pulumi.String(\"dev-db\"),\n\t\t\tEngine:                pulumi.Int(0),\n\t\t\tEngineVersion:         pulumi.String(\"5.7.44\"),\n\t\t\tSize:                  pulumi.String(\"db.t3.medium\"),\n\t\t\tMasterUsername:        pulumi.String(\"mysql_user1\"),\n\t\t\tMasterPassword:        mypassword.Result,\n\t\t\tEncryptStorage:        pulumi.Bool(true),\n\t\t\tBackupRetentionPeriod: pulumi.Int(7),\n\t\t\tAllocatedStorage:      pulumi.Int(50),\n\t\t\tEnableIamAuth:         pulumi.Bool(true),\n\t\t\tEnableLogging:         pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.random.password;\nimport com.pulumi.random.PasswordArgs;\nimport com.pulumi.duplocloud.RdsInstance;\nimport com.pulumi.duplocloud.RdsInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'dev' tenant is already created before creating the RDS instance.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        // Generate a random password for the RDS instance.\n        var mypassword = new Password(\"mypassword\", PasswordArgs.builder()\n            .length(16)\n            .special(false)\n            .build());\n\n        // Create an RDS instance.\n        var dev_db = new RdsInstance(\"dev-db\", RdsInstanceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"dev-db\")\n            .engine(0)\n            .engineVersion(\"5.7.44\")\n            .size(\"db.t3.medium\")\n            .masterUsername(\"mysql_user1\")\n            .masterPassword(mypassword.result())\n            .encryptStorage(true)\n            .backupRetentionPeriod(7)\n            .allocatedStorage(50)\n            .enableIamAuth(true)\n            .enableLogging(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Generate a random password for the RDS instance.\n  mypassword:\n    type: random:password\n    properties:\n      length: 16\n      special: false\n  # Create an RDS instance.\n  dev-db:\n    type: duplocloud:RdsInstance\n    properties:\n      tenantId: ${tenant.id}\n      name: dev-db\n      engine: 0 # MySQL DB engine\n      engineVersion: 5.7.44\n      size: db.t3.medium\n      masterUsername: mysql_user1\n      masterPassword: ${mypassword.result}\n      encryptStorage: true\n      backupRetentionPeriod: 7\n      allocatedStorage: 50\n      enableIamAuth: true\n      enableLogging: true\nvariables:\n  # Ensure the 'dev' tenant is already created before creating the RDS instance.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create an RDS instance using the Aurora MySQL engine named mysql-db with engine version 5.7, allocated storage 100 GB and storage type io1 with number of iops 6000. It should skip the final snapshot and store the credentials in secrets manager.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\nimport * as random from \"@pulumi/random\";\n\n// Ensure the 'dev' tenant is already created before creating the RDS instance.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\n// Generate a random password for the RDS instance.\nconst mypassword = new random.index.Password(\"mypassword\", {\n    length: 16,\n    special: false,\n});\n// Create an RDS instance.\nconst mysql_db = new duplocloud.RdsInstance(\"mysql-db\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"mysql-db\",\n    engine: 8,\n    engineVersion: \"5.7.mysql_aurora.2.11.6\",\n    size: \"db.t3.medium\",\n    masterUsername: \"mysql_user1\",\n    masterPassword: mypassword.result,\n    encryptStorage: true,\n    backupRetentionPeriod: 7,\n    allocatedStorage: 100,\n    storageType: \"io1\",\n    iops: 6000,\n    skipFinalSnapshot: true,\n    storeDetailsInSecretManager: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\nimport pulumi_random as random\n\n# Ensure the 'dev' tenant is already created before creating the RDS instance.\ntenant = duplocloud.get_tenant(name=\"dev\")\n# Generate a random password for the RDS instance.\nmypassword = random.index.Password(\"mypassword\",\n    length=16,\n    special=False)\n# Create an RDS instance.\nmysql_db = duplocloud.RdsInstance(\"mysql-db\",\n    tenant_id=tenant.id,\n    name=\"mysql-db\",\n    engine=8,\n    engine_version=\"5.7.mysql_aurora.2.11.6\",\n    size=\"db.t3.medium\",\n    master_username=\"mysql_user1\",\n    master_password=mypassword[\"result\"],\n    encrypt_storage=True,\n    backup_retention_period=7,\n    allocated_storage=100,\n    storage_type=\"io1\",\n    iops=6000,\n    skip_final_snapshot=True,\n    store_details_in_secret_manager=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\nusing Random = Pulumi.Random;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'dev' tenant is already created before creating the RDS instance.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    // Generate a random password for the RDS instance.\n    var mypassword = new Random.Index.Password(\"mypassword\", new()\n    {\n        Length = 16,\n        Special = false,\n    });\n\n    // Create an RDS instance.\n    var mysql_db = new Duplocloud.RdsInstance(\"mysql-db\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"mysql-db\",\n        Engine = 8,\n        EngineVersion = \"5.7.mysql_aurora.2.11.6\",\n        Size = \"db.t3.medium\",\n        MasterUsername = \"mysql_user1\",\n        MasterPassword = mypassword.Result,\n        EncryptStorage = true,\n        BackupRetentionPeriod = 7,\n        AllocatedStorage = 100,\n        StorageType = \"io1\",\n        Iops = 6000,\n        SkipFinalSnapshot = true,\n        StoreDetailsInSecretManager = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi-random/sdk/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'dev' tenant is already created before creating the RDS instance.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Generate a random password for the RDS instance.\n\t\tmypassword, err := random.NewPassword(ctx, \"mypassword\", \u0026random.PasswordArgs{\n\t\t\tLength:  16,\n\t\t\tSpecial: false,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create an RDS instance.\n\t\t_, err = duplocloud.NewRdsInstance(ctx, \"mysql-db\", \u0026duplocloud.RdsInstanceArgs{\n\t\t\tTenantId:                    pulumi.String(tenant.Id),\n\t\t\tName:                        pulumi.String(\"mysql-db\"),\n\t\t\tEngine:                      pulumi.Int(8),\n\t\t\tEngineVersion:               pulumi.String(\"5.7.mysql_aurora.2.11.6\"),\n\t\t\tSize:                        pulumi.String(\"db.t3.medium\"),\n\t\t\tMasterUsername:              pulumi.String(\"mysql_user1\"),\n\t\t\tMasterPassword:              mypassword.Result,\n\t\t\tEncryptStorage:              pulumi.Bool(true),\n\t\t\tBackupRetentionPeriod:       pulumi.Int(7),\n\t\t\tAllocatedStorage:            pulumi.Int(100),\n\t\t\tStorageType:                 pulumi.String(\"io1\"),\n\t\t\tIops:                        pulumi.Int(6000),\n\t\t\tSkipFinalSnapshot:           pulumi.Bool(true),\n\t\t\tStoreDetailsInSecretManager: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.random.password;\nimport com.pulumi.random.PasswordArgs;\nimport com.pulumi.duplocloud.RdsInstance;\nimport com.pulumi.duplocloud.RdsInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'dev' tenant is already created before creating the RDS instance.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        // Generate a random password for the RDS instance.\n        var mypassword = new Password(\"mypassword\", PasswordArgs.builder()\n            .length(16)\n            .special(false)\n            .build());\n\n        // Create an RDS instance.\n        var mysql_db = new RdsInstance(\"mysql-db\", RdsInstanceArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"mysql-db\")\n            .engine(8)\n            .engineVersion(\"5.7.mysql_aurora.2.11.6\")\n            .size(\"db.t3.medium\")\n            .masterUsername(\"mysql_user1\")\n            .masterPassword(mypassword.result())\n            .encryptStorage(true)\n            .backupRetentionPeriod(7)\n            .allocatedStorage(100)\n            .storageType(\"io1\")\n            .iops(6000)\n            .skipFinalSnapshot(true)\n            .storeDetailsInSecretManager(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Generate a random password for the RDS instance.\n  mypassword:\n    type: random:password\n    properties:\n      length: 16\n      special: false\n  # Create an RDS instance.\n  mysql-db:\n    type: duplocloud:RdsInstance\n    properties:\n      tenantId: ${tenant.id}\n      name: mysql-db\n      engine: 8 # Aurora MySQL DB engine\n      engineVersion: 5.7.mysql_aurora.2.11.6\n      size: db.t3.medium\n      masterUsername: mysql_user1\n      masterPassword: ${mypassword.result}\n      encryptStorage: true\n      backupRetentionPeriod: 7\n      allocatedStorage: 100\n      storageType: io1\n      iops: 6000\n      skipFinalSnapshot: true\n      storeDetailsInSecretManager: true\nvariables:\n  # Ensure the 'dev' tenant is already created before creating the RDS instance.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\n# Example for enabling performance insights in a RDS instance\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst mydb = new duplocloud.RdsInstance(\"mydb\", {\n    tenantId: tenant.id,\n    name: \"mydb1psql\",\n    engine: 1,\n    engineVersion: \"14.11\",\n    size: \"db.t3.micro\",\n    masterUsername: \"myuser\",\n    masterPassword: \"Qaazwedd#1\",\n    encryptStorage: true,\n    storeDetailsInSecretManager: true,\n    enhancedMonitoring: 0,\n    storageType: \"gp2\",\n    performanceInsights: {\n        enabled: true,\n        retentionPeriod: 7,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmydb = duplocloud.RdsInstance(\"mydb\",\n    tenant_id=tenant[\"id\"],\n    name=\"mydb1psql\",\n    engine=1,\n    engine_version=\"14.11\",\n    size=\"db.t3.micro\",\n    master_username=\"myuser\",\n    master_password=\"Qaazwedd#1\",\n    encrypt_storage=True,\n    store_details_in_secret_manager=True,\n    enhanced_monitoring=0,\n    storage_type=\"gp2\",\n    performance_insights={\n        \"enabled\": True,\n        \"retention_period\": 7,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mydb = new Duplocloud.RdsInstance(\"mydb\", new()\n    {\n        TenantId = tenant.Id,\n        Name = \"mydb1psql\",\n        Engine = 1,\n        EngineVersion = \"14.11\",\n        Size = \"db.t3.micro\",\n        MasterUsername = \"myuser\",\n        MasterPassword = \"Qaazwedd#1\",\n        EncryptStorage = true,\n        StoreDetailsInSecretManager = true,\n        EnhancedMonitoring = 0,\n        StorageType = \"gp2\",\n        PerformanceInsights = new Duplocloud.Inputs.RdsInstancePerformanceInsightsArgs\n        {\n            Enabled = true,\n            RetentionPeriod = 7,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewRdsInstance(ctx, \"mydb\", \u0026duplocloud.RdsInstanceArgs{\n\t\t\tTenantId:                    pulumi.Any(tenant.Id),\n\t\t\tName:                        pulumi.String(\"mydb1psql\"),\n\t\t\tEngine:                      pulumi.Int(1),\n\t\t\tEngineVersion:               pulumi.String(\"14.11\"),\n\t\t\tSize:                        pulumi.String(\"db.t3.micro\"),\n\t\t\tMasterUsername:              pulumi.String(\"myuser\"),\n\t\t\tMasterPassword:              pulumi.String(\"Qaazwedd#1\"),\n\t\t\tEncryptStorage:              pulumi.Bool(true),\n\t\t\tStoreDetailsInSecretManager: pulumi.Bool(true),\n\t\t\tEnhancedMonitoring:          pulumi.Int(0),\n\t\t\tStorageType:                 pulumi.String(\"gp2\"),\n\t\t\tPerformanceInsights: \u0026duplocloud.RdsInstancePerformanceInsightsArgs{\n\t\t\t\tEnabled:         pulumi.Bool(true),\n\t\t\t\tRetentionPeriod: pulumi.Int(7),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.RdsInstance;\nimport com.pulumi.duplocloud.RdsInstanceArgs;\nimport com.pulumi.duplocloud.inputs.RdsInstancePerformanceInsightsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mydb = new RdsInstance(\"mydb\", RdsInstanceArgs.builder()\n            .tenantId(tenant.id())\n            .name(\"mydb1psql\")\n            .engine(1)\n            .engineVersion(\"14.11\")\n            .size(\"db.t3.micro\")\n            .masterUsername(\"myuser\")\n            .masterPassword(\"Qaazwedd#1\")\n            .encryptStorage(true)\n            .storeDetailsInSecretManager(true)\n            .enhancedMonitoring(0)\n            .storageType(\"gp2\")\n            .performanceInsights(RdsInstancePerformanceInsightsArgs.builder()\n                .enabled(true)\n                .retentionPeriod(7)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mydb:\n    type: duplocloud:RdsInstance\n    properties:\n      tenantId: ${tenant.id}\n      name: mydb1psql\n      engine: 1 # PostgreSQL\n      engineVersion: '14.11'\n      size: db.t3.micro\n      masterUsername: myuser\n      masterPassword: Qaazwedd#1\n      encryptStorage: true\n      storeDetailsInSecretManager: true\n      enhancedMonitoring: 0\n      storageType: gp2\n      performanceInsights:\n        enabled: true\n        retentionPeriod: 7\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n# Example for enabling performance insights in a RDS cluster\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst mydb = new duplocloud.RdsInstance(\"mydb\", {\n    tenantId: tenant.id,\n    name: \"clust\",\n    engine: 8,\n    engineVersion: \"8.0.mysql_aurora.3.07.1\",\n    size: \"db.r5.large\",\n    masterUsername: \"myuser\",\n    masterPassword: \"Qaazwedd#1\",\n    encryptStorage: true,\n    storeDetailsInSecretManager: true,\n    enhancedMonitoring: 0,\n    performanceInsights: {\n        enabled: true,\n        retentionPeriod: 7,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmydb = duplocloud.RdsInstance(\"mydb\",\n    tenant_id=tenant[\"id\"],\n    name=\"clust\",\n    engine=8,\n    engine_version=\"8.0.mysql_aurora.3.07.1\",\n    size=\"db.r5.large\",\n    master_username=\"myuser\",\n    master_password=\"Qaazwedd#1\",\n    encrypt_storage=True,\n    store_details_in_secret_manager=True,\n    enhanced_monitoring=0,\n    performance_insights={\n        \"enabled\": True,\n        \"retention_period\": 7,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mydb = new Duplocloud.RdsInstance(\"mydb\", new()\n    {\n        TenantId = tenant.Id,\n        Name = \"clust\",\n        Engine = 8,\n        EngineVersion = \"8.0.mysql_aurora.3.07.1\",\n        Size = \"db.r5.large\",\n        MasterUsername = \"myuser\",\n        MasterPassword = \"Qaazwedd#1\",\n        EncryptStorage = true,\n        StoreDetailsInSecretManager = true,\n        EnhancedMonitoring = 0,\n        PerformanceInsights = new Duplocloud.Inputs.RdsInstancePerformanceInsightsArgs\n        {\n            Enabled = true,\n            RetentionPeriod = 7,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewRdsInstance(ctx, \"mydb\", \u0026duplocloud.RdsInstanceArgs{\n\t\t\tTenantId:                    pulumi.Any(tenant.Id),\n\t\t\tName:                        pulumi.String(\"clust\"),\n\t\t\tEngine:                      pulumi.Int(8),\n\t\t\tEngineVersion:               pulumi.String(\"8.0.mysql_aurora.3.07.1\"),\n\t\t\tSize:                        pulumi.String(\"db.r5.large\"),\n\t\t\tMasterUsername:              pulumi.String(\"myuser\"),\n\t\t\tMasterPassword:              pulumi.String(\"Qaazwedd#1\"),\n\t\t\tEncryptStorage:              pulumi.Bool(true),\n\t\t\tStoreDetailsInSecretManager: pulumi.Bool(true),\n\t\t\tEnhancedMonitoring:          pulumi.Int(0),\n\t\t\tPerformanceInsights: \u0026duplocloud.RdsInstancePerformanceInsightsArgs{\n\t\t\t\tEnabled:         pulumi.Bool(true),\n\t\t\t\tRetentionPeriod: pulumi.Int(7),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.RdsInstance;\nimport com.pulumi.duplocloud.RdsInstanceArgs;\nimport com.pulumi.duplocloud.inputs.RdsInstancePerformanceInsightsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mydb = new RdsInstance(\"mydb\", RdsInstanceArgs.builder()\n            .tenantId(tenant.id())\n            .name(\"clust\")\n            .engine(8)\n            .engineVersion(\"8.0.mysql_aurora.3.07.1\")\n            .size(\"db.r5.large\")\n            .masterUsername(\"myuser\")\n            .masterPassword(\"Qaazwedd#1\")\n            .encryptStorage(true)\n            .storeDetailsInSecretManager(true)\n            .enhancedMonitoring(0)\n            .performanceInsights(RdsInstancePerformanceInsightsArgs.builder()\n                .enabled(true)\n                .retentionPeriod(7)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mydb:\n    type: duplocloud:RdsInstance\n    properties:\n      tenantId: ${tenant.id}\n      name: clust\n      engine: 8 # PostgreSQL\n      engineVersion: 8.0.mysql_aurora.3.07.1\n      size: db.r5.large\n      masterUsername: myuser\n      masterPassword: Qaazwedd#1\n      encryptStorage: true\n      storeDetailsInSecretManager: true\n      enhancedMonitoring: 0\n      performanceInsights:\n        enabled: true\n        retentionPeriod: 7\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n# Example for enabling performance insights in a Document DB\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst mydb = new duplocloud.RdsInstance(\"mydb\", {\n    tenantId: tenant.id,\n    name: \"doc\",\n    engine: 13,\n    engineVersion: \"3.6.0\",\n    size: \"db.t3.medium\",\n    masterUsername: \"myuser\",\n    masterPassword: \"Qaazwedd#1\",\n    encryptStorage: true,\n    storeDetailsInSecretManager: true,\n    enhancedMonitoring: 0,\n    performanceInsights: {\n        enabled: true,\n        retentionPeriod: 7,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmydb = duplocloud.RdsInstance(\"mydb\",\n    tenant_id=tenant[\"id\"],\n    name=\"doc\",\n    engine=13,\n    engine_version=\"3.6.0\",\n    size=\"db.t3.medium\",\n    master_username=\"myuser\",\n    master_password=\"Qaazwedd#1\",\n    encrypt_storage=True,\n    store_details_in_secret_manager=True,\n    enhanced_monitoring=0,\n    performance_insights={\n        \"enabled\": True,\n        \"retention_period\": 7,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mydb = new Duplocloud.RdsInstance(\"mydb\", new()\n    {\n        TenantId = tenant.Id,\n        Name = \"doc\",\n        Engine = 13,\n        EngineVersion = \"3.6.0\",\n        Size = \"db.t3.medium\",\n        MasterUsername = \"myuser\",\n        MasterPassword = \"Qaazwedd#1\",\n        EncryptStorage = true,\n        StoreDetailsInSecretManager = true,\n        EnhancedMonitoring = 0,\n        PerformanceInsights = new Duplocloud.Inputs.RdsInstancePerformanceInsightsArgs\n        {\n            Enabled = true,\n            RetentionPeriod = 7,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewRdsInstance(ctx, \"mydb\", \u0026duplocloud.RdsInstanceArgs{\n\t\t\tTenantId:                    pulumi.Any(tenant.Id),\n\t\t\tName:                        pulumi.String(\"doc\"),\n\t\t\tEngine:                      pulumi.Int(13),\n\t\t\tEngineVersion:               pulumi.String(\"3.6.0\"),\n\t\t\tSize:                        pulumi.String(\"db.t3.medium\"),\n\t\t\tMasterUsername:              pulumi.String(\"myuser\"),\n\t\t\tMasterPassword:              pulumi.String(\"Qaazwedd#1\"),\n\t\t\tEncryptStorage:              pulumi.Bool(true),\n\t\t\tStoreDetailsInSecretManager: pulumi.Bool(true),\n\t\t\tEnhancedMonitoring:          pulumi.Int(0),\n\t\t\tPerformanceInsights: \u0026duplocloud.RdsInstancePerformanceInsightsArgs{\n\t\t\t\tEnabled:         pulumi.Bool(true),\n\t\t\t\tRetentionPeriod: pulumi.Int(7),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.RdsInstance;\nimport com.pulumi.duplocloud.RdsInstanceArgs;\nimport com.pulumi.duplocloud.inputs.RdsInstancePerformanceInsightsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mydb = new RdsInstance(\"mydb\", RdsInstanceArgs.builder()\n            .tenantId(tenant.id())\n            .name(\"doc\")\n            .engine(13)\n            .engineVersion(\"3.6.0\")\n            .size(\"db.t3.medium\")\n            .masterUsername(\"myuser\")\n            .masterPassword(\"Qaazwedd#1\")\n            .encryptStorage(true)\n            .storeDetailsInSecretManager(true)\n            .enhancedMonitoring(0)\n            .performanceInsights(RdsInstancePerformanceInsightsArgs.builder()\n                .enabled(true)\n                .retentionPeriod(7)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mydb:\n    type: duplocloud:RdsInstance\n    properties:\n      tenantId: ${tenant.id}\n      name: doc\n      engine: 13\n      engineVersion: 3.6.0\n      size: db.t3.medium\n      masterUsername: myuser\n      masterPassword: Qaazwedd#1\n      encryptStorage: true\n      storeDetailsInSecretManager: true\n      enhancedMonitoring: 0\n      performanceInsights:\n        enabled: true\n        retentionPeriod: 7\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Example for creating db using snapshot\nconst mydb = new duplocloud.RdsInstance(\"mydb\", {\n    tenantId: tenant.id,\n    name: \"mydbpsql\",\n    engine: 0,\n    engineVersion: \"5.7.44\",\n    size: \"db.t3.medium\",\n    snapshotId: \"rds:duplotest-snapdb-2024-12-17-07-00\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Example for creating db using snapshot\nmydb = duplocloud.RdsInstance(\"mydb\",\n    tenant_id=tenant[\"id\"],\n    name=\"mydbpsql\",\n    engine=0,\n    engine_version=\"5.7.44\",\n    size=\"db.t3.medium\",\n    snapshot_id=\"rds:duplotest-snapdb-2024-12-17-07-00\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Example for creating db using snapshot\n    var mydb = new Duplocloud.RdsInstance(\"mydb\", new()\n    {\n        TenantId = tenant.Id,\n        Name = \"mydbpsql\",\n        Engine = 0,\n        EngineVersion = \"5.7.44\",\n        Size = \"db.t3.medium\",\n        SnapshotId = \"rds:duplotest-snapdb-2024-12-17-07-00\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Example for creating db using snapshot\n\t\t_, err := duplocloud.NewRdsInstance(ctx, \"mydb\", \u0026duplocloud.RdsInstanceArgs{\n\t\t\tTenantId:      pulumi.Any(tenant.Id),\n\t\t\tName:          pulumi.String(\"mydbpsql\"),\n\t\t\tEngine:        pulumi.Int(0),\n\t\t\tEngineVersion: pulumi.String(\"5.7.44\"),\n\t\t\tSize:          pulumi.String(\"db.t3.medium\"),\n\t\t\tSnapshotId:    pulumi.String(\"rds:duplotest-snapdb-2024-12-17-07-00\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.RdsInstance;\nimport com.pulumi.duplocloud.RdsInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Example for creating db using snapshot\n        var mydb = new RdsInstance(\"mydb\", RdsInstanceArgs.builder()\n            .tenantId(tenant.id())\n            .name(\"mydbpsql\")\n            .engine(0)\n            .engineVersion(\"5.7.44\")\n            .size(\"db.t3.medium\")\n            .snapshotId(\"rds:duplotest-snapdb-2024-12-17-07-00\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Example for creating db using snapshot\n  mydb:\n    type: duplocloud:RdsInstance\n    properties:\n      tenantId: ${tenant.id}\n      name: mydbpsql\n      engine: 0 # mysql\n      engineVersion: 5.7.44\n      size: db.t3.medium\n      snapshotId: rds:duplotest-snapdb-2024-12-17-07-00\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing RDS instance\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORTNAME* is the short name of the database (without the duplo prefix)\n\n#\n\n```sh\n$ pulumi import duplocloud:index/rdsInstance:RdsInstance mydb v2/subscriptions/*TENANT_ID*/RDSDBInstance/*SHORTNAME*\n```\n\nExample to showcase use of parameter group in writer and read replica for aurora cluster instance\n\nresource \"random_password\" \"mypassword\" {\n\n  length  = 16\n\n  special = false\n\n}\n\nresource \"duplocloud_rds_instance\" \"app\" {\n\n  tenant_id      = data.duplocloud_tenant.tenant.id\n\n  name           = \"writer1-sqlnew\"\n\n  engine         = 8 \n\n  engine_version = \"5.7.mysql_aurora.2.11.5\"\n\n  size           = \"db.r5.large\"\n\n  master_username              = \"myuser\"\n\n  master_password              = random_password.mypassword.result\n\n  encrypt_storage         = true\n\n  backup_retention_period = 10\n\n  db_name         =  \"auroradb\"\n\n  skip_final_snapshot = true\n\n  store_details_in_secret_manager = false\n\n  enhanced_monitoring = 0\n\n  availability_zone = \"us-west-2b\"\n\n  storage_type                    = \"aurora\"\n\n  cluster_parameter_group_name = \"c-aurora-mysql\"\n\n  parameter_group_name = \"aurora-mysql-dbparam\"\n\n}\n\nresource \"duplocloud_rds_read_replica\" \"replica1\" {\n\n  tenant_id          = duplocloud_rds_instance.app.tenant_id\n\n  name               = \"aurora-replica-new\"\n\n  size               = \"db.r5.large\"\n\n  cluster_identifier = duplocloud_rds_instance.app.cluster_identifier\n\n  availability_zone = \"us-west-2a\"\n\n  parameter_group_name = \"aurora-mysql-dbparam\"\n\n  engine_type=duplocloud_rds_instance.app.engine\n\n}\n\nExample to showcase use of parameter group in writer and read replica for standalone instance\n\nresource \"duplocloud_rds_instance\" \"mydb\" {\n\n  tenant_id      = data.duplocloud_tenant.tenant.id\n\n  name           = \"tf-postgresql1\"\n\n  engine         = 1// PostgreSQL\n\n  engine_version = \"13.11\"\n\n  size           = \"db.t3.medium\"\n\n  master_username = \"myuser\"\n\n  master_password = \"Qaazwedd#1\"\n\n  parameter_group_name = \"psql13dbparam\"\n\n  encrypt_storage                 = false\n\n  store_details_in_secret_manager = false\n\n  enhanced_monitoring             = 0\n\n  storage_type                    = \"gp2\"\n\n}\n\nresource \"duplocloud_rds_read_replica\" \"replica\" {\n\n  tenant_id          = duplocloud_rds_instance.mydb.tenant_id\n\n  name               = \"postgresql-rep1\"\n\n  size               = \"db.t3.medium\"\n\n  cluster_identifier = duplocloud_rds_instance.mydb.cluster_identifier\n\n  #availability_zone = \"us-east-1b\"\n\n  performance_insights {\n\n    enabled          = true\n\n    retention_period = 31\n\n  }\n\n  engine_type=duplocloud_rds_instance.mydb.engine\n\n  parameter_group_name=duplocloud_rds_instance.mydb.parameter_group_name\n\n}\n\n",
            "properties": {
                "allocatedStorage": {
                    "type": "integer",
                    "description": "(Required unless a `snapshot_id` is provided) The allocated storage in gigabytes.\n"
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN of the RDS instance.\n"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "Specify a valid Availability Zone for the RDS primary instance (when Multi-AZ is disabled) or for the Aurora writer\ninstance. e.g. us-west-2a\n"
                },
                "backupRetentionPeriod": {
                    "type": "integer",
                    "description": "Specifies backup retention period between 1 and 35 day(s). Default backup retention period is 1 day.\n"
                },
                "clusterIdentifier": {
                    "type": "string",
                    "description": "The RDS Cluster Identifier\n"
                },
                "clusterParameterGroupName": {
                    "type": "string",
                    "description": "Parameter group associated with this instance's DB Cluster.\n"
                },
                "dbName": {
                    "type": "string",
                    "description": "The name of the database to create when the DB instance is created. This is not applicable for update.\n"
                },
                "dbSubnetGroupName": {
                    "type": "string",
                    "description": "Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "If the DB instance should have deletion protection enabled.The database can't be deleted when this value is set to\n`true`. This setting is not applicable for document db cluster instance.\n"
                },
                "enableIamAuth": {
                    "type": "boolean",
                    "description": "Whether or not to enable the RDS IAM authentication.\n"
                },
                "enableLogging": {
                    "type": "boolean",
                    "description": "Whether or not to enable the RDS instance logging. This setting is not applicable for document db cluster instance.\n"
                },
                "encryptStorage": {
                    "type": "boolean",
                    "description": "Whether or not to encrypt the RDS instance storage.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the RDS instance.\n"
                },
                "engine": {
                    "type": "integer",
                    "description": "The numerical index of database engine to use the for the RDS instance. Should be one of: - `0` : MySQL - `1` :\nPostgreSQL - `2` : MsftSQL-Express - `3` : MsftSQL-Standard - `8` : Aurora-MySQL - `9` : Aurora-PostgreSQL - `10` :\nMsftSQL-Web - `13` : DocumentDB - `14` : MariaDB - `16` : Aurora\n"
                },
                "engineVersion": {
                    "type": "string",
                    "description": "The database engine version to use the for the RDS instance. If you don't know the available engine versions for your\nRDS instance, you can use the [AWS\nCLI](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-engine-versions.html) to retrieve a list.\n"
                },
                "enhancedMonitoring": {
                    "type": "integer",
                    "description": "Interval to capture metrics in real time for the operating system (OS) that your Amazon RDS DB instance runs on.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The DNS hostname of the RDS instance.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The full name of the RDS instance.\n"
                },
                "instanceStatus": {
                    "type": "string",
                    "description": "The current status of the RDS instance.\n"
                },
                "iops": {
                    "type": "integer",
                    "description": "The IOPS (Input/Output Operations Per Second) value. Should be specified only if `storage_type` is either io1 or gp3.\n"
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "The globally unique identifier for the key.\n"
                },
                "masterPassword": {
                    "type": "string",
                    "description": "The master password of the RDS instance.\n",
                    "secret": true
                },
                "masterUsername": {
                    "type": "string",
                    "description": "The master username of the RDS instance.\n"
                },
                "multiAz": {
                    "type": "boolean",
                    "description": "Specifies if the RDS instance is multi-AZ.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the RDS instance. Duplo will add a prefix to the name. You can retrieve the full name from the\n`identifier` attribute.\n"
                },
                "parameterGroupName": {
                    "type": "string",
                    "description": "A RDS parameter group name to apply to the RDS instance.\n"
                },
                "performanceInsights": {
                    "$ref": "#/types/duplocloud:index/RdsInstancePerformanceInsights:RdsInstancePerformanceInsights",
                    "description": "Amazon RDS Performance Insights is a database performance tuning and monitoring feature that helps you quickly assess\nthe load on your database, and determine when and where to take action. Perfomance Insights get apply when enable is set\nto true.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The listening port of the RDS instance.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The instance type of the RDS instance. See AWS documentation for the [available instance\ntypes](https://aws.amazon.com/rds/instance-types/).\n"
                },
                "skipFinalSnapshot": {
                    "type": "boolean",
                    "description": "If the final snapshot should be taken. When set to true, the final snapshot will not be taken when the resource is\ndeleted.\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "A database snapshot to initialize the RDS instance from, at launch.\n"
                },
                "storageType": {
                    "type": "string",
                    "description": "Storage type to be used for RDS instance storage. |Storage Type | Performance | Throughput | Descritpion |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n| | gp2 | 3 IOPS/GB, up to 16K IOPS | Up to 250 MB/s | General-purpose databases, small to medium workloads. 'gp2'\nprovides SSD-based storage with burstable IOPS | | gp3 | 3K to 16K IOPS | Up to 1,000 MB/s | Cost-effective,\ncustomizable performance for a wide range of workloads. gp3 offers a more advanced and cost-effective version of gp2.\nYou can provision IOPS and throughput independently of storage size. | | io1 | Up to 256K IOPS | Up to 1,000 MB/s |\nMission-critical applications with high IOPS requirements. io1 provides provisioned IOPS, meaning you can define and\nguarantee IOPS performance levels independently of storage capacity. | | standard | Variable, low IOPS | Low and\nunpredictable | Low-cost, infrequent access, small databases, or test environments. Magnetic storage is the oldest and\nleast performant storage option. It is mainly used for low-cost applications with low performance demands. | | aurora |\nAutomatic scaling, up to 200K IOPS | Varies | High-performance, fault-tolerant, distributed storage for Amazon Aurora\ndatabases. Aurora uses a unique distributed, fault-tolerant storage system that automatically replicates data across\nmultiple Availability Zones. | | aurora-iopt1 | Provisioned IOPS, similar to io1 | Varies | Aurora databases needing\nguaranteed, high-performance IOPS. Aurora I/O-Optimized storage offers provisioned IOPS for Aurora clusters that require\nconsistently high performance for critical workloads. |\n"
                },
                "storeDetailsInSecretManager": {
                    "type": "boolean",
                    "description": "Whether or not to store RDS details in the AWS secrets manager.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the RDS instance will be created in.\n"
                },
                "v2ScalingConfiguration": {
                    "$ref": "#/types/duplocloud:index/RdsInstanceV2ScalingConfiguration:RdsInstanceV2ScalingConfiguration",
                    "description": "Serverless v2_scaling_configuration min and max scalling capacity.\n"
                }
            },
            "required": [
                "allocatedStorage",
                "arn",
                "availabilityZone",
                "clusterIdentifier",
                "clusterParameterGroupName",
                "dbName",
                "dbSubnetGroupName",
                "enableIamAuth",
                "enableLogging",
                "endpoint",
                "engine",
                "engineVersion",
                "host",
                "identifier",
                "instanceStatus",
                "iops",
                "kmsKeyId",
                "masterUsername",
                "multiAz",
                "name",
                "parameterGroupName",
                "port",
                "size",
                "storageType",
                "tenantId"
            ],
            "inputProperties": {
                "allocatedStorage": {
                    "type": "integer",
                    "description": "(Required unless a `snapshot_id` is provided) The allocated storage in gigabytes.\n"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "Specify a valid Availability Zone for the RDS primary instance (when Multi-AZ is disabled) or for the Aurora writer\ninstance. e.g. us-west-2a\n",
                    "willReplaceOnChanges": true
                },
                "backupRetentionPeriod": {
                    "type": "integer",
                    "description": "Specifies backup retention period between 1 and 35 day(s). Default backup retention period is 1 day.\n"
                },
                "clusterParameterGroupName": {
                    "type": "string",
                    "description": "Parameter group associated with this instance's DB Cluster.\n"
                },
                "dbName": {
                    "type": "string",
                    "description": "The name of the database to create when the DB instance is created. This is not applicable for update.\n"
                },
                "dbSubnetGroupName": {
                    "type": "string",
                    "description": "Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "If the DB instance should have deletion protection enabled.The database can't be deleted when this value is set to\n`true`. This setting is not applicable for document db cluster instance.\n"
                },
                "enableIamAuth": {
                    "type": "boolean",
                    "description": "Whether or not to enable the RDS IAM authentication.\n"
                },
                "enableLogging": {
                    "type": "boolean",
                    "description": "Whether or not to enable the RDS instance logging. This setting is not applicable for document db cluster instance.\n"
                },
                "encryptStorage": {
                    "type": "boolean",
                    "description": "Whether or not to encrypt the RDS instance storage.\n",
                    "willReplaceOnChanges": true
                },
                "engine": {
                    "type": "integer",
                    "description": "The numerical index of database engine to use the for the RDS instance. Should be one of: - `0` : MySQL - `1` :\nPostgreSQL - `2` : MsftSQL-Express - `3` : MsftSQL-Standard - `8` : Aurora-MySQL - `9` : Aurora-PostgreSQL - `10` :\nMsftSQL-Web - `13` : DocumentDB - `14` : MariaDB - `16` : Aurora\n",
                    "willReplaceOnChanges": true
                },
                "engineVersion": {
                    "type": "string",
                    "description": "The database engine version to use the for the RDS instance. If you don't know the available engine versions for your\nRDS instance, you can use the [AWS\nCLI](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-engine-versions.html) to retrieve a list.\n",
                    "willReplaceOnChanges": true
                },
                "enhancedMonitoring": {
                    "type": "integer",
                    "description": "Interval to capture metrics in real time for the operating system (OS) that your Amazon RDS DB instance runs on.\n"
                },
                "iops": {
                    "type": "integer",
                    "description": "The IOPS (Input/Output Operations Per Second) value. Should be specified only if `storage_type` is either io1 or gp3.\n"
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "The globally unique identifier for the key.\n"
                },
                "masterPassword": {
                    "type": "string",
                    "description": "The master password of the RDS instance.\n",
                    "secret": true
                },
                "masterUsername": {
                    "type": "string",
                    "description": "The master username of the RDS instance.\n",
                    "willReplaceOnChanges": true
                },
                "multiAz": {
                    "type": "boolean",
                    "description": "Specifies if the RDS instance is multi-AZ.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the RDS instance. Duplo will add a prefix to the name. You can retrieve the full name from the\n`identifier` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "parameterGroupName": {
                    "type": "string",
                    "description": "A RDS parameter group name to apply to the RDS instance.\n"
                },
                "performanceInsights": {
                    "$ref": "#/types/duplocloud:index/RdsInstancePerformanceInsights:RdsInstancePerformanceInsights",
                    "description": "Amazon RDS Performance Insights is a database performance tuning and monitoring feature that helps you quickly assess\nthe load on your database, and determine when and where to take action. Perfomance Insights get apply when enable is set\nto true.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The instance type of the RDS instance. See AWS documentation for the [available instance\ntypes](https://aws.amazon.com/rds/instance-types/).\n"
                },
                "skipFinalSnapshot": {
                    "type": "boolean",
                    "description": "If the final snapshot should be taken. When set to true, the final snapshot will not be taken when the resource is\ndeleted.\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "A database snapshot to initialize the RDS instance from, at launch.\n",
                    "willReplaceOnChanges": true
                },
                "storageType": {
                    "type": "string",
                    "description": "Storage type to be used for RDS instance storage. |Storage Type | Performance | Throughput | Descritpion |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n| | gp2 | 3 IOPS/GB, up to 16K IOPS | Up to 250 MB/s | General-purpose databases, small to medium workloads. 'gp2'\nprovides SSD-based storage with burstable IOPS | | gp3 | 3K to 16K IOPS | Up to 1,000 MB/s | Cost-effective,\ncustomizable performance for a wide range of workloads. gp3 offers a more advanced and cost-effective version of gp2.\nYou can provision IOPS and throughput independently of storage size. | | io1 | Up to 256K IOPS | Up to 1,000 MB/s |\nMission-critical applications with high IOPS requirements. io1 provides provisioned IOPS, meaning you can define and\nguarantee IOPS performance levels independently of storage capacity. | | standard | Variable, low IOPS | Low and\nunpredictable | Low-cost, infrequent access, small databases, or test environments. Magnetic storage is the oldest and\nleast performant storage option. It is mainly used for low-cost applications with low performance demands. | | aurora |\nAutomatic scaling, up to 200K IOPS | Varies | High-performance, fault-tolerant, distributed storage for Amazon Aurora\ndatabases. Aurora uses a unique distributed, fault-tolerant storage system that automatically replicates data across\nmultiple Availability Zones. | | aurora-iopt1 | Provisioned IOPS, similar to io1 | Varies | Aurora databases needing\nguaranteed, high-performance IOPS. Aurora I/O-Optimized storage offers provisioned IOPS for Aurora clusters that require\nconsistently high performance for critical workloads. |\n"
                },
                "storeDetailsInSecretManager": {
                    "type": "boolean",
                    "description": "Whether or not to store RDS details in the AWS secrets manager.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the RDS instance will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "v2ScalingConfiguration": {
                    "$ref": "#/types/duplocloud:index/RdsInstanceV2ScalingConfiguration:RdsInstanceV2ScalingConfiguration",
                    "description": "Serverless v2_scaling_configuration min and max scalling capacity.\n"
                }
            },
            "requiredInputs": [
                "engine",
                "size",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RdsInstance resources.\n",
                "properties": {
                    "allocatedStorage": {
                        "type": "integer",
                        "description": "(Required unless a `snapshot_id` is provided) The allocated storage in gigabytes.\n"
                    },
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the RDS instance.\n"
                    },
                    "availabilityZone": {
                        "type": "string",
                        "description": "Specify a valid Availability Zone for the RDS primary instance (when Multi-AZ is disabled) or for the Aurora writer\ninstance. e.g. us-west-2a\n",
                        "willReplaceOnChanges": true
                    },
                    "backupRetentionPeriod": {
                        "type": "integer",
                        "description": "Specifies backup retention period between 1 and 35 day(s). Default backup retention period is 1 day.\n"
                    },
                    "clusterIdentifier": {
                        "type": "string",
                        "description": "The RDS Cluster Identifier\n"
                    },
                    "clusterParameterGroupName": {
                        "type": "string",
                        "description": "Parameter group associated with this instance's DB Cluster.\n"
                    },
                    "dbName": {
                        "type": "string",
                        "description": "The name of the database to create when the DB instance is created. This is not applicable for update.\n"
                    },
                    "dbSubnetGroupName": {
                        "type": "string",
                        "description": "Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "If the DB instance should have deletion protection enabled.The database can't be deleted when this value is set to\n`true`. This setting is not applicable for document db cluster instance.\n"
                    },
                    "enableIamAuth": {
                        "type": "boolean",
                        "description": "Whether or not to enable the RDS IAM authentication.\n"
                    },
                    "enableLogging": {
                        "type": "boolean",
                        "description": "Whether or not to enable the RDS instance logging. This setting is not applicable for document db cluster instance.\n"
                    },
                    "encryptStorage": {
                        "type": "boolean",
                        "description": "Whether or not to encrypt the RDS instance storage.\n",
                        "willReplaceOnChanges": true
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the RDS instance.\n"
                    },
                    "engine": {
                        "type": "integer",
                        "description": "The numerical index of database engine to use the for the RDS instance. Should be one of: - `0` : MySQL - `1` :\nPostgreSQL - `2` : MsftSQL-Express - `3` : MsftSQL-Standard - `8` : Aurora-MySQL - `9` : Aurora-PostgreSQL - `10` :\nMsftSQL-Web - `13` : DocumentDB - `14` : MariaDB - `16` : Aurora\n",
                        "willReplaceOnChanges": true
                    },
                    "engineVersion": {
                        "type": "string",
                        "description": "The database engine version to use the for the RDS instance. If you don't know the available engine versions for your\nRDS instance, you can use the [AWS\nCLI](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-engine-versions.html) to retrieve a list.\n",
                        "willReplaceOnChanges": true
                    },
                    "enhancedMonitoring": {
                        "type": "integer",
                        "description": "Interval to capture metrics in real time for the operating system (OS) that your Amazon RDS DB instance runs on.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "The DNS hostname of the RDS instance.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "The full name of the RDS instance.\n"
                    },
                    "instanceStatus": {
                        "type": "string",
                        "description": "The current status of the RDS instance.\n"
                    },
                    "iops": {
                        "type": "integer",
                        "description": "The IOPS (Input/Output Operations Per Second) value. Should be specified only if `storage_type` is either io1 or gp3.\n"
                    },
                    "kmsKeyId": {
                        "type": "string",
                        "description": "The globally unique identifier for the key.\n"
                    },
                    "masterPassword": {
                        "type": "string",
                        "description": "The master password of the RDS instance.\n",
                        "secret": true
                    },
                    "masterUsername": {
                        "type": "string",
                        "description": "The master username of the RDS instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "multiAz": {
                        "type": "boolean",
                        "description": "Specifies if the RDS instance is multi-AZ.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the RDS instance. Duplo will add a prefix to the name. You can retrieve the full name from the\n`identifier` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameterGroupName": {
                        "type": "string",
                        "description": "A RDS parameter group name to apply to the RDS instance.\n"
                    },
                    "performanceInsights": {
                        "$ref": "#/types/duplocloud:index/RdsInstancePerformanceInsights:RdsInstancePerformanceInsights",
                        "description": "Amazon RDS Performance Insights is a database performance tuning and monitoring feature that helps you quickly assess\nthe load on your database, and determine when and where to take action. Perfomance Insights get apply when enable is set\nto true.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The listening port of the RDS instance.\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "The instance type of the RDS instance. See AWS documentation for the [available instance\ntypes](https://aws.amazon.com/rds/instance-types/).\n"
                    },
                    "skipFinalSnapshot": {
                        "type": "boolean",
                        "description": "If the final snapshot should be taken. When set to true, the final snapshot will not be taken when the resource is\ndeleted.\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "A database snapshot to initialize the RDS instance from, at launch.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageType": {
                        "type": "string",
                        "description": "Storage type to be used for RDS instance storage. |Storage Type | Performance | Throughput | Descritpion |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n| | gp2 | 3 IOPS/GB, up to 16K IOPS | Up to 250 MB/s | General-purpose databases, small to medium workloads. 'gp2'\nprovides SSD-based storage with burstable IOPS | | gp3 | 3K to 16K IOPS | Up to 1,000 MB/s | Cost-effective,\ncustomizable performance for a wide range of workloads. gp3 offers a more advanced and cost-effective version of gp2.\nYou can provision IOPS and throughput independently of storage size. | | io1 | Up to 256K IOPS | Up to 1,000 MB/s |\nMission-critical applications with high IOPS requirements. io1 provides provisioned IOPS, meaning you can define and\nguarantee IOPS performance levels independently of storage capacity. | | standard | Variable, low IOPS | Low and\nunpredictable | Low-cost, infrequent access, small databases, or test environments. Magnetic storage is the oldest and\nleast performant storage option. It is mainly used for low-cost applications with low performance demands. | | aurora |\nAutomatic scaling, up to 200K IOPS | Varies | High-performance, fault-tolerant, distributed storage for Amazon Aurora\ndatabases. Aurora uses a unique distributed, fault-tolerant storage system that automatically replicates data across\nmultiple Availability Zones. | | aurora-iopt1 | Provisioned IOPS, similar to io1 | Varies | Aurora databases needing\nguaranteed, high-performance IOPS. Aurora I/O-Optimized storage offers provisioned IOPS for Aurora clusters that require\nconsistently high performance for critical workloads. |\n"
                    },
                    "storeDetailsInSecretManager": {
                        "type": "boolean",
                        "description": "Whether or not to store RDS details in the AWS secrets manager.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the RDS instance will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "v2ScalingConfiguration": {
                        "$ref": "#/types/duplocloud:index/RdsInstanceV2ScalingConfiguration:RdsInstanceV2ScalingConfiguration",
                        "description": "Serverless v2_scaling_configuration min and max scalling capacity.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/rdsReadReplica:RdsReadReplica": {
            "description": "`duplocloud.RdsReadReplica` manages an AWS RDS read replica in Duplo.\n\n## Import\n\nExample: Importing an existing RDS read replica\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORTNAME* is the short name of the database read replica (without the duplo prefix)\n\n#\n\n```sh\n$ pulumi import duplocloud:index/rdsReadReplica:RdsReadReplica read_replica v2/subscriptions/*TENANT_ID*/RDSDBInstance/*SHORTNAME*\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN of the RDS read replica.\n"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "The AZ for the RDS instance.\n"
                },
                "clusterIdentifier": {
                    "type": "string",
                    "description": "The full name of the RDS Cluster.\n"
                },
                "clusterParameterGroupName": {
                    "type": "string",
                    "description": "Parameter group associated with this instance's DB Cluster.\n"
                },
                "enableLogging": {
                    "type": "boolean",
                    "description": "Whether or not to enable the RDS instance logging. This setting is not applicable for document db cluster instance.\n"
                },
                "encryptStorage": {
                    "type": "boolean",
                    "description": "Whether or not to encrypt the RDS instance storage.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the RDS read replica.\n"
                },
                "engine": {
                    "type": "integer",
                    "description": "The numerical index of database engine to be used the for the RDS read replica.\n"
                },
                "engineType": {
                    "type": "integer",
                    "description": "Engine type required to validate applicable parameter group setting for different instance. Should be referred from writer\n"
                },
                "engineVersion": {
                    "type": "string",
                    "description": "The database engine version to be used the for the RDS read replica.\n"
                },
                "enhancedMonitoring": {
                    "type": "integer",
                    "description": "Interval to capture metrics in real time for the operating system (OS) that your Amazon RDS DB instance runs on.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The DNS hostname of the RDS read replica.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The full name of the RDS read replica.\n"
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "The globally unique identifier for the key.\n"
                },
                "multiAz": {
                    "type": "boolean",
                    "description": "Specifies if the RDS instance is multi-AZ.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the RDS read replica.  Duplo will add a prefix to the name.  You can retrieve the full name from the `identifier` attribute.\n"
                },
                "parameterGroupName": {
                    "type": "string",
                    "description": "A RDS parameter group name to apply to the RDS instance.\n"
                },
                "performanceInsights": {
                    "$ref": "#/types/duplocloud:index/RdsReadReplicaPerformanceInsights:RdsReadReplicaPerformanceInsights",
                    "description": "Amazon RDS Performance Insights is a database performance tuning and monitoring feature that helps you quickly assess the load on your database, and determine when and where to take action. Perfomance Insights get apply when enable is set to true.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The listening port of the RDS read replica.\n"
                },
                "replicaStatus": {
                    "type": "string",
                    "description": "The current status of the RDS read replica.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The type of the RDS read replica.\nSee AWS documentation for the [available instance types](https://aws.amazon.com/rds/instance-types/).\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the RDS read replica will be created in.\n"
                }
            },
            "required": [
                "arn",
                "availabilityZone",
                "clusterIdentifier",
                "clusterParameterGroupName",
                "enableLogging",
                "encryptStorage",
                "endpoint",
                "engine",
                "engineType",
                "engineVersion",
                "enhancedMonitoring",
                "host",
                "identifier",
                "kmsKeyId",
                "multiAz",
                "name",
                "performanceInsights",
                "port",
                "replicaStatus",
                "size",
                "tenantId"
            ],
            "inputProperties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "The AZ for the RDS instance.\n"
                },
                "clusterIdentifier": {
                    "type": "string",
                    "description": "The full name of the RDS Cluster.\n"
                },
                "engineType": {
                    "type": "integer",
                    "description": "Engine type required to validate applicable parameter group setting for different instance. Should be referred from writer\n"
                },
                "enhancedMonitoring": {
                    "type": "integer",
                    "description": "Interval to capture metrics in real time for the operating system (OS) that your Amazon RDS DB instance runs on.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the RDS read replica.  Duplo will add a prefix to the name.  You can retrieve the full name from the `identifier` attribute.\n",
                    "willReplaceOnChanges": true
                },
                "parameterGroupName": {
                    "type": "string",
                    "description": "A RDS parameter group name to apply to the RDS instance.\n"
                },
                "performanceInsights": {
                    "$ref": "#/types/duplocloud:index/RdsReadReplicaPerformanceInsights:RdsReadReplicaPerformanceInsights",
                    "description": "Amazon RDS Performance Insights is a database performance tuning and monitoring feature that helps you quickly assess the load on your database, and determine when and where to take action. Perfomance Insights get apply when enable is set to true.\n"
                },
                "size": {
                    "type": "string",
                    "description": "The type of the RDS read replica.\nSee AWS documentation for the [available instance types](https://aws.amazon.com/rds/instance-types/).\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the RDS read replica will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterIdentifier",
                "size",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RdsReadReplica resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the RDS read replica.\n"
                    },
                    "availabilityZone": {
                        "type": "string",
                        "description": "The AZ for the RDS instance.\n"
                    },
                    "clusterIdentifier": {
                        "type": "string",
                        "description": "The full name of the RDS Cluster.\n"
                    },
                    "clusterParameterGroupName": {
                        "type": "string",
                        "description": "Parameter group associated with this instance's DB Cluster.\n"
                    },
                    "enableLogging": {
                        "type": "boolean",
                        "description": "Whether or not to enable the RDS instance logging. This setting is not applicable for document db cluster instance.\n"
                    },
                    "encryptStorage": {
                        "type": "boolean",
                        "description": "Whether or not to encrypt the RDS instance storage.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the RDS read replica.\n"
                    },
                    "engine": {
                        "type": "integer",
                        "description": "The numerical index of database engine to be used the for the RDS read replica.\n"
                    },
                    "engineType": {
                        "type": "integer",
                        "description": "Engine type required to validate applicable parameter group setting for different instance. Should be referred from writer\n"
                    },
                    "engineVersion": {
                        "type": "string",
                        "description": "The database engine version to be used the for the RDS read replica.\n"
                    },
                    "enhancedMonitoring": {
                        "type": "integer",
                        "description": "Interval to capture metrics in real time for the operating system (OS) that your Amazon RDS DB instance runs on.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "The DNS hostname of the RDS read replica.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "The full name of the RDS read replica.\n"
                    },
                    "kmsKeyId": {
                        "type": "string",
                        "description": "The globally unique identifier for the key.\n"
                    },
                    "multiAz": {
                        "type": "boolean",
                        "description": "Specifies if the RDS instance is multi-AZ.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the RDS read replica.  Duplo will add a prefix to the name.  You can retrieve the full name from the `identifier` attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameterGroupName": {
                        "type": "string",
                        "description": "A RDS parameter group name to apply to the RDS instance.\n"
                    },
                    "performanceInsights": {
                        "$ref": "#/types/duplocloud:index/RdsReadReplicaPerformanceInsights:RdsReadReplicaPerformanceInsights",
                        "description": "Amazon RDS Performance Insights is a database performance tuning and monitoring feature that helps you quickly assess the load on your database, and determine when and where to take action. Perfomance Insights get apply when enable is set to true.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The listening port of the RDS read replica.\n"
                    },
                    "replicaStatus": {
                        "type": "string",
                        "description": "The current status of the RDS read replica.\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "The type of the RDS read replica.\nSee AWS documentation for the [available instance types](https://aws.amazon.com/rds/instance-types/).\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the RDS read replica will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/s3Bucket:S3Bucket": {
            "description": "## Example Usage\n\n### Create a S3 bucket named static_assets\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.\nconst infra = new duplocloud.Infrastructure(\"infra\", {\n    infraName: \"prod\",\n    cloud: 0,\n    region: \"us-west-2\",\n    enableK8Cluster: false,\n    addressPrefix: \"10.11.0.0/16\",\n});\n// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"prod\",\n    planId: infra.infraName,\n});\n// Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the S3 bucket.\nconst bucket = new duplocloud.S3Bucket(\"bucket\", {\n    tenantId: tenant.tenantId,\n    name: \"static_assets\",\n    allowPublicAccess: false,\n    enableAccessLogs: true,\n    enableVersioning: true,\n    managedPolicies: [\"ssl\"],\n    defaultEncryption: {\n        method: \"Sse\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.\ninfra = duplocloud.Infrastructure(\"infra\",\n    infra_name=\"prod\",\n    cloud=0,\n    region=\"us-west-2\",\n    enable_k8_cluster=False,\n    address_prefix=\"10.11.0.0/16\")\n# Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"prod\",\n    plan_id=infra.infra_name)\n# Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the S3 bucket.\nbucket = duplocloud.S3Bucket(\"bucket\",\n    tenant_id=tenant.tenant_id,\n    name=\"static_assets\",\n    allow_public_access=False,\n    enable_access_logs=True,\n    enable_versioning=True,\n    managed_policies=[\"ssl\"],\n    default_encryption={\n        \"method\": \"Sse\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.\n    var infra = new Duplocloud.Infrastructure(\"infra\", new()\n    {\n        InfraName = \"prod\",\n        Cloud = 0,\n        Region = \"us-west-2\",\n        EnableK8Cluster = false,\n        AddressPrefix = \"10.11.0.0/16\",\n    });\n\n    // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"prod\",\n        PlanId = infra.InfraName,\n    });\n\n    // Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the S3 bucket.\n    var bucket = new Duplocloud.S3Bucket(\"bucket\", new()\n    {\n        TenantId = tenant.TenantId,\n        Name = \"static_assets\",\n        AllowPublicAccess = false,\n        EnableAccessLogs = true,\n        EnableVersioning = true,\n        ManagedPolicies = new[]\n        {\n            \"ssl\",\n        },\n        DefaultEncryption = new Duplocloud.Inputs.S3BucketDefaultEncryptionArgs\n        {\n            Method = \"Sse\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.\n\t\tinfra, err := duplocloud.NewInfrastructure(ctx, \"infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"prod\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-west-2\"),\n\t\t\tEnableK8Cluster: pulumi.Bool(false),\n\t\t\tAddressPrefix:   pulumi.String(\"10.11.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n\t\ttenant, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"prod\"),\n\t\t\tPlanId:      infra.InfraName,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the S3 bucket.\n\t\t_, err = duplocloud.NewS3Bucket(ctx, \"bucket\", \u0026duplocloud.S3BucketArgs{\n\t\t\tTenantId:          tenant.TenantId,\n\t\t\tName:              pulumi.String(\"static_assets\"),\n\t\t\tAllowPublicAccess: pulumi.Bool(false),\n\t\t\tEnableAccessLogs:  pulumi.Bool(true),\n\t\t\tEnableVersioning:  pulumi.Bool(true),\n\t\t\tManagedPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssl\"),\n\t\t\t},\n\t\t\tDefaultEncryption: \u0026duplocloud.S3BucketDefaultEncryptionArgs{\n\t\t\t\tMethod: pulumi.String(\"Sse\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.S3Bucket;\nimport com.pulumi.duplocloud.S3BucketArgs;\nimport com.pulumi.duplocloud.inputs.S3BucketDefaultEncryptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.\n        var infra = new Infrastructure(\"infra\", InfrastructureArgs.builder()\n            .infraName(\"prod\")\n            .cloud(0)\n            .region(\"us-west-2\")\n            .enableK8Cluster(false)\n            .addressPrefix(\"10.11.0.0/16\")\n            .build());\n\n        // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"prod\")\n            .planId(infra.infraName())\n            .build());\n\n        // Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the S3 bucket.\n        var bucket = new S3Bucket(\"bucket\", S3BucketArgs.builder()\n            .tenantId(tenant.tenantId())\n            .name(\"static_assets\")\n            .allowPublicAccess(false)\n            .enableAccessLogs(true)\n            .enableVersioning(true)\n            .managedPolicies(\"ssl\")\n            .defaultEncryption(S3BucketDefaultEncryptionArgs.builder()\n                .method(\"Sse\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.\n  infra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: prod\n      cloud: 0 # AWS Cloud\n      region: us-west-2\n      enableK8Cluster: false\n      addressPrefix: 10.11.0.0/16\n  # Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: prod\n      planId: ${infra.infraName}\n  # Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the S3 bucket.\n  bucket:\n    type: duplocloud:S3Bucket\n    properties:\n      tenantId: ${tenant.tenantId}\n      name: static_assets\n      allowPublicAccess: false\n      enableAccessLogs: true\n      enableVersioning: true\n      managedPolicies:\n        - ssl\n      defaultEncryption:\n        method: Sse\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Provision an S3 bucket within the dev tenant\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Ensure the 'dev' tenant is already created before setting up the s3 bucket.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\nconst bucket = new duplocloud.S3Bucket(\"bucket\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"bucket\",\n    allowPublicAccess: false,\n    enableAccessLogs: true,\n    enableVersioning: true,\n    managedPolicies: [\"ssl\"],\n    defaultEncryption: {\n        method: \"Sse\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Ensure the 'dev' tenant is already created before setting up the s3 bucket.\ntenant = duplocloud.get_tenant(name=\"dev\")\nbucket = duplocloud.S3Bucket(\"bucket\",\n    tenant_id=tenant.id,\n    name=\"bucket\",\n    allow_public_access=False,\n    enable_access_logs=True,\n    enable_versioning=True,\n    managed_policies=[\"ssl\"],\n    default_encryption={\n        \"method\": \"Sse\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'dev' tenant is already created before setting up the s3 bucket.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    var bucket = new Duplocloud.S3Bucket(\"bucket\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"bucket\",\n        AllowPublicAccess = false,\n        EnableAccessLogs = true,\n        EnableVersioning = true,\n        ManagedPolicies = new[]\n        {\n            \"ssl\",\n        },\n        DefaultEncryption = new Duplocloud.Inputs.S3BucketDefaultEncryptionArgs\n        {\n            Method = \"Sse\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'dev' tenant is already created before setting up the s3 bucket.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewS3Bucket(ctx, \"bucket\", \u0026duplocloud.S3BucketArgs{\n\t\t\tTenantId:          pulumi.String(tenant.Id),\n\t\t\tName:              pulumi.String(\"bucket\"),\n\t\t\tAllowPublicAccess: pulumi.Bool(false),\n\t\t\tEnableAccessLogs:  pulumi.Bool(true),\n\t\t\tEnableVersioning:  pulumi.Bool(true),\n\t\t\tManagedPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssl\"),\n\t\t\t},\n\t\t\tDefaultEncryption: \u0026duplocloud.S3BucketDefaultEncryptionArgs{\n\t\t\t\tMethod: pulumi.String(\"Sse\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.S3Bucket;\nimport com.pulumi.duplocloud.S3BucketArgs;\nimport com.pulumi.duplocloud.inputs.S3BucketDefaultEncryptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'dev' tenant is already created before setting up the s3 bucket.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        var bucket = new S3Bucket(\"bucket\", S3BucketArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"bucket\")\n            .allowPublicAccess(false)\n            .enableAccessLogs(true)\n            .enableVersioning(true)\n            .managedPolicies(\"ssl\")\n            .defaultEncryption(S3BucketDefaultEncryptionArgs.builder()\n                .method(\"Sse\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bucket:\n    type: duplocloud:S3Bucket\n    properties:\n      tenantId: ${tenant.id}\n      name: bucket\n      allowPublicAccess: false\n      enableAccessLogs: true\n      enableVersioning: true\n      managedPolicies:\n        - ssl\n      defaultEncryption:\n        method: Sse\nvariables:\n  # Ensure the 'dev' tenant is already created before setting up the s3 bucket.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create an S3 bucket in the dev tenant, with public access enabled\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Ensure the 'dev' tenant is already created before setting up the s3 bucket.\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\nconst bucket = new duplocloud.S3Bucket(\"bucket\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"bucket\",\n    allowPublicAccess: true,\n    enableAccessLogs: true,\n    enableVersioning: true,\n    managedPolicies: [\"ssl\"],\n    defaultEncryption: {\n        method: \"Sse\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Ensure the 'dev' tenant is already created before setting up the s3 bucket.\ntenant = duplocloud.get_tenant(name=\"dev\")\nbucket = duplocloud.S3Bucket(\"bucket\",\n    tenant_id=tenant.id,\n    name=\"bucket\",\n    allow_public_access=True,\n    enable_access_logs=True,\n    enable_versioning=True,\n    managed_policies=[\"ssl\"],\n    default_encryption={\n        \"method\": \"Sse\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'dev' tenant is already created before setting up the s3 bucket.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    var bucket = new Duplocloud.S3Bucket(\"bucket\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"bucket\",\n        AllowPublicAccess = true,\n        EnableAccessLogs = true,\n        EnableVersioning = true,\n        ManagedPolicies = new[]\n        {\n            \"ssl\",\n        },\n        DefaultEncryption = new Duplocloud.Inputs.S3BucketDefaultEncryptionArgs\n        {\n            Method = \"Sse\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'dev' tenant is already created before setting up the s3 bucket.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewS3Bucket(ctx, \"bucket\", \u0026duplocloud.S3BucketArgs{\n\t\t\tTenantId:          pulumi.String(tenant.Id),\n\t\t\tName:              pulumi.String(\"bucket\"),\n\t\t\tAllowPublicAccess: pulumi.Bool(true),\n\t\t\tEnableAccessLogs:  pulumi.Bool(true),\n\t\t\tEnableVersioning:  pulumi.Bool(true),\n\t\t\tManagedPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssl\"),\n\t\t\t},\n\t\t\tDefaultEncryption: \u0026duplocloud.S3BucketDefaultEncryptionArgs{\n\t\t\t\tMethod: pulumi.String(\"Sse\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.S3Bucket;\nimport com.pulumi.duplocloud.S3BucketArgs;\nimport com.pulumi.duplocloud.inputs.S3BucketDefaultEncryptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'dev' tenant is already created before setting up the s3 bucket.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        var bucket = new S3Bucket(\"bucket\", S3BucketArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"bucket\")\n            .allowPublicAccess(true)\n            .enableAccessLogs(true)\n            .enableVersioning(true)\n            .managedPolicies(\"ssl\")\n            .defaultEncryption(S3BucketDefaultEncryptionArgs.builder()\n                .method(\"Sse\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bucket:\n    type: duplocloud:S3Bucket\n    properties:\n      tenantId: ${tenant.id}\n      name: bucket\n      allowPublicAccess: true\n      enableAccessLogs: true\n      enableVersioning: true\n      managedPolicies:\n        - ssl\n      defaultEncryption:\n        method: Sse\nvariables:\n  # Ensure the 'dev' tenant is already created before setting up the s3 bucket.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create an S3 bucket in the dev tenant within DuploCloud, with versioning disabled\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenant = duplocloud.getTenant({\n    name: \"dev\",\n});\nconst bucket = new duplocloud.S3Bucket(\"bucket\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"bucket\",\n    allowPublicAccess: false,\n    enableAccessLogs: true,\n    enableVersioning: true,\n    managedPolicies: [\"ssl\"],\n    defaultEncryption: {\n        method: \"Sse\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant = duplocloud.get_tenant(name=\"dev\")\nbucket = duplocloud.S3Bucket(\"bucket\",\n    tenant_id=tenant.id,\n    name=\"bucket\",\n    allow_public_access=False,\n    enable_access_logs=True,\n    enable_versioning=True,\n    managed_policies=[\"ssl\"],\n    default_encryption={\n        \"method\": \"Sse\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"dev\",\n    });\n\n    var bucket = new Duplocloud.S3Bucket(\"bucket\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"bucket\",\n        AllowPublicAccess = false,\n        EnableAccessLogs = true,\n        EnableVersioning = true,\n        ManagedPolicies = new[]\n        {\n            \"ssl\",\n        },\n        DefaultEncryption = new Duplocloud.Inputs.S3BucketDefaultEncryptionArgs\n        {\n            Method = \"Sse\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"dev\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewS3Bucket(ctx, \"bucket\", \u0026duplocloud.S3BucketArgs{\n\t\t\tTenantId:          pulumi.String(tenant.Id),\n\t\t\tName:              pulumi.String(\"bucket\"),\n\t\t\tAllowPublicAccess: pulumi.Bool(false),\n\t\t\tEnableAccessLogs:  pulumi.Bool(true),\n\t\t\tEnableVersioning:  pulumi.Bool(true),\n\t\t\tManagedPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssl\"),\n\t\t\t},\n\t\t\tDefaultEncryption: \u0026duplocloud.S3BucketDefaultEncryptionArgs{\n\t\t\t\tMethod: pulumi.String(\"Sse\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.S3Bucket;\nimport com.pulumi.duplocloud.S3BucketArgs;\nimport com.pulumi.duplocloud.inputs.S3BucketDefaultEncryptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"dev\")\n            .build());\n\n        var bucket = new S3Bucket(\"bucket\", S3BucketArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"bucket\")\n            .allowPublicAccess(false)\n            .enableAccessLogs(true)\n            .enableVersioning(true)\n            .managedPolicies(\"ssl\")\n            .defaultEncryption(S3BucketDefaultEncryptionArgs.builder()\n                .method(\"Sse\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bucket:\n    type: duplocloud:S3Bucket\n    properties:\n      tenantId: ${tenant.id}\n      name: bucket\n      allowPublicAccess: false\n      enableAccessLogs: true\n      enableVersioning: true\n      managedPolicies:\n        - ssl\n      defaultEncryption:\n        method: Sse\nvariables:\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: dev\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Setup an S3 bucket in the qa tenant, with access logs disabled\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenant = duplocloud.getTenant({\n    name: \"qa\",\n});\nconst bucket = new duplocloud.S3Bucket(\"bucket\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"bucket\",\n    allowPublicAccess: false,\n    enableAccessLogs: false,\n    enableVersioning: true,\n    managedPolicies: [\"ssl\"],\n    defaultEncryption: {\n        method: \"Sse\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant = duplocloud.get_tenant(name=\"qa\")\nbucket = duplocloud.S3Bucket(\"bucket\",\n    tenant_id=tenant.id,\n    name=\"bucket\",\n    allow_public_access=False,\n    enable_access_logs=False,\n    enable_versioning=True,\n    managed_policies=[\"ssl\"],\n    default_encryption={\n        \"method\": \"Sse\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"qa\",\n    });\n\n    var bucket = new Duplocloud.S3Bucket(\"bucket\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"bucket\",\n        AllowPublicAccess = false,\n        EnableAccessLogs = false,\n        EnableVersioning = true,\n        ManagedPolicies = new[]\n        {\n            \"ssl\",\n        },\n        DefaultEncryption = new Duplocloud.Inputs.S3BucketDefaultEncryptionArgs\n        {\n            Method = \"Sse\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"qa\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewS3Bucket(ctx, \"bucket\", \u0026duplocloud.S3BucketArgs{\n\t\t\tTenantId:          pulumi.String(tenant.Id),\n\t\t\tName:              pulumi.String(\"bucket\"),\n\t\t\tAllowPublicAccess: pulumi.Bool(false),\n\t\t\tEnableAccessLogs:  pulumi.Bool(false),\n\t\t\tEnableVersioning:  pulumi.Bool(true),\n\t\t\tManagedPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssl\"),\n\t\t\t},\n\t\t\tDefaultEncryption: \u0026duplocloud.S3BucketDefaultEncryptionArgs{\n\t\t\t\tMethod: pulumi.String(\"Sse\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.S3Bucket;\nimport com.pulumi.duplocloud.S3BucketArgs;\nimport com.pulumi.duplocloud.inputs.S3BucketDefaultEncryptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"qa\")\n            .build());\n\n        var bucket = new S3Bucket(\"bucket\", S3BucketArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"bucket\")\n            .allowPublicAccess(false)\n            .enableAccessLogs(false)\n            .enableVersioning(true)\n            .managedPolicies(\"ssl\")\n            .defaultEncryption(S3BucketDefaultEncryptionArgs.builder()\n                .method(\"Sse\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bucket:\n    type: duplocloud:S3Bucket\n    properties:\n      tenantId: ${tenant.id}\n      name: bucket\n      allowPublicAccess: false\n      enableAccessLogs: false\n      enableVersioning: true\n      managedPolicies:\n        - ssl\n      defaultEncryption:\n        method: Sse\nvariables:\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: qa\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Configure an S3 bucket in the QA tenant, enabling public access while disabling versioning and access logs\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenant = duplocloud.getTenant({\n    name: \"qa\",\n});\nconst bucket = new duplocloud.S3Bucket(\"bucket\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"bucket\",\n    allowPublicAccess: true,\n    enableAccessLogs: false,\n    enableVersioning: false,\n    managedPolicies: [\"ssl\"],\n    defaultEncryption: {\n        method: \"Sse\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant = duplocloud.get_tenant(name=\"qa\")\nbucket = duplocloud.S3Bucket(\"bucket\",\n    tenant_id=tenant.id,\n    name=\"bucket\",\n    allow_public_access=True,\n    enable_access_logs=False,\n    enable_versioning=False,\n    managed_policies=[\"ssl\"],\n    default_encryption={\n        \"method\": \"Sse\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"qa\",\n    });\n\n    var bucket = new Duplocloud.S3Bucket(\"bucket\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"bucket\",\n        AllowPublicAccess = true,\n        EnableAccessLogs = false,\n        EnableVersioning = false,\n        ManagedPolicies = new[]\n        {\n            \"ssl\",\n        },\n        DefaultEncryption = new Duplocloud.Inputs.S3BucketDefaultEncryptionArgs\n        {\n            Method = \"Sse\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"qa\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewS3Bucket(ctx, \"bucket\", \u0026duplocloud.S3BucketArgs{\n\t\t\tTenantId:          pulumi.String(tenant.Id),\n\t\t\tName:              pulumi.String(\"bucket\"),\n\t\t\tAllowPublicAccess: pulumi.Bool(true),\n\t\t\tEnableAccessLogs:  pulumi.Bool(false),\n\t\t\tEnableVersioning:  pulumi.Bool(false),\n\t\t\tManagedPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssl\"),\n\t\t\t},\n\t\t\tDefaultEncryption: \u0026duplocloud.S3BucketDefaultEncryptionArgs{\n\t\t\t\tMethod: pulumi.String(\"Sse\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.S3Bucket;\nimport com.pulumi.duplocloud.S3BucketArgs;\nimport com.pulumi.duplocloud.inputs.S3BucketDefaultEncryptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"qa\")\n            .build());\n\n        var bucket = new S3Bucket(\"bucket\", S3BucketArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"bucket\")\n            .allowPublicAccess(true)\n            .enableAccessLogs(false)\n            .enableVersioning(false)\n            .managedPolicies(\"ssl\")\n            .defaultEncryption(S3BucketDefaultEncryptionArgs.builder()\n                .method(\"Sse\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bucket:\n    type: duplocloud:S3Bucket\n    properties:\n      tenantId: ${tenant.id}\n      name: bucket\n      allowPublicAccess: true\n      enableAccessLogs: false\n      enableVersioning: false\n      managedPolicies:\n        - ssl\n      defaultEncryption:\n        method: Sse\nvariables:\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: qa\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create an S3 bucket named data in the preprod tenant, with tenant kms enabled\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenant = duplocloud.getTenant({\n    name: \"preprod\",\n});\nconst bucket = new duplocloud.S3Bucket(\"bucket\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"data\",\n    allowPublicAccess: false,\n    enableAccessLogs: false,\n    enableVersioning: true,\n    managedPolicies: [\"ssl\"],\n    defaultEncryption: {\n        method: \"TenantKms\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant = duplocloud.get_tenant(name=\"preprod\")\nbucket = duplocloud.S3Bucket(\"bucket\",\n    tenant_id=tenant.id,\n    name=\"data\",\n    allow_public_access=False,\n    enable_access_logs=False,\n    enable_versioning=True,\n    managed_policies=[\"ssl\"],\n    default_encryption={\n        \"method\": \"TenantKms\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"preprod\",\n    });\n\n    var bucket = new Duplocloud.S3Bucket(\"bucket\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"data\",\n        AllowPublicAccess = false,\n        EnableAccessLogs = false,\n        EnableVersioning = true,\n        ManagedPolicies = new[]\n        {\n            \"ssl\",\n        },\n        DefaultEncryption = new Duplocloud.Inputs.S3BucketDefaultEncryptionArgs\n        {\n            Method = \"TenantKms\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"preprod\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewS3Bucket(ctx, \"bucket\", \u0026duplocloud.S3BucketArgs{\n\t\t\tTenantId:          pulumi.String(tenant.Id),\n\t\t\tName:              pulumi.String(\"data\"),\n\t\t\tAllowPublicAccess: pulumi.Bool(false),\n\t\t\tEnableAccessLogs:  pulumi.Bool(false),\n\t\t\tEnableVersioning:  pulumi.Bool(true),\n\t\t\tManagedPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssl\"),\n\t\t\t},\n\t\t\tDefaultEncryption: \u0026duplocloud.S3BucketDefaultEncryptionArgs{\n\t\t\t\tMethod: pulumi.String(\"TenantKms\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.S3Bucket;\nimport com.pulumi.duplocloud.S3BucketArgs;\nimport com.pulumi.duplocloud.inputs.S3BucketDefaultEncryptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"preprod\")\n            .build());\n\n        var bucket = new S3Bucket(\"bucket\", S3BucketArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"data\")\n            .allowPublicAccess(false)\n            .enableAccessLogs(false)\n            .enableVersioning(true)\n            .managedPolicies(\"ssl\")\n            .defaultEncryption(S3BucketDefaultEncryptionArgs.builder()\n                .method(\"TenantKms\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bucket:\n    type: duplocloud:S3Bucket\n    properties:\n      tenantId: ${tenant.id}\n      name: data\n      allowPublicAccess: false\n      enableAccessLogs: false\n      enableVersioning: true\n      managedPolicies:\n        - ssl\n      defaultEncryption:\n        method: TenantKms\nvariables:\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: preprod\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Deploy an S3 bucket with hardened security settings\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenant = duplocloud.getTenant({\n    name: \"test\",\n});\nconst mydata = new duplocloud.S3Bucket(\"mydata\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"mydata\",\n    allowPublicAccess: false,\n    enableAccessLogs: true,\n    enableVersioning: true,\n    managedPolicies: [\"ssl\"],\n    defaultEncryption: {\n        method: \"Sse\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant = duplocloud.get_tenant(name=\"test\")\nmydata = duplocloud.S3Bucket(\"mydata\",\n    tenant_id=tenant.id,\n    name=\"mydata\",\n    allow_public_access=False,\n    enable_access_logs=True,\n    enable_versioning=True,\n    managed_policies=[\"ssl\"],\n    default_encryption={\n        \"method\": \"Sse\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"test\",\n    });\n\n    var mydata = new Duplocloud.S3Bucket(\"mydata\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"mydata\",\n        AllowPublicAccess = false,\n        EnableAccessLogs = true,\n        EnableVersioning = true,\n        ManagedPolicies = new[]\n        {\n            \"ssl\",\n        },\n        DefaultEncryption = new Duplocloud.Inputs.S3BucketDefaultEncryptionArgs\n        {\n            Method = \"Sse\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewS3Bucket(ctx, \"mydata\", \u0026duplocloud.S3BucketArgs{\n\t\t\tTenantId:          pulumi.String(tenant.Id),\n\t\t\tName:              pulumi.String(\"mydata\"),\n\t\t\tAllowPublicAccess: pulumi.Bool(false),\n\t\t\tEnableAccessLogs:  pulumi.Bool(true),\n\t\t\tEnableVersioning:  pulumi.Bool(true),\n\t\t\tManagedPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssl\"),\n\t\t\t},\n\t\t\tDefaultEncryption: \u0026duplocloud.S3BucketDefaultEncryptionArgs{\n\t\t\t\tMethod: pulumi.String(\"Sse\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.S3Bucket;\nimport com.pulumi.duplocloud.S3BucketArgs;\nimport com.pulumi.duplocloud.inputs.S3BucketDefaultEncryptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"test\")\n            .build());\n\n        var mydata = new S3Bucket(\"mydata\", S3BucketArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"mydata\")\n            .allowPublicAccess(false)\n            .enableAccessLogs(true)\n            .enableVersioning(true)\n            .managedPolicies(\"ssl\")\n            .defaultEncryption(S3BucketDefaultEncryptionArgs.builder()\n                .method(\"Sse\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mydata:\n    type: duplocloud:S3Bucket\n    properties:\n      tenantId: ${tenant.id}\n      name: mydata\n      allowPublicAccess: false\n      enableAccessLogs: true\n      enableVersioning: true\n      managedPolicies:\n        - ssl\n      defaultEncryption:\n        method: Sse\nvariables:\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: test\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n###  Deploy a hardened S3 bucket suitable for public website hosting in test tenant\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst tenant = duplocloud.getTenant({\n    name: \"test\",\n});\nconst www = new duplocloud.S3Bucket(\"www\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"website\",\n    allowPublicAccess: true,\n    enableAccessLogs: true,\n    enableVersioning: true,\n    managedPolicies: [\"ssl\"],\n    defaultEncryption: {\n        method: \"Sse\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntenant = duplocloud.get_tenant(name=\"test\")\nwww = duplocloud.S3Bucket(\"www\",\n    tenant_id=tenant.id,\n    name=\"website\",\n    allow_public_access=True,\n    enable_access_logs=True,\n    enable_versioning=True,\n    managed_policies=[\"ssl\"],\n    default_encryption={\n        \"method\": \"Sse\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"test\",\n    });\n\n    var www = new Duplocloud.S3Bucket(\"www\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"website\",\n        AllowPublicAccess = true,\n        EnableAccessLogs = true,\n        EnableVersioning = true,\n        ManagedPolicies = new[]\n        {\n            \"ssl\",\n        },\n        DefaultEncryption = new Duplocloud.Inputs.S3BucketDefaultEncryptionArgs\n        {\n            Method = \"Sse\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewS3Bucket(ctx, \"www\", \u0026duplocloud.S3BucketArgs{\n\t\t\tTenantId:          pulumi.String(tenant.Id),\n\t\t\tName:              pulumi.String(\"website\"),\n\t\t\tAllowPublicAccess: pulumi.Bool(true),\n\t\t\tEnableAccessLogs:  pulumi.Bool(true),\n\t\t\tEnableVersioning:  pulumi.Bool(true),\n\t\t\tManagedPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssl\"),\n\t\t\t},\n\t\t\tDefaultEncryption: \u0026duplocloud.S3BucketDefaultEncryptionArgs{\n\t\t\t\tMethod: pulumi.String(\"Sse\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.S3Bucket;\nimport com.pulumi.duplocloud.S3BucketArgs;\nimport com.pulumi.duplocloud.inputs.S3BucketDefaultEncryptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"test\")\n            .build());\n\n        var www = new S3Bucket(\"www\", S3BucketArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"website\")\n            .allowPublicAccess(true)\n            .enableAccessLogs(true)\n            .enableVersioning(true)\n            .managedPolicies(\"ssl\")\n            .defaultEncryption(S3BucketDefaultEncryptionArgs.builder()\n                .method(\"Sse\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  www:\n    type: duplocloud:S3Bucket\n    properties:\n      tenantId: ${tenant.id}\n      name: website\n      allowPublicAccess: true\n      enableAccessLogs: true\n      enableVersioning: true\n      managedPolicies:\n        - ssl\n      defaultEncryption:\n        method: Sse\nvariables:\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: test\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n###  Deploy an S3 bucket to us-east-1 region\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Ensure the 'test' tenant is already created before creating the s3 bucket.\nconst tenant = duplocloud.getTenant({\n    name: \"test\",\n});\nconst staticAssets = new duplocloud.S3Bucket(\"static_assets\", {\n    tenantId: tenant.then(tenant =\u003e tenant.id),\n    name: \"static_assets\",\n    allowPublicAccess: false,\n    enableAccessLogs: true,\n    enableVersioning: true,\n    managedPolicies: [\"ssl\"],\n    defaultEncryption: {\n        method: \"Sse\",\n    },\n    region: \"us-east-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Ensure the 'test' tenant is already created before creating the s3 bucket.\ntenant = duplocloud.get_tenant(name=\"test\")\nstatic_assets = duplocloud.S3Bucket(\"static_assets\",\n    tenant_id=tenant.id,\n    name=\"static_assets\",\n    allow_public_access=False,\n    enable_access_logs=True,\n    enable_versioning=True,\n    managed_policies=[\"ssl\"],\n    default_encryption={\n        \"method\": \"Sse\",\n    },\n    region=\"us-east-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'test' tenant is already created before creating the s3 bucket.\n    var tenant = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"test\",\n    });\n\n    var staticAssets = new Duplocloud.S3Bucket(\"static_assets\", new()\n    {\n        TenantId = tenant.Apply(getTenantResult =\u003e getTenantResult.Id),\n        Name = \"static_assets\",\n        AllowPublicAccess = false,\n        EnableAccessLogs = true,\n        EnableVersioning = true,\n        ManagedPolicies = new[]\n        {\n            \"ssl\",\n        },\n        DefaultEncryption = new Duplocloud.Inputs.S3BucketDefaultEncryptionArgs\n        {\n            Method = \"Sse\",\n        },\n        Region = \"us-east-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'test' tenant is already created before creating the s3 bucket.\n\t\ttenant, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewS3Bucket(ctx, \"static_assets\", \u0026duplocloud.S3BucketArgs{\n\t\t\tTenantId:          pulumi.String(tenant.Id),\n\t\t\tName:              pulumi.String(\"static_assets\"),\n\t\t\tAllowPublicAccess: pulumi.Bool(false),\n\t\t\tEnableAccessLogs:  pulumi.Bool(true),\n\t\t\tEnableVersioning:  pulumi.Bool(true),\n\t\t\tManagedPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssl\"),\n\t\t\t},\n\t\t\tDefaultEncryption: \u0026duplocloud.S3BucketDefaultEncryptionArgs{\n\t\t\t\tMethod: pulumi.String(\"Sse\"),\n\t\t\t},\n\t\t\tRegion: pulumi.String(\"us-east-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.S3Bucket;\nimport com.pulumi.duplocloud.S3BucketArgs;\nimport com.pulumi.duplocloud.inputs.S3BucketDefaultEncryptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'test' tenant is already created before creating the s3 bucket.\n        final var tenant = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"test\")\n            .build());\n\n        var staticAssets = new S3Bucket(\"staticAssets\", S3BucketArgs.builder()\n            .tenantId(tenant.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .name(\"static_assets\")\n            .allowPublicAccess(false)\n            .enableAccessLogs(true)\n            .enableVersioning(true)\n            .managedPolicies(\"ssl\")\n            .defaultEncryption(S3BucketDefaultEncryptionArgs.builder()\n                .method(\"Sse\")\n                .build())\n            .region(\"us-east-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  staticAssets:\n    type: duplocloud:S3Bucket\n    name: static_assets\n    properties:\n      tenantId: ${tenant.id}\n      name: static_assets\n      allowPublicAccess: false\n      enableAccessLogs: true\n      enableVersioning: true\n      managedPolicies:\n        - ssl\n      defaultEncryption:\n        method: Sse\n      region: us-east-1\nvariables:\n  # Ensure the 'test' tenant is already created before creating the s3 bucket.\n  tenant:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: test\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing S3 bucket\n\n - *TENANT_ID* is the tenant GUID\n\n - *SHORTNAME* is the short name of the S3 bucket (without the duploservices prefix)\n\n#\n\n```sh\n$ pulumi import duplocloud:index/s3Bucket:S3Bucket mybucket *TENANT_ID*/*SHORTNAME*\n```\n\n",
            "properties": {
                "allowPublicAccess": {
                    "type": "boolean",
                    "description": "Whether or not to remove the public access block from the bucket.\n"
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN of the S3 bucket.\n"
                },
                "defaultEncryption": {
                    "$ref": "#/types/duplocloud:index/S3BucketDefaultEncryption:S3BucketDefaultEncryption",
                    "description": "Default encryption settings for objects uploaded to the bucket.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "The domain name of the S3 bucket.\n"
                },
                "enableAccessLogs": {
                    "type": "boolean",
                    "description": "Whether or not to enable access logs. When enabled, Duplo will send access logs to a centralized S3 bucket per plan.\n"
                },
                "enableVersioning": {
                    "type": "boolean",
                    "description": "Whether or not to enable versioning.\n"
                },
                "fullname": {
                    "type": "string",
                    "description": "The full name of the S3 bucket.\n"
                },
                "managedPolicies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Duplo can manage your S3 bucket policy for you, based on simple list of policy keywords: - `\"ssl\"`: Require SSL / HTTPS\nwhen accessing the bucket. - `\"ignore\"`: If this value is present, Duplo will not manage your bucket policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the S3 bucket. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`\nattribute.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the S3 bucket.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/S3BucketTag:S3BucketTag"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the S3 bucket will be created in.\n"
                }
            },
            "required": [
                "allowPublicAccess",
                "arn",
                "defaultEncryption",
                "domainName",
                "enableAccessLogs",
                "enableVersioning",
                "fullname",
                "managedPolicies",
                "name",
                "region",
                "tags",
                "tenantId"
            ],
            "inputProperties": {
                "allowPublicAccess": {
                    "type": "boolean",
                    "description": "Whether or not to remove the public access block from the bucket.\n"
                },
                "defaultEncryption": {
                    "$ref": "#/types/duplocloud:index/S3BucketDefaultEncryption:S3BucketDefaultEncryption",
                    "description": "Default encryption settings for objects uploaded to the bucket.\n"
                },
                "enableAccessLogs": {
                    "type": "boolean",
                    "description": "Whether or not to enable access logs. When enabled, Duplo will send access logs to a centralized S3 bucket per plan.\n"
                },
                "enableVersioning": {
                    "type": "boolean",
                    "description": "Whether or not to enable versioning.\n"
                },
                "managedPolicies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Duplo can manage your S3 bucket policy for you, based on simple list of policy keywords: - `\"ssl\"`: Require SSL / HTTPS\nwhen accessing the bucket. - `\"ignore\"`: If this value is present, Duplo will not manage your bucket policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the S3 bucket. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`\nattribute.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region of the S3 bucket.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the S3 bucket will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering S3Bucket resources.\n",
                "properties": {
                    "allowPublicAccess": {
                        "type": "boolean",
                        "description": "Whether or not to remove the public access block from the bucket.\n"
                    },
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the S3 bucket.\n"
                    },
                    "defaultEncryption": {
                        "$ref": "#/types/duplocloud:index/S3BucketDefaultEncryption:S3BucketDefaultEncryption",
                        "description": "Default encryption settings for objects uploaded to the bucket.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "The domain name of the S3 bucket.\n"
                    },
                    "enableAccessLogs": {
                        "type": "boolean",
                        "description": "Whether or not to enable access logs. When enabled, Duplo will send access logs to a centralized S3 bucket per plan.\n"
                    },
                    "enableVersioning": {
                        "type": "boolean",
                        "description": "Whether or not to enable versioning.\n"
                    },
                    "fullname": {
                        "type": "string",
                        "description": "The full name of the S3 bucket.\n"
                    },
                    "managedPolicies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Duplo can manage your S3 bucket policy for you, based on simple list of policy keywords: - `\"ssl\"`: Require SSL / HTTPS\nwhen accessing the bucket. - `\"ignore\"`: If this value is present, Duplo will not manage your bucket policy.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the S3 bucket. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`\nattribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the S3 bucket.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/S3BucketTag:S3BucketTag"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the S3 bucket will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/s3BucketReplication:S3BucketReplication": {
            "description": "Resource duplocloud.S3BucketReplication is dependent on duplocloud_s3_bucket. This resource sets replication rules for source bucket\n\n## Import\n\nExample: Importing an existing S3 bucket replication\n\n - *TENANT_ID* is the tenant GUID\n\n - *SOURCEBUCKETNAME* is the full name of the S3 bucket\n\n#\n\n```sh\n$ pulumi import duplocloud:index/s3BucketReplication:S3BucketReplication mybucket *TENANT_ID*/*SOURCEBUCKETNAME*\n```\n\n",
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/S3BucketReplicationRule:S3BucketReplicationRule"
                    },
                    "description": "replication rules for source bucket\n"
                },
                "sourceBucket": {
                    "type": "string",
                    "description": "fullname of the source bucket.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the S3 bucket replication rule will be created in.\n"
                }
            },
            "required": [
                "rules",
                "sourceBucket",
                "tenantId"
            ],
            "inputProperties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/S3BucketReplicationRule:S3BucketReplicationRule"
                    },
                    "description": "replication rules for source bucket\n"
                },
                "sourceBucket": {
                    "type": "string",
                    "description": "fullname of the source bucket.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the S3 bucket replication rule will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "rules",
                "sourceBucket",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering S3BucketReplication resources.\n",
                "properties": {
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/S3BucketReplicationRule:S3BucketReplicationRule"
                        },
                        "description": "replication rules for source bucket\n"
                    },
                    "sourceBucket": {
                        "type": "string",
                        "description": "fullname of the source bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the S3 bucket replication rule will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/tenant:Tenant": {
            "description": "## Example Usage\n\n### Create a DuploCloud tenant named 'prod'.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.\nconst infra = new duplocloud.Infrastructure(\"infra\", {\n    infraName: \"prod\",\n    cloud: 0,\n    region: \"us-west-2\",\n    enableK8Cluster: false,\n    addressPrefix: \"10.11.0.0/16\",\n});\n// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"prod\",\n    planId: infra.infraName,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.\ninfra = duplocloud.Infrastructure(\"infra\",\n    infra_name=\"prod\",\n    cloud=0,\n    region=\"us-west-2\",\n    enable_k8_cluster=False,\n    address_prefix=\"10.11.0.0/16\")\n# Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"prod\",\n    plan_id=infra.infra_name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.\n    var infra = new Duplocloud.Infrastructure(\"infra\", new()\n    {\n        InfraName = \"prod\",\n        Cloud = 0,\n        Region = \"us-west-2\",\n        EnableK8Cluster = false,\n        AddressPrefix = \"10.11.0.0/16\",\n    });\n\n    // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"prod\",\n        PlanId = infra.InfraName,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.\n\t\tinfra, err := duplocloud.NewInfrastructure(ctx, \"infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"prod\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-west-2\"),\n\t\t\tEnableK8Cluster: pulumi.Bool(false),\n\t\t\tAddressPrefix:   pulumi.String(\"10.11.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n\t\t_, err = duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"prod\"),\n\t\t\tPlanId:      infra.InfraName,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.\n        var infra = new Infrastructure(\"infra\", InfrastructureArgs.builder()\n            .infraName(\"prod\")\n            .cloud(0)\n            .region(\"us-west-2\")\n            .enableK8Cluster(false)\n            .addressPrefix(\"10.11.0.0/16\")\n            .build());\n\n        // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"prod\")\n            .planId(infra.infraName())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.\n  infra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: prod\n      cloud: 0 # AWS Cloud\n      region: us-west-2\n      enableK8Cluster: false\n      addressPrefix: 10.11.0.0/16\n  # Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: prod\n      planId: ${infra.infraName}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a DuploCloud tenant named 'prod' inside the following prod infra.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst infra = new duplocloud.Infrastructure(\"infra\", {\n    infraName: \"prod\",\n    cloud: 0,\n    region: \"us-west-2\",\n    enableK8Cluster: false,\n    addressPrefix: \"10.11.0.0/16\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ninfra = duplocloud.Infrastructure(\"infra\",\n    infra_name=\"prod\",\n    cloud=0,\n    region=\"us-west-2\",\n    enable_k8_cluster=False,\n    address_prefix=\"10.11.0.0/16\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infra = new Duplocloud.Infrastructure(\"infra\", new()\n    {\n        InfraName = \"prod\",\n        Cloud = 0,\n        Region = \"us-west-2\",\n        EnableK8Cluster = false,\n        AddressPrefix = \"10.11.0.0/16\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewInfrastructure(ctx, \"infra\", \u0026duplocloud.InfrastructureArgs{\n\t\t\tInfraName:       pulumi.String(\"prod\"),\n\t\t\tCloud:           pulumi.Int(0),\n\t\t\tRegion:          pulumi.String(\"us-west-2\"),\n\t\t\tEnableK8Cluster: pulumi.Bool(false),\n\t\t\tAddressPrefix:   pulumi.String(\"10.11.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Infrastructure;\nimport com.pulumi.duplocloud.InfrastructureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var infra = new Infrastructure(\"infra\", InfrastructureArgs.builder()\n            .infraName(\"prod\")\n            .cloud(0)\n            .region(\"us-west-2\")\n            .enableK8Cluster(false)\n            .addressPrefix(\"10.11.0.0/16\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  infra:\n    type: duplocloud:Infrastructure\n    properties:\n      infraName: prod\n      cloud: 0 # AWS Cloud\n      region: us-west-2\n      enableK8Cluster: false\n      addressPrefix: 10.11.0.0/16\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource.\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"prod\",\n    planId: infra.infraName,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource.\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"prod\",\n    plan_id=infra[\"infraName\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource.\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"prod\",\n        PlanId = infra.InfraName,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource.\n\t\t_, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"prod\"),\n\t\t\tPlanId:      pulumi.Any(infra.InfraName),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource.\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"prod\")\n            .planId(infra.infraName())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource.\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: prod\n      planId: ${infra.infraName}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a DuploCloud tenant named 'dev' within the 'nonprod' infrastructure.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Ensure the 'nonprod' infrastructure is already created before setting up the tenant.\nconst infra = duplocloud.getInfrastructure({\n    infraName: \"nonprod\",\n});\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"dev\",\n    planId: infra.then(infra =\u003e infra.infraName),\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Ensure the 'nonprod' infrastructure is already created before setting up the tenant.\ninfra = duplocloud.get_infrastructure(infra_name=\"nonprod\")\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"dev\",\n    plan_id=infra.infra_name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Ensure the 'nonprod' infrastructure is already created before setting up the tenant.\n    var infra = Duplocloud.GetInfrastructure.Invoke(new()\n    {\n        InfraName = \"nonprod\",\n    });\n\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"dev\",\n        PlanId = infra.Apply(getInfrastructureResult =\u003e getInfrastructureResult.InfraName),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Ensure the 'nonprod' infrastructure is already created before setting up the tenant.\n\t\tinfra, err := duplocloud.LookupInfrastructure(ctx, \u0026duplocloud.LookupInfrastructureArgs{\n\t\t\tInfraName: pulumi.StringRef(\"nonprod\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"dev\"),\n\t\t\tPlanId:      pulumi.String(infra.InfraName),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetInfrastructureArgs;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Ensure the 'nonprod' infrastructure is already created before setting up the tenant.\n        final var infra = DuplocloudFunctions.getInfrastructure(GetInfrastructureArgs.builder()\n            .infraName(\"nonprod\")\n            .build());\n\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"dev\")\n            .planId(infra.applyValue(getInfrastructureResult -\u003e getInfrastructureResult.infraName()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: dev\n      planId: ${infra.infraName}\nvariables:\n  # Ensure the 'nonprod' infrastructure is already created before setting up the tenant.\n  infra:\n    fn::invoke:\n      function: duplocloud:getInfrastructure\n      arguments:\n        infraName: nonprod\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a DuploCloud tenant named 'dev' with infra name variable and tenant id as output.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst config = new pulumi.Config();\nconst infraName = config.get(\"infraName\") || \"nonprod\";\n// Ensure the 'nonprod' infrastructure is already created before setting up the tenant.\nconst infra = duplocloud.getInfrastructure({\n    infraName: \"nonprod\",\n});\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"dev\",\n    planId: infra.then(infra =\u003e infra.infraName),\n});\nexport const tenantId = tenant.tenantId;\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nconfig = pulumi.Config()\ninfra_name = config.get(\"infraName\")\nif infra_name is None:\n    infra_name = \"nonprod\"\n# Ensure the 'nonprod' infrastructure is already created before setting up the tenant.\ninfra = duplocloud.get_infrastructure(infra_name=\"nonprod\")\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"dev\",\n    plan_id=infra.infra_name)\npulumi.export(\"tenantId\", tenant.tenant_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var infraName = config.Get(\"infraName\") ?? \"nonprod\";\n    // Ensure the 'nonprod' infrastructure is already created before setting up the tenant.\n    var infra = Duplocloud.GetInfrastructure.Invoke(new()\n    {\n        InfraName = \"nonprod\",\n    });\n\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"dev\",\n        PlanId = infra.Apply(getInfrastructureResult =\u003e getInfrastructureResult.InfraName),\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"tenantId\"] = tenant.TenantId,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tinfraName := \"nonprod\"\n\t\tif param := cfg.Get(\"infraName\"); param != \"\" {\n\t\t\tinfraName = param\n\t\t}\n\t\t// Ensure the 'nonprod' infrastructure is already created before setting up the tenant.\n\t\tinfra, err := duplocloud.LookupInfrastructure(ctx, \u0026duplocloud.LookupInfrastructureArgs{\n\t\t\tInfraName: pulumi.StringRef(\"nonprod\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttenant, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"dev\"),\n\t\t\tPlanId:      pulumi.String(infra.InfraName),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"tenantId\", tenant.TenantId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetInfrastructureArgs;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var infraName = config.get(\"infraName\").orElse(\"nonprod\");\n        // Ensure the 'nonprod' infrastructure is already created before setting up the tenant.\n        final var infra = DuplocloudFunctions.getInfrastructure(GetInfrastructureArgs.builder()\n            .infraName(\"nonprod\")\n            .build());\n\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"dev\")\n            .planId(infra.applyValue(getInfrastructureResult -\u003e getInfrastructureResult.infraName()))\n            .build());\n\n        ctx.export(\"tenantId\", tenant.tenantId());\n    }\n}\n```\n```yaml\nconfiguration:\n  infraName:\n    type: string\n    default: nonprod\nresources:\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: dev\n      planId: ${infra.infraName}\nvariables:\n  # Ensure the 'nonprod' infrastructure is already created before setting up the tenant.\n  infra:\n    fn::invoke:\n      function: duplocloud:getInfrastructure\n      arguments:\n        infraName: nonprod\noutputs:\n  tenantId: ${tenant.tenantId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a duplocloud tenant named dev with AWS Cognito power user access in the nonprod infrastructure.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.\nconst infra = duplocloud.getInfrastructure({\n    infraName: \"nonprod\",\n});\n// Here’s how to create a tenant by providing the infrastructure name for the plan_id field.\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"dev\",\n    planId: infra.then(infra =\u003e infra.infraName),\n});\n// Attaches a managed IAM policy to an IAM role.\nconst amazonCognitoPowerUser = new aws.index.IamRolePolicyAttachment(\"AmazonCognitoPowerUser\", {\n    role: `duploservices-${tenant.accountName}`,\n    policyArn: \"arn:aws:iam::aws:policy/AmazonCognitoPowerUser\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_duplocloud as duplocloud\n\n# A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.\ninfra = duplocloud.get_infrastructure(infra_name=\"nonprod\")\n# Here’s how to create a tenant by providing the infrastructure name for the plan_id field.\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"dev\",\n    plan_id=infra.infra_name)\n# Attaches a managed IAM policy to an IAM role.\namazon_cognito_power_user = aws.index.IamRolePolicyAttachment(\"AmazonCognitoPowerUser\",\n    role=fduploservices-{tenant.account_name},\n    policy_arn=arn:aws:iam::aws:policy/AmazonCognitoPowerUser)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.\n    var infra = Duplocloud.GetInfrastructure.Invoke(new()\n    {\n        InfraName = \"nonprod\",\n    });\n\n    // Here’s how to create a tenant by providing the infrastructure name for the plan_id field.\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"dev\",\n        PlanId = infra.Apply(getInfrastructureResult =\u003e getInfrastructureResult.InfraName),\n    });\n\n    // Attaches a managed IAM policy to an IAM role.\n    var amazonCognitoPowerUser = new Aws.Index.IamRolePolicyAttachment(\"AmazonCognitoPowerUser\", new()\n    {\n        Role = $\"duploservices-{tenant.AccountName}\",\n        PolicyArn = \"arn:aws:iam::aws:policy/AmazonCognitoPowerUser\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi-aws/sdk/go/aws\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.\n\t\tinfra, err := duplocloud.LookupInfrastructure(ctx, \u0026duplocloud.LookupInfrastructureArgs{\n\t\t\tInfraName: pulumi.StringRef(\"nonprod\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Here’s how to create a tenant by providing the infrastructure name for the plan_id field.\n\t\ttenant, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"dev\"),\n\t\t\tPlanId:      pulumi.String(infra.InfraName),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Attaches a managed IAM policy to an IAM role.\n\t\t_, err = aws.NewIamRolePolicyAttachment(ctx, \"AmazonCognitoPowerUser\", \u0026aws.IamRolePolicyAttachmentArgs{\n\t\t\tRole:      pulumi.Sprintf(\"duploservices-%v\", tenant.AccountName),\n\t\t\tPolicyArn: \"arn:aws:iam::aws:policy/AmazonCognitoPowerUser\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetInfrastructureArgs;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.aws.iamRolePolicyAttachment;\nimport com.pulumi.aws.IamRolePolicyAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.\n        final var infra = DuplocloudFunctions.getInfrastructure(GetInfrastructureArgs.builder()\n            .infraName(\"nonprod\")\n            .build());\n\n        // Here’s how to create a tenant by providing the infrastructure name for the plan_id field.\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"dev\")\n            .planId(infra.applyValue(getInfrastructureResult -\u003e getInfrastructureResult.infraName()))\n            .build());\n\n        // Attaches a managed IAM policy to an IAM role.\n        var amazonCognitoPowerUser = new IamRolePolicyAttachment(\"amazonCognitoPowerUser\", IamRolePolicyAttachmentArgs.builder()\n            .role(String.format(\"duploservices-%s\", tenant.accountName()))\n            .policyArn(\"arn:aws:iam::aws:policy/AmazonCognitoPowerUser\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Here’s how to create a tenant by providing the infrastructure name for the plan_id field.\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: dev\n      planId: ${infra.infraName}\n  # Attaches a managed IAM policy to an IAM role.\n  amazonCognitoPowerUser:\n    type: aws:iamRolePolicyAttachment\n    name: AmazonCognitoPowerUser\n    properties:\n      role: duploservices-${tenant.accountName}\n      policyArn: arn:aws:iam::aws:policy/AmazonCognitoPowerUser\nvariables:\n  # A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.\n  infra:\n    fn::invoke:\n      function: duplocloud:getInfrastructure\n      arguments:\n        infraName: nonprod\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a DuploCloud tenant named 'qa' with full access to invoke AWS API Gateway in the nonprod infrastructure.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.\nconst infra = duplocloud.getInfrastructure({\n    infraName: \"nonprod\",\n});\n// Here’s how to create a tenant by providing the infrastructure name for the plan_id field.\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"qa\",\n    planId: infra.then(infra =\u003e infra.infraName),\n});\n// Attaches a managed IAM policy to an IAM role.\nconst amazonAPIGatewayInvokeFullAccess = new aws.index.IamRolePolicyAttachment(\"AmazonAPIGatewayInvokeFullAccess\", {\n    role: `duploservices-${tenant.accountName}`,\n    policyArn: \"arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_duplocloud as duplocloud\n\n# A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.\ninfra = duplocloud.get_infrastructure(infra_name=\"nonprod\")\n# Here’s how to create a tenant by providing the infrastructure name for the plan_id field.\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"qa\",\n    plan_id=infra.infra_name)\n# Attaches a managed IAM policy to an IAM role.\namazon_api_gateway_invoke_full_access = aws.index.IamRolePolicyAttachment(\"AmazonAPIGatewayInvokeFullAccess\",\n    role=fduploservices-{tenant.account_name},\n    policy_arn=arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.\n    var infra = Duplocloud.GetInfrastructure.Invoke(new()\n    {\n        InfraName = \"nonprod\",\n    });\n\n    // Here’s how to create a tenant by providing the infrastructure name for the plan_id field.\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"qa\",\n        PlanId = infra.Apply(getInfrastructureResult =\u003e getInfrastructureResult.InfraName),\n    });\n\n    // Attaches a managed IAM policy to an IAM role.\n    var amazonAPIGatewayInvokeFullAccess = new Aws.Index.IamRolePolicyAttachment(\"AmazonAPIGatewayInvokeFullAccess\", new()\n    {\n        Role = $\"duploservices-{tenant.AccountName}\",\n        PolicyArn = \"arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi-aws/sdk/go/aws\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.\n\t\tinfra, err := duplocloud.LookupInfrastructure(ctx, \u0026duplocloud.LookupInfrastructureArgs{\n\t\t\tInfraName: pulumi.StringRef(\"nonprod\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Here’s how to create a tenant by providing the infrastructure name for the plan_id field.\n\t\ttenant, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"qa\"),\n\t\t\tPlanId:      pulumi.String(infra.InfraName),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Attaches a managed IAM policy to an IAM role.\n\t\t_, err = aws.NewIamRolePolicyAttachment(ctx, \"AmazonAPIGatewayInvokeFullAccess\", \u0026aws.IamRolePolicyAttachmentArgs{\n\t\t\tRole:      pulumi.Sprintf(\"duploservices-%v\", tenant.AccountName),\n\t\t\tPolicyArn: \"arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetInfrastructureArgs;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.aws.iamRolePolicyAttachment;\nimport com.pulumi.aws.IamRolePolicyAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.\n        final var infra = DuplocloudFunctions.getInfrastructure(GetInfrastructureArgs.builder()\n            .infraName(\"nonprod\")\n            .build());\n\n        // Here’s how to create a tenant by providing the infrastructure name for the plan_id field.\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"qa\")\n            .planId(infra.applyValue(getInfrastructureResult -\u003e getInfrastructureResult.infraName()))\n            .build());\n\n        // Attaches a managed IAM policy to an IAM role.\n        var amazonAPIGatewayInvokeFullAccess = new IamRolePolicyAttachment(\"amazonAPIGatewayInvokeFullAccess\", IamRolePolicyAttachmentArgs.builder()\n            .role(String.format(\"duploservices-%s\", tenant.accountName()))\n            .policyArn(\"arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Here’s how to create a tenant by providing the infrastructure name for the plan_id field.\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: qa\n      planId: ${infra.infraName}\n  # Attaches a managed IAM policy to an IAM role.\n  amazonAPIGatewayInvokeFullAccess:\n    type: aws:iamRolePolicyAttachment\n    name: AmazonAPIGatewayInvokeFullAccess\n    properties:\n      role: duploservices-${tenant.accountName}\n      policyArn: arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess\nvariables:\n  # A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.\n  infra:\n    fn::invoke:\n      function: duplocloud:getInfrastructure\n      arguments:\n        infraName: nonprod\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create duplocloud tenant named dev with security group rule to allow access from 10.220.0.0/16 on port 5432 in nonprod infra’\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst infra = duplocloud.getInfrastructure({\n    infraName: \"nonprod\",\n});\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"dev\",\n    planId: infra.then(infra =\u003e infra.infraName),\n});\n// Allow communication on port 5432 for the PostgreSQL database from the 10.220.0.0/16 subnet\nconst allowFromVpn = new duplocloud.TenantNetworkSecurityRule(\"allow_from_vpn\", {\n    tenantId: tenant.tenantId,\n    sourceAddress: \"10.220.0.0/16\",\n    protocol: \"tcp\",\n    fromPort: 5432,\n    toPort: 5432,\n    description: \"Allow communication from 10.220.0.0/16 on port 5432.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ninfra = duplocloud.get_infrastructure(infra_name=\"nonprod\")\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"dev\",\n    plan_id=infra.infra_name)\n# Allow communication on port 5432 for the PostgreSQL database from the 10.220.0.0/16 subnet\nallow_from_vpn = duplocloud.TenantNetworkSecurityRule(\"allow_from_vpn\",\n    tenant_id=tenant.tenant_id,\n    source_address=\"10.220.0.0/16\",\n    protocol=\"tcp\",\n    from_port=5432,\n    to_port=5432,\n    description=\"Allow communication from 10.220.0.0/16 on port 5432.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infra = Duplocloud.GetInfrastructure.Invoke(new()\n    {\n        InfraName = \"nonprod\",\n    });\n\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"dev\",\n        PlanId = infra.Apply(getInfrastructureResult =\u003e getInfrastructureResult.InfraName),\n    });\n\n    // Allow communication on port 5432 for the PostgreSQL database from the 10.220.0.0/16 subnet\n    var allowFromVpn = new Duplocloud.TenantNetworkSecurityRule(\"allow_from_vpn\", new()\n    {\n        TenantId = tenant.TenantId,\n        SourceAddress = \"10.220.0.0/16\",\n        Protocol = \"tcp\",\n        FromPort = 5432,\n        ToPort = 5432,\n        Description = \"Allow communication from 10.220.0.0/16 on port 5432.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinfra, err := duplocloud.LookupInfrastructure(ctx, \u0026duplocloud.LookupInfrastructureArgs{\n\t\t\tInfraName: pulumi.StringRef(\"nonprod\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttenant, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"dev\"),\n\t\t\tPlanId:      pulumi.String(infra.InfraName),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Allow communication on port 5432 for the PostgreSQL database from the 10.220.0.0/16 subnet\n\t\t_, err = duplocloud.NewTenantNetworkSecurityRule(ctx, \"allow_from_vpn\", \u0026duplocloud.TenantNetworkSecurityRuleArgs{\n\t\t\tTenantId:      tenant.TenantId,\n\t\t\tSourceAddress: pulumi.String(\"10.220.0.0/16\"),\n\t\t\tProtocol:      pulumi.String(\"tcp\"),\n\t\t\tFromPort:      pulumi.Int(5432),\n\t\t\tToPort:        pulumi.Int(5432),\n\t\t\tDescription:   pulumi.String(\"Allow communication from 10.220.0.0/16 on port 5432.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetInfrastructureArgs;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.TenantNetworkSecurityRule;\nimport com.pulumi.duplocloud.TenantNetworkSecurityRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var infra = DuplocloudFunctions.getInfrastructure(GetInfrastructureArgs.builder()\n            .infraName(\"nonprod\")\n            .build());\n\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"dev\")\n            .planId(infra.applyValue(getInfrastructureResult -\u003e getInfrastructureResult.infraName()))\n            .build());\n\n        // Allow communication on port 5432 for the PostgreSQL database from the 10.220.0.0/16 subnet\n        var allowFromVpn = new TenantNetworkSecurityRule(\"allowFromVpn\", TenantNetworkSecurityRuleArgs.builder()\n            .tenantId(tenant.tenantId())\n            .sourceAddress(\"10.220.0.0/16\")\n            .protocol(\"tcp\")\n            .fromPort(5432)\n            .toPort(5432)\n            .description(\"Allow communication from 10.220.0.0/16 on port 5432.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: dev\n      planId: ${infra.infraName}\n  # Allow communication on port 5432 for the PostgreSQL database from the 10.220.0.0/16 subnet\n  allowFromVpn:\n    type: duplocloud:TenantNetworkSecurityRule\n    name: allow_from_vpn\n    properties:\n      tenantId: ${tenant.tenantId}\n      sourceAddress: 10.220.0.0/16\n      protocol: tcp\n      fromPort: 5432\n      toPort: 5432\n      description: Allow communication from 10.220.0.0/16 on port 5432.\nvariables:\n  infra:\n    fn::invoke:\n      function: duplocloud:getInfrastructure\n      arguments:\n        infraName: nonprod\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Setup duplocloud tenant named dev with security group rule to allow access from 10.220.0.0/16 on port 22 in nonprod infra’\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst infra = duplocloud.getInfrastructure({\n    infraName: \"nonprod\",\n});\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"dev\",\n    planId: infra.then(infra =\u003e infra.infraName),\n});\n// Allow communication on port 22 from the 10.220.0.0/16 subnet.\nconst allowFromVpn = new duplocloud.TenantNetworkSecurityRule(\"allow_from_vpn\", {\n    tenantId: tenant.tenantId,\n    sourceAddress: \"10.220.0.0/16\",\n    protocol: \"tcp\",\n    fromPort: 22,\n    toPort: 22,\n    description: \"Allow communication from 10.220.0.0/16 on port 22.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ninfra = duplocloud.get_infrastructure(infra_name=\"nonprod\")\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"dev\",\n    plan_id=infra.infra_name)\n# Allow communication on port 22 from the 10.220.0.0/16 subnet.\nallow_from_vpn = duplocloud.TenantNetworkSecurityRule(\"allow_from_vpn\",\n    tenant_id=tenant.tenant_id,\n    source_address=\"10.220.0.0/16\",\n    protocol=\"tcp\",\n    from_port=22,\n    to_port=22,\n    description=\"Allow communication from 10.220.0.0/16 on port 22.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infra = Duplocloud.GetInfrastructure.Invoke(new()\n    {\n        InfraName = \"nonprod\",\n    });\n\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"dev\",\n        PlanId = infra.Apply(getInfrastructureResult =\u003e getInfrastructureResult.InfraName),\n    });\n\n    // Allow communication on port 22 from the 10.220.0.0/16 subnet.\n    var allowFromVpn = new Duplocloud.TenantNetworkSecurityRule(\"allow_from_vpn\", new()\n    {\n        TenantId = tenant.TenantId,\n        SourceAddress = \"10.220.0.0/16\",\n        Protocol = \"tcp\",\n        FromPort = 22,\n        ToPort = 22,\n        Description = \"Allow communication from 10.220.0.0/16 on port 22.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinfra, err := duplocloud.LookupInfrastructure(ctx, \u0026duplocloud.LookupInfrastructureArgs{\n\t\t\tInfraName: pulumi.StringRef(\"nonprod\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttenant, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"dev\"),\n\t\t\tPlanId:      pulumi.String(infra.InfraName),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Allow communication on port 22 from the 10.220.0.0/16 subnet.\n\t\t_, err = duplocloud.NewTenantNetworkSecurityRule(ctx, \"allow_from_vpn\", \u0026duplocloud.TenantNetworkSecurityRuleArgs{\n\t\t\tTenantId:      tenant.TenantId,\n\t\t\tSourceAddress: pulumi.String(\"10.220.0.0/16\"),\n\t\t\tProtocol:      pulumi.String(\"tcp\"),\n\t\t\tFromPort:      pulumi.Int(22),\n\t\t\tToPort:        pulumi.Int(22),\n\t\t\tDescription:   pulumi.String(\"Allow communication from 10.220.0.0/16 on port 22.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetInfrastructureArgs;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.TenantNetworkSecurityRule;\nimport com.pulumi.duplocloud.TenantNetworkSecurityRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var infra = DuplocloudFunctions.getInfrastructure(GetInfrastructureArgs.builder()\n            .infraName(\"nonprod\")\n            .build());\n\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"dev\")\n            .planId(infra.applyValue(getInfrastructureResult -\u003e getInfrastructureResult.infraName()))\n            .build());\n\n        // Allow communication on port 22 from the 10.220.0.0/16 subnet.\n        var allowFromVpn = new TenantNetworkSecurityRule(\"allowFromVpn\", TenantNetworkSecurityRuleArgs.builder()\n            .tenantId(tenant.tenantId())\n            .sourceAddress(\"10.220.0.0/16\")\n            .protocol(\"tcp\")\n            .fromPort(22)\n            .toPort(22)\n            .description(\"Allow communication from 10.220.0.0/16 on port 22.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: dev\n      planId: ${infra.infraName}\n  # Allow communication on port 22 from the 10.220.0.0/16 subnet.\n  allowFromVpn:\n    type: duplocloud:TenantNetworkSecurityRule\n    name: allow_from_vpn\n    properties:\n      tenantId: ${tenant.tenantId}\n      sourceAddress: 10.220.0.0/16\n      protocol: tcp\n      fromPort: 22\n      toPort: 22\n      description: Allow communication from 10.220.0.0/16 on port 22.\nvariables:\n  infra:\n    fn::invoke:\n      function: duplocloud:getInfrastructure\n      arguments:\n        infraName: nonprod\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Provision a tenant named 'myapp' within the infrastructure 'myinfra' and disable deletion protection.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst infra = duplocloud.getInfrastructure({\n    infraName: \"myinfra\",\n});\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"myapp\",\n    planId: infra.then(infra =\u003e infra.infraName),\n    allowDeletion: true,\n});\n// Reference the tenant_id field from the duplocloud_tenant resource.\nconst tenantConfig = new duplocloud.TenantConfig(\"tenant_config\", {\n    tenantId: tenant.tenantId,\n    settings: [{\n        key: \"delete_protection\",\n        value: \"false\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ninfra = duplocloud.get_infrastructure(infra_name=\"myinfra\")\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"myapp\",\n    plan_id=infra.infra_name,\n    allow_deletion=True)\n# Reference the tenant_id field from the duplocloud_tenant resource.\ntenant_config = duplocloud.TenantConfig(\"tenant_config\",\n    tenant_id=tenant.tenant_id,\n    settings=[{\n        \"key\": \"delete_protection\",\n        \"value\": \"false\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infra = Duplocloud.GetInfrastructure.Invoke(new()\n    {\n        InfraName = \"myinfra\",\n    });\n\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = infra.Apply(getInfrastructureResult =\u003e getInfrastructureResult.InfraName),\n        AllowDeletion = true,\n    });\n\n    // Reference the tenant_id field from the duplocloud_tenant resource.\n    var tenantConfig = new Duplocloud.TenantConfig(\"tenant_config\", new()\n    {\n        TenantId = tenant.TenantId,\n        Settings = new[]\n        {\n            new Duplocloud.Inputs.TenantConfigSettingArgs\n            {\n                Key = \"delete_protection\",\n                Value = \"false\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinfra, err := duplocloud.LookupInfrastructure(ctx, \u0026duplocloud.LookupInfrastructureArgs{\n\t\t\tInfraName: pulumi.StringRef(\"myinfra\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttenant, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName:   pulumi.String(\"myapp\"),\n\t\t\tPlanId:        pulumi.String(infra.InfraName),\n\t\t\tAllowDeletion: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Reference the tenant_id field from the duplocloud_tenant resource.\n\t\t_, err = duplocloud.NewTenantConfig(ctx, \"tenant_config\", \u0026duplocloud.TenantConfigArgs{\n\t\t\tTenantId: tenant.TenantId,\n\t\t\tSettings: duplocloud.TenantConfigSettingArray{\n\t\t\t\t\u0026duplocloud.TenantConfigSettingArgs{\n\t\t\t\t\tKey:   pulumi.String(\"delete_protection\"),\n\t\t\t\t\tValue: pulumi.String(\"false\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetInfrastructureArgs;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.TenantConfig;\nimport com.pulumi.duplocloud.TenantConfigArgs;\nimport com.pulumi.duplocloud.inputs.TenantConfigSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var infra = DuplocloudFunctions.getInfrastructure(GetInfrastructureArgs.builder()\n            .infraName(\"myinfra\")\n            .build());\n\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(infra.applyValue(getInfrastructureResult -\u003e getInfrastructureResult.infraName()))\n            .allowDeletion(true)\n            .build());\n\n        // Reference the tenant_id field from the duplocloud_tenant resource.\n        var tenantConfig = new TenantConfig(\"tenantConfig\", TenantConfigArgs.builder()\n            .tenantId(tenant.tenantId())\n            .settings(TenantConfigSettingArgs.builder()\n                .key(\"delete_protection\")\n                .value(\"false\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: ${infra.infraName}\n      allowDeletion: true\n  # Reference the tenant_id field from the duplocloud_tenant resource.\n  tenantConfig:\n    type: duplocloud:TenantConfig\n    name: tenant_config\n    properties:\n      tenantId: ${tenant.tenantId}\n      settings:\n        - key: delete_protection\n          value: 'false'\nvariables:\n  infra:\n    fn::invoke:\n      function: duplocloud:getInfrastructure\n      arguments:\n        infraName: myinfra\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Provision a tenant named 'myapp' within the infrastructure 'myinfra', and ensure that the S3 bucket has public access blocked and SSL enforcement enabled in the S3 bucket policy.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst infra = duplocloud.getInfrastructure({\n    infraName: \"myinfra\",\n});\nconst tenant = new duplocloud.Tenant(\"tenant\", {\n    accountName: \"myapp\",\n    planId: infra.then(infra =\u003e infra.infraName),\n    allowDeletion: true,\n});\n// Reference the tenant_id field from the duplocloud_tenant resource.\nconst tenantConfig = new duplocloud.TenantConfig(\"tenant_config\", {\n    tenantId: tenant.tenantId,\n    settings: [\n        {\n            key: \"block_public_access_to_s3\",\n            value: \"true\",\n        },\n        {\n            key: \"enforce_ssl_for_s3\",\n            value: \"true\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ninfra = duplocloud.get_infrastructure(infra_name=\"myinfra\")\ntenant = duplocloud.Tenant(\"tenant\",\n    account_name=\"myapp\",\n    plan_id=infra.infra_name,\n    allow_deletion=True)\n# Reference the tenant_id field from the duplocloud_tenant resource.\ntenant_config = duplocloud.TenantConfig(\"tenant_config\",\n    tenant_id=tenant.tenant_id,\n    settings=[\n        {\n            \"key\": \"block_public_access_to_s3\",\n            \"value\": \"true\",\n        },\n        {\n            \"key\": \"enforce_ssl_for_s3\",\n            \"value\": \"true\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infra = Duplocloud.GetInfrastructure.Invoke(new()\n    {\n        InfraName = \"myinfra\",\n    });\n\n    var tenant = new Duplocloud.Tenant(\"tenant\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = infra.Apply(getInfrastructureResult =\u003e getInfrastructureResult.InfraName),\n        AllowDeletion = true,\n    });\n\n    // Reference the tenant_id field from the duplocloud_tenant resource.\n    var tenantConfig = new Duplocloud.TenantConfig(\"tenant_config\", new()\n    {\n        TenantId = tenant.TenantId,\n        Settings = new[]\n        {\n            new Duplocloud.Inputs.TenantConfigSettingArgs\n            {\n                Key = \"block_public_access_to_s3\",\n                Value = \"true\",\n            },\n            new Duplocloud.Inputs.TenantConfigSettingArgs\n            {\n                Key = \"enforce_ssl_for_s3\",\n                Value = \"true\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinfra, err := duplocloud.LookupInfrastructure(ctx, \u0026duplocloud.LookupInfrastructureArgs{\n\t\t\tInfraName: pulumi.StringRef(\"myinfra\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttenant, err := duplocloud.NewTenant(ctx, \"tenant\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName:   pulumi.String(\"myapp\"),\n\t\t\tPlanId:        pulumi.String(infra.InfraName),\n\t\t\tAllowDeletion: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Reference the tenant_id field from the duplocloud_tenant resource.\n\t\t_, err = duplocloud.NewTenantConfig(ctx, \"tenant_config\", \u0026duplocloud.TenantConfigArgs{\n\t\t\tTenantId: tenant.TenantId,\n\t\t\tSettings: duplocloud.TenantConfigSettingArray{\n\t\t\t\t\u0026duplocloud.TenantConfigSettingArgs{\n\t\t\t\t\tKey:   pulumi.String(\"block_public_access_to_s3\"),\n\t\t\t\t\tValue: pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.TenantConfigSettingArgs{\n\t\t\t\t\tKey:   pulumi.String(\"enforce_ssl_for_s3\"),\n\t\t\t\t\tValue: pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetInfrastructureArgs;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.TenantConfig;\nimport com.pulumi.duplocloud.TenantConfigArgs;\nimport com.pulumi.duplocloud.inputs.TenantConfigSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var infra = DuplocloudFunctions.getInfrastructure(GetInfrastructureArgs.builder()\n            .infraName(\"myinfra\")\n            .build());\n\n        var tenant = new Tenant(\"tenant\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(infra.applyValue(getInfrastructureResult -\u003e getInfrastructureResult.infraName()))\n            .allowDeletion(true)\n            .build());\n\n        // Reference the tenant_id field from the duplocloud_tenant resource.\n        var tenantConfig = new TenantConfig(\"tenantConfig\", TenantConfigArgs.builder()\n            .tenantId(tenant.tenantId())\n            .settings(            \n                TenantConfigSettingArgs.builder()\n                    .key(\"block_public_access_to_s3\")\n                    .value(\"true\")\n                    .build(),\n                TenantConfigSettingArgs.builder()\n                    .key(\"enforce_ssl_for_s3\")\n                    .value(\"true\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tenant:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: ${infra.infraName}\n      allowDeletion: true\n  # Reference the tenant_id field from the duplocloud_tenant resource.\n  tenantConfig:\n    type: duplocloud:TenantConfig\n    name: tenant_config\n    properties:\n      tenantId: ${tenant.tenantId}\n      settings:\n        - key: block_public_access_to_s3\n          value: 'true'\n        - key: enforce_ssl_for_s3\n          value: 'true'\nvariables:\n  infra:\n    fn::invoke:\n      function: duplocloud:getInfrastructure\n      arguments:\n        infraName: myinfra\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import duplocloud:index/tenant:Tenant myapp v2/admin/TenantV2/*TENANT_ID*\n```\n\n",
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The name of the tenant. Tenant names are globally unique, and cannot be a prefix of any other tenant name.\n"
                },
                "allowDeletion": {
                    "type": "boolean",
                    "description": "Whether or not to even try and delete the tenant. *NOTE: This only works if you have disabled deletion protection for the tenant.* Defaults to `false`.\n"
                },
                "existingK8sNamespace": {
                    "type": "string",
                    "description": "Existing kubernetes namespace to use by the tenant. *NOTE: This is an advanced feature, please contact your DuploCloud administrator for help if you want to use this field.*\n"
                },
                "infraOwner": {
                    "type": "string"
                },
                "planId": {
                    "type": "string",
                    "description": "The name of the plan under which the tenant will be created.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/TenantPolicy:TenantPolicy"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/TenantTag:TenantTag"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "A GUID identifying the tenant. This is automatically generated by Duplo.\n"
                },
                "waitUntilCreated": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Duplo has created the tenant. Defaults to `true`.\n"
                },
                "waitUntilDeleted": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Duplo has destroyed the tenant. Defaults to `false`.\n"
                }
            },
            "required": [
                "accountName",
                "existingK8sNamespace",
                "infraOwner",
                "planId",
                "policies",
                "tags",
                "tenantId"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "The name of the tenant. Tenant names are globally unique, and cannot be a prefix of any other tenant name.\n",
                    "willReplaceOnChanges": true
                },
                "allowDeletion": {
                    "type": "boolean",
                    "description": "Whether or not to even try and delete the tenant. *NOTE: This only works if you have disabled deletion protection for the tenant.* Defaults to `false`.\n"
                },
                "existingK8sNamespace": {
                    "type": "string",
                    "description": "Existing kubernetes namespace to use by the tenant. *NOTE: This is an advanced feature, please contact your DuploCloud administrator for help if you want to use this field.*\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The name of the plan under which the tenant will be created.\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilCreated": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Duplo has created the tenant. Defaults to `true`.\n"
                },
                "waitUntilDeleted": {
                    "type": "boolean",
                    "description": "Whether or not to wait until Duplo has destroyed the tenant. Defaults to `false`.\n"
                }
            },
            "requiredInputs": [
                "accountName",
                "planId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tenant resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "The name of the tenant. Tenant names are globally unique, and cannot be a prefix of any other tenant name.\n",
                        "willReplaceOnChanges": true
                    },
                    "allowDeletion": {
                        "type": "boolean",
                        "description": "Whether or not to even try and delete the tenant. *NOTE: This only works if you have disabled deletion protection for the tenant.* Defaults to `false`.\n"
                    },
                    "existingK8sNamespace": {
                        "type": "string",
                        "description": "Existing kubernetes namespace to use by the tenant. *NOTE: This is an advanced feature, please contact your DuploCloud administrator for help if you want to use this field.*\n"
                    },
                    "infraOwner": {
                        "type": "string"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The name of the plan under which the tenant will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/TenantPolicy:TenantPolicy"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/TenantTag:TenantTag"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "A GUID identifying the tenant. This is automatically generated by Duplo.\n"
                    },
                    "waitUntilCreated": {
                        "type": "boolean",
                        "description": "Whether or not to wait until Duplo has created the tenant. Defaults to `true`.\n"
                    },
                    "waitUntilDeleted": {
                        "type": "boolean",
                        "description": "Whether or not to wait until Duplo has destroyed the tenant. Defaults to `false`.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/tenantAccessGrant:TenantAccessGrant": {
            "description": "`duplocloud.TenantAccessGrant` manages a tenant access grant in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst grantor = duplocloud.getTenant({\n    name: \"tenant1\",\n});\nconst grantee = duplocloud.getTenant({\n    name: \"tenant2\",\n});\nconst dynamodbGrant = new duplocloud.TenantAccessGrant(\"dynamodbGrant\", {\n    granteeTenantId: grantee.then(grantee =\u003e grantee.id),\n    grantorTenantId: grantor.then(grantor =\u003e grantor.id),\n    grantArea: \"dynamodb\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ngrantor = duplocloud.get_tenant(name=\"tenant1\")\ngrantee = duplocloud.get_tenant(name=\"tenant2\")\ndynamodb_grant = duplocloud.TenantAccessGrant(\"dynamodbGrant\",\n    grantee_tenant_id=grantee.id,\n    grantor_tenant_id=grantor.id,\n    grant_area=\"dynamodb\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var grantor = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"tenant1\",\n    });\n\n    var grantee = Duplocloud.GetTenant.Invoke(new()\n    {\n        Name = \"tenant2\",\n    });\n\n    var dynamodbGrant = new Duplocloud.TenantAccessGrant(\"dynamodbGrant\", new()\n    {\n        GranteeTenantId = grantee.Apply(getTenantResult =\u003e getTenantResult.Id),\n        GrantorTenantId = grantor.Apply(getTenantResult =\u003e getTenantResult.Id),\n        GrantArea = \"dynamodb\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgrantor, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"tenant1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgrantee, err := duplocloud.LookupTenant(ctx, \u0026duplocloud.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"tenant2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewTenantAccessGrant(ctx, \"dynamodbGrant\", \u0026duplocloud.TenantAccessGrantArgs{\n\t\t\tGranteeTenantId: pulumi.String(grantee.Id),\n\t\t\tGrantorTenantId: pulumi.String(grantor.Id),\n\t\t\tGrantArea:       pulumi.String(\"dynamodb\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetTenantArgs;\nimport com.pulumi.duplocloud.TenantAccessGrant;\nimport com.pulumi.duplocloud.TenantAccessGrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var grantor = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"tenant1\")\n            .build());\n\n        final var grantee = DuplocloudFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"tenant2\")\n            .build());\n\n        var dynamodbGrant = new TenantAccessGrant(\"dynamodbGrant\", TenantAccessGrantArgs.builder()\n            .granteeTenantId(grantee.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .grantorTenantId(grantor.applyValue(getTenantResult -\u003e getTenantResult.id()))\n            .grantArea(\"dynamodb\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dynamodbGrant:\n    type: duplocloud:TenantAccessGrant\n    properties:\n      granteeTenantId: ${grantee.id}\n      grantorTenantId: ${grantor.id}\n      grantArea: dynamodb\nvariables:\n  grantor:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: tenant1\n  grantee:\n    fn::invoke:\n      function: duplocloud:getTenant\n      arguments:\n        name: tenant2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import duplocloud:index/tenantAccessGrant:TenantAccessGrant dynamodbGrant *GRANEE_TENANT_ID*/*GRANTOR_TENANT_ID*/*GRANTED_AREA*\n```\n\n",
            "properties": {
                "grantArea": {
                    "type": "string",
                    "description": "The area the grant allows access to. Currently supported: ['s3', 'dynamodb', 'kms']\n"
                },
                "granteeTenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that will receive the granted access.\n"
                },
                "grantorTenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that will grant the access.\n"
                }
            },
            "required": [
                "grantArea",
                "granteeTenantId",
                "grantorTenantId"
            ],
            "inputProperties": {
                "grantArea": {
                    "type": "string",
                    "description": "The area the grant allows access to. Currently supported: ['s3', 'dynamodb', 'kms']\n",
                    "willReplaceOnChanges": true
                },
                "granteeTenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that will receive the granted access.\n",
                    "willReplaceOnChanges": true
                },
                "grantorTenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that will grant the access.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "grantArea",
                "granteeTenantId",
                "grantorTenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TenantAccessGrant resources.\n",
                "properties": {
                    "grantArea": {
                        "type": "string",
                        "description": "The area the grant allows access to. Currently supported: ['s3', 'dynamodb', 'kms']\n",
                        "willReplaceOnChanges": true
                    },
                    "granteeTenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that will receive the granted access.\n",
                        "willReplaceOnChanges": true
                    },
                    "grantorTenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that will grant the access.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/tenantCleanupTimers:TenantCleanupTimers": {
            "description": "Manage tenant expiry in DuploCloud\n\n## Import\n\n```sh\n$ pulumi import duplocloud:index/tenantCleanupTimers:TenantCleanupTimers mytimers *TENANT_ID*\n```\n\n",
            "properties": {
                "expiryTime": {
                    "type": "string",
                    "description": "The expiry time of the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)\n"
                },
                "pauseTime": {
                    "type": "string",
                    "description": "The time to pause the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)\n"
                },
                "removeExpiryTime": {
                    "type": "boolean",
                    "description": "Whether to remove the expiry time.\n"
                },
                "removePauseTime": {
                    "type": "boolean",
                    "description": "Whether to remove the pause time.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the expiry will be created in.\n"
                }
            },
            "required": [
                "tenantId"
            ],
            "inputProperties": {
                "expiryTime": {
                    "type": "string",
                    "description": "The expiry time of the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)\n"
                },
                "pauseTime": {
                    "type": "string",
                    "description": "The time to pause the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)\n"
                },
                "removeExpiryTime": {
                    "type": "boolean",
                    "description": "Whether to remove the expiry time.\n"
                },
                "removePauseTime": {
                    "type": "boolean",
                    "description": "Whether to remove the pause time.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the expiry will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TenantCleanupTimers resources.\n",
                "properties": {
                    "expiryTime": {
                        "type": "string",
                        "description": "The expiry time of the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)\n"
                    },
                    "pauseTime": {
                        "type": "string",
                        "description": "The time to pause the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)\n"
                    },
                    "removeExpiryTime": {
                        "type": "boolean",
                        "description": "Whether to remove the expiry time.\n"
                    },
                    "removePauseTime": {
                        "type": "boolean",
                        "description": "Whether to remove the pause time.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the expiry will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/tenantConfig:TenantConfig": {
            "description": "`duplocloud.TenantConfig` manages a tenant's configuration in Duplo.\n\nTenant configuration is initially populated by Duplo when a tenant is created.  This resource allows you take control of individual configuration settings for a specific tenant.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\nconst myappTenantConfig = new duplocloud.TenantConfig(\"myapp\", {\n    tenantId: myapp.tenantId,\n    settings: [\n        {\n            key: \"block_public_access_to_s3\",\n            value: \"true\",\n        },\n        {\n            key: \"enforce_ssl_for_s3\",\n            value: \"true\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\nmyapp_tenant_config = duplocloud.TenantConfig(\"myapp\",\n    tenant_id=myapp.tenant_id,\n    settings=[\n        {\n            \"key\": \"block_public_access_to_s3\",\n            \"value\": \"true\",\n        },\n        {\n            \"key\": \"enforce_ssl_for_s3\",\n            \"value\": \"true\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    var myappTenantConfig = new Duplocloud.TenantConfig(\"myapp\", new()\n    {\n        TenantId = myapp.TenantId,\n        Settings = new[]\n        {\n            new Duplocloud.Inputs.TenantConfigSettingArgs\n            {\n                Key = \"block_public_access_to_s3\",\n                Value = \"true\",\n            },\n            new Duplocloud.Inputs.TenantConfigSettingArgs\n            {\n                Key = \"enforce_ssl_for_s3\",\n                Value = \"true\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = duplocloud.NewTenantConfig(ctx, \"myapp\", \u0026duplocloud.TenantConfigArgs{\n\t\t\tTenantId: myapp.TenantId,\n\t\t\tSettings: duplocloud.TenantConfigSettingArray{\n\t\t\t\t\u0026duplocloud.TenantConfigSettingArgs{\n\t\t\t\t\tKey:   pulumi.String(\"block_public_access_to_s3\"),\n\t\t\t\t\tValue: pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t\t\u0026duplocloud.TenantConfigSettingArgs{\n\t\t\t\t\tKey:   pulumi.String(\"enforce_ssl_for_s3\"),\n\t\t\t\t\tValue: pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.TenantConfig;\nimport com.pulumi.duplocloud.TenantConfigArgs;\nimport com.pulumi.duplocloud.inputs.TenantConfigSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        var myappTenantConfig = new TenantConfig(\"myappTenantConfig\", TenantConfigArgs.builder()\n            .tenantId(myapp.tenantId())\n            .settings(            \n                TenantConfigSettingArgs.builder()\n                    .key(\"block_public_access_to_s3\")\n                    .value(\"true\")\n                    .build(),\n                TenantConfigSettingArgs.builder()\n                    .key(\"enforce_ssl_for_s3\")\n                    .value(\"true\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  myappTenantConfig:\n    type: duplocloud:TenantConfig\n    name: myapp\n    properties:\n      tenantId: ${myapp.tenantId}\n      settings:\n        - key: block_public_access_to_s3\n          value: 'true'\n        - key: enforce_ssl_for_s3\n          value: 'true'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import duplocloud:index/tenantConfig:TenantConfig myapp TENANT_ID\n```\n\n",
            "properties": {
                "deleteUnspecifiedSettings": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any settings not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/TenantConfigMetadata:TenantConfigMetadata"
                    },
                    "description": "A complete list of configuration settings for this tenant, even ones not being managed by this resource.\n"
                },
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/TenantConfigSetting:TenantConfigSetting"
                    },
                    "description": "A list of configuration settings to manage, expressed as key / value pairs.\n"
                },
                "specifiedSettings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of configuration setting key being managed by this resource.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant to configure.\n"
                }
            },
            "required": [
                "metadatas",
                "specifiedSettings",
                "tenantId"
            ],
            "inputProperties": {
                "deleteUnspecifiedSettings": {
                    "type": "boolean",
                    "description": "Whether or not this resource should delete any settings not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                },
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/TenantConfigSetting:TenantConfigSetting"
                    },
                    "description": "A list of configuration settings to manage, expressed as key / value pairs.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant to configure.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TenantConfig resources.\n",
                "properties": {
                    "deleteUnspecifiedSettings": {
                        "type": "boolean",
                        "description": "Whether or not this resource should delete any settings not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/TenantConfigMetadata:TenantConfigMetadata"
                        },
                        "description": "A complete list of configuration settings for this tenant, even ones not being managed by this resource.\n"
                    },
                    "settings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/TenantConfigSetting:TenantConfigSetting"
                        },
                        "description": "A list of configuration settings to manage, expressed as key / value pairs.\n"
                    },
                    "specifiedSettings": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of configuration setting key being managed by this resource.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant to configure.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/tenantNetworkSecurityRule:TenantNetworkSecurityRule": {
            "description": "`duplocloud.TenantNetworkSecurityRule` manages a single network single rule for a Duplo tenant.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\n// Allow the \"default\" tenant to send HTTPS requests to \"myapp\"\nconst myrule = new duplocloud.TenantNetworkSecurityRule(\"myrule\", {\n    tenantId: myapp.tenantId,\n    sourceTenant: \"default\",\n    protocol: \"tcp\",\n    fromPort: 443,\n    toPort: 443,\n    description: \"Allow the default tenant to send HTTPS traffic\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\n# Allow the \"default\" tenant to send HTTPS requests to \"myapp\"\nmyrule = duplocloud.TenantNetworkSecurityRule(\"myrule\",\n    tenant_id=myapp.tenant_id,\n    source_tenant=\"default\",\n    protocol=\"tcp\",\n    from_port=443,\n    to_port=443,\n    description=\"Allow the default tenant to send HTTPS traffic\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    // Allow the \"default\" tenant to send HTTPS requests to \"myapp\"\n    var myrule = new Duplocloud.TenantNetworkSecurityRule(\"myrule\", new()\n    {\n        TenantId = myapp.TenantId,\n        SourceTenant = \"default\",\n        Protocol = \"tcp\",\n        FromPort = 443,\n        ToPort = 443,\n        Description = \"Allow the default tenant to send HTTPS traffic\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Allow the \"default\" tenant to send HTTPS requests to \"myapp\"\n\t\t_, err = duplocloud.NewTenantNetworkSecurityRule(ctx, \"myrule\", \u0026duplocloud.TenantNetworkSecurityRuleArgs{\n\t\t\tTenantId:     myapp.TenantId,\n\t\t\tSourceTenant: pulumi.String(\"default\"),\n\t\t\tProtocol:     pulumi.String(\"tcp\"),\n\t\t\tFromPort:     pulumi.Int(443),\n\t\t\tToPort:       pulumi.Int(443),\n\t\t\tDescription:  pulumi.String(\"Allow the default tenant to send HTTPS traffic\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.TenantNetworkSecurityRule;\nimport com.pulumi.duplocloud.TenantNetworkSecurityRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        // Allow the \"default\" tenant to send HTTPS requests to \"myapp\"\n        var myrule = new TenantNetworkSecurityRule(\"myrule\", TenantNetworkSecurityRuleArgs.builder()\n            .tenantId(myapp.tenantId())\n            .sourceTenant(\"default\")\n            .protocol(\"tcp\")\n            .fromPort(443)\n            .toPort(443)\n            .description(\"Allow the default tenant to send HTTPS traffic\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  # Allow the \"default\" tenant to send HTTPS requests to \"myapp\"\n  myrule:\n    type: duplocloud:TenantNetworkSecurityRule\n    properties:\n      tenantId: ${myapp.tenantId}\n      sourceTenant: default\n      protocol: tcp\n      fromPort: 443\n      toPort: 443\n      description: Allow the default tenant to send HTTPS traffic\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample 1: Importing a \"source_tenant\" rule:\n\n - TENANT_ID is the target tenant GUID\n\n - 0 is the rule type\n\n - SOURCE_TENANT is the source tenant NAME\n\n```sh\n$ pulumi import duplocloud:index/tenantNetworkSecurityRule:TenantNetworkSecurityRule myrule TENANT_ID/0/SOURCE_TENANT/PROTOCOL/FROM_PORT/TO_PORT\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description for this rule.\n"
                },
                "fromPort": {
                    "type": "integer",
                    "description": "The start of a port range to allow traffic to. Defaults to `0`.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol.  Must be one of:  `tcp`, `udp`, `icmp` Defaults to `tcp`.\n"
                },
                "sourceAddress": {
                    "type": "string",
                    "description": "The source CIDR block to allow traffic from. Only one of `source_tenant` or `source_address` may be specified.\n"
                },
                "sourceTenant": {
                    "type": "string",
                    "description": "The source tenant name (*not* GUID) to allow traffic from. Only one of `source_tenant` or `source_address` may be specified.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the network security rule will be created in.\n"
                },
                "toPort": {
                    "type": "integer",
                    "description": "The end of a port range to allow traffic to. Defaults to `65535`.\n"
                }
            },
            "required": [
                "description",
                "tenantId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for this rule.\n",
                    "willReplaceOnChanges": true
                },
                "fromPort": {
                    "type": "integer",
                    "description": "The start of a port range to allow traffic to. Defaults to `0`.\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol.  Must be one of:  `tcp`, `udp`, `icmp` Defaults to `tcp`.\n",
                    "willReplaceOnChanges": true
                },
                "sourceAddress": {
                    "type": "string",
                    "description": "The source CIDR block to allow traffic from. Only one of `source_tenant` or `source_address` may be specified.\n",
                    "willReplaceOnChanges": true
                },
                "sourceTenant": {
                    "type": "string",
                    "description": "The source tenant name (*not* GUID) to allow traffic from. Only one of `source_tenant` or `source_address` may be specified.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the network security rule will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "toPort": {
                    "type": "integer",
                    "description": "The end of a port range to allow traffic to. Defaults to `65535`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TenantNetworkSecurityRule resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for this rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "fromPort": {
                        "type": "integer",
                        "description": "The start of a port range to allow traffic to. Defaults to `0`.\n",
                        "willReplaceOnChanges": true
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The network protocol.  Must be one of:  `tcp`, `udp`, `icmp` Defaults to `tcp`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sourceAddress": {
                        "type": "string",
                        "description": "The source CIDR block to allow traffic from. Only one of `source_tenant` or `source_address` may be specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "sourceTenant": {
                        "type": "string",
                        "description": "The source tenant name (*not* GUID) to allow traffic from. Only one of `source_tenant` or `source_address` may be specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the network security rule will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "toPort": {
                        "type": "integer",
                        "description": "The end of a port range to allow traffic to. Defaults to `65535`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/tenantSecret:TenantSecret": {
            "description": "`duplocloud.TenantSecret` manages a tenant secret in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\n// Example with plaintext data.\nconst mysecret1 = new duplocloud.TenantSecret(\"mysecret1\", {\n    tenantId: myapp.tenantId,\n    nameSuffix: \"mytext\",\n    data: \"hi\",\n});\n// Example with JSON data.\nconst mysecret2 = new duplocloud.TenantSecret(\"mysecret2\", {\n    tenantId: myapp.tenantId,\n    nameSuffix: \"myjson\",\n    data: JSON.stringify({\n        foo: \"bar\",\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\n# Example with plaintext data.\nmysecret1 = duplocloud.TenantSecret(\"mysecret1\",\n    tenant_id=myapp.tenant_id,\n    name_suffix=\"mytext\",\n    data=\"hi\")\n# Example with JSON data.\nmysecret2 = duplocloud.TenantSecret(\"mysecret2\",\n    tenant_id=myapp.tenant_id,\n    name_suffix=\"myjson\",\n    data=json.dumps({\n        \"foo\": \"bar\",\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    // Example with plaintext data.\n    var mysecret1 = new Duplocloud.TenantSecret(\"mysecret1\", new()\n    {\n        TenantId = myapp.TenantId,\n        NameSuffix = \"mytext\",\n        Data = \"hi\",\n    });\n\n    // Example with JSON data.\n    var mysecret2 = new Duplocloud.TenantSecret(\"mysecret2\", new()\n    {\n        TenantId = myapp.TenantId,\n        NameSuffix = \"myjson\",\n        Data = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"foo\"] = \"bar\",\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Example with plaintext data.\n\t\t_, err = duplocloud.NewTenantSecret(ctx, \"mysecret1\", \u0026duplocloud.TenantSecretArgs{\n\t\t\tTenantId:   myapp.TenantId,\n\t\t\tNameSuffix: pulumi.String(\"mytext\"),\n\t\t\tData:       pulumi.String(\"hi\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"foo\": \"bar\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t// Example with JSON data.\n\t\t_, err = duplocloud.NewTenantSecret(ctx, \"mysecret2\", \u0026duplocloud.TenantSecretArgs{\n\t\t\tTenantId:   myapp.TenantId,\n\t\t\tNameSuffix: pulumi.String(\"myjson\"),\n\t\t\tData:       pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.TenantSecret;\nimport com.pulumi.duplocloud.TenantSecretArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        // Example with plaintext data.\n        var mysecret1 = new TenantSecret(\"mysecret1\", TenantSecretArgs.builder()\n            .tenantId(myapp.tenantId())\n            .nameSuffix(\"mytext\")\n            .data(\"hi\")\n            .build());\n\n        // Example with JSON data.\n        var mysecret2 = new TenantSecret(\"mysecret2\", TenantSecretArgs.builder()\n            .tenantId(myapp.tenantId())\n            .nameSuffix(\"myjson\")\n            .data(serializeJson(\n                jsonObject(\n                    jsonProperty(\"foo\", \"bar\")\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  # Example with plaintext data.\n  mysecret1:\n    type: duplocloud:TenantSecret\n    properties:\n      tenantId: ${myapp.tenantId}\n      nameSuffix: mytext\n      data: hi\n  # Example with JSON data.\n  mysecret2:\n    type: duplocloud:TenantSecret\n    properties:\n      tenantId: ${myapp.tenantId}\n      nameSuffix: myjson\n      data:\n        fn::toJSON:\n          foo: bar\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import duplocloud:index/tenantSecret:TenantSecret myapp TENANT_ID/SECRET_NAME\n```\n\n",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "The ARN of the created secret.\n"
                },
                "data": {
                    "type": "string",
                    "description": "The plaintext secret data. You can use the `jsonencode()` function to store JSON data in this field.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "The full name of the secret.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "The short name of the secret. You can get the fullname from the `name` attribute after creation.\n"
                },
                "rotationEnabled": {
                    "type": "boolean",
                    "description": "Whether or not rotation is enabled for this secret.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/duplocloud:index/TenantSecretTag:TenantSecretTag"
                    },
                    "description": "A list of tags for this secret.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the secret will be created in.\n"
                },
                "versionId": {
                    "type": "string",
                    "description": "The version ID of the secret.\n"
                }
            },
            "required": [
                "arn",
                "data",
                "name",
                "nameSuffix",
                "rotationEnabled",
                "tags",
                "tenantId",
                "versionId"
            ],
            "inputProperties": {
                "data": {
                    "type": "string",
                    "description": "The plaintext secret data. You can use the `jsonencode()` function to store JSON data in this field.\n",
                    "secret": true
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "The short name of the secret. You can get the fullname from the `name` attribute after creation.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the secret will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "data",
                "nameSuffix",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TenantSecret resources.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the created secret.\n"
                    },
                    "data": {
                        "type": "string",
                        "description": "The plaintext secret data. You can use the `jsonencode()` function to store JSON data in this field.\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The full name of the secret.\n"
                    },
                    "nameSuffix": {
                        "type": "string",
                        "description": "The short name of the secret. You can get the fullname from the `name` attribute after creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "rotationEnabled": {
                        "type": "boolean",
                        "description": "Whether or not rotation is enabled for this secret.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/TenantSecretTag:TenantSecretTag"
                        },
                        "description": "A list of tags for this secret.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the secret will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "versionId": {
                        "type": "string",
                        "description": "The version ID of the secret.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/tenantTag:TenantTag": {
            "description": "`duplocloud.TenantTag` manages a tenant tag in Duplo.\n\n## Import\n\nExample: Importing an existing S3 bucket\n\n - *TENANT_ID* is the tenant GUID\n\n - *TAG_KEY* is the tenant tag key\n\n#\n\n```sh\n$ pulumi import duplocloud:index/tenantTag:TenantTag tag TENANT_ID/TAG_KEY\n```\n\n",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Specify key for tag.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the tags will be created in.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Specify value for tag.\n"
                }
            },
            "required": [
                "key",
                "tenantId",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Specify key for tag.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The GUID of the tenant that the tags will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Specify value for tag.\n"
                }
            },
            "requiredInputs": [
                "key",
                "tenantId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TenantTag resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Specify key for tag.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the tags will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "Specify value for tag.\n"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/user:User": {
            "description": "`duplocloud.User` manages a user in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myuser = new duplocloud.User(\"myuser\", {\n    username: \"me@abc.com\",\n    roles: [\n        \"User\",\n        \"Administrator\",\n        \"SignupUser\",\n        \"SecurityAdmin\",\n    ],\n    isReadonly: false,\n    reallocateVpnAddress: false,\n    regenerateVpnPassword: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyuser = duplocloud.User(\"myuser\",\n    username=\"me@abc.com\",\n    roles=[\n        \"User\",\n        \"Administrator\",\n        \"SignupUser\",\n        \"SecurityAdmin\",\n    ],\n    is_readonly=False,\n    reallocate_vpn_address=False,\n    regenerate_vpn_password=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myuser = new Duplocloud.User(\"myuser\", new()\n    {\n        Username = \"me@abc.com\",\n        Roles = new[]\n        {\n            \"User\",\n            \"Administrator\",\n            \"SignupUser\",\n            \"SecurityAdmin\",\n        },\n        IsReadonly = false,\n        ReallocateVpnAddress = false,\n        RegenerateVpnPassword = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := duplocloud.NewUser(ctx, \"myuser\", \u0026duplocloud.UserArgs{\n\t\t\tUsername: pulumi.String(\"me@abc.com\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"User\"),\n\t\t\t\tpulumi.String(\"Administrator\"),\n\t\t\t\tpulumi.String(\"SignupUser\"),\n\t\t\t\tpulumi.String(\"SecurityAdmin\"),\n\t\t\t},\n\t\t\tIsReadonly:            pulumi.Bool(false),\n\t\t\tReallocateVpnAddress:  pulumi.Bool(false),\n\t\t\tRegenerateVpnPassword: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.User;\nimport com.pulumi.duplocloud.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myuser = new User(\"myuser\", UserArgs.builder()\n            .username(\"me@abc.com\")\n            .roles(            \n                \"User\",\n                \"Administrator\",\n                \"SignupUser\",\n                \"SecurityAdmin\")\n            .isReadonly(false)\n            .reallocateVpnAddress(false)\n            .regenerateVpnPassword(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myuser:\n    type: duplocloud:User\n    properties:\n      username: me@abc.com\n      roles:\n        - User\n        - Administrator\n        - SignupUser\n        - SecurityAdmin\n      isReadonly: false\n      reallocateVpnAddress: false\n      regenerateVpnPassword: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing duplo user\n\n - *USERNAME* is the duplo username\n\n#\n\n```sh\n$ pulumi import duplocloud:index/user:User myuser *USERNAME*\n```\n\n",
            "properties": {
                "currentSessionToken": {
                    "type": "string"
                },
                "isConfirmationEmailSent": {
                    "type": "boolean"
                },
                "isReadonly": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "isVpnConfigCreated": {
                    "type": "boolean"
                },
                "reallocateVpnAddress": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "regenerateVpnPassword": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of roles to be assigned to thh created user. Valid values are - `User`, `Administrator`, `SignupUser`, `SecurityAdmin`.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The unique user name or the email.\n"
                },
                "vpnStaticIp": {
                    "type": "string"
                }
            },
            "required": [
                "currentSessionToken",
                "isConfirmationEmailSent",
                "isVpnConfigCreated",
                "roles",
                "username",
                "vpnStaticIp"
            ],
            "inputProperties": {
                "isReadonly": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "reallocateVpnAddress": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "regenerateVpnPassword": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of roles to be assigned to thh created user. Valid values are - `User`, `Administrator`, `SignupUser`, `SecurityAdmin`.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The unique user name or the email.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "roles",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "currentSessionToken": {
                        "type": "string"
                    },
                    "isConfirmationEmailSent": {
                        "type": "boolean"
                    },
                    "isReadonly": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "isVpnConfigCreated": {
                        "type": "boolean"
                    },
                    "reallocateVpnAddress": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "regenerateVpnPassword": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of roles to be assigned to thh created user. Valid values are - `User`, `Administrator`, `SignupUser`, `SecurityAdmin`.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The unique user name or the email.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpnStaticIp": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "duplocloud:index/userTenantAccess:UserTenantAccess": {
            "description": "`duplocloud.UserTenantAccess` manages a user tenant access in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst myapp = new duplocloud.Tenant(\"myapp\", {\n    accountName: \"myapp\",\n    planId: \"default\",\n});\n// Simple Example 1:  Grant access of tenant to user\nconst access = new duplocloud.UserTenantAccess(\"access\", {\n    username: \"user@domain\",\n    tenantId: myapp.tenantId,\n    isReadonly: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nmyapp = duplocloud.Tenant(\"myapp\",\n    account_name=\"myapp\",\n    plan_id=\"default\")\n# Simple Example 1:  Grant access of tenant to user\naccess = duplocloud.UserTenantAccess(\"access\",\n    username=\"user@domain\",\n    tenant_id=myapp.tenant_id,\n    is_readonly=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Duplocloud.Tenant(\"myapp\", new()\n    {\n        AccountName = \"myapp\",\n        PlanId = \"default\",\n    });\n\n    // Simple Example 1:  Grant access of tenant to user\n    var access = new Duplocloud.UserTenantAccess(\"access\", new()\n    {\n        Username = \"user@domain\",\n        TenantId = myapp.TenantId,\n        IsReadonly = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyapp, err := duplocloud.NewTenant(ctx, \"myapp\", \u0026duplocloud.TenantArgs{\n\t\t\tAccountName: pulumi.String(\"myapp\"),\n\t\t\tPlanId:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Simple Example 1:  Grant access of tenant to user\n\t\t_, err = duplocloud.NewUserTenantAccess(ctx, \"access\", \u0026duplocloud.UserTenantAccessArgs{\n\t\t\tUsername:   pulumi.String(\"user@domain\"),\n\t\t\tTenantId:   myapp.TenantId,\n\t\t\tIsReadonly: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.Tenant;\nimport com.pulumi.duplocloud.TenantArgs;\nimport com.pulumi.duplocloud.UserTenantAccess;\nimport com.pulumi.duplocloud.UserTenantAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Tenant(\"myapp\", TenantArgs.builder()\n            .accountName(\"myapp\")\n            .planId(\"default\")\n            .build());\n\n        // Simple Example 1:  Grant access of tenant to user\n        var access = new UserTenantAccess(\"access\", UserTenantAccessArgs.builder()\n            .username(\"user@domain\")\n            .tenantId(myapp.tenantId())\n            .isReadonly(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: duplocloud:Tenant\n    properties:\n      accountName: myapp\n      planId: default\n  # Simple Example 1:  Grant access of tenant to user\n  access:\n    type: duplocloud:UserTenantAccess\n    properties:\n      username: user@domain\n      tenantId: ${myapp.tenantId}\n      isReadonly: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExample: Importing an existing service\n\n - *TENANT_ID* is the tenant GUID\n\n - *USERNAME* is the unique user name or email id of the user to which TENANT_ID access has been given\n\n#\n\n```sh\n$ pulumi import duplocloud:index/userTenantAccess:UserTenantAccess access *USERNAME*/*TENANT_ID*\n```\n\n",
            "properties": {
                "isReadonly": {
                    "type": "boolean",
                    "description": "Specifiy readonly policy related to tenant Defaults to `false`.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Tenant Id to which user need to get access\n"
                },
                "tenantName": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "description": "The unique user name or the email.\n"
                }
            },
            "required": [
                "tenantId",
                "tenantName",
                "username"
            ],
            "inputProperties": {
                "isReadonly": {
                    "type": "boolean",
                    "description": "Specifiy readonly policy related to tenant Defaults to `false`.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Tenant Id to which user need to get access\n"
                },
                "username": {
                    "type": "string",
                    "description": "The unique user name or the email.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "tenantId",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserTenantAccess resources.\n",
                "properties": {
                    "isReadonly": {
                        "type": "boolean",
                        "description": "Specifiy readonly policy related to tenant Defaults to `false`.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "Tenant Id to which user need to get access\n"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string",
                        "description": "The unique user name or the email.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "duplocloud:index/getAdminAwsCredentials:getAdminAwsCredentials": {
            "outputs": {
                "description": "A collection of values returned by getAdminAwsCredentials.\n",
                "properties": {
                    "accessKeyId": {
                        "secret": true,
                        "type": "string"
                    },
                    "consoleUrl": {
                        "secret": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "secretAccessKey": {
                        "secret": true,
                        "type": "string"
                    },
                    "sessionToken": {
                        "secret": true,
                        "type": "string"
                    }
                },
                "required": [
                    "accessKeyId",
                    "consoleUrl",
                    "region",
                    "secretAccessKey",
                    "sessionToken",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getAsgProfiles:getAsgProfiles": {
            "description": "`duplocloud.getAsgProfiles` lists autoscaling group profiles in a Duplo tenant.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAsgProfiles.\n",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant in which to list the ASG profiles.\n"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAsgProfiles.\n",
                "properties": {
                    "asgProfiles": {
                        "description": "The list of ASG profiles.\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getAsgProfilesAsgProfile:getAsgProfilesAsgProfile"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant in which to list the ASG profiles.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "asgProfiles",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getAwsAccount:getAwsAccount": {
            "inputs": {
                "description": "A collection of arguments for invoking getAwsAccount.\n",
                "properties": {
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAwsAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "accountId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getAwsLaunchTemplate:getAwsLaunchTemplate": {
            "inputs": {
                "description": "A collection of arguments for invoking getAwsLaunchTemplate.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsLaunchTemplate.\n",
                "properties": {
                    "ami": {
                        "type": "string"
                    },
                    "defaultVersion": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "instanceType": {
                        "type": "string"
                    },
                    "latestVersion": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "version": {
                        "description": "Any of the existing version of the launch template\n",
                        "type": "string"
                    },
                    "versionDescription": {
                        "type": "string"
                    }
                },
                "required": [
                    "ami",
                    "defaultVersion",
                    "instanceType",
                    "latestVersion",
                    "name",
                    "tenantId",
                    "version",
                    "versionDescription",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getAwsLbListeners:getAwsLbListeners": {
            "inputs": {
                "description": "A collection of arguments for invoking getAwsLbListeners.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsLbListeners.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "listeners": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getAwsLbListenersListener:getAwsLbListenersListener"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "listeners",
                    "name",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getAwsLbTargetGroups:getAwsLbTargetGroups": {
            "inputs": {
                "description": "A collection of arguments for invoking getAwsLbTargetGroups.\n",
                "properties": {
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsLbTargetGroups.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "targetGroups": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getAwsLbTargetGroupsTargetGroup:getAwsLbTargetGroupsTargetGroup"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "targetGroups",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getAwsSsmParameter:getAwsSsmParameter": {
            "inputs": {
                "description": "A collection of arguments for invoking getAwsSsmParameter.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsSsmParameter.\n",
                "properties": {
                    "allowedPattern": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "keyId": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string"
                    },
                    "lastModifiedUser": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "secret": true,
                        "type": "string"
                    }
                },
                "required": [
                    "allowedPattern",
                    "description",
                    "keyId",
                    "lastModifiedDate",
                    "lastModifiedUser",
                    "name",
                    "tenantId",
                    "type",
                    "value",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getAwsSsmParameters:getAwsSsmParameters": {
            "inputs": {
                "description": "A collection of arguments for invoking getAwsSsmParameters.\n",
                "properties": {
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsSsmParameters.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "parameters": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getAwsSsmParametersParameter:getAwsSsmParametersParameter"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getAzureAvailabilitySet:getAzureAvailabilitySet": {
            "description": "`duplocloud.AzureAvailabilitySet` manages a azure availability set in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst st = duplocloud.getAzureAvailabilitySet({\n    tenantId: \"tenant id\",\n    name: \"availability-set name\",\n});\nexport const out = {\n    availabilitySetId: st.then(st =\u003e st.availabilitySetId),\n};\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\nst = duplocloud.get_azure_availability_set(tenant_id=\"tenant id\",\n    name=\"availability-set name\")\npulumi.export(\"out\", {\n    \"availabilitySetId\": st.availability_set_id,\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var st = Duplocloud.GetAzureAvailabilitySet.Invoke(new()\n    {\n        TenantId = \"tenant id\",\n        Name = \"availability-set name\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"out\"] = \n        {\n            { \"availabilitySetId\", st.Apply(getAzureAvailabilitySetResult =\u003e getAzureAvailabilitySetResult.AvailabilitySetId) },\n        },\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tst, err := duplocloud.LookupAzureAvailabilitySet(ctx, \u0026duplocloud.LookupAzureAvailabilitySetArgs{\n\t\t\tTenantId: \"tenant id\",\n\t\t\tName:     \"availability-set name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"out\", pulumi.StringMap{\n\t\t\t\"availabilitySetId\": st.AvailabilitySetId,\n\t\t})\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetAzureAvailabilitySetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var st = DuplocloudFunctions.getAzureAvailabilitySet(GetAzureAvailabilitySetArgs.builder()\n            .tenantId(\"tenant id\")\n            .name(\"availability-set name\")\n            .build());\n\n        ctx.export(\"out\", %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n    }\n}\n```\n```yaml\nvariables:\n  st:\n    fn::invoke:\n      function: duplocloud:getAzureAvailabilitySet\n      arguments:\n        tenantId: tenant id\n        name: availability-set name\noutputs:\n  out:\n    availabilitySetId: ${st.availabilitySetId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAzureAvailabilitySet.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAzureAvailabilitySet.\n",
                "properties": {
                    "availabilitySetId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "platformFaultDomainCount": {
                        "type": "integer"
                    },
                    "platformUpdateDomainCount": {
                        "type": "integer"
                    },
                    "skuName": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "virtualMachines": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getAzureAvailabilitySetVirtualMachine:getAzureAvailabilitySetVirtualMachine"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "availabilitySetId",
                    "location",
                    "name",
                    "platformFaultDomainCount",
                    "platformUpdateDomainCount",
                    "skuName",
                    "tags",
                    "tenantId",
                    "type",
                    "virtualMachines",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getAzureStorageAccountKey:getAzureStorageAccountKey": {
            "description": "`duplocloud.getAzureStorageAccountKey` retrieves a azure storage account key in Duplo.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAzureStorageAccountKey.\n",
                "properties": {
                    "storageAccountName": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "storageAccountName",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAzureStorageAccountKey.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "keyName": {
                        "type": "string"
                    },
                    "keyValue": {
                        "type": "string"
                    },
                    "storageAccountName": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "keyName",
                    "keyValue",
                    "storageAccountName",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getDuploService:getDuploService": {
            "inputs": {
                "description": "A collection of arguments for invoking getDuploService.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDuploService.\n",
                "properties": {
                    "agentPlatform": {
                        "type": "integer"
                    },
                    "allocationTags": {
                        "type": "string"
                    },
                    "anyHostAllowed": {
                        "type": "boolean"
                    },
                    "cloud": {
                        "type": "integer"
                    },
                    "cloudCredsFromK8sServiceAccount": {
                        "type": "boolean"
                    },
                    "commands": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "dockerImage": {
                        "type": "string"
                    },
                    "domain": {
                        "description": "The service domain (whichever fqdn_ex or fqdn which is non empty)\n",
                        "type": "string"
                    },
                    "extraConfig": {
                        "type": "string"
                    },
                    "forceStatefulSet": {
                        "type": "boolean"
                    },
                    "fqdn": {
                        "description": "The fully qualified domain associated with the service\n",
                        "type": "string"
                    },
                    "fqdnEx": {
                        "description": "External fully qualified domain associated with the service\n",
                        "type": "string"
                    },
                    "hpaSpecs": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "isDaemonset": {
                        "type": "boolean"
                    },
                    "isUniqueK8sNodeRequired": {
                        "description": "Whether or not the replicas must be scheduled on separate Kubernetes nodes.  Only supported on Kubernetes.\n",
                        "type": "boolean"
                    },
                    "lbSyncedDeployment": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "otherDockerConfig": {
                        "type": "string"
                    },
                    "otherDockerHostConfig": {
                        "type": "string"
                    },
                    "parentDomain": {
                        "description": "The service's parent domain\n",
                        "type": "string"
                    },
                    "replicaCollocationAllowed": {
                        "type": "boolean"
                    },
                    "replicas": {
                        "type": "integer"
                    },
                    "replicasMatchingAsgName": {
                        "type": "string"
                    },
                    "shouldSpreadAcrossZones": {
                        "description": "Whether or not the replicas must be spread across availability zones.  Only supported on Kubernetes.\n",
                        "type": "boolean"
                    },
                    "tags": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getDuploServiceTag:getDuploServiceTag"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "volumes": {
                        "type": "string"
                    }
                },
                "required": [
                    "agentPlatform",
                    "allocationTags",
                    "anyHostAllowed",
                    "cloud",
                    "cloudCredsFromK8sServiceAccount",
                    "commands",
                    "dockerImage",
                    "domain",
                    "extraConfig",
                    "forceStatefulSet",
                    "fqdn",
                    "fqdnEx",
                    "hpaSpecs",
                    "isDaemonset",
                    "isUniqueK8sNodeRequired",
                    "lbSyncedDeployment",
                    "name",
                    "otherDockerConfig",
                    "otherDockerHostConfig",
                    "parentDomain",
                    "replicaCollocationAllowed",
                    "replicas",
                    "replicasMatchingAsgName",
                    "shouldSpreadAcrossZones",
                    "tags",
                    "tenantId",
                    "volumes",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getDuploServiceLbconfigs:getDuploServiceLbconfigs": {
            "description": "`duplocloud.DuploServiceLbconfigs` retrieves load balancer configuration(s) for container-based service(s) in Duplo.\n\nNOTE: For Amazon ECS services, see the `duplocloud.getEcsServices` data source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDuploServiceLbconfigs.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the duplo service.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that hosts the duplo service.\n"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDuploServiceLbconfigs.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the duplo service.\n",
                        "type": "string"
                    },
                    "services": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getDuploServiceLbconfigsService:getDuploServiceLbconfigsService"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant that hosts the duplo service.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "services",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getDuploServiceParams:getDuploServiceParams": {
            "inputs": {
                "description": "A collection of arguments for invoking getDuploServiceParams.\n",
                "properties": {
                    "dnsPrfx": {
                        "type": "string"
                    },
                    "replicationControllerName": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "webaclid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDuploServiceParams.\n",
                "properties": {
                    "dnsPrfx": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "replicationControllerName": {
                        "type": "string"
                    },
                    "results": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getDuploServiceParamsResult:getDuploServiceParamsResult"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "webaclid": {
                        "type": "string"
                    }
                },
                "required": [
                    "results",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getDuploServices:getDuploServices": {
            "inputs": {
                "description": "A collection of arguments for invoking getDuploServices.\n",
                "properties": {
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDuploServices.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "services": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getDuploServicesService:getDuploServicesService"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "services",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getEcrRepository:getEcrRepository": {
            "description": "`duplocloud.getEcrRepository` get ecr repository in a Duplo tenant.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEcrRepository.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the ECR Repository.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant in which to list the hosts.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEcrRepository.\n",
                "properties": {
                    "arn": {
                        "type": "string"
                    },
                    "enableScanImageOnPush": {
                        "type": "boolean"
                    },
                    "enableTagImmutability": {
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "kmsEncryptionKey": {
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the ECR Repository.\n",
                        "type": "string"
                    },
                    "registryId": {
                        "type": "string"
                    },
                    "repositoryUrl": {
                        "type": "string"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant in which to list the hosts.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "arn",
                    "enableScanImageOnPush",
                    "enableTagImmutability",
                    "kmsEncryptionKey",
                    "name",
                    "registryId",
                    "repositoryUrl",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getEcsService:getEcsService": {
            "inputs": {
                "description": "A collection of arguments for invoking getEcsService.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the service to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the service will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEcsService.\n",
                "properties": {
                    "capacityProviderStrategies": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getEcsServiceCapacityProviderStrategy:getEcsServiceCapacityProviderStrategy"
                        },
                        "type": "array"
                    },
                    "dnsPrfx": {
                        "description": "The DNS prefix to assign to this service's load balancer.\n",
                        "type": "string"
                    },
                    "healthCheckGracePeriodSeconds": {
                        "type": "integer"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "index": {
                        "description": "The index of the ecs service.\n",
                        "type": "integer"
                    },
                    "isTargetGroupOnly": {
                        "type": "boolean"
                    },
                    "loadBalancers": {
                        "description": "Zero or more load balancer configurations to associate with this service.\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getEcsServiceLoadBalancer:getEcsServiceLoadBalancer"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "The name of the service to create.\n",
                        "type": "string"
                    },
                    "oldTaskDefinitionBufferSize": {
                        "description": "The number of older task definitions to retain in AWS.\n",
                        "type": "integer"
                    },
                    "replicas": {
                        "description": "The number of container replicas to create.\n",
                        "type": "integer"
                    },
                    "targetGroupArns": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "taskDefinition": {
                        "description": "The ARN of the task definition to use.\n",
                        "type": "string"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant that the service will be created in.\n",
                        "type": "string"
                    },
                    "waitUntilTargetsReady": {
                        "description": "Whether or not to wait until all target groups are created for ecs service, after creation.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "capacityProviderStrategies",
                    "dnsPrfx",
                    "healthCheckGracePeriodSeconds",
                    "index",
                    "isTargetGroupOnly",
                    "loadBalancers",
                    "name",
                    "oldTaskDefinitionBufferSize",
                    "replicas",
                    "targetGroupArns",
                    "taskDefinition",
                    "tenantId",
                    "waitUntilTargetsReady",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getEcsServices:getEcsServices": {
            "inputs": {
                "description": "A collection of arguments for invoking getEcsServices.\n",
                "properties": {
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEcsServices.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "services": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getEcsServicesService:getEcsServicesService"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "services",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getEcsTaskDefinition:getEcsTaskDefinition": {
            "inputs": {
                "description": "A collection of arguments for invoking getEcsTaskDefinition.\n",
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the task definition.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the task definition will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "arn",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEcsTaskDefinition.\n",
                "properties": {
                    "arn": {
                        "description": "The ARN of the task definition.\n",
                        "type": "string"
                    },
                    "containerDefinitions": {
                        "type": "string"
                    },
                    "containerDefinitionsUpdates": {
                        "description": "container_definitions updates in backend\n",
                        "type": "string"
                    },
                    "cpu": {
                        "type": "string"
                    },
                    "executionRoleArn": {
                        "type": "string"
                    },
                    "family": {
                        "description": "The name of the task definition to create.\n",
                        "type": "string"
                    },
                    "fullFamilyName": {
                        "description": "The name of the task definition to create.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "inferenceAccelerators": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getEcsTaskDefinitionInferenceAccelerator:getEcsTaskDefinitionInferenceAccelerator"
                        },
                        "type": "array"
                    },
                    "ipcMode": {
                        "type": "string"
                    },
                    "memory": {
                        "type": "string"
                    },
                    "networkMode": {
                        "type": "string"
                    },
                    "pidMode": {
                        "type": "string"
                    },
                    "placementConstraints": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getEcsTaskDefinitionPlacementConstraint:getEcsTaskDefinitionPlacementConstraint"
                        },
                        "type": "array"
                    },
                    "preventTfDestroy": {
                        "type": "boolean"
                    },
                    "proxyConfigurations": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getEcsTaskDefinitionProxyConfiguration:getEcsTaskDefinitionProxyConfiguration"
                        },
                        "type": "array"
                    },
                    "requiresAttributes": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getEcsTaskDefinitionRequiresAttribute:getEcsTaskDefinitionRequiresAttribute"
                        },
                        "type": "array"
                    },
                    "requiresCompatibilities": {
                        "description": "Requires compatibilities for running jobs. Valid values are [FARGATE]\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "revision": {
                        "description": "The current revision of the task definition.\n",
                        "type": "integer"
                    },
                    "runtimePlatforms": {
                        "description": "Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getEcsTaskDefinitionRuntimePlatform:getEcsTaskDefinitionRuntimePlatform"
                        },
                        "type": "array"
                    },
                    "status": {
                        "description": "The status of the task definition.\n",
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getEcsTaskDefinitionTag:getEcsTaskDefinitionTag"
                        },
                        "type": "array"
                    },
                    "taskRoleArn": {
                        "type": "string"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant that the task definition will be created in.\n",
                        "type": "string"
                    },
                    "volumes": {
                        "type": "string"
                    }
                },
                "required": [
                    "arn",
                    "containerDefinitions",
                    "containerDefinitionsUpdates",
                    "cpu",
                    "executionRoleArn",
                    "family",
                    "fullFamilyName",
                    "inferenceAccelerators",
                    "ipcMode",
                    "memory",
                    "networkMode",
                    "pidMode",
                    "placementConstraints",
                    "preventTfDestroy",
                    "proxyConfigurations",
                    "requiresAttributes",
                    "requiresCompatibilities",
                    "revision",
                    "runtimePlatforms",
                    "status",
                    "tags",
                    "taskRoleArn",
                    "tenantId",
                    "volumes",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getEcsTaskDefinitions:getEcsTaskDefinitions": {
            "inputs": {
                "description": "A collection of arguments for invoking getEcsTaskDefinitions.\n",
                "properties": {
                    "family": {
                        "type": "string"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEcsTaskDefinitions.\n",
                "properties": {
                    "family": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "taskDefinitions": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getEcsTaskDefinitionsTaskDefinition:getEcsTaskDefinitionsTaskDefinition"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "taskDefinitions",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getEksCredentials:getEksCredentials": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst credential = duplocloud.getEksCredentials({\n    planId: \"non-prod\",\n});\nexport const credentialValue = {\n    caCertificateData: credential.then(credential =\u003e credential.caCertificateData),\n    endpoint: credential.then(credential =\u003e credential.endpoint),\n    name: credential.then(credential =\u003e credential.name),\n    version: credential.then(credential =\u003e credential.version),\n    region: credential.then(credential =\u003e credential.region),\n    token: credential.then(credential =\u003e credential.token),\n};\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ncredential = duplocloud.get_eks_credentials(plan_id=\"non-prod\")\npulumi.export(\"credentialValue\", {\n    \"caCertificateData\": credential.ca_certificate_data,\n    \"endpoint\": credential.endpoint,\n    \"name\": credential.name,\n    \"version\": credential.version,\n    \"region\": credential.region,\n    \"token\": credential.token,\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var credential = Duplocloud.GetEksCredentials.Invoke(new()\n    {\n        PlanId = \"non-prod\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"credentialValue\"] = \n        {\n            { \"caCertificateData\", credential.Apply(getEksCredentialsResult =\u003e getEksCredentialsResult.CaCertificateData) },\n            { \"endpoint\", credential.Apply(getEksCredentialsResult =\u003e getEksCredentialsResult.Endpoint) },\n            { \"name\", credential.Apply(getEksCredentialsResult =\u003e getEksCredentialsResult.Name) },\n            { \"version\", credential.Apply(getEksCredentialsResult =\u003e getEksCredentialsResult.Version) },\n            { \"region\", credential.Apply(getEksCredentialsResult =\u003e getEksCredentialsResult.Region) },\n            { \"token\", credential.Apply(getEksCredentialsResult =\u003e getEksCredentialsResult.Token) },\n        },\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcredential, err := duplocloud.GetEksCredentials(ctx, \u0026duplocloud.GetEksCredentialsArgs{\n\t\t\tPlanId: \"non-prod\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"credentialValue\", pulumi.StringMap{\n\t\t\t\"caCertificateData\": credential.CaCertificateData,\n\t\t\t\"endpoint\":          credential.Endpoint,\n\t\t\t\"name\":              credential.Name,\n\t\t\t\"version\":           credential.Version,\n\t\t\t\"region\":            credential.Region,\n\t\t\t\"token\":             credential.Token,\n\t\t})\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetEksCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var credential = DuplocloudFunctions.getEksCredentials(GetEksCredentialsArgs.builder()\n            .planId(\"non-prod\")\n            .build());\n\n        ctx.export(\"credentialValue\", %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n    }\n}\n```\n```yaml\nvariables:\n  credential:\n    fn::invoke:\n      function: duplocloud:getEksCredentials\n      arguments:\n        planId: non-prod\noutputs:\n  credentialValue:\n    caCertificateData: ${credential.caCertificateData}\n    endpoint: ${credential.endpoint}\n    name: ${credential.name}\n    version: ${credential.version}\n    region: ${credential.region}\n    token: ${credential.token}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEksCredentials.\n",
                "properties": {
                    "planId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEksCredentials.\n",
                "properties": {
                    "caCertificateData": {
                        "type": "string"
                    },
                    "endpoint": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "planId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "token": {
                        "secret": true,
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "caCertificateData",
                    "endpoint",
                    "name",
                    "planId",
                    "region",
                    "token",
                    "version",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getEmrCluster:getEmrCluster": {
            "description": "`duplocloud.EmrCluster` lists EmrClusters in a Duplo tenant.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEmrCluster.\n",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant in which to list the hosts.\n"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEmrCluster.\n",
                "properties": {
                    "datas": {
                        "description": "The list of native hosts.\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getEmrClusterData:getEmrClusterData"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant in which to list the hosts.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "datas",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getGcpFirestore:getGcpFirestore": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst app = duplocloud.getGcpFirestore({\n    tenantId: \"tenant_id\",\n    name: \"name\",\n});\nexport const out = {\n    name: app.then(app =\u003e app.name),\n    type: app.then(app =\u003e app.type),\n    locationId: app.then(app =\u003e app.locationId),\n    enableDeleteProtection: app.then(app =\u003e app.enableDeleteProtection),\n    enablePointInTimeRecovery: app.then(app =\u003e app.enablePointInTimeRecovery),\n    etag: app.then(app =\u003e app.etag),\n    uid: app.then(app =\u003e app.uid),\n    versionRetentionPeriod: app.then(app =\u003e app.versionRetentionPeriod),\n    earliestVersionTime: app.then(app =\u003e app.earliestVersionTime),\n    concurrencyMode: app.then(app =\u003e app.concurrencyMode),\n    appEngineIntegrationMode: app.then(app =\u003e app.appEngineIntegrationMode),\n};\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\napp = duplocloud.get_gcp_firestore(tenant_id=\"tenant_id\",\n    name=\"name\")\npulumi.export(\"out\", {\n    \"name\": app.name,\n    \"type\": app.type,\n    \"locationId\": app.location_id,\n    \"enableDeleteProtection\": app.enable_delete_protection,\n    \"enablePointInTimeRecovery\": app.enable_point_in_time_recovery,\n    \"etag\": app.etag,\n    \"uid\": app.uid,\n    \"versionRetentionPeriod\": app.version_retention_period,\n    \"earliestVersionTime\": app.earliest_version_time,\n    \"concurrencyMode\": app.concurrency_mode,\n    \"appEngineIntegrationMode\": app.app_engine_integration_mode,\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = Duplocloud.GetGcpFirestore.Invoke(new()\n    {\n        TenantId = \"tenant_id\",\n        Name = \"name\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"out\"] = \n        {\n            { \"name\", app.Apply(getGcpFirestoreResult =\u003e getGcpFirestoreResult.Name) },\n            { \"type\", app.Apply(getGcpFirestoreResult =\u003e getGcpFirestoreResult.Type) },\n            { \"locationId\", app.Apply(getGcpFirestoreResult =\u003e getGcpFirestoreResult.LocationId) },\n            { \"enableDeleteProtection\", app.Apply(getGcpFirestoreResult =\u003e getGcpFirestoreResult.EnableDeleteProtection) },\n            { \"enablePointInTimeRecovery\", app.Apply(getGcpFirestoreResult =\u003e getGcpFirestoreResult.EnablePointInTimeRecovery) },\n            { \"etag\", app.Apply(getGcpFirestoreResult =\u003e getGcpFirestoreResult.Etag) },\n            { \"uid\", app.Apply(getGcpFirestoreResult =\u003e getGcpFirestoreResult.Uid) },\n            { \"versionRetentionPeriod\", app.Apply(getGcpFirestoreResult =\u003e getGcpFirestoreResult.VersionRetentionPeriod) },\n            { \"earliestVersionTime\", app.Apply(getGcpFirestoreResult =\u003e getGcpFirestoreResult.EarliestVersionTime) },\n            { \"concurrencyMode\", app.Apply(getGcpFirestoreResult =\u003e getGcpFirestoreResult.ConcurrencyMode) },\n            { \"appEngineIntegrationMode\", app.Apply(getGcpFirestoreResult =\u003e getGcpFirestoreResult.AppEngineIntegrationMode) },\n        },\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tapp, err := duplocloud.LookupGcpFirestore(ctx, \u0026duplocloud.LookupGcpFirestoreArgs{\n\t\t\tTenantId: \"tenant_id\",\n\t\t\tName:     \"name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"out\", pulumi.Map{\n\t\t\t\"name\":                      app.Name,\n\t\t\t\"type\":                      app.Type,\n\t\t\t\"locationId\":                app.LocationId,\n\t\t\t\"enableDeleteProtection\":    app.EnableDeleteProtection,\n\t\t\t\"enablePointInTimeRecovery\": app.EnablePointInTimeRecovery,\n\t\t\t\"etag\":                      app.Etag,\n\t\t\t\"uid\":                       app.Uid,\n\t\t\t\"versionRetentionPeriod\":    app.VersionRetentionPeriod,\n\t\t\t\"earliestVersionTime\":       app.EarliestVersionTime,\n\t\t\t\"concurrencyMode\":           app.ConcurrencyMode,\n\t\t\t\"appEngineIntegrationMode\":  app.AppEngineIntegrationMode,\n\t\t})\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetGcpFirestoreArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var app = DuplocloudFunctions.getGcpFirestore(GetGcpFirestoreArgs.builder()\n            .tenantId(\"tenant_id\")\n            .name(\"name\")\n            .build());\n\n        ctx.export(\"out\", %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n    }\n}\n```\n```yaml\nvariables:\n  app:\n    fn::invoke:\n      function: duplocloud:getGcpFirestore\n      arguments:\n        tenantId: tenant_id\n        name: name\noutputs:\n  out:\n    name: ${app.name}\n    type: ${app.type}\n    locationId: ${app.locationId}\n    enableDeleteProtection: ${app.enableDeleteProtection}\n    enablePointInTimeRecovery: ${app.enablePointInTimeRecovery}\n    etag: ${app.etag}\n    uid: ${app.uid}\n    versionRetentionPeriod: ${app.versionRetentionPeriod}\n    earliestVersionTime: ${app.earliestVersionTime}\n    concurrencyMode: ${app.concurrencyMode}\n    appEngineIntegrationMode: ${app.appEngineIntegrationMode}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGcpFirestore.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The full name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the firestore will be created in.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGcpFirestore.\n",
                "properties": {
                    "appEngineIntegrationMode": {
                        "type": "string"
                    },
                    "concurrencyMode": {
                        "type": "string"
                    },
                    "earliestVersionTime": {
                        "type": "string"
                    },
                    "enableDeleteProtection": {
                        "description": "Delete protection prevents accidental deletion of firestore.\n",
                        "type": "boolean"
                    },
                    "enablePointInTimeRecovery": {
                        "description": "Restores data to a specific moment in time, enhancing data protection and recovery capabilities.\n",
                        "type": "boolean"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "locationId": {
                        "description": "Location for firestore\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The full name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "type": "string"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant that the firestore will be created in.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "Firestore type\n",
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    },
                    "versionRetentionPeriod": {
                        "type": "string"
                    }
                },
                "required": [
                    "appEngineIntegrationMode",
                    "concurrencyMode",
                    "earliestVersionTime",
                    "enableDeleteProtection",
                    "enablePointInTimeRecovery",
                    "etag",
                    "locationId",
                    "name",
                    "tenantId",
                    "type",
                    "uid",
                    "versionRetentionPeriod",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getGcpFirestores:getGcpFirestores": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst app = duplocloud.getGcpFirestores({\n    tenantId: \"tenant_id\",\n});\nexport const out = {\n    firestores: app.then(app =\u003e app.firestores),\n};\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\napp = duplocloud.get_gcp_firestores(tenant_id=\"tenant_id\")\npulumi.export(\"out\", {\n    \"firestores\": app.firestores,\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = Duplocloud.GetGcpFirestores.Invoke(new()\n    {\n        TenantId = \"tenant_id\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"out\"] = \n        {\n            { \"firestores\", app.Apply(getGcpFirestoresResult =\u003e getGcpFirestoresResult.Firestores) },\n        },\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tapp, err := duplocloud.GetGcpFirestores(ctx, \u0026duplocloud.GetGcpFirestoresArgs{\n\t\t\tTenantId: \"tenant_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"out\", []duplocloud.GetGcpFirestoresFirestoreMap{\n\t\t\t\"firestores\": app.Firestores,\n\t\t})\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetGcpFirestoresArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var app = DuplocloudFunctions.getGcpFirestores(GetGcpFirestoresArgs.builder()\n            .tenantId(\"tenant_id\")\n            .build());\n\n        ctx.export(\"out\", %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n    }\n}\n```\n```yaml\nvariables:\n  app:\n    fn::invoke:\n      function: duplocloud:getGcpFirestores\n      arguments:\n        tenantId: tenant_id\noutputs:\n  out:\n    firestores: ${app.firestores}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGcpFirestores.\n",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the firestore will be created in.\n"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGcpFirestores.\n",
                "properties": {
                    "firestores": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getGcpFirestoresFirestore:getGcpFirestoresFirestore"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant that the firestore will be created in.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "firestores",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getGcpNodePool:getGcpNodePool": {
            "description": "`duplocloud.GcpNodePool` retrieves a node pool in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst pool = duplocloud.getGcpNodePool({\n    tenantId: \"tenantid\",\n    name: \"nodepool-name\",\n});\nexport const nodepoolOutput = {\n    name: pool.then(pool =\u003e pool.name),\n    machineType: pool.then(pool =\u003e pool.machineType),\n    zones: pool.then(pool =\u003e pool.zones),\n    discSizeGb: pool.then(pool =\u003e pool.discSizeGb),\n    discType: pool.then(pool =\u003e pool.discType),\n    upgradeSettings: pool.then(pool =\u003e pool.upgradeSettings),\n};\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\npool = duplocloud.get_gcp_node_pool(tenant_id=\"tenantid\",\n    name=\"nodepool-name\")\npulumi.export(\"nodepoolOutput\", {\n    \"name\": pool.name,\n    \"machineType\": pool.machine_type,\n    \"zones\": pool.zones,\n    \"discSizeGb\": pool.disc_size_gb,\n    \"discType\": pool.disc_type,\n    \"upgradeSettings\": pool.upgrade_settings,\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pool = Duplocloud.GetGcpNodePool.Invoke(new()\n    {\n        TenantId = \"tenantid\",\n        Name = \"nodepool-name\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"nodepoolOutput\"] = \n        {\n            { \"name\", pool.Apply(getGcpNodePoolResult =\u003e getGcpNodePoolResult.Name) },\n            { \"machineType\", pool.Apply(getGcpNodePoolResult =\u003e getGcpNodePoolResult.MachineType) },\n            { \"zones\", pool.Apply(getGcpNodePoolResult =\u003e getGcpNodePoolResult.Zones) },\n            { \"discSizeGb\", pool.Apply(getGcpNodePoolResult =\u003e getGcpNodePoolResult.DiscSizeGb) },\n            { \"discType\", pool.Apply(getGcpNodePoolResult =\u003e getGcpNodePoolResult.DiscType) },\n            { \"upgradeSettings\", pool.Apply(getGcpNodePoolResult =\u003e getGcpNodePoolResult.UpgradeSettings) },\n        },\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpool, err := duplocloud.LookupGcpNodePool(ctx, \u0026duplocloud.LookupGcpNodePoolArgs{\n\t\t\tTenantId: \"tenantid\",\n\t\t\tName:     \"nodepool-name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"nodepoolOutput\", pulumi.Map{\n\t\t\t\"name\":            pool.Name,\n\t\t\t\"machineType\":     pool.MachineType,\n\t\t\t\"zones\":           pool.Zones,\n\t\t\t\"discSizeGb\":      pool.DiscSizeGb,\n\t\t\t\"discType\":        pool.DiscType,\n\t\t\t\"upgradeSettings\": pool.UpgradeSettings,\n\t\t})\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetGcpNodePoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var pool = DuplocloudFunctions.getGcpNodePool(GetGcpNodePoolArgs.builder()\n            .tenantId(\"tenantid\")\n            .name(\"nodepool-name\")\n            .build());\n\n        ctx.export(\"nodepoolOutput\", %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n    }\n}\n```\n```yaml\nvariables:\n  pool:\n    fn::invoke:\n      function: duplocloud:getGcpNodePool\n      arguments:\n        tenantId: tenantid\n        name: nodepool-name\noutputs:\n  nodepoolOutput:\n    name: ${pool.name}\n    machineType: ${pool.machineType}\n    zones: ${pool.zones}\n    discSizeGb: ${pool.discSizeGb}\n    discType: ${pool.discType}\n    upgradeSettings: ${pool.upgradeSettings}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGcpNodePool.\n",
                "properties": {
                    "accelerators": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getGcpNodePoolAccelerator:getGcpNodePoolAccelerator"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the node pool.\n"
                    },
                    "taints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getGcpNodePoolTaint:getGcpNodePoolTaint"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the node pool will be associated with.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGcpNodePool.\n",
                "properties": {
                    "accelerators": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getGcpNodePoolAccelerator:getGcpNodePoolAccelerator"
                        },
                        "type": "array"
                    },
                    "autoRepair": {
                        "description": "Whether the nodes will be automatically repaired.\n",
                        "type": "boolean"
                    },
                    "autoUpgrade": {
                        "description": "Whether the nodes will be automatically upgraded.\n",
                        "type": "boolean"
                    },
                    "discSizeGb": {
                        "description": "Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.\n\t\t\tIf unspecified, the default disk size is 100GB.\n",
                        "type": "integer"
                    },
                    "discType": {
                        "description": "Type of the disk attached to each node\n\t\t\tIf unspecified, the default disk type is 'pd-standard'\n",
                        "type": "string"
                    },
                    "fullname": {
                        "description": "The full name of the node pool.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "imageType": {
                        "description": "The image type to use for this node. Note that for a given image type, the latest version of it will be used\n",
                        "type": "string"
                    },
                    "initialNodeCount": {
                        "description": "The initial node count for the pool\n",
                        "type": "integer"
                    },
                    "isAutoscalingEnabled": {
                        "description": "Is autoscaling enabled for this node pool.\n",
                        "type": "boolean"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The map of Kubernetes labels (key/value pairs) to be applied to each node.\n",
                        "type": "object"
                    },
                    "linuxNodeConfigs": {
                        "description": "Parameters that can be configured on Linux nodes\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getGcpNodePoolLinuxNodeConfig:getGcpNodePoolLinuxNodeConfig"
                        },
                        "type": "array"
                    },
                    "locationPolicy": {
                        "description": "Update strategy of the node pool.\n",
                        "type": "string"
                    },
                    "machineType": {
                        "description": "The name of a Google Compute Engine machine type.\n\t\t\tIf unspecified, the default machine type is e2-medium.\n",
                        "type": "string"
                    },
                    "maxNodeCount": {
                        "description": "Maximum number of nodes for one location in the NodePool. Must be \u003e= minNodeCount.\n",
                        "type": "integer"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The metadata key/value pairs assigned to instances in the cluster.\n",
                        "type": "object"
                    },
                    "minNodeCount": {
                        "description": "Minimum number of nodes for one location in the NodePool. Must be \u003e= 1 and \u003c= maxNodeCount.\n",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The short name of the node pool.\n",
                        "type": "string"
                    },
                    "nodePoolLoggingConfigs": {
                        "description": "Logging configuration.\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getGcpNodePoolNodePoolLoggingConfig:getGcpNodePoolNodePoolLoggingConfig"
                        },
                        "type": "array"
                    },
                    "oauthScopes": {
                        "description": "The set of Google API scopes to be made available on all of the node VMs under the default service account.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "resourceLabels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Resource labels associated to node pool\n",
                        "type": "object"
                    },
                    "spot": {
                        "description": "Spot flag for enabling Spot VM\n",
                        "type": "boolean"
                    },
                    "tags": {
                        "description": "The list of instance tags applied to all nodes.\n\t\t\tTags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation.\n\t\t\tEach tag within the list must comply with RFC1035.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "taints": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getGcpNodePoolTaint:getGcpNodePoolTaint"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant that the node pool will be associated with.\n",
                        "type": "string"
                    },
                    "totalMaxNodeCount": {
                        "description": "Maximum number of nodes for one location in the NodePool. Must be \u003e= minNodeCount.\n",
                        "type": "integer"
                    },
                    "totalMinNodeCount": {
                        "description": "Minimum number of nodes for one location in the NodePool. Must be \u003e= 1 and \u003c= maxNodeCount.\n",
                        "type": "integer"
                    },
                    "upgradeSettings": {
                        "description": "Upgrade settings control disruption and speed of the upgrade.\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getGcpNodePoolUpgradeSetting:getGcpNodePoolUpgradeSetting"
                        },
                        "type": "array"
                    },
                    "zones": {
                        "description": "The list of Google Compute Engine zones in which the NodePool's nodes should be located.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "autoRepair",
                    "autoUpgrade",
                    "discSizeGb",
                    "discType",
                    "fullname",
                    "imageType",
                    "initialNodeCount",
                    "isAutoscalingEnabled",
                    "labels",
                    "linuxNodeConfigs",
                    "locationPolicy",
                    "machineType",
                    "maxNodeCount",
                    "metadata",
                    "minNodeCount",
                    "name",
                    "nodePoolLoggingConfigs",
                    "oauthScopes",
                    "resourceLabels",
                    "spot",
                    "tags",
                    "tenantId",
                    "totalMaxNodeCount",
                    "totalMinNodeCount",
                    "upgradeSettings",
                    "zones",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getGcpNodePools:getGcpNodePools": {
            "description": "`duplocloud.getGcpNodePools` retrieves list of node pools in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst app = duplocloud.getGcpNodePools({\n    tenantId: \"tenantid\",\n});\nexport const nodepoolOutput = {\n    nodePools: app.then(app =\u003e app.nodePools),\n};\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\napp = duplocloud.get_gcp_node_pools(tenant_id=\"tenantid\")\npulumi.export(\"nodepoolOutput\", {\n    \"nodePools\": app.node_pools,\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = Duplocloud.GetGcpNodePools.Invoke(new()\n    {\n        TenantId = \"tenantid\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"nodepoolOutput\"] = \n        {\n            { \"nodePools\", app.Apply(getGcpNodePoolsResult =\u003e getGcpNodePoolsResult.NodePools) },\n        },\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tapp, err := duplocloud.GetGcpNodePools(ctx, \u0026duplocloud.GetGcpNodePoolsArgs{\n\t\t\tTenantId: \"tenantid\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"nodepoolOutput\", []duplocloud.GetGcpNodePoolsNodePoolMap{\n\t\t\t\"nodePools\": app.NodePools,\n\t\t})\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetGcpNodePoolsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var app = DuplocloudFunctions.getGcpNodePools(GetGcpNodePoolsArgs.builder()\n            .tenantId(\"tenantid\")\n            .build());\n\n        ctx.export(\"nodepoolOutput\", %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n    }\n}\n```\n```yaml\nvariables:\n  app:\n    fn::invoke:\n      function: duplocloud:getGcpNodePools\n      arguments:\n        tenantId: tenantid\noutputs:\n  nodepoolOutput:\n    nodePools: ${app.nodePools}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGcpNodePools.\n",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the node pool will be associated with.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGcpNodePools.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "nodePools": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getGcpNodePoolsNodePool:getGcpNodePoolsNodePool"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant that the node pool will be associated with.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "nodePools",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getGcpRedisInstance:getGcpRedisInstance": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst app = duplocloud.getGcpRedisInstance({\n    tenantId: \"tenant_id\",\n    name: \"name\",\n});\nexport const out = {\n    name: app.then(app =\u003e app.name),\n    displayName: app.then(app =\u003e app.displayName),\n    memorySizeGb: app.then(app =\u003e app.memorySizeGb),\n    readReplicasEnabled: app.then(app =\u003e app.readReplicasEnabled),\n    redisConfigs: app.then(app =\u003e app.redisConfigs),\n    redisVersion: app.then(app =\u003e app.redisVersion),\n    replicaCount: app.then(app =\u003e app.replicaCount),\n    authEnabled: app.then(app =\u003e app.authEnabled),\n    transitEncryptionEnabled: app.then(app =\u003e app.transitEncryptionEnabled),\n    tier: app.then(app =\u003e app.tier),\n    labels: app.then(app =\u003e app.labels),\n};\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\napp = duplocloud.get_gcp_redis_instance(tenant_id=\"tenant_id\",\n    name=\"name\")\npulumi.export(\"out\", {\n    \"name\": app.name,\n    \"displayName\": app.display_name,\n    \"memorySizeGb\": app.memory_size_gb,\n    \"readReplicasEnabled\": app.read_replicas_enabled,\n    \"redisConfigs\": app.redis_configs,\n    \"redisVersion\": app.redis_version,\n    \"replicaCount\": app.replica_count,\n    \"authEnabled\": app.auth_enabled,\n    \"transitEncryptionEnabled\": app.transit_encryption_enabled,\n    \"tier\": app.tier,\n    \"labels\": app.labels,\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = Duplocloud.GetGcpRedisInstance.Invoke(new()\n    {\n        TenantId = \"tenant_id\",\n        Name = \"name\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"out\"] = \n        {\n            { \"name\", app.Apply(getGcpRedisInstanceResult =\u003e getGcpRedisInstanceResult.Name) },\n            { \"displayName\", app.Apply(getGcpRedisInstanceResult =\u003e getGcpRedisInstanceResult.DisplayName) },\n            { \"memorySizeGb\", app.Apply(getGcpRedisInstanceResult =\u003e getGcpRedisInstanceResult.MemorySizeGb) },\n            { \"readReplicasEnabled\", app.Apply(getGcpRedisInstanceResult =\u003e getGcpRedisInstanceResult.ReadReplicasEnabled) },\n            { \"redisConfigs\", app.Apply(getGcpRedisInstanceResult =\u003e getGcpRedisInstanceResult.RedisConfigs) },\n            { \"redisVersion\", app.Apply(getGcpRedisInstanceResult =\u003e getGcpRedisInstanceResult.RedisVersion) },\n            { \"replicaCount\", app.Apply(getGcpRedisInstanceResult =\u003e getGcpRedisInstanceResult.ReplicaCount) },\n            { \"authEnabled\", app.Apply(getGcpRedisInstanceResult =\u003e getGcpRedisInstanceResult.AuthEnabled) },\n            { \"transitEncryptionEnabled\", app.Apply(getGcpRedisInstanceResult =\u003e getGcpRedisInstanceResult.TransitEncryptionEnabled) },\n            { \"tier\", app.Apply(getGcpRedisInstanceResult =\u003e getGcpRedisInstanceResult.Tier) },\n            { \"labels\", app.Apply(getGcpRedisInstanceResult =\u003e getGcpRedisInstanceResult.Labels) },\n        },\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tapp, err := duplocloud.LookupGcpRedisInstance(ctx, \u0026duplocloud.LookupGcpRedisInstanceArgs{\n\t\t\tTenantId: \"tenant_id\",\n\t\t\tName:     \"name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"out\", pulumi.Map{\n\t\t\t\"name\":                     app.Name,\n\t\t\t\"displayName\":              app.DisplayName,\n\t\t\t\"memorySizeGb\":             app.MemorySizeGb,\n\t\t\t\"readReplicasEnabled\":      app.ReadReplicasEnabled,\n\t\t\t\"redisConfigs\":             app.RedisConfigs,\n\t\t\t\"redisVersion\":             app.RedisVersion,\n\t\t\t\"replicaCount\":             app.ReplicaCount,\n\t\t\t\"authEnabled\":              app.AuthEnabled,\n\t\t\t\"transitEncryptionEnabled\": app.TransitEncryptionEnabled,\n\t\t\t\"tier\":                     app.Tier,\n\t\t\t\"labels\":                   app.Labels,\n\t\t})\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetGcpRedisInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var app = DuplocloudFunctions.getGcpRedisInstance(GetGcpRedisInstanceArgs.builder()\n            .tenantId(\"tenant_id\")\n            .name(\"name\")\n            .build());\n\n        ctx.export(\"out\", %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n    }\n}\n```\n```yaml\nvariables:\n  app:\n    fn::invoke:\n      function: duplocloud:getGcpRedisInstance\n      arguments:\n        tenantId: tenant_id\n        name: name\noutputs:\n  out:\n    name: ${app.name}\n    displayName: ${app.displayName}\n    memorySizeGb: ${app.memorySizeGb}\n    readReplicasEnabled: ${app.readReplicasEnabled}\n    redisConfigs: ${app.redisConfigs}\n    redisVersion: ${app.redisVersion}\n    replicaCount: ${app.replicaCount}\n    authEnabled: ${app.authEnabled}\n    transitEncryptionEnabled: ${app.transitEncryptionEnabled}\n    tier: ${app.tier}\n    labels: ${app.labels}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGcpRedisInstance.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The short name of the redis instance.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the redis instance will be created in.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGcpRedisInstance.\n",
                "properties": {
                    "authEnabled": {
                        "description": "Indicates whether OSS Redis AUTH is enabled for the instance. If set to \"true\" AUTH is enabled on the instance. Default value is \"false\" meaning AUTH is disabled.\n",
                        "type": "boolean"
                    },
                    "displayName": {
                        "description": "An arbitrary and optional user-provided name for the instance.\n",
                        "type": "string"
                    },
                    "fullname": {
                        "description": "The full name of the of the Redis instance.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Resource labels to represent user provided metadata.\n",
                        "type": "object"
                    },
                    "memorySizeGb": {
                        "description": "Redis memory size in GiB.\n",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The short name of the redis instance.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "type": "string"
                    },
                    "readReplicasEnabled": {
                        "description": "Optional. Read replica mode. Can only be specified when trying to create the instance.\n",
                        "type": "boolean"
                    },
                    "redisConfigs": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Redis configuration parameters, according to http://redis.io/topics/config. Please check Memorystore documentation for the list of supported parameters: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs\n",
                        "type": "object"
                    },
                    "redisVersion": {
                        "description": "The version of Redis software. If not provided, latest supported version will be used. Please check the API documentation linked at the top for the latest valid values.\n",
                        "type": "string"
                    },
                    "replicaCount": {
                        "description": "The number of replica nodes. The valid range for the Standard Tier with read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled for a Standard Tier instance, the only valid value is 1 and the default is 1. The valid value for basic tier is 0 and the default is also 0.\n",
                        "type": "integer"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant that the redis instance will be created in.\n",
                        "type": "string"
                    },
                    "tier": {
                        "description": "The service tier of the instance. Must be one of these values: BASIC: standalone instance or STANDARD*HA: highly available primary/replica instances Default value: \"BASIC\" Possible values: [\"BASIC\", \"STANDARD*HA\"]\n",
                        "type": "string"
                    },
                    "transitEncryptionEnabled": {
                        "description": "The TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "authEnabled",
                    "displayName",
                    "fullname",
                    "labels",
                    "memorySizeGb",
                    "name",
                    "readReplicasEnabled",
                    "redisConfigs",
                    "redisVersion",
                    "replicaCount",
                    "tenantId",
                    "tier",
                    "transitEncryptionEnabled",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getGcpSqlDatabaseInstance:getGcpSqlDatabaseInstance": {
            "description": "`duplocloud.GcpSqlDatabaseInstance` retrieves a gcp sql instance in Duplo.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGcpSqlDatabaseInstance.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The short name of the sql database.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the sql database will be created in.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGcpSqlDatabaseInstance.\n",
                "properties": {
                    "connectionName": {
                        "description": "Connection name  of the database.\n",
                        "type": "string"
                    },
                    "databaseVersion": {
                        "description": "The MySQL, PostgreSQL orSQL Server version to use.Supported values include `MYSQL_5_6`,`MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`,`POSTGRES_11`,`POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `POSTGRES_15`, `SQLSERVER_2017_STANDARD`,`SQLSERVER_2017_ENTERPRISE`,`SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.`SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,`SQLSERVER_2019_WEB`.[Database Version Policies](https://cloud.google.com/sql/docs/db-versions)includes an up-to-date reference of supported versions.\n",
                        "type": "string"
                    },
                    "diskSize": {
                        "description": "The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB.\n",
                        "type": "integer"
                    },
                    "fullname": {
                        "description": "The full name of the sql database.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ipAddresses": {
                        "description": "IP address of the database.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of string keys and values that can be used to organize and categorize this resource.\n",
                        "type": "object"
                    },
                    "name": {
                        "description": "The short name of the sql database.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.\n",
                        "type": "string"
                    },
                    "selfLink": {
                        "description": "The SelfLink of the sql database.\n",
                        "type": "string"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant that the sql database will be created in.\n",
                        "type": "string"
                    },
                    "tier": {
                        "description": "The machine type to use. See tiers for more details and supported versions. Postgres supports only shared-core machine types, and custom machine types such as `db-custom-2-13312`.See the [Custom Machine Type Documentation](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) to learn about specifying custom machine types.\n",
                        "type": "string"
                    },
                    "waitUntilReady": {
                        "description": "Whether or not to wait until sql database instance to be ready, after creation.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "connectionName",
                    "databaseVersion",
                    "diskSize",
                    "fullname",
                    "ipAddresses",
                    "labels",
                    "name",
                    "selfLink",
                    "tenantId",
                    "tier",
                    "waitUntilReady",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getGcpSqlDatabaseInstances:getGcpSqlDatabaseInstances": {
            "description": "`duplocloud.getGcpSqlDatabaseInstances` retrieves a gcp sql instance in Duplo.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGcpSqlDatabaseInstances.\n",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the sql database will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGcpSqlDatabaseInstances.\n",
                "properties": {
                    "databases": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getGcpSqlDatabaseInstancesDatabase:getGcpSqlDatabaseInstancesDatabase"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant that the sql database will be created in.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "databases",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getGkeCredentials:getGkeCredentials": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst credential = duplocloud.getGkeCredentials({\n    planId: \"non-prod\",\n});\nexport const credentialValue = {\n    caCertificateData: credential.then(credential =\u003e credential.caCertificateData),\n    endpoint: credential.then(credential =\u003e credential.endpoint),\n    name: credential.then(credential =\u003e credential.name),\n    version: credential.then(credential =\u003e credential.version),\n    region: credential.then(credential =\u003e credential.region),\n    token: credential.then(credential =\u003e credential.token),\n};\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ncredential = duplocloud.get_gke_credentials(plan_id=\"non-prod\")\npulumi.export(\"credentialValue\", {\n    \"caCertificateData\": credential.ca_certificate_data,\n    \"endpoint\": credential.endpoint,\n    \"name\": credential.name,\n    \"version\": credential.version,\n    \"region\": credential.region,\n    \"token\": credential.token,\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var credential = Duplocloud.GetGkeCredentials.Invoke(new()\n    {\n        PlanId = \"non-prod\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"credentialValue\"] = \n        {\n            { \"caCertificateData\", credential.Apply(getGkeCredentialsResult =\u003e getGkeCredentialsResult.CaCertificateData) },\n            { \"endpoint\", credential.Apply(getGkeCredentialsResult =\u003e getGkeCredentialsResult.Endpoint) },\n            { \"name\", credential.Apply(getGkeCredentialsResult =\u003e getGkeCredentialsResult.Name) },\n            { \"version\", credential.Apply(getGkeCredentialsResult =\u003e getGkeCredentialsResult.Version) },\n            { \"region\", credential.Apply(getGkeCredentialsResult =\u003e getGkeCredentialsResult.Region) },\n            { \"token\", credential.Apply(getGkeCredentialsResult =\u003e getGkeCredentialsResult.Token) },\n        },\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcredential, err := duplocloud.GetGkeCredentials(ctx, \u0026duplocloud.GetGkeCredentialsArgs{\n\t\t\tPlanId: \"non-prod\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"credentialValue\", pulumi.StringMap{\n\t\t\t\"caCertificateData\": credential.CaCertificateData,\n\t\t\t\"endpoint\":          credential.Endpoint,\n\t\t\t\"name\":              credential.Name,\n\t\t\t\"version\":           credential.Version,\n\t\t\t\"region\":            credential.Region,\n\t\t\t\"token\":             credential.Token,\n\t\t})\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetGkeCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var credential = DuplocloudFunctions.getGkeCredentials(GetGkeCredentialsArgs.builder()\n            .planId(\"non-prod\")\n            .build());\n\n        ctx.export(\"credentialValue\", %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n    }\n}\n```\n```yaml\nvariables:\n  credential:\n    fn::invoke:\n      function: duplocloud:getGkeCredentials\n      arguments:\n        planId: non-prod\noutputs:\n  credentialValue:\n    caCertificateData: ${credential.caCertificateData}\n    endpoint: ${credential.endpoint}\n    name: ${credential.name}\n    version: ${credential.version}\n    region: ${credential.region}\n    token: ${credential.token}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGkeCredentials.\n",
                "properties": {
                    "planId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGkeCredentials.\n",
                "properties": {
                    "caCertificateData": {
                        "type": "string"
                    },
                    "endpoint": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "planId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "token": {
                        "secret": true,
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "caCertificateData",
                    "endpoint",
                    "name",
                    "planId",
                    "region",
                    "token",
                    "version",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getInfrastructure:getInfrastructure": {
            "description": "`duplocloud.Infrastructure` retrieves details of an infrastructure in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Example 1 - look up an infrastructure by tenant ID.\nconst myinfra1 = duplocloud.getInfrastructure({\n    tenantId: tenantId,\n});\n// Example 2 - look up an infrastructure by name.\nconst myinfra2 = duplocloud.getInfrastructure({\n    infraName: \"myinfra\",\n});\n// Example 3 - look up list of certificates by plan ID.\nconst certList = duplocloud.getPlanCertificates({\n    planId: \"default\",\n});\n// Example 3 - look up plan certificates by plan ID and certificate name.\nconst singleCert = duplocloud.getPlanCertificate({\n    planId: \"default\",\n    name: \"poc.duplocloud.net\",\n});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Example 1 - look up an infrastructure by tenant ID.\nmyinfra1 = duplocloud.get_infrastructure(tenant_id=tenant_id)\n# Example 2 - look up an infrastructure by name.\nmyinfra2 = duplocloud.get_infrastructure(infra_name=\"myinfra\")\n# Example 3 - look up list of certificates by plan ID.\ncert_list = duplocloud.get_plan_certificates(plan_id=\"default\")\n# Example 3 - look up plan certificates by plan ID and certificate name.\nsingle_cert = duplocloud.get_plan_certificate(plan_id=\"default\",\n    name=\"poc.duplocloud.net\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Example 1 - look up an infrastructure by tenant ID.\n    var myinfra1 = Duplocloud.GetInfrastructure.Invoke(new()\n    {\n        TenantId = tenantId,\n    });\n\n    // Example 2 - look up an infrastructure by name.\n    var myinfra2 = Duplocloud.GetInfrastructure.Invoke(new()\n    {\n        InfraName = \"myinfra\",\n    });\n\n    // Example 3 - look up list of certificates by plan ID.\n    var certList = Duplocloud.GetPlanCertificates.Invoke(new()\n    {\n        PlanId = \"default\",\n    });\n\n    // Example 3 - look up plan certificates by plan ID and certificate name.\n    var singleCert = Duplocloud.GetPlanCertificate.Invoke(new()\n    {\n        PlanId = \"default\",\n        Name = \"poc.duplocloud.net\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Example 1 - look up an infrastructure by tenant ID.\n\t\t_, err := duplocloud.LookupInfrastructure(ctx, \u0026duplocloud.LookupInfrastructureArgs{\n\t\t\tTenantId: pulumi.StringRef(tenantId),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Example 2 - look up an infrastructure by name.\n\t\t_, err = duplocloud.LookupInfrastructure(ctx, \u0026duplocloud.LookupInfrastructureArgs{\n\t\t\tInfraName: pulumi.StringRef(\"myinfra\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Example 3 - look up list of certificates by plan ID.\n\t\t_, err = duplocloud.LookupPlanCertificates(ctx, \u0026duplocloud.LookupPlanCertificatesArgs{\n\t\t\tPlanId: \"default\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Example 3 - look up plan certificates by plan ID and certificate name.\n\t\t_, err = duplocloud.LookupPlanCertificate(ctx, \u0026duplocloud.LookupPlanCertificateArgs{\n\t\t\tPlanId: \"default\",\n\t\t\tName:   \"poc.duplocloud.net\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetInfrastructureArgs;\nimport com.pulumi.duplocloud.inputs.GetPlanCertificatesArgs;\nimport com.pulumi.duplocloud.inputs.GetPlanCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Example 1 - look up an infrastructure by tenant ID.\n        final var myinfra1 = DuplocloudFunctions.getInfrastructure(GetInfrastructureArgs.builder()\n            .tenantId(tenantId)\n            .build());\n\n        // Example 2 - look up an infrastructure by name.\n        final var myinfra2 = DuplocloudFunctions.getInfrastructure(GetInfrastructureArgs.builder()\n            .infraName(\"myinfra\")\n            .build());\n\n        // Example 3 - look up list of certificates by plan ID.\n        final var certList = DuplocloudFunctions.getPlanCertificates(GetPlanCertificatesArgs.builder()\n            .planId(\"default\")\n            .build());\n\n        // Example 3 - look up plan certificates by plan ID and certificate name.\n        final var singleCert = DuplocloudFunctions.getPlanCertificate(GetPlanCertificateArgs.builder()\n            .planId(\"default\")\n            .name(\"poc.duplocloud.net\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Example 1 - look up an infrastructure by tenant ID.\n  myinfra1:\n    fn::invoke:\n      function: duplocloud:getInfrastructure\n      arguments:\n        tenantId: ${tenantId}\n  # Example 2 - look up an infrastructure by name.\n  myinfra2:\n    fn::invoke:\n      function: duplocloud:getInfrastructure\n      arguments:\n        infraName: myinfra\n  # Example 3 - look up list of certificates by plan ID.\n  certList:\n    fn::invoke:\n      function: duplocloud:getPlanCertificates\n      arguments:\n        planId: default\n  # Example 3 - look up plan certificates by plan ID and certificate name.\n  singleCert:\n    fn::invoke:\n      function: duplocloud:getPlanCertificate\n      arguments:\n        planId: default\n        name: poc.duplocloud.net\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInfrastructure.\n",
                "properties": {
                    "infraName": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInfrastructure.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "addressPrefix": {
                        "type": "string"
                    },
                    "azcount": {
                        "type": "integer"
                    },
                    "cloud": {
                        "type": "integer"
                    },
                    "enableK8Cluster": {
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "infraName": {
                        "type": "string"
                    },
                    "privateSubnets": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getInfrastructurePrivateSubnet:getInfrastructurePrivateSubnet"
                        },
                        "type": "array"
                    },
                    "publicSubnets": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getInfrastructurePublicSubnet:getInfrastructurePublicSubnet"
                        },
                        "type": "array"
                    },
                    "region": {
                        "type": "string"
                    },
                    "securityGroups": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getInfrastructureSecurityGroup:getInfrastructureSecurityGroup"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string"
                    },
                    "subnetCidr": {
                        "type": "integer"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string"
                    },
                    "vpcName": {
                        "type": "string"
                    }
                },
                "required": [
                    "accountId",
                    "addressPrefix",
                    "azcount",
                    "cloud",
                    "enableK8Cluster",
                    "infraName",
                    "privateSubnets",
                    "publicSubnets",
                    "region",
                    "securityGroups",
                    "status",
                    "subnetCidr",
                    "vpcId",
                    "vpcName",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getInfrastructures:getInfrastructures": {
            "description": "`duplocloud.getInfrastructures` retrieves a list of infrastructures in Duplo.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\n// Retrieve a list of all infrastructures\nconst all = duplocloud.getInfrastructures({});\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\n# Retrieve a list of all infrastructures\nall = duplocloud.get_infrastructures()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Retrieve a list of all infrastructures\n    var all = Duplocloud.GetInfrastructures.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Retrieve a list of all infrastructures\n\t\t_, err := duplocloud.GetInfrastructures(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Retrieve a list of all infrastructures\n        final var all = DuplocloudFunctions.getInfrastructures();\n\n    }\n}\n```\n```yaml\nvariables:\n  # Retrieve a list of all infrastructures\n  all:\n    fn::invoke:\n      function: duplocloud:getInfrastructures\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getInfrastructures.\n",
                "properties": {
                    "datas": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getInfrastructuresData:getInfrastructuresData"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "datas",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getK8ConfigMap:getK8ConfigMap": {
            "description": "`duplocloud.K8ConfigMap` reads data from a single kubernetes configmap in a Duplo tenant.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getK8ConfigMap.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the configmap.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the configmap will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getK8ConfigMap.\n",
                "properties": {
                    "data": {
                        "description": "A JSON encoded string representing the configmap data. You can use the `jsondecode()` function to parse this, if needed.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "metadata": {
                        "description": "A JSON encoded string representing the configmap metadata. You can use the `jsondecode()` function to parse this, if needed.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the configmap.\n",
                        "type": "string"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant that the configmap will be created in.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "metadata",
                    "name",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getK8ConfigMaps:getK8ConfigMaps": {
            "description": "`duplocloud.getK8ConfigMaps` lists all kubernetes configmaps in a Duplo tenant.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst test = duplocloud.getK8ConfigMaps({\n    tenantId: tenantId,\n});\nexport const configMaps = test.then(test =\u003e test.configMaps);\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\ntest = duplocloud.get_k8_config_maps(tenant_id=tenant_id)\npulumi.export(\"configMaps\", test.config_maps)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Duplocloud.GetK8ConfigMaps.Invoke(new()\n    {\n        TenantId = tenantId,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"configMaps\"] = test.Apply(getK8ConfigMapsResult =\u003e getK8ConfigMapsResult.ConfigMaps),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := duplocloud.GetK8ConfigMaps(ctx, \u0026duplocloud.GetK8ConfigMapsArgs{\n\t\t\tTenantId: tenantId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"configMaps\", test.ConfigMaps)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetK8ConfigMapsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = DuplocloudFunctions.getK8ConfigMaps(GetK8ConfigMapsArgs.builder()\n            .tenantId(tenantId)\n            .build());\n\n        ctx.export(\"configMaps\", test.applyValue(getK8ConfigMapsResult -\u003e getK8ConfigMapsResult.configMaps()));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      function: duplocloud:getK8ConfigMaps\n      arguments:\n        tenantId: ${tenantId}\noutputs:\n  configMaps: ${test.configMaps}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getK8ConfigMaps.\n",
                "properties": {
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getK8ConfigMaps.\n",
                "properties": {
                    "configMaps": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getK8ConfigMapsConfigMap:getK8ConfigMapsConfigMap"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "configMaps",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getK8Secret:getK8Secret": {
            "inputs": {
                "description": "A collection of arguments for invoking getK8Secret.\n",
                "properties": {
                    "secretName": {
                        "type": "string",
                        "description": "The name of the secret.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the secret will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "secretName",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getK8Secret.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "secretAnnotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the secret\n",
                        "type": "object"
                    },
                    "secretData": {
                        "description": "A JSON encoded string representing the secret metadata. You can use the `jsonencode()` function to convert map or object data, if needed. You can use the `jsondecode()` function to read data.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "secretLabels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the secret\n",
                        "type": "object"
                    },
                    "secretName": {
                        "description": "The name of the secret.\n",
                        "type": "string"
                    },
                    "secretType": {
                        "description": "The type of the secret.  Usually `\"Opaque\"`.\n",
                        "type": "string"
                    },
                    "secretVersion": {
                        "type": "string"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant that the secret will be created in.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "secretAnnotations",
                    "secretData",
                    "secretLabels",
                    "secretName",
                    "secretType",
                    "secretVersion",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getK8Secrets:getK8Secrets": {
            "inputs": {
                "description": "A collection of arguments for invoking getK8Secrets.\n",
                "properties": {
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getK8Secrets.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "secrets": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getK8SecretsSecret:getK8SecretsSecret"
                        },
                        "secret": true,
                        "type": "array"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "secrets",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getK8sCronJob:getK8sCronJob": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst job = duplocloud.getK8sCronJob({\n    tenantId: tenantId,\n    metadata: {\n        name: \"datajob\",\n    },\n});\nexport const metadata = job.then(job =\u003e job.metadata?.namespace);\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\njob = duplocloud.get_k8s_cron_job(tenant_id=tenant_id,\n    metadata={\n        \"name\": \"datajob\",\n    })\npulumi.export(\"metadata\", job.metadata.namespace)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var job = Duplocloud.GetK8sCronJob.Invoke(new()\n    {\n        TenantId = tenantId,\n        Metadata = new Duplocloud.Inputs.GetK8sCronJobMetadataInputArgs\n        {\n            Name = \"datajob\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"metadata\"] = job.Apply(getK8sCronJobResult =\u003e getK8sCronJobResult.Metadata?.Namespace),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjob, err := duplocloud.LookupK8sCronJob(ctx, \u0026duplocloud.LookupK8sCronJobArgs{\n\t\t\tTenantId: tenantId,\n\t\t\tMetadata: duplocloud.GetK8sCronJobMetadata{\n\t\t\t\tName: \"datajob\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"metadata\", job.Metadata.Namespace)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetK8sCronJobArgs;\nimport com.pulumi.duplocloud.inputs.GetK8sCronJobMetadataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var job = DuplocloudFunctions.getK8sCronJob(GetK8sCronJobArgs.builder()\n            .tenantId(tenantId)\n            .metadata(GetK8sCronJobMetadataArgs.builder()\n                .name(\"datajob\")\n                .build())\n            .build());\n\n        ctx.export(\"metadata\", job.applyValue(getK8sCronJobResult -\u003e getK8sCronJobResult.metadata().namespace()));\n    }\n}\n```\n```yaml\nvariables:\n  job:\n    fn::invoke:\n      function: duplocloud:getK8sCronJob\n      arguments:\n        tenantId: ${tenantId}\n        metadata:\n          name: datajob\noutputs:\n  metadata: ${job.metadata.namespace}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getK8sCronJob.\n",
                "properties": {
                    "isAnyHostAllowed": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "metadata": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobMetadata:getK8sCronJobMetadata",
                        "description": "Standard cronjob's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the job will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "metadata",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getK8sCronJob.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "isAnyHostAllowed": {
                        "description": "Defaults to `false`.\n",
                        "type": "boolean"
                    },
                    "metadata": {
                        "$ref": "#/types/duplocloud:index/getK8sCronJobMetadata:getK8sCronJobMetadata",
                        "description": "Standard cronjob's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                    },
                    "specs": {
                        "description": "Spec of the cron job owned by the cluster\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getK8sCronJobSpec:getK8sCronJobSpec"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant that the job will be created in.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "metadata",
                    "specs",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getK8sJob:getK8sJob": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as duplocloud from \"@pulumi/duplocloud\";\n\nconst job = duplocloud.getK8sJob({\n    tenantId: tenantId,\n    metadata: {\n        name: \"datajob\",\n    },\n});\nexport const metadata = job.then(job =\u003e job.metadata?.namespace);\n```\n```python\nimport pulumi\nimport pulumi_duplocloud as duplocloud\n\njob = duplocloud.get_k8s_job(tenant_id=tenant_id,\n    metadata={\n        \"name\": \"datajob\",\n    })\npulumi.export(\"metadata\", job.metadata.namespace)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Duplocloud = Pulumi.Duplocloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var job = Duplocloud.GetK8sJob.Invoke(new()\n    {\n        TenantId = tenantId,\n        Metadata = new Duplocloud.Inputs.GetK8sJobMetadataInputArgs\n        {\n            Name = \"datajob\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"metadata\"] = job.Apply(getK8sJobResult =\u003e getK8sJobResult.Metadata?.Namespace),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjob, err := duplocloud.LookupK8sJob(ctx, \u0026duplocloud.LookupK8sJobArgs{\n\t\t\tTenantId: tenantId,\n\t\t\tMetadata: duplocloud.GetK8sJobMetadata{\n\t\t\t\tName: \"datajob\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"metadata\", job.Metadata.Namespace)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.duplocloud.DuplocloudFunctions;\nimport com.pulumi.duplocloud.inputs.GetK8sJobArgs;\nimport com.pulumi.duplocloud.inputs.GetK8sJobMetadataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var job = DuplocloudFunctions.getK8sJob(GetK8sJobArgs.builder()\n            .tenantId(tenantId)\n            .metadata(GetK8sJobMetadataArgs.builder()\n                .name(\"datajob\")\n                .build())\n            .build());\n\n        ctx.export(\"metadata\", job.applyValue(getK8sJobResult -\u003e getK8sJobResult.metadata().namespace()));\n    }\n}\n```\n```yaml\nvariables:\n  job:\n    fn::invoke:\n      function: duplocloud:getK8sJob\n      arguments:\n        tenantId: ${tenantId}\n        metadata:\n          name: datajob\noutputs:\n  metadata: ${job.metadata.namespace}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getK8sJob.\n",
                "properties": {
                    "isAnyHostAllowed": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "metadata": {
                        "$ref": "#/types/duplocloud:index/getK8sJobMetadata:getK8sJobMetadata",
                        "description": "Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the job will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "metadata",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getK8sJob.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "isAnyHostAllowed": {
                        "description": "Defaults to `false`.\n",
                        "type": "boolean"
                    },
                    "metadata": {
                        "$ref": "#/types/duplocloud:index/getK8sJobMetadata:getK8sJobMetadata",
                        "description": "Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                    },
                    "specs": {
                        "description": "Spec of the job owned by the cluster\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getK8sJobSpec:getK8sJobSpec"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant that the job will be created in.\n",
                        "type": "string"
                    },
                    "waitForCompletion": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "metadata",
                    "specs",
                    "tenantId",
                    "waitForCompletion",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getNativeHostImage:getNativeHostImage": {
            "description": "`duplocloud.getNativeHostImage` retrieves details of a specific image for a given tenant.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNativeHostImage.\n",
                "properties": {
                    "arch": {
                        "type": "string"
                    },
                    "isKubernetes": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The tenant ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNativeHostImage.\n",
                "properties": {
                    "arch": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "isKubernetes": {
                        "type": "boolean"
                    },
                    "k8sVersion": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "os": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getNativeHostImageTag:getNativeHostImageTag"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "description": "The tenant ID\n",
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "required": [
                    "arch",
                    "imageId",
                    "isKubernetes",
                    "k8sVersion",
                    "name",
                    "os",
                    "region",
                    "tags",
                    "tenantId",
                    "username",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getNativeHostImages:getNativeHostImages": {
            "description": "`duplocloud.getNativeHostImages` retrieves a list of applicable images for a given tenant.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNativeHostImages.\n",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "The tenant ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNativeHostImages.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "images": {
                        "description": "The list of images for this tenant.\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getNativeHostImagesImage:getNativeHostImagesImage"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "description": "The tenant ID\n",
                        "type": "string"
                    }
                },
                "required": [
                    "images",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getNativeHosts:getNativeHosts": {
            "description": "`duplocloud.getNativeHosts` lists native hosts in a Duplo tenant.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNativeHosts.\n",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant in which to list the hosts.\n"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNativeHosts.\n",
                "properties": {
                    "hosts": {
                        "description": "The list of native hosts.\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getNativeHostsHost:getNativeHostsHost"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant in which to list the hosts.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "hosts",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlan:getPlan": {
            "description": "`duplocloud.getPlan` retrieves details of a plan in Duplo.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlan.\n",
                "properties": {
                    "planId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlan.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "availabilityZones": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "capabilities": {
                        "additionalProperties": {
                            "type": "boolean"
                        },
                        "type": "object"
                    },
                    "certificates": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanCertificate:getPlanCertificate"
                        },
                        "type": "array"
                    },
                    "cloud": {
                        "type": "integer"
                    },
                    "cloudConfig": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "configs": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanConfig:getPlanConfig"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "images": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanImage:getPlanImage"
                        },
                        "type": "array"
                    },
                    "kmsKeys": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanKmsKey:getPlanKmsKey"
                        },
                        "type": "array"
                    },
                    "kubernetesConfigs": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanKubernetesConfig:getPlanKubernetesConfig"
                        },
                        "type": "array"
                    },
                    "metadatas": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanMetadata:getPlanMetadata"
                        },
                        "type": "array"
                    },
                    "planId": {
                        "type": "string"
                    },
                    "privateSubnetIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "publicSubnetIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "region": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string"
                    },
                    "wafInfos": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanWafInfo:getPlanWafInfo"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "accountId",
                    "availabilityZones",
                    "capabilities",
                    "certificates",
                    "cloud",
                    "cloudConfig",
                    "configs",
                    "images",
                    "kmsKeys",
                    "kubernetesConfigs",
                    "metadatas",
                    "planId",
                    "privateSubnetIds",
                    "publicSubnetIds",
                    "region",
                    "vpcId",
                    "wafInfos",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlanCertificate:getPlanCertificate": {
            "description": "`duplocloud.getPlanCertificate` retrieves details of a specific certificate for a given plan.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlanCertificate.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "A domain name for which the certificate should be issued\n"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The plan ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlanCertificate.\n",
                "properties": {
                    "arn": {
                        "description": "The ARN of the certificate\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "A domain name for which the certificate should be issued\n",
                        "type": "string"
                    },
                    "planId": {
                        "description": "The plan ID\n",
                        "type": "string"
                    }
                },
                "required": [
                    "arn",
                    "name",
                    "planId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlanCertificates:getPlanCertificates": {
            "description": "`duplocloud.PlanCertificates` retrieves a list of cerificates for a given plan.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlanCertificates.\n",
                "properties": {
                    "planId": {
                        "type": "string",
                        "description": "The plan ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlanCertificates.\n",
                "properties": {
                    "certificates": {
                        "description": "The list of certificates for this plan.\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanCertificatesCertificate:getPlanCertificatesCertificate"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "planId": {
                        "description": "The plan ID\n",
                        "type": "string"
                    }
                },
                "required": [
                    "certificates",
                    "planId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlanImage:getPlanImage": {
            "description": "`duplocloud.getPlanImage` retrieves details of a specific image for a given plan.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlanImage.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The plan ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlanImage.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "os": {
                        "type": "string"
                    },
                    "planId": {
                        "description": "The plan ID\n",
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanImageTag:getPlanImageTag"
                        },
                        "type": "array"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "required": [
                    "imageId",
                    "name",
                    "os",
                    "planId",
                    "tags",
                    "username",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlanImages:getPlanImages": {
            "description": "`duplocloud.PlanImages` retrieves a list of images for a given plan.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlanImages.\n",
                "properties": {
                    "planId": {
                        "type": "string",
                        "description": "The plan ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlanImages.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "images": {
                        "description": "The list of images for this plan.\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanImagesImage:getPlanImagesImage"
                        },
                        "type": "array"
                    },
                    "planId": {
                        "description": "The plan ID\n",
                        "type": "string"
                    }
                },
                "required": [
                    "images",
                    "planId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlanKms:getPlanKms": {
            "description": "`duplocloud.PlanKms` manages the list of kms avaialble to a plan in Duplo.\n\nThis resource allows you take control of individual plan kms for a specific plan.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlanKms.\n",
                "properties": {
                    "kmsName": {
                        "type": "string"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The ID of the plan to configure.\n"
                    }
                },
                "type": "object",
                "required": [
                    "kmsName",
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlanKms.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "kmsArn": {
                        "type": "string"
                    },
                    "kmsId": {
                        "type": "string"
                    },
                    "kmsName": {
                        "type": "string"
                    },
                    "planId": {
                        "description": "The ID of the plan to configure.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "kmsArn",
                    "kmsId",
                    "kmsName",
                    "planId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlanKmsKey:getPlanKmsKey": {
            "description": "`duplocloud.PlanKms` manages the list of kms avaialble to a plan in Duplo.\n\nThis resource allows you take control of individual plan kms for a specific plan.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlanKmsKey.\n",
                "properties": {
                    "planId": {
                        "type": "string",
                        "description": "The ID of the plan to configure.\n"
                    }
                },
                "type": "object",
                "required": [
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlanKmsKey.\n",
                "properties": {
                    "datas": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanKmsKeyData:getPlanKmsKeyData"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "planId": {
                        "description": "The ID of the plan to configure.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "datas",
                    "planId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlanKmsKeyV2:getPlanKmsKeyV2": {
            "description": "`duplocloud.getPlanKmsKey` retrieves a list of kms keys for a given plan.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlanKmsKeyV2.\n",
                "properties": {
                    "planId": {
                        "type": "string",
                        "description": "The plan ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlanKmsKeyV2.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "kmsKeys": {
                        "description": "The list of kms keys for this plan.\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanKmsKeyV2KmsKey:getPlanKmsKeyV2KmsKey"
                        },
                        "type": "array"
                    },
                    "planId": {
                        "description": "The plan ID\n",
                        "type": "string"
                    }
                },
                "required": [
                    "kmsKeys",
                    "planId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlanKmsV2:getPlanKmsV2": {
            "description": "`duplocloud.PlanKms` retrieves details of a specific kms for a given plan.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlanKmsV2.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The plan ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlanKmsV2.\n",
                "properties": {
                    "arn": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "planId": {
                        "description": "The plan ID\n",
                        "type": "string"
                    }
                },
                "required": [
                    "arn",
                    "id",
                    "name",
                    "planId"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlanNatGateways:getPlanNatGateways": {
            "description": "`duplocloud.getPlanNatGateways` retrieves a list of NAT gateways for a given plan.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlanNatGateways.\n",
                "properties": {
                    "planId": {
                        "type": "string",
                        "description": "The plan ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlanNatGateways.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "natGateways": {
                        "description": "The list of NAT gateways for this plan.\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanNatGatewaysNatGateway:getPlanNatGatewaysNatGateway"
                        },
                        "type": "array"
                    },
                    "planId": {
                        "description": "The plan ID\n",
                        "type": "string"
                    }
                },
                "required": [
                    "natGateways",
                    "planId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlanSettings:getPlanSettings": {
            "description": "`duplocloud.PlanSettings` manages an plan settings in Duplo.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlanSettings.\n",
                "properties": {
                    "includeGlobalDns": {
                        "type": "boolean",
                        "description": "Defaults to `true`.\n"
                    },
                    "planId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlanSettings.\n",
                "properties": {
                    "dnsSettings": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanSettingsDnsSetting:getPlanSettingsDnsSetting"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "includeGlobalDns": {
                        "description": "Defaults to `true`.\n",
                        "type": "boolean"
                    },
                    "metadatas": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanSettingsMetadata:getPlanSettingsMetadata"
                        },
                        "type": "array"
                    },
                    "planId": {
                        "type": "string"
                    },
                    "unrestrictedExtLb": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "dnsSettings",
                    "metadatas",
                    "planId",
                    "unrestrictedExtLb",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlanWaf:getPlanWaf": {
            "description": "`duplocloud.PlanWaf` retrieves details of a web acl in Duplo.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlanWaf.\n",
                "properties": {
                    "planId": {
                        "type": "string",
                        "description": "The ID of the plan for waf.\n"
                    },
                    "wafName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "planId",
                    "wafName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlanWaf.\n",
                "properties": {
                    "dashboardUrl": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "planId": {
                        "description": "The ID of the plan for waf.\n",
                        "type": "string"
                    },
                    "wafArn": {
                        "type": "string"
                    },
                    "wafName": {
                        "type": "string"
                    }
                },
                "required": [
                    "dashboardUrl",
                    "planId",
                    "wafArn",
                    "wafName",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlanWafV2:getPlanWafV2": {
            "description": "`duplocloud.PlanWaf` retrieves details of a specific waf for a given plan.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlanWafV2.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the waf  issued\n"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The plan ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlanWafV2.\n",
                "properties": {
                    "arn": {
                        "description": "The ARN of the waf\n",
                        "type": "string"
                    },
                    "dashboardUrl": {
                        "description": "The dashboard url associated to waf\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the waf  issued\n",
                        "type": "string"
                    },
                    "planId": {
                        "description": "The plan ID\n",
                        "type": "string"
                    }
                },
                "required": [
                    "arn",
                    "dashboardUrl",
                    "name",
                    "planId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlanWafs:getPlanWafs": {
            "description": "`duplocloud.getPlanWafs` retrieves a list of web acls from Duplo.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlanWafs.\n",
                "properties": {
                    "planId": {
                        "type": "string",
                        "description": "The ID of the plan for waf.\n"
                    }
                },
                "type": "object",
                "required": [
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlanWafs.\n",
                "properties": {
                    "datas": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanWafsData:getPlanWafsData"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "planId": {
                        "description": "The ID of the plan for waf.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "datas",
                    "planId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlanWafsV2:getPlanWafsV2": {
            "description": "`duplocloud.getPlanWafs` retrieves a list of wafs for a given plan.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlanWafsV2.\n",
                "properties": {
                    "planId": {
                        "type": "string",
                        "description": "The plan ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "planId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlanWafsV2.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "planId": {
                        "description": "The plan ID\n",
                        "type": "string"
                    },
                    "wafs": {
                        "description": "The list of wafs for this plan.\n",
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlanWafsV2Waf:getPlanWafsV2Waf"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "planId",
                    "wafs",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getPlans:getPlans": {
            "description": "`duplocloud.getPlans` retrieves a list of plans from Duplo.\n",
            "outputs": {
                "description": "A collection of values returned by getPlans.\n",
                "properties": {
                    "datas": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getPlansData:getPlansData"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "datas",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getTenant:getTenant": {
            "inputs": {
                "description": "A collection of arguments for invoking getTenant.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTenant.\n",
                "properties": {
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "infraOwner": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "planId": {
                        "type": "string"
                    },
                    "policies": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getTenantPolicy:getTenantPolicy"
                        },
                        "type": "array"
                    },
                    "tags": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getTenantTag:getTenantTag"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "infraOwner",
                    "name",
                    "planId",
                    "policies",
                    "tags"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getTenantAwsCredentials:getTenantAwsCredentials": {
            "inputs": {
                "description": "A collection of arguments for invoking getTenantAwsCredentials.\n",
                "properties": {
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTenantAwsCredentials.\n",
                "properties": {
                    "accessKeyId": {
                        "secret": true,
                        "type": "string"
                    },
                    "consoleUrl": {
                        "secret": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "secretAccessKey": {
                        "secret": true,
                        "type": "string"
                    },
                    "sessionToken": {
                        "secret": true,
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "accessKeyId",
                    "consoleUrl",
                    "region",
                    "secretAccessKey",
                    "sessionToken",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getTenantAwsKmsKey:getTenantAwsKmsKey": {
            "inputs": {
                "description": "A collection of arguments for invoking getTenantAwsKmsKey.\n",
                "properties": {
                    "keyName": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTenantAwsKmsKey.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "keyArn": {
                        "type": "string"
                    },
                    "keyId": {
                        "type": "string"
                    },
                    "keyName": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "keyArn",
                    "keyId",
                    "keyName",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getTenantAwsKmsKeys:getTenantAwsKmsKeys": {
            "inputs": {
                "description": "A collection of arguments for invoking getTenantAwsKmsKeys.\n",
                "properties": {
                    "selectable": {
                        "type": "boolean",
                        "description": "Defaults to `true`.\n"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTenantAwsKmsKeys.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "keys": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getTenantAwsKmsKeysKey:getTenantAwsKmsKeysKey"
                        },
                        "type": "array"
                    },
                    "selectable": {
                        "description": "Defaults to `true`.\n",
                        "type": "boolean"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "keys",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getTenantAwsRegion:getTenantAwsRegion": {
            "inputs": {
                "description": "A collection of arguments for invoking getTenantAwsRegion.\n",
                "properties": {
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTenantAwsRegion.\n",
                "properties": {
                    "awsRegion": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "awsRegion",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getTenantCleanupTimers:getTenantCleanupTimers": {
            "inputs": {
                "description": "A collection of arguments for invoking getTenantCleanupTimers.\n",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant that the cleanup timers will be created in.\n"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTenantCleanupTimers.\n",
                "properties": {
                    "expiryTime": {
                        "description": "The expiry time of the tenant.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "pauseTime": {
                        "description": "The time to pause the tenant.\n",
                        "type": "string"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant that the cleanup timers will be created in.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "expiryTime",
                    "pauseTime",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getTenantConfig:getTenantConfig": {
            "inputs": {
                "description": "A collection of arguments for invoking getTenantConfig.\n",
                "properties": {
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTenantConfig.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "metadatas": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getTenantConfigMetadata:getTenantConfigMetadata"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "metadatas",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getTenantEksCredentials:getTenantEksCredentials": {
            "inputs": {
                "description": "A collection of arguments for invoking getTenantEksCredentials.\n",
                "properties": {
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTenantEksCredentials.\n",
                "properties": {
                    "caCertificateData": {
                        "type": "string"
                    },
                    "endpoint": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "token": {
                        "secret": true,
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "caCertificateData",
                    "endpoint",
                    "name",
                    "namespace",
                    "region",
                    "tenantId",
                    "token",
                    "version",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getTenantExternalSubnets:getTenantExternalSubnets": {
            "description": "The `duplocloud.getTenantExternalSubnets` data source retrieves a list of tenant's external subnet IDs.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTenantExternalSubnets.\n",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant.\n"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTenantExternalSubnets.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "subnetIds": {
                        "description": "The list of subnet IDs.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "subnetIds",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getTenantInternalSubnets:getTenantInternalSubnets": {
            "description": "The `duplocloud.getTenantInternalSubnets` data source retrieves a list of tenant's internal subnet IDs.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTenantInternalSubnets.\n",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "The GUID of the tenant.\n"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTenantInternalSubnets.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "subnetIds": {
                        "description": "The list of subnet IDs.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "description": "The GUID of the tenant.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "subnetIds",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getTenantSecret:getTenantSecret": {
            "description": "## Example Usage\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTenantSecret.\n",
                "properties": {
                    "arn": {
                        "type": "string"
                    },
                    "firstMatch": {
                        "type": "boolean",
                        "description": "Defaults to `true`.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nameSuffix": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTenantSecret.\n",
                "properties": {
                    "arn": {
                        "type": "string"
                    },
                    "firstMatch": {
                        "description": "Defaults to `true`.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nameSuffix": {
                        "type": "string"
                    },
                    "rotationEnabled": {
                        "type": "boolean"
                    },
                    "tags": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getTenantSecretTag:getTenantSecretTag"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "arn",
                    "name",
                    "nameSuffix",
                    "rotationEnabled",
                    "tags",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getTenantSecrets:getTenantSecrets": {
            "inputs": {
                "description": "A collection of arguments for invoking getTenantSecrets.\n",
                "properties": {
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTenantSecrets.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "secrets": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getTenantSecretsSecret:getTenantSecretsSecret"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "required": [
                    "secrets",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "duplocloud:index/getTenants:getTenants": {
            "inputs": {
                "description": "A collection of arguments for invoking getTenants.\n",
                "properties": {
                    "planId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTenants.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "planId": {
                        "type": "string"
                    },
                    "tenants": {
                        "items": {
                            "$ref": "#/types/duplocloud:index/getTenantsTenant:getTenantsTenant"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "tenants",
                    "id"
                ],
                "type": "object"
            }
        }
    }
}