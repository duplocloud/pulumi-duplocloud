// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `GcpFirestore` manages a GCP firestore in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewGcpFirestore(ctx, "app", &duplocloud.GcpFirestoreArgs{
//				TenantId:                  myapp.TenantId,
//				Name:                      pulumi.String("firestore-tf-2"),
//				Type:                      pulumi.String("FIRESTORE_NATIVE"),
//				LocationId:                pulumi.String("us-west2"),
//				EnableDeleteProtection:    pulumi.Bool(false),
//				EnablePointInTimeRecovery: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewGcpFirestore(ctx, "firestore-app", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing GCP Firestore
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *NAME* is the  name of the Firestore
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/gcpFirestore:GcpFirestore firestore-app *TENANT_ID*/*NAME*
// ```
type GcpFirestore struct {
	pulumi.CustomResourceState

	AppEngineIntegrationMode pulumi.StringOutput `pulumi:"appEngineIntegrationMode"`
	ConcurrencyMode          pulumi.StringOutput `pulumi:"concurrencyMode"`
	EarliestVersionTime      pulumi.StringOutput `pulumi:"earliestVersionTime"`
	// Delete protection prevents accidental deletion of firestore. Defaults to `false`.
	EnableDeleteProtection pulumi.BoolPtrOutput `pulumi:"enableDeleteProtection"`
	// Restores data to a specific moment in time, enhancing data protection and recovery capabilities. Defaults to `false`.
	EnablePointInTimeRecovery pulumi.BoolPtrOutput `pulumi:"enablePointInTimeRecovery"`
	Etag                      pulumi.StringOutput  `pulumi:"etag"`
	// The full name of the firestore.
	Fullname pulumi.StringOutput `pulumi:"fullname"`
	// Location for firestore
	LocationId pulumi.StringOutput `pulumi:"locationId"`
	// The short name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringOutput `pulumi:"name"`
	// The GUID of the tenant that the firestore will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Firestore supports type `FIRESTORE_NATIVE` and `DATASTORE_MODE`
	Type                   pulumi.StringOutput `pulumi:"type"`
	Uid                    pulumi.StringOutput `pulumi:"uid"`
	VersionRetentionPeriod pulumi.StringOutput `pulumi:"versionRetentionPeriod"`
}

// NewGcpFirestore registers a new resource with the given unique name, arguments, and options.
func NewGcpFirestore(ctx *pulumi.Context,
	name string, args *GcpFirestoreArgs, opts ...pulumi.ResourceOption) (*GcpFirestore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationId == nil {
		return nil, errors.New("invalid value for required argument 'LocationId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GcpFirestore
	err := ctx.RegisterResource("duplocloud:index/gcpFirestore:GcpFirestore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcpFirestore gets an existing GcpFirestore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcpFirestore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpFirestoreState, opts ...pulumi.ResourceOption) (*GcpFirestore, error) {
	var resource GcpFirestore
	err := ctx.ReadResource("duplocloud:index/gcpFirestore:GcpFirestore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcpFirestore resources.
type gcpFirestoreState struct {
	AppEngineIntegrationMode *string `pulumi:"appEngineIntegrationMode"`
	ConcurrencyMode          *string `pulumi:"concurrencyMode"`
	EarliestVersionTime      *string `pulumi:"earliestVersionTime"`
	// Delete protection prevents accidental deletion of firestore. Defaults to `false`.
	EnableDeleteProtection *bool `pulumi:"enableDeleteProtection"`
	// Restores data to a specific moment in time, enhancing data protection and recovery capabilities. Defaults to `false`.
	EnablePointInTimeRecovery *bool   `pulumi:"enablePointInTimeRecovery"`
	Etag                      *string `pulumi:"etag"`
	// The full name of the firestore.
	Fullname *string `pulumi:"fullname"`
	// Location for firestore
	LocationId *string `pulumi:"locationId"`
	// The short name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// The GUID of the tenant that the firestore will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Firestore supports type `FIRESTORE_NATIVE` and `DATASTORE_MODE`
	Type                   *string `pulumi:"type"`
	Uid                    *string `pulumi:"uid"`
	VersionRetentionPeriod *string `pulumi:"versionRetentionPeriod"`
}

type GcpFirestoreState struct {
	AppEngineIntegrationMode pulumi.StringPtrInput
	ConcurrencyMode          pulumi.StringPtrInput
	EarliestVersionTime      pulumi.StringPtrInput
	// Delete protection prevents accidental deletion of firestore. Defaults to `false`.
	EnableDeleteProtection pulumi.BoolPtrInput
	// Restores data to a specific moment in time, enhancing data protection and recovery capabilities. Defaults to `false`.
	EnablePointInTimeRecovery pulumi.BoolPtrInput
	Etag                      pulumi.StringPtrInput
	// The full name of the firestore.
	Fullname pulumi.StringPtrInput
	// Location for firestore
	LocationId pulumi.StringPtrInput
	// The short name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// The GUID of the tenant that the firestore will be created in.
	TenantId pulumi.StringPtrInput
	// Firestore supports type `FIRESTORE_NATIVE` and `DATASTORE_MODE`
	Type                   pulumi.StringPtrInput
	Uid                    pulumi.StringPtrInput
	VersionRetentionPeriod pulumi.StringPtrInput
}

func (GcpFirestoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpFirestoreState)(nil)).Elem()
}

type gcpFirestoreArgs struct {
	// Delete protection prevents accidental deletion of firestore. Defaults to `false`.
	EnableDeleteProtection *bool `pulumi:"enableDeleteProtection"`
	// Restores data to a specific moment in time, enhancing data protection and recovery capabilities. Defaults to `false`.
	EnablePointInTimeRecovery *bool `pulumi:"enablePointInTimeRecovery"`
	// Location for firestore
	LocationId string `pulumi:"locationId"`
	// The short name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// The GUID of the tenant that the firestore will be created in.
	TenantId string `pulumi:"tenantId"`
	// Firestore supports type `FIRESTORE_NATIVE` and `DATASTORE_MODE`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a GcpFirestore resource.
type GcpFirestoreArgs struct {
	// Delete protection prevents accidental deletion of firestore. Defaults to `false`.
	EnableDeleteProtection pulumi.BoolPtrInput
	// Restores data to a specific moment in time, enhancing data protection and recovery capabilities. Defaults to `false`.
	EnablePointInTimeRecovery pulumi.BoolPtrInput
	// Location for firestore
	LocationId pulumi.StringInput
	// The short name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// The GUID of the tenant that the firestore will be created in.
	TenantId pulumi.StringInput
	// Firestore supports type `FIRESTORE_NATIVE` and `DATASTORE_MODE`
	Type pulumi.StringInput
}

func (GcpFirestoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpFirestoreArgs)(nil)).Elem()
}

type GcpFirestoreInput interface {
	pulumi.Input

	ToGcpFirestoreOutput() GcpFirestoreOutput
	ToGcpFirestoreOutputWithContext(ctx context.Context) GcpFirestoreOutput
}

func (*GcpFirestore) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpFirestore)(nil)).Elem()
}

func (i *GcpFirestore) ToGcpFirestoreOutput() GcpFirestoreOutput {
	return i.ToGcpFirestoreOutputWithContext(context.Background())
}

func (i *GcpFirestore) ToGcpFirestoreOutputWithContext(ctx context.Context) GcpFirestoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpFirestoreOutput)
}

// GcpFirestoreArrayInput is an input type that accepts GcpFirestoreArray and GcpFirestoreArrayOutput values.
// You can construct a concrete instance of `GcpFirestoreArrayInput` via:
//
//	GcpFirestoreArray{ GcpFirestoreArgs{...} }
type GcpFirestoreArrayInput interface {
	pulumi.Input

	ToGcpFirestoreArrayOutput() GcpFirestoreArrayOutput
	ToGcpFirestoreArrayOutputWithContext(context.Context) GcpFirestoreArrayOutput
}

type GcpFirestoreArray []GcpFirestoreInput

func (GcpFirestoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpFirestore)(nil)).Elem()
}

func (i GcpFirestoreArray) ToGcpFirestoreArrayOutput() GcpFirestoreArrayOutput {
	return i.ToGcpFirestoreArrayOutputWithContext(context.Background())
}

func (i GcpFirestoreArray) ToGcpFirestoreArrayOutputWithContext(ctx context.Context) GcpFirestoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpFirestoreArrayOutput)
}

// GcpFirestoreMapInput is an input type that accepts GcpFirestoreMap and GcpFirestoreMapOutput values.
// You can construct a concrete instance of `GcpFirestoreMapInput` via:
//
//	GcpFirestoreMap{ "key": GcpFirestoreArgs{...} }
type GcpFirestoreMapInput interface {
	pulumi.Input

	ToGcpFirestoreMapOutput() GcpFirestoreMapOutput
	ToGcpFirestoreMapOutputWithContext(context.Context) GcpFirestoreMapOutput
}

type GcpFirestoreMap map[string]GcpFirestoreInput

func (GcpFirestoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpFirestore)(nil)).Elem()
}

func (i GcpFirestoreMap) ToGcpFirestoreMapOutput() GcpFirestoreMapOutput {
	return i.ToGcpFirestoreMapOutputWithContext(context.Background())
}

func (i GcpFirestoreMap) ToGcpFirestoreMapOutputWithContext(ctx context.Context) GcpFirestoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpFirestoreMapOutput)
}

type GcpFirestoreOutput struct{ *pulumi.OutputState }

func (GcpFirestoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpFirestore)(nil)).Elem()
}

func (o GcpFirestoreOutput) ToGcpFirestoreOutput() GcpFirestoreOutput {
	return o
}

func (o GcpFirestoreOutput) ToGcpFirestoreOutputWithContext(ctx context.Context) GcpFirestoreOutput {
	return o
}

func (o GcpFirestoreOutput) AppEngineIntegrationMode() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpFirestore) pulumi.StringOutput { return v.AppEngineIntegrationMode }).(pulumi.StringOutput)
}

func (o GcpFirestoreOutput) ConcurrencyMode() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpFirestore) pulumi.StringOutput { return v.ConcurrencyMode }).(pulumi.StringOutput)
}

func (o GcpFirestoreOutput) EarliestVersionTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpFirestore) pulumi.StringOutput { return v.EarliestVersionTime }).(pulumi.StringOutput)
}

// Delete protection prevents accidental deletion of firestore. Defaults to `false`.
func (o GcpFirestoreOutput) EnableDeleteProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcpFirestore) pulumi.BoolPtrOutput { return v.EnableDeleteProtection }).(pulumi.BoolPtrOutput)
}

// Restores data to a specific moment in time, enhancing data protection and recovery capabilities. Defaults to `false`.
func (o GcpFirestoreOutput) EnablePointInTimeRecovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcpFirestore) pulumi.BoolPtrOutput { return v.EnablePointInTimeRecovery }).(pulumi.BoolPtrOutput)
}

func (o GcpFirestoreOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpFirestore) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The full name of the firestore.
func (o GcpFirestoreOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpFirestore) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

// Location for firestore
func (o GcpFirestoreOutput) LocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpFirestore) pulumi.StringOutput { return v.LocationId }).(pulumi.StringOutput)
}

// The short name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
func (o GcpFirestoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpFirestore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The GUID of the tenant that the firestore will be created in.
func (o GcpFirestoreOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpFirestore) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Firestore supports type `FIRESTORE_NATIVE` and `DATASTORE_MODE`
func (o GcpFirestoreOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpFirestore) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o GcpFirestoreOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpFirestore) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

func (o GcpFirestoreOutput) VersionRetentionPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpFirestore) pulumi.StringOutput { return v.VersionRetentionPeriod }).(pulumi.StringOutput)
}

type GcpFirestoreArrayOutput struct{ *pulumi.OutputState }

func (GcpFirestoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpFirestore)(nil)).Elem()
}

func (o GcpFirestoreArrayOutput) ToGcpFirestoreArrayOutput() GcpFirestoreArrayOutput {
	return o
}

func (o GcpFirestoreArrayOutput) ToGcpFirestoreArrayOutputWithContext(ctx context.Context) GcpFirestoreArrayOutput {
	return o
}

func (o GcpFirestoreArrayOutput) Index(i pulumi.IntInput) GcpFirestoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GcpFirestore {
		return vs[0].([]*GcpFirestore)[vs[1].(int)]
	}).(GcpFirestoreOutput)
}

type GcpFirestoreMapOutput struct{ *pulumi.OutputState }

func (GcpFirestoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpFirestore)(nil)).Elem()
}

func (o GcpFirestoreMapOutput) ToGcpFirestoreMapOutput() GcpFirestoreMapOutput {
	return o
}

func (o GcpFirestoreMapOutput) ToGcpFirestoreMapOutputWithContext(ctx context.Context) GcpFirestoreMapOutput {
	return o
}

func (o GcpFirestoreMapOutput) MapIndex(k pulumi.StringInput) GcpFirestoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GcpFirestore {
		return vs[0].(map[string]*GcpFirestore)[vs[1].(string)]
	}).(GcpFirestoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcpFirestoreInput)(nil)).Elem(), &GcpFirestore{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpFirestoreArrayInput)(nil)).Elem(), GcpFirestoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpFirestoreMapInput)(nil)).Elem(), GcpFirestoreMap{})
	pulumi.RegisterOutputType(GcpFirestoreOutput{})
	pulumi.RegisterOutputType(GcpFirestoreArrayOutput{})
	pulumi.RegisterOutputType(GcpFirestoreMapOutput{})
}
