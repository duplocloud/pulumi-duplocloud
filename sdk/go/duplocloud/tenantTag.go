// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `TenantTag` manages a tenant tag in Duplo.
//
// ## Import
//
// Example: Importing an existing S3 bucket
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *TAG_KEY* is the tenant tag key
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/tenantTag:TenantTag tag TENANT_ID/TAG_KEY
// ```
type TenantTag struct {
	pulumi.CustomResourceState

	// Specify key for tag.
	Key pulumi.StringOutput `pulumi:"key"`
	// The GUID of the tenant that the tags will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Specify value for tag.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewTenantTag registers a new resource with the given unique name, arguments, and options.
func NewTenantTag(ctx *pulumi.Context,
	name string, args *TenantTagArgs, opts ...pulumi.ResourceOption) (*TenantTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TenantTag
	err := ctx.RegisterResource("duplocloud:index/tenantTag:TenantTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTenantTag gets an existing TenantTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTenantTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TenantTagState, opts ...pulumi.ResourceOption) (*TenantTag, error) {
	var resource TenantTag
	err := ctx.ReadResource("duplocloud:index/tenantTag:TenantTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TenantTag resources.
type tenantTagState struct {
	// Specify key for tag.
	Key *string `pulumi:"key"`
	// The GUID of the tenant that the tags will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Specify value for tag.
	Value *string `pulumi:"value"`
}

type TenantTagState struct {
	// Specify key for tag.
	Key pulumi.StringPtrInput
	// The GUID of the tenant that the tags will be created in.
	TenantId pulumi.StringPtrInput
	// Specify value for tag.
	Value pulumi.StringPtrInput
}

func (TenantTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantTagState)(nil)).Elem()
}

type tenantTagArgs struct {
	// Specify key for tag.
	Key string `pulumi:"key"`
	// The GUID of the tenant that the tags will be created in.
	TenantId string `pulumi:"tenantId"`
	// Specify value for tag.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a TenantTag resource.
type TenantTagArgs struct {
	// Specify key for tag.
	Key pulumi.StringInput
	// The GUID of the tenant that the tags will be created in.
	TenantId pulumi.StringInput
	// Specify value for tag.
	Value pulumi.StringInput
}

func (TenantTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantTagArgs)(nil)).Elem()
}

type TenantTagInput interface {
	pulumi.Input

	ToTenantTagOutput() TenantTagOutput
	ToTenantTagOutputWithContext(ctx context.Context) TenantTagOutput
}

func (*TenantTag) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantTag)(nil)).Elem()
}

func (i *TenantTag) ToTenantTagOutput() TenantTagOutput {
	return i.ToTenantTagOutputWithContext(context.Background())
}

func (i *TenantTag) ToTenantTagOutputWithContext(ctx context.Context) TenantTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantTagOutput)
}

// TenantTagArrayInput is an input type that accepts TenantTagArray and TenantTagArrayOutput values.
// You can construct a concrete instance of `TenantTagArrayInput` via:
//
//	TenantTagArray{ TenantTagArgs{...} }
type TenantTagArrayInput interface {
	pulumi.Input

	ToTenantTagArrayOutput() TenantTagArrayOutput
	ToTenantTagArrayOutputWithContext(context.Context) TenantTagArrayOutput
}

type TenantTagArray []TenantTagInput

func (TenantTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TenantTag)(nil)).Elem()
}

func (i TenantTagArray) ToTenantTagArrayOutput() TenantTagArrayOutput {
	return i.ToTenantTagArrayOutputWithContext(context.Background())
}

func (i TenantTagArray) ToTenantTagArrayOutputWithContext(ctx context.Context) TenantTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantTagArrayOutput)
}

// TenantTagMapInput is an input type that accepts TenantTagMap and TenantTagMapOutput values.
// You can construct a concrete instance of `TenantTagMapInput` via:
//
//	TenantTagMap{ "key": TenantTagArgs{...} }
type TenantTagMapInput interface {
	pulumi.Input

	ToTenantTagMapOutput() TenantTagMapOutput
	ToTenantTagMapOutputWithContext(context.Context) TenantTagMapOutput
}

type TenantTagMap map[string]TenantTagInput

func (TenantTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TenantTag)(nil)).Elem()
}

func (i TenantTagMap) ToTenantTagMapOutput() TenantTagMapOutput {
	return i.ToTenantTagMapOutputWithContext(context.Background())
}

func (i TenantTagMap) ToTenantTagMapOutputWithContext(ctx context.Context) TenantTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantTagMapOutput)
}

type TenantTagOutput struct{ *pulumi.OutputState }

func (TenantTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantTag)(nil)).Elem()
}

func (o TenantTagOutput) ToTenantTagOutput() TenantTagOutput {
	return o
}

func (o TenantTagOutput) ToTenantTagOutputWithContext(ctx context.Context) TenantTagOutput {
	return o
}

// Specify key for tag.
func (o TenantTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantTag) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The GUID of the tenant that the tags will be created in.
func (o TenantTagOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantTag) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Specify value for tag.
func (o TenantTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantTag) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type TenantTagArrayOutput struct{ *pulumi.OutputState }

func (TenantTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TenantTag)(nil)).Elem()
}

func (o TenantTagArrayOutput) ToTenantTagArrayOutput() TenantTagArrayOutput {
	return o
}

func (o TenantTagArrayOutput) ToTenantTagArrayOutputWithContext(ctx context.Context) TenantTagArrayOutput {
	return o
}

func (o TenantTagArrayOutput) Index(i pulumi.IntInput) TenantTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TenantTag {
		return vs[0].([]*TenantTag)[vs[1].(int)]
	}).(TenantTagOutput)
}

type TenantTagMapOutput struct{ *pulumi.OutputState }

func (TenantTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TenantTag)(nil)).Elem()
}

func (o TenantTagMapOutput) ToTenantTagMapOutput() TenantTagMapOutput {
	return o
}

func (o TenantTagMapOutput) ToTenantTagMapOutputWithContext(ctx context.Context) TenantTagMapOutput {
	return o
}

func (o TenantTagMapOutput) MapIndex(k pulumi.StringInput) TenantTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TenantTag {
		return vs[0].(map[string]*TenantTag)[vs[1].(string)]
	}).(TenantTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TenantTagInput)(nil)).Elem(), &TenantTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantTagArrayInput)(nil)).Elem(), TenantTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantTagMapInput)(nil)).Elem(), TenantTagMap{})
	pulumi.RegisterOutputType(TenantTagOutput{})
	pulumi.RegisterOutputType(TenantTagArrayOutput{})
	pulumi.RegisterOutputType(TenantTagMapOutput{})
}
