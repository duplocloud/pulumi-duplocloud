// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AwsKafkaCluster` manages an AWS MSK cluster in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAwsKafkaCluster(ctx, "mycluster", &duplocloud.AwsKafkaClusterArgs{
//				TenantId:     pulumi.Any(this.TenantId),
//				Name:         pulumi.String("mycluster"),
//				KafkaVersion: pulumi.String("2.4.1.1"),
//				InstanceType: pulumi.String("kafka.m5.large"),
//				StorageSize:  pulumi.Int(20),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing AWS Kafka cluster
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the AWS Kafka cluster
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/awsKafkaCluster:AwsKafkaCluster mycluster *TENANT_ID*/*SHORT_NAME*
// ```
type AwsKafkaCluster struct {
	pulumi.CustomResourceState

	// The ARN of the Kafka cluster.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The availability zone distribution used by the cluster.
	AzDistribution pulumi.StringOutput `pulumi:"azDistribution"`
	// An ARN of a Kafka configuration to apply to the cluster.
	ConfigurationArn pulumi.StringOutput `pulumi:"configurationArn"`
	// An revision of a Kafka configuration to apply to the cluster.
	ConfigurationRevision pulumi.IntOutput `pulumi:"configurationRevision"`
	// Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`
	EncryptionInTransit pulumi.StringOutput `pulumi:"encryptionInTransit"`
	// The full name of the Kakfa cluster.
	Fullname pulumi.StringOutput `pulumi:"fullname"`
	// The Kafka node instance type to use.
	// See the [AWS documentation](https://docs.aws.amazon.com/msk/latest/developerguide/msk-create-cluster.html) for more information.
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// The version of the Kafka cluster.
	KafkaVersion pulumi.StringOutput `pulumi:"kafkaVersion"`
	// The short name of the Kafka cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringOutput `pulumi:"name"`
	// The desired total number of broker nodes in the kafka cluster.
	NumberOfBrokerNodes pulumi.IntOutput `pulumi:"numberOfBrokerNodes"`
	// The bootstrap broker connect string for plaintext (unencrypted) connections.
	PlaintextBootstrapBrokerString pulumi.StringOutput `pulumi:"plaintextBootstrapBrokerString"`
	// The Zookeeper connect string for plaintext (unencrypted) connections.
	PlaintextZookeeperConnectString pulumi.StringOutput `pulumi:"plaintextZookeeperConnectString"`
	// The list of security groups used by the cluster.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// The current state of the cluster.
	State pulumi.StringOutput `pulumi:"state"`
	// The size of the Kafka storage, in gigabytes.
	StorageSize pulumi.IntOutput `pulumi:"storageSize"`
	// The list of subnets that the cluster will be launched in.
	Subnets pulumi.StringArrayOutput `pulumi:"subnets"`
	Tags    pulumi.StringMapOutput   `pulumi:"tags"`
	// The GUID of the tenant that the Kafka cluster will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The bootstrap broker connect string for TLS (encrypted) connections.
	TlsBootstrapBrokerString pulumi.StringOutput `pulumi:"tlsBootstrapBrokerString"`
	// The Zookeeper connect string for TLS (encrypted) connections.
	TlsZookeeperConnectString pulumi.StringOutput `pulumi:"tlsZookeeperConnectString"`
}

// NewAwsKafkaCluster registers a new resource with the given unique name, arguments, and options.
func NewAwsKafkaCluster(ctx *pulumi.Context,
	name string, args *AwsKafkaClusterArgs, opts ...pulumi.ResourceOption) (*AwsKafkaCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	if args.KafkaVersion == nil {
		return nil, errors.New("invalid value for required argument 'KafkaVersion'")
	}
	if args.StorageSize == nil {
		return nil, errors.New("invalid value for required argument 'StorageSize'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsKafkaCluster
	err := ctx.RegisterResource("duplocloud:index/awsKafkaCluster:AwsKafkaCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsKafkaCluster gets an existing AwsKafkaCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsKafkaCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsKafkaClusterState, opts ...pulumi.ResourceOption) (*AwsKafkaCluster, error) {
	var resource AwsKafkaCluster
	err := ctx.ReadResource("duplocloud:index/awsKafkaCluster:AwsKafkaCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsKafkaCluster resources.
type awsKafkaClusterState struct {
	// The ARN of the Kafka cluster.
	Arn *string `pulumi:"arn"`
	// The availability zone distribution used by the cluster.
	AzDistribution *string `pulumi:"azDistribution"`
	// An ARN of a Kafka configuration to apply to the cluster.
	ConfigurationArn *string `pulumi:"configurationArn"`
	// An revision of a Kafka configuration to apply to the cluster.
	ConfigurationRevision *int `pulumi:"configurationRevision"`
	// Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`
	EncryptionInTransit *string `pulumi:"encryptionInTransit"`
	// The full name of the Kakfa cluster.
	Fullname *string `pulumi:"fullname"`
	// The Kafka node instance type to use.
	// See the [AWS documentation](https://docs.aws.amazon.com/msk/latest/developerguide/msk-create-cluster.html) for more information.
	InstanceType *string `pulumi:"instanceType"`
	// The version of the Kafka cluster.
	KafkaVersion *string `pulumi:"kafkaVersion"`
	// The short name of the Kafka cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// The desired total number of broker nodes in the kafka cluster.
	NumberOfBrokerNodes *int `pulumi:"numberOfBrokerNodes"`
	// The bootstrap broker connect string for plaintext (unencrypted) connections.
	PlaintextBootstrapBrokerString *string `pulumi:"plaintextBootstrapBrokerString"`
	// The Zookeeper connect string for plaintext (unencrypted) connections.
	PlaintextZookeeperConnectString *string `pulumi:"plaintextZookeeperConnectString"`
	// The list of security groups used by the cluster.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The current state of the cluster.
	State *string `pulumi:"state"`
	// The size of the Kafka storage, in gigabytes.
	StorageSize *int `pulumi:"storageSize"`
	// The list of subnets that the cluster will be launched in.
	Subnets []string          `pulumi:"subnets"`
	Tags    map[string]string `pulumi:"tags"`
	// The GUID of the tenant that the Kafka cluster will be created in.
	TenantId *string `pulumi:"tenantId"`
	// The bootstrap broker connect string for TLS (encrypted) connections.
	TlsBootstrapBrokerString *string `pulumi:"tlsBootstrapBrokerString"`
	// The Zookeeper connect string for TLS (encrypted) connections.
	TlsZookeeperConnectString *string `pulumi:"tlsZookeeperConnectString"`
}

type AwsKafkaClusterState struct {
	// The ARN of the Kafka cluster.
	Arn pulumi.StringPtrInput
	// The availability zone distribution used by the cluster.
	AzDistribution pulumi.StringPtrInput
	// An ARN of a Kafka configuration to apply to the cluster.
	ConfigurationArn pulumi.StringPtrInput
	// An revision of a Kafka configuration to apply to the cluster.
	ConfigurationRevision pulumi.IntPtrInput
	// Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`
	EncryptionInTransit pulumi.StringPtrInput
	// The full name of the Kakfa cluster.
	Fullname pulumi.StringPtrInput
	// The Kafka node instance type to use.
	// See the [AWS documentation](https://docs.aws.amazon.com/msk/latest/developerguide/msk-create-cluster.html) for more information.
	InstanceType pulumi.StringPtrInput
	// The version of the Kafka cluster.
	KafkaVersion pulumi.StringPtrInput
	// The short name of the Kafka cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// The desired total number of broker nodes in the kafka cluster.
	NumberOfBrokerNodes pulumi.IntPtrInput
	// The bootstrap broker connect string for plaintext (unencrypted) connections.
	PlaintextBootstrapBrokerString pulumi.StringPtrInput
	// The Zookeeper connect string for plaintext (unencrypted) connections.
	PlaintextZookeeperConnectString pulumi.StringPtrInput
	// The list of security groups used by the cluster.
	SecurityGroups pulumi.StringArrayInput
	// The current state of the cluster.
	State pulumi.StringPtrInput
	// The size of the Kafka storage, in gigabytes.
	StorageSize pulumi.IntPtrInput
	// The list of subnets that the cluster will be launched in.
	Subnets pulumi.StringArrayInput
	Tags    pulumi.StringMapInput
	// The GUID of the tenant that the Kafka cluster will be created in.
	TenantId pulumi.StringPtrInput
	// The bootstrap broker connect string for TLS (encrypted) connections.
	TlsBootstrapBrokerString pulumi.StringPtrInput
	// The Zookeeper connect string for TLS (encrypted) connections.
	TlsZookeeperConnectString pulumi.StringPtrInput
}

func (AwsKafkaClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsKafkaClusterState)(nil)).Elem()
}

type awsKafkaClusterArgs struct {
	// An ARN of a Kafka configuration to apply to the cluster.
	ConfigurationArn *string `pulumi:"configurationArn"`
	// An revision of a Kafka configuration to apply to the cluster.
	ConfigurationRevision *int `pulumi:"configurationRevision"`
	// Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`
	EncryptionInTransit *string `pulumi:"encryptionInTransit"`
	// The Kafka node instance type to use.
	// See the [AWS documentation](https://docs.aws.amazon.com/msk/latest/developerguide/msk-create-cluster.html) for more information.
	InstanceType string `pulumi:"instanceType"`
	// The version of the Kafka cluster.
	KafkaVersion string `pulumi:"kafkaVersion"`
	// The short name of the Kafka cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// The size of the Kafka storage, in gigabytes.
	StorageSize int `pulumi:"storageSize"`
	// The list of subnets that the cluster will be launched in.
	Subnets []string `pulumi:"subnets"`
	// The GUID of the tenant that the Kafka cluster will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AwsKafkaCluster resource.
type AwsKafkaClusterArgs struct {
	// An ARN of a Kafka configuration to apply to the cluster.
	ConfigurationArn pulumi.StringPtrInput
	// An revision of a Kafka configuration to apply to the cluster.
	ConfigurationRevision pulumi.IntPtrInput
	// Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`
	EncryptionInTransit pulumi.StringPtrInput
	// The Kafka node instance type to use.
	// See the [AWS documentation](https://docs.aws.amazon.com/msk/latest/developerguide/msk-create-cluster.html) for more information.
	InstanceType pulumi.StringInput
	// The version of the Kafka cluster.
	KafkaVersion pulumi.StringInput
	// The short name of the Kafka cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// The size of the Kafka storage, in gigabytes.
	StorageSize pulumi.IntInput
	// The list of subnets that the cluster will be launched in.
	Subnets pulumi.StringArrayInput
	// The GUID of the tenant that the Kafka cluster will be created in.
	TenantId pulumi.StringInput
}

func (AwsKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsKafkaClusterArgs)(nil)).Elem()
}

type AwsKafkaClusterInput interface {
	pulumi.Input

	ToAwsKafkaClusterOutput() AwsKafkaClusterOutput
	ToAwsKafkaClusterOutputWithContext(ctx context.Context) AwsKafkaClusterOutput
}

func (*AwsKafkaCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsKafkaCluster)(nil)).Elem()
}

func (i *AwsKafkaCluster) ToAwsKafkaClusterOutput() AwsKafkaClusterOutput {
	return i.ToAwsKafkaClusterOutputWithContext(context.Background())
}

func (i *AwsKafkaCluster) ToAwsKafkaClusterOutputWithContext(ctx context.Context) AwsKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsKafkaClusterOutput)
}

// AwsKafkaClusterArrayInput is an input type that accepts AwsKafkaClusterArray and AwsKafkaClusterArrayOutput values.
// You can construct a concrete instance of `AwsKafkaClusterArrayInput` via:
//
//	AwsKafkaClusterArray{ AwsKafkaClusterArgs{...} }
type AwsKafkaClusterArrayInput interface {
	pulumi.Input

	ToAwsKafkaClusterArrayOutput() AwsKafkaClusterArrayOutput
	ToAwsKafkaClusterArrayOutputWithContext(context.Context) AwsKafkaClusterArrayOutput
}

type AwsKafkaClusterArray []AwsKafkaClusterInput

func (AwsKafkaClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsKafkaCluster)(nil)).Elem()
}

func (i AwsKafkaClusterArray) ToAwsKafkaClusterArrayOutput() AwsKafkaClusterArrayOutput {
	return i.ToAwsKafkaClusterArrayOutputWithContext(context.Background())
}

func (i AwsKafkaClusterArray) ToAwsKafkaClusterArrayOutputWithContext(ctx context.Context) AwsKafkaClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsKafkaClusterArrayOutput)
}

// AwsKafkaClusterMapInput is an input type that accepts AwsKafkaClusterMap and AwsKafkaClusterMapOutput values.
// You can construct a concrete instance of `AwsKafkaClusterMapInput` via:
//
//	AwsKafkaClusterMap{ "key": AwsKafkaClusterArgs{...} }
type AwsKafkaClusterMapInput interface {
	pulumi.Input

	ToAwsKafkaClusterMapOutput() AwsKafkaClusterMapOutput
	ToAwsKafkaClusterMapOutputWithContext(context.Context) AwsKafkaClusterMapOutput
}

type AwsKafkaClusterMap map[string]AwsKafkaClusterInput

func (AwsKafkaClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsKafkaCluster)(nil)).Elem()
}

func (i AwsKafkaClusterMap) ToAwsKafkaClusterMapOutput() AwsKafkaClusterMapOutput {
	return i.ToAwsKafkaClusterMapOutputWithContext(context.Background())
}

func (i AwsKafkaClusterMap) ToAwsKafkaClusterMapOutputWithContext(ctx context.Context) AwsKafkaClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsKafkaClusterMapOutput)
}

type AwsKafkaClusterOutput struct{ *pulumi.OutputState }

func (AwsKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsKafkaCluster)(nil)).Elem()
}

func (o AwsKafkaClusterOutput) ToAwsKafkaClusterOutput() AwsKafkaClusterOutput {
	return o
}

func (o AwsKafkaClusterOutput) ToAwsKafkaClusterOutputWithContext(ctx context.Context) AwsKafkaClusterOutput {
	return o
}

// The ARN of the Kafka cluster.
func (o AwsKafkaClusterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The availability zone distribution used by the cluster.
func (o AwsKafkaClusterOutput) AzDistribution() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringOutput { return v.AzDistribution }).(pulumi.StringOutput)
}

// An ARN of a Kafka configuration to apply to the cluster.
func (o AwsKafkaClusterOutput) ConfigurationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringOutput { return v.ConfigurationArn }).(pulumi.StringOutput)
}

// An revision of a Kafka configuration to apply to the cluster.
func (o AwsKafkaClusterOutput) ConfigurationRevision() pulumi.IntOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.IntOutput { return v.ConfigurationRevision }).(pulumi.IntOutput)
}

// Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`
func (o AwsKafkaClusterOutput) EncryptionInTransit() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringOutput { return v.EncryptionInTransit }).(pulumi.StringOutput)
}

// The full name of the Kakfa cluster.
func (o AwsKafkaClusterOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

// The Kafka node instance type to use.
// See the [AWS documentation](https://docs.aws.amazon.com/msk/latest/developerguide/msk-create-cluster.html) for more information.
func (o AwsKafkaClusterOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// The version of the Kafka cluster.
func (o AwsKafkaClusterOutput) KafkaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringOutput { return v.KafkaVersion }).(pulumi.StringOutput)
}

// The short name of the Kafka cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
func (o AwsKafkaClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The desired total number of broker nodes in the kafka cluster.
func (o AwsKafkaClusterOutput) NumberOfBrokerNodes() pulumi.IntOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.IntOutput { return v.NumberOfBrokerNodes }).(pulumi.IntOutput)
}

// The bootstrap broker connect string for plaintext (unencrypted) connections.
func (o AwsKafkaClusterOutput) PlaintextBootstrapBrokerString() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringOutput { return v.PlaintextBootstrapBrokerString }).(pulumi.StringOutput)
}

// The Zookeeper connect string for plaintext (unencrypted) connections.
func (o AwsKafkaClusterOutput) PlaintextZookeeperConnectString() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringOutput { return v.PlaintextZookeeperConnectString }).(pulumi.StringOutput)
}

// The list of security groups used by the cluster.
func (o AwsKafkaClusterOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The current state of the cluster.
func (o AwsKafkaClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The size of the Kafka storage, in gigabytes.
func (o AwsKafkaClusterOutput) StorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.IntOutput { return v.StorageSize }).(pulumi.IntOutput)
}

// The list of subnets that the cluster will be launched in.
func (o AwsKafkaClusterOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringArrayOutput { return v.Subnets }).(pulumi.StringArrayOutput)
}

func (o AwsKafkaClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The GUID of the tenant that the Kafka cluster will be created in.
func (o AwsKafkaClusterOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The bootstrap broker connect string for TLS (encrypted) connections.
func (o AwsKafkaClusterOutput) TlsBootstrapBrokerString() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringOutput { return v.TlsBootstrapBrokerString }).(pulumi.StringOutput)
}

// The Zookeeper connect string for TLS (encrypted) connections.
func (o AwsKafkaClusterOutput) TlsZookeeperConnectString() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKafkaCluster) pulumi.StringOutput { return v.TlsZookeeperConnectString }).(pulumi.StringOutput)
}

type AwsKafkaClusterArrayOutput struct{ *pulumi.OutputState }

func (AwsKafkaClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsKafkaCluster)(nil)).Elem()
}

func (o AwsKafkaClusterArrayOutput) ToAwsKafkaClusterArrayOutput() AwsKafkaClusterArrayOutput {
	return o
}

func (o AwsKafkaClusterArrayOutput) ToAwsKafkaClusterArrayOutputWithContext(ctx context.Context) AwsKafkaClusterArrayOutput {
	return o
}

func (o AwsKafkaClusterArrayOutput) Index(i pulumi.IntInput) AwsKafkaClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsKafkaCluster {
		return vs[0].([]*AwsKafkaCluster)[vs[1].(int)]
	}).(AwsKafkaClusterOutput)
}

type AwsKafkaClusterMapOutput struct{ *pulumi.OutputState }

func (AwsKafkaClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsKafkaCluster)(nil)).Elem()
}

func (o AwsKafkaClusterMapOutput) ToAwsKafkaClusterMapOutput() AwsKafkaClusterMapOutput {
	return o
}

func (o AwsKafkaClusterMapOutput) ToAwsKafkaClusterMapOutputWithContext(ctx context.Context) AwsKafkaClusterMapOutput {
	return o
}

func (o AwsKafkaClusterMapOutput) MapIndex(k pulumi.StringInput) AwsKafkaClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsKafkaCluster {
		return vs[0].(map[string]*AwsKafkaCluster)[vs[1].(string)]
	}).(AwsKafkaClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsKafkaClusterInput)(nil)).Elem(), &AwsKafkaCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsKafkaClusterArrayInput)(nil)).Elem(), AwsKafkaClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsKafkaClusterMapInput)(nil)).Elem(), AwsKafkaClusterMap{})
	pulumi.RegisterOutputType(AwsKafkaClusterOutput{})
	pulumi.RegisterOutputType(AwsKafkaClusterArrayOutput{})
	pulumi.RegisterOutputType(AwsKafkaClusterMapOutput{})
}
