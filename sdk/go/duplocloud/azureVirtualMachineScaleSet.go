// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureVirtualMachineScaleSet` manages an azure virtual machine scale set in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAzureVirtualMachineScaleSet(ctx, "vmss", &duplocloud.AzureVirtualMachineScaleSetArgs{
//				TenantId: myapp.TenantId,
//				Name:     pulumi.String("tstvmss"),
//				Sku: &duplocloud.AzureVirtualMachineScaleSetSkuArgs{
//					Tier:     pulumi.String("Standard"),
//					Name:     pulumi.String("Standard_D1_v2"),
//					Capacity: pulumi.Int(2),
//				},
//				OsProfile: &duplocloud.AzureVirtualMachineScaleSetOsProfileArgs{
//					AdminPassword:      pulumi.String("DuploTest007"),
//					AdminUsername:      pulumi.String("duploadmin"),
//					ComputerNamePrefix: pulumi.String("tst"),
//				},
//				StorageProfileImageReference: &duplocloud.AzureVirtualMachineScaleSetStorageProfileImageReferenceArgs{
//					Sku:       pulumi.String("2016-Datacenter"),
//					Publisher: pulumi.String("MicrosoftWindowsServer"),
//					Offer:     pulumi.String("WindowsServer"),
//					Version:   pulumi.String("latest"),
//				},
//				NetworkProfiles: duplocloud.AzureVirtualMachineScaleSetNetworkProfileArray{
//					&duplocloud.AzureVirtualMachineScaleSetNetworkProfileArgs{
//						Name:    pulumi.String("tstvmss"),
//						Primary: pulumi.Bool(true),
//						IpConfigurations: duplocloud.AzureVirtualMachineScaleSetNetworkProfileIpConfigurationArray{
//							&duplocloud.AzureVirtualMachineScaleSetNetworkProfileIpConfigurationArgs{
//								Name:     pulumi.String("tstvmss"),
//								SubnetId: pulumi.String("/subscriptions/143ffc59-9394-4ec6-8f5a-c408a238be62/resourceGroups/duploinfra-testdb/providers/Microsoft.Network/virtualNetworks/testdb/subnets/duploinfra-sub01"),
//							},
//						},
//						IpForwarding: pulumi.Bool(true),
//					},
//				},
//				UpgradePolicyMode:    pulumi.String("Manual"),
//				Overprovision:        pulumi.Bool(true),
//				SinglePlacementGroup: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing Azure Virtual Machine Scale Set
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the Azure Virtual Machine Scale Set
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/azureVirtualMachineScaleSet:AzureVirtualMachineScaleSet myvmss *TENANT_ID*/*SHORT_NAME*
// ```
type AzureVirtualMachineScaleSet struct {
	pulumi.CustomResourceState

	// The numeric ID of the container agent pool that this VM is added to. Defaults to `0`.
	AgentPlatform  pulumi.IntPtrOutput    `pulumi:"agentPlatform"`
	AllocationTags pulumi.StringPtrOutput `pulumi:"allocationTags"`
	// Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
	AutomaticOsUpgrade pulumi.BoolPtrOutput                                `pulumi:"automaticOsUpgrade"`
	BootDiagnostics    AzureVirtualMachineScaleSetBootDiagnosticsPtrOutput `pulumi:"bootDiagnostics"`
	// Specifies the eviction policy for Virtual Machines in this Scale Set.
	EvictionPolicy pulumi.StringPtrOutput                          `pulumi:"evictionPolicy"`
	Extensions     AzureVirtualMachineScaleSetExtensionArrayOutput `pulumi:"extensions"`
	// Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`
	HealthProbeId pulumi.StringPtrOutput                    `pulumi:"healthProbeId"`
	Identity      AzureVirtualMachineScaleSetIdentityOutput `pulumi:"identity"`
	// Defaults to `false`.
	IsMinion pulumi.BoolPtrOutput `pulumi:"isMinion"`
	// Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringOutput `pulumi:"licenseType"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the virtual machine scale set resource.
	Name                   pulumi.StringOutput                                     `pulumi:"name"`
	NetworkProfiles        AzureVirtualMachineScaleSetNetworkProfileArrayOutput    `pulumi:"networkProfiles"`
	OsProfile              AzureVirtualMachineScaleSetOsProfileOutput              `pulumi:"osProfile"`
	OsProfileLinuxConfig   AzureVirtualMachineScaleSetOsProfileLinuxConfigOutput   `pulumi:"osProfileLinuxConfig"`
	OsProfileSecrets       AzureVirtualMachineScaleSetOsProfileSecretArrayOutput   `pulumi:"osProfileSecrets"`
	OsProfileWindowsConfig AzureVirtualMachineScaleSetOsProfileWindowsConfigOutput `pulumi:"osProfileWindowsConfig"`
	// Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
	Overprovision pulumi.BoolPtrOutput                     `pulumi:"overprovision"`
	Plan          AzureVirtualMachineScaleSetPlanPtrOutput `pulumi:"plan"`
	// Specifies the priority for the Virtual Machines in the Scale Set. Defaults to `Regular`.
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned.
	ProximityPlacementGroupId pulumi.StringPtrOutput                                   `pulumi:"proximityPlacementGroupId"`
	RollingUpgradePolicy      AzureVirtualMachineScaleSetRollingUpgradePolicyPtrOutput `pulumi:"rollingUpgradePolicy"`
	// Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Defaults to `true`.
	SinglePlacementGroup         pulumi.BoolPtrOutput                                          `pulumi:"singlePlacementGroup"`
	Sku                          AzureVirtualMachineScaleSetSkuOutput                          `pulumi:"sku"`
	StorageProfileDataDisks      AzureVirtualMachineScaleSetStorageProfileDataDiskArrayOutput  `pulumi:"storageProfileDataDisks"`
	StorageProfileImageReference AzureVirtualMachineScaleSetStorageProfileImageReferenceOutput `pulumi:"storageProfileImageReference"`
	StorageProfileOsDisk         AzureVirtualMachineScaleSetStorageProfileOsDiskOutput         `pulumi:"storageProfileOsDisk"`
	// The GUID of the tenant that the azure virtual machine scale set will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing Rolling, you will need to set a health probe.
	UpgradePolicyMode pulumi.StringOutput `pulumi:"upgradePolicyMode"`
	// Whether or not to wait until virtual machine scale set to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrOutput     `pulumi:"waitUntilReady"`
	Zones          pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewAzureVirtualMachineScaleSet registers a new resource with the given unique name, arguments, and options.
func NewAzureVirtualMachineScaleSet(ctx *pulumi.Context,
	name string, args *AzureVirtualMachineScaleSetArgs, opts ...pulumi.ResourceOption) (*AzureVirtualMachineScaleSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkProfiles == nil {
		return nil, errors.New("invalid value for required argument 'NetworkProfiles'")
	}
	if args.OsProfile == nil {
		return nil, errors.New("invalid value for required argument 'OsProfile'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.UpgradePolicyMode == nil {
		return nil, errors.New("invalid value for required argument 'UpgradePolicyMode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureVirtualMachineScaleSet
	err := ctx.RegisterResource("duplocloud:index/azureVirtualMachineScaleSet:AzureVirtualMachineScaleSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureVirtualMachineScaleSet gets an existing AzureVirtualMachineScaleSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureVirtualMachineScaleSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureVirtualMachineScaleSetState, opts ...pulumi.ResourceOption) (*AzureVirtualMachineScaleSet, error) {
	var resource AzureVirtualMachineScaleSet
	err := ctx.ReadResource("duplocloud:index/azureVirtualMachineScaleSet:AzureVirtualMachineScaleSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureVirtualMachineScaleSet resources.
type azureVirtualMachineScaleSetState struct {
	// The numeric ID of the container agent pool that this VM is added to. Defaults to `0`.
	AgentPlatform  *int    `pulumi:"agentPlatform"`
	AllocationTags *string `pulumi:"allocationTags"`
	// Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
	AutomaticOsUpgrade *bool                                       `pulumi:"automaticOsUpgrade"`
	BootDiagnostics    *AzureVirtualMachineScaleSetBootDiagnostics `pulumi:"bootDiagnostics"`
	// Specifies the eviction policy for Virtual Machines in this Scale Set.
	EvictionPolicy *string                                `pulumi:"evictionPolicy"`
	Extensions     []AzureVirtualMachineScaleSetExtension `pulumi:"extensions"`
	// Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`
	HealthProbeId *string                              `pulumi:"healthProbeId"`
	Identity      *AzureVirtualMachineScaleSetIdentity `pulumi:"identity"`
	// Defaults to `false`.
	IsMinion *bool `pulumi:"isMinion"`
	// Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
	LicenseType *string `pulumi:"licenseType"`
	Location    *string `pulumi:"location"`
	// Specifies the name of the virtual machine scale set resource.
	Name                   *string                                            `pulumi:"name"`
	NetworkProfiles        []AzureVirtualMachineScaleSetNetworkProfile        `pulumi:"networkProfiles"`
	OsProfile              *AzureVirtualMachineScaleSetOsProfile              `pulumi:"osProfile"`
	OsProfileLinuxConfig   *AzureVirtualMachineScaleSetOsProfileLinuxConfig   `pulumi:"osProfileLinuxConfig"`
	OsProfileSecrets       []AzureVirtualMachineScaleSetOsProfileSecret       `pulumi:"osProfileSecrets"`
	OsProfileWindowsConfig *AzureVirtualMachineScaleSetOsProfileWindowsConfig `pulumi:"osProfileWindowsConfig"`
	// Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
	Overprovision *bool                            `pulumi:"overprovision"`
	Plan          *AzureVirtualMachineScaleSetPlan `pulumi:"plan"`
	// Specifies the priority for the Virtual Machines in the Scale Set. Defaults to `Regular`.
	Priority *string `pulumi:"priority"`
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned.
	ProximityPlacementGroupId *string                                          `pulumi:"proximityPlacementGroupId"`
	RollingUpgradePolicy      *AzureVirtualMachineScaleSetRollingUpgradePolicy `pulumi:"rollingUpgradePolicy"`
	// Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Defaults to `true`.
	SinglePlacementGroup         *bool                                                    `pulumi:"singlePlacementGroup"`
	Sku                          *AzureVirtualMachineScaleSetSku                          `pulumi:"sku"`
	StorageProfileDataDisks      []AzureVirtualMachineScaleSetStorageProfileDataDisk      `pulumi:"storageProfileDataDisks"`
	StorageProfileImageReference *AzureVirtualMachineScaleSetStorageProfileImageReference `pulumi:"storageProfileImageReference"`
	StorageProfileOsDisk         *AzureVirtualMachineScaleSetStorageProfileOsDisk         `pulumi:"storageProfileOsDisk"`
	// The GUID of the tenant that the azure virtual machine scale set will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing Rolling, you will need to set a health probe.
	UpgradePolicyMode *string `pulumi:"upgradePolicyMode"`
	// Whether or not to wait until virtual machine scale set to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool    `pulumi:"waitUntilReady"`
	Zones          []string `pulumi:"zones"`
}

type AzureVirtualMachineScaleSetState struct {
	// The numeric ID of the container agent pool that this VM is added to. Defaults to `0`.
	AgentPlatform  pulumi.IntPtrInput
	AllocationTags pulumi.StringPtrInput
	// Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
	AutomaticOsUpgrade pulumi.BoolPtrInput
	BootDiagnostics    AzureVirtualMachineScaleSetBootDiagnosticsPtrInput
	// Specifies the eviction policy for Virtual Machines in this Scale Set.
	EvictionPolicy pulumi.StringPtrInput
	Extensions     AzureVirtualMachineScaleSetExtensionArrayInput
	// Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`
	HealthProbeId pulumi.StringPtrInput
	Identity      AzureVirtualMachineScaleSetIdentityPtrInput
	// Defaults to `false`.
	IsMinion pulumi.BoolPtrInput
	// Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	// Specifies the name of the virtual machine scale set resource.
	Name                   pulumi.StringPtrInput
	NetworkProfiles        AzureVirtualMachineScaleSetNetworkProfileArrayInput
	OsProfile              AzureVirtualMachineScaleSetOsProfilePtrInput
	OsProfileLinuxConfig   AzureVirtualMachineScaleSetOsProfileLinuxConfigPtrInput
	OsProfileSecrets       AzureVirtualMachineScaleSetOsProfileSecretArrayInput
	OsProfileWindowsConfig AzureVirtualMachineScaleSetOsProfileWindowsConfigPtrInput
	// Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
	Overprovision pulumi.BoolPtrInput
	Plan          AzureVirtualMachineScaleSetPlanPtrInput
	// Specifies the priority for the Virtual Machines in the Scale Set. Defaults to `Regular`.
	Priority pulumi.StringPtrInput
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned.
	ProximityPlacementGroupId pulumi.StringPtrInput
	RollingUpgradePolicy      AzureVirtualMachineScaleSetRollingUpgradePolicyPtrInput
	// Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Defaults to `true`.
	SinglePlacementGroup         pulumi.BoolPtrInput
	Sku                          AzureVirtualMachineScaleSetSkuPtrInput
	StorageProfileDataDisks      AzureVirtualMachineScaleSetStorageProfileDataDiskArrayInput
	StorageProfileImageReference AzureVirtualMachineScaleSetStorageProfileImageReferencePtrInput
	StorageProfileOsDisk         AzureVirtualMachineScaleSetStorageProfileOsDiskPtrInput
	// The GUID of the tenant that the azure virtual machine scale set will be created in.
	TenantId pulumi.StringPtrInput
	// Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing Rolling, you will need to set a health probe.
	UpgradePolicyMode pulumi.StringPtrInput
	// Whether or not to wait until virtual machine scale set to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
	Zones          pulumi.StringArrayInput
}

func (AzureVirtualMachineScaleSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureVirtualMachineScaleSetState)(nil)).Elem()
}

type azureVirtualMachineScaleSetArgs struct {
	// The numeric ID of the container agent pool that this VM is added to. Defaults to `0`.
	AgentPlatform  *int    `pulumi:"agentPlatform"`
	AllocationTags *string `pulumi:"allocationTags"`
	// Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
	AutomaticOsUpgrade *bool                                       `pulumi:"automaticOsUpgrade"`
	BootDiagnostics    *AzureVirtualMachineScaleSetBootDiagnostics `pulumi:"bootDiagnostics"`
	// Specifies the eviction policy for Virtual Machines in this Scale Set.
	EvictionPolicy *string                                `pulumi:"evictionPolicy"`
	Extensions     []AzureVirtualMachineScaleSetExtension `pulumi:"extensions"`
	// Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`
	HealthProbeId *string                              `pulumi:"healthProbeId"`
	Identity      *AzureVirtualMachineScaleSetIdentity `pulumi:"identity"`
	// Defaults to `false`.
	IsMinion *bool `pulumi:"isMinion"`
	// Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
	LicenseType *string `pulumi:"licenseType"`
	// Specifies the name of the virtual machine scale set resource.
	Name                   *string                                            `pulumi:"name"`
	NetworkProfiles        []AzureVirtualMachineScaleSetNetworkProfile        `pulumi:"networkProfiles"`
	OsProfile              AzureVirtualMachineScaleSetOsProfile               `pulumi:"osProfile"`
	OsProfileLinuxConfig   *AzureVirtualMachineScaleSetOsProfileLinuxConfig   `pulumi:"osProfileLinuxConfig"`
	OsProfileSecrets       []AzureVirtualMachineScaleSetOsProfileSecret       `pulumi:"osProfileSecrets"`
	OsProfileWindowsConfig *AzureVirtualMachineScaleSetOsProfileWindowsConfig `pulumi:"osProfileWindowsConfig"`
	// Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
	Overprovision *bool                            `pulumi:"overprovision"`
	Plan          *AzureVirtualMachineScaleSetPlan `pulumi:"plan"`
	// Specifies the priority for the Virtual Machines in the Scale Set. Defaults to `Regular`.
	Priority *string `pulumi:"priority"`
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned.
	ProximityPlacementGroupId *string                                          `pulumi:"proximityPlacementGroupId"`
	RollingUpgradePolicy      *AzureVirtualMachineScaleSetRollingUpgradePolicy `pulumi:"rollingUpgradePolicy"`
	// Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Defaults to `true`.
	SinglePlacementGroup         *bool                                                    `pulumi:"singlePlacementGroup"`
	Sku                          AzureVirtualMachineScaleSetSku                           `pulumi:"sku"`
	StorageProfileDataDisks      []AzureVirtualMachineScaleSetStorageProfileDataDisk      `pulumi:"storageProfileDataDisks"`
	StorageProfileImageReference *AzureVirtualMachineScaleSetStorageProfileImageReference `pulumi:"storageProfileImageReference"`
	StorageProfileOsDisk         *AzureVirtualMachineScaleSetStorageProfileOsDisk         `pulumi:"storageProfileOsDisk"`
	// The GUID of the tenant that the azure virtual machine scale set will be created in.
	TenantId string `pulumi:"tenantId"`
	// Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing Rolling, you will need to set a health probe.
	UpgradePolicyMode string `pulumi:"upgradePolicyMode"`
	// Whether or not to wait until virtual machine scale set to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool    `pulumi:"waitUntilReady"`
	Zones          []string `pulumi:"zones"`
}

// The set of arguments for constructing a AzureVirtualMachineScaleSet resource.
type AzureVirtualMachineScaleSetArgs struct {
	// The numeric ID of the container agent pool that this VM is added to. Defaults to `0`.
	AgentPlatform  pulumi.IntPtrInput
	AllocationTags pulumi.StringPtrInput
	// Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
	AutomaticOsUpgrade pulumi.BoolPtrInput
	BootDiagnostics    AzureVirtualMachineScaleSetBootDiagnosticsPtrInput
	// Specifies the eviction policy for Virtual Machines in this Scale Set.
	EvictionPolicy pulumi.StringPtrInput
	Extensions     AzureVirtualMachineScaleSetExtensionArrayInput
	// Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`
	HealthProbeId pulumi.StringPtrInput
	Identity      AzureVirtualMachineScaleSetIdentityPtrInput
	// Defaults to `false`.
	IsMinion pulumi.BoolPtrInput
	// Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringPtrInput
	// Specifies the name of the virtual machine scale set resource.
	Name                   pulumi.StringPtrInput
	NetworkProfiles        AzureVirtualMachineScaleSetNetworkProfileArrayInput
	OsProfile              AzureVirtualMachineScaleSetOsProfileInput
	OsProfileLinuxConfig   AzureVirtualMachineScaleSetOsProfileLinuxConfigPtrInput
	OsProfileSecrets       AzureVirtualMachineScaleSetOsProfileSecretArrayInput
	OsProfileWindowsConfig AzureVirtualMachineScaleSetOsProfileWindowsConfigPtrInput
	// Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
	Overprovision pulumi.BoolPtrInput
	Plan          AzureVirtualMachineScaleSetPlanPtrInput
	// Specifies the priority for the Virtual Machines in the Scale Set. Defaults to `Regular`.
	Priority pulumi.StringPtrInput
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned.
	ProximityPlacementGroupId pulumi.StringPtrInput
	RollingUpgradePolicy      AzureVirtualMachineScaleSetRollingUpgradePolicyPtrInput
	// Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Defaults to `true`.
	SinglePlacementGroup         pulumi.BoolPtrInput
	Sku                          AzureVirtualMachineScaleSetSkuInput
	StorageProfileDataDisks      AzureVirtualMachineScaleSetStorageProfileDataDiskArrayInput
	StorageProfileImageReference AzureVirtualMachineScaleSetStorageProfileImageReferencePtrInput
	StorageProfileOsDisk         AzureVirtualMachineScaleSetStorageProfileOsDiskPtrInput
	// The GUID of the tenant that the azure virtual machine scale set will be created in.
	TenantId pulumi.StringInput
	// Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing Rolling, you will need to set a health probe.
	UpgradePolicyMode pulumi.StringInput
	// Whether or not to wait until virtual machine scale set to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
	Zones          pulumi.StringArrayInput
}

func (AzureVirtualMachineScaleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureVirtualMachineScaleSetArgs)(nil)).Elem()
}

type AzureVirtualMachineScaleSetInput interface {
	pulumi.Input

	ToAzureVirtualMachineScaleSetOutput() AzureVirtualMachineScaleSetOutput
	ToAzureVirtualMachineScaleSetOutputWithContext(ctx context.Context) AzureVirtualMachineScaleSetOutput
}

func (*AzureVirtualMachineScaleSet) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureVirtualMachineScaleSet)(nil)).Elem()
}

func (i *AzureVirtualMachineScaleSet) ToAzureVirtualMachineScaleSetOutput() AzureVirtualMachineScaleSetOutput {
	return i.ToAzureVirtualMachineScaleSetOutputWithContext(context.Background())
}

func (i *AzureVirtualMachineScaleSet) ToAzureVirtualMachineScaleSetOutputWithContext(ctx context.Context) AzureVirtualMachineScaleSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureVirtualMachineScaleSetOutput)
}

// AzureVirtualMachineScaleSetArrayInput is an input type that accepts AzureVirtualMachineScaleSetArray and AzureVirtualMachineScaleSetArrayOutput values.
// You can construct a concrete instance of `AzureVirtualMachineScaleSetArrayInput` via:
//
//	AzureVirtualMachineScaleSetArray{ AzureVirtualMachineScaleSetArgs{...} }
type AzureVirtualMachineScaleSetArrayInput interface {
	pulumi.Input

	ToAzureVirtualMachineScaleSetArrayOutput() AzureVirtualMachineScaleSetArrayOutput
	ToAzureVirtualMachineScaleSetArrayOutputWithContext(context.Context) AzureVirtualMachineScaleSetArrayOutput
}

type AzureVirtualMachineScaleSetArray []AzureVirtualMachineScaleSetInput

func (AzureVirtualMachineScaleSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureVirtualMachineScaleSet)(nil)).Elem()
}

func (i AzureVirtualMachineScaleSetArray) ToAzureVirtualMachineScaleSetArrayOutput() AzureVirtualMachineScaleSetArrayOutput {
	return i.ToAzureVirtualMachineScaleSetArrayOutputWithContext(context.Background())
}

func (i AzureVirtualMachineScaleSetArray) ToAzureVirtualMachineScaleSetArrayOutputWithContext(ctx context.Context) AzureVirtualMachineScaleSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureVirtualMachineScaleSetArrayOutput)
}

// AzureVirtualMachineScaleSetMapInput is an input type that accepts AzureVirtualMachineScaleSetMap and AzureVirtualMachineScaleSetMapOutput values.
// You can construct a concrete instance of `AzureVirtualMachineScaleSetMapInput` via:
//
//	AzureVirtualMachineScaleSetMap{ "key": AzureVirtualMachineScaleSetArgs{...} }
type AzureVirtualMachineScaleSetMapInput interface {
	pulumi.Input

	ToAzureVirtualMachineScaleSetMapOutput() AzureVirtualMachineScaleSetMapOutput
	ToAzureVirtualMachineScaleSetMapOutputWithContext(context.Context) AzureVirtualMachineScaleSetMapOutput
}

type AzureVirtualMachineScaleSetMap map[string]AzureVirtualMachineScaleSetInput

func (AzureVirtualMachineScaleSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureVirtualMachineScaleSet)(nil)).Elem()
}

func (i AzureVirtualMachineScaleSetMap) ToAzureVirtualMachineScaleSetMapOutput() AzureVirtualMachineScaleSetMapOutput {
	return i.ToAzureVirtualMachineScaleSetMapOutputWithContext(context.Background())
}

func (i AzureVirtualMachineScaleSetMap) ToAzureVirtualMachineScaleSetMapOutputWithContext(ctx context.Context) AzureVirtualMachineScaleSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureVirtualMachineScaleSetMapOutput)
}

type AzureVirtualMachineScaleSetOutput struct{ *pulumi.OutputState }

func (AzureVirtualMachineScaleSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureVirtualMachineScaleSet)(nil)).Elem()
}

func (o AzureVirtualMachineScaleSetOutput) ToAzureVirtualMachineScaleSetOutput() AzureVirtualMachineScaleSetOutput {
	return o
}

func (o AzureVirtualMachineScaleSetOutput) ToAzureVirtualMachineScaleSetOutputWithContext(ctx context.Context) AzureVirtualMachineScaleSetOutput {
	return o
}

// The numeric ID of the container agent pool that this VM is added to. Defaults to `0`.
func (o AzureVirtualMachineScaleSetOutput) AgentPlatform() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.IntPtrOutput { return v.AgentPlatform }).(pulumi.IntPtrOutput)
}

func (o AzureVirtualMachineScaleSetOutput) AllocationTags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.AllocationTags }).(pulumi.StringPtrOutput)
}

// Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
func (o AzureVirtualMachineScaleSetOutput) AutomaticOsUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.BoolPtrOutput { return v.AutomaticOsUpgrade }).(pulumi.BoolPtrOutput)
}

func (o AzureVirtualMachineScaleSetOutput) BootDiagnostics() AzureVirtualMachineScaleSetBootDiagnosticsPtrOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) AzureVirtualMachineScaleSetBootDiagnosticsPtrOutput {
		return v.BootDiagnostics
	}).(AzureVirtualMachineScaleSetBootDiagnosticsPtrOutput)
}

// Specifies the eviction policy for Virtual Machines in this Scale Set.
func (o AzureVirtualMachineScaleSetOutput) EvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.EvictionPolicy }).(pulumi.StringPtrOutput)
}

func (o AzureVirtualMachineScaleSetOutput) Extensions() AzureVirtualMachineScaleSetExtensionArrayOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) AzureVirtualMachineScaleSetExtensionArrayOutput {
		return v.Extensions
	}).(AzureVirtualMachineScaleSetExtensionArrayOutput)
}

// Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`
func (o AzureVirtualMachineScaleSetOutput) HealthProbeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.HealthProbeId }).(pulumi.StringPtrOutput)
}

func (o AzureVirtualMachineScaleSetOutput) Identity() AzureVirtualMachineScaleSetIdentityOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) AzureVirtualMachineScaleSetIdentityOutput { return v.Identity }).(AzureVirtualMachineScaleSetIdentityOutput)
}

// Defaults to `false`.
func (o AzureVirtualMachineScaleSetOutput) IsMinion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.BoolPtrOutput { return v.IsMinion }).(pulumi.BoolPtrOutput)
}

// Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
func (o AzureVirtualMachineScaleSetOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.StringOutput { return v.LicenseType }).(pulumi.StringOutput)
}

func (o AzureVirtualMachineScaleSetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the virtual machine scale set resource.
func (o AzureVirtualMachineScaleSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AzureVirtualMachineScaleSetOutput) NetworkProfiles() AzureVirtualMachineScaleSetNetworkProfileArrayOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) AzureVirtualMachineScaleSetNetworkProfileArrayOutput {
		return v.NetworkProfiles
	}).(AzureVirtualMachineScaleSetNetworkProfileArrayOutput)
}

func (o AzureVirtualMachineScaleSetOutput) OsProfile() AzureVirtualMachineScaleSetOsProfileOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) AzureVirtualMachineScaleSetOsProfileOutput { return v.OsProfile }).(AzureVirtualMachineScaleSetOsProfileOutput)
}

func (o AzureVirtualMachineScaleSetOutput) OsProfileLinuxConfig() AzureVirtualMachineScaleSetOsProfileLinuxConfigOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) AzureVirtualMachineScaleSetOsProfileLinuxConfigOutput {
		return v.OsProfileLinuxConfig
	}).(AzureVirtualMachineScaleSetOsProfileLinuxConfigOutput)
}

func (o AzureVirtualMachineScaleSetOutput) OsProfileSecrets() AzureVirtualMachineScaleSetOsProfileSecretArrayOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) AzureVirtualMachineScaleSetOsProfileSecretArrayOutput {
		return v.OsProfileSecrets
	}).(AzureVirtualMachineScaleSetOsProfileSecretArrayOutput)
}

func (o AzureVirtualMachineScaleSetOutput) OsProfileWindowsConfig() AzureVirtualMachineScaleSetOsProfileWindowsConfigOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) AzureVirtualMachineScaleSetOsProfileWindowsConfigOutput {
		return v.OsProfileWindowsConfig
	}).(AzureVirtualMachineScaleSetOsProfileWindowsConfigOutput)
}

// Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
func (o AzureVirtualMachineScaleSetOutput) Overprovision() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.BoolPtrOutput { return v.Overprovision }).(pulumi.BoolPtrOutput)
}

func (o AzureVirtualMachineScaleSetOutput) Plan() AzureVirtualMachineScaleSetPlanPtrOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) AzureVirtualMachineScaleSetPlanPtrOutput { return v.Plan }).(AzureVirtualMachineScaleSetPlanPtrOutput)
}

// Specifies the priority for the Virtual Machines in the Scale Set. Defaults to `Regular`.
func (o AzureVirtualMachineScaleSetOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.Priority }).(pulumi.StringPtrOutput)
}

// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned.
func (o AzureVirtualMachineScaleSetOutput) ProximityPlacementGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.ProximityPlacementGroupId }).(pulumi.StringPtrOutput)
}

func (o AzureVirtualMachineScaleSetOutput) RollingUpgradePolicy() AzureVirtualMachineScaleSetRollingUpgradePolicyPtrOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) AzureVirtualMachineScaleSetRollingUpgradePolicyPtrOutput {
		return v.RollingUpgradePolicy
	}).(AzureVirtualMachineScaleSetRollingUpgradePolicyPtrOutput)
}

// Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Defaults to `true`.
func (o AzureVirtualMachineScaleSetOutput) SinglePlacementGroup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.BoolPtrOutput { return v.SinglePlacementGroup }).(pulumi.BoolPtrOutput)
}

func (o AzureVirtualMachineScaleSetOutput) Sku() AzureVirtualMachineScaleSetSkuOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) AzureVirtualMachineScaleSetSkuOutput { return v.Sku }).(AzureVirtualMachineScaleSetSkuOutput)
}

func (o AzureVirtualMachineScaleSetOutput) StorageProfileDataDisks() AzureVirtualMachineScaleSetStorageProfileDataDiskArrayOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) AzureVirtualMachineScaleSetStorageProfileDataDiskArrayOutput {
		return v.StorageProfileDataDisks
	}).(AzureVirtualMachineScaleSetStorageProfileDataDiskArrayOutput)
}

func (o AzureVirtualMachineScaleSetOutput) StorageProfileImageReference() AzureVirtualMachineScaleSetStorageProfileImageReferenceOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) AzureVirtualMachineScaleSetStorageProfileImageReferenceOutput {
		return v.StorageProfileImageReference
	}).(AzureVirtualMachineScaleSetStorageProfileImageReferenceOutput)
}

func (o AzureVirtualMachineScaleSetOutput) StorageProfileOsDisk() AzureVirtualMachineScaleSetStorageProfileOsDiskOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) AzureVirtualMachineScaleSetStorageProfileOsDiskOutput {
		return v.StorageProfileOsDisk
	}).(AzureVirtualMachineScaleSetStorageProfileOsDiskOutput)
}

// The GUID of the tenant that the azure virtual machine scale set will be created in.
func (o AzureVirtualMachineScaleSetOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing Rolling, you will need to set a health probe.
func (o AzureVirtualMachineScaleSetOutput) UpgradePolicyMode() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.StringOutput { return v.UpgradePolicyMode }).(pulumi.StringOutput)
}

// Whether or not to wait until virtual machine scale set to be ready, after creation. Defaults to `true`.
func (o AzureVirtualMachineScaleSetOutput) WaitUntilReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.BoolPtrOutput { return v.WaitUntilReady }).(pulumi.BoolPtrOutput)
}

func (o AzureVirtualMachineScaleSetOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzureVirtualMachineScaleSet) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

type AzureVirtualMachineScaleSetArrayOutput struct{ *pulumi.OutputState }

func (AzureVirtualMachineScaleSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureVirtualMachineScaleSet)(nil)).Elem()
}

func (o AzureVirtualMachineScaleSetArrayOutput) ToAzureVirtualMachineScaleSetArrayOutput() AzureVirtualMachineScaleSetArrayOutput {
	return o
}

func (o AzureVirtualMachineScaleSetArrayOutput) ToAzureVirtualMachineScaleSetArrayOutputWithContext(ctx context.Context) AzureVirtualMachineScaleSetArrayOutput {
	return o
}

func (o AzureVirtualMachineScaleSetArrayOutput) Index(i pulumi.IntInput) AzureVirtualMachineScaleSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureVirtualMachineScaleSet {
		return vs[0].([]*AzureVirtualMachineScaleSet)[vs[1].(int)]
	}).(AzureVirtualMachineScaleSetOutput)
}

type AzureVirtualMachineScaleSetMapOutput struct{ *pulumi.OutputState }

func (AzureVirtualMachineScaleSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureVirtualMachineScaleSet)(nil)).Elem()
}

func (o AzureVirtualMachineScaleSetMapOutput) ToAzureVirtualMachineScaleSetMapOutput() AzureVirtualMachineScaleSetMapOutput {
	return o
}

func (o AzureVirtualMachineScaleSetMapOutput) ToAzureVirtualMachineScaleSetMapOutputWithContext(ctx context.Context) AzureVirtualMachineScaleSetMapOutput {
	return o
}

func (o AzureVirtualMachineScaleSetMapOutput) MapIndex(k pulumi.StringInput) AzureVirtualMachineScaleSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureVirtualMachineScaleSet {
		return vs[0].(map[string]*AzureVirtualMachineScaleSet)[vs[1].(string)]
	}).(AzureVirtualMachineScaleSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureVirtualMachineScaleSetInput)(nil)).Elem(), &AzureVirtualMachineScaleSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureVirtualMachineScaleSetArrayInput)(nil)).Elem(), AzureVirtualMachineScaleSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureVirtualMachineScaleSetMapInput)(nil)).Elem(), AzureVirtualMachineScaleSetMap{})
	pulumi.RegisterOutputType(AzureVirtualMachineScaleSetOutput{})
	pulumi.RegisterOutputType(AzureVirtualMachineScaleSetArrayOutput{})
	pulumi.RegisterOutputType(AzureVirtualMachineScaleSetMapOutput{})
}
