// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `UserTenantAccess` manages a user tenant access in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			// Simple Example 1:  Grant access of tenant to user
//			_, err = duplocloud.NewUserTenantAccess(ctx, "access", &duplocloud.UserTenantAccessArgs{
//				Username:   pulumi.String("user@domain"),
//				TenantId:   myapp.TenantId,
//				IsReadonly: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing service
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *USERNAME* is the unique user name or email id of the user to which TENANT_ID access has been given
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/userTenantAccess:UserTenantAccess access *USERNAME*/*TENANT_ID*
// ```
type UserTenantAccess struct {
	pulumi.CustomResourceState

	// Specifiy readonly policy related to tenant Defaults to `false`.
	IsReadonly pulumi.BoolPtrOutput `pulumi:"isReadonly"`
	// Tenant Id to which user need to get access
	TenantId   pulumi.StringOutput `pulumi:"tenantId"`
	TenantName pulumi.StringOutput `pulumi:"tenantName"`
	// The unique user name or the email.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewUserTenantAccess registers a new resource with the given unique name, arguments, and options.
func NewUserTenantAccess(ctx *pulumi.Context,
	name string, args *UserTenantAccessArgs, opts ...pulumi.ResourceOption) (*UserTenantAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserTenantAccess
	err := ctx.RegisterResource("duplocloud:index/userTenantAccess:UserTenantAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserTenantAccess gets an existing UserTenantAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserTenantAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserTenantAccessState, opts ...pulumi.ResourceOption) (*UserTenantAccess, error) {
	var resource UserTenantAccess
	err := ctx.ReadResource("duplocloud:index/userTenantAccess:UserTenantAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserTenantAccess resources.
type userTenantAccessState struct {
	// Specifiy readonly policy related to tenant Defaults to `false`.
	IsReadonly *bool `pulumi:"isReadonly"`
	// Tenant Id to which user need to get access
	TenantId   *string `pulumi:"tenantId"`
	TenantName *string `pulumi:"tenantName"`
	// The unique user name or the email.
	Username *string `pulumi:"username"`
}

type UserTenantAccessState struct {
	// Specifiy readonly policy related to tenant Defaults to `false`.
	IsReadonly pulumi.BoolPtrInput
	// Tenant Id to which user need to get access
	TenantId   pulumi.StringPtrInput
	TenantName pulumi.StringPtrInput
	// The unique user name or the email.
	Username pulumi.StringPtrInput
}

func (UserTenantAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*userTenantAccessState)(nil)).Elem()
}

type userTenantAccessArgs struct {
	// Specifiy readonly policy related to tenant Defaults to `false`.
	IsReadonly *bool `pulumi:"isReadonly"`
	// Tenant Id to which user need to get access
	TenantId string `pulumi:"tenantId"`
	// The unique user name or the email.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a UserTenantAccess resource.
type UserTenantAccessArgs struct {
	// Specifiy readonly policy related to tenant Defaults to `false`.
	IsReadonly pulumi.BoolPtrInput
	// Tenant Id to which user need to get access
	TenantId pulumi.StringInput
	// The unique user name or the email.
	Username pulumi.StringInput
}

func (UserTenantAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userTenantAccessArgs)(nil)).Elem()
}

type UserTenantAccessInput interface {
	pulumi.Input

	ToUserTenantAccessOutput() UserTenantAccessOutput
	ToUserTenantAccessOutputWithContext(ctx context.Context) UserTenantAccessOutput
}

func (*UserTenantAccess) ElementType() reflect.Type {
	return reflect.TypeOf((**UserTenantAccess)(nil)).Elem()
}

func (i *UserTenantAccess) ToUserTenantAccessOutput() UserTenantAccessOutput {
	return i.ToUserTenantAccessOutputWithContext(context.Background())
}

func (i *UserTenantAccess) ToUserTenantAccessOutputWithContext(ctx context.Context) UserTenantAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTenantAccessOutput)
}

// UserTenantAccessArrayInput is an input type that accepts UserTenantAccessArray and UserTenantAccessArrayOutput values.
// You can construct a concrete instance of `UserTenantAccessArrayInput` via:
//
//	UserTenantAccessArray{ UserTenantAccessArgs{...} }
type UserTenantAccessArrayInput interface {
	pulumi.Input

	ToUserTenantAccessArrayOutput() UserTenantAccessArrayOutput
	ToUserTenantAccessArrayOutputWithContext(context.Context) UserTenantAccessArrayOutput
}

type UserTenantAccessArray []UserTenantAccessInput

func (UserTenantAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserTenantAccess)(nil)).Elem()
}

func (i UserTenantAccessArray) ToUserTenantAccessArrayOutput() UserTenantAccessArrayOutput {
	return i.ToUserTenantAccessArrayOutputWithContext(context.Background())
}

func (i UserTenantAccessArray) ToUserTenantAccessArrayOutputWithContext(ctx context.Context) UserTenantAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTenantAccessArrayOutput)
}

// UserTenantAccessMapInput is an input type that accepts UserTenantAccessMap and UserTenantAccessMapOutput values.
// You can construct a concrete instance of `UserTenantAccessMapInput` via:
//
//	UserTenantAccessMap{ "key": UserTenantAccessArgs{...} }
type UserTenantAccessMapInput interface {
	pulumi.Input

	ToUserTenantAccessMapOutput() UserTenantAccessMapOutput
	ToUserTenantAccessMapOutputWithContext(context.Context) UserTenantAccessMapOutput
}

type UserTenantAccessMap map[string]UserTenantAccessInput

func (UserTenantAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserTenantAccess)(nil)).Elem()
}

func (i UserTenantAccessMap) ToUserTenantAccessMapOutput() UserTenantAccessMapOutput {
	return i.ToUserTenantAccessMapOutputWithContext(context.Background())
}

func (i UserTenantAccessMap) ToUserTenantAccessMapOutputWithContext(ctx context.Context) UserTenantAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTenantAccessMapOutput)
}

type UserTenantAccessOutput struct{ *pulumi.OutputState }

func (UserTenantAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserTenantAccess)(nil)).Elem()
}

func (o UserTenantAccessOutput) ToUserTenantAccessOutput() UserTenantAccessOutput {
	return o
}

func (o UserTenantAccessOutput) ToUserTenantAccessOutputWithContext(ctx context.Context) UserTenantAccessOutput {
	return o
}

// Specifiy readonly policy related to tenant Defaults to `false`.
func (o UserTenantAccessOutput) IsReadonly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserTenantAccess) pulumi.BoolPtrOutput { return v.IsReadonly }).(pulumi.BoolPtrOutput)
}

// Tenant Id to which user need to get access
func (o UserTenantAccessOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserTenantAccess) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

func (o UserTenantAccessOutput) TenantName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserTenantAccess) pulumi.StringOutput { return v.TenantName }).(pulumi.StringOutput)
}

// The unique user name or the email.
func (o UserTenantAccessOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *UserTenantAccess) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type UserTenantAccessArrayOutput struct{ *pulumi.OutputState }

func (UserTenantAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserTenantAccess)(nil)).Elem()
}

func (o UserTenantAccessArrayOutput) ToUserTenantAccessArrayOutput() UserTenantAccessArrayOutput {
	return o
}

func (o UserTenantAccessArrayOutput) ToUserTenantAccessArrayOutputWithContext(ctx context.Context) UserTenantAccessArrayOutput {
	return o
}

func (o UserTenantAccessArrayOutput) Index(i pulumi.IntInput) UserTenantAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserTenantAccess {
		return vs[0].([]*UserTenantAccess)[vs[1].(int)]
	}).(UserTenantAccessOutput)
}

type UserTenantAccessMapOutput struct{ *pulumi.OutputState }

func (UserTenantAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserTenantAccess)(nil)).Elem()
}

func (o UserTenantAccessMapOutput) ToUserTenantAccessMapOutput() UserTenantAccessMapOutput {
	return o
}

func (o UserTenantAccessMapOutput) ToUserTenantAccessMapOutputWithContext(ctx context.Context) UserTenantAccessMapOutput {
	return o
}

func (o UserTenantAccessMapOutput) MapIndex(k pulumi.StringInput) UserTenantAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserTenantAccess {
		return vs[0].(map[string]*UserTenantAccess)[vs[1].(string)]
	}).(UserTenantAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserTenantAccessInput)(nil)).Elem(), &UserTenantAccess{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTenantAccessArrayInput)(nil)).Elem(), UserTenantAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTenantAccessMapInput)(nil)).Elem(), UserTenantAccessMap{})
	pulumi.RegisterOutputType(UserTenantAccessOutput{})
	pulumi.RegisterOutputType(UserTenantAccessArrayOutput{})
	pulumi.RegisterOutputType(UserTenantAccessMapOutput{})
}
