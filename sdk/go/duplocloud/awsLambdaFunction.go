// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AwsLambdaFunction` manages an AWS lambda function in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAwsLambdaFunction(ctx, "myfunction", &duplocloud.AwsLambdaFunctionArgs{
//				TenantId:    pulumi.Any(this.TenantId),
//				Name:        pulumi.String("myfunction"),
//				Description: pulumi.String("A description of my function"),
//				Runtime:     pulumi.String("java11"),
//				Handler:     pulumi.String("com.example.MyFunction::handleRequest"),
//				S3Bucket:    pulumi.String("my-bucket-name"),
//				S3Key:       pulumi.String("my-function.zip"),
//				Environment: &duplocloud.AwsLambdaFunctionEnvironmentArgs{
//					Variables: pulumi.StringMap{
//						"foo": pulumi.String("bar"),
//					},
//				},
//				Timeout:    pulumi.Int(60),
//				MemorySize: pulumi.Int(512),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAwsLambdaFunction(ctx, "thisfunction", &duplocloud.AwsLambdaFunctionArgs{
//				TenantId:    pulumi.Any(this.TenantId),
//				Name:        pulumi.String("thisfunction"),
//				Description: pulumi.String("A description of my function"),
//				PackageType: pulumi.String("Image"),
//				ImageUri:    pulumi.String("dkr.ecr.us-west-2.amazonaws.com/myimage:latest"),
//				ImageConfig: &duplocloud.AwsLambdaFunctionImageConfigArgs{
//					Commands: pulumi.StringArray{
//						pulumi.String("echo"),
//						pulumi.String("hello world"),
//					},
//					EntryPoints: pulumi.StringArray{
//						pulumi.String("echo hello workd"),
//					},
//					WorkingDirectory: pulumi.String("/tmp3"),
//				},
//				TracingConfig: &duplocloud.AwsLambdaFunctionTracingConfigArgs{
//					Mode: pulumi.String("PassThrough"),
//				},
//				Timeout:    pulumi.Int(60),
//				MemorySize: pulumi.Int(512),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAwsLambdaFunction(ctx, "edgefunction", &duplocloud.AwsLambdaFunctionArgs{
//				TenantId:    pulumi.String("c7163b39-43ca-4d44-81ce-9a323087039b"),
//				Name:        pulumi.String("edgefunction"),
//				Description: pulumi.String("An example edge function"),
//				PackageType: pulumi.String("Image"),
//				ImageUri:    pulumi.String("dkr.ecr.us-east-1.amazonaws.com/myimage:1.0"),
//				ImageConfig: &duplocloud.AwsLambdaFunctionImageConfigArgs{
//					Commands: pulumi.StringArray{
//						pulumi.String("echo"),
//						pulumi.String("hello world"),
//					},
//					EntryPoints: pulumi.StringArray{
//						pulumi.String("echo hello workd"),
//					},
//					WorkingDirectory: pulumi.String("/tmp3"),
//				},
//				Tags: pulumi.StringMap{
//					"IsEdgeDeploy": pulumi.String("true"),
//				},
//				Timeout:    pulumi.Int(5),
//				MemorySize: pulumi.Int(128),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing AWS lambda function
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the AWS lambda function
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/awsLambdaFunction:AwsLambdaFunction myfunction *TENANT_ID*/*SHORT_NAME*
// ```
type AwsLambdaFunction struct {
	pulumi.CustomResourceState

	// Instruction set architecture for your Lambda function. Valid values are `[x8664]` and `[arm64]`. Default is `[x8664]`
	Architectures pulumi.StringPtrOutput `pulumi:"architectures"`
	// The ARN of the lambda function.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.
	DeadLetterConfigs AwsLambdaFunctionDeadLetterConfigArrayOutput `pulumi:"deadLetterConfigs"`
	// A description of the lambda function.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Allow customization of the lambda execution environment.
	Environment AwsLambdaFunctionEnvironmentPtrOutput `pulumi:"environment"`
	// The Ephemeral Storage size, in MB, that your lambda function is allowed to use at runtime. Defaults to `512`.
	EphemeralStorage pulumi.IntPtrOutput `pulumi:"ephemeralStorage"`
	// The full name of the lambda function.
	Fullname pulumi.StringOutput `pulumi:"fullname"`
	// The [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) of the lambda function in your code.
	Handler pulumi.StringOutput `pulumi:"handler"`
	// Configuration for the Lambda function's container image
	ImageConfig AwsLambdaFunctionImageConfigPtrOutput `pulumi:"imageConfig"`
	// The docker image that holds the lambda function's code. Used (and required) only when `packageType` is `"Image"`. The image must be in a private ECR.
	ImageUri pulumi.StringPtrOutput `pulumi:"imageUri"`
	// A timestamp string of lambda's last modification time.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
	Layers pulumi.StringArrayOutput `pulumi:"layers"`
	// The maximum amount of memory, in MB, that your lambda function is allowed to use at runtime. Defaults to `128`.
	MemorySize pulumi.IntPtrOutput `pulumi:"memorySize"`
	// The short name of the lambda function cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of lambda package.  Must be `Zip` or `Image`.  Defaults to `Zip`.
	PackageType pulumi.StringOutput `pulumi:"packageType"`
	// The IAM role for the lambda function's execution.
	Role pulumi.StringOutput `pulumi:"role"`
	// The [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) that the lambda function needs.
	Runtime pulumi.StringOutput `pulumi:"runtime"`
	// The S3 bucket where the lambda function package is located. Used (and required) only when `packageType` is `"Zip"`.
	S3Bucket pulumi.StringPtrOutput `pulumi:"s3Bucket"`
	// The S3 key in the S3 bucket where the lambda function package is located. Used (and required) only when `packageType` is `"Zip"`.
	S3Key pulumi.StringPtrOutput `pulumi:"s3Key"`
	// The SHA 256 hash of the lambda functions's source code package.
	SourceCodeHash pulumi.StringOutput `pulumi:"sourceCodeHash"`
	// The size in bytes of the lambda functions's source code package.
	SourceCodeSize pulumi.IntOutput `pulumi:"sourceCodeSize"`
	// Map of tags to assign to the object.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The GUID of the tenant that the lambda function will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The execution time limit for the lambda function. Defaults to `3`.
	Timeout       pulumi.IntPtrOutput                  `pulumi:"timeout"`
	TracingConfig AwsLambdaFunctionTracingConfigOutput `pulumi:"tracingConfig"`
	// The version of the lambda function.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewAwsLambdaFunction registers a new resource with the given unique name, arguments, and options.
func NewAwsLambdaFunction(ctx *pulumi.Context,
	name string, args *AwsLambdaFunctionArgs, opts ...pulumi.ResourceOption) (*AwsLambdaFunction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsLambdaFunction
	err := ctx.RegisterResource("duplocloud:index/awsLambdaFunction:AwsLambdaFunction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsLambdaFunction gets an existing AwsLambdaFunction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsLambdaFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsLambdaFunctionState, opts ...pulumi.ResourceOption) (*AwsLambdaFunction, error) {
	var resource AwsLambdaFunction
	err := ctx.ReadResource("duplocloud:index/awsLambdaFunction:AwsLambdaFunction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsLambdaFunction resources.
type awsLambdaFunctionState struct {
	// Instruction set architecture for your Lambda function. Valid values are `[x8664]` and `[arm64]`. Default is `[x8664]`
	Architectures *string `pulumi:"architectures"`
	// The ARN of the lambda function.
	Arn *string `pulumi:"arn"`
	// Dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.
	DeadLetterConfigs []AwsLambdaFunctionDeadLetterConfig `pulumi:"deadLetterConfigs"`
	// A description of the lambda function.
	Description *string `pulumi:"description"`
	// Allow customization of the lambda execution environment.
	Environment *AwsLambdaFunctionEnvironment `pulumi:"environment"`
	// The Ephemeral Storage size, in MB, that your lambda function is allowed to use at runtime. Defaults to `512`.
	EphemeralStorage *int `pulumi:"ephemeralStorage"`
	// The full name of the lambda function.
	Fullname *string `pulumi:"fullname"`
	// The [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) of the lambda function in your code.
	Handler *string `pulumi:"handler"`
	// Configuration for the Lambda function's container image
	ImageConfig *AwsLambdaFunctionImageConfig `pulumi:"imageConfig"`
	// The docker image that holds the lambda function's code. Used (and required) only when `packageType` is `"Image"`. The image must be in a private ECR.
	ImageUri *string `pulumi:"imageUri"`
	// A timestamp string of lambda's last modification time.
	LastModified *string `pulumi:"lastModified"`
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
	Layers []string `pulumi:"layers"`
	// The maximum amount of memory, in MB, that your lambda function is allowed to use at runtime. Defaults to `128`.
	MemorySize *int `pulumi:"memorySize"`
	// The short name of the lambda function cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// The type of lambda package.  Must be `Zip` or `Image`.  Defaults to `Zip`.
	PackageType *string `pulumi:"packageType"`
	// The IAM role for the lambda function's execution.
	Role *string `pulumi:"role"`
	// The [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) that the lambda function needs.
	Runtime *string `pulumi:"runtime"`
	// The S3 bucket where the lambda function package is located. Used (and required) only when `packageType` is `"Zip"`.
	S3Bucket *string `pulumi:"s3Bucket"`
	// The S3 key in the S3 bucket where the lambda function package is located. Used (and required) only when `packageType` is `"Zip"`.
	S3Key *string `pulumi:"s3Key"`
	// The SHA 256 hash of the lambda functions's source code package.
	SourceCodeHash *string `pulumi:"sourceCodeHash"`
	// The size in bytes of the lambda functions's source code package.
	SourceCodeSize *int `pulumi:"sourceCodeSize"`
	// Map of tags to assign to the object.
	Tags map[string]string `pulumi:"tags"`
	// The GUID of the tenant that the lambda function will be created in.
	TenantId *string `pulumi:"tenantId"`
	// The execution time limit for the lambda function. Defaults to `3`.
	Timeout       *int                            `pulumi:"timeout"`
	TracingConfig *AwsLambdaFunctionTracingConfig `pulumi:"tracingConfig"`
	// The version of the lambda function.
	Version *string `pulumi:"version"`
}

type AwsLambdaFunctionState struct {
	// Instruction set architecture for your Lambda function. Valid values are `[x8664]` and `[arm64]`. Default is `[x8664]`
	Architectures pulumi.StringPtrInput
	// The ARN of the lambda function.
	Arn pulumi.StringPtrInput
	// Dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.
	DeadLetterConfigs AwsLambdaFunctionDeadLetterConfigArrayInput
	// A description of the lambda function.
	Description pulumi.StringPtrInput
	// Allow customization of the lambda execution environment.
	Environment AwsLambdaFunctionEnvironmentPtrInput
	// The Ephemeral Storage size, in MB, that your lambda function is allowed to use at runtime. Defaults to `512`.
	EphemeralStorage pulumi.IntPtrInput
	// The full name of the lambda function.
	Fullname pulumi.StringPtrInput
	// The [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) of the lambda function in your code.
	Handler pulumi.StringPtrInput
	// Configuration for the Lambda function's container image
	ImageConfig AwsLambdaFunctionImageConfigPtrInput
	// The docker image that holds the lambda function's code. Used (and required) only when `packageType` is `"Image"`. The image must be in a private ECR.
	ImageUri pulumi.StringPtrInput
	// A timestamp string of lambda's last modification time.
	LastModified pulumi.StringPtrInput
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
	Layers pulumi.StringArrayInput
	// The maximum amount of memory, in MB, that your lambda function is allowed to use at runtime. Defaults to `128`.
	MemorySize pulumi.IntPtrInput
	// The short name of the lambda function cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// The type of lambda package.  Must be `Zip` or `Image`.  Defaults to `Zip`.
	PackageType pulumi.StringPtrInput
	// The IAM role for the lambda function's execution.
	Role pulumi.StringPtrInput
	// The [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) that the lambda function needs.
	Runtime pulumi.StringPtrInput
	// The S3 bucket where the lambda function package is located. Used (and required) only when `packageType` is `"Zip"`.
	S3Bucket pulumi.StringPtrInput
	// The S3 key in the S3 bucket where the lambda function package is located. Used (and required) only when `packageType` is `"Zip"`.
	S3Key pulumi.StringPtrInput
	// The SHA 256 hash of the lambda functions's source code package.
	SourceCodeHash pulumi.StringPtrInput
	// The size in bytes of the lambda functions's source code package.
	SourceCodeSize pulumi.IntPtrInput
	// Map of tags to assign to the object.
	Tags pulumi.StringMapInput
	// The GUID of the tenant that the lambda function will be created in.
	TenantId pulumi.StringPtrInput
	// The execution time limit for the lambda function. Defaults to `3`.
	Timeout       pulumi.IntPtrInput
	TracingConfig AwsLambdaFunctionTracingConfigPtrInput
	// The version of the lambda function.
	Version pulumi.StringPtrInput
}

func (AwsLambdaFunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsLambdaFunctionState)(nil)).Elem()
}

type awsLambdaFunctionArgs struct {
	// Instruction set architecture for your Lambda function. Valid values are `[x8664]` and `[arm64]`. Default is `[x8664]`
	Architectures *string `pulumi:"architectures"`
	// Dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.
	DeadLetterConfigs []AwsLambdaFunctionDeadLetterConfig `pulumi:"deadLetterConfigs"`
	// A description of the lambda function.
	Description *string `pulumi:"description"`
	// Allow customization of the lambda execution environment.
	Environment *AwsLambdaFunctionEnvironment `pulumi:"environment"`
	// The Ephemeral Storage size, in MB, that your lambda function is allowed to use at runtime. Defaults to `512`.
	EphemeralStorage *int `pulumi:"ephemeralStorage"`
	// The [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) of the lambda function in your code.
	Handler *string `pulumi:"handler"`
	// Configuration for the Lambda function's container image
	ImageConfig *AwsLambdaFunctionImageConfig `pulumi:"imageConfig"`
	// The docker image that holds the lambda function's code. Used (and required) only when `packageType` is `"Image"`. The image must be in a private ECR.
	ImageUri *string `pulumi:"imageUri"`
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
	Layers []string `pulumi:"layers"`
	// The maximum amount of memory, in MB, that your lambda function is allowed to use at runtime. Defaults to `128`.
	MemorySize *int `pulumi:"memorySize"`
	// The short name of the lambda function cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// The type of lambda package.  Must be `Zip` or `Image`.  Defaults to `Zip`.
	PackageType *string `pulumi:"packageType"`
	// The [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) that the lambda function needs.
	Runtime *string `pulumi:"runtime"`
	// The S3 bucket where the lambda function package is located. Used (and required) only when `packageType` is `"Zip"`.
	S3Bucket *string `pulumi:"s3Bucket"`
	// The S3 key in the S3 bucket where the lambda function package is located. Used (and required) only when `packageType` is `"Zip"`.
	S3Key *string `pulumi:"s3Key"`
	// Map of tags to assign to the object.
	Tags map[string]string `pulumi:"tags"`
	// The GUID of the tenant that the lambda function will be created in.
	TenantId string `pulumi:"tenantId"`
	// The execution time limit for the lambda function. Defaults to `3`.
	Timeout       *int                            `pulumi:"timeout"`
	TracingConfig *AwsLambdaFunctionTracingConfig `pulumi:"tracingConfig"`
}

// The set of arguments for constructing a AwsLambdaFunction resource.
type AwsLambdaFunctionArgs struct {
	// Instruction set architecture for your Lambda function. Valid values are `[x8664]` and `[arm64]`. Default is `[x8664]`
	Architectures pulumi.StringPtrInput
	// Dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.
	DeadLetterConfigs AwsLambdaFunctionDeadLetterConfigArrayInput
	// A description of the lambda function.
	Description pulumi.StringPtrInput
	// Allow customization of the lambda execution environment.
	Environment AwsLambdaFunctionEnvironmentPtrInput
	// The Ephemeral Storage size, in MB, that your lambda function is allowed to use at runtime. Defaults to `512`.
	EphemeralStorage pulumi.IntPtrInput
	// The [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) of the lambda function in your code.
	Handler pulumi.StringPtrInput
	// Configuration for the Lambda function's container image
	ImageConfig AwsLambdaFunctionImageConfigPtrInput
	// The docker image that holds the lambda function's code. Used (and required) only when `packageType` is `"Image"`. The image must be in a private ECR.
	ImageUri pulumi.StringPtrInput
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
	Layers pulumi.StringArrayInput
	// The maximum amount of memory, in MB, that your lambda function is allowed to use at runtime. Defaults to `128`.
	MemorySize pulumi.IntPtrInput
	// The short name of the lambda function cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// The type of lambda package.  Must be `Zip` or `Image`.  Defaults to `Zip`.
	PackageType pulumi.StringPtrInput
	// The [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) that the lambda function needs.
	Runtime pulumi.StringPtrInput
	// The S3 bucket where the lambda function package is located. Used (and required) only when `packageType` is `"Zip"`.
	S3Bucket pulumi.StringPtrInput
	// The S3 key in the S3 bucket where the lambda function package is located. Used (and required) only when `packageType` is `"Zip"`.
	S3Key pulumi.StringPtrInput
	// Map of tags to assign to the object.
	Tags pulumi.StringMapInput
	// The GUID of the tenant that the lambda function will be created in.
	TenantId pulumi.StringInput
	// The execution time limit for the lambda function. Defaults to `3`.
	Timeout       pulumi.IntPtrInput
	TracingConfig AwsLambdaFunctionTracingConfigPtrInput
}

func (AwsLambdaFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsLambdaFunctionArgs)(nil)).Elem()
}

type AwsLambdaFunctionInput interface {
	pulumi.Input

	ToAwsLambdaFunctionOutput() AwsLambdaFunctionOutput
	ToAwsLambdaFunctionOutputWithContext(ctx context.Context) AwsLambdaFunctionOutput
}

func (*AwsLambdaFunction) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsLambdaFunction)(nil)).Elem()
}

func (i *AwsLambdaFunction) ToAwsLambdaFunctionOutput() AwsLambdaFunctionOutput {
	return i.ToAwsLambdaFunctionOutputWithContext(context.Background())
}

func (i *AwsLambdaFunction) ToAwsLambdaFunctionOutputWithContext(ctx context.Context) AwsLambdaFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLambdaFunctionOutput)
}

// AwsLambdaFunctionArrayInput is an input type that accepts AwsLambdaFunctionArray and AwsLambdaFunctionArrayOutput values.
// You can construct a concrete instance of `AwsLambdaFunctionArrayInput` via:
//
//	AwsLambdaFunctionArray{ AwsLambdaFunctionArgs{...} }
type AwsLambdaFunctionArrayInput interface {
	pulumi.Input

	ToAwsLambdaFunctionArrayOutput() AwsLambdaFunctionArrayOutput
	ToAwsLambdaFunctionArrayOutputWithContext(context.Context) AwsLambdaFunctionArrayOutput
}

type AwsLambdaFunctionArray []AwsLambdaFunctionInput

func (AwsLambdaFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsLambdaFunction)(nil)).Elem()
}

func (i AwsLambdaFunctionArray) ToAwsLambdaFunctionArrayOutput() AwsLambdaFunctionArrayOutput {
	return i.ToAwsLambdaFunctionArrayOutputWithContext(context.Background())
}

func (i AwsLambdaFunctionArray) ToAwsLambdaFunctionArrayOutputWithContext(ctx context.Context) AwsLambdaFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLambdaFunctionArrayOutput)
}

// AwsLambdaFunctionMapInput is an input type that accepts AwsLambdaFunctionMap and AwsLambdaFunctionMapOutput values.
// You can construct a concrete instance of `AwsLambdaFunctionMapInput` via:
//
//	AwsLambdaFunctionMap{ "key": AwsLambdaFunctionArgs{...} }
type AwsLambdaFunctionMapInput interface {
	pulumi.Input

	ToAwsLambdaFunctionMapOutput() AwsLambdaFunctionMapOutput
	ToAwsLambdaFunctionMapOutputWithContext(context.Context) AwsLambdaFunctionMapOutput
}

type AwsLambdaFunctionMap map[string]AwsLambdaFunctionInput

func (AwsLambdaFunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsLambdaFunction)(nil)).Elem()
}

func (i AwsLambdaFunctionMap) ToAwsLambdaFunctionMapOutput() AwsLambdaFunctionMapOutput {
	return i.ToAwsLambdaFunctionMapOutputWithContext(context.Background())
}

func (i AwsLambdaFunctionMap) ToAwsLambdaFunctionMapOutputWithContext(ctx context.Context) AwsLambdaFunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLambdaFunctionMapOutput)
}

type AwsLambdaFunctionOutput struct{ *pulumi.OutputState }

func (AwsLambdaFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsLambdaFunction)(nil)).Elem()
}

func (o AwsLambdaFunctionOutput) ToAwsLambdaFunctionOutput() AwsLambdaFunctionOutput {
	return o
}

func (o AwsLambdaFunctionOutput) ToAwsLambdaFunctionOutputWithContext(ctx context.Context) AwsLambdaFunctionOutput {
	return o
}

// Instruction set architecture for your Lambda function. Valid values are `[x8664]` and `[arm64]`. Default is `[x8664]`
func (o AwsLambdaFunctionOutput) Architectures() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringPtrOutput { return v.Architectures }).(pulumi.StringPtrOutput)
}

// The ARN of the lambda function.
func (o AwsLambdaFunctionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.
func (o AwsLambdaFunctionOutput) DeadLetterConfigs() AwsLambdaFunctionDeadLetterConfigArrayOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) AwsLambdaFunctionDeadLetterConfigArrayOutput { return v.DeadLetterConfigs }).(AwsLambdaFunctionDeadLetterConfigArrayOutput)
}

// A description of the lambda function.
func (o AwsLambdaFunctionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Allow customization of the lambda execution environment.
func (o AwsLambdaFunctionOutput) Environment() AwsLambdaFunctionEnvironmentPtrOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) AwsLambdaFunctionEnvironmentPtrOutput { return v.Environment }).(AwsLambdaFunctionEnvironmentPtrOutput)
}

// The Ephemeral Storage size, in MB, that your lambda function is allowed to use at runtime. Defaults to `512`.
func (o AwsLambdaFunctionOutput) EphemeralStorage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.IntPtrOutput { return v.EphemeralStorage }).(pulumi.IntPtrOutput)
}

// The full name of the lambda function.
func (o AwsLambdaFunctionOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

// The [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) of the lambda function in your code.
func (o AwsLambdaFunctionOutput) Handler() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringOutput { return v.Handler }).(pulumi.StringOutput)
}

// Configuration for the Lambda function's container image
func (o AwsLambdaFunctionOutput) ImageConfig() AwsLambdaFunctionImageConfigPtrOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) AwsLambdaFunctionImageConfigPtrOutput { return v.ImageConfig }).(AwsLambdaFunctionImageConfigPtrOutput)
}

// The docker image that holds the lambda function's code. Used (and required) only when `packageType` is `"Image"`. The image must be in a private ECR.
func (o AwsLambdaFunctionOutput) ImageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringPtrOutput { return v.ImageUri }).(pulumi.StringPtrOutput)
}

// A timestamp string of lambda's last modification time.
func (o AwsLambdaFunctionOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringOutput { return v.LastModified }).(pulumi.StringOutput)
}

// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
func (o AwsLambdaFunctionOutput) Layers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringArrayOutput { return v.Layers }).(pulumi.StringArrayOutput)
}

// The maximum amount of memory, in MB, that your lambda function is allowed to use at runtime. Defaults to `128`.
func (o AwsLambdaFunctionOutput) MemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.IntPtrOutput { return v.MemorySize }).(pulumi.IntPtrOutput)
}

// The short name of the lambda function cluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
func (o AwsLambdaFunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of lambda package.  Must be `Zip` or `Image`.  Defaults to `Zip`.
func (o AwsLambdaFunctionOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringOutput { return v.PackageType }).(pulumi.StringOutput)
}

// The IAM role for the lambda function's execution.
func (o AwsLambdaFunctionOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) that the lambda function needs.
func (o AwsLambdaFunctionOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringOutput { return v.Runtime }).(pulumi.StringOutput)
}

// The S3 bucket where the lambda function package is located. Used (and required) only when `packageType` is `"Zip"`.
func (o AwsLambdaFunctionOutput) S3Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringPtrOutput { return v.S3Bucket }).(pulumi.StringPtrOutput)
}

// The S3 key in the S3 bucket where the lambda function package is located. Used (and required) only when `packageType` is `"Zip"`.
func (o AwsLambdaFunctionOutput) S3Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringPtrOutput { return v.S3Key }).(pulumi.StringPtrOutput)
}

// The SHA 256 hash of the lambda functions's source code package.
func (o AwsLambdaFunctionOutput) SourceCodeHash() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringOutput { return v.SourceCodeHash }).(pulumi.StringOutput)
}

// The size in bytes of the lambda functions's source code package.
func (o AwsLambdaFunctionOutput) SourceCodeSize() pulumi.IntOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.IntOutput { return v.SourceCodeSize }).(pulumi.IntOutput)
}

// Map of tags to assign to the object.
func (o AwsLambdaFunctionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The GUID of the tenant that the lambda function will be created in.
func (o AwsLambdaFunctionOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The execution time limit for the lambda function. Defaults to `3`.
func (o AwsLambdaFunctionOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

func (o AwsLambdaFunctionOutput) TracingConfig() AwsLambdaFunctionTracingConfigOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) AwsLambdaFunctionTracingConfigOutput { return v.TracingConfig }).(AwsLambdaFunctionTracingConfigOutput)
}

// The version of the lambda function.
func (o AwsLambdaFunctionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaFunction) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type AwsLambdaFunctionArrayOutput struct{ *pulumi.OutputState }

func (AwsLambdaFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsLambdaFunction)(nil)).Elem()
}

func (o AwsLambdaFunctionArrayOutput) ToAwsLambdaFunctionArrayOutput() AwsLambdaFunctionArrayOutput {
	return o
}

func (o AwsLambdaFunctionArrayOutput) ToAwsLambdaFunctionArrayOutputWithContext(ctx context.Context) AwsLambdaFunctionArrayOutput {
	return o
}

func (o AwsLambdaFunctionArrayOutput) Index(i pulumi.IntInput) AwsLambdaFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsLambdaFunction {
		return vs[0].([]*AwsLambdaFunction)[vs[1].(int)]
	}).(AwsLambdaFunctionOutput)
}

type AwsLambdaFunctionMapOutput struct{ *pulumi.OutputState }

func (AwsLambdaFunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsLambdaFunction)(nil)).Elem()
}

func (o AwsLambdaFunctionMapOutput) ToAwsLambdaFunctionMapOutput() AwsLambdaFunctionMapOutput {
	return o
}

func (o AwsLambdaFunctionMapOutput) ToAwsLambdaFunctionMapOutputWithContext(ctx context.Context) AwsLambdaFunctionMapOutput {
	return o
}

func (o AwsLambdaFunctionMapOutput) MapIndex(k pulumi.StringInput) AwsLambdaFunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsLambdaFunction {
		return vs[0].(map[string]*AwsLambdaFunction)[vs[1].(string)]
	}).(AwsLambdaFunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLambdaFunctionInput)(nil)).Elem(), &AwsLambdaFunction{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLambdaFunctionArrayInput)(nil)).Elem(), AwsLambdaFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLambdaFunctionMapInput)(nil)).Elem(), AwsLambdaFunctionMap{})
	pulumi.RegisterOutputType(AwsLambdaFunctionOutput{})
	pulumi.RegisterOutputType(AwsLambdaFunctionArrayOutput{})
	pulumi.RegisterOutputType(AwsLambdaFunctionMapOutput{})
}
