// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupEcsTaskDefinition(ctx *pulumi.Context, args *LookupEcsTaskDefinitionArgs, opts ...pulumi.InvokeOption) (*LookupEcsTaskDefinitionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEcsTaskDefinitionResult
	err := ctx.Invoke("duplocloud:index/getEcsTaskDefinition:getEcsTaskDefinition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEcsTaskDefinition.
type LookupEcsTaskDefinitionArgs struct {
	// The ARN of the task definition.
	Arn string `pulumi:"arn"`
	// The GUID of the tenant that the task definition will be created in.
	TenantId string `pulumi:"tenantId"`
}

// A collection of values returned by getEcsTaskDefinition.
type LookupEcsTaskDefinitionResult struct {
	// The ARN of the task definition.
	Arn                  string `pulumi:"arn"`
	ContainerDefinitions string `pulumi:"containerDefinitions"`
	// container_definitions updates in backend
	ContainerDefinitionsUpdates string `pulumi:"containerDefinitionsUpdates"`
	Cpu                         string `pulumi:"cpu"`
	ExecutionRoleArn            string `pulumi:"executionRoleArn"`
	// The name of the task definition to create.
	Family string `pulumi:"family"`
	// The name of the task definition to create.
	FullFamilyName string `pulumi:"fullFamilyName"`
	// The provider-assigned unique ID for this managed resource.
	Id                    string                                     `pulumi:"id"`
	InferenceAccelerators []GetEcsTaskDefinitionInferenceAccelerator `pulumi:"inferenceAccelerators"`
	IpcMode               string                                     `pulumi:"ipcMode"`
	Memory                string                                     `pulumi:"memory"`
	NetworkMode           string                                     `pulumi:"networkMode"`
	PidMode               string                                     `pulumi:"pidMode"`
	PlacementConstraints  []GetEcsTaskDefinitionPlacementConstraint  `pulumi:"placementConstraints"`
	PreventTfDestroy      bool                                       `pulumi:"preventTfDestroy"`
	ProxyConfigurations   []GetEcsTaskDefinitionProxyConfiguration   `pulumi:"proxyConfigurations"`
	RequiresAttributes    []GetEcsTaskDefinitionRequiresAttribute    `pulumi:"requiresAttributes"`
	// Requires compatibilities for running jobs. Valid values are [FARGATE]
	RequiresCompatibilities []string `pulumi:"requiresCompatibilities"`
	// The current revision of the task definition.
	Revision int `pulumi:"revision"`
	// Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.
	RuntimePlatforms []GetEcsTaskDefinitionRuntimePlatform `pulumi:"runtimePlatforms"`
	// The status of the task definition.
	Status      string                    `pulumi:"status"`
	Tags        []GetEcsTaskDefinitionTag `pulumi:"tags"`
	TaskRoleArn string                    `pulumi:"taskRoleArn"`
	// The GUID of the tenant that the task definition will be created in.
	TenantId string `pulumi:"tenantId"`
	Volumes  string `pulumi:"volumes"`
}

func LookupEcsTaskDefinitionOutput(ctx *pulumi.Context, args LookupEcsTaskDefinitionOutputArgs, opts ...pulumi.InvokeOption) LookupEcsTaskDefinitionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEcsTaskDefinitionResultOutput, error) {
			args := v.(LookupEcsTaskDefinitionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("duplocloud:index/getEcsTaskDefinition:getEcsTaskDefinition", args, LookupEcsTaskDefinitionResultOutput{}, options).(LookupEcsTaskDefinitionResultOutput), nil
		}).(LookupEcsTaskDefinitionResultOutput)
}

// A collection of arguments for invoking getEcsTaskDefinition.
type LookupEcsTaskDefinitionOutputArgs struct {
	// The ARN of the task definition.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The GUID of the tenant that the task definition will be created in.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (LookupEcsTaskDefinitionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEcsTaskDefinitionArgs)(nil)).Elem()
}

// A collection of values returned by getEcsTaskDefinition.
type LookupEcsTaskDefinitionResultOutput struct{ *pulumi.OutputState }

func (LookupEcsTaskDefinitionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEcsTaskDefinitionResult)(nil)).Elem()
}

func (o LookupEcsTaskDefinitionResultOutput) ToLookupEcsTaskDefinitionResultOutput() LookupEcsTaskDefinitionResultOutput {
	return o
}

func (o LookupEcsTaskDefinitionResultOutput) ToLookupEcsTaskDefinitionResultOutputWithContext(ctx context.Context) LookupEcsTaskDefinitionResultOutput {
	return o
}

// The ARN of the task definition.
func (o LookupEcsTaskDefinitionResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.Arn }).(pulumi.StringOutput)
}

func (o LookupEcsTaskDefinitionResultOutput) ContainerDefinitions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.ContainerDefinitions }).(pulumi.StringOutput)
}

// container_definitions updates in backend
func (o LookupEcsTaskDefinitionResultOutput) ContainerDefinitionsUpdates() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.ContainerDefinitionsUpdates }).(pulumi.StringOutput)
}

func (o LookupEcsTaskDefinitionResultOutput) Cpu() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.Cpu }).(pulumi.StringOutput)
}

func (o LookupEcsTaskDefinitionResultOutput) ExecutionRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.ExecutionRoleArn }).(pulumi.StringOutput)
}

// The name of the task definition to create.
func (o LookupEcsTaskDefinitionResultOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.Family }).(pulumi.StringOutput)
}

// The name of the task definition to create.
func (o LookupEcsTaskDefinitionResultOutput) FullFamilyName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.FullFamilyName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupEcsTaskDefinitionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupEcsTaskDefinitionResultOutput) InferenceAccelerators() GetEcsTaskDefinitionInferenceAcceleratorArrayOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) []GetEcsTaskDefinitionInferenceAccelerator {
		return v.InferenceAccelerators
	}).(GetEcsTaskDefinitionInferenceAcceleratorArrayOutput)
}

func (o LookupEcsTaskDefinitionResultOutput) IpcMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.IpcMode }).(pulumi.StringOutput)
}

func (o LookupEcsTaskDefinitionResultOutput) Memory() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.Memory }).(pulumi.StringOutput)
}

func (o LookupEcsTaskDefinitionResultOutput) NetworkMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.NetworkMode }).(pulumi.StringOutput)
}

func (o LookupEcsTaskDefinitionResultOutput) PidMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.PidMode }).(pulumi.StringOutput)
}

func (o LookupEcsTaskDefinitionResultOutput) PlacementConstraints() GetEcsTaskDefinitionPlacementConstraintArrayOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) []GetEcsTaskDefinitionPlacementConstraint {
		return v.PlacementConstraints
	}).(GetEcsTaskDefinitionPlacementConstraintArrayOutput)
}

func (o LookupEcsTaskDefinitionResultOutput) PreventTfDestroy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) bool { return v.PreventTfDestroy }).(pulumi.BoolOutput)
}

func (o LookupEcsTaskDefinitionResultOutput) ProxyConfigurations() GetEcsTaskDefinitionProxyConfigurationArrayOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) []GetEcsTaskDefinitionProxyConfiguration {
		return v.ProxyConfigurations
	}).(GetEcsTaskDefinitionProxyConfigurationArrayOutput)
}

func (o LookupEcsTaskDefinitionResultOutput) RequiresAttributes() GetEcsTaskDefinitionRequiresAttributeArrayOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) []GetEcsTaskDefinitionRequiresAttribute {
		return v.RequiresAttributes
	}).(GetEcsTaskDefinitionRequiresAttributeArrayOutput)
}

// Requires compatibilities for running jobs. Valid values are [FARGATE]
func (o LookupEcsTaskDefinitionResultOutput) RequiresCompatibilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) []string { return v.RequiresCompatibilities }).(pulumi.StringArrayOutput)
}

// The current revision of the task definition.
func (o LookupEcsTaskDefinitionResultOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) int { return v.Revision }).(pulumi.IntOutput)
}

// Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.
func (o LookupEcsTaskDefinitionResultOutput) RuntimePlatforms() GetEcsTaskDefinitionRuntimePlatformArrayOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) []GetEcsTaskDefinitionRuntimePlatform { return v.RuntimePlatforms }).(GetEcsTaskDefinitionRuntimePlatformArrayOutput)
}

// The status of the task definition.
func (o LookupEcsTaskDefinitionResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupEcsTaskDefinitionResultOutput) Tags() GetEcsTaskDefinitionTagArrayOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) []GetEcsTaskDefinitionTag { return v.Tags }).(GetEcsTaskDefinitionTagArrayOutput)
}

func (o LookupEcsTaskDefinitionResultOutput) TaskRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.TaskRoleArn }).(pulumi.StringOutput)
}

// The GUID of the tenant that the task definition will be created in.
func (o LookupEcsTaskDefinitionResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.TenantId }).(pulumi.StringOutput)
}

func (o LookupEcsTaskDefinitionResultOutput) Volumes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsTaskDefinitionResult) string { return v.Volumes }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEcsTaskDefinitionResultOutput{})
}
