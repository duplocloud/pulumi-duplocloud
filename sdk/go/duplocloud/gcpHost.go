// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The GcpHost used to manage or configure virtual machine at gcp
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewGcpHost(ctx, "host", &duplocloud.GcpHostArgs{
//				TenantId:      myapp.TenantId,
//				FriendlyName:  pulumi.String("tfnewhost"),
//				Capacity:      pulumi.String("e2-medium"),
//				Zone:          pulumi.String("us-west2-a"),
//				AgentPlatform: pulumi.Int(0),
//				Metadata: pulumi.StringMap{
//					"OsDiskSize":     pulumi.String("10"),
//					"startup_script": pulumi.String("echo \"Hello from test startup script!\" > /test.txt\n"),
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("networktag"),
//				},
//				ImageId: pulumi.String("projects/{project}/global/images/{image}"),
//				Labels: pulumi.StringMap{
//					"resource": pulumi.String("label"),
//				},
//				UserAccount:       pulumi.String("abc@xyz.com"),
//				AllocatedPublicIp: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing AWS host
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *INSTANCE_ID* is the GCP VM instance ID
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/gcpHost:GcpHost myhost v2/subscriptions/*TENANT_ID*/gcpHost/*INSTANCE_ID*
// ```
type GcpHost struct {
	pulumi.CustomResourceState

	// The number of the guest accelerator cards exposed to this instance. Defaults to `0`.
	AcceleratorCount pulumi.IntPtrOutput `pulumi:"acceleratorCount"`
	// The accelerator type resource to expose to this instance
	AcceleratorType pulumi.StringOutput `pulumi:"acceleratorType"`
	// The numeric ID of the container agent pool that this host is added to. Defaults to `0`.
	AgentPlatform pulumi.IntPtrOutput `pulumi:"agentPlatform"`
	// Whether or not to allocate a public IP. Defaults to `false`.
	AllocatedPublicIp pulumi.BoolPtrOutput `pulumi:"allocatedPublicIp"`
	Architecture      pulumi.StringOutput  `pulumi:"architecture"`
	// The machine type to create
	Capacity pulumi.StringOutput `pulumi:"capacity"`
	// The name of the vm.
	FriendlyName pulumi.StringOutput `pulumi:"friendlyName"`
	// The full name of the vm.
	Fullname     pulumi.StringOutput `pulumi:"fullname"`
	IdentityRole pulumi.StringOutput `pulumi:"identityRole"`
	// The image from which to initialize this vm
	ImageId    pulumi.StringOutput `pulumi:"imageId"`
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// A set of key/value label pairs assigned to the vm
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Configuration, metadata used when creating the host.\n\n*Note: To configure OS disk size OsDiskSize can be specified as Key and its size as value, size value should be atleast 10, Similarly to added start up script one can pass the key as startupScript and startup command as its value*
	Metadata         pulumi.StringMapOutput `pulumi:"metadata"`
	PrivateIpAddress pulumi.StringOutput    `pulumi:"privateIpAddress"`
	PublicIpAddress  pulumi.StringOutput    `pulumi:"publicIpAddress"`
	SelfLink         pulumi.StringOutput    `pulumi:"selfLink"`
	Status           pulumi.StringOutput    `pulumi:"status"`
	// List of network tags that can be added to the vm
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The GUID of the tenant that the host will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The email id of the user.
	UserAccount pulumi.StringOutput `pulumi:"userAccount"`
	// Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrOutput `pulumi:"waitUntilReady"`
	// The zone that the machine should be created in
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewGcpHost registers a new resource with the given unique name, arguments, and options.
func NewGcpHost(ctx *pulumi.Context,
	name string, args *GcpHostArgs, opts ...pulumi.ResourceOption) (*GcpHost, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Capacity == nil {
		return nil, errors.New("invalid value for required argument 'Capacity'")
	}
	if args.FriendlyName == nil {
		return nil, errors.New("invalid value for required argument 'FriendlyName'")
	}
	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.UserAccount == nil {
		return nil, errors.New("invalid value for required argument 'UserAccount'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GcpHost
	err := ctx.RegisterResource("duplocloud:index/gcpHost:GcpHost", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcpHost gets an existing GcpHost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcpHost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpHostState, opts ...pulumi.ResourceOption) (*GcpHost, error) {
	var resource GcpHost
	err := ctx.ReadResource("duplocloud:index/gcpHost:GcpHost", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcpHost resources.
type gcpHostState struct {
	// The number of the guest accelerator cards exposed to this instance. Defaults to `0`.
	AcceleratorCount *int `pulumi:"acceleratorCount"`
	// The accelerator type resource to expose to this instance
	AcceleratorType *string `pulumi:"acceleratorType"`
	// The numeric ID of the container agent pool that this host is added to. Defaults to `0`.
	AgentPlatform *int `pulumi:"agentPlatform"`
	// Whether or not to allocate a public IP. Defaults to `false`.
	AllocatedPublicIp *bool   `pulumi:"allocatedPublicIp"`
	Architecture      *string `pulumi:"architecture"`
	// The machine type to create
	Capacity *string `pulumi:"capacity"`
	// The name of the vm.
	FriendlyName *string `pulumi:"friendlyName"`
	// The full name of the vm.
	Fullname     *string `pulumi:"fullname"`
	IdentityRole *string `pulumi:"identityRole"`
	// The image from which to initialize this vm
	ImageId    *string `pulumi:"imageId"`
	InstanceId *string `pulumi:"instanceId"`
	// A set of key/value label pairs assigned to the vm
	Labels map[string]string `pulumi:"labels"`
	// Configuration, metadata used when creating the host.\n\n*Note: To configure OS disk size OsDiskSize can be specified as Key and its size as value, size value should be atleast 10, Similarly to added start up script one can pass the key as startupScript and startup command as its value*
	Metadata         map[string]string `pulumi:"metadata"`
	PrivateIpAddress *string           `pulumi:"privateIpAddress"`
	PublicIpAddress  *string           `pulumi:"publicIpAddress"`
	SelfLink         *string           `pulumi:"selfLink"`
	Status           *string           `pulumi:"status"`
	// List of network tags that can be added to the vm
	Tags []string `pulumi:"tags"`
	// The GUID of the tenant that the host will be created in.
	TenantId *string `pulumi:"tenantId"`
	// The email id of the user.
	UserAccount *string `pulumi:"userAccount"`
	// Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
	// The zone that the machine should be created in
	Zone *string `pulumi:"zone"`
}

type GcpHostState struct {
	// The number of the guest accelerator cards exposed to this instance. Defaults to `0`.
	AcceleratorCount pulumi.IntPtrInput
	// The accelerator type resource to expose to this instance
	AcceleratorType pulumi.StringPtrInput
	// The numeric ID of the container agent pool that this host is added to. Defaults to `0`.
	AgentPlatform pulumi.IntPtrInput
	// Whether or not to allocate a public IP. Defaults to `false`.
	AllocatedPublicIp pulumi.BoolPtrInput
	Architecture      pulumi.StringPtrInput
	// The machine type to create
	Capacity pulumi.StringPtrInput
	// The name of the vm.
	FriendlyName pulumi.StringPtrInput
	// The full name of the vm.
	Fullname     pulumi.StringPtrInput
	IdentityRole pulumi.StringPtrInput
	// The image from which to initialize this vm
	ImageId    pulumi.StringPtrInput
	InstanceId pulumi.StringPtrInput
	// A set of key/value label pairs assigned to the vm
	Labels pulumi.StringMapInput
	// Configuration, metadata used when creating the host.\n\n*Note: To configure OS disk size OsDiskSize can be specified as Key and its size as value, size value should be atleast 10, Similarly to added start up script one can pass the key as startupScript and startup command as its value*
	Metadata         pulumi.StringMapInput
	PrivateIpAddress pulumi.StringPtrInput
	PublicIpAddress  pulumi.StringPtrInput
	SelfLink         pulumi.StringPtrInput
	Status           pulumi.StringPtrInput
	// List of network tags that can be added to the vm
	Tags pulumi.StringArrayInput
	// The GUID of the tenant that the host will be created in.
	TenantId pulumi.StringPtrInput
	// The email id of the user.
	UserAccount pulumi.StringPtrInput
	// Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
	// The zone that the machine should be created in
	Zone pulumi.StringPtrInput
}

func (GcpHostState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpHostState)(nil)).Elem()
}

type gcpHostArgs struct {
	// The number of the guest accelerator cards exposed to this instance. Defaults to `0`.
	AcceleratorCount *int `pulumi:"acceleratorCount"`
	// The accelerator type resource to expose to this instance
	AcceleratorType *string `pulumi:"acceleratorType"`
	// The numeric ID of the container agent pool that this host is added to. Defaults to `0`.
	AgentPlatform *int `pulumi:"agentPlatform"`
	// Whether or not to allocate a public IP. Defaults to `false`.
	AllocatedPublicIp *bool `pulumi:"allocatedPublicIp"`
	// The machine type to create
	Capacity string `pulumi:"capacity"`
	// The name of the vm.
	FriendlyName string `pulumi:"friendlyName"`
	// The image from which to initialize this vm
	ImageId string `pulumi:"imageId"`
	// A set of key/value label pairs assigned to the vm
	Labels map[string]string `pulumi:"labels"`
	// Configuration, metadata used when creating the host.\n\n*Note: To configure OS disk size OsDiskSize can be specified as Key and its size as value, size value should be atleast 10, Similarly to added start up script one can pass the key as startupScript and startup command as its value*
	Metadata map[string]string `pulumi:"metadata"`
	// List of network tags that can be added to the vm
	Tags []string `pulumi:"tags"`
	// The GUID of the tenant that the host will be created in.
	TenantId string `pulumi:"tenantId"`
	// The email id of the user.
	UserAccount string `pulumi:"userAccount"`
	// Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
	// The zone that the machine should be created in
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a GcpHost resource.
type GcpHostArgs struct {
	// The number of the guest accelerator cards exposed to this instance. Defaults to `0`.
	AcceleratorCount pulumi.IntPtrInput
	// The accelerator type resource to expose to this instance
	AcceleratorType pulumi.StringPtrInput
	// The numeric ID of the container agent pool that this host is added to. Defaults to `0`.
	AgentPlatform pulumi.IntPtrInput
	// Whether or not to allocate a public IP. Defaults to `false`.
	AllocatedPublicIp pulumi.BoolPtrInput
	// The machine type to create
	Capacity pulumi.StringInput
	// The name of the vm.
	FriendlyName pulumi.StringInput
	// The image from which to initialize this vm
	ImageId pulumi.StringInput
	// A set of key/value label pairs assigned to the vm
	Labels pulumi.StringMapInput
	// Configuration, metadata used when creating the host.\n\n*Note: To configure OS disk size OsDiskSize can be specified as Key and its size as value, size value should be atleast 10, Similarly to added start up script one can pass the key as startupScript and startup command as its value*
	Metadata pulumi.StringMapInput
	// List of network tags that can be added to the vm
	Tags pulumi.StringArrayInput
	// The GUID of the tenant that the host will be created in.
	TenantId pulumi.StringInput
	// The email id of the user.
	UserAccount pulumi.StringInput
	// Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
	// The zone that the machine should be created in
	Zone pulumi.StringInput
}

func (GcpHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpHostArgs)(nil)).Elem()
}

type GcpHostInput interface {
	pulumi.Input

	ToGcpHostOutput() GcpHostOutput
	ToGcpHostOutputWithContext(ctx context.Context) GcpHostOutput
}

func (*GcpHost) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpHost)(nil)).Elem()
}

func (i *GcpHost) ToGcpHostOutput() GcpHostOutput {
	return i.ToGcpHostOutputWithContext(context.Background())
}

func (i *GcpHost) ToGcpHostOutputWithContext(ctx context.Context) GcpHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpHostOutput)
}

// GcpHostArrayInput is an input type that accepts GcpHostArray and GcpHostArrayOutput values.
// You can construct a concrete instance of `GcpHostArrayInput` via:
//
//	GcpHostArray{ GcpHostArgs{...} }
type GcpHostArrayInput interface {
	pulumi.Input

	ToGcpHostArrayOutput() GcpHostArrayOutput
	ToGcpHostArrayOutputWithContext(context.Context) GcpHostArrayOutput
}

type GcpHostArray []GcpHostInput

func (GcpHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpHost)(nil)).Elem()
}

func (i GcpHostArray) ToGcpHostArrayOutput() GcpHostArrayOutput {
	return i.ToGcpHostArrayOutputWithContext(context.Background())
}

func (i GcpHostArray) ToGcpHostArrayOutputWithContext(ctx context.Context) GcpHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpHostArrayOutput)
}

// GcpHostMapInput is an input type that accepts GcpHostMap and GcpHostMapOutput values.
// You can construct a concrete instance of `GcpHostMapInput` via:
//
//	GcpHostMap{ "key": GcpHostArgs{...} }
type GcpHostMapInput interface {
	pulumi.Input

	ToGcpHostMapOutput() GcpHostMapOutput
	ToGcpHostMapOutputWithContext(context.Context) GcpHostMapOutput
}

type GcpHostMap map[string]GcpHostInput

func (GcpHostMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpHost)(nil)).Elem()
}

func (i GcpHostMap) ToGcpHostMapOutput() GcpHostMapOutput {
	return i.ToGcpHostMapOutputWithContext(context.Background())
}

func (i GcpHostMap) ToGcpHostMapOutputWithContext(ctx context.Context) GcpHostMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpHostMapOutput)
}

type GcpHostOutput struct{ *pulumi.OutputState }

func (GcpHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpHost)(nil)).Elem()
}

func (o GcpHostOutput) ToGcpHostOutput() GcpHostOutput {
	return o
}

func (o GcpHostOutput) ToGcpHostOutputWithContext(ctx context.Context) GcpHostOutput {
	return o
}

// The number of the guest accelerator cards exposed to this instance. Defaults to `0`.
func (o GcpHostOutput) AcceleratorCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.IntPtrOutput { return v.AcceleratorCount }).(pulumi.IntPtrOutput)
}

// The accelerator type resource to expose to this instance
func (o GcpHostOutput) AcceleratorType() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringOutput { return v.AcceleratorType }).(pulumi.StringOutput)
}

// The numeric ID of the container agent pool that this host is added to. Defaults to `0`.
func (o GcpHostOutput) AgentPlatform() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.IntPtrOutput { return v.AgentPlatform }).(pulumi.IntPtrOutput)
}

// Whether or not to allocate a public IP. Defaults to `false`.
func (o GcpHostOutput) AllocatedPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.BoolPtrOutput { return v.AllocatedPublicIp }).(pulumi.BoolPtrOutput)
}

func (o GcpHostOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringOutput { return v.Architecture }).(pulumi.StringOutput)
}

// The machine type to create
func (o GcpHostOutput) Capacity() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringOutput { return v.Capacity }).(pulumi.StringOutput)
}

// The name of the vm.
func (o GcpHostOutput) FriendlyName() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringOutput { return v.FriendlyName }).(pulumi.StringOutput)
}

// The full name of the vm.
func (o GcpHostOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

func (o GcpHostOutput) IdentityRole() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringOutput { return v.IdentityRole }).(pulumi.StringOutput)
}

// The image from which to initialize this vm
func (o GcpHostOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

func (o GcpHostOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// A set of key/value label pairs assigned to the vm
func (o GcpHostOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Configuration, metadata used when creating the host.\n\n*Note: To configure OS disk size OsDiskSize can be specified as Key and its size as value, size value should be atleast 10, Similarly to added start up script one can pass the key as startupScript and startup command as its value*
func (o GcpHostOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o GcpHostOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringOutput { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

func (o GcpHostOutput) PublicIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringOutput { return v.PublicIpAddress }).(pulumi.StringOutput)
}

func (o GcpHostOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

func (o GcpHostOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// List of network tags that can be added to the vm
func (o GcpHostOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The GUID of the tenant that the host will be created in.
func (o GcpHostOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The email id of the user.
func (o GcpHostOutput) UserAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringOutput { return v.UserAccount }).(pulumi.StringOutput)
}

// Defaults to `true`.
func (o GcpHostOutput) WaitUntilReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.BoolPtrOutput { return v.WaitUntilReady }).(pulumi.BoolPtrOutput)
}

// The zone that the machine should be created in
func (o GcpHostOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpHost) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type GcpHostArrayOutput struct{ *pulumi.OutputState }

func (GcpHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpHost)(nil)).Elem()
}

func (o GcpHostArrayOutput) ToGcpHostArrayOutput() GcpHostArrayOutput {
	return o
}

func (o GcpHostArrayOutput) ToGcpHostArrayOutputWithContext(ctx context.Context) GcpHostArrayOutput {
	return o
}

func (o GcpHostArrayOutput) Index(i pulumi.IntInput) GcpHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GcpHost {
		return vs[0].([]*GcpHost)[vs[1].(int)]
	}).(GcpHostOutput)
}

type GcpHostMapOutput struct{ *pulumi.OutputState }

func (GcpHostMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpHost)(nil)).Elem()
}

func (o GcpHostMapOutput) ToGcpHostMapOutput() GcpHostMapOutput {
	return o
}

func (o GcpHostMapOutput) ToGcpHostMapOutputWithContext(ctx context.Context) GcpHostMapOutput {
	return o
}

func (o GcpHostMapOutput) MapIndex(k pulumi.StringInput) GcpHostOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GcpHost {
		return vs[0].(map[string]*GcpHost)[vs[1].(string)]
	}).(GcpHostOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcpHostInput)(nil)).Elem(), &GcpHost{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpHostArrayInput)(nil)).Elem(), GcpHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpHostMapInput)(nil)).Elem(), GcpHostMap{})
	pulumi.RegisterOutputType(GcpHostOutput{})
	pulumi.RegisterOutputType(GcpHostArrayOutput{})
	pulumi.RegisterOutputType(GcpHostMapOutput{})
}
