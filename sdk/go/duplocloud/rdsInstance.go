// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Provision an RDS instance using the PostgreSQL engine named dev-db in DuploCloud platform.
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi-random/sdk/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Before creating an RDS instance, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.
//			infra, err := duplocloud.NewInfrastructure(ctx, "infra", &duplocloud.InfrastructureArgs{
//				InfraName:       pulumi.String("dev"),
//				Cloud:           pulumi.Int(0),
//				Region:          pulumi.String("us-east-1"),
//				EnableK8Cluster: pulumi.Bool(false),
//				AddressPrefix:   pulumi.String("10.13.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.
//			tenant, err := duplocloud.NewTenant(ctx, "tenant", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("dev"),
//				PlanId:      infra.InfraName,
//			})
//			if err != nil {
//				return err
//			}
//			// Generate a random password for the RDS instance.
//			password, err := random.NewPassword(ctx, "password", &random.PasswordArgs{
//				Length:  16,
//				Special: false,
//			})
//			if err != nil {
//				return err
//			}
//			// Create an RDS instance.
//			_, err = duplocloud.NewRdsInstance(ctx, "dev-db", &duplocloud.RdsInstanceArgs{
//				TenantId:              tenant.TenantId,
//				Name:                  pulumi.String("dev-db"),
//				Engine:                pulumi.Int(1),
//				EngineVersion:         pulumi.String("15.2"),
//				Size:                  pulumi.String("db.t3.medium"),
//				MasterUsername:        pulumi.String("postgres"),
//				MasterPassword:        password.Result,
//				EncryptStorage:        pulumi.Bool(true),
//				BackupRetentionPeriod: pulumi.Int(7),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Provision an RDS instance using the PostgreSQL engine named dev-db with deletion protection enabled and multi-az enabled.
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi-random/sdk/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Ensure the 'dev' tenant is already created before creating the RDS instance.
//			tenant, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("dev"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Generate a random password for the RDS instance.
//			mypassword, err := random.NewPassword(ctx, "mypassword", &random.PasswordArgs{
//				Length:  16,
//				Special: false,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewRdsInstance(ctx, "dev-db", &duplocloud.RdsInstanceArgs{
//				TenantId:              pulumi.String(tenant.Id),
//				Name:                  pulumi.String("dev-db"),
//				Engine:                pulumi.Int(1),
//				EngineVersion:         pulumi.String("15.2"),
//				Size:                  pulumi.String("db.t3.medium"),
//				DeletionProtection:    pulumi.Bool(true),
//				MultiAz:               pulumi.Bool(true),
//				MasterUsername:        pulumi.String("postgres"),
//				MasterPassword:        mypassword.Result,
//				EncryptStorage:        pulumi.Bool(true),
//				BackupRetentionPeriod: pulumi.Int(7),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create an RDS instance using the Aurora-PostgreSQL engine named aurora-postgres-db with instance class db.m5.large.
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi-random/sdk/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Ensure the 'dev' tenant is already created before creating the RDS instance.
//			tenant, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("dev"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Generate a random password for the RDS instance.
//			mypassword, err := random.NewPassword(ctx, "mypassword", &random.PasswordArgs{
//				Length:  16,
//				Special: false,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewRdsInstance(ctx, "aurora-postgres-db", &duplocloud.RdsInstanceArgs{
//				TenantId:              pulumi.String(tenant.Id),
//				Name:                  pulumi.String("aurora-postgres-db"),
//				Engine:                pulumi.Int(9),
//				EngineVersion:         pulumi.String("15.2"),
//				Size:                  pulumi.String("db.m5.large"),
//				MasterUsername:        pulumi.String("postgres"),
//				MasterPassword:        mypassword.Result,
//				EncryptStorage:        pulumi.Bool(true),
//				BackupRetentionPeriod: pulumi.Int(7),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create an Aurora serverless RDS instance using the PostgreSQL engine named aurora-postgres with engine version 15.5, minimum capacity of 0.5, maximum capacity of 2, with deletion protection enabled and store the DB credentials in AWS secrets manager. Also create a read replica for this database.
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi-random/sdk/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Ensure the 'dev' tenant is already created before creating the RDS instance.
//			tenant, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("dev"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Generate a random password for the RDS instance.
//			mypassword, err := random.NewPassword(ctx, "mypassword", &random.PasswordArgs{
//				Length:  16,
//				Special: false,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewRdsInstance(ctx, "aurora-serverless", &duplocloud.RdsInstanceArgs{
//				TenantId:              pulumi.String(tenant.Id),
//				Name:                  pulumi.String("aurora-postgres"),
//				Engine:                pulumi.Int(9),
//				EngineVersion:         pulumi.String("15.5"),
//				Size:                  pulumi.String("db.serverless"),
//				MasterUsername:        pulumi.String("postgres"),
//				MasterPassword:        mypassword.Result,
//				EncryptStorage:        pulumi.Bool(true),
//				BackupRetentionPeriod: pulumi.Int(7),
//				V2ScalingConfiguration: &duplocloud.RdsInstanceV2ScalingConfigurationArgs{
//					MinCapacity: pulumi.Float64(0.5),
//					MaxCapacity: pulumi.Float64(2),
//				},
//				StoreDetailsInSecretManager: pulumi.Bool(true),
//				DeletionProtection:          pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewRdsReadReplica(ctx, "read-replica", &duplocloud.RdsReadReplicaArgs{
//				TenantId:          pulumi.String(tenant.Id),
//				Name:              pulumi.String("aurora-postgres-read-replica"),
//				Size:              pulumi.String("db.serverless"),
//				ClusterIdentifier: aurora_serverless.ClusterIdentifier,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				aurora_serverless,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Provision an RDS instance using the MySQL engine named dev-db, with username mysqlUser1 in DuploCloud platform.
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi-random/sdk/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Ensure the 'dev' tenant is already created before creating the RDS instance.
//			tenant, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("dev"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Generate a random password for the RDS instance.
//			mypassword, err := random.NewPassword(ctx, "mypassword", &random.PasswordArgs{
//				Length:  16,
//				Special: false,
//			})
//			if err != nil {
//				return err
//			}
//			// Create an RDS instance.
//			_, err = duplocloud.NewRdsInstance(ctx, "dev-db", &duplocloud.RdsInstanceArgs{
//				TenantId:              pulumi.String(tenant.Id),
//				Name:                  pulumi.String("dev-db"),
//				Engine:                pulumi.Int(0),
//				EngineVersion:         pulumi.String("8.0.32"),
//				Size:                  pulumi.String("db.t3.medium"),
//				MasterUsername:        pulumi.String("mysql_user1"),
//				MasterPassword:        mypassword.Result,
//				EncryptStorage:        pulumi.Bool(true),
//				BackupRetentionPeriod: pulumi.Int(7),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Provision an RDS instance using the MySQL engine named dev-db with engine version 5.7, allocated storage 50 GB and enable IAM auth and logging for this DB.
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi-random/sdk/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Ensure the 'dev' tenant is already created before creating the RDS instance.
//			tenant, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("dev"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Generate a random password for the RDS instance.
//			mypassword, err := random.NewPassword(ctx, "mypassword", &random.PasswordArgs{
//				Length:  16,
//				Special: false,
//			})
//			if err != nil {
//				return err
//			}
//			// Create an RDS instance.
//			_, err = duplocloud.NewRdsInstance(ctx, "dev-db", &duplocloud.RdsInstanceArgs{
//				TenantId:              pulumi.String(tenant.Id),
//				Name:                  pulumi.String("dev-db"),
//				Engine:                pulumi.Int(0),
//				EngineVersion:         pulumi.String("5.7.44"),
//				Size:                  pulumi.String("db.t3.medium"),
//				MasterUsername:        pulumi.String("mysql_user1"),
//				MasterPassword:        mypassword.Result,
//				EncryptStorage:        pulumi.Bool(true),
//				BackupRetentionPeriod: pulumi.Int(7),
//				AllocatedStorage:      pulumi.Int(50),
//				EnableIamAuth:         pulumi.Bool(true),
//				EnableLogging:         pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create an RDS instance using the Aurora MySQL engine named mysql-db with engine version 5.7, allocated storage 100 GB and storage type io1 with number of iops 6000. It should skip the final snapshot and store the credentials in secrets manager.
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi-random/sdk/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Ensure the 'dev' tenant is already created before creating the RDS instance.
//			tenant, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("dev"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Generate a random password for the RDS instance.
//			mypassword, err := random.NewPassword(ctx, "mypassword", &random.PasswordArgs{
//				Length:  16,
//				Special: false,
//			})
//			if err != nil {
//				return err
//			}
//			// Create an RDS instance.
//			_, err = duplocloud.NewRdsInstance(ctx, "mysql-db", &duplocloud.RdsInstanceArgs{
//				TenantId:                    pulumi.String(tenant.Id),
//				Name:                        pulumi.String("mysql-db"),
//				Engine:                      pulumi.Int(8),
//				EngineVersion:               pulumi.String("5.7.mysql_aurora.2.11.6"),
//				Size:                        pulumi.String("db.t3.medium"),
//				MasterUsername:              pulumi.String("mysql_user1"),
//				MasterPassword:              mypassword.Result,
//				EncryptStorage:              pulumi.Bool(true),
//				BackupRetentionPeriod:       pulumi.Int(7),
//				AllocatedStorage:            pulumi.Int(100),
//				StorageType:                 pulumi.String("io1"),
//				Iops:                        pulumi.Int(6000),
//				SkipFinalSnapshot:           pulumi.Bool(true),
//				StoreDetailsInSecretManager: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// # Example for enabling performance insights in a RDS instance
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewRdsInstance(ctx, "mydb", &duplocloud.RdsInstanceArgs{
//				TenantId:                    pulumi.Any(tenant.Id),
//				Name:                        pulumi.String("mydb1psql"),
//				Engine:                      pulumi.Int(1),
//				EngineVersion:               pulumi.String("14.11"),
//				Size:                        pulumi.String("db.t3.micro"),
//				MasterUsername:              pulumi.String("myuser"),
//				MasterPassword:              pulumi.String("Qaazwedd#1"),
//				EncryptStorage:              pulumi.Bool(true),
//				StoreDetailsInSecretManager: pulumi.Bool(true),
//				EnhancedMonitoring:          pulumi.Int(0),
//				StorageType:                 pulumi.String("gp2"),
//				PerformanceInsights: &duplocloud.RdsInstancePerformanceInsightsArgs{
//					Enabled:         pulumi.Bool(true),
//					RetentionPeriod: pulumi.Int(7),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// # Example for enabling performance insights in a RDS cluster
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewRdsInstance(ctx, "mydb", &duplocloud.RdsInstanceArgs{
//				TenantId:                    pulumi.Any(tenant.Id),
//				Name:                        pulumi.String("clust"),
//				Engine:                      pulumi.Int(8),
//				EngineVersion:               pulumi.String("8.0.mysql_aurora.3.07.1"),
//				Size:                        pulumi.String("db.r5.large"),
//				MasterUsername:              pulumi.String("myuser"),
//				MasterPassword:              pulumi.String("Qaazwedd#1"),
//				EncryptStorage:              pulumi.Bool(true),
//				StoreDetailsInSecretManager: pulumi.Bool(true),
//				EnhancedMonitoring:          pulumi.Int(0),
//				PerformanceInsights: &duplocloud.RdsInstancePerformanceInsightsArgs{
//					Enabled:         pulumi.Bool(true),
//					RetentionPeriod: pulumi.Int(7),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// # Example for enabling performance insights in a Document DB
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewRdsInstance(ctx, "mydb", &duplocloud.RdsInstanceArgs{
//				TenantId:                    pulumi.Any(tenant.Id),
//				Name:                        pulumi.String("doc"),
//				Engine:                      pulumi.Int(13),
//				EngineVersion:               pulumi.String("3.6.0"),
//				Size:                        pulumi.String("db.t3.medium"),
//				MasterUsername:              pulumi.String("myuser"),
//				MasterPassword:              pulumi.String("Qaazwedd#1"),
//				EncryptStorage:              pulumi.Bool(true),
//				StoreDetailsInSecretManager: pulumi.Bool(true),
//				EnhancedMonitoring:          pulumi.Int(0),
//				PerformanceInsights: &duplocloud.RdsInstancePerformanceInsightsArgs{
//					Enabled:         pulumi.Bool(true),
//					RetentionPeriod: pulumi.Int(7),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Example for creating db using snapshot
//			_, err := duplocloud.NewRdsInstance(ctx, "mydb", &duplocloud.RdsInstanceArgs{
//				TenantId:      pulumi.Any(tenant.Id),
//				Name:          pulumi.String("mydbpsql"),
//				Engine:        pulumi.Int(0),
//				EngineVersion: pulumi.String("5.7.44"),
//				Size:          pulumi.String("db.t3.medium"),
//				SnapshotId:    pulumi.String("rds:duplotest-snapdb-2024-12-17-07-00"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing RDS instance
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORTNAME* is the short name of the database (without the duplo prefix)
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/rdsInstance:RdsInstance mydb v2/subscriptions/*TENANT_ID*/RDSDBInstance/*SHORTNAME*
// ```
//
// # Example to showcase use of parameter group in writer and read replica for aurora cluster instance
//
// resource "random_password" "mypassword" {
//
//	length  = 16
//
//	special = false
//
// }
//
// resource "duplocloud_rds_instance" "app" {
//
//	tenant_id      = data.duplocloud_tenant.tenant.id
//
//	name           = "writer1-sqlnew"
//
//	engine         = 8
//
//	engine_version = "5.7.mysql_aurora.2.11.5"
//
//	size           = "db.r5.large"
//
//	master_username              = "myuser"
//
//	master_password              = random_password.mypassword.result
//
//	encrypt_storage         = true
//
//	backup_retention_period = 10
//
//	db_name         =  "auroradb"
//
//	skip_final_snapshot = true
//
//	store_details_in_secret_manager = false
//
//	enhanced_monitoring = 0
//
//	availability_zone = "us-west-2b"
//
//	storage_type                    = "aurora"
//
//	cluster_parameter_group_name = "c-aurora-mysql"
//
//	parameter_group_name = "aurora-mysql-dbparam"
//
// }
//
// resource "duplocloud_rds_read_replica" "replica1" {
//
//	tenant_id          = duplocloud_rds_instance.app.tenant_id
//
//	name               = "aurora-replica-new"
//
//	size               = "db.r5.large"
//
//	cluster_identifier = duplocloud_rds_instance.app.cluster_identifier
//
//	availability_zone = "us-west-2a"
//
//	parameter_group_name = "aurora-mysql-dbparam"
//
//	engine_type=duplocloud_rds_instance.app.engine
//
// }
//
// # Example to showcase use of parameter group in writer and read replica for standalone instance
//
// resource "duplocloud_rds_instance" "mydb" {
//
//	tenant_id      = data.duplocloud_tenant.tenant.id
//
//	name           = "tf-postgresql1"
//
//	engine         = 1// PostgreSQL
//
//	engine_version = "13.11"
//
//	size           = "db.t3.medium"
//
//	master_username = "myuser"
//
//	master_password = "Qaazwedd#1"
//
//	parameter_group_name = "psql13dbparam"
//
//	encrypt_storage                 = false
//
//	store_details_in_secret_manager = false
//
//	enhanced_monitoring             = 0
//
//	storage_type                    = "gp2"
//
// }
//
// resource "duplocloud_rds_read_replica" "replica" {
//
//	tenant_id          = duplocloud_rds_instance.mydb.tenant_id
//
//	name               = "postgresql-rep1"
//
//	size               = "db.t3.medium"
//
//	cluster_identifier = duplocloud_rds_instance.mydb.cluster_identifier
//
//	#availability_zone = "us-east-1b"
//
//	performance_insights {
//
//	  enabled          = true
//
//	  retention_period = 31
//
//	}
//
//	engine_type=duplocloud_rds_instance.mydb.engine
//
//	parameter_group_name=duplocloud_rds_instance.mydb.parameter_group_name
//
// }
type RdsInstance struct {
	pulumi.CustomResourceState

	// (Required unless a `snapshotId` is provided) The allocated storage in gigabytes.
	AllocatedStorage pulumi.IntOutput `pulumi:"allocatedStorage"`
	// The ARN of the RDS instance.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Specify a valid Availability Zone for the RDS primary instance (when Multi-AZ is disabled) or for the Aurora writer
	// instance. e.g. us-west-2a
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// Specifies backup retention period between 1 and 35 day(s). Default backup retention period is 1 day.
	BackupRetentionPeriod pulumi.IntPtrOutput `pulumi:"backupRetentionPeriod"`
	// The RDS Cluster Identifier
	ClusterIdentifier pulumi.StringOutput `pulumi:"clusterIdentifier"`
	// Parameter group associated with this instance's DB Cluster.
	ClusterParameterGroupName pulumi.StringOutput `pulumi:"clusterParameterGroupName"`
	// The name of the database to create when the DB instance is created. This is not applicable for update.
	DbName pulumi.StringOutput `pulumi:"dbName"`
	// Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group.
	DbSubnetGroupName pulumi.StringOutput `pulumi:"dbSubnetGroupName"`
	// If the DB instance should have deletion protection enabled.The database can't be deleted when this value is set to
	// `true`. This setting is not applicable for document db cluster instance.
	DeletionProtection pulumi.BoolPtrOutput `pulumi:"deletionProtection"`
	// Whether or not to enable the RDS IAM authentication.
	EnableIamAuth pulumi.BoolOutput `pulumi:"enableIamAuth"`
	// Whether or not to enable the RDS instance logging. This setting is not applicable for document db cluster instance.
	EnableLogging pulumi.BoolOutput `pulumi:"enableLogging"`
	// Whether or not to encrypt the RDS instance storage.
	EncryptStorage pulumi.BoolPtrOutput `pulumi:"encryptStorage"`
	// The endpoint of the RDS instance.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The numerical index of database engine to use the for the RDS instance. Should be one of: - `0` : MySQL - `1` :
	// PostgreSQL - `2` : MsftSQL-Express - `3` : MsftSQL-Standard - `8` : Aurora-MySQL - `9` : Aurora-PostgreSQL - `10` :
	// MsftSQL-Web - `13` : DocumentDB - `14` : MariaDB - `16` : Aurora
	Engine pulumi.IntOutput `pulumi:"engine"`
	// The database engine version to use the for the RDS instance. If you don't know the available engine versions for your
	// RDS instance, you can use the [AWS
	// CLI](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-engine-versions.html) to retrieve a list.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`
	// Interval to capture metrics in real time for the operating system (OS) that your Amazon RDS DB instance runs on.
	EnhancedMonitoring pulumi.IntPtrOutput `pulumi:"enhancedMonitoring"`
	// The DNS hostname of the RDS instance.
	Host pulumi.StringOutput `pulumi:"host"`
	// The full name of the RDS instance.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// The current status of the RDS instance.
	InstanceStatus pulumi.StringOutput `pulumi:"instanceStatus"`
	// The IOPS (Input/Output Operations Per Second) value. Should be specified only if `storageType` is either io1 or gp3.
	Iops pulumi.IntOutput `pulumi:"iops"`
	// The globally unique identifier for the key.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`
	// The master password of the RDS instance.
	MasterPassword pulumi.StringPtrOutput `pulumi:"masterPassword"`
	// The master username of the RDS instance.
	MasterUsername pulumi.StringOutput `pulumi:"masterUsername"`
	// Specifies if the RDS instance is multi-AZ.
	MultiAz pulumi.BoolOutput `pulumi:"multiAz"`
	// The short name of the RDS instance. Duplo will add a prefix to the name. You can retrieve the full name from the
	// `identifier` attribute.
	Name pulumi.StringOutput `pulumi:"name"`
	// A RDS parameter group name to apply to the RDS instance.
	ParameterGroupName pulumi.StringOutput `pulumi:"parameterGroupName"`
	// Amazon RDS Performance Insights is a database performance tuning and monitoring feature that helps you quickly assess
	// the load on your database, and determine when and where to take action. Perfomance Insights get apply when enable is set
	// to true.
	PerformanceInsights RdsInstancePerformanceInsightsPtrOutput `pulumi:"performanceInsights"`
	// The listening port of the RDS instance.
	Port pulumi.IntOutput `pulumi:"port"`
	// The instance type of the RDS instance. See AWS documentation for the [available instance
	// types](https://aws.amazon.com/rds/instance-types/).
	Size pulumi.StringOutput `pulumi:"size"`
	// If the final snapshot should be taken. When set to true, the final snapshot will not be taken when the resource is
	// deleted.
	SkipFinalSnapshot pulumi.BoolPtrOutput `pulumi:"skipFinalSnapshot"`
	// A database snapshot to initialize the RDS instance from, at launch.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// Storage type to be used for RDS instance storage. |Storage Type | Performance | Throughput | Descritpion |
	// |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// | | gp2 | 3 IOPS/GB, up to 16K IOPS | Up to 250 MB/s | General-purpose databases, small to medium workloads. 'gp2'
	// provides SSD-based storage with burstable IOPS | | gp3 | 3K to 16K IOPS | Up to 1,000 MB/s | Cost-effective,
	// customizable performance for a wide range of workloads. gp3 offers a more advanced and cost-effective version of gp2.
	// You can provision IOPS and throughput independently of storage size. | | io1 | Up to 256K IOPS | Up to 1,000 MB/s |
	// Mission-critical applications with high IOPS requirements. io1 provides provisioned IOPS, meaning you can define and
	// guarantee IOPS performance levels independently of storage capacity. | | standard | Variable, low IOPS | Low and
	// unpredictable | Low-cost, infrequent access, small databases, or test environments. Magnetic storage is the oldest and
	// least performant storage option. It is mainly used for low-cost applications with low performance demands. | | aurora |
	// Automatic scaling, up to 200K IOPS | Varies | High-performance, fault-tolerant, distributed storage for Amazon Aurora
	// databases. Aurora uses a unique distributed, fault-tolerant storage system that automatically replicates data across
	// multiple Availability Zones. | | aurora-iopt1 | Provisioned IOPS, similar to io1 | Varies | Aurora databases needing
	// guaranteed, high-performance IOPS. Aurora I/O-Optimized storage offers provisioned IOPS for Aurora clusters that require
	// consistently high performance for critical workloads. |
	StorageType pulumi.StringOutput `pulumi:"storageType"`
	// Whether or not to store RDS details in the AWS secrets manager.
	StoreDetailsInSecretManager pulumi.BoolPtrOutput `pulumi:"storeDetailsInSecretManager"`
	// The GUID of the tenant that the RDS instance will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Serverless v2ScalingConfiguration min and max scalling capacity.
	V2ScalingConfiguration RdsInstanceV2ScalingConfigurationPtrOutput `pulumi:"v2ScalingConfiguration"`
}

// NewRdsInstance registers a new resource with the given unique name, arguments, and options.
func NewRdsInstance(ctx *pulumi.Context,
	name string, args *RdsInstanceArgs, opts ...pulumi.ResourceOption) (*RdsInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.MasterPassword != nil {
		args.MasterPassword = pulumi.ToSecret(args.MasterPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"masterPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsInstance
	err := ctx.RegisterResource("duplocloud:index/rdsInstance:RdsInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsInstance gets an existing RdsInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsInstanceState, opts ...pulumi.ResourceOption) (*RdsInstance, error) {
	var resource RdsInstance
	err := ctx.ReadResource("duplocloud:index/rdsInstance:RdsInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsInstance resources.
type rdsInstanceState struct {
	// (Required unless a `snapshotId` is provided) The allocated storage in gigabytes.
	AllocatedStorage *int `pulumi:"allocatedStorage"`
	// The ARN of the RDS instance.
	Arn *string `pulumi:"arn"`
	// Specify a valid Availability Zone for the RDS primary instance (when Multi-AZ is disabled) or for the Aurora writer
	// instance. e.g. us-west-2a
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Specifies backup retention period between 1 and 35 day(s). Default backup retention period is 1 day.
	BackupRetentionPeriod *int `pulumi:"backupRetentionPeriod"`
	// The RDS Cluster Identifier
	ClusterIdentifier *string `pulumi:"clusterIdentifier"`
	// Parameter group associated with this instance's DB Cluster.
	ClusterParameterGroupName *string `pulumi:"clusterParameterGroupName"`
	// The name of the database to create when the DB instance is created. This is not applicable for update.
	DbName *string `pulumi:"dbName"`
	// Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group.
	DbSubnetGroupName *string `pulumi:"dbSubnetGroupName"`
	// If the DB instance should have deletion protection enabled.The database can't be deleted when this value is set to
	// `true`. This setting is not applicable for document db cluster instance.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// Whether or not to enable the RDS IAM authentication.
	EnableIamAuth *bool `pulumi:"enableIamAuth"`
	// Whether or not to enable the RDS instance logging. This setting is not applicable for document db cluster instance.
	EnableLogging *bool `pulumi:"enableLogging"`
	// Whether or not to encrypt the RDS instance storage.
	EncryptStorage *bool `pulumi:"encryptStorage"`
	// The endpoint of the RDS instance.
	Endpoint *string `pulumi:"endpoint"`
	// The numerical index of database engine to use the for the RDS instance. Should be one of: - `0` : MySQL - `1` :
	// PostgreSQL - `2` : MsftSQL-Express - `3` : MsftSQL-Standard - `8` : Aurora-MySQL - `9` : Aurora-PostgreSQL - `10` :
	// MsftSQL-Web - `13` : DocumentDB - `14` : MariaDB - `16` : Aurora
	Engine *int `pulumi:"engine"`
	// The database engine version to use the for the RDS instance. If you don't know the available engine versions for your
	// RDS instance, you can use the [AWS
	// CLI](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-engine-versions.html) to retrieve a list.
	EngineVersion *string `pulumi:"engineVersion"`
	// Interval to capture metrics in real time for the operating system (OS) that your Amazon RDS DB instance runs on.
	EnhancedMonitoring *int `pulumi:"enhancedMonitoring"`
	// The DNS hostname of the RDS instance.
	Host *string `pulumi:"host"`
	// The full name of the RDS instance.
	Identifier *string `pulumi:"identifier"`
	// The current status of the RDS instance.
	InstanceStatus *string `pulumi:"instanceStatus"`
	// The IOPS (Input/Output Operations Per Second) value. Should be specified only if `storageType` is either io1 or gp3.
	Iops *int `pulumi:"iops"`
	// The globally unique identifier for the key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The master password of the RDS instance.
	MasterPassword *string `pulumi:"masterPassword"`
	// The master username of the RDS instance.
	MasterUsername *string `pulumi:"masterUsername"`
	// Specifies if the RDS instance is multi-AZ.
	MultiAz *bool `pulumi:"multiAz"`
	// The short name of the RDS instance. Duplo will add a prefix to the name. You can retrieve the full name from the
	// `identifier` attribute.
	Name *string `pulumi:"name"`
	// A RDS parameter group name to apply to the RDS instance.
	ParameterGroupName *string `pulumi:"parameterGroupName"`
	// Amazon RDS Performance Insights is a database performance tuning and monitoring feature that helps you quickly assess
	// the load on your database, and determine when and where to take action. Perfomance Insights get apply when enable is set
	// to true.
	PerformanceInsights *RdsInstancePerformanceInsights `pulumi:"performanceInsights"`
	// The listening port of the RDS instance.
	Port *int `pulumi:"port"`
	// The instance type of the RDS instance. See AWS documentation for the [available instance
	// types](https://aws.amazon.com/rds/instance-types/).
	Size *string `pulumi:"size"`
	// If the final snapshot should be taken. When set to true, the final snapshot will not be taken when the resource is
	// deleted.
	SkipFinalSnapshot *bool `pulumi:"skipFinalSnapshot"`
	// A database snapshot to initialize the RDS instance from, at launch.
	SnapshotId *string `pulumi:"snapshotId"`
	// Storage type to be used for RDS instance storage. |Storage Type | Performance | Throughput | Descritpion |
	// |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// | | gp2 | 3 IOPS/GB, up to 16K IOPS | Up to 250 MB/s | General-purpose databases, small to medium workloads. 'gp2'
	// provides SSD-based storage with burstable IOPS | | gp3 | 3K to 16K IOPS | Up to 1,000 MB/s | Cost-effective,
	// customizable performance for a wide range of workloads. gp3 offers a more advanced and cost-effective version of gp2.
	// You can provision IOPS and throughput independently of storage size. | | io1 | Up to 256K IOPS | Up to 1,000 MB/s |
	// Mission-critical applications with high IOPS requirements. io1 provides provisioned IOPS, meaning you can define and
	// guarantee IOPS performance levels independently of storage capacity. | | standard | Variable, low IOPS | Low and
	// unpredictable | Low-cost, infrequent access, small databases, or test environments. Magnetic storage is the oldest and
	// least performant storage option. It is mainly used for low-cost applications with low performance demands. | | aurora |
	// Automatic scaling, up to 200K IOPS | Varies | High-performance, fault-tolerant, distributed storage for Amazon Aurora
	// databases. Aurora uses a unique distributed, fault-tolerant storage system that automatically replicates data across
	// multiple Availability Zones. | | aurora-iopt1 | Provisioned IOPS, similar to io1 | Varies | Aurora databases needing
	// guaranteed, high-performance IOPS. Aurora I/O-Optimized storage offers provisioned IOPS for Aurora clusters that require
	// consistently high performance for critical workloads. |
	StorageType *string `pulumi:"storageType"`
	// Whether or not to store RDS details in the AWS secrets manager.
	StoreDetailsInSecretManager *bool `pulumi:"storeDetailsInSecretManager"`
	// The GUID of the tenant that the RDS instance will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Serverless v2ScalingConfiguration min and max scalling capacity.
	V2ScalingConfiguration *RdsInstanceV2ScalingConfiguration `pulumi:"v2ScalingConfiguration"`
}

type RdsInstanceState struct {
	// (Required unless a `snapshotId` is provided) The allocated storage in gigabytes.
	AllocatedStorage pulumi.IntPtrInput
	// The ARN of the RDS instance.
	Arn pulumi.StringPtrInput
	// Specify a valid Availability Zone for the RDS primary instance (when Multi-AZ is disabled) or for the Aurora writer
	// instance. e.g. us-west-2a
	AvailabilityZone pulumi.StringPtrInput
	// Specifies backup retention period between 1 and 35 day(s). Default backup retention period is 1 day.
	BackupRetentionPeriod pulumi.IntPtrInput
	// The RDS Cluster Identifier
	ClusterIdentifier pulumi.StringPtrInput
	// Parameter group associated with this instance's DB Cluster.
	ClusterParameterGroupName pulumi.StringPtrInput
	// The name of the database to create when the DB instance is created. This is not applicable for update.
	DbName pulumi.StringPtrInput
	// Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group.
	DbSubnetGroupName pulumi.StringPtrInput
	// If the DB instance should have deletion protection enabled.The database can't be deleted when this value is set to
	// `true`. This setting is not applicable for document db cluster instance.
	DeletionProtection pulumi.BoolPtrInput
	// Whether or not to enable the RDS IAM authentication.
	EnableIamAuth pulumi.BoolPtrInput
	// Whether or not to enable the RDS instance logging. This setting is not applicable for document db cluster instance.
	EnableLogging pulumi.BoolPtrInput
	// Whether or not to encrypt the RDS instance storage.
	EncryptStorage pulumi.BoolPtrInput
	// The endpoint of the RDS instance.
	Endpoint pulumi.StringPtrInput
	// The numerical index of database engine to use the for the RDS instance. Should be one of: - `0` : MySQL - `1` :
	// PostgreSQL - `2` : MsftSQL-Express - `3` : MsftSQL-Standard - `8` : Aurora-MySQL - `9` : Aurora-PostgreSQL - `10` :
	// MsftSQL-Web - `13` : DocumentDB - `14` : MariaDB - `16` : Aurora
	Engine pulumi.IntPtrInput
	// The database engine version to use the for the RDS instance. If you don't know the available engine versions for your
	// RDS instance, you can use the [AWS
	// CLI](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-engine-versions.html) to retrieve a list.
	EngineVersion pulumi.StringPtrInput
	// Interval to capture metrics in real time for the operating system (OS) that your Amazon RDS DB instance runs on.
	EnhancedMonitoring pulumi.IntPtrInput
	// The DNS hostname of the RDS instance.
	Host pulumi.StringPtrInput
	// The full name of the RDS instance.
	Identifier pulumi.StringPtrInput
	// The current status of the RDS instance.
	InstanceStatus pulumi.StringPtrInput
	// The IOPS (Input/Output Operations Per Second) value. Should be specified only if `storageType` is either io1 or gp3.
	Iops pulumi.IntPtrInput
	// The globally unique identifier for the key.
	KmsKeyId pulumi.StringPtrInput
	// The master password of the RDS instance.
	MasterPassword pulumi.StringPtrInput
	// The master username of the RDS instance.
	MasterUsername pulumi.StringPtrInput
	// Specifies if the RDS instance is multi-AZ.
	MultiAz pulumi.BoolPtrInput
	// The short name of the RDS instance. Duplo will add a prefix to the name. You can retrieve the full name from the
	// `identifier` attribute.
	Name pulumi.StringPtrInput
	// A RDS parameter group name to apply to the RDS instance.
	ParameterGroupName pulumi.StringPtrInput
	// Amazon RDS Performance Insights is a database performance tuning and monitoring feature that helps you quickly assess
	// the load on your database, and determine when and where to take action. Perfomance Insights get apply when enable is set
	// to true.
	PerformanceInsights RdsInstancePerformanceInsightsPtrInput
	// The listening port of the RDS instance.
	Port pulumi.IntPtrInput
	// The instance type of the RDS instance. See AWS documentation for the [available instance
	// types](https://aws.amazon.com/rds/instance-types/).
	Size pulumi.StringPtrInput
	// If the final snapshot should be taken. When set to true, the final snapshot will not be taken when the resource is
	// deleted.
	SkipFinalSnapshot pulumi.BoolPtrInput
	// A database snapshot to initialize the RDS instance from, at launch.
	SnapshotId pulumi.StringPtrInput
	// Storage type to be used for RDS instance storage. |Storage Type | Performance | Throughput | Descritpion |
	// |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// | | gp2 | 3 IOPS/GB, up to 16K IOPS | Up to 250 MB/s | General-purpose databases, small to medium workloads. 'gp2'
	// provides SSD-based storage with burstable IOPS | | gp3 | 3K to 16K IOPS | Up to 1,000 MB/s | Cost-effective,
	// customizable performance for a wide range of workloads. gp3 offers a more advanced and cost-effective version of gp2.
	// You can provision IOPS and throughput independently of storage size. | | io1 | Up to 256K IOPS | Up to 1,000 MB/s |
	// Mission-critical applications with high IOPS requirements. io1 provides provisioned IOPS, meaning you can define and
	// guarantee IOPS performance levels independently of storage capacity. | | standard | Variable, low IOPS | Low and
	// unpredictable | Low-cost, infrequent access, small databases, or test environments. Magnetic storage is the oldest and
	// least performant storage option. It is mainly used for low-cost applications with low performance demands. | | aurora |
	// Automatic scaling, up to 200K IOPS | Varies | High-performance, fault-tolerant, distributed storage for Amazon Aurora
	// databases. Aurora uses a unique distributed, fault-tolerant storage system that automatically replicates data across
	// multiple Availability Zones. | | aurora-iopt1 | Provisioned IOPS, similar to io1 | Varies | Aurora databases needing
	// guaranteed, high-performance IOPS. Aurora I/O-Optimized storage offers provisioned IOPS for Aurora clusters that require
	// consistently high performance for critical workloads. |
	StorageType pulumi.StringPtrInput
	// Whether or not to store RDS details in the AWS secrets manager.
	StoreDetailsInSecretManager pulumi.BoolPtrInput
	// The GUID of the tenant that the RDS instance will be created in.
	TenantId pulumi.StringPtrInput
	// Serverless v2ScalingConfiguration min and max scalling capacity.
	V2ScalingConfiguration RdsInstanceV2ScalingConfigurationPtrInput
}

func (RdsInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsInstanceState)(nil)).Elem()
}

type rdsInstanceArgs struct {
	// (Required unless a `snapshotId` is provided) The allocated storage in gigabytes.
	AllocatedStorage *int `pulumi:"allocatedStorage"`
	// Specify a valid Availability Zone for the RDS primary instance (when Multi-AZ is disabled) or for the Aurora writer
	// instance. e.g. us-west-2a
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Specifies backup retention period between 1 and 35 day(s). Default backup retention period is 1 day.
	BackupRetentionPeriod *int `pulumi:"backupRetentionPeriod"`
	// Parameter group associated with this instance's DB Cluster.
	ClusterParameterGroupName *string `pulumi:"clusterParameterGroupName"`
	// The name of the database to create when the DB instance is created. This is not applicable for update.
	DbName *string `pulumi:"dbName"`
	// Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group.
	DbSubnetGroupName *string `pulumi:"dbSubnetGroupName"`
	// If the DB instance should have deletion protection enabled.The database can't be deleted when this value is set to
	// `true`. This setting is not applicable for document db cluster instance.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// Whether or not to enable the RDS IAM authentication.
	EnableIamAuth *bool `pulumi:"enableIamAuth"`
	// Whether or not to enable the RDS instance logging. This setting is not applicable for document db cluster instance.
	EnableLogging *bool `pulumi:"enableLogging"`
	// Whether or not to encrypt the RDS instance storage.
	EncryptStorage *bool `pulumi:"encryptStorage"`
	// The numerical index of database engine to use the for the RDS instance. Should be one of: - `0` : MySQL - `1` :
	// PostgreSQL - `2` : MsftSQL-Express - `3` : MsftSQL-Standard - `8` : Aurora-MySQL - `9` : Aurora-PostgreSQL - `10` :
	// MsftSQL-Web - `13` : DocumentDB - `14` : MariaDB - `16` : Aurora
	Engine int `pulumi:"engine"`
	// The database engine version to use the for the RDS instance. If you don't know the available engine versions for your
	// RDS instance, you can use the [AWS
	// CLI](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-engine-versions.html) to retrieve a list.
	EngineVersion *string `pulumi:"engineVersion"`
	// Interval to capture metrics in real time for the operating system (OS) that your Amazon RDS DB instance runs on.
	EnhancedMonitoring *int `pulumi:"enhancedMonitoring"`
	// The IOPS (Input/Output Operations Per Second) value. Should be specified only if `storageType` is either io1 or gp3.
	Iops *int `pulumi:"iops"`
	// The globally unique identifier for the key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The master password of the RDS instance.
	MasterPassword *string `pulumi:"masterPassword"`
	// The master username of the RDS instance.
	MasterUsername *string `pulumi:"masterUsername"`
	// Specifies if the RDS instance is multi-AZ.
	MultiAz *bool `pulumi:"multiAz"`
	// The short name of the RDS instance. Duplo will add a prefix to the name. You can retrieve the full name from the
	// `identifier` attribute.
	Name *string `pulumi:"name"`
	// A RDS parameter group name to apply to the RDS instance.
	ParameterGroupName *string `pulumi:"parameterGroupName"`
	// Amazon RDS Performance Insights is a database performance tuning and monitoring feature that helps you quickly assess
	// the load on your database, and determine when and where to take action. Perfomance Insights get apply when enable is set
	// to true.
	PerformanceInsights *RdsInstancePerformanceInsights `pulumi:"performanceInsights"`
	// The instance type of the RDS instance. See AWS documentation for the [available instance
	// types](https://aws.amazon.com/rds/instance-types/).
	Size string `pulumi:"size"`
	// If the final snapshot should be taken. When set to true, the final snapshot will not be taken when the resource is
	// deleted.
	SkipFinalSnapshot *bool `pulumi:"skipFinalSnapshot"`
	// A database snapshot to initialize the RDS instance from, at launch.
	SnapshotId *string `pulumi:"snapshotId"`
	// Storage type to be used for RDS instance storage. |Storage Type | Performance | Throughput | Descritpion |
	// |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// | | gp2 | 3 IOPS/GB, up to 16K IOPS | Up to 250 MB/s | General-purpose databases, small to medium workloads. 'gp2'
	// provides SSD-based storage with burstable IOPS | | gp3 | 3K to 16K IOPS | Up to 1,000 MB/s | Cost-effective,
	// customizable performance for a wide range of workloads. gp3 offers a more advanced and cost-effective version of gp2.
	// You can provision IOPS and throughput independently of storage size. | | io1 | Up to 256K IOPS | Up to 1,000 MB/s |
	// Mission-critical applications with high IOPS requirements. io1 provides provisioned IOPS, meaning you can define and
	// guarantee IOPS performance levels independently of storage capacity. | | standard | Variable, low IOPS | Low and
	// unpredictable | Low-cost, infrequent access, small databases, or test environments. Magnetic storage is the oldest and
	// least performant storage option. It is mainly used for low-cost applications with low performance demands. | | aurora |
	// Automatic scaling, up to 200K IOPS | Varies | High-performance, fault-tolerant, distributed storage for Amazon Aurora
	// databases. Aurora uses a unique distributed, fault-tolerant storage system that automatically replicates data across
	// multiple Availability Zones. | | aurora-iopt1 | Provisioned IOPS, similar to io1 | Varies | Aurora databases needing
	// guaranteed, high-performance IOPS. Aurora I/O-Optimized storage offers provisioned IOPS for Aurora clusters that require
	// consistently high performance for critical workloads. |
	StorageType *string `pulumi:"storageType"`
	// Whether or not to store RDS details in the AWS secrets manager.
	StoreDetailsInSecretManager *bool `pulumi:"storeDetailsInSecretManager"`
	// The GUID of the tenant that the RDS instance will be created in.
	TenantId string `pulumi:"tenantId"`
	// Serverless v2ScalingConfiguration min and max scalling capacity.
	V2ScalingConfiguration *RdsInstanceV2ScalingConfiguration `pulumi:"v2ScalingConfiguration"`
}

// The set of arguments for constructing a RdsInstance resource.
type RdsInstanceArgs struct {
	// (Required unless a `snapshotId` is provided) The allocated storage in gigabytes.
	AllocatedStorage pulumi.IntPtrInput
	// Specify a valid Availability Zone for the RDS primary instance (when Multi-AZ is disabled) or for the Aurora writer
	// instance. e.g. us-west-2a
	AvailabilityZone pulumi.StringPtrInput
	// Specifies backup retention period between 1 and 35 day(s). Default backup retention period is 1 day.
	BackupRetentionPeriod pulumi.IntPtrInput
	// Parameter group associated with this instance's DB Cluster.
	ClusterParameterGroupName pulumi.StringPtrInput
	// The name of the database to create when the DB instance is created. This is not applicable for update.
	DbName pulumi.StringPtrInput
	// Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group.
	DbSubnetGroupName pulumi.StringPtrInput
	// If the DB instance should have deletion protection enabled.The database can't be deleted when this value is set to
	// `true`. This setting is not applicable for document db cluster instance.
	DeletionProtection pulumi.BoolPtrInput
	// Whether or not to enable the RDS IAM authentication.
	EnableIamAuth pulumi.BoolPtrInput
	// Whether or not to enable the RDS instance logging. This setting is not applicable for document db cluster instance.
	EnableLogging pulumi.BoolPtrInput
	// Whether or not to encrypt the RDS instance storage.
	EncryptStorage pulumi.BoolPtrInput
	// The numerical index of database engine to use the for the RDS instance. Should be one of: - `0` : MySQL - `1` :
	// PostgreSQL - `2` : MsftSQL-Express - `3` : MsftSQL-Standard - `8` : Aurora-MySQL - `9` : Aurora-PostgreSQL - `10` :
	// MsftSQL-Web - `13` : DocumentDB - `14` : MariaDB - `16` : Aurora
	Engine pulumi.IntInput
	// The database engine version to use the for the RDS instance. If you don't know the available engine versions for your
	// RDS instance, you can use the [AWS
	// CLI](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-engine-versions.html) to retrieve a list.
	EngineVersion pulumi.StringPtrInput
	// Interval to capture metrics in real time for the operating system (OS) that your Amazon RDS DB instance runs on.
	EnhancedMonitoring pulumi.IntPtrInput
	// The IOPS (Input/Output Operations Per Second) value. Should be specified only if `storageType` is either io1 or gp3.
	Iops pulumi.IntPtrInput
	// The globally unique identifier for the key.
	KmsKeyId pulumi.StringPtrInput
	// The master password of the RDS instance.
	MasterPassword pulumi.StringPtrInput
	// The master username of the RDS instance.
	MasterUsername pulumi.StringPtrInput
	// Specifies if the RDS instance is multi-AZ.
	MultiAz pulumi.BoolPtrInput
	// The short name of the RDS instance. Duplo will add a prefix to the name. You can retrieve the full name from the
	// `identifier` attribute.
	Name pulumi.StringPtrInput
	// A RDS parameter group name to apply to the RDS instance.
	ParameterGroupName pulumi.StringPtrInput
	// Amazon RDS Performance Insights is a database performance tuning and monitoring feature that helps you quickly assess
	// the load on your database, and determine when and where to take action. Perfomance Insights get apply when enable is set
	// to true.
	PerformanceInsights RdsInstancePerformanceInsightsPtrInput
	// The instance type of the RDS instance. See AWS documentation for the [available instance
	// types](https://aws.amazon.com/rds/instance-types/).
	Size pulumi.StringInput
	// If the final snapshot should be taken. When set to true, the final snapshot will not be taken when the resource is
	// deleted.
	SkipFinalSnapshot pulumi.BoolPtrInput
	// A database snapshot to initialize the RDS instance from, at launch.
	SnapshotId pulumi.StringPtrInput
	// Storage type to be used for RDS instance storage. |Storage Type | Performance | Throughput | Descritpion |
	// |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// | | gp2 | 3 IOPS/GB, up to 16K IOPS | Up to 250 MB/s | General-purpose databases, small to medium workloads. 'gp2'
	// provides SSD-based storage with burstable IOPS | | gp3 | 3K to 16K IOPS | Up to 1,000 MB/s | Cost-effective,
	// customizable performance for a wide range of workloads. gp3 offers a more advanced and cost-effective version of gp2.
	// You can provision IOPS and throughput independently of storage size. | | io1 | Up to 256K IOPS | Up to 1,000 MB/s |
	// Mission-critical applications with high IOPS requirements. io1 provides provisioned IOPS, meaning you can define and
	// guarantee IOPS performance levels independently of storage capacity. | | standard | Variable, low IOPS | Low and
	// unpredictable | Low-cost, infrequent access, small databases, or test environments. Magnetic storage is the oldest and
	// least performant storage option. It is mainly used for low-cost applications with low performance demands. | | aurora |
	// Automatic scaling, up to 200K IOPS | Varies | High-performance, fault-tolerant, distributed storage for Amazon Aurora
	// databases. Aurora uses a unique distributed, fault-tolerant storage system that automatically replicates data across
	// multiple Availability Zones. | | aurora-iopt1 | Provisioned IOPS, similar to io1 | Varies | Aurora databases needing
	// guaranteed, high-performance IOPS. Aurora I/O-Optimized storage offers provisioned IOPS for Aurora clusters that require
	// consistently high performance for critical workloads. |
	StorageType pulumi.StringPtrInput
	// Whether or not to store RDS details in the AWS secrets manager.
	StoreDetailsInSecretManager pulumi.BoolPtrInput
	// The GUID of the tenant that the RDS instance will be created in.
	TenantId pulumi.StringInput
	// Serverless v2ScalingConfiguration min and max scalling capacity.
	V2ScalingConfiguration RdsInstanceV2ScalingConfigurationPtrInput
}

func (RdsInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsInstanceArgs)(nil)).Elem()
}

type RdsInstanceInput interface {
	pulumi.Input

	ToRdsInstanceOutput() RdsInstanceOutput
	ToRdsInstanceOutputWithContext(ctx context.Context) RdsInstanceOutput
}

func (*RdsInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsInstance)(nil)).Elem()
}

func (i *RdsInstance) ToRdsInstanceOutput() RdsInstanceOutput {
	return i.ToRdsInstanceOutputWithContext(context.Background())
}

func (i *RdsInstance) ToRdsInstanceOutputWithContext(ctx context.Context) RdsInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstanceOutput)
}

// RdsInstanceArrayInput is an input type that accepts RdsInstanceArray and RdsInstanceArrayOutput values.
// You can construct a concrete instance of `RdsInstanceArrayInput` via:
//
//	RdsInstanceArray{ RdsInstanceArgs{...} }
type RdsInstanceArrayInput interface {
	pulumi.Input

	ToRdsInstanceArrayOutput() RdsInstanceArrayOutput
	ToRdsInstanceArrayOutputWithContext(context.Context) RdsInstanceArrayOutput
}

type RdsInstanceArray []RdsInstanceInput

func (RdsInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsInstance)(nil)).Elem()
}

func (i RdsInstanceArray) ToRdsInstanceArrayOutput() RdsInstanceArrayOutput {
	return i.ToRdsInstanceArrayOutputWithContext(context.Background())
}

func (i RdsInstanceArray) ToRdsInstanceArrayOutputWithContext(ctx context.Context) RdsInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstanceArrayOutput)
}

// RdsInstanceMapInput is an input type that accepts RdsInstanceMap and RdsInstanceMapOutput values.
// You can construct a concrete instance of `RdsInstanceMapInput` via:
//
//	RdsInstanceMap{ "key": RdsInstanceArgs{...} }
type RdsInstanceMapInput interface {
	pulumi.Input

	ToRdsInstanceMapOutput() RdsInstanceMapOutput
	ToRdsInstanceMapOutputWithContext(context.Context) RdsInstanceMapOutput
}

type RdsInstanceMap map[string]RdsInstanceInput

func (RdsInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsInstance)(nil)).Elem()
}

func (i RdsInstanceMap) ToRdsInstanceMapOutput() RdsInstanceMapOutput {
	return i.ToRdsInstanceMapOutputWithContext(context.Background())
}

func (i RdsInstanceMap) ToRdsInstanceMapOutputWithContext(ctx context.Context) RdsInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstanceMapOutput)
}

type RdsInstanceOutput struct{ *pulumi.OutputState }

func (RdsInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsInstance)(nil)).Elem()
}

func (o RdsInstanceOutput) ToRdsInstanceOutput() RdsInstanceOutput {
	return o
}

func (o RdsInstanceOutput) ToRdsInstanceOutputWithContext(ctx context.Context) RdsInstanceOutput {
	return o
}

// (Required unless a `snapshotId` is provided) The allocated storage in gigabytes.
func (o RdsInstanceOutput) AllocatedStorage() pulumi.IntOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.IntOutput { return v.AllocatedStorage }).(pulumi.IntOutput)
}

// The ARN of the RDS instance.
func (o RdsInstanceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Specify a valid Availability Zone for the RDS primary instance (when Multi-AZ is disabled) or for the Aurora writer
// instance. e.g. us-west-2a
func (o RdsInstanceOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Specifies backup retention period between 1 and 35 day(s). Default backup retention period is 1 day.
func (o RdsInstanceOutput) BackupRetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.IntPtrOutput { return v.BackupRetentionPeriod }).(pulumi.IntPtrOutput)
}

// The RDS Cluster Identifier
func (o RdsInstanceOutput) ClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.ClusterIdentifier }).(pulumi.StringOutput)
}

// Parameter group associated with this instance's DB Cluster.
func (o RdsInstanceOutput) ClusterParameterGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.ClusterParameterGroupName }).(pulumi.StringOutput)
}

// The name of the database to create when the DB instance is created. This is not applicable for update.
func (o RdsInstanceOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.DbName }).(pulumi.StringOutput)
}

// Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group.
func (o RdsInstanceOutput) DbSubnetGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.DbSubnetGroupName }).(pulumi.StringOutput)
}

// If the DB instance should have deletion protection enabled.The database can't be deleted when this value is set to
// `true`. This setting is not applicable for document db cluster instance.
func (o RdsInstanceOutput) DeletionProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.BoolPtrOutput { return v.DeletionProtection }).(pulumi.BoolPtrOutput)
}

// Whether or not to enable the RDS IAM authentication.
func (o RdsInstanceOutput) EnableIamAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.BoolOutput { return v.EnableIamAuth }).(pulumi.BoolOutput)
}

// Whether or not to enable the RDS instance logging. This setting is not applicable for document db cluster instance.
func (o RdsInstanceOutput) EnableLogging() pulumi.BoolOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.BoolOutput { return v.EnableLogging }).(pulumi.BoolOutput)
}

// Whether or not to encrypt the RDS instance storage.
func (o RdsInstanceOutput) EncryptStorage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.BoolPtrOutput { return v.EncryptStorage }).(pulumi.BoolPtrOutput)
}

// The endpoint of the RDS instance.
func (o RdsInstanceOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// The numerical index of database engine to use the for the RDS instance. Should be one of: - `0` : MySQL - `1` :
// PostgreSQL - `2` : MsftSQL-Express - `3` : MsftSQL-Standard - `8` : Aurora-MySQL - `9` : Aurora-PostgreSQL - `10` :
// MsftSQL-Web - `13` : DocumentDB - `14` : MariaDB - `16` : Aurora
func (o RdsInstanceOutput) Engine() pulumi.IntOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.IntOutput { return v.Engine }).(pulumi.IntOutput)
}

// The database engine version to use the for the RDS instance. If you don't know the available engine versions for your
// RDS instance, you can use the [AWS
// CLI](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-engine-versions.html) to retrieve a list.
func (o RdsInstanceOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

// Interval to capture metrics in real time for the operating system (OS) that your Amazon RDS DB instance runs on.
func (o RdsInstanceOutput) EnhancedMonitoring() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.IntPtrOutput { return v.EnhancedMonitoring }).(pulumi.IntPtrOutput)
}

// The DNS hostname of the RDS instance.
func (o RdsInstanceOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// The full name of the RDS instance.
func (o RdsInstanceOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// The current status of the RDS instance.
func (o RdsInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.InstanceStatus }).(pulumi.StringOutput)
}

// The IOPS (Input/Output Operations Per Second) value. Should be specified only if `storageType` is either io1 or gp3.
func (o RdsInstanceOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.IntOutput { return v.Iops }).(pulumi.IntOutput)
}

// The globally unique identifier for the key.
func (o RdsInstanceOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

// The master password of the RDS instance.
func (o RdsInstanceOutput) MasterPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringPtrOutput { return v.MasterPassword }).(pulumi.StringPtrOutput)
}

// The master username of the RDS instance.
func (o RdsInstanceOutput) MasterUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.MasterUsername }).(pulumi.StringOutput)
}

// Specifies if the RDS instance is multi-AZ.
func (o RdsInstanceOutput) MultiAz() pulumi.BoolOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.BoolOutput { return v.MultiAz }).(pulumi.BoolOutput)
}

// The short name of the RDS instance. Duplo will add a prefix to the name. You can retrieve the full name from the
// `identifier` attribute.
func (o RdsInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A RDS parameter group name to apply to the RDS instance.
func (o RdsInstanceOutput) ParameterGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.ParameterGroupName }).(pulumi.StringOutput)
}

// Amazon RDS Performance Insights is a database performance tuning and monitoring feature that helps you quickly assess
// the load on your database, and determine when and where to take action. Perfomance Insights get apply when enable is set
// to true.
func (o RdsInstanceOutput) PerformanceInsights() RdsInstancePerformanceInsightsPtrOutput {
	return o.ApplyT(func(v *RdsInstance) RdsInstancePerformanceInsightsPtrOutput { return v.PerformanceInsights }).(RdsInstancePerformanceInsightsPtrOutput)
}

// The listening port of the RDS instance.
func (o RdsInstanceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The instance type of the RDS instance. See AWS documentation for the [available instance
// types](https://aws.amazon.com/rds/instance-types/).
func (o RdsInstanceOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.Size }).(pulumi.StringOutput)
}

// If the final snapshot should be taken. When set to true, the final snapshot will not be taken when the resource is
// deleted.
func (o RdsInstanceOutput) SkipFinalSnapshot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.BoolPtrOutput { return v.SkipFinalSnapshot }).(pulumi.BoolPtrOutput)
}

// A database snapshot to initialize the RDS instance from, at launch.
func (o RdsInstanceOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// Storage type to be used for RDS instance storage. |Storage Type | Performance | Throughput | Descritpion |
// |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// | | gp2 | 3 IOPS/GB, up to 16K IOPS | Up to 250 MB/s | General-purpose databases, small to medium workloads. 'gp2'
// provides SSD-based storage with burstable IOPS | | gp3 | 3K to 16K IOPS | Up to 1,000 MB/s | Cost-effective,
// customizable performance for a wide range of workloads. gp3 offers a more advanced and cost-effective version of gp2.
// You can provision IOPS and throughput independently of storage size. | | io1 | Up to 256K IOPS | Up to 1,000 MB/s |
// Mission-critical applications with high IOPS requirements. io1 provides provisioned IOPS, meaning you can define and
// guarantee IOPS performance levels independently of storage capacity. | | standard | Variable, low IOPS | Low and
// unpredictable | Low-cost, infrequent access, small databases, or test environments. Magnetic storage is the oldest and
// least performant storage option. It is mainly used for low-cost applications with low performance demands. | | aurora |
// Automatic scaling, up to 200K IOPS | Varies | High-performance, fault-tolerant, distributed storage for Amazon Aurora
// databases. Aurora uses a unique distributed, fault-tolerant storage system that automatically replicates data across
// multiple Availability Zones. | | aurora-iopt1 | Provisioned IOPS, similar to io1 | Varies | Aurora databases needing
// guaranteed, high-performance IOPS. Aurora I/O-Optimized storage offers provisioned IOPS for Aurora clusters that require
// consistently high performance for critical workloads. |
func (o RdsInstanceOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

// Whether or not to store RDS details in the AWS secrets manager.
func (o RdsInstanceOutput) StoreDetailsInSecretManager() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.BoolPtrOutput { return v.StoreDetailsInSecretManager }).(pulumi.BoolPtrOutput)
}

// The GUID of the tenant that the RDS instance will be created in.
func (o RdsInstanceOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsInstance) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Serverless v2ScalingConfiguration min and max scalling capacity.
func (o RdsInstanceOutput) V2ScalingConfiguration() RdsInstanceV2ScalingConfigurationPtrOutput {
	return o.ApplyT(func(v *RdsInstance) RdsInstanceV2ScalingConfigurationPtrOutput { return v.V2ScalingConfiguration }).(RdsInstanceV2ScalingConfigurationPtrOutput)
}

type RdsInstanceArrayOutput struct{ *pulumi.OutputState }

func (RdsInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsInstance)(nil)).Elem()
}

func (o RdsInstanceArrayOutput) ToRdsInstanceArrayOutput() RdsInstanceArrayOutput {
	return o
}

func (o RdsInstanceArrayOutput) ToRdsInstanceArrayOutputWithContext(ctx context.Context) RdsInstanceArrayOutput {
	return o
}

func (o RdsInstanceArrayOutput) Index(i pulumi.IntInput) RdsInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsInstance {
		return vs[0].([]*RdsInstance)[vs[1].(int)]
	}).(RdsInstanceOutput)
}

type RdsInstanceMapOutput struct{ *pulumi.OutputState }

func (RdsInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsInstance)(nil)).Elem()
}

func (o RdsInstanceMapOutput) ToRdsInstanceMapOutput() RdsInstanceMapOutput {
	return o
}

func (o RdsInstanceMapOutput) ToRdsInstanceMapOutputWithContext(ctx context.Context) RdsInstanceMapOutput {
	return o
}

func (o RdsInstanceMapOutput) MapIndex(k pulumi.StringInput) RdsInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsInstance {
		return vs[0].(map[string]*RdsInstance)[vs[1].(string)]
	}).(RdsInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstanceInput)(nil)).Elem(), &RdsInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstanceArrayInput)(nil)).Elem(), RdsInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstanceMapInput)(nil)).Elem(), RdsInstanceMap{})
	pulumi.RegisterOutputType(RdsInstanceOutput{})
	pulumi.RegisterOutputType(RdsInstanceArrayOutput{})
	pulumi.RegisterOutputType(RdsInstanceMapOutput{})
}
