// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `PlanKmsV2` manages the list of kms avaialble to a plan in Duplo.
//
// This resource allows you take control of individual plan kms for a specific plan.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewPlanKmsV2(ctx, "myplan", &duplocloud.PlanKmsV2Args{
//				PlanId: pulumi.String("plan-name"),
//				Kms: duplocloud.PlanKmsV2KmArray{
//					&duplocloud.PlanKmsV2KmArgs{
//						Id:   pulumi.String("kms-id"),
//						Arn:  pulumi.String("kms-arn"),
//						Name: pulumi.String("kms-name"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing WAF instance
//
//   - *PLAN_ID* is the plan name
//
// ```sh
// $ pulumi import duplocloud:index/planKmsV2:PlanKmsV2 myplan *PLAN_ID*/kms*
// ```
type PlanKmsV2 struct {
	pulumi.CustomResourceState

	// Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedKmsKeys pulumi.BoolPtrOutput `pulumi:"deleteUnspecifiedKmsKeys"`
	// A list of KMS key to manage.
	Kms PlanKmsV2KmArrayOutput `pulumi:"kms"`
	// A list of KMS key to manage.
	KmsKeys PlanKmsV2KmsKeyArrayOutput `pulumi:"kmsKeys"`
	// The ID of the plan to configure.
	PlanId pulumi.StringOutput `pulumi:"planId"`
	// A list of certificate names being managed by this resource.
	SpecifiedKmsKeys pulumi.StringArrayOutput `pulumi:"specifiedKmsKeys"`
}

// NewPlanKmsV2 registers a new resource with the given unique name, arguments, and options.
func NewPlanKmsV2(ctx *pulumi.Context,
	name string, args *PlanKmsV2Args, opts ...pulumi.ResourceOption) (*PlanKmsV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlanId == nil {
		return nil, errors.New("invalid value for required argument 'PlanId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PlanKmsV2
	err := ctx.RegisterResource("duplocloud:index/planKmsV2:PlanKmsV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlanKmsV2 gets an existing PlanKmsV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlanKmsV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlanKmsV2State, opts ...pulumi.ResourceOption) (*PlanKmsV2, error) {
	var resource PlanKmsV2
	err := ctx.ReadResource("duplocloud:index/planKmsV2:PlanKmsV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlanKmsV2 resources.
type planKmsV2State struct {
	// Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedKmsKeys *bool `pulumi:"deleteUnspecifiedKmsKeys"`
	// A list of KMS key to manage.
	Kms []PlanKmsV2Km `pulumi:"kms"`
	// A list of KMS key to manage.
	KmsKeys []PlanKmsV2KmsKey `pulumi:"kmsKeys"`
	// The ID of the plan to configure.
	PlanId *string `pulumi:"planId"`
	// A list of certificate names being managed by this resource.
	SpecifiedKmsKeys []string `pulumi:"specifiedKmsKeys"`
}

type PlanKmsV2State struct {
	// Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedKmsKeys pulumi.BoolPtrInput
	// A list of KMS key to manage.
	Kms PlanKmsV2KmArrayInput
	// A list of KMS key to manage.
	KmsKeys PlanKmsV2KmsKeyArrayInput
	// The ID of the plan to configure.
	PlanId pulumi.StringPtrInput
	// A list of certificate names being managed by this resource.
	SpecifiedKmsKeys pulumi.StringArrayInput
}

func (PlanKmsV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*planKmsV2State)(nil)).Elem()
}

type planKmsV2Args struct {
	// Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedKmsKeys *bool `pulumi:"deleteUnspecifiedKmsKeys"`
	// A list of KMS key to manage.
	Kms []PlanKmsV2Km `pulumi:"kms"`
	// The ID of the plan to configure.
	PlanId string `pulumi:"planId"`
}

// The set of arguments for constructing a PlanKmsV2 resource.
type PlanKmsV2Args struct {
	// Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedKmsKeys pulumi.BoolPtrInput
	// A list of KMS key to manage.
	Kms PlanKmsV2KmArrayInput
	// The ID of the plan to configure.
	PlanId pulumi.StringInput
}

func (PlanKmsV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*planKmsV2Args)(nil)).Elem()
}

type PlanKmsV2Input interface {
	pulumi.Input

	ToPlanKmsV2Output() PlanKmsV2Output
	ToPlanKmsV2OutputWithContext(ctx context.Context) PlanKmsV2Output
}

func (*PlanKmsV2) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanKmsV2)(nil)).Elem()
}

func (i *PlanKmsV2) ToPlanKmsV2Output() PlanKmsV2Output {
	return i.ToPlanKmsV2OutputWithContext(context.Background())
}

func (i *PlanKmsV2) ToPlanKmsV2OutputWithContext(ctx context.Context) PlanKmsV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(PlanKmsV2Output)
}

// PlanKmsV2ArrayInput is an input type that accepts PlanKmsV2Array and PlanKmsV2ArrayOutput values.
// You can construct a concrete instance of `PlanKmsV2ArrayInput` via:
//
//	PlanKmsV2Array{ PlanKmsV2Args{...} }
type PlanKmsV2ArrayInput interface {
	pulumi.Input

	ToPlanKmsV2ArrayOutput() PlanKmsV2ArrayOutput
	ToPlanKmsV2ArrayOutputWithContext(context.Context) PlanKmsV2ArrayOutput
}

type PlanKmsV2Array []PlanKmsV2Input

func (PlanKmsV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlanKmsV2)(nil)).Elem()
}

func (i PlanKmsV2Array) ToPlanKmsV2ArrayOutput() PlanKmsV2ArrayOutput {
	return i.ToPlanKmsV2ArrayOutputWithContext(context.Background())
}

func (i PlanKmsV2Array) ToPlanKmsV2ArrayOutputWithContext(ctx context.Context) PlanKmsV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanKmsV2ArrayOutput)
}

// PlanKmsV2MapInput is an input type that accepts PlanKmsV2Map and PlanKmsV2MapOutput values.
// You can construct a concrete instance of `PlanKmsV2MapInput` via:
//
//	PlanKmsV2Map{ "key": PlanKmsV2Args{...} }
type PlanKmsV2MapInput interface {
	pulumi.Input

	ToPlanKmsV2MapOutput() PlanKmsV2MapOutput
	ToPlanKmsV2MapOutputWithContext(context.Context) PlanKmsV2MapOutput
}

type PlanKmsV2Map map[string]PlanKmsV2Input

func (PlanKmsV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlanKmsV2)(nil)).Elem()
}

func (i PlanKmsV2Map) ToPlanKmsV2MapOutput() PlanKmsV2MapOutput {
	return i.ToPlanKmsV2MapOutputWithContext(context.Background())
}

func (i PlanKmsV2Map) ToPlanKmsV2MapOutputWithContext(ctx context.Context) PlanKmsV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanKmsV2MapOutput)
}

type PlanKmsV2Output struct{ *pulumi.OutputState }

func (PlanKmsV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanKmsV2)(nil)).Elem()
}

func (o PlanKmsV2Output) ToPlanKmsV2Output() PlanKmsV2Output {
	return o
}

func (o PlanKmsV2Output) ToPlanKmsV2OutputWithContext(ctx context.Context) PlanKmsV2Output {
	return o
}

// Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
func (o PlanKmsV2Output) DeleteUnspecifiedKmsKeys() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanKmsV2) pulumi.BoolPtrOutput { return v.DeleteUnspecifiedKmsKeys }).(pulumi.BoolPtrOutput)
}

// A list of KMS key to manage.
func (o PlanKmsV2Output) Kms() PlanKmsV2KmArrayOutput {
	return o.ApplyT(func(v *PlanKmsV2) PlanKmsV2KmArrayOutput { return v.Kms }).(PlanKmsV2KmArrayOutput)
}

// A list of KMS key to manage.
func (o PlanKmsV2Output) KmsKeys() PlanKmsV2KmsKeyArrayOutput {
	return o.ApplyT(func(v *PlanKmsV2) PlanKmsV2KmsKeyArrayOutput { return v.KmsKeys }).(PlanKmsV2KmsKeyArrayOutput)
}

// The ID of the plan to configure.
func (o PlanKmsV2Output) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *PlanKmsV2) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

// A list of certificate names being managed by this resource.
func (o PlanKmsV2Output) SpecifiedKmsKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlanKmsV2) pulumi.StringArrayOutput { return v.SpecifiedKmsKeys }).(pulumi.StringArrayOutput)
}

type PlanKmsV2ArrayOutput struct{ *pulumi.OutputState }

func (PlanKmsV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlanKmsV2)(nil)).Elem()
}

func (o PlanKmsV2ArrayOutput) ToPlanKmsV2ArrayOutput() PlanKmsV2ArrayOutput {
	return o
}

func (o PlanKmsV2ArrayOutput) ToPlanKmsV2ArrayOutputWithContext(ctx context.Context) PlanKmsV2ArrayOutput {
	return o
}

func (o PlanKmsV2ArrayOutput) Index(i pulumi.IntInput) PlanKmsV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PlanKmsV2 {
		return vs[0].([]*PlanKmsV2)[vs[1].(int)]
	}).(PlanKmsV2Output)
}

type PlanKmsV2MapOutput struct{ *pulumi.OutputState }

func (PlanKmsV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlanKmsV2)(nil)).Elem()
}

func (o PlanKmsV2MapOutput) ToPlanKmsV2MapOutput() PlanKmsV2MapOutput {
	return o
}

func (o PlanKmsV2MapOutput) ToPlanKmsV2MapOutputWithContext(ctx context.Context) PlanKmsV2MapOutput {
	return o
}

func (o PlanKmsV2MapOutput) MapIndex(k pulumi.StringInput) PlanKmsV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PlanKmsV2 {
		return vs[0].(map[string]*PlanKmsV2)[vs[1].(string)]
	}).(PlanKmsV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlanKmsV2Input)(nil)).Elem(), &PlanKmsV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanKmsV2ArrayInput)(nil)).Elem(), PlanKmsV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanKmsV2MapInput)(nil)).Elem(), PlanKmsV2Map{})
	pulumi.RegisterOutputType(PlanKmsV2Output{})
	pulumi.RegisterOutputType(PlanKmsV2ArrayOutput{})
	pulumi.RegisterOutputType(PlanKmsV2MapOutput{})
}
