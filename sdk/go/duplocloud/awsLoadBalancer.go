// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AwsLoadBalancer` manages an AWS application load balancer in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAwsLoadBalancer(ctx, "myapp", &duplocloud.AwsLoadBalancerArgs{
//				TenantId:           myapp.TenantId,
//				Name:               pulumi.String("myapp"),
//				IsInternal:         pulumi.Bool(true),
//				EnableAccessLogs:   pulumi.Bool(true),
//				DropInvalidHeaders: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing AWS load balancer
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the AWS load balancer
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/awsLoadBalancer:AwsLoadBalancer myalb *TENANT_ID*/*SHORT_NAME*
// ```
type AwsLoadBalancer struct {
	pulumi.CustomResourceState

	// The ARN of the load balancer.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The DNS name of the load balancer.
	DnsName pulumi.StringOutput `pulumi:"dnsName"`
	// Whether or not the load balancer should drop invalid HTTP headers. Only valid for Load Balancers of type `Application`
	DropInvalidHeaders pulumi.BoolOutput `pulumi:"dropInvalidHeaders"`
	// Whether or not access logs should be enabled.
	EnableAccessLogs pulumi.BoolOutput `pulumi:"enableAccessLogs"`
	// The full name of the load balancer.
	Fullname pulumi.StringOutput `pulumi:"fullname"`
	// Whether or not the load balancer should redirect HTTP to HTTPS. Only valid for Load Balancers of type `Application`
	HttpToHttpsRedirect pulumi.BoolOutput `pulumi:"httpToHttpsRedirect"`
	// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
	IdleTimeout pulumi.IntOutput `pulumi:"idleTimeout"`
	// Whether or not the load balancer is internal (non internet-facing).
	IsInternal pulumi.BoolOutput `pulumi:"isInternal"`
	// The type of load balancer to create. Possible values are `Application` or `Network`. Defaults to `Application`.
	LoadBalancerType pulumi.StringPtrOutput `pulumi:"loadBalancerType"`
	// The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringOutput `pulumi:"name"`
	// The tags assigned to this load balancer.
	Tags AwsLoadBalancerTagArrayOutput `pulumi:"tags"`
	// The GUID of the tenant that the load balancer will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The ARN of a WAF to attach to the load balancer.
	WebAclId pulumi.StringOutput `pulumi:"webAclId"`
}

// NewAwsLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewAwsLoadBalancer(ctx *pulumi.Context,
	name string, args *AwsLoadBalancerArgs, opts ...pulumi.ResourceOption) (*AwsLoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsLoadBalancer
	err := ctx.RegisterResource("duplocloud:index/awsLoadBalancer:AwsLoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsLoadBalancer gets an existing AwsLoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsLoadBalancerState, opts ...pulumi.ResourceOption) (*AwsLoadBalancer, error) {
	var resource AwsLoadBalancer
	err := ctx.ReadResource("duplocloud:index/awsLoadBalancer:AwsLoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsLoadBalancer resources.
type awsLoadBalancerState struct {
	// The ARN of the load balancer.
	Arn *string `pulumi:"arn"`
	// The DNS name of the load balancer.
	DnsName *string `pulumi:"dnsName"`
	// Whether or not the load balancer should drop invalid HTTP headers. Only valid for Load Balancers of type `Application`
	DropInvalidHeaders *bool `pulumi:"dropInvalidHeaders"`
	// Whether or not access logs should be enabled.
	EnableAccessLogs *bool `pulumi:"enableAccessLogs"`
	// The full name of the load balancer.
	Fullname *string `pulumi:"fullname"`
	// Whether or not the load balancer should redirect HTTP to HTTPS. Only valid for Load Balancers of type `Application`
	HttpToHttpsRedirect *bool `pulumi:"httpToHttpsRedirect"`
	// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// Whether or not the load balancer is internal (non internet-facing).
	IsInternal *bool `pulumi:"isInternal"`
	// The type of load balancer to create. Possible values are `Application` or `Network`. Defaults to `Application`.
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// The tags assigned to this load balancer.
	Tags []AwsLoadBalancerTag `pulumi:"tags"`
	// The GUID of the tenant that the load balancer will be created in.
	TenantId *string `pulumi:"tenantId"`
	// The ARN of a WAF to attach to the load balancer.
	WebAclId *string `pulumi:"webAclId"`
}

type AwsLoadBalancerState struct {
	// The ARN of the load balancer.
	Arn pulumi.StringPtrInput
	// The DNS name of the load balancer.
	DnsName pulumi.StringPtrInput
	// Whether or not the load balancer should drop invalid HTTP headers. Only valid for Load Balancers of type `Application`
	DropInvalidHeaders pulumi.BoolPtrInput
	// Whether or not access logs should be enabled.
	EnableAccessLogs pulumi.BoolPtrInput
	// The full name of the load balancer.
	Fullname pulumi.StringPtrInput
	// Whether or not the load balancer should redirect HTTP to HTTPS. Only valid for Load Balancers of type `Application`
	HttpToHttpsRedirect pulumi.BoolPtrInput
	// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
	IdleTimeout pulumi.IntPtrInput
	// Whether or not the load balancer is internal (non internet-facing).
	IsInternal pulumi.BoolPtrInput
	// The type of load balancer to create. Possible values are `Application` or `Network`. Defaults to `Application`.
	LoadBalancerType pulumi.StringPtrInput
	// The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// The tags assigned to this load balancer.
	Tags AwsLoadBalancerTagArrayInput
	// The GUID of the tenant that the load balancer will be created in.
	TenantId pulumi.StringPtrInput
	// The ARN of a WAF to attach to the load balancer.
	WebAclId pulumi.StringPtrInput
}

func (AwsLoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsLoadBalancerState)(nil)).Elem()
}

type awsLoadBalancerArgs struct {
	// Whether or not the load balancer should drop invalid HTTP headers. Only valid for Load Balancers of type `Application`
	DropInvalidHeaders *bool `pulumi:"dropInvalidHeaders"`
	// Whether or not access logs should be enabled.
	EnableAccessLogs *bool `pulumi:"enableAccessLogs"`
	// Whether or not the load balancer should redirect HTTP to HTTPS. Only valid for Load Balancers of type `Application`
	HttpToHttpsRedirect *bool `pulumi:"httpToHttpsRedirect"`
	// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// Whether or not the load balancer is internal (non internet-facing).
	IsInternal *bool `pulumi:"isInternal"`
	// The type of load balancer to create. Possible values are `Application` or `Network`. Defaults to `Application`.
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// The GUID of the tenant that the load balancer will be created in.
	TenantId string `pulumi:"tenantId"`
	// The ARN of a WAF to attach to the load balancer.
	WebAclId *string `pulumi:"webAclId"`
}

// The set of arguments for constructing a AwsLoadBalancer resource.
type AwsLoadBalancerArgs struct {
	// Whether or not the load balancer should drop invalid HTTP headers. Only valid for Load Balancers of type `Application`
	DropInvalidHeaders pulumi.BoolPtrInput
	// Whether or not access logs should be enabled.
	EnableAccessLogs pulumi.BoolPtrInput
	// Whether or not the load balancer should redirect HTTP to HTTPS. Only valid for Load Balancers of type `Application`
	HttpToHttpsRedirect pulumi.BoolPtrInput
	// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
	IdleTimeout pulumi.IntPtrInput
	// Whether or not the load balancer is internal (non internet-facing).
	IsInternal pulumi.BoolPtrInput
	// The type of load balancer to create. Possible values are `Application` or `Network`. Defaults to `Application`.
	LoadBalancerType pulumi.StringPtrInput
	// The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// The GUID of the tenant that the load balancer will be created in.
	TenantId pulumi.StringInput
	// The ARN of a WAF to attach to the load balancer.
	WebAclId pulumi.StringPtrInput
}

func (AwsLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsLoadBalancerArgs)(nil)).Elem()
}

type AwsLoadBalancerInput interface {
	pulumi.Input

	ToAwsLoadBalancerOutput() AwsLoadBalancerOutput
	ToAwsLoadBalancerOutputWithContext(ctx context.Context) AwsLoadBalancerOutput
}

func (*AwsLoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsLoadBalancer)(nil)).Elem()
}

func (i *AwsLoadBalancer) ToAwsLoadBalancerOutput() AwsLoadBalancerOutput {
	return i.ToAwsLoadBalancerOutputWithContext(context.Background())
}

func (i *AwsLoadBalancer) ToAwsLoadBalancerOutputWithContext(ctx context.Context) AwsLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLoadBalancerOutput)
}

// AwsLoadBalancerArrayInput is an input type that accepts AwsLoadBalancerArray and AwsLoadBalancerArrayOutput values.
// You can construct a concrete instance of `AwsLoadBalancerArrayInput` via:
//
//	AwsLoadBalancerArray{ AwsLoadBalancerArgs{...} }
type AwsLoadBalancerArrayInput interface {
	pulumi.Input

	ToAwsLoadBalancerArrayOutput() AwsLoadBalancerArrayOutput
	ToAwsLoadBalancerArrayOutputWithContext(context.Context) AwsLoadBalancerArrayOutput
}

type AwsLoadBalancerArray []AwsLoadBalancerInput

func (AwsLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsLoadBalancer)(nil)).Elem()
}

func (i AwsLoadBalancerArray) ToAwsLoadBalancerArrayOutput() AwsLoadBalancerArrayOutput {
	return i.ToAwsLoadBalancerArrayOutputWithContext(context.Background())
}

func (i AwsLoadBalancerArray) ToAwsLoadBalancerArrayOutputWithContext(ctx context.Context) AwsLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLoadBalancerArrayOutput)
}

// AwsLoadBalancerMapInput is an input type that accepts AwsLoadBalancerMap and AwsLoadBalancerMapOutput values.
// You can construct a concrete instance of `AwsLoadBalancerMapInput` via:
//
//	AwsLoadBalancerMap{ "key": AwsLoadBalancerArgs{...} }
type AwsLoadBalancerMapInput interface {
	pulumi.Input

	ToAwsLoadBalancerMapOutput() AwsLoadBalancerMapOutput
	ToAwsLoadBalancerMapOutputWithContext(context.Context) AwsLoadBalancerMapOutput
}

type AwsLoadBalancerMap map[string]AwsLoadBalancerInput

func (AwsLoadBalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsLoadBalancer)(nil)).Elem()
}

func (i AwsLoadBalancerMap) ToAwsLoadBalancerMapOutput() AwsLoadBalancerMapOutput {
	return i.ToAwsLoadBalancerMapOutputWithContext(context.Background())
}

func (i AwsLoadBalancerMap) ToAwsLoadBalancerMapOutputWithContext(ctx context.Context) AwsLoadBalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLoadBalancerMapOutput)
}

type AwsLoadBalancerOutput struct{ *pulumi.OutputState }

func (AwsLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsLoadBalancer)(nil)).Elem()
}

func (o AwsLoadBalancerOutput) ToAwsLoadBalancerOutput() AwsLoadBalancerOutput {
	return o
}

func (o AwsLoadBalancerOutput) ToAwsLoadBalancerOutputWithContext(ctx context.Context) AwsLoadBalancerOutput {
	return o
}

// The ARN of the load balancer.
func (o AwsLoadBalancerOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLoadBalancer) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The DNS name of the load balancer.
func (o AwsLoadBalancerOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLoadBalancer) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

// Whether or not the load balancer should drop invalid HTTP headers. Only valid for Load Balancers of type `Application`
func (o AwsLoadBalancerOutput) DropInvalidHeaders() pulumi.BoolOutput {
	return o.ApplyT(func(v *AwsLoadBalancer) pulumi.BoolOutput { return v.DropInvalidHeaders }).(pulumi.BoolOutput)
}

// Whether or not access logs should be enabled.
func (o AwsLoadBalancerOutput) EnableAccessLogs() pulumi.BoolOutput {
	return o.ApplyT(func(v *AwsLoadBalancer) pulumi.BoolOutput { return v.EnableAccessLogs }).(pulumi.BoolOutput)
}

// The full name of the load balancer.
func (o AwsLoadBalancerOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLoadBalancer) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

// Whether or not the load balancer should redirect HTTP to HTTPS. Only valid for Load Balancers of type `Application`
func (o AwsLoadBalancerOutput) HttpToHttpsRedirect() pulumi.BoolOutput {
	return o.ApplyT(func(v *AwsLoadBalancer) pulumi.BoolOutput { return v.HttpToHttpsRedirect }).(pulumi.BoolOutput)
}

// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
func (o AwsLoadBalancerOutput) IdleTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *AwsLoadBalancer) pulumi.IntOutput { return v.IdleTimeout }).(pulumi.IntOutput)
}

// Whether or not the load balancer is internal (non internet-facing).
func (o AwsLoadBalancerOutput) IsInternal() pulumi.BoolOutput {
	return o.ApplyT(func(v *AwsLoadBalancer) pulumi.BoolOutput { return v.IsInternal }).(pulumi.BoolOutput)
}

// The type of load balancer to create. Possible values are `Application` or `Network`. Defaults to `Application`.
func (o AwsLoadBalancerOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsLoadBalancer) pulumi.StringPtrOutput { return v.LoadBalancerType }).(pulumi.StringPtrOutput)
}

// The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
func (o AwsLoadBalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLoadBalancer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The tags assigned to this load balancer.
func (o AwsLoadBalancerOutput) Tags() AwsLoadBalancerTagArrayOutput {
	return o.ApplyT(func(v *AwsLoadBalancer) AwsLoadBalancerTagArrayOutput { return v.Tags }).(AwsLoadBalancerTagArrayOutput)
}

// The GUID of the tenant that the load balancer will be created in.
func (o AwsLoadBalancerOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLoadBalancer) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The ARN of a WAF to attach to the load balancer.
func (o AwsLoadBalancerOutput) WebAclId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLoadBalancer) pulumi.StringOutput { return v.WebAclId }).(pulumi.StringOutput)
}

type AwsLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (AwsLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsLoadBalancer)(nil)).Elem()
}

func (o AwsLoadBalancerArrayOutput) ToAwsLoadBalancerArrayOutput() AwsLoadBalancerArrayOutput {
	return o
}

func (o AwsLoadBalancerArrayOutput) ToAwsLoadBalancerArrayOutputWithContext(ctx context.Context) AwsLoadBalancerArrayOutput {
	return o
}

func (o AwsLoadBalancerArrayOutput) Index(i pulumi.IntInput) AwsLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsLoadBalancer {
		return vs[0].([]*AwsLoadBalancer)[vs[1].(int)]
	}).(AwsLoadBalancerOutput)
}

type AwsLoadBalancerMapOutput struct{ *pulumi.OutputState }

func (AwsLoadBalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsLoadBalancer)(nil)).Elem()
}

func (o AwsLoadBalancerMapOutput) ToAwsLoadBalancerMapOutput() AwsLoadBalancerMapOutput {
	return o
}

func (o AwsLoadBalancerMapOutput) ToAwsLoadBalancerMapOutputWithContext(ctx context.Context) AwsLoadBalancerMapOutput {
	return o
}

func (o AwsLoadBalancerMapOutput) MapIndex(k pulumi.StringInput) AwsLoadBalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsLoadBalancer {
		return vs[0].(map[string]*AwsLoadBalancer)[vs[1].(string)]
	}).(AwsLoadBalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLoadBalancerInput)(nil)).Elem(), &AwsLoadBalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLoadBalancerArrayInput)(nil)).Elem(), AwsLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLoadBalancerMapInput)(nil)).Elem(), AwsLoadBalancerMap{})
	pulumi.RegisterOutputType(AwsLoadBalancerOutput{})
	pulumi.RegisterOutputType(AwsLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(AwsLoadBalancerMapOutput{})
}
