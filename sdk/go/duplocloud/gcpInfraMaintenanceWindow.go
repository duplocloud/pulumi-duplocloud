// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `GcpInfraMaintenanceWindow` applies maintenance window to an gcp infrastructure
//
// ## Import
//
// Example: Importing an existing gcp infra maintenace window resource
//
//   - *INFRANAME* Name of the infrastructure
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/gcpInfraMaintenanceWindow:GcpInfraMaintenanceWindow infra maintenance-window/*INFRANAME*
// ```
type GcpInfraMaintenanceWindow struct {
	pulumi.CustomResourceState

	// Time window specified for daily maintenance operations. Specify 'start_time 'in RFC3339 format HH:MM, where HH : [00-23] and MM : [00-59] GMT
	DailyMaintenanceStartTime pulumi.StringPtrOutput `pulumi:"dailyMaintenanceStartTime"`
	// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows. A cluster can have up to 20 maintenance exclusions at a time
	Exclusions GcpInfraMaintenanceWindowExclusionArrayOutput `pulumi:"exclusions"`
	// The name of the infrastructure where maintenance windows need to be scheduled.
	InfraName       pulumi.StringOutput                               `pulumi:"infraName"`
	RecurringWindow GcpInfraMaintenanceWindowRecurringWindowPtrOutput `pulumi:"recurringWindow"`
}

// NewGcpInfraMaintenanceWindow registers a new resource with the given unique name, arguments, and options.
func NewGcpInfraMaintenanceWindow(ctx *pulumi.Context,
	name string, args *GcpInfraMaintenanceWindowArgs, opts ...pulumi.ResourceOption) (*GcpInfraMaintenanceWindow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InfraName == nil {
		return nil, errors.New("invalid value for required argument 'InfraName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GcpInfraMaintenanceWindow
	err := ctx.RegisterResource("duplocloud:index/gcpInfraMaintenanceWindow:GcpInfraMaintenanceWindow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcpInfraMaintenanceWindow gets an existing GcpInfraMaintenanceWindow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcpInfraMaintenanceWindow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpInfraMaintenanceWindowState, opts ...pulumi.ResourceOption) (*GcpInfraMaintenanceWindow, error) {
	var resource GcpInfraMaintenanceWindow
	err := ctx.ReadResource("duplocloud:index/gcpInfraMaintenanceWindow:GcpInfraMaintenanceWindow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcpInfraMaintenanceWindow resources.
type gcpInfraMaintenanceWindowState struct {
	// Time window specified for daily maintenance operations. Specify 'start_time 'in RFC3339 format HH:MM, where HH : [00-23] and MM : [00-59] GMT
	DailyMaintenanceStartTime *string `pulumi:"dailyMaintenanceStartTime"`
	// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows. A cluster can have up to 20 maintenance exclusions at a time
	Exclusions []GcpInfraMaintenanceWindowExclusion `pulumi:"exclusions"`
	// The name of the infrastructure where maintenance windows need to be scheduled.
	InfraName       *string                                   `pulumi:"infraName"`
	RecurringWindow *GcpInfraMaintenanceWindowRecurringWindow `pulumi:"recurringWindow"`
}

type GcpInfraMaintenanceWindowState struct {
	// Time window specified for daily maintenance operations. Specify 'start_time 'in RFC3339 format HH:MM, where HH : [00-23] and MM : [00-59] GMT
	DailyMaintenanceStartTime pulumi.StringPtrInput
	// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows. A cluster can have up to 20 maintenance exclusions at a time
	Exclusions GcpInfraMaintenanceWindowExclusionArrayInput
	// The name of the infrastructure where maintenance windows need to be scheduled.
	InfraName       pulumi.StringPtrInput
	RecurringWindow GcpInfraMaintenanceWindowRecurringWindowPtrInput
}

func (GcpInfraMaintenanceWindowState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpInfraMaintenanceWindowState)(nil)).Elem()
}

type gcpInfraMaintenanceWindowArgs struct {
	// Time window specified for daily maintenance operations. Specify 'start_time 'in RFC3339 format HH:MM, where HH : [00-23] and MM : [00-59] GMT
	DailyMaintenanceStartTime *string `pulumi:"dailyMaintenanceStartTime"`
	// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows. A cluster can have up to 20 maintenance exclusions at a time
	Exclusions []GcpInfraMaintenanceWindowExclusion `pulumi:"exclusions"`
	// The name of the infrastructure where maintenance windows need to be scheduled.
	InfraName       string                                    `pulumi:"infraName"`
	RecurringWindow *GcpInfraMaintenanceWindowRecurringWindow `pulumi:"recurringWindow"`
}

// The set of arguments for constructing a GcpInfraMaintenanceWindow resource.
type GcpInfraMaintenanceWindowArgs struct {
	// Time window specified for daily maintenance operations. Specify 'start_time 'in RFC3339 format HH:MM, where HH : [00-23] and MM : [00-59] GMT
	DailyMaintenanceStartTime pulumi.StringPtrInput
	// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows. A cluster can have up to 20 maintenance exclusions at a time
	Exclusions GcpInfraMaintenanceWindowExclusionArrayInput
	// The name of the infrastructure where maintenance windows need to be scheduled.
	InfraName       pulumi.StringInput
	RecurringWindow GcpInfraMaintenanceWindowRecurringWindowPtrInput
}

func (GcpInfraMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpInfraMaintenanceWindowArgs)(nil)).Elem()
}

type GcpInfraMaintenanceWindowInput interface {
	pulumi.Input

	ToGcpInfraMaintenanceWindowOutput() GcpInfraMaintenanceWindowOutput
	ToGcpInfraMaintenanceWindowOutputWithContext(ctx context.Context) GcpInfraMaintenanceWindowOutput
}

func (*GcpInfraMaintenanceWindow) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpInfraMaintenanceWindow)(nil)).Elem()
}

func (i *GcpInfraMaintenanceWindow) ToGcpInfraMaintenanceWindowOutput() GcpInfraMaintenanceWindowOutput {
	return i.ToGcpInfraMaintenanceWindowOutputWithContext(context.Background())
}

func (i *GcpInfraMaintenanceWindow) ToGcpInfraMaintenanceWindowOutputWithContext(ctx context.Context) GcpInfraMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpInfraMaintenanceWindowOutput)
}

// GcpInfraMaintenanceWindowArrayInput is an input type that accepts GcpInfraMaintenanceWindowArray and GcpInfraMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `GcpInfraMaintenanceWindowArrayInput` via:
//
//	GcpInfraMaintenanceWindowArray{ GcpInfraMaintenanceWindowArgs{...} }
type GcpInfraMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToGcpInfraMaintenanceWindowArrayOutput() GcpInfraMaintenanceWindowArrayOutput
	ToGcpInfraMaintenanceWindowArrayOutputWithContext(context.Context) GcpInfraMaintenanceWindowArrayOutput
}

type GcpInfraMaintenanceWindowArray []GcpInfraMaintenanceWindowInput

func (GcpInfraMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpInfraMaintenanceWindow)(nil)).Elem()
}

func (i GcpInfraMaintenanceWindowArray) ToGcpInfraMaintenanceWindowArrayOutput() GcpInfraMaintenanceWindowArrayOutput {
	return i.ToGcpInfraMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i GcpInfraMaintenanceWindowArray) ToGcpInfraMaintenanceWindowArrayOutputWithContext(ctx context.Context) GcpInfraMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpInfraMaintenanceWindowArrayOutput)
}

// GcpInfraMaintenanceWindowMapInput is an input type that accepts GcpInfraMaintenanceWindowMap and GcpInfraMaintenanceWindowMapOutput values.
// You can construct a concrete instance of `GcpInfraMaintenanceWindowMapInput` via:
//
//	GcpInfraMaintenanceWindowMap{ "key": GcpInfraMaintenanceWindowArgs{...} }
type GcpInfraMaintenanceWindowMapInput interface {
	pulumi.Input

	ToGcpInfraMaintenanceWindowMapOutput() GcpInfraMaintenanceWindowMapOutput
	ToGcpInfraMaintenanceWindowMapOutputWithContext(context.Context) GcpInfraMaintenanceWindowMapOutput
}

type GcpInfraMaintenanceWindowMap map[string]GcpInfraMaintenanceWindowInput

func (GcpInfraMaintenanceWindowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpInfraMaintenanceWindow)(nil)).Elem()
}

func (i GcpInfraMaintenanceWindowMap) ToGcpInfraMaintenanceWindowMapOutput() GcpInfraMaintenanceWindowMapOutput {
	return i.ToGcpInfraMaintenanceWindowMapOutputWithContext(context.Background())
}

func (i GcpInfraMaintenanceWindowMap) ToGcpInfraMaintenanceWindowMapOutputWithContext(ctx context.Context) GcpInfraMaintenanceWindowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpInfraMaintenanceWindowMapOutput)
}

type GcpInfraMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (GcpInfraMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpInfraMaintenanceWindow)(nil)).Elem()
}

func (o GcpInfraMaintenanceWindowOutput) ToGcpInfraMaintenanceWindowOutput() GcpInfraMaintenanceWindowOutput {
	return o
}

func (o GcpInfraMaintenanceWindowOutput) ToGcpInfraMaintenanceWindowOutputWithContext(ctx context.Context) GcpInfraMaintenanceWindowOutput {
	return o
}

// Time window specified for daily maintenance operations. Specify 'start_time 'in RFC3339 format HH:MM, where HH : [00-23] and MM : [00-59] GMT
func (o GcpInfraMaintenanceWindowOutput) DailyMaintenanceStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcpInfraMaintenanceWindow) pulumi.StringPtrOutput { return v.DailyMaintenanceStartTime }).(pulumi.StringPtrOutput)
}

// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows. A cluster can have up to 20 maintenance exclusions at a time
func (o GcpInfraMaintenanceWindowOutput) Exclusions() GcpInfraMaintenanceWindowExclusionArrayOutput {
	return o.ApplyT(func(v *GcpInfraMaintenanceWindow) GcpInfraMaintenanceWindowExclusionArrayOutput { return v.Exclusions }).(GcpInfraMaintenanceWindowExclusionArrayOutput)
}

// The name of the infrastructure where maintenance windows need to be scheduled.
func (o GcpInfraMaintenanceWindowOutput) InfraName() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpInfraMaintenanceWindow) pulumi.StringOutput { return v.InfraName }).(pulumi.StringOutput)
}

func (o GcpInfraMaintenanceWindowOutput) RecurringWindow() GcpInfraMaintenanceWindowRecurringWindowPtrOutput {
	return o.ApplyT(func(v *GcpInfraMaintenanceWindow) GcpInfraMaintenanceWindowRecurringWindowPtrOutput {
		return v.RecurringWindow
	}).(GcpInfraMaintenanceWindowRecurringWindowPtrOutput)
}

type GcpInfraMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (GcpInfraMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpInfraMaintenanceWindow)(nil)).Elem()
}

func (o GcpInfraMaintenanceWindowArrayOutput) ToGcpInfraMaintenanceWindowArrayOutput() GcpInfraMaintenanceWindowArrayOutput {
	return o
}

func (o GcpInfraMaintenanceWindowArrayOutput) ToGcpInfraMaintenanceWindowArrayOutputWithContext(ctx context.Context) GcpInfraMaintenanceWindowArrayOutput {
	return o
}

func (o GcpInfraMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) GcpInfraMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GcpInfraMaintenanceWindow {
		return vs[0].([]*GcpInfraMaintenanceWindow)[vs[1].(int)]
	}).(GcpInfraMaintenanceWindowOutput)
}

type GcpInfraMaintenanceWindowMapOutput struct{ *pulumi.OutputState }

func (GcpInfraMaintenanceWindowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpInfraMaintenanceWindow)(nil)).Elem()
}

func (o GcpInfraMaintenanceWindowMapOutput) ToGcpInfraMaintenanceWindowMapOutput() GcpInfraMaintenanceWindowMapOutput {
	return o
}

func (o GcpInfraMaintenanceWindowMapOutput) ToGcpInfraMaintenanceWindowMapOutputWithContext(ctx context.Context) GcpInfraMaintenanceWindowMapOutput {
	return o
}

func (o GcpInfraMaintenanceWindowMapOutput) MapIndex(k pulumi.StringInput) GcpInfraMaintenanceWindowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GcpInfraMaintenanceWindow {
		return vs[0].(map[string]*GcpInfraMaintenanceWindow)[vs[1].(string)]
	}).(GcpInfraMaintenanceWindowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcpInfraMaintenanceWindowInput)(nil)).Elem(), &GcpInfraMaintenanceWindow{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpInfraMaintenanceWindowArrayInput)(nil)).Elem(), GcpInfraMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpInfraMaintenanceWindowMapInput)(nil)).Elem(), GcpInfraMaintenanceWindowMap{})
	pulumi.RegisterOutputType(GcpInfraMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(GcpInfraMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(GcpInfraMaintenanceWindowMapOutput{})
}
