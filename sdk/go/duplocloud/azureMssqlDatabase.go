// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureMssqlDatabase` manages an azure mssql database in Duplo.
//
// ## Import
//
// Example: Importing an existing Azure MS SQL databse
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SERVER_NAME* is the short name of the Azure MS SQL Server
//
//   - *DB_NAME* is the short name of the Azure MS SQL Database
//
// ```sh
// $ pulumi import duplocloud:index/azureMssqlDatabase:AzureMssqlDatabase myMsSqlDb *TENANT_ID*/*SERVER_NAME*/*DB_NAME*
// ```
type AzureMssqlDatabase struct {
	pulumi.CustomResourceState

	// Specifies the collation of the database.
	Collation pulumi.StringOutput `pulumi:"collation"`
	// Specifies the id of the elastic pool containing this database.
	ElasticPoolId pulumi.StringPtrOutput `pulumi:"elasticPoolId"`
	// The name of the MS SQL Database.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the MS SQL Server on which to create the database.
	ServerName pulumi.StringOutput            `pulumi:"serverName"`
	Sku        AzureMssqlDatabaseSkuPtrOutput `pulumi:"sku"`
	// The GUID of the tenant that the azure mssql database will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewAzureMssqlDatabase registers a new resource with the given unique name, arguments, and options.
func NewAzureMssqlDatabase(ctx *pulumi.Context,
	name string, args *AzureMssqlDatabaseArgs, opts ...pulumi.ResourceOption) (*AzureMssqlDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureMssqlDatabase
	err := ctx.RegisterResource("duplocloud:index/azureMssqlDatabase:AzureMssqlDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureMssqlDatabase gets an existing AzureMssqlDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureMssqlDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureMssqlDatabaseState, opts ...pulumi.ResourceOption) (*AzureMssqlDatabase, error) {
	var resource AzureMssqlDatabase
	err := ctx.ReadResource("duplocloud:index/azureMssqlDatabase:AzureMssqlDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureMssqlDatabase resources.
type azureMssqlDatabaseState struct {
	// Specifies the collation of the database.
	Collation *string `pulumi:"collation"`
	// Specifies the id of the elastic pool containing this database.
	ElasticPoolId *string `pulumi:"elasticPoolId"`
	// The name of the MS SQL Database.
	Name *string `pulumi:"name"`
	// The name of the MS SQL Server on which to create the database.
	ServerName *string                `pulumi:"serverName"`
	Sku        *AzureMssqlDatabaseSku `pulumi:"sku"`
	// The GUID of the tenant that the azure mssql database will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type AzureMssqlDatabaseState struct {
	// Specifies the collation of the database.
	Collation pulumi.StringPtrInput
	// Specifies the id of the elastic pool containing this database.
	ElasticPoolId pulumi.StringPtrInput
	// The name of the MS SQL Database.
	Name pulumi.StringPtrInput
	// The name of the MS SQL Server on which to create the database.
	ServerName pulumi.StringPtrInput
	Sku        AzureMssqlDatabaseSkuPtrInput
	// The GUID of the tenant that the azure mssql database will be created in.
	TenantId pulumi.StringPtrInput
}

func (AzureMssqlDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureMssqlDatabaseState)(nil)).Elem()
}

type azureMssqlDatabaseArgs struct {
	// Specifies the collation of the database.
	Collation *string `pulumi:"collation"`
	// Specifies the id of the elastic pool containing this database.
	ElasticPoolId *string `pulumi:"elasticPoolId"`
	// The name of the MS SQL Database.
	Name *string `pulumi:"name"`
	// The name of the MS SQL Server on which to create the database.
	ServerName string                 `pulumi:"serverName"`
	Sku        *AzureMssqlDatabaseSku `pulumi:"sku"`
	// The GUID of the tenant that the azure mssql database will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AzureMssqlDatabase resource.
type AzureMssqlDatabaseArgs struct {
	// Specifies the collation of the database.
	Collation pulumi.StringPtrInput
	// Specifies the id of the elastic pool containing this database.
	ElasticPoolId pulumi.StringPtrInput
	// The name of the MS SQL Database.
	Name pulumi.StringPtrInput
	// The name of the MS SQL Server on which to create the database.
	ServerName pulumi.StringInput
	Sku        AzureMssqlDatabaseSkuPtrInput
	// The GUID of the tenant that the azure mssql database will be created in.
	TenantId pulumi.StringInput
}

func (AzureMssqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureMssqlDatabaseArgs)(nil)).Elem()
}

type AzureMssqlDatabaseInput interface {
	pulumi.Input

	ToAzureMssqlDatabaseOutput() AzureMssqlDatabaseOutput
	ToAzureMssqlDatabaseOutputWithContext(ctx context.Context) AzureMssqlDatabaseOutput
}

func (*AzureMssqlDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMssqlDatabase)(nil)).Elem()
}

func (i *AzureMssqlDatabase) ToAzureMssqlDatabaseOutput() AzureMssqlDatabaseOutput {
	return i.ToAzureMssqlDatabaseOutputWithContext(context.Background())
}

func (i *AzureMssqlDatabase) ToAzureMssqlDatabaseOutputWithContext(ctx context.Context) AzureMssqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMssqlDatabaseOutput)
}

// AzureMssqlDatabaseArrayInput is an input type that accepts AzureMssqlDatabaseArray and AzureMssqlDatabaseArrayOutput values.
// You can construct a concrete instance of `AzureMssqlDatabaseArrayInput` via:
//
//	AzureMssqlDatabaseArray{ AzureMssqlDatabaseArgs{...} }
type AzureMssqlDatabaseArrayInput interface {
	pulumi.Input

	ToAzureMssqlDatabaseArrayOutput() AzureMssqlDatabaseArrayOutput
	ToAzureMssqlDatabaseArrayOutputWithContext(context.Context) AzureMssqlDatabaseArrayOutput
}

type AzureMssqlDatabaseArray []AzureMssqlDatabaseInput

func (AzureMssqlDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureMssqlDatabase)(nil)).Elem()
}

func (i AzureMssqlDatabaseArray) ToAzureMssqlDatabaseArrayOutput() AzureMssqlDatabaseArrayOutput {
	return i.ToAzureMssqlDatabaseArrayOutputWithContext(context.Background())
}

func (i AzureMssqlDatabaseArray) ToAzureMssqlDatabaseArrayOutputWithContext(ctx context.Context) AzureMssqlDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMssqlDatabaseArrayOutput)
}

// AzureMssqlDatabaseMapInput is an input type that accepts AzureMssqlDatabaseMap and AzureMssqlDatabaseMapOutput values.
// You can construct a concrete instance of `AzureMssqlDatabaseMapInput` via:
//
//	AzureMssqlDatabaseMap{ "key": AzureMssqlDatabaseArgs{...} }
type AzureMssqlDatabaseMapInput interface {
	pulumi.Input

	ToAzureMssqlDatabaseMapOutput() AzureMssqlDatabaseMapOutput
	ToAzureMssqlDatabaseMapOutputWithContext(context.Context) AzureMssqlDatabaseMapOutput
}

type AzureMssqlDatabaseMap map[string]AzureMssqlDatabaseInput

func (AzureMssqlDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureMssqlDatabase)(nil)).Elem()
}

func (i AzureMssqlDatabaseMap) ToAzureMssqlDatabaseMapOutput() AzureMssqlDatabaseMapOutput {
	return i.ToAzureMssqlDatabaseMapOutputWithContext(context.Background())
}

func (i AzureMssqlDatabaseMap) ToAzureMssqlDatabaseMapOutputWithContext(ctx context.Context) AzureMssqlDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMssqlDatabaseMapOutput)
}

type AzureMssqlDatabaseOutput struct{ *pulumi.OutputState }

func (AzureMssqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMssqlDatabase)(nil)).Elem()
}

func (o AzureMssqlDatabaseOutput) ToAzureMssqlDatabaseOutput() AzureMssqlDatabaseOutput {
	return o
}

func (o AzureMssqlDatabaseOutput) ToAzureMssqlDatabaseOutputWithContext(ctx context.Context) AzureMssqlDatabaseOutput {
	return o
}

// Specifies the collation of the database.
func (o AzureMssqlDatabaseOutput) Collation() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMssqlDatabase) pulumi.StringOutput { return v.Collation }).(pulumi.StringOutput)
}

// Specifies the id of the elastic pool containing this database.
func (o AzureMssqlDatabaseOutput) ElasticPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMssqlDatabase) pulumi.StringPtrOutput { return v.ElasticPoolId }).(pulumi.StringPtrOutput)
}

// The name of the MS SQL Database.
func (o AzureMssqlDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMssqlDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the MS SQL Server on which to create the database.
func (o AzureMssqlDatabaseOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMssqlDatabase) pulumi.StringOutput { return v.ServerName }).(pulumi.StringOutput)
}

func (o AzureMssqlDatabaseOutput) Sku() AzureMssqlDatabaseSkuPtrOutput {
	return o.ApplyT(func(v *AzureMssqlDatabase) AzureMssqlDatabaseSkuPtrOutput { return v.Sku }).(AzureMssqlDatabaseSkuPtrOutput)
}

// The GUID of the tenant that the azure mssql database will be created in.
func (o AzureMssqlDatabaseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMssqlDatabase) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type AzureMssqlDatabaseArrayOutput struct{ *pulumi.OutputState }

func (AzureMssqlDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureMssqlDatabase)(nil)).Elem()
}

func (o AzureMssqlDatabaseArrayOutput) ToAzureMssqlDatabaseArrayOutput() AzureMssqlDatabaseArrayOutput {
	return o
}

func (o AzureMssqlDatabaseArrayOutput) ToAzureMssqlDatabaseArrayOutputWithContext(ctx context.Context) AzureMssqlDatabaseArrayOutput {
	return o
}

func (o AzureMssqlDatabaseArrayOutput) Index(i pulumi.IntInput) AzureMssqlDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureMssqlDatabase {
		return vs[0].([]*AzureMssqlDatabase)[vs[1].(int)]
	}).(AzureMssqlDatabaseOutput)
}

type AzureMssqlDatabaseMapOutput struct{ *pulumi.OutputState }

func (AzureMssqlDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureMssqlDatabase)(nil)).Elem()
}

func (o AzureMssqlDatabaseMapOutput) ToAzureMssqlDatabaseMapOutput() AzureMssqlDatabaseMapOutput {
	return o
}

func (o AzureMssqlDatabaseMapOutput) ToAzureMssqlDatabaseMapOutputWithContext(ctx context.Context) AzureMssqlDatabaseMapOutput {
	return o
}

func (o AzureMssqlDatabaseMapOutput) MapIndex(k pulumi.StringInput) AzureMssqlDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureMssqlDatabase {
		return vs[0].(map[string]*AzureMssqlDatabase)[vs[1].(string)]
	}).(AzureMssqlDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureMssqlDatabaseInput)(nil)).Elem(), &AzureMssqlDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureMssqlDatabaseArrayInput)(nil)).Elem(), AzureMssqlDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureMssqlDatabaseMapInput)(nil)).Elem(), AzureMssqlDatabaseMap{})
	pulumi.RegisterOutputType(AzureMssqlDatabaseOutput{})
	pulumi.RegisterOutputType(AzureMssqlDatabaseArrayOutput{})
	pulumi.RegisterOutputType(AzureMssqlDatabaseMapOutput{})
}
