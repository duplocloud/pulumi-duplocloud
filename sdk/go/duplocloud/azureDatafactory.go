// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureDatafactory` manages datafactory in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAzureDatafactory(ctx, "df", &duplocloud.AzureDatafactoryArgs{
//				TenantId:     myapp.TenantId,
//				Name:         pulumi.String("tf-dft2"),
//				PublicAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing Azure Datafactory
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *NAME* is the name of the the Azure Datafactory
//
// #
//
// import duplocloud_azure_datafactory.df *TENANT_ID*/datafactory/*NAME*
type AzureDatafactory struct {
	pulumi.CustomResourceState

	Etag     pulumi.StringOutput `pulumi:"etag"`
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the datafactory
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable or disable public access to datafactory Defaults to `false`.
	PublicAccess pulumi.BoolPtrOutput `pulumi:"publicAccess"`
	// The GUID of the tenant that the azure node pool will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	Type     pulumi.StringOutput `pulumi:"type"`
	Version  pulumi.StringOutput `pulumi:"version"`
}

// NewAzureDatafactory registers a new resource with the given unique name, arguments, and options.
func NewAzureDatafactory(ctx *pulumi.Context,
	name string, args *AzureDatafactoryArgs, opts ...pulumi.ResourceOption) (*AzureDatafactory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureDatafactory
	err := ctx.RegisterResource("duplocloud:index/azureDatafactory:AzureDatafactory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureDatafactory gets an existing AzureDatafactory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureDatafactory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureDatafactoryState, opts ...pulumi.ResourceOption) (*AzureDatafactory, error) {
	var resource AzureDatafactory
	err := ctx.ReadResource("duplocloud:index/azureDatafactory:AzureDatafactory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureDatafactory resources.
type azureDatafactoryState struct {
	Etag     *string `pulumi:"etag"`
	Location *string `pulumi:"location"`
	// The name of the datafactory
	Name *string `pulumi:"name"`
	// Enable or disable public access to datafactory Defaults to `false`.
	PublicAccess *bool `pulumi:"publicAccess"`
	// The GUID of the tenant that the azure node pool will be created in.
	TenantId *string `pulumi:"tenantId"`
	Type     *string `pulumi:"type"`
	Version  *string `pulumi:"version"`
}

type AzureDatafactoryState struct {
	Etag     pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	// The name of the datafactory
	Name pulumi.StringPtrInput
	// Enable or disable public access to datafactory Defaults to `false`.
	PublicAccess pulumi.BoolPtrInput
	// The GUID of the tenant that the azure node pool will be created in.
	TenantId pulumi.StringPtrInput
	Type     pulumi.StringPtrInput
	Version  pulumi.StringPtrInput
}

func (AzureDatafactoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureDatafactoryState)(nil)).Elem()
}

type azureDatafactoryArgs struct {
	// The name of the datafactory
	Name *string `pulumi:"name"`
	// Enable or disable public access to datafactory Defaults to `false`.
	PublicAccess *bool `pulumi:"publicAccess"`
	// The GUID of the tenant that the azure node pool will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AzureDatafactory resource.
type AzureDatafactoryArgs struct {
	// The name of the datafactory
	Name pulumi.StringPtrInput
	// Enable or disable public access to datafactory Defaults to `false`.
	PublicAccess pulumi.BoolPtrInput
	// The GUID of the tenant that the azure node pool will be created in.
	TenantId pulumi.StringInput
}

func (AzureDatafactoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureDatafactoryArgs)(nil)).Elem()
}

type AzureDatafactoryInput interface {
	pulumi.Input

	ToAzureDatafactoryOutput() AzureDatafactoryOutput
	ToAzureDatafactoryOutputWithContext(ctx context.Context) AzureDatafactoryOutput
}

func (*AzureDatafactory) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDatafactory)(nil)).Elem()
}

func (i *AzureDatafactory) ToAzureDatafactoryOutput() AzureDatafactoryOutput {
	return i.ToAzureDatafactoryOutputWithContext(context.Background())
}

func (i *AzureDatafactory) ToAzureDatafactoryOutputWithContext(ctx context.Context) AzureDatafactoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatafactoryOutput)
}

// AzureDatafactoryArrayInput is an input type that accepts AzureDatafactoryArray and AzureDatafactoryArrayOutput values.
// You can construct a concrete instance of `AzureDatafactoryArrayInput` via:
//
//	AzureDatafactoryArray{ AzureDatafactoryArgs{...} }
type AzureDatafactoryArrayInput interface {
	pulumi.Input

	ToAzureDatafactoryArrayOutput() AzureDatafactoryArrayOutput
	ToAzureDatafactoryArrayOutputWithContext(context.Context) AzureDatafactoryArrayOutput
}

type AzureDatafactoryArray []AzureDatafactoryInput

func (AzureDatafactoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureDatafactory)(nil)).Elem()
}

func (i AzureDatafactoryArray) ToAzureDatafactoryArrayOutput() AzureDatafactoryArrayOutput {
	return i.ToAzureDatafactoryArrayOutputWithContext(context.Background())
}

func (i AzureDatafactoryArray) ToAzureDatafactoryArrayOutputWithContext(ctx context.Context) AzureDatafactoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatafactoryArrayOutput)
}

// AzureDatafactoryMapInput is an input type that accepts AzureDatafactoryMap and AzureDatafactoryMapOutput values.
// You can construct a concrete instance of `AzureDatafactoryMapInput` via:
//
//	AzureDatafactoryMap{ "key": AzureDatafactoryArgs{...} }
type AzureDatafactoryMapInput interface {
	pulumi.Input

	ToAzureDatafactoryMapOutput() AzureDatafactoryMapOutput
	ToAzureDatafactoryMapOutputWithContext(context.Context) AzureDatafactoryMapOutput
}

type AzureDatafactoryMap map[string]AzureDatafactoryInput

func (AzureDatafactoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureDatafactory)(nil)).Elem()
}

func (i AzureDatafactoryMap) ToAzureDatafactoryMapOutput() AzureDatafactoryMapOutput {
	return i.ToAzureDatafactoryMapOutputWithContext(context.Background())
}

func (i AzureDatafactoryMap) ToAzureDatafactoryMapOutputWithContext(ctx context.Context) AzureDatafactoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatafactoryMapOutput)
}

type AzureDatafactoryOutput struct{ *pulumi.OutputState }

func (AzureDatafactoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDatafactory)(nil)).Elem()
}

func (o AzureDatafactoryOutput) ToAzureDatafactoryOutput() AzureDatafactoryOutput {
	return o
}

func (o AzureDatafactoryOutput) ToAzureDatafactoryOutputWithContext(ctx context.Context) AzureDatafactoryOutput {
	return o
}

func (o AzureDatafactoryOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureDatafactory) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o AzureDatafactoryOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureDatafactory) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the datafactory
func (o AzureDatafactoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureDatafactory) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable or disable public access to datafactory Defaults to `false`.
func (o AzureDatafactoryOutput) PublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureDatafactory) pulumi.BoolPtrOutput { return v.PublicAccess }).(pulumi.BoolPtrOutput)
}

// The GUID of the tenant that the azure node pool will be created in.
func (o AzureDatafactoryOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureDatafactory) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

func (o AzureDatafactoryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureDatafactory) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o AzureDatafactoryOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureDatafactory) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type AzureDatafactoryArrayOutput struct{ *pulumi.OutputState }

func (AzureDatafactoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureDatafactory)(nil)).Elem()
}

func (o AzureDatafactoryArrayOutput) ToAzureDatafactoryArrayOutput() AzureDatafactoryArrayOutput {
	return o
}

func (o AzureDatafactoryArrayOutput) ToAzureDatafactoryArrayOutputWithContext(ctx context.Context) AzureDatafactoryArrayOutput {
	return o
}

func (o AzureDatafactoryArrayOutput) Index(i pulumi.IntInput) AzureDatafactoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureDatafactory {
		return vs[0].([]*AzureDatafactory)[vs[1].(int)]
	}).(AzureDatafactoryOutput)
}

type AzureDatafactoryMapOutput struct{ *pulumi.OutputState }

func (AzureDatafactoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureDatafactory)(nil)).Elem()
}

func (o AzureDatafactoryMapOutput) ToAzureDatafactoryMapOutput() AzureDatafactoryMapOutput {
	return o
}

func (o AzureDatafactoryMapOutput) ToAzureDatafactoryMapOutputWithContext(ctx context.Context) AzureDatafactoryMapOutput {
	return o
}

func (o AzureDatafactoryMapOutput) MapIndex(k pulumi.StringInput) AzureDatafactoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureDatafactory {
		return vs[0].(map[string]*AzureDatafactory)[vs[1].(string)]
	}).(AzureDatafactoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureDatafactoryInput)(nil)).Elem(), &AzureDatafactory{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureDatafactoryArrayInput)(nil)).Elem(), AzureDatafactoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureDatafactoryMapInput)(nil)).Elem(), AzureDatafactoryMap{})
	pulumi.RegisterOutputType(AzureDatafactoryOutput{})
	pulumi.RegisterOutputType(AzureDatafactoryArrayOutput{})
	pulumi.RegisterOutputType(AzureDatafactoryMapOutput{})
}
