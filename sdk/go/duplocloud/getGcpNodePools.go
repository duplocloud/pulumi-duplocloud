// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `getGcpNodePools` retrieves list of node pools in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			app, err := duplocloud.GetGcpNodePools(ctx, &duplocloud.GetGcpNodePoolsArgs{
//				TenantId: "tenantid",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("nodepoolOutput", []duplocloud.GetGcpNodePoolsNodePoolMap{
//				"nodePools": app.NodePools,
//			})
//			return nil
//		})
//	}
//
// ```
func GetGcpNodePools(ctx *pulumi.Context, args *GetGcpNodePoolsArgs, opts ...pulumi.InvokeOption) (*GetGcpNodePoolsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGcpNodePoolsResult
	err := ctx.Invoke("duplocloud:index/getGcpNodePools:getGcpNodePools", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGcpNodePools.
type GetGcpNodePoolsArgs struct {
	// The GUID of the tenant that the node pool will be associated with.
	TenantId string `pulumi:"tenantId"`
}

// A collection of values returned by getGcpNodePools.
type GetGcpNodePoolsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id        string                    `pulumi:"id"`
	NodePools []GetGcpNodePoolsNodePool `pulumi:"nodePools"`
	// The GUID of the tenant that the node pool will be associated with.
	TenantId string `pulumi:"tenantId"`
}

func GetGcpNodePoolsOutput(ctx *pulumi.Context, args GetGcpNodePoolsOutputArgs, opts ...pulumi.InvokeOption) GetGcpNodePoolsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetGcpNodePoolsResultOutput, error) {
			args := v.(GetGcpNodePoolsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("duplocloud:index/getGcpNodePools:getGcpNodePools", args, GetGcpNodePoolsResultOutput{}, options).(GetGcpNodePoolsResultOutput), nil
		}).(GetGcpNodePoolsResultOutput)
}

// A collection of arguments for invoking getGcpNodePools.
type GetGcpNodePoolsOutputArgs struct {
	// The GUID of the tenant that the node pool will be associated with.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (GetGcpNodePoolsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGcpNodePoolsArgs)(nil)).Elem()
}

// A collection of values returned by getGcpNodePools.
type GetGcpNodePoolsResultOutput struct{ *pulumi.OutputState }

func (GetGcpNodePoolsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGcpNodePoolsResult)(nil)).Elem()
}

func (o GetGcpNodePoolsResultOutput) ToGetGcpNodePoolsResultOutput() GetGcpNodePoolsResultOutput {
	return o
}

func (o GetGcpNodePoolsResultOutput) ToGetGcpNodePoolsResultOutputWithContext(ctx context.Context) GetGcpNodePoolsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetGcpNodePoolsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGcpNodePoolsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetGcpNodePoolsResultOutput) NodePools() GetGcpNodePoolsNodePoolArrayOutput {
	return o.ApplyT(func(v GetGcpNodePoolsResult) []GetGcpNodePoolsNodePool { return v.NodePools }).(GetGcpNodePoolsNodePoolArrayOutput)
}

// The GUID of the tenant that the node pool will be associated with.
func (o GetGcpNodePoolsResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGcpNodePoolsResult) string { return v.TenantId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGcpNodePoolsResultOutput{})
}
