// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `TenantAccessGrant` manages a tenant access grant in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			grantor, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("tenant1"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			grantee, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("tenant2"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewTenantAccessGrant(ctx, "dynamodbGrant", &duplocloud.TenantAccessGrantArgs{
//				GranteeTenantId: pulumi.String(grantee.Id),
//				GrantorTenantId: pulumi.String(grantor.Id),
//				GrantArea:       pulumi.String("dynamodb"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import duplocloud:index/tenantAccessGrant:TenantAccessGrant dynamodbGrant *GRANEE_TENANT_ID*/*GRANTOR_TENANT_ID*/*GRANTED_AREA*
// ```
type TenantAccessGrant struct {
	pulumi.CustomResourceState

	// The area the grant allows access to. Currently supported: ['s3', 'dynamodb', 'kms']
	GrantArea pulumi.StringOutput `pulumi:"grantArea"`
	// The GUID of the tenant that will receive the granted access.
	GranteeTenantId pulumi.StringOutput `pulumi:"granteeTenantId"`
	// The GUID of the tenant that will grant the access.
	GrantorTenantId pulumi.StringOutput `pulumi:"grantorTenantId"`
}

// NewTenantAccessGrant registers a new resource with the given unique name, arguments, and options.
func NewTenantAccessGrant(ctx *pulumi.Context,
	name string, args *TenantAccessGrantArgs, opts ...pulumi.ResourceOption) (*TenantAccessGrant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GrantArea == nil {
		return nil, errors.New("invalid value for required argument 'GrantArea'")
	}
	if args.GranteeTenantId == nil {
		return nil, errors.New("invalid value for required argument 'GranteeTenantId'")
	}
	if args.GrantorTenantId == nil {
		return nil, errors.New("invalid value for required argument 'GrantorTenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TenantAccessGrant
	err := ctx.RegisterResource("duplocloud:index/tenantAccessGrant:TenantAccessGrant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTenantAccessGrant gets an existing TenantAccessGrant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTenantAccessGrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TenantAccessGrantState, opts ...pulumi.ResourceOption) (*TenantAccessGrant, error) {
	var resource TenantAccessGrant
	err := ctx.ReadResource("duplocloud:index/tenantAccessGrant:TenantAccessGrant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TenantAccessGrant resources.
type tenantAccessGrantState struct {
	// The area the grant allows access to. Currently supported: ['s3', 'dynamodb', 'kms']
	GrantArea *string `pulumi:"grantArea"`
	// The GUID of the tenant that will receive the granted access.
	GranteeTenantId *string `pulumi:"granteeTenantId"`
	// The GUID of the tenant that will grant the access.
	GrantorTenantId *string `pulumi:"grantorTenantId"`
}

type TenantAccessGrantState struct {
	// The area the grant allows access to. Currently supported: ['s3', 'dynamodb', 'kms']
	GrantArea pulumi.StringPtrInput
	// The GUID of the tenant that will receive the granted access.
	GranteeTenantId pulumi.StringPtrInput
	// The GUID of the tenant that will grant the access.
	GrantorTenantId pulumi.StringPtrInput
}

func (TenantAccessGrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantAccessGrantState)(nil)).Elem()
}

type tenantAccessGrantArgs struct {
	// The area the grant allows access to. Currently supported: ['s3', 'dynamodb', 'kms']
	GrantArea string `pulumi:"grantArea"`
	// The GUID of the tenant that will receive the granted access.
	GranteeTenantId string `pulumi:"granteeTenantId"`
	// The GUID of the tenant that will grant the access.
	GrantorTenantId string `pulumi:"grantorTenantId"`
}

// The set of arguments for constructing a TenantAccessGrant resource.
type TenantAccessGrantArgs struct {
	// The area the grant allows access to. Currently supported: ['s3', 'dynamodb', 'kms']
	GrantArea pulumi.StringInput
	// The GUID of the tenant that will receive the granted access.
	GranteeTenantId pulumi.StringInput
	// The GUID of the tenant that will grant the access.
	GrantorTenantId pulumi.StringInput
}

func (TenantAccessGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantAccessGrantArgs)(nil)).Elem()
}

type TenantAccessGrantInput interface {
	pulumi.Input

	ToTenantAccessGrantOutput() TenantAccessGrantOutput
	ToTenantAccessGrantOutputWithContext(ctx context.Context) TenantAccessGrantOutput
}

func (*TenantAccessGrant) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantAccessGrant)(nil)).Elem()
}

func (i *TenantAccessGrant) ToTenantAccessGrantOutput() TenantAccessGrantOutput {
	return i.ToTenantAccessGrantOutputWithContext(context.Background())
}

func (i *TenantAccessGrant) ToTenantAccessGrantOutputWithContext(ctx context.Context) TenantAccessGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantAccessGrantOutput)
}

// TenantAccessGrantArrayInput is an input type that accepts TenantAccessGrantArray and TenantAccessGrantArrayOutput values.
// You can construct a concrete instance of `TenantAccessGrantArrayInput` via:
//
//	TenantAccessGrantArray{ TenantAccessGrantArgs{...} }
type TenantAccessGrantArrayInput interface {
	pulumi.Input

	ToTenantAccessGrantArrayOutput() TenantAccessGrantArrayOutput
	ToTenantAccessGrantArrayOutputWithContext(context.Context) TenantAccessGrantArrayOutput
}

type TenantAccessGrantArray []TenantAccessGrantInput

func (TenantAccessGrantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TenantAccessGrant)(nil)).Elem()
}

func (i TenantAccessGrantArray) ToTenantAccessGrantArrayOutput() TenantAccessGrantArrayOutput {
	return i.ToTenantAccessGrantArrayOutputWithContext(context.Background())
}

func (i TenantAccessGrantArray) ToTenantAccessGrantArrayOutputWithContext(ctx context.Context) TenantAccessGrantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantAccessGrantArrayOutput)
}

// TenantAccessGrantMapInput is an input type that accepts TenantAccessGrantMap and TenantAccessGrantMapOutput values.
// You can construct a concrete instance of `TenantAccessGrantMapInput` via:
//
//	TenantAccessGrantMap{ "key": TenantAccessGrantArgs{...} }
type TenantAccessGrantMapInput interface {
	pulumi.Input

	ToTenantAccessGrantMapOutput() TenantAccessGrantMapOutput
	ToTenantAccessGrantMapOutputWithContext(context.Context) TenantAccessGrantMapOutput
}

type TenantAccessGrantMap map[string]TenantAccessGrantInput

func (TenantAccessGrantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TenantAccessGrant)(nil)).Elem()
}

func (i TenantAccessGrantMap) ToTenantAccessGrantMapOutput() TenantAccessGrantMapOutput {
	return i.ToTenantAccessGrantMapOutputWithContext(context.Background())
}

func (i TenantAccessGrantMap) ToTenantAccessGrantMapOutputWithContext(ctx context.Context) TenantAccessGrantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantAccessGrantMapOutput)
}

type TenantAccessGrantOutput struct{ *pulumi.OutputState }

func (TenantAccessGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantAccessGrant)(nil)).Elem()
}

func (o TenantAccessGrantOutput) ToTenantAccessGrantOutput() TenantAccessGrantOutput {
	return o
}

func (o TenantAccessGrantOutput) ToTenantAccessGrantOutputWithContext(ctx context.Context) TenantAccessGrantOutput {
	return o
}

// The area the grant allows access to. Currently supported: ['s3', 'dynamodb', 'kms']
func (o TenantAccessGrantOutput) GrantArea() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantAccessGrant) pulumi.StringOutput { return v.GrantArea }).(pulumi.StringOutput)
}

// The GUID of the tenant that will receive the granted access.
func (o TenantAccessGrantOutput) GranteeTenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantAccessGrant) pulumi.StringOutput { return v.GranteeTenantId }).(pulumi.StringOutput)
}

// The GUID of the tenant that will grant the access.
func (o TenantAccessGrantOutput) GrantorTenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantAccessGrant) pulumi.StringOutput { return v.GrantorTenantId }).(pulumi.StringOutput)
}

type TenantAccessGrantArrayOutput struct{ *pulumi.OutputState }

func (TenantAccessGrantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TenantAccessGrant)(nil)).Elem()
}

func (o TenantAccessGrantArrayOutput) ToTenantAccessGrantArrayOutput() TenantAccessGrantArrayOutput {
	return o
}

func (o TenantAccessGrantArrayOutput) ToTenantAccessGrantArrayOutputWithContext(ctx context.Context) TenantAccessGrantArrayOutput {
	return o
}

func (o TenantAccessGrantArrayOutput) Index(i pulumi.IntInput) TenantAccessGrantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TenantAccessGrant {
		return vs[0].([]*TenantAccessGrant)[vs[1].(int)]
	}).(TenantAccessGrantOutput)
}

type TenantAccessGrantMapOutput struct{ *pulumi.OutputState }

func (TenantAccessGrantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TenantAccessGrant)(nil)).Elem()
}

func (o TenantAccessGrantMapOutput) ToTenantAccessGrantMapOutput() TenantAccessGrantMapOutput {
	return o
}

func (o TenantAccessGrantMapOutput) ToTenantAccessGrantMapOutputWithContext(ctx context.Context) TenantAccessGrantMapOutput {
	return o
}

func (o TenantAccessGrantMapOutput) MapIndex(k pulumi.StringInput) TenantAccessGrantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TenantAccessGrant {
		return vs[0].(map[string]*TenantAccessGrant)[vs[1].(string)]
	}).(TenantAccessGrantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TenantAccessGrantInput)(nil)).Elem(), &TenantAccessGrant{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantAccessGrantArrayInput)(nil)).Elem(), TenantAccessGrantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantAccessGrantMapInput)(nil)).Elem(), TenantAccessGrantMap{})
	pulumi.RegisterOutputType(TenantAccessGrantOutput{})
	pulumi.RegisterOutputType(TenantAccessGrantArrayOutput{})
	pulumi.RegisterOutputType(TenantAccessGrantMapOutput{})
}
