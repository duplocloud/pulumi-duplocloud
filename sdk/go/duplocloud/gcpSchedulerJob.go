// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `GcpSchedulerJob` manages a GCP scheduler job in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			// A simple scheduler job with an HTTPS target, running at 9 am daily.
//			_, err = duplocloud.NewGcpSchedulerJob(ctx, "myjob", &duplocloud.GcpSchedulerJobArgs{
//				TenantId: myapp.TenantId,
//				Name:     pulumi.String("myjob"),
//				Schedule: pulumi.String("* 9 * * *"),
//				Timezone: pulumi.String("America/New_York"),
//				HttpTarget: &duplocloud.GcpSchedulerJobHttpTargetArgs{
//					Method: pulumi.String("GET"),
//					Uri:    pulumi.String("https://www.google.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing GCP scheduler job
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the GCP scheduler job
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/gcpSchedulerJob:GcpSchedulerJob myjob *TENANT_ID*/*SHORT_NAME*
// ```
type GcpSchedulerJob struct {
	pulumi.CustomResourceState

	// Specifies an App Engine target for the scheduler job.
	AppEngineTarget GcpSchedulerJobAppEngineTargetPtrOutput `pulumi:"appEngineTarget"`
	// The attempt deadline for the scheduler job.
	AttemptDeadline pulumi.StringOutput `pulumi:"attemptDeadline"`
	// The description of the scheduler job.
	Description pulumi.StringOutput `pulumi:"description"`
	// The full name of the scheduler job.
	Fullname pulumi.StringOutput `pulumi:"fullname"`
	// Specifies an HTTP target for the scheduler job.
	HttpTarget GcpSchedulerJobHttpTargetPtrOutput `pulumi:"httpTarget"`
	// The short name of the scheduler job.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies a pubsub target for the scheduler job.
	PubsubTarget GcpSchedulerJobPubsubTargetPtrOutput `pulumi:"pubsubTarget"`
	// The desired schedule, in cron format.
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// The SelfLink of the scheduler job.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The GUID of the tenant that the scheduler job will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The timezone used to determine the schedule, in UNIX format
	Timezone pulumi.StringOutput `pulumi:"timezone"`
}

// NewGcpSchedulerJob registers a new resource with the given unique name, arguments, and options.
func NewGcpSchedulerJob(ctx *pulumi.Context,
	name string, args *GcpSchedulerJobArgs, opts ...pulumi.ResourceOption) (*GcpSchedulerJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.Timezone == nil {
		return nil, errors.New("invalid value for required argument 'Timezone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GcpSchedulerJob
	err := ctx.RegisterResource("duplocloud:index/gcpSchedulerJob:GcpSchedulerJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcpSchedulerJob gets an existing GcpSchedulerJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcpSchedulerJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpSchedulerJobState, opts ...pulumi.ResourceOption) (*GcpSchedulerJob, error) {
	var resource GcpSchedulerJob
	err := ctx.ReadResource("duplocloud:index/gcpSchedulerJob:GcpSchedulerJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcpSchedulerJob resources.
type gcpSchedulerJobState struct {
	// Specifies an App Engine target for the scheduler job.
	AppEngineTarget *GcpSchedulerJobAppEngineTarget `pulumi:"appEngineTarget"`
	// The attempt deadline for the scheduler job.
	AttemptDeadline *string `pulumi:"attemptDeadline"`
	// The description of the scheduler job.
	Description *string `pulumi:"description"`
	// The full name of the scheduler job.
	Fullname *string `pulumi:"fullname"`
	// Specifies an HTTP target for the scheduler job.
	HttpTarget *GcpSchedulerJobHttpTarget `pulumi:"httpTarget"`
	// The short name of the scheduler job.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// Specifies a pubsub target for the scheduler job.
	PubsubTarget *GcpSchedulerJobPubsubTarget `pulumi:"pubsubTarget"`
	// The desired schedule, in cron format.
	Schedule *string `pulumi:"schedule"`
	// The SelfLink of the scheduler job.
	SelfLink *string `pulumi:"selfLink"`
	// The GUID of the tenant that the scheduler job will be created in.
	TenantId *string `pulumi:"tenantId"`
	// The timezone used to determine the schedule, in UNIX format
	Timezone *string `pulumi:"timezone"`
}

type GcpSchedulerJobState struct {
	// Specifies an App Engine target for the scheduler job.
	AppEngineTarget GcpSchedulerJobAppEngineTargetPtrInput
	// The attempt deadline for the scheduler job.
	AttemptDeadline pulumi.StringPtrInput
	// The description of the scheduler job.
	Description pulumi.StringPtrInput
	// The full name of the scheduler job.
	Fullname pulumi.StringPtrInput
	// Specifies an HTTP target for the scheduler job.
	HttpTarget GcpSchedulerJobHttpTargetPtrInput
	// The short name of the scheduler job.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// Specifies a pubsub target for the scheduler job.
	PubsubTarget GcpSchedulerJobPubsubTargetPtrInput
	// The desired schedule, in cron format.
	Schedule pulumi.StringPtrInput
	// The SelfLink of the scheduler job.
	SelfLink pulumi.StringPtrInput
	// The GUID of the tenant that the scheduler job will be created in.
	TenantId pulumi.StringPtrInput
	// The timezone used to determine the schedule, in UNIX format
	Timezone pulumi.StringPtrInput
}

func (GcpSchedulerJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpSchedulerJobState)(nil)).Elem()
}

type gcpSchedulerJobArgs struct {
	// Specifies an App Engine target for the scheduler job.
	AppEngineTarget *GcpSchedulerJobAppEngineTarget `pulumi:"appEngineTarget"`
	// The attempt deadline for the scheduler job.
	AttemptDeadline *string `pulumi:"attemptDeadline"`
	// The description of the scheduler job.
	Description *string `pulumi:"description"`
	// Specifies an HTTP target for the scheduler job.
	HttpTarget *GcpSchedulerJobHttpTarget `pulumi:"httpTarget"`
	// The short name of the scheduler job.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// Specifies a pubsub target for the scheduler job.
	PubsubTarget *GcpSchedulerJobPubsubTarget `pulumi:"pubsubTarget"`
	// The desired schedule, in cron format.
	Schedule string `pulumi:"schedule"`
	// The GUID of the tenant that the scheduler job will be created in.
	TenantId string `pulumi:"tenantId"`
	// The timezone used to determine the schedule, in UNIX format
	Timezone string `pulumi:"timezone"`
}

// The set of arguments for constructing a GcpSchedulerJob resource.
type GcpSchedulerJobArgs struct {
	// Specifies an App Engine target for the scheduler job.
	AppEngineTarget GcpSchedulerJobAppEngineTargetPtrInput
	// The attempt deadline for the scheduler job.
	AttemptDeadline pulumi.StringPtrInput
	// The description of the scheduler job.
	Description pulumi.StringPtrInput
	// Specifies an HTTP target for the scheduler job.
	HttpTarget GcpSchedulerJobHttpTargetPtrInput
	// The short name of the scheduler job.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// Specifies a pubsub target for the scheduler job.
	PubsubTarget GcpSchedulerJobPubsubTargetPtrInput
	// The desired schedule, in cron format.
	Schedule pulumi.StringInput
	// The GUID of the tenant that the scheduler job will be created in.
	TenantId pulumi.StringInput
	// The timezone used to determine the schedule, in UNIX format
	Timezone pulumi.StringInput
}

func (GcpSchedulerJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpSchedulerJobArgs)(nil)).Elem()
}

type GcpSchedulerJobInput interface {
	pulumi.Input

	ToGcpSchedulerJobOutput() GcpSchedulerJobOutput
	ToGcpSchedulerJobOutputWithContext(ctx context.Context) GcpSchedulerJobOutput
}

func (*GcpSchedulerJob) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpSchedulerJob)(nil)).Elem()
}

func (i *GcpSchedulerJob) ToGcpSchedulerJobOutput() GcpSchedulerJobOutput {
	return i.ToGcpSchedulerJobOutputWithContext(context.Background())
}

func (i *GcpSchedulerJob) ToGcpSchedulerJobOutputWithContext(ctx context.Context) GcpSchedulerJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpSchedulerJobOutput)
}

// GcpSchedulerJobArrayInput is an input type that accepts GcpSchedulerJobArray and GcpSchedulerJobArrayOutput values.
// You can construct a concrete instance of `GcpSchedulerJobArrayInput` via:
//
//	GcpSchedulerJobArray{ GcpSchedulerJobArgs{...} }
type GcpSchedulerJobArrayInput interface {
	pulumi.Input

	ToGcpSchedulerJobArrayOutput() GcpSchedulerJobArrayOutput
	ToGcpSchedulerJobArrayOutputWithContext(context.Context) GcpSchedulerJobArrayOutput
}

type GcpSchedulerJobArray []GcpSchedulerJobInput

func (GcpSchedulerJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpSchedulerJob)(nil)).Elem()
}

func (i GcpSchedulerJobArray) ToGcpSchedulerJobArrayOutput() GcpSchedulerJobArrayOutput {
	return i.ToGcpSchedulerJobArrayOutputWithContext(context.Background())
}

func (i GcpSchedulerJobArray) ToGcpSchedulerJobArrayOutputWithContext(ctx context.Context) GcpSchedulerJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpSchedulerJobArrayOutput)
}

// GcpSchedulerJobMapInput is an input type that accepts GcpSchedulerJobMap and GcpSchedulerJobMapOutput values.
// You can construct a concrete instance of `GcpSchedulerJobMapInput` via:
//
//	GcpSchedulerJobMap{ "key": GcpSchedulerJobArgs{...} }
type GcpSchedulerJobMapInput interface {
	pulumi.Input

	ToGcpSchedulerJobMapOutput() GcpSchedulerJobMapOutput
	ToGcpSchedulerJobMapOutputWithContext(context.Context) GcpSchedulerJobMapOutput
}

type GcpSchedulerJobMap map[string]GcpSchedulerJobInput

func (GcpSchedulerJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpSchedulerJob)(nil)).Elem()
}

func (i GcpSchedulerJobMap) ToGcpSchedulerJobMapOutput() GcpSchedulerJobMapOutput {
	return i.ToGcpSchedulerJobMapOutputWithContext(context.Background())
}

func (i GcpSchedulerJobMap) ToGcpSchedulerJobMapOutputWithContext(ctx context.Context) GcpSchedulerJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpSchedulerJobMapOutput)
}

type GcpSchedulerJobOutput struct{ *pulumi.OutputState }

func (GcpSchedulerJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpSchedulerJob)(nil)).Elem()
}

func (o GcpSchedulerJobOutput) ToGcpSchedulerJobOutput() GcpSchedulerJobOutput {
	return o
}

func (o GcpSchedulerJobOutput) ToGcpSchedulerJobOutputWithContext(ctx context.Context) GcpSchedulerJobOutput {
	return o
}

// Specifies an App Engine target for the scheduler job.
func (o GcpSchedulerJobOutput) AppEngineTarget() GcpSchedulerJobAppEngineTargetPtrOutput {
	return o.ApplyT(func(v *GcpSchedulerJob) GcpSchedulerJobAppEngineTargetPtrOutput { return v.AppEngineTarget }).(GcpSchedulerJobAppEngineTargetPtrOutput)
}

// The attempt deadline for the scheduler job.
func (o GcpSchedulerJobOutput) AttemptDeadline() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpSchedulerJob) pulumi.StringOutput { return v.AttemptDeadline }).(pulumi.StringOutput)
}

// The description of the scheduler job.
func (o GcpSchedulerJobOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpSchedulerJob) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The full name of the scheduler job.
func (o GcpSchedulerJobOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpSchedulerJob) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

// Specifies an HTTP target for the scheduler job.
func (o GcpSchedulerJobOutput) HttpTarget() GcpSchedulerJobHttpTargetPtrOutput {
	return o.ApplyT(func(v *GcpSchedulerJob) GcpSchedulerJobHttpTargetPtrOutput { return v.HttpTarget }).(GcpSchedulerJobHttpTargetPtrOutput)
}

// The short name of the scheduler job.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
func (o GcpSchedulerJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpSchedulerJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies a pubsub target for the scheduler job.
func (o GcpSchedulerJobOutput) PubsubTarget() GcpSchedulerJobPubsubTargetPtrOutput {
	return o.ApplyT(func(v *GcpSchedulerJob) GcpSchedulerJobPubsubTargetPtrOutput { return v.PubsubTarget }).(GcpSchedulerJobPubsubTargetPtrOutput)
}

// The desired schedule, in cron format.
func (o GcpSchedulerJobOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpSchedulerJob) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

// The SelfLink of the scheduler job.
func (o GcpSchedulerJobOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpSchedulerJob) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The GUID of the tenant that the scheduler job will be created in.
func (o GcpSchedulerJobOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpSchedulerJob) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The timezone used to determine the schedule, in UNIX format
func (o GcpSchedulerJobOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpSchedulerJob) pulumi.StringOutput { return v.Timezone }).(pulumi.StringOutput)
}

type GcpSchedulerJobArrayOutput struct{ *pulumi.OutputState }

func (GcpSchedulerJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpSchedulerJob)(nil)).Elem()
}

func (o GcpSchedulerJobArrayOutput) ToGcpSchedulerJobArrayOutput() GcpSchedulerJobArrayOutput {
	return o
}

func (o GcpSchedulerJobArrayOutput) ToGcpSchedulerJobArrayOutputWithContext(ctx context.Context) GcpSchedulerJobArrayOutput {
	return o
}

func (o GcpSchedulerJobArrayOutput) Index(i pulumi.IntInput) GcpSchedulerJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GcpSchedulerJob {
		return vs[0].([]*GcpSchedulerJob)[vs[1].(int)]
	}).(GcpSchedulerJobOutput)
}

type GcpSchedulerJobMapOutput struct{ *pulumi.OutputState }

func (GcpSchedulerJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpSchedulerJob)(nil)).Elem()
}

func (o GcpSchedulerJobMapOutput) ToGcpSchedulerJobMapOutput() GcpSchedulerJobMapOutput {
	return o
}

func (o GcpSchedulerJobMapOutput) ToGcpSchedulerJobMapOutputWithContext(ctx context.Context) GcpSchedulerJobMapOutput {
	return o
}

func (o GcpSchedulerJobMapOutput) MapIndex(k pulumi.StringInput) GcpSchedulerJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GcpSchedulerJob {
		return vs[0].(map[string]*GcpSchedulerJob)[vs[1].(string)]
	}).(GcpSchedulerJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcpSchedulerJobInput)(nil)).Elem(), &GcpSchedulerJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpSchedulerJobArrayInput)(nil)).Elem(), GcpSchedulerJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpSchedulerJobMapInput)(nil)).Elem(), GcpSchedulerJobMap{})
	pulumi.RegisterOutputType(GcpSchedulerJobOutput{})
	pulumi.RegisterOutputType(GcpSchedulerJobArrayOutput{})
	pulumi.RegisterOutputType(GcpSchedulerJobMapOutput{})
}
