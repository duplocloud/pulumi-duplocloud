// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureSqlManagedDatabase` manages an azure sql managed database in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAzureSqlManagedDatabase(ctx, "mydb", &duplocloud.AzureSqlManagedDatabaseArgs{
//				TenantId:                   myapp.TenantId,
//				Name:                       pulumi.String("db-test"),
//				AdministratorLogin:         pulumi.String("testroot"),
//				AdministratorLoginPassword: pulumi.String("P@ssword12345"),
//				MinimumTlsVersion:          pulumi.String("1.2"),
//				SkuName:                    pulumi.String("GP_Gen5"),
//				Vcores:                     pulumi.Int(4),
//				StorageSizeInGb:            pulumi.Int(32),
//				SubnetId:                   pulumi.String("/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing Azure Sql Managed Database
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the Azure Sql Managed Database
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/azureSqlManagedDatabase:AzureSqlManagedDatabase myManagedSQLDatabase *TENANT_ID*/*SHORT_NAME*
// ```
type AzureSqlManagedDatabase struct {
	pulumi.CustomResourceState

	// The administrator login name for the new server. Changing this forces a new resource to be created.
	AdministratorLogin pulumi.StringOutput `pulumi:"administratorLogin"`
	// The password associated with the `administratorLogin` user. Needs to comply with Azure's Password Policy
	AdministratorLoginPassword pulumi.StringOutput `pulumi:"administratorLoginPassword"`
	Collation                  pulumi.StringOutput `pulumi:"collation"`
	// The fully qualified domain name of the sql managed instance.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// The Minimum TLS Version for all SQL managed Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.
	MinimumTlsVersion pulumi.StringOutput `pulumi:"minimumTlsVersion"`
	// The name of the SQL Managed Instance. This needs to be globally unique within Azure.
	Name pulumi.StringOutput `pulumi:"name"`
	// Is the public data endpoint enabled? Default value is `false`.
	PublicDataEndpointEnabled pulumi.BoolOutput `pulumi:"publicDataEndpointEnabled"`
	// Specifies the SKU Name for the SQL Managed Instance. Valid values include `GP_Gen4`, `GP_Gen5`, `BC_Gen4`, `BC_Gen5`. Changing this forces a new resource to be created.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
	// Maximum storage space for your instance. It should be a multiple of 32GB.
	StorageSizeInGb pulumi.IntOutput `pulumi:"storageSizeInGb"`
	// The subnet resource id that the SQL Managed Instance will be associated with.
	SubnetId pulumi.StringOutput    `pulumi:"subnetId"`
	Tags     pulumi.StringMapOutput `pulumi:"tags"`
	// The GUID of the tenant that the azure sql managed database will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Number of cores that should be assigned to your instance. Values can be `8`, `16`, or `24` if `skuName` is `GP_Gen4`, or `8`, `16`, `24`, `32`, or `40` if `skuName` is `GP_Gen5`
	Vcores pulumi.IntOutput `pulumi:"vcores"`
}

// NewAzureSqlManagedDatabase registers a new resource with the given unique name, arguments, and options.
func NewAzureSqlManagedDatabase(ctx *pulumi.Context,
	name string, args *AzureSqlManagedDatabaseArgs, opts ...pulumi.ResourceOption) (*AzureSqlManagedDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdministratorLogin == nil {
		return nil, errors.New("invalid value for required argument 'AdministratorLogin'")
	}
	if args.AdministratorLoginPassword == nil {
		return nil, errors.New("invalid value for required argument 'AdministratorLoginPassword'")
	}
	if args.SkuName == nil {
		return nil, errors.New("invalid value for required argument 'SkuName'")
	}
	if args.StorageSizeInGb == nil {
		return nil, errors.New("invalid value for required argument 'StorageSizeInGb'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.Vcores == nil {
		return nil, errors.New("invalid value for required argument 'Vcores'")
	}
	if args.AdministratorLoginPassword != nil {
		args.AdministratorLoginPassword = pulumi.ToSecret(args.AdministratorLoginPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"administratorLoginPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureSqlManagedDatabase
	err := ctx.RegisterResource("duplocloud:index/azureSqlManagedDatabase:AzureSqlManagedDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureSqlManagedDatabase gets an existing AzureSqlManagedDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureSqlManagedDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureSqlManagedDatabaseState, opts ...pulumi.ResourceOption) (*AzureSqlManagedDatabase, error) {
	var resource AzureSqlManagedDatabase
	err := ctx.ReadResource("duplocloud:index/azureSqlManagedDatabase:AzureSqlManagedDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureSqlManagedDatabase resources.
type azureSqlManagedDatabaseState struct {
	// The administrator login name for the new server. Changing this forces a new resource to be created.
	AdministratorLogin *string `pulumi:"administratorLogin"`
	// The password associated with the `administratorLogin` user. Needs to comply with Azure's Password Policy
	AdministratorLoginPassword *string `pulumi:"administratorLoginPassword"`
	Collation                  *string `pulumi:"collation"`
	// The fully qualified domain name of the sql managed instance.
	Fqdn *string `pulumi:"fqdn"`
	// The Minimum TLS Version for all SQL managed Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.
	MinimumTlsVersion *string `pulumi:"minimumTlsVersion"`
	// The name of the SQL Managed Instance. This needs to be globally unique within Azure.
	Name *string `pulumi:"name"`
	// Is the public data endpoint enabled? Default value is `false`.
	PublicDataEndpointEnabled *bool `pulumi:"publicDataEndpointEnabled"`
	// Specifies the SKU Name for the SQL Managed Instance. Valid values include `GP_Gen4`, `GP_Gen5`, `BC_Gen4`, `BC_Gen5`. Changing this forces a new resource to be created.
	SkuName *string `pulumi:"skuName"`
	// Maximum storage space for your instance. It should be a multiple of 32GB.
	StorageSizeInGb *int `pulumi:"storageSizeInGb"`
	// The subnet resource id that the SQL Managed Instance will be associated with.
	SubnetId *string           `pulumi:"subnetId"`
	Tags     map[string]string `pulumi:"tags"`
	// The GUID of the tenant that the azure sql managed database will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Number of cores that should be assigned to your instance. Values can be `8`, `16`, or `24` if `skuName` is `GP_Gen4`, or `8`, `16`, `24`, `32`, or `40` if `skuName` is `GP_Gen5`
	Vcores *int `pulumi:"vcores"`
}

type AzureSqlManagedDatabaseState struct {
	// The administrator login name for the new server. Changing this forces a new resource to be created.
	AdministratorLogin pulumi.StringPtrInput
	// The password associated with the `administratorLogin` user. Needs to comply with Azure's Password Policy
	AdministratorLoginPassword pulumi.StringPtrInput
	Collation                  pulumi.StringPtrInput
	// The fully qualified domain name of the sql managed instance.
	Fqdn pulumi.StringPtrInput
	// The Minimum TLS Version for all SQL managed Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.
	MinimumTlsVersion pulumi.StringPtrInput
	// The name of the SQL Managed Instance. This needs to be globally unique within Azure.
	Name pulumi.StringPtrInput
	// Is the public data endpoint enabled? Default value is `false`.
	PublicDataEndpointEnabled pulumi.BoolPtrInput
	// Specifies the SKU Name for the SQL Managed Instance. Valid values include `GP_Gen4`, `GP_Gen5`, `BC_Gen4`, `BC_Gen5`. Changing this forces a new resource to be created.
	SkuName pulumi.StringPtrInput
	// Maximum storage space for your instance. It should be a multiple of 32GB.
	StorageSizeInGb pulumi.IntPtrInput
	// The subnet resource id that the SQL Managed Instance will be associated with.
	SubnetId pulumi.StringPtrInput
	Tags     pulumi.StringMapInput
	// The GUID of the tenant that the azure sql managed database will be created in.
	TenantId pulumi.StringPtrInput
	// Number of cores that should be assigned to your instance. Values can be `8`, `16`, or `24` if `skuName` is `GP_Gen4`, or `8`, `16`, `24`, `32`, or `40` if `skuName` is `GP_Gen5`
	Vcores pulumi.IntPtrInput
}

func (AzureSqlManagedDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureSqlManagedDatabaseState)(nil)).Elem()
}

type azureSqlManagedDatabaseArgs struct {
	// The administrator login name for the new server. Changing this forces a new resource to be created.
	AdministratorLogin string `pulumi:"administratorLogin"`
	// The password associated with the `administratorLogin` user. Needs to comply with Azure's Password Policy
	AdministratorLoginPassword string `pulumi:"administratorLoginPassword"`
	// The Minimum TLS Version for all SQL managed Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.
	MinimumTlsVersion *string `pulumi:"minimumTlsVersion"`
	// The name of the SQL Managed Instance. This needs to be globally unique within Azure.
	Name *string `pulumi:"name"`
	// Is the public data endpoint enabled? Default value is `false`.
	PublicDataEndpointEnabled *bool `pulumi:"publicDataEndpointEnabled"`
	// Specifies the SKU Name for the SQL Managed Instance. Valid values include `GP_Gen4`, `GP_Gen5`, `BC_Gen4`, `BC_Gen5`. Changing this forces a new resource to be created.
	SkuName string `pulumi:"skuName"`
	// Maximum storage space for your instance. It should be a multiple of 32GB.
	StorageSizeInGb int `pulumi:"storageSizeInGb"`
	// The subnet resource id that the SQL Managed Instance will be associated with.
	SubnetId string `pulumi:"subnetId"`
	// The GUID of the tenant that the azure sql managed database will be created in.
	TenantId string `pulumi:"tenantId"`
	// Number of cores that should be assigned to your instance. Values can be `8`, `16`, or `24` if `skuName` is `GP_Gen4`, or `8`, `16`, `24`, `32`, or `40` if `skuName` is `GP_Gen5`
	Vcores int `pulumi:"vcores"`
}

// The set of arguments for constructing a AzureSqlManagedDatabase resource.
type AzureSqlManagedDatabaseArgs struct {
	// The administrator login name for the new server. Changing this forces a new resource to be created.
	AdministratorLogin pulumi.StringInput
	// The password associated with the `administratorLogin` user. Needs to comply with Azure's Password Policy
	AdministratorLoginPassword pulumi.StringInput
	// The Minimum TLS Version for all SQL managed Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.
	MinimumTlsVersion pulumi.StringPtrInput
	// The name of the SQL Managed Instance. This needs to be globally unique within Azure.
	Name pulumi.StringPtrInput
	// Is the public data endpoint enabled? Default value is `false`.
	PublicDataEndpointEnabled pulumi.BoolPtrInput
	// Specifies the SKU Name for the SQL Managed Instance. Valid values include `GP_Gen4`, `GP_Gen5`, `BC_Gen4`, `BC_Gen5`. Changing this forces a new resource to be created.
	SkuName pulumi.StringInput
	// Maximum storage space for your instance. It should be a multiple of 32GB.
	StorageSizeInGb pulumi.IntInput
	// The subnet resource id that the SQL Managed Instance will be associated with.
	SubnetId pulumi.StringInput
	// The GUID of the tenant that the azure sql managed database will be created in.
	TenantId pulumi.StringInput
	// Number of cores that should be assigned to your instance. Values can be `8`, `16`, or `24` if `skuName` is `GP_Gen4`, or `8`, `16`, `24`, `32`, or `40` if `skuName` is `GP_Gen5`
	Vcores pulumi.IntInput
}

func (AzureSqlManagedDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureSqlManagedDatabaseArgs)(nil)).Elem()
}

type AzureSqlManagedDatabaseInput interface {
	pulumi.Input

	ToAzureSqlManagedDatabaseOutput() AzureSqlManagedDatabaseOutput
	ToAzureSqlManagedDatabaseOutputWithContext(ctx context.Context) AzureSqlManagedDatabaseOutput
}

func (*AzureSqlManagedDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSqlManagedDatabase)(nil)).Elem()
}

func (i *AzureSqlManagedDatabase) ToAzureSqlManagedDatabaseOutput() AzureSqlManagedDatabaseOutput {
	return i.ToAzureSqlManagedDatabaseOutputWithContext(context.Background())
}

func (i *AzureSqlManagedDatabase) ToAzureSqlManagedDatabaseOutputWithContext(ctx context.Context) AzureSqlManagedDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlManagedDatabaseOutput)
}

// AzureSqlManagedDatabaseArrayInput is an input type that accepts AzureSqlManagedDatabaseArray and AzureSqlManagedDatabaseArrayOutput values.
// You can construct a concrete instance of `AzureSqlManagedDatabaseArrayInput` via:
//
//	AzureSqlManagedDatabaseArray{ AzureSqlManagedDatabaseArgs{...} }
type AzureSqlManagedDatabaseArrayInput interface {
	pulumi.Input

	ToAzureSqlManagedDatabaseArrayOutput() AzureSqlManagedDatabaseArrayOutput
	ToAzureSqlManagedDatabaseArrayOutputWithContext(context.Context) AzureSqlManagedDatabaseArrayOutput
}

type AzureSqlManagedDatabaseArray []AzureSqlManagedDatabaseInput

func (AzureSqlManagedDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureSqlManagedDatabase)(nil)).Elem()
}

func (i AzureSqlManagedDatabaseArray) ToAzureSqlManagedDatabaseArrayOutput() AzureSqlManagedDatabaseArrayOutput {
	return i.ToAzureSqlManagedDatabaseArrayOutputWithContext(context.Background())
}

func (i AzureSqlManagedDatabaseArray) ToAzureSqlManagedDatabaseArrayOutputWithContext(ctx context.Context) AzureSqlManagedDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlManagedDatabaseArrayOutput)
}

// AzureSqlManagedDatabaseMapInput is an input type that accepts AzureSqlManagedDatabaseMap and AzureSqlManagedDatabaseMapOutput values.
// You can construct a concrete instance of `AzureSqlManagedDatabaseMapInput` via:
//
//	AzureSqlManagedDatabaseMap{ "key": AzureSqlManagedDatabaseArgs{...} }
type AzureSqlManagedDatabaseMapInput interface {
	pulumi.Input

	ToAzureSqlManagedDatabaseMapOutput() AzureSqlManagedDatabaseMapOutput
	ToAzureSqlManagedDatabaseMapOutputWithContext(context.Context) AzureSqlManagedDatabaseMapOutput
}

type AzureSqlManagedDatabaseMap map[string]AzureSqlManagedDatabaseInput

func (AzureSqlManagedDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureSqlManagedDatabase)(nil)).Elem()
}

func (i AzureSqlManagedDatabaseMap) ToAzureSqlManagedDatabaseMapOutput() AzureSqlManagedDatabaseMapOutput {
	return i.ToAzureSqlManagedDatabaseMapOutputWithContext(context.Background())
}

func (i AzureSqlManagedDatabaseMap) ToAzureSqlManagedDatabaseMapOutputWithContext(ctx context.Context) AzureSqlManagedDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlManagedDatabaseMapOutput)
}

type AzureSqlManagedDatabaseOutput struct{ *pulumi.OutputState }

func (AzureSqlManagedDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSqlManagedDatabase)(nil)).Elem()
}

func (o AzureSqlManagedDatabaseOutput) ToAzureSqlManagedDatabaseOutput() AzureSqlManagedDatabaseOutput {
	return o
}

func (o AzureSqlManagedDatabaseOutput) ToAzureSqlManagedDatabaseOutputWithContext(ctx context.Context) AzureSqlManagedDatabaseOutput {
	return o
}

// The administrator login name for the new server. Changing this forces a new resource to be created.
func (o AzureSqlManagedDatabaseOutput) AdministratorLogin() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlManagedDatabase) pulumi.StringOutput { return v.AdministratorLogin }).(pulumi.StringOutput)
}

// The password associated with the `administratorLogin` user. Needs to comply with Azure's Password Policy
func (o AzureSqlManagedDatabaseOutput) AdministratorLoginPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlManagedDatabase) pulumi.StringOutput { return v.AdministratorLoginPassword }).(pulumi.StringOutput)
}

func (o AzureSqlManagedDatabaseOutput) Collation() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlManagedDatabase) pulumi.StringOutput { return v.Collation }).(pulumi.StringOutput)
}

// The fully qualified domain name of the sql managed instance.
func (o AzureSqlManagedDatabaseOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlManagedDatabase) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// The Minimum TLS Version for all SQL managed Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.
func (o AzureSqlManagedDatabaseOutput) MinimumTlsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlManagedDatabase) pulumi.StringOutput { return v.MinimumTlsVersion }).(pulumi.StringOutput)
}

// The name of the SQL Managed Instance. This needs to be globally unique within Azure.
func (o AzureSqlManagedDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlManagedDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Is the public data endpoint enabled? Default value is `false`.
func (o AzureSqlManagedDatabaseOutput) PublicDataEndpointEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AzureSqlManagedDatabase) pulumi.BoolOutput { return v.PublicDataEndpointEnabled }).(pulumi.BoolOutput)
}

// Specifies the SKU Name for the SQL Managed Instance. Valid values include `GP_Gen4`, `GP_Gen5`, `BC_Gen4`, `BC_Gen5`. Changing this forces a new resource to be created.
func (o AzureSqlManagedDatabaseOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlManagedDatabase) pulumi.StringOutput { return v.SkuName }).(pulumi.StringOutput)
}

// Maximum storage space for your instance. It should be a multiple of 32GB.
func (o AzureSqlManagedDatabaseOutput) StorageSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v *AzureSqlManagedDatabase) pulumi.IntOutput { return v.StorageSizeInGb }).(pulumi.IntOutput)
}

// The subnet resource id that the SQL Managed Instance will be associated with.
func (o AzureSqlManagedDatabaseOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlManagedDatabase) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o AzureSqlManagedDatabaseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AzureSqlManagedDatabase) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The GUID of the tenant that the azure sql managed database will be created in.
func (o AzureSqlManagedDatabaseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlManagedDatabase) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Number of cores that should be assigned to your instance. Values can be `8`, `16`, or `24` if `skuName` is `GP_Gen4`, or `8`, `16`, `24`, `32`, or `40` if `skuName` is `GP_Gen5`
func (o AzureSqlManagedDatabaseOutput) Vcores() pulumi.IntOutput {
	return o.ApplyT(func(v *AzureSqlManagedDatabase) pulumi.IntOutput { return v.Vcores }).(pulumi.IntOutput)
}

type AzureSqlManagedDatabaseArrayOutput struct{ *pulumi.OutputState }

func (AzureSqlManagedDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureSqlManagedDatabase)(nil)).Elem()
}

func (o AzureSqlManagedDatabaseArrayOutput) ToAzureSqlManagedDatabaseArrayOutput() AzureSqlManagedDatabaseArrayOutput {
	return o
}

func (o AzureSqlManagedDatabaseArrayOutput) ToAzureSqlManagedDatabaseArrayOutputWithContext(ctx context.Context) AzureSqlManagedDatabaseArrayOutput {
	return o
}

func (o AzureSqlManagedDatabaseArrayOutput) Index(i pulumi.IntInput) AzureSqlManagedDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureSqlManagedDatabase {
		return vs[0].([]*AzureSqlManagedDatabase)[vs[1].(int)]
	}).(AzureSqlManagedDatabaseOutput)
}

type AzureSqlManagedDatabaseMapOutput struct{ *pulumi.OutputState }

func (AzureSqlManagedDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureSqlManagedDatabase)(nil)).Elem()
}

func (o AzureSqlManagedDatabaseMapOutput) ToAzureSqlManagedDatabaseMapOutput() AzureSqlManagedDatabaseMapOutput {
	return o
}

func (o AzureSqlManagedDatabaseMapOutput) ToAzureSqlManagedDatabaseMapOutputWithContext(ctx context.Context) AzureSqlManagedDatabaseMapOutput {
	return o
}

func (o AzureSqlManagedDatabaseMapOutput) MapIndex(k pulumi.StringInput) AzureSqlManagedDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureSqlManagedDatabase {
		return vs[0].(map[string]*AzureSqlManagedDatabase)[vs[1].(string)]
	}).(AzureSqlManagedDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureSqlManagedDatabaseInput)(nil)).Elem(), &AzureSqlManagedDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureSqlManagedDatabaseArrayInput)(nil)).Elem(), AzureSqlManagedDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureSqlManagedDatabaseMapInput)(nil)).Elem(), AzureSqlManagedDatabaseMap{})
	pulumi.RegisterOutputType(AzureSqlManagedDatabaseOutput{})
	pulumi.RegisterOutputType(AzureSqlManagedDatabaseArrayOutput{})
	pulumi.RegisterOutputType(AzureSqlManagedDatabaseMapOutput{})
}
