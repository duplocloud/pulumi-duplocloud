// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureTenantKeyVault` manages a azure Key Vault in DuploCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tenant, err := duplocloud.NewTenant(ctx, "tenant", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("test"),
//				PlanId:      pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAzureTenantKeyVault(ctx, "kv", &duplocloud.AzureTenantKeyVaultArgs{
//				TenantId:                tenant.TenantId,
//				Name:                    pulumi.String("tst-kv001"),
//				SkuName:                 pulumi.String("standard"),
//				PurgeProtectionEnabled:  pulumi.Bool(true),
//				SoftDeleteRetentionDays: pulumi.Int(90),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing Azure Tenant Key Vault
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *VAULT_NAME* is the short name of the Azure Tenant Key Vault
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/azureTenantKeyVault:AzureTenantKeyVault kv *TENANT_ID*/*VAULT_NAME*
// ```
type AzureTenantKeyVault struct {
	pulumi.CustomResourceState

	// The azure ID of the Key Vault.
	AzureId pulumi.StringOutput `pulumi:"azureId"`
	// Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
	EnabledForDiskEncryption pulumi.BoolOutput `pulumi:"enabledForDiskEncryption"`
	// Specifies the name of the Key Vault.
	Name pulumi.StringOutput `pulumi:"name"`
	// Is Purge Protection enabled for this Key Vault?
	PurgeProtectionEnabled pulumi.BoolOutput `pulumi:"purgeProtectionEnabled"`
	// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
	// The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days. Defaults to `90`.
	SoftDeleteRetentionDays pulumi.IntPtrOutput `pulumi:"softDeleteRetentionDays"`
	// The GUID of the DuploCloud tenant that the key vault will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The URI of the Key Vault, used for performing operations on keys and secrets.
	VaultUri pulumi.StringOutput `pulumi:"vaultUri"`
}

// NewAzureTenantKeyVault registers a new resource with the given unique name, arguments, and options.
func NewAzureTenantKeyVault(ctx *pulumi.Context,
	name string, args *AzureTenantKeyVaultArgs, opts ...pulumi.ResourceOption) (*AzureTenantKeyVault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SkuName == nil {
		return nil, errors.New("invalid value for required argument 'SkuName'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureTenantKeyVault
	err := ctx.RegisterResource("duplocloud:index/azureTenantKeyVault:AzureTenantKeyVault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureTenantKeyVault gets an existing AzureTenantKeyVault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureTenantKeyVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureTenantKeyVaultState, opts ...pulumi.ResourceOption) (*AzureTenantKeyVault, error) {
	var resource AzureTenantKeyVault
	err := ctx.ReadResource("duplocloud:index/azureTenantKeyVault:AzureTenantKeyVault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureTenantKeyVault resources.
type azureTenantKeyVaultState struct {
	// The azure ID of the Key Vault.
	AzureId *string `pulumi:"azureId"`
	// Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
	EnabledForDiskEncryption *bool `pulumi:"enabledForDiskEncryption"`
	// Specifies the name of the Key Vault.
	Name *string `pulumi:"name"`
	// Is Purge Protection enabled for this Key Vault?
	PurgeProtectionEnabled *bool `pulumi:"purgeProtectionEnabled"`
	// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
	SkuName *string `pulumi:"skuName"`
	// The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days. Defaults to `90`.
	SoftDeleteRetentionDays *int `pulumi:"softDeleteRetentionDays"`
	// The GUID of the DuploCloud tenant that the key vault will be created in.
	TenantId *string `pulumi:"tenantId"`
	// The URI of the Key Vault, used for performing operations on keys and secrets.
	VaultUri *string `pulumi:"vaultUri"`
}

type AzureTenantKeyVaultState struct {
	// The azure ID of the Key Vault.
	AzureId pulumi.StringPtrInput
	// Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
	EnabledForDiskEncryption pulumi.BoolPtrInput
	// Specifies the name of the Key Vault.
	Name pulumi.StringPtrInput
	// Is Purge Protection enabled for this Key Vault?
	PurgeProtectionEnabled pulumi.BoolPtrInput
	// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
	SkuName pulumi.StringPtrInput
	// The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days. Defaults to `90`.
	SoftDeleteRetentionDays pulumi.IntPtrInput
	// The GUID of the DuploCloud tenant that the key vault will be created in.
	TenantId pulumi.StringPtrInput
	// The URI of the Key Vault, used for performing operations on keys and secrets.
	VaultUri pulumi.StringPtrInput
}

func (AzureTenantKeyVaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureTenantKeyVaultState)(nil)).Elem()
}

type azureTenantKeyVaultArgs struct {
	// Specifies the name of the Key Vault.
	Name *string `pulumi:"name"`
	// Is Purge Protection enabled for this Key Vault?
	PurgeProtectionEnabled *bool `pulumi:"purgeProtectionEnabled"`
	// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
	SkuName string `pulumi:"skuName"`
	// The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days. Defaults to `90`.
	SoftDeleteRetentionDays *int `pulumi:"softDeleteRetentionDays"`
	// The GUID of the DuploCloud tenant that the key vault will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AzureTenantKeyVault resource.
type AzureTenantKeyVaultArgs struct {
	// Specifies the name of the Key Vault.
	Name pulumi.StringPtrInput
	// Is Purge Protection enabled for this Key Vault?
	PurgeProtectionEnabled pulumi.BoolPtrInput
	// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
	SkuName pulumi.StringInput
	// The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days. Defaults to `90`.
	SoftDeleteRetentionDays pulumi.IntPtrInput
	// The GUID of the DuploCloud tenant that the key vault will be created in.
	TenantId pulumi.StringInput
}

func (AzureTenantKeyVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureTenantKeyVaultArgs)(nil)).Elem()
}

type AzureTenantKeyVaultInput interface {
	pulumi.Input

	ToAzureTenantKeyVaultOutput() AzureTenantKeyVaultOutput
	ToAzureTenantKeyVaultOutputWithContext(ctx context.Context) AzureTenantKeyVaultOutput
}

func (*AzureTenantKeyVault) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureTenantKeyVault)(nil)).Elem()
}

func (i *AzureTenantKeyVault) ToAzureTenantKeyVaultOutput() AzureTenantKeyVaultOutput {
	return i.ToAzureTenantKeyVaultOutputWithContext(context.Background())
}

func (i *AzureTenantKeyVault) ToAzureTenantKeyVaultOutputWithContext(ctx context.Context) AzureTenantKeyVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTenantKeyVaultOutput)
}

// AzureTenantKeyVaultArrayInput is an input type that accepts AzureTenantKeyVaultArray and AzureTenantKeyVaultArrayOutput values.
// You can construct a concrete instance of `AzureTenantKeyVaultArrayInput` via:
//
//	AzureTenantKeyVaultArray{ AzureTenantKeyVaultArgs{...} }
type AzureTenantKeyVaultArrayInput interface {
	pulumi.Input

	ToAzureTenantKeyVaultArrayOutput() AzureTenantKeyVaultArrayOutput
	ToAzureTenantKeyVaultArrayOutputWithContext(context.Context) AzureTenantKeyVaultArrayOutput
}

type AzureTenantKeyVaultArray []AzureTenantKeyVaultInput

func (AzureTenantKeyVaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureTenantKeyVault)(nil)).Elem()
}

func (i AzureTenantKeyVaultArray) ToAzureTenantKeyVaultArrayOutput() AzureTenantKeyVaultArrayOutput {
	return i.ToAzureTenantKeyVaultArrayOutputWithContext(context.Background())
}

func (i AzureTenantKeyVaultArray) ToAzureTenantKeyVaultArrayOutputWithContext(ctx context.Context) AzureTenantKeyVaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTenantKeyVaultArrayOutput)
}

// AzureTenantKeyVaultMapInput is an input type that accepts AzureTenantKeyVaultMap and AzureTenantKeyVaultMapOutput values.
// You can construct a concrete instance of `AzureTenantKeyVaultMapInput` via:
//
//	AzureTenantKeyVaultMap{ "key": AzureTenantKeyVaultArgs{...} }
type AzureTenantKeyVaultMapInput interface {
	pulumi.Input

	ToAzureTenantKeyVaultMapOutput() AzureTenantKeyVaultMapOutput
	ToAzureTenantKeyVaultMapOutputWithContext(context.Context) AzureTenantKeyVaultMapOutput
}

type AzureTenantKeyVaultMap map[string]AzureTenantKeyVaultInput

func (AzureTenantKeyVaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureTenantKeyVault)(nil)).Elem()
}

func (i AzureTenantKeyVaultMap) ToAzureTenantKeyVaultMapOutput() AzureTenantKeyVaultMapOutput {
	return i.ToAzureTenantKeyVaultMapOutputWithContext(context.Background())
}

func (i AzureTenantKeyVaultMap) ToAzureTenantKeyVaultMapOutputWithContext(ctx context.Context) AzureTenantKeyVaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTenantKeyVaultMapOutput)
}

type AzureTenantKeyVaultOutput struct{ *pulumi.OutputState }

func (AzureTenantKeyVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureTenantKeyVault)(nil)).Elem()
}

func (o AzureTenantKeyVaultOutput) ToAzureTenantKeyVaultOutput() AzureTenantKeyVaultOutput {
	return o
}

func (o AzureTenantKeyVaultOutput) ToAzureTenantKeyVaultOutputWithContext(ctx context.Context) AzureTenantKeyVaultOutput {
	return o
}

// The azure ID of the Key Vault.
func (o AzureTenantKeyVaultOutput) AzureId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureTenantKeyVault) pulumi.StringOutput { return v.AzureId }).(pulumi.StringOutput)
}

// Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
func (o AzureTenantKeyVaultOutput) EnabledForDiskEncryption() pulumi.BoolOutput {
	return o.ApplyT(func(v *AzureTenantKeyVault) pulumi.BoolOutput { return v.EnabledForDiskEncryption }).(pulumi.BoolOutput)
}

// Specifies the name of the Key Vault.
func (o AzureTenantKeyVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureTenantKeyVault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Is Purge Protection enabled for this Key Vault?
func (o AzureTenantKeyVaultOutput) PurgeProtectionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AzureTenantKeyVault) pulumi.BoolOutput { return v.PurgeProtectionEnabled }).(pulumi.BoolOutput)
}

// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
func (o AzureTenantKeyVaultOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureTenantKeyVault) pulumi.StringOutput { return v.SkuName }).(pulumi.StringOutput)
}

// The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days. Defaults to `90`.
func (o AzureTenantKeyVaultOutput) SoftDeleteRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureTenantKeyVault) pulumi.IntPtrOutput { return v.SoftDeleteRetentionDays }).(pulumi.IntPtrOutput)
}

// The GUID of the DuploCloud tenant that the key vault will be created in.
func (o AzureTenantKeyVaultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureTenantKeyVault) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The URI of the Key Vault, used for performing operations on keys and secrets.
func (o AzureTenantKeyVaultOutput) VaultUri() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureTenantKeyVault) pulumi.StringOutput { return v.VaultUri }).(pulumi.StringOutput)
}

type AzureTenantKeyVaultArrayOutput struct{ *pulumi.OutputState }

func (AzureTenantKeyVaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureTenantKeyVault)(nil)).Elem()
}

func (o AzureTenantKeyVaultArrayOutput) ToAzureTenantKeyVaultArrayOutput() AzureTenantKeyVaultArrayOutput {
	return o
}

func (o AzureTenantKeyVaultArrayOutput) ToAzureTenantKeyVaultArrayOutputWithContext(ctx context.Context) AzureTenantKeyVaultArrayOutput {
	return o
}

func (o AzureTenantKeyVaultArrayOutput) Index(i pulumi.IntInput) AzureTenantKeyVaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureTenantKeyVault {
		return vs[0].([]*AzureTenantKeyVault)[vs[1].(int)]
	}).(AzureTenantKeyVaultOutput)
}

type AzureTenantKeyVaultMapOutput struct{ *pulumi.OutputState }

func (AzureTenantKeyVaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureTenantKeyVault)(nil)).Elem()
}

func (o AzureTenantKeyVaultMapOutput) ToAzureTenantKeyVaultMapOutput() AzureTenantKeyVaultMapOutput {
	return o
}

func (o AzureTenantKeyVaultMapOutput) ToAzureTenantKeyVaultMapOutputWithContext(ctx context.Context) AzureTenantKeyVaultMapOutput {
	return o
}

func (o AzureTenantKeyVaultMapOutput) MapIndex(k pulumi.StringInput) AzureTenantKeyVaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureTenantKeyVault {
		return vs[0].(map[string]*AzureTenantKeyVault)[vs[1].(string)]
	}).(AzureTenantKeyVaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureTenantKeyVaultInput)(nil)).Elem(), &AzureTenantKeyVault{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureTenantKeyVaultArrayInput)(nil)).Elem(), AzureTenantKeyVaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureTenantKeyVaultMapInput)(nil)).Elem(), AzureTenantKeyVaultMap{})
	pulumi.RegisterOutputType(AzureTenantKeyVaultOutput{})
	pulumi.RegisterOutputType(AzureTenantKeyVaultArrayOutput{})
	pulumi.RegisterOutputType(AzureTenantKeyVaultMapOutput{})
}
