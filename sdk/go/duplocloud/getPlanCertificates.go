// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `PlanCertificates` retrieves a list of cerificates for a given plan.
func LookupPlanCertificates(ctx *pulumi.Context, args *LookupPlanCertificatesArgs, opts ...pulumi.InvokeOption) (*LookupPlanCertificatesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPlanCertificatesResult
	err := ctx.Invoke("duplocloud:index/getPlanCertificates:getPlanCertificates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlanCertificates.
type LookupPlanCertificatesArgs struct {
	// The plan ID
	PlanId string `pulumi:"planId"`
}

// A collection of values returned by getPlanCertificates.
type LookupPlanCertificatesResult struct {
	// The list of certificates for this plan.
	Certificates []GetPlanCertificatesCertificate `pulumi:"certificates"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The plan ID
	PlanId string `pulumi:"planId"`
}

func LookupPlanCertificatesOutput(ctx *pulumi.Context, args LookupPlanCertificatesOutputArgs, opts ...pulumi.InvokeOption) LookupPlanCertificatesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPlanCertificatesResultOutput, error) {
			args := v.(LookupPlanCertificatesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("duplocloud:index/getPlanCertificates:getPlanCertificates", args, LookupPlanCertificatesResultOutput{}, options).(LookupPlanCertificatesResultOutput), nil
		}).(LookupPlanCertificatesResultOutput)
}

// A collection of arguments for invoking getPlanCertificates.
type LookupPlanCertificatesOutputArgs struct {
	// The plan ID
	PlanId pulumi.StringInput `pulumi:"planId"`
}

func (LookupPlanCertificatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanCertificatesArgs)(nil)).Elem()
}

// A collection of values returned by getPlanCertificates.
type LookupPlanCertificatesResultOutput struct{ *pulumi.OutputState }

func (LookupPlanCertificatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanCertificatesResult)(nil)).Elem()
}

func (o LookupPlanCertificatesResultOutput) ToLookupPlanCertificatesResultOutput() LookupPlanCertificatesResultOutput {
	return o
}

func (o LookupPlanCertificatesResultOutput) ToLookupPlanCertificatesResultOutputWithContext(ctx context.Context) LookupPlanCertificatesResultOutput {
	return o
}

// The list of certificates for this plan.
func (o LookupPlanCertificatesResultOutput) Certificates() GetPlanCertificatesCertificateArrayOutput {
	return o.ApplyT(func(v LookupPlanCertificatesResult) []GetPlanCertificatesCertificate { return v.Certificates }).(GetPlanCertificatesCertificateArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPlanCertificatesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanCertificatesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The plan ID
func (o LookupPlanCertificatesResultOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanCertificatesResult) string { return v.PlanId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPlanCertificatesResultOutput{})
}
