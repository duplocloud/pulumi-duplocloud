// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureSqlFirewallRule` allows you to manage an Azure SQL Firewall Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAzureSqlFirewallRule(ctx, "sql_firewall_rule", &duplocloud.AzureSqlFirewallRuleArgs{
//				TenantId:       myapp.TenantId,
//				Name:           pulumi.String("test-rule"),
//				ServerName:     pulumi.String("test-server"),
//				StartIpAddress: pulumi.String("10.0.17.62"),
//				EndIpAddress:   pulumi.String("10.0.17.62"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing Azure SQL server Firewall Rule
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SERVER_NAME* is the name of the Azure Sql server
//
//   - *RULE_NAME* is the name of the Azure Sql server Firewall Rule
//
// ```sh
// $ pulumi import duplocloud:index/azureSqlFirewallRule:AzureSqlFirewallRule sql_firewall_rule *TENANT_ID*/*SERVER_NAME*/*RULE_NAME*
// ```
type AzureSqlFirewallRule struct {
	pulumi.CustomResourceState

	// The ID of the SQL firewall rule.
	AzureId pulumi.StringOutput `pulumi:"azureId"`
	// The ending IP address to allow through the firewall for this rule.
	EndIpAddress pulumi.StringOutput `pulumi:"endIpAddress"`
	// The name of the firewall rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the SQL Server on which to create the Firewall Rule.
	ServerName pulumi.StringOutput `pulumi:"serverName"`
	// The starting IP address to allow through the firewall for this rule.
	StartIpAddress pulumi.StringOutput `pulumi:"startIpAddress"`
	// The GUID of the tenant that the sql firewall rule will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewAzureSqlFirewallRule registers a new resource with the given unique name, arguments, and options.
func NewAzureSqlFirewallRule(ctx *pulumi.Context,
	name string, args *AzureSqlFirewallRuleArgs, opts ...pulumi.ResourceOption) (*AzureSqlFirewallRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndIpAddress == nil {
		return nil, errors.New("invalid value for required argument 'EndIpAddress'")
	}
	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	if args.StartIpAddress == nil {
		return nil, errors.New("invalid value for required argument 'StartIpAddress'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureSqlFirewallRule
	err := ctx.RegisterResource("duplocloud:index/azureSqlFirewallRule:AzureSqlFirewallRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureSqlFirewallRule gets an existing AzureSqlFirewallRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureSqlFirewallRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureSqlFirewallRuleState, opts ...pulumi.ResourceOption) (*AzureSqlFirewallRule, error) {
	var resource AzureSqlFirewallRule
	err := ctx.ReadResource("duplocloud:index/azureSqlFirewallRule:AzureSqlFirewallRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureSqlFirewallRule resources.
type azureSqlFirewallRuleState struct {
	// The ID of the SQL firewall rule.
	AzureId *string `pulumi:"azureId"`
	// The ending IP address to allow through the firewall for this rule.
	EndIpAddress *string `pulumi:"endIpAddress"`
	// The name of the firewall rule.
	Name *string `pulumi:"name"`
	// The name of the SQL Server on which to create the Firewall Rule.
	ServerName *string `pulumi:"serverName"`
	// The starting IP address to allow through the firewall for this rule.
	StartIpAddress *string `pulumi:"startIpAddress"`
	// The GUID of the tenant that the sql firewall rule will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type AzureSqlFirewallRuleState struct {
	// The ID of the SQL firewall rule.
	AzureId pulumi.StringPtrInput
	// The ending IP address to allow through the firewall for this rule.
	EndIpAddress pulumi.StringPtrInput
	// The name of the firewall rule.
	Name pulumi.StringPtrInput
	// The name of the SQL Server on which to create the Firewall Rule.
	ServerName pulumi.StringPtrInput
	// The starting IP address to allow through the firewall for this rule.
	StartIpAddress pulumi.StringPtrInput
	// The GUID of the tenant that the sql firewall rule will be created in.
	TenantId pulumi.StringPtrInput
}

func (AzureSqlFirewallRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureSqlFirewallRuleState)(nil)).Elem()
}

type azureSqlFirewallRuleArgs struct {
	// The ending IP address to allow through the firewall for this rule.
	EndIpAddress string `pulumi:"endIpAddress"`
	// The name of the firewall rule.
	Name *string `pulumi:"name"`
	// The name of the SQL Server on which to create the Firewall Rule.
	ServerName string `pulumi:"serverName"`
	// The starting IP address to allow through the firewall for this rule.
	StartIpAddress string `pulumi:"startIpAddress"`
	// The GUID of the tenant that the sql firewall rule will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AzureSqlFirewallRule resource.
type AzureSqlFirewallRuleArgs struct {
	// The ending IP address to allow through the firewall for this rule.
	EndIpAddress pulumi.StringInput
	// The name of the firewall rule.
	Name pulumi.StringPtrInput
	// The name of the SQL Server on which to create the Firewall Rule.
	ServerName pulumi.StringInput
	// The starting IP address to allow through the firewall for this rule.
	StartIpAddress pulumi.StringInput
	// The GUID of the tenant that the sql firewall rule will be created in.
	TenantId pulumi.StringInput
}

func (AzureSqlFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureSqlFirewallRuleArgs)(nil)).Elem()
}

type AzureSqlFirewallRuleInput interface {
	pulumi.Input

	ToAzureSqlFirewallRuleOutput() AzureSqlFirewallRuleOutput
	ToAzureSqlFirewallRuleOutputWithContext(ctx context.Context) AzureSqlFirewallRuleOutput
}

func (*AzureSqlFirewallRule) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSqlFirewallRule)(nil)).Elem()
}

func (i *AzureSqlFirewallRule) ToAzureSqlFirewallRuleOutput() AzureSqlFirewallRuleOutput {
	return i.ToAzureSqlFirewallRuleOutputWithContext(context.Background())
}

func (i *AzureSqlFirewallRule) ToAzureSqlFirewallRuleOutputWithContext(ctx context.Context) AzureSqlFirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlFirewallRuleOutput)
}

// AzureSqlFirewallRuleArrayInput is an input type that accepts AzureSqlFirewallRuleArray and AzureSqlFirewallRuleArrayOutput values.
// You can construct a concrete instance of `AzureSqlFirewallRuleArrayInput` via:
//
//	AzureSqlFirewallRuleArray{ AzureSqlFirewallRuleArgs{...} }
type AzureSqlFirewallRuleArrayInput interface {
	pulumi.Input

	ToAzureSqlFirewallRuleArrayOutput() AzureSqlFirewallRuleArrayOutput
	ToAzureSqlFirewallRuleArrayOutputWithContext(context.Context) AzureSqlFirewallRuleArrayOutput
}

type AzureSqlFirewallRuleArray []AzureSqlFirewallRuleInput

func (AzureSqlFirewallRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureSqlFirewallRule)(nil)).Elem()
}

func (i AzureSqlFirewallRuleArray) ToAzureSqlFirewallRuleArrayOutput() AzureSqlFirewallRuleArrayOutput {
	return i.ToAzureSqlFirewallRuleArrayOutputWithContext(context.Background())
}

func (i AzureSqlFirewallRuleArray) ToAzureSqlFirewallRuleArrayOutputWithContext(ctx context.Context) AzureSqlFirewallRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlFirewallRuleArrayOutput)
}

// AzureSqlFirewallRuleMapInput is an input type that accepts AzureSqlFirewallRuleMap and AzureSqlFirewallRuleMapOutput values.
// You can construct a concrete instance of `AzureSqlFirewallRuleMapInput` via:
//
//	AzureSqlFirewallRuleMap{ "key": AzureSqlFirewallRuleArgs{...} }
type AzureSqlFirewallRuleMapInput interface {
	pulumi.Input

	ToAzureSqlFirewallRuleMapOutput() AzureSqlFirewallRuleMapOutput
	ToAzureSqlFirewallRuleMapOutputWithContext(context.Context) AzureSqlFirewallRuleMapOutput
}

type AzureSqlFirewallRuleMap map[string]AzureSqlFirewallRuleInput

func (AzureSqlFirewallRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureSqlFirewallRule)(nil)).Elem()
}

func (i AzureSqlFirewallRuleMap) ToAzureSqlFirewallRuleMapOutput() AzureSqlFirewallRuleMapOutput {
	return i.ToAzureSqlFirewallRuleMapOutputWithContext(context.Background())
}

func (i AzureSqlFirewallRuleMap) ToAzureSqlFirewallRuleMapOutputWithContext(ctx context.Context) AzureSqlFirewallRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlFirewallRuleMapOutput)
}

type AzureSqlFirewallRuleOutput struct{ *pulumi.OutputState }

func (AzureSqlFirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSqlFirewallRule)(nil)).Elem()
}

func (o AzureSqlFirewallRuleOutput) ToAzureSqlFirewallRuleOutput() AzureSqlFirewallRuleOutput {
	return o
}

func (o AzureSqlFirewallRuleOutput) ToAzureSqlFirewallRuleOutputWithContext(ctx context.Context) AzureSqlFirewallRuleOutput {
	return o
}

// The ID of the SQL firewall rule.
func (o AzureSqlFirewallRuleOutput) AzureId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlFirewallRule) pulumi.StringOutput { return v.AzureId }).(pulumi.StringOutput)
}

// The ending IP address to allow through the firewall for this rule.
func (o AzureSqlFirewallRuleOutput) EndIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlFirewallRule) pulumi.StringOutput { return v.EndIpAddress }).(pulumi.StringOutput)
}

// The name of the firewall rule.
func (o AzureSqlFirewallRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlFirewallRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the SQL Server on which to create the Firewall Rule.
func (o AzureSqlFirewallRuleOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlFirewallRule) pulumi.StringOutput { return v.ServerName }).(pulumi.StringOutput)
}

// The starting IP address to allow through the firewall for this rule.
func (o AzureSqlFirewallRuleOutput) StartIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlFirewallRule) pulumi.StringOutput { return v.StartIpAddress }).(pulumi.StringOutput)
}

// The GUID of the tenant that the sql firewall rule will be created in.
func (o AzureSqlFirewallRuleOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlFirewallRule) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type AzureSqlFirewallRuleArrayOutput struct{ *pulumi.OutputState }

func (AzureSqlFirewallRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureSqlFirewallRule)(nil)).Elem()
}

func (o AzureSqlFirewallRuleArrayOutput) ToAzureSqlFirewallRuleArrayOutput() AzureSqlFirewallRuleArrayOutput {
	return o
}

func (o AzureSqlFirewallRuleArrayOutput) ToAzureSqlFirewallRuleArrayOutputWithContext(ctx context.Context) AzureSqlFirewallRuleArrayOutput {
	return o
}

func (o AzureSqlFirewallRuleArrayOutput) Index(i pulumi.IntInput) AzureSqlFirewallRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureSqlFirewallRule {
		return vs[0].([]*AzureSqlFirewallRule)[vs[1].(int)]
	}).(AzureSqlFirewallRuleOutput)
}

type AzureSqlFirewallRuleMapOutput struct{ *pulumi.OutputState }

func (AzureSqlFirewallRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureSqlFirewallRule)(nil)).Elem()
}

func (o AzureSqlFirewallRuleMapOutput) ToAzureSqlFirewallRuleMapOutput() AzureSqlFirewallRuleMapOutput {
	return o
}

func (o AzureSqlFirewallRuleMapOutput) ToAzureSqlFirewallRuleMapOutputWithContext(ctx context.Context) AzureSqlFirewallRuleMapOutput {
	return o
}

func (o AzureSqlFirewallRuleMapOutput) MapIndex(k pulumi.StringInput) AzureSqlFirewallRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureSqlFirewallRule {
		return vs[0].(map[string]*AzureSqlFirewallRule)[vs[1].(string)]
	}).(AzureSqlFirewallRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureSqlFirewallRuleInput)(nil)).Elem(), &AzureSqlFirewallRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureSqlFirewallRuleArrayInput)(nil)).Elem(), AzureSqlFirewallRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureSqlFirewallRuleMapInput)(nil)).Elem(), AzureSqlFirewallRuleMap{})
	pulumi.RegisterOutputType(AzureSqlFirewallRuleOutput{})
	pulumi.RegisterOutputType(AzureSqlFirewallRuleArrayOutput{})
	pulumi.RegisterOutputType(AzureSqlFirewallRuleMapOutput{})
}
