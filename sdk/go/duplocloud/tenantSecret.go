// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `TenantSecret` manages a tenant secret in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			// Example with plaintext data.
//			_, err = duplocloud.NewTenantSecret(ctx, "mysecret1", &duplocloud.TenantSecretArgs{
//				TenantId:   myapp.TenantId,
//				NameSuffix: pulumi.String("mytext"),
//				Data:       pulumi.String("hi"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"foo": "bar",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			// Example with JSON data.
//			_, err = duplocloud.NewTenantSecret(ctx, "mysecret2", &duplocloud.TenantSecretArgs{
//				TenantId:   myapp.TenantId,
//				NameSuffix: pulumi.String("myjson"),
//				Data:       pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import duplocloud:index/tenantSecret:TenantSecret myapp TENANT_ID/SECRET_NAME
// ```
type TenantSecret struct {
	pulumi.CustomResourceState

	// The ARN of the created secret.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The plaintext secret data. You can use the `jsonencode()` function to store JSON data in this field.
	Data pulumi.StringOutput `pulumi:"data"`
	// The full name of the secret.
	Name pulumi.StringOutput `pulumi:"name"`
	// The short name of the secret. You can get the fullname from the `name` attribute after creation.
	NameSuffix pulumi.StringOutput `pulumi:"nameSuffix"`
	// Whether or not rotation is enabled for this secret.
	RotationEnabled pulumi.BoolOutput `pulumi:"rotationEnabled"`
	// A list of tags for this secret.
	Tags TenantSecretTagArrayOutput `pulumi:"tags"`
	// The GUID of the tenant that the secret will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The version ID of the secret.
	VersionId pulumi.StringOutput `pulumi:"versionId"`
}

// NewTenantSecret registers a new resource with the given unique name, arguments, and options.
func NewTenantSecret(ctx *pulumi.Context,
	name string, args *TenantSecretArgs, opts ...pulumi.ResourceOption) (*TenantSecret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Data == nil {
		return nil, errors.New("invalid value for required argument 'Data'")
	}
	if args.NameSuffix == nil {
		return nil, errors.New("invalid value for required argument 'NameSuffix'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.Data != nil {
		args.Data = pulumi.ToSecret(args.Data).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"data",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TenantSecret
	err := ctx.RegisterResource("duplocloud:index/tenantSecret:TenantSecret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTenantSecret gets an existing TenantSecret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTenantSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TenantSecretState, opts ...pulumi.ResourceOption) (*TenantSecret, error) {
	var resource TenantSecret
	err := ctx.ReadResource("duplocloud:index/tenantSecret:TenantSecret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TenantSecret resources.
type tenantSecretState struct {
	// The ARN of the created secret.
	Arn *string `pulumi:"arn"`
	// The plaintext secret data. You can use the `jsonencode()` function to store JSON data in this field.
	Data *string `pulumi:"data"`
	// The full name of the secret.
	Name *string `pulumi:"name"`
	// The short name of the secret. You can get the fullname from the `name` attribute after creation.
	NameSuffix *string `pulumi:"nameSuffix"`
	// Whether or not rotation is enabled for this secret.
	RotationEnabled *bool `pulumi:"rotationEnabled"`
	// A list of tags for this secret.
	Tags []TenantSecretTag `pulumi:"tags"`
	// The GUID of the tenant that the secret will be created in.
	TenantId *string `pulumi:"tenantId"`
	// The version ID of the secret.
	VersionId *string `pulumi:"versionId"`
}

type TenantSecretState struct {
	// The ARN of the created secret.
	Arn pulumi.StringPtrInput
	// The plaintext secret data. You can use the `jsonencode()` function to store JSON data in this field.
	Data pulumi.StringPtrInput
	// The full name of the secret.
	Name pulumi.StringPtrInput
	// The short name of the secret. You can get the fullname from the `name` attribute after creation.
	NameSuffix pulumi.StringPtrInput
	// Whether or not rotation is enabled for this secret.
	RotationEnabled pulumi.BoolPtrInput
	// A list of tags for this secret.
	Tags TenantSecretTagArrayInput
	// The GUID of the tenant that the secret will be created in.
	TenantId pulumi.StringPtrInput
	// The version ID of the secret.
	VersionId pulumi.StringPtrInput
}

func (TenantSecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantSecretState)(nil)).Elem()
}

type tenantSecretArgs struct {
	// The plaintext secret data. You can use the `jsonencode()` function to store JSON data in this field.
	Data string `pulumi:"data"`
	// The short name of the secret. You can get the fullname from the `name` attribute after creation.
	NameSuffix string `pulumi:"nameSuffix"`
	// The GUID of the tenant that the secret will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a TenantSecret resource.
type TenantSecretArgs struct {
	// The plaintext secret data. You can use the `jsonencode()` function to store JSON data in this field.
	Data pulumi.StringInput
	// The short name of the secret. You can get the fullname from the `name` attribute after creation.
	NameSuffix pulumi.StringInput
	// The GUID of the tenant that the secret will be created in.
	TenantId pulumi.StringInput
}

func (TenantSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantSecretArgs)(nil)).Elem()
}

type TenantSecretInput interface {
	pulumi.Input

	ToTenantSecretOutput() TenantSecretOutput
	ToTenantSecretOutputWithContext(ctx context.Context) TenantSecretOutput
}

func (*TenantSecret) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantSecret)(nil)).Elem()
}

func (i *TenantSecret) ToTenantSecretOutput() TenantSecretOutput {
	return i.ToTenantSecretOutputWithContext(context.Background())
}

func (i *TenantSecret) ToTenantSecretOutputWithContext(ctx context.Context) TenantSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantSecretOutput)
}

// TenantSecretArrayInput is an input type that accepts TenantSecretArray and TenantSecretArrayOutput values.
// You can construct a concrete instance of `TenantSecretArrayInput` via:
//
//	TenantSecretArray{ TenantSecretArgs{...} }
type TenantSecretArrayInput interface {
	pulumi.Input

	ToTenantSecretArrayOutput() TenantSecretArrayOutput
	ToTenantSecretArrayOutputWithContext(context.Context) TenantSecretArrayOutput
}

type TenantSecretArray []TenantSecretInput

func (TenantSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TenantSecret)(nil)).Elem()
}

func (i TenantSecretArray) ToTenantSecretArrayOutput() TenantSecretArrayOutput {
	return i.ToTenantSecretArrayOutputWithContext(context.Background())
}

func (i TenantSecretArray) ToTenantSecretArrayOutputWithContext(ctx context.Context) TenantSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantSecretArrayOutput)
}

// TenantSecretMapInput is an input type that accepts TenantSecretMap and TenantSecretMapOutput values.
// You can construct a concrete instance of `TenantSecretMapInput` via:
//
//	TenantSecretMap{ "key": TenantSecretArgs{...} }
type TenantSecretMapInput interface {
	pulumi.Input

	ToTenantSecretMapOutput() TenantSecretMapOutput
	ToTenantSecretMapOutputWithContext(context.Context) TenantSecretMapOutput
}

type TenantSecretMap map[string]TenantSecretInput

func (TenantSecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TenantSecret)(nil)).Elem()
}

func (i TenantSecretMap) ToTenantSecretMapOutput() TenantSecretMapOutput {
	return i.ToTenantSecretMapOutputWithContext(context.Background())
}

func (i TenantSecretMap) ToTenantSecretMapOutputWithContext(ctx context.Context) TenantSecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantSecretMapOutput)
}

type TenantSecretOutput struct{ *pulumi.OutputState }

func (TenantSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantSecret)(nil)).Elem()
}

func (o TenantSecretOutput) ToTenantSecretOutput() TenantSecretOutput {
	return o
}

func (o TenantSecretOutput) ToTenantSecretOutputWithContext(ctx context.Context) TenantSecretOutput {
	return o
}

// The ARN of the created secret.
func (o TenantSecretOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantSecret) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The plaintext secret data. You can use the `jsonencode()` function to store JSON data in this field.
func (o TenantSecretOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantSecret) pulumi.StringOutput { return v.Data }).(pulumi.StringOutput)
}

// The full name of the secret.
func (o TenantSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantSecret) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The short name of the secret. You can get the fullname from the `name` attribute after creation.
func (o TenantSecretOutput) NameSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantSecret) pulumi.StringOutput { return v.NameSuffix }).(pulumi.StringOutput)
}

// Whether or not rotation is enabled for this secret.
func (o TenantSecretOutput) RotationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *TenantSecret) pulumi.BoolOutput { return v.RotationEnabled }).(pulumi.BoolOutput)
}

// A list of tags for this secret.
func (o TenantSecretOutput) Tags() TenantSecretTagArrayOutput {
	return o.ApplyT(func(v *TenantSecret) TenantSecretTagArrayOutput { return v.Tags }).(TenantSecretTagArrayOutput)
}

// The GUID of the tenant that the secret will be created in.
func (o TenantSecretOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantSecret) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The version ID of the secret.
func (o TenantSecretOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantSecret) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

type TenantSecretArrayOutput struct{ *pulumi.OutputState }

func (TenantSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TenantSecret)(nil)).Elem()
}

func (o TenantSecretArrayOutput) ToTenantSecretArrayOutput() TenantSecretArrayOutput {
	return o
}

func (o TenantSecretArrayOutput) ToTenantSecretArrayOutputWithContext(ctx context.Context) TenantSecretArrayOutput {
	return o
}

func (o TenantSecretArrayOutput) Index(i pulumi.IntInput) TenantSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TenantSecret {
		return vs[0].([]*TenantSecret)[vs[1].(int)]
	}).(TenantSecretOutput)
}

type TenantSecretMapOutput struct{ *pulumi.OutputState }

func (TenantSecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TenantSecret)(nil)).Elem()
}

func (o TenantSecretMapOutput) ToTenantSecretMapOutput() TenantSecretMapOutput {
	return o
}

func (o TenantSecretMapOutput) ToTenantSecretMapOutputWithContext(ctx context.Context) TenantSecretMapOutput {
	return o
}

func (o TenantSecretMapOutput) MapIndex(k pulumi.StringInput) TenantSecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TenantSecret {
		return vs[0].(map[string]*TenantSecret)[vs[1].(string)]
	}).(TenantSecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TenantSecretInput)(nil)).Elem(), &TenantSecret{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantSecretArrayInput)(nil)).Elem(), TenantSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantSecretMapInput)(nil)).Elem(), TenantSecretMap{})
	pulumi.RegisterOutputType(TenantSecretOutput{})
	pulumi.RegisterOutputType(TenantSecretArrayOutput{})
	pulumi.RegisterOutputType(TenantSecretMapOutput{})
}
