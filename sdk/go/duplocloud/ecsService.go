// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `EcsService` manages a Amazon ECS service in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			myservice, err := duplocloud.NewEcsTaskDefinition(ctx, "myservice", nil)
//			if err != nil {
//				return err
//			}
//			// Deploy NGINX using ECS
//			_, err = duplocloud.NewEcsService(ctx, "myservice", &duplocloud.EcsServiceArgs{
//				TenantId:       myapp.TenantId,
//				TaskDefinition: myservice.Arn,
//				Replicas:       pulumi.Int(2),
//				LoadBalancers: duplocloud.EcsServiceLoadBalancerArray{
//					&duplocloud.EcsServiceLoadBalancerArgs{
//						LbType:             pulumi.Int(1),
//						Port:               pulumi.String("8080"),
//						ExternalPort:       pulumi.Int(80),
//						Protocol:           pulumi.String("HTTP"),
//						EnableAccessLogs:   pulumi.Bool(false),
//						DropInvalidHeaders: pulumi.Bool(true),
//						HealthCheckUrl:     pulumi.String("https://example.healthcheckurl.com/healthcheck"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing service
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *NAME* is the short name of the service
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/ecsService:EcsService myservice v2/subscriptions/*TENANT_ID*/EcsServiceApiV2/*NAME*
// ```
type EcsService struct {
	pulumi.CustomResourceState

	CapacityProviderStrategies EcsServiceCapacityProviderStrategyArrayOutput `pulumi:"capacityProviderStrategies"`
	// The DNS prefix to assign to this service's load balancer.
	DnsPrfx                       pulumi.StringPtrOutput `pulumi:"dnsPrfx"`
	HealthCheckGracePeriodSeconds pulumi.IntPtrOutput    `pulumi:"healthCheckGracePeriodSeconds"`
	// The index of the ecs service.
	Index             pulumi.IntOutput     `pulumi:"index"`
	IsTargetGroupOnly pulumi.BoolPtrOutput `pulumi:"isTargetGroupOnly"`
	// Zero or more load balancer configurations to associate with this service.
	LoadBalancers EcsServiceLoadBalancerArrayOutput `pulumi:"loadBalancers"`
	// The name of the service to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of older task definitions to retain in AWS.
	OldTaskDefinitionBufferSize pulumi.IntPtrOutput `pulumi:"oldTaskDefinitionBufferSize"`
	// The number of container replicas to create.
	Replicas        pulumi.IntOutput         `pulumi:"replicas"`
	TargetGroupArns pulumi.StringArrayOutput `pulumi:"targetGroupArns"`
	// The ARN of the task definition to use.
	TaskDefinition pulumi.StringOutput `pulumi:"taskDefinition"`
	// The GUID of the tenant that the service will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Whether or not to wait until all target groups are created for ecs service, after creation.
	WaitUntilTargetsReady pulumi.BoolPtrOutput `pulumi:"waitUntilTargetsReady"`
}

// NewEcsService registers a new resource with the given unique name, arguments, and options.
func NewEcsService(ctx *pulumi.Context,
	name string, args *EcsServiceArgs, opts ...pulumi.ResourceOption) (*EcsService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Replicas == nil {
		return nil, errors.New("invalid value for required argument 'Replicas'")
	}
	if args.TaskDefinition == nil {
		return nil, errors.New("invalid value for required argument 'TaskDefinition'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EcsService
	err := ctx.RegisterResource("duplocloud:index/ecsService:EcsService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEcsService gets an existing EcsService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEcsService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EcsServiceState, opts ...pulumi.ResourceOption) (*EcsService, error) {
	var resource EcsService
	err := ctx.ReadResource("duplocloud:index/ecsService:EcsService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EcsService resources.
type ecsServiceState struct {
	CapacityProviderStrategies []EcsServiceCapacityProviderStrategy `pulumi:"capacityProviderStrategies"`
	// The DNS prefix to assign to this service's load balancer.
	DnsPrfx                       *string `pulumi:"dnsPrfx"`
	HealthCheckGracePeriodSeconds *int    `pulumi:"healthCheckGracePeriodSeconds"`
	// The index of the ecs service.
	Index             *int  `pulumi:"index"`
	IsTargetGroupOnly *bool `pulumi:"isTargetGroupOnly"`
	// Zero or more load balancer configurations to associate with this service.
	LoadBalancers []EcsServiceLoadBalancer `pulumi:"loadBalancers"`
	// The name of the service to create.
	Name *string `pulumi:"name"`
	// The number of older task definitions to retain in AWS.
	OldTaskDefinitionBufferSize *int `pulumi:"oldTaskDefinitionBufferSize"`
	// The number of container replicas to create.
	Replicas        *int     `pulumi:"replicas"`
	TargetGroupArns []string `pulumi:"targetGroupArns"`
	// The ARN of the task definition to use.
	TaskDefinition *string `pulumi:"taskDefinition"`
	// The GUID of the tenant that the service will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Whether or not to wait until all target groups are created for ecs service, after creation.
	WaitUntilTargetsReady *bool `pulumi:"waitUntilTargetsReady"`
}

type EcsServiceState struct {
	CapacityProviderStrategies EcsServiceCapacityProviderStrategyArrayInput
	// The DNS prefix to assign to this service's load balancer.
	DnsPrfx                       pulumi.StringPtrInput
	HealthCheckGracePeriodSeconds pulumi.IntPtrInput
	// The index of the ecs service.
	Index             pulumi.IntPtrInput
	IsTargetGroupOnly pulumi.BoolPtrInput
	// Zero or more load balancer configurations to associate with this service.
	LoadBalancers EcsServiceLoadBalancerArrayInput
	// The name of the service to create.
	Name pulumi.StringPtrInput
	// The number of older task definitions to retain in AWS.
	OldTaskDefinitionBufferSize pulumi.IntPtrInput
	// The number of container replicas to create.
	Replicas        pulumi.IntPtrInput
	TargetGroupArns pulumi.StringArrayInput
	// The ARN of the task definition to use.
	TaskDefinition pulumi.StringPtrInput
	// The GUID of the tenant that the service will be created in.
	TenantId pulumi.StringPtrInput
	// Whether or not to wait until all target groups are created for ecs service, after creation.
	WaitUntilTargetsReady pulumi.BoolPtrInput
}

func (EcsServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsServiceState)(nil)).Elem()
}

type ecsServiceArgs struct {
	CapacityProviderStrategies []EcsServiceCapacityProviderStrategy `pulumi:"capacityProviderStrategies"`
	// The DNS prefix to assign to this service's load balancer.
	DnsPrfx                       *string `pulumi:"dnsPrfx"`
	HealthCheckGracePeriodSeconds *int    `pulumi:"healthCheckGracePeriodSeconds"`
	IsTargetGroupOnly             *bool   `pulumi:"isTargetGroupOnly"`
	// Zero or more load balancer configurations to associate with this service.
	LoadBalancers []EcsServiceLoadBalancer `pulumi:"loadBalancers"`
	// The name of the service to create.
	Name *string `pulumi:"name"`
	// The number of older task definitions to retain in AWS.
	OldTaskDefinitionBufferSize *int `pulumi:"oldTaskDefinitionBufferSize"`
	// The number of container replicas to create.
	Replicas int `pulumi:"replicas"`
	// The ARN of the task definition to use.
	TaskDefinition string `pulumi:"taskDefinition"`
	// The GUID of the tenant that the service will be created in.
	TenantId string `pulumi:"tenantId"`
	// Whether or not to wait until all target groups are created for ecs service, after creation.
	WaitUntilTargetsReady *bool `pulumi:"waitUntilTargetsReady"`
}

// The set of arguments for constructing a EcsService resource.
type EcsServiceArgs struct {
	CapacityProviderStrategies EcsServiceCapacityProviderStrategyArrayInput
	// The DNS prefix to assign to this service's load balancer.
	DnsPrfx                       pulumi.StringPtrInput
	HealthCheckGracePeriodSeconds pulumi.IntPtrInput
	IsTargetGroupOnly             pulumi.BoolPtrInput
	// Zero or more load balancer configurations to associate with this service.
	LoadBalancers EcsServiceLoadBalancerArrayInput
	// The name of the service to create.
	Name pulumi.StringPtrInput
	// The number of older task definitions to retain in AWS.
	OldTaskDefinitionBufferSize pulumi.IntPtrInput
	// The number of container replicas to create.
	Replicas pulumi.IntInput
	// The ARN of the task definition to use.
	TaskDefinition pulumi.StringInput
	// The GUID of the tenant that the service will be created in.
	TenantId pulumi.StringInput
	// Whether or not to wait until all target groups are created for ecs service, after creation.
	WaitUntilTargetsReady pulumi.BoolPtrInput
}

func (EcsServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsServiceArgs)(nil)).Elem()
}

type EcsServiceInput interface {
	pulumi.Input

	ToEcsServiceOutput() EcsServiceOutput
	ToEcsServiceOutputWithContext(ctx context.Context) EcsServiceOutput
}

func (*EcsService) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsService)(nil)).Elem()
}

func (i *EcsService) ToEcsServiceOutput() EcsServiceOutput {
	return i.ToEcsServiceOutputWithContext(context.Background())
}

func (i *EcsService) ToEcsServiceOutputWithContext(ctx context.Context) EcsServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsServiceOutput)
}

// EcsServiceArrayInput is an input type that accepts EcsServiceArray and EcsServiceArrayOutput values.
// You can construct a concrete instance of `EcsServiceArrayInput` via:
//
//	EcsServiceArray{ EcsServiceArgs{...} }
type EcsServiceArrayInput interface {
	pulumi.Input

	ToEcsServiceArrayOutput() EcsServiceArrayOutput
	ToEcsServiceArrayOutputWithContext(context.Context) EcsServiceArrayOutput
}

type EcsServiceArray []EcsServiceInput

func (EcsServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsService)(nil)).Elem()
}

func (i EcsServiceArray) ToEcsServiceArrayOutput() EcsServiceArrayOutput {
	return i.ToEcsServiceArrayOutputWithContext(context.Background())
}

func (i EcsServiceArray) ToEcsServiceArrayOutputWithContext(ctx context.Context) EcsServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsServiceArrayOutput)
}

// EcsServiceMapInput is an input type that accepts EcsServiceMap and EcsServiceMapOutput values.
// You can construct a concrete instance of `EcsServiceMapInput` via:
//
//	EcsServiceMap{ "key": EcsServiceArgs{...} }
type EcsServiceMapInput interface {
	pulumi.Input

	ToEcsServiceMapOutput() EcsServiceMapOutput
	ToEcsServiceMapOutputWithContext(context.Context) EcsServiceMapOutput
}

type EcsServiceMap map[string]EcsServiceInput

func (EcsServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsService)(nil)).Elem()
}

func (i EcsServiceMap) ToEcsServiceMapOutput() EcsServiceMapOutput {
	return i.ToEcsServiceMapOutputWithContext(context.Background())
}

func (i EcsServiceMap) ToEcsServiceMapOutputWithContext(ctx context.Context) EcsServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsServiceMapOutput)
}

type EcsServiceOutput struct{ *pulumi.OutputState }

func (EcsServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsService)(nil)).Elem()
}

func (o EcsServiceOutput) ToEcsServiceOutput() EcsServiceOutput {
	return o
}

func (o EcsServiceOutput) ToEcsServiceOutputWithContext(ctx context.Context) EcsServiceOutput {
	return o
}

func (o EcsServiceOutput) CapacityProviderStrategies() EcsServiceCapacityProviderStrategyArrayOutput {
	return o.ApplyT(func(v *EcsService) EcsServiceCapacityProviderStrategyArrayOutput { return v.CapacityProviderStrategies }).(EcsServiceCapacityProviderStrategyArrayOutput)
}

// The DNS prefix to assign to this service's load balancer.
func (o EcsServiceOutput) DnsPrfx() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EcsService) pulumi.StringPtrOutput { return v.DnsPrfx }).(pulumi.StringPtrOutput)
}

func (o EcsServiceOutput) HealthCheckGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EcsService) pulumi.IntPtrOutput { return v.HealthCheckGracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// The index of the ecs service.
func (o EcsServiceOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v *EcsService) pulumi.IntOutput { return v.Index }).(pulumi.IntOutput)
}

func (o EcsServiceOutput) IsTargetGroupOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EcsService) pulumi.BoolPtrOutput { return v.IsTargetGroupOnly }).(pulumi.BoolPtrOutput)
}

// Zero or more load balancer configurations to associate with this service.
func (o EcsServiceOutput) LoadBalancers() EcsServiceLoadBalancerArrayOutput {
	return o.ApplyT(func(v *EcsService) EcsServiceLoadBalancerArrayOutput { return v.LoadBalancers }).(EcsServiceLoadBalancerArrayOutput)
}

// The name of the service to create.
func (o EcsServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of older task definitions to retain in AWS.
func (o EcsServiceOutput) OldTaskDefinitionBufferSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EcsService) pulumi.IntPtrOutput { return v.OldTaskDefinitionBufferSize }).(pulumi.IntPtrOutput)
}

// The number of container replicas to create.
func (o EcsServiceOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v *EcsService) pulumi.IntOutput { return v.Replicas }).(pulumi.IntOutput)
}

func (o EcsServiceOutput) TargetGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EcsService) pulumi.StringArrayOutput { return v.TargetGroupArns }).(pulumi.StringArrayOutput)
}

// The ARN of the task definition to use.
func (o EcsServiceOutput) TaskDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsService) pulumi.StringOutput { return v.TaskDefinition }).(pulumi.StringOutput)
}

// The GUID of the tenant that the service will be created in.
func (o EcsServiceOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsService) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Whether or not to wait until all target groups are created for ecs service, after creation.
func (o EcsServiceOutput) WaitUntilTargetsReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EcsService) pulumi.BoolPtrOutput { return v.WaitUntilTargetsReady }).(pulumi.BoolPtrOutput)
}

type EcsServiceArrayOutput struct{ *pulumi.OutputState }

func (EcsServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsService)(nil)).Elem()
}

func (o EcsServiceArrayOutput) ToEcsServiceArrayOutput() EcsServiceArrayOutput {
	return o
}

func (o EcsServiceArrayOutput) ToEcsServiceArrayOutputWithContext(ctx context.Context) EcsServiceArrayOutput {
	return o
}

func (o EcsServiceArrayOutput) Index(i pulumi.IntInput) EcsServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EcsService {
		return vs[0].([]*EcsService)[vs[1].(int)]
	}).(EcsServiceOutput)
}

type EcsServiceMapOutput struct{ *pulumi.OutputState }

func (EcsServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsService)(nil)).Elem()
}

func (o EcsServiceMapOutput) ToEcsServiceMapOutput() EcsServiceMapOutput {
	return o
}

func (o EcsServiceMapOutput) ToEcsServiceMapOutputWithContext(ctx context.Context) EcsServiceMapOutput {
	return o
}

func (o EcsServiceMapOutput) MapIndex(k pulumi.StringInput) EcsServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EcsService {
		return vs[0].(map[string]*EcsService)[vs[1].(string)]
	}).(EcsServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EcsServiceInput)(nil)).Elem(), &EcsService{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsServiceArrayInput)(nil)).Elem(), EcsServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsServiceMapInput)(nil)).Elem(), EcsServiceMap{})
	pulumi.RegisterOutputType(EcsServiceOutput{})
	pulumi.RegisterOutputType(EcsServiceArrayOutput{})
	pulumi.RegisterOutputType(EcsServiceMapOutput{})
}
