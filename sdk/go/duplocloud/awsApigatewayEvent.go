// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AwsApigatewayEvent` manages an AWS API Gateway events with integration in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAwsApigatewayEvent(ctx, "apigateway_event", &duplocloud.AwsApigatewayEventArgs{
//				TenantId:          myapp.TenantId,
//				ApiGatewayId:      pulumi.String("t84tb3skz0"),
//				Method:            pulumi.String("POST"),
//				Path:              pulumi.String("/v2/docs"),
//				Cors:              pulumi.Bool(true),
//				AuthorizationType: pulumi.String("COGNITO_USER_POOLS"),
//				AuthorizerId:      pulumi.String("gto03x"),
//				Integration: &duplocloud.AwsApigatewayEventIntegrationArgs{
//					Type:    pulumi.String("AWS_PROXY"),
//					Uri:     pulumi.String("arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:1234567890:function:duploservices-dev-valuation-test/invocations"),
//					Timeout: pulumi.Int(29000),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing AWS API Gateway Event
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *API_GATEWAY_ID* The API Gateway ID.
//
//   - *METHOD* The HTTP Method.
//
//   - *PATH* The API endpoint path.
//
// ```sh
// $ pulumi import duplocloud:index/awsApigatewayEvent:AwsApigatewayEvent ssm_param *TENANT_ID*/*API_GATEWAY_ID*/*METHOD*/*PATH*
// ```
type AwsApigatewayEvent struct {
	pulumi.CustomResourceState

	// The ID of the REST API.
	ApiGatewayId pulumi.StringOutput `pulumi:"apiGatewayId"`
	// Specify if the method requires an API key.
	ApiKeyRequired pulumi.BoolOutput `pulumi:"apiKeyRequired"`
	// Type of authorization used for the method. (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)
	AuthorizationType pulumi.StringOutput `pulumi:"authorizationType"`
	// Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`.
	AuthorizerId pulumi.StringOutput `pulumi:"authorizerId"`
	// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
	ContentHandling pulumi.StringOutput `pulumi:"contentHandling"`
	// Enable handling of preflight requests.
	Cors pulumi.BoolOutput `pulumi:"cors"`
	// Specify API gateway integration.
	Integration AwsApigatewayEventIntegrationOutput `pulumi:"integration"`
	// HTTP Method.
	Method pulumi.StringOutput `pulumi:"method"`
	// The path segment of API resource.
	Path pulumi.StringOutput `pulumi:"path"`
	// The GUID of the tenant that the API gateway event will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewAwsApigatewayEvent registers a new resource with the given unique name, arguments, and options.
func NewAwsApigatewayEvent(ctx *pulumi.Context,
	name string, args *AwsApigatewayEventArgs, opts ...pulumi.ResourceOption) (*AwsApigatewayEvent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'ApiGatewayId'")
	}
	if args.Integration == nil {
		return nil, errors.New("invalid value for required argument 'Integration'")
	}
	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsApigatewayEvent
	err := ctx.RegisterResource("duplocloud:index/awsApigatewayEvent:AwsApigatewayEvent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsApigatewayEvent gets an existing AwsApigatewayEvent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsApigatewayEvent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsApigatewayEventState, opts ...pulumi.ResourceOption) (*AwsApigatewayEvent, error) {
	var resource AwsApigatewayEvent
	err := ctx.ReadResource("duplocloud:index/awsApigatewayEvent:AwsApigatewayEvent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsApigatewayEvent resources.
type awsApigatewayEventState struct {
	// The ID of the REST API.
	ApiGatewayId *string `pulumi:"apiGatewayId"`
	// Specify if the method requires an API key.
	ApiKeyRequired *bool `pulumi:"apiKeyRequired"`
	// Type of authorization used for the method. (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)
	AuthorizationType *string `pulumi:"authorizationType"`
	// Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`.
	AuthorizerId *string `pulumi:"authorizerId"`
	// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
	ContentHandling *string `pulumi:"contentHandling"`
	// Enable handling of preflight requests.
	Cors *bool `pulumi:"cors"`
	// Specify API gateway integration.
	Integration *AwsApigatewayEventIntegration `pulumi:"integration"`
	// HTTP Method.
	Method *string `pulumi:"method"`
	// The path segment of API resource.
	Path *string `pulumi:"path"`
	// The GUID of the tenant that the API gateway event will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type AwsApigatewayEventState struct {
	// The ID of the REST API.
	ApiGatewayId pulumi.StringPtrInput
	// Specify if the method requires an API key.
	ApiKeyRequired pulumi.BoolPtrInput
	// Type of authorization used for the method. (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)
	AuthorizationType pulumi.StringPtrInput
	// Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`.
	AuthorizerId pulumi.StringPtrInput
	// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
	ContentHandling pulumi.StringPtrInput
	// Enable handling of preflight requests.
	Cors pulumi.BoolPtrInput
	// Specify API gateway integration.
	Integration AwsApigatewayEventIntegrationPtrInput
	// HTTP Method.
	Method pulumi.StringPtrInput
	// The path segment of API resource.
	Path pulumi.StringPtrInput
	// The GUID of the tenant that the API gateway event will be created in.
	TenantId pulumi.StringPtrInput
}

func (AwsApigatewayEventState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsApigatewayEventState)(nil)).Elem()
}

type awsApigatewayEventArgs struct {
	// The ID of the REST API.
	ApiGatewayId string `pulumi:"apiGatewayId"`
	// Specify if the method requires an API key.
	ApiKeyRequired *bool `pulumi:"apiKeyRequired"`
	// Type of authorization used for the method. (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)
	AuthorizationType *string `pulumi:"authorizationType"`
	// Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`.
	AuthorizerId *string `pulumi:"authorizerId"`
	// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
	ContentHandling *string `pulumi:"contentHandling"`
	// Enable handling of preflight requests.
	Cors *bool `pulumi:"cors"`
	// Specify API gateway integration.
	Integration AwsApigatewayEventIntegration `pulumi:"integration"`
	// HTTP Method.
	Method string `pulumi:"method"`
	// The path segment of API resource.
	Path string `pulumi:"path"`
	// The GUID of the tenant that the API gateway event will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AwsApigatewayEvent resource.
type AwsApigatewayEventArgs struct {
	// The ID of the REST API.
	ApiGatewayId pulumi.StringInput
	// Specify if the method requires an API key.
	ApiKeyRequired pulumi.BoolPtrInput
	// Type of authorization used for the method. (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)
	AuthorizationType pulumi.StringPtrInput
	// Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`.
	AuthorizerId pulumi.StringPtrInput
	// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
	ContentHandling pulumi.StringPtrInput
	// Enable handling of preflight requests.
	Cors pulumi.BoolPtrInput
	// Specify API gateway integration.
	Integration AwsApigatewayEventIntegrationInput
	// HTTP Method.
	Method pulumi.StringInput
	// The path segment of API resource.
	Path pulumi.StringInput
	// The GUID of the tenant that the API gateway event will be created in.
	TenantId pulumi.StringInput
}

func (AwsApigatewayEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsApigatewayEventArgs)(nil)).Elem()
}

type AwsApigatewayEventInput interface {
	pulumi.Input

	ToAwsApigatewayEventOutput() AwsApigatewayEventOutput
	ToAwsApigatewayEventOutputWithContext(ctx context.Context) AwsApigatewayEventOutput
}

func (*AwsApigatewayEvent) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsApigatewayEvent)(nil)).Elem()
}

func (i *AwsApigatewayEvent) ToAwsApigatewayEventOutput() AwsApigatewayEventOutput {
	return i.ToAwsApigatewayEventOutputWithContext(context.Background())
}

func (i *AwsApigatewayEvent) ToAwsApigatewayEventOutputWithContext(ctx context.Context) AwsApigatewayEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsApigatewayEventOutput)
}

// AwsApigatewayEventArrayInput is an input type that accepts AwsApigatewayEventArray and AwsApigatewayEventArrayOutput values.
// You can construct a concrete instance of `AwsApigatewayEventArrayInput` via:
//
//	AwsApigatewayEventArray{ AwsApigatewayEventArgs{...} }
type AwsApigatewayEventArrayInput interface {
	pulumi.Input

	ToAwsApigatewayEventArrayOutput() AwsApigatewayEventArrayOutput
	ToAwsApigatewayEventArrayOutputWithContext(context.Context) AwsApigatewayEventArrayOutput
}

type AwsApigatewayEventArray []AwsApigatewayEventInput

func (AwsApigatewayEventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsApigatewayEvent)(nil)).Elem()
}

func (i AwsApigatewayEventArray) ToAwsApigatewayEventArrayOutput() AwsApigatewayEventArrayOutput {
	return i.ToAwsApigatewayEventArrayOutputWithContext(context.Background())
}

func (i AwsApigatewayEventArray) ToAwsApigatewayEventArrayOutputWithContext(ctx context.Context) AwsApigatewayEventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsApigatewayEventArrayOutput)
}

// AwsApigatewayEventMapInput is an input type that accepts AwsApigatewayEventMap and AwsApigatewayEventMapOutput values.
// You can construct a concrete instance of `AwsApigatewayEventMapInput` via:
//
//	AwsApigatewayEventMap{ "key": AwsApigatewayEventArgs{...} }
type AwsApigatewayEventMapInput interface {
	pulumi.Input

	ToAwsApigatewayEventMapOutput() AwsApigatewayEventMapOutput
	ToAwsApigatewayEventMapOutputWithContext(context.Context) AwsApigatewayEventMapOutput
}

type AwsApigatewayEventMap map[string]AwsApigatewayEventInput

func (AwsApigatewayEventMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsApigatewayEvent)(nil)).Elem()
}

func (i AwsApigatewayEventMap) ToAwsApigatewayEventMapOutput() AwsApigatewayEventMapOutput {
	return i.ToAwsApigatewayEventMapOutputWithContext(context.Background())
}

func (i AwsApigatewayEventMap) ToAwsApigatewayEventMapOutputWithContext(ctx context.Context) AwsApigatewayEventMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsApigatewayEventMapOutput)
}

type AwsApigatewayEventOutput struct{ *pulumi.OutputState }

func (AwsApigatewayEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsApigatewayEvent)(nil)).Elem()
}

func (o AwsApigatewayEventOutput) ToAwsApigatewayEventOutput() AwsApigatewayEventOutput {
	return o
}

func (o AwsApigatewayEventOutput) ToAwsApigatewayEventOutputWithContext(ctx context.Context) AwsApigatewayEventOutput {
	return o
}

// The ID of the REST API.
func (o AwsApigatewayEventOutput) ApiGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsApigatewayEvent) pulumi.StringOutput { return v.ApiGatewayId }).(pulumi.StringOutput)
}

// Specify if the method requires an API key.
func (o AwsApigatewayEventOutput) ApiKeyRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v *AwsApigatewayEvent) pulumi.BoolOutput { return v.ApiKeyRequired }).(pulumi.BoolOutput)
}

// Type of authorization used for the method. (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)
func (o AwsApigatewayEventOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsApigatewayEvent) pulumi.StringOutput { return v.AuthorizationType }).(pulumi.StringOutput)
}

// Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`.
func (o AwsApigatewayEventOutput) AuthorizerId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsApigatewayEvent) pulumi.StringOutput { return v.AuthorizerId }).(pulumi.StringOutput)
}

// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
func (o AwsApigatewayEventOutput) ContentHandling() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsApigatewayEvent) pulumi.StringOutput { return v.ContentHandling }).(pulumi.StringOutput)
}

// Enable handling of preflight requests.
func (o AwsApigatewayEventOutput) Cors() pulumi.BoolOutput {
	return o.ApplyT(func(v *AwsApigatewayEvent) pulumi.BoolOutput { return v.Cors }).(pulumi.BoolOutput)
}

// Specify API gateway integration.
func (o AwsApigatewayEventOutput) Integration() AwsApigatewayEventIntegrationOutput {
	return o.ApplyT(func(v *AwsApigatewayEvent) AwsApigatewayEventIntegrationOutput { return v.Integration }).(AwsApigatewayEventIntegrationOutput)
}

// HTTP Method.
func (o AwsApigatewayEventOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsApigatewayEvent) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

// The path segment of API resource.
func (o AwsApigatewayEventOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsApigatewayEvent) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// The GUID of the tenant that the API gateway event will be created in.
func (o AwsApigatewayEventOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsApigatewayEvent) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type AwsApigatewayEventArrayOutput struct{ *pulumi.OutputState }

func (AwsApigatewayEventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsApigatewayEvent)(nil)).Elem()
}

func (o AwsApigatewayEventArrayOutput) ToAwsApigatewayEventArrayOutput() AwsApigatewayEventArrayOutput {
	return o
}

func (o AwsApigatewayEventArrayOutput) ToAwsApigatewayEventArrayOutputWithContext(ctx context.Context) AwsApigatewayEventArrayOutput {
	return o
}

func (o AwsApigatewayEventArrayOutput) Index(i pulumi.IntInput) AwsApigatewayEventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsApigatewayEvent {
		return vs[0].([]*AwsApigatewayEvent)[vs[1].(int)]
	}).(AwsApigatewayEventOutput)
}

type AwsApigatewayEventMapOutput struct{ *pulumi.OutputState }

func (AwsApigatewayEventMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsApigatewayEvent)(nil)).Elem()
}

func (o AwsApigatewayEventMapOutput) ToAwsApigatewayEventMapOutput() AwsApigatewayEventMapOutput {
	return o
}

func (o AwsApigatewayEventMapOutput) ToAwsApigatewayEventMapOutputWithContext(ctx context.Context) AwsApigatewayEventMapOutput {
	return o
}

func (o AwsApigatewayEventMapOutput) MapIndex(k pulumi.StringInput) AwsApigatewayEventOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsApigatewayEvent {
		return vs[0].(map[string]*AwsApigatewayEvent)[vs[1].(string)]
	}).(AwsApigatewayEventOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsApigatewayEventInput)(nil)).Elem(), &AwsApigatewayEvent{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsApigatewayEventArrayInput)(nil)).Elem(), AwsApigatewayEventArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsApigatewayEventMapInput)(nil)).Elem(), AwsApigatewayEventMap{})
	pulumi.RegisterOutputType(AwsApigatewayEventOutput{})
	pulumi.RegisterOutputType(AwsApigatewayEventArrayOutput{})
	pulumi.RegisterOutputType(AwsApigatewayEventMapOutput{})
}
