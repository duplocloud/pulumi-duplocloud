// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `EcsTaskDefinition` manages a Amazon ECS task definition in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal([]map[string]interface{}{
//				map[string]interface{}{
//					"Name":  "default",
//					"Image": "nginx:latest",
//					"Environment": []map[string]interface{}{
//						map[string]interface{}{
//							"Name":  "NGINX_HOST",
//							"Value": "foo",
//						},
//					},
//					"PortMappings": []map[string]interface{}{
//						map[string]interface{}{
//							"ContainerPort": "80",
//							"HostPort":      "80",
//							"Protocol": map[string]interface{}{
//								"Value": "tcp",
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			// Create a task definition for NGINX using ECS
//			_, err = duplocloud.NewEcsTaskDefinition(ctx, "myservice", &duplocloud.EcsTaskDefinitionArgs{
//				TenantId:             myapp.TenantId,
//				Family:               pulumi.String("duploservices-default-myservice"),
//				ContainerDefinitions: pulumi.String(json0),
//				Cpu:                  pulumi.String("256"),
//				Memory:               pulumi.String("1024"),
//				RequiresCompatibilities: pulumi.StringArray{
//					pulumi.String("FARGATE"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing ECS task definition
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *ARN* is the full ARN of the task definition
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/ecsTaskDefinition:EcsTaskDefinition myservice subscriptions/*TENANT_ID*/EcsTaskDefinition/*ARN*
// ```
type EcsTaskDefinition struct {
	pulumi.CustomResourceState

	// The ARN of the task definition.
	Arn                  pulumi.StringOutput `pulumi:"arn"`
	ContainerDefinitions pulumi.StringOutput `pulumi:"containerDefinitions"`
	// container_definitions updates in backend
	ContainerDefinitionsUpdates pulumi.StringOutput    `pulumi:"containerDefinitionsUpdates"`
	Cpu                         pulumi.StringPtrOutput `pulumi:"cpu"`
	ExecutionRoleArn            pulumi.StringOutput    `pulumi:"executionRoleArn"`
	// The name of the task definition to create.
	Family pulumi.StringOutput `pulumi:"family"`
	// The name of the task definition to create.
	FullFamilyName        pulumi.StringOutput                              `pulumi:"fullFamilyName"`
	InferenceAccelerators EcsTaskDefinitionInferenceAcceleratorArrayOutput `pulumi:"inferenceAccelerators"`
	IpcMode               pulumi.StringPtrOutput                           `pulumi:"ipcMode"`
	Memory                pulumi.StringPtrOutput                           `pulumi:"memory"`
	// Defaults to `awsvpc`.
	NetworkMode          pulumi.StringPtrOutput                          `pulumi:"networkMode"`
	PidMode              pulumi.StringPtrOutput                          `pulumi:"pidMode"`
	PlacementConstraints EcsTaskDefinitionPlacementConstraintArrayOutput `pulumi:"placementConstraints"`
	PreventTfDestroy     pulumi.BoolPtrOutput                            `pulumi:"preventTfDestroy"`
	ProxyConfiguration   EcsTaskDefinitionProxyConfigurationPtrOutput    `pulumi:"proxyConfiguration"`
	RequiresAttributes   EcsTaskDefinitionRequiresAttributeArrayOutput   `pulumi:"requiresAttributes"`
	// Requires compatibilities for running jobs. Valid values are [FARGATE]
	RequiresCompatibilities pulumi.StringArrayOutput `pulumi:"requiresCompatibilities"`
	// The current revision of the task definition.
	Revision pulumi.IntOutput `pulumi:"revision"`
	// Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.
	RuntimePlatform EcsTaskDefinitionRuntimePlatformOutput `pulumi:"runtimePlatform"`
	// The status of the task definition.
	Status      pulumi.StringOutput             `pulumi:"status"`
	Tags        EcsTaskDefinitionTagArrayOutput `pulumi:"tags"`
	TaskRoleArn pulumi.StringOutput             `pulumi:"taskRoleArn"`
	// The GUID of the tenant that the task definition will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Defaults to `[]`.
	Volumes pulumi.StringPtrOutput `pulumi:"volumes"`
}

// NewEcsTaskDefinition registers a new resource with the given unique name, arguments, and options.
func NewEcsTaskDefinition(ctx *pulumi.Context,
	name string, args *EcsTaskDefinitionArgs, opts ...pulumi.ResourceOption) (*EcsTaskDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContainerDefinitions == nil {
		return nil, errors.New("invalid value for required argument 'ContainerDefinitions'")
	}
	if args.Family == nil {
		return nil, errors.New("invalid value for required argument 'Family'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EcsTaskDefinition
	err := ctx.RegisterResource("duplocloud:index/ecsTaskDefinition:EcsTaskDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEcsTaskDefinition gets an existing EcsTaskDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEcsTaskDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EcsTaskDefinitionState, opts ...pulumi.ResourceOption) (*EcsTaskDefinition, error) {
	var resource EcsTaskDefinition
	err := ctx.ReadResource("duplocloud:index/ecsTaskDefinition:EcsTaskDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EcsTaskDefinition resources.
type ecsTaskDefinitionState struct {
	// The ARN of the task definition.
	Arn                  *string `pulumi:"arn"`
	ContainerDefinitions *string `pulumi:"containerDefinitions"`
	// container_definitions updates in backend
	ContainerDefinitionsUpdates *string `pulumi:"containerDefinitionsUpdates"`
	Cpu                         *string `pulumi:"cpu"`
	ExecutionRoleArn            *string `pulumi:"executionRoleArn"`
	// The name of the task definition to create.
	Family *string `pulumi:"family"`
	// The name of the task definition to create.
	FullFamilyName        *string                                 `pulumi:"fullFamilyName"`
	InferenceAccelerators []EcsTaskDefinitionInferenceAccelerator `pulumi:"inferenceAccelerators"`
	IpcMode               *string                                 `pulumi:"ipcMode"`
	Memory                *string                                 `pulumi:"memory"`
	// Defaults to `awsvpc`.
	NetworkMode          *string                                `pulumi:"networkMode"`
	PidMode              *string                                `pulumi:"pidMode"`
	PlacementConstraints []EcsTaskDefinitionPlacementConstraint `pulumi:"placementConstraints"`
	PreventTfDestroy     *bool                                  `pulumi:"preventTfDestroy"`
	ProxyConfiguration   *EcsTaskDefinitionProxyConfiguration   `pulumi:"proxyConfiguration"`
	RequiresAttributes   []EcsTaskDefinitionRequiresAttribute   `pulumi:"requiresAttributes"`
	// Requires compatibilities for running jobs. Valid values are [FARGATE]
	RequiresCompatibilities []string `pulumi:"requiresCompatibilities"`
	// The current revision of the task definition.
	Revision *int `pulumi:"revision"`
	// Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.
	RuntimePlatform *EcsTaskDefinitionRuntimePlatform `pulumi:"runtimePlatform"`
	// The status of the task definition.
	Status      *string                `pulumi:"status"`
	Tags        []EcsTaskDefinitionTag `pulumi:"tags"`
	TaskRoleArn *string                `pulumi:"taskRoleArn"`
	// The GUID of the tenant that the task definition will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Defaults to `[]`.
	Volumes *string `pulumi:"volumes"`
}

type EcsTaskDefinitionState struct {
	// The ARN of the task definition.
	Arn                  pulumi.StringPtrInput
	ContainerDefinitions pulumi.StringPtrInput
	// container_definitions updates in backend
	ContainerDefinitionsUpdates pulumi.StringPtrInput
	Cpu                         pulumi.StringPtrInput
	ExecutionRoleArn            pulumi.StringPtrInput
	// The name of the task definition to create.
	Family pulumi.StringPtrInput
	// The name of the task definition to create.
	FullFamilyName        pulumi.StringPtrInput
	InferenceAccelerators EcsTaskDefinitionInferenceAcceleratorArrayInput
	IpcMode               pulumi.StringPtrInput
	Memory                pulumi.StringPtrInput
	// Defaults to `awsvpc`.
	NetworkMode          pulumi.StringPtrInput
	PidMode              pulumi.StringPtrInput
	PlacementConstraints EcsTaskDefinitionPlacementConstraintArrayInput
	PreventTfDestroy     pulumi.BoolPtrInput
	ProxyConfiguration   EcsTaskDefinitionProxyConfigurationPtrInput
	RequiresAttributes   EcsTaskDefinitionRequiresAttributeArrayInput
	// Requires compatibilities for running jobs. Valid values are [FARGATE]
	RequiresCompatibilities pulumi.StringArrayInput
	// The current revision of the task definition.
	Revision pulumi.IntPtrInput
	// Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.
	RuntimePlatform EcsTaskDefinitionRuntimePlatformPtrInput
	// The status of the task definition.
	Status      pulumi.StringPtrInput
	Tags        EcsTaskDefinitionTagArrayInput
	TaskRoleArn pulumi.StringPtrInput
	// The GUID of the tenant that the task definition will be created in.
	TenantId pulumi.StringPtrInput
	// Defaults to `[]`.
	Volumes pulumi.StringPtrInput
}

func (EcsTaskDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsTaskDefinitionState)(nil)).Elem()
}

type ecsTaskDefinitionArgs struct {
	ContainerDefinitions string  `pulumi:"containerDefinitions"`
	Cpu                  *string `pulumi:"cpu"`
	// The name of the task definition to create.
	Family                string                                  `pulumi:"family"`
	InferenceAccelerators []EcsTaskDefinitionInferenceAccelerator `pulumi:"inferenceAccelerators"`
	IpcMode               *string                                 `pulumi:"ipcMode"`
	Memory                *string                                 `pulumi:"memory"`
	// Defaults to `awsvpc`.
	NetworkMode          *string                                `pulumi:"networkMode"`
	PidMode              *string                                `pulumi:"pidMode"`
	PlacementConstraints []EcsTaskDefinitionPlacementConstraint `pulumi:"placementConstraints"`
	PreventTfDestroy     *bool                                  `pulumi:"preventTfDestroy"`
	ProxyConfiguration   *EcsTaskDefinitionProxyConfiguration   `pulumi:"proxyConfiguration"`
	RequiresAttributes   []EcsTaskDefinitionRequiresAttribute   `pulumi:"requiresAttributes"`
	// Requires compatibilities for running jobs. Valid values are [FARGATE]
	RequiresCompatibilities []string `pulumi:"requiresCompatibilities"`
	// Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.
	RuntimePlatform *EcsTaskDefinitionRuntimePlatform `pulumi:"runtimePlatform"`
	// The GUID of the tenant that the task definition will be created in.
	TenantId string `pulumi:"tenantId"`
	// Defaults to `[]`.
	Volumes *string `pulumi:"volumes"`
}

// The set of arguments for constructing a EcsTaskDefinition resource.
type EcsTaskDefinitionArgs struct {
	ContainerDefinitions pulumi.StringInput
	Cpu                  pulumi.StringPtrInput
	// The name of the task definition to create.
	Family                pulumi.StringInput
	InferenceAccelerators EcsTaskDefinitionInferenceAcceleratorArrayInput
	IpcMode               pulumi.StringPtrInput
	Memory                pulumi.StringPtrInput
	// Defaults to `awsvpc`.
	NetworkMode          pulumi.StringPtrInput
	PidMode              pulumi.StringPtrInput
	PlacementConstraints EcsTaskDefinitionPlacementConstraintArrayInput
	PreventTfDestroy     pulumi.BoolPtrInput
	ProxyConfiguration   EcsTaskDefinitionProxyConfigurationPtrInput
	RequiresAttributes   EcsTaskDefinitionRequiresAttributeArrayInput
	// Requires compatibilities for running jobs. Valid values are [FARGATE]
	RequiresCompatibilities pulumi.StringArrayInput
	// Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.
	RuntimePlatform EcsTaskDefinitionRuntimePlatformPtrInput
	// The GUID of the tenant that the task definition will be created in.
	TenantId pulumi.StringInput
	// Defaults to `[]`.
	Volumes pulumi.StringPtrInput
}

func (EcsTaskDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsTaskDefinitionArgs)(nil)).Elem()
}

type EcsTaskDefinitionInput interface {
	pulumi.Input

	ToEcsTaskDefinitionOutput() EcsTaskDefinitionOutput
	ToEcsTaskDefinitionOutputWithContext(ctx context.Context) EcsTaskDefinitionOutput
}

func (*EcsTaskDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsTaskDefinition)(nil)).Elem()
}

func (i *EcsTaskDefinition) ToEcsTaskDefinitionOutput() EcsTaskDefinitionOutput {
	return i.ToEcsTaskDefinitionOutputWithContext(context.Background())
}

func (i *EcsTaskDefinition) ToEcsTaskDefinitionOutputWithContext(ctx context.Context) EcsTaskDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsTaskDefinitionOutput)
}

// EcsTaskDefinitionArrayInput is an input type that accepts EcsTaskDefinitionArray and EcsTaskDefinitionArrayOutput values.
// You can construct a concrete instance of `EcsTaskDefinitionArrayInput` via:
//
//	EcsTaskDefinitionArray{ EcsTaskDefinitionArgs{...} }
type EcsTaskDefinitionArrayInput interface {
	pulumi.Input

	ToEcsTaskDefinitionArrayOutput() EcsTaskDefinitionArrayOutput
	ToEcsTaskDefinitionArrayOutputWithContext(context.Context) EcsTaskDefinitionArrayOutput
}

type EcsTaskDefinitionArray []EcsTaskDefinitionInput

func (EcsTaskDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsTaskDefinition)(nil)).Elem()
}

func (i EcsTaskDefinitionArray) ToEcsTaskDefinitionArrayOutput() EcsTaskDefinitionArrayOutput {
	return i.ToEcsTaskDefinitionArrayOutputWithContext(context.Background())
}

func (i EcsTaskDefinitionArray) ToEcsTaskDefinitionArrayOutputWithContext(ctx context.Context) EcsTaskDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsTaskDefinitionArrayOutput)
}

// EcsTaskDefinitionMapInput is an input type that accepts EcsTaskDefinitionMap and EcsTaskDefinitionMapOutput values.
// You can construct a concrete instance of `EcsTaskDefinitionMapInput` via:
//
//	EcsTaskDefinitionMap{ "key": EcsTaskDefinitionArgs{...} }
type EcsTaskDefinitionMapInput interface {
	pulumi.Input

	ToEcsTaskDefinitionMapOutput() EcsTaskDefinitionMapOutput
	ToEcsTaskDefinitionMapOutputWithContext(context.Context) EcsTaskDefinitionMapOutput
}

type EcsTaskDefinitionMap map[string]EcsTaskDefinitionInput

func (EcsTaskDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsTaskDefinition)(nil)).Elem()
}

func (i EcsTaskDefinitionMap) ToEcsTaskDefinitionMapOutput() EcsTaskDefinitionMapOutput {
	return i.ToEcsTaskDefinitionMapOutputWithContext(context.Background())
}

func (i EcsTaskDefinitionMap) ToEcsTaskDefinitionMapOutputWithContext(ctx context.Context) EcsTaskDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsTaskDefinitionMapOutput)
}

type EcsTaskDefinitionOutput struct{ *pulumi.OutputState }

func (EcsTaskDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsTaskDefinition)(nil)).Elem()
}

func (o EcsTaskDefinitionOutput) ToEcsTaskDefinitionOutput() EcsTaskDefinitionOutput {
	return o
}

func (o EcsTaskDefinitionOutput) ToEcsTaskDefinitionOutputWithContext(ctx context.Context) EcsTaskDefinitionOutput {
	return o
}

// The ARN of the task definition.
func (o EcsTaskDefinitionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o EcsTaskDefinitionOutput) ContainerDefinitions() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringOutput { return v.ContainerDefinitions }).(pulumi.StringOutput)
}

// container_definitions updates in backend
func (o EcsTaskDefinitionOutput) ContainerDefinitionsUpdates() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringOutput { return v.ContainerDefinitionsUpdates }).(pulumi.StringOutput)
}

func (o EcsTaskDefinitionOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringPtrOutput { return v.Cpu }).(pulumi.StringPtrOutput)
}

func (o EcsTaskDefinitionOutput) ExecutionRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringOutput { return v.ExecutionRoleArn }).(pulumi.StringOutput)
}

// The name of the task definition to create.
func (o EcsTaskDefinitionOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringOutput { return v.Family }).(pulumi.StringOutput)
}

// The name of the task definition to create.
func (o EcsTaskDefinitionOutput) FullFamilyName() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringOutput { return v.FullFamilyName }).(pulumi.StringOutput)
}

func (o EcsTaskDefinitionOutput) InferenceAccelerators() EcsTaskDefinitionInferenceAcceleratorArrayOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) EcsTaskDefinitionInferenceAcceleratorArrayOutput {
		return v.InferenceAccelerators
	}).(EcsTaskDefinitionInferenceAcceleratorArrayOutput)
}

func (o EcsTaskDefinitionOutput) IpcMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringPtrOutput { return v.IpcMode }).(pulumi.StringPtrOutput)
}

func (o EcsTaskDefinitionOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringPtrOutput { return v.Memory }).(pulumi.StringPtrOutput)
}

// Defaults to `awsvpc`.
func (o EcsTaskDefinitionOutput) NetworkMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringPtrOutput { return v.NetworkMode }).(pulumi.StringPtrOutput)
}

func (o EcsTaskDefinitionOutput) PidMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringPtrOutput { return v.PidMode }).(pulumi.StringPtrOutput)
}

func (o EcsTaskDefinitionOutput) PlacementConstraints() EcsTaskDefinitionPlacementConstraintArrayOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) EcsTaskDefinitionPlacementConstraintArrayOutput {
		return v.PlacementConstraints
	}).(EcsTaskDefinitionPlacementConstraintArrayOutput)
}

func (o EcsTaskDefinitionOutput) PreventTfDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.BoolPtrOutput { return v.PreventTfDestroy }).(pulumi.BoolPtrOutput)
}

func (o EcsTaskDefinitionOutput) ProxyConfiguration() EcsTaskDefinitionProxyConfigurationPtrOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) EcsTaskDefinitionProxyConfigurationPtrOutput { return v.ProxyConfiguration }).(EcsTaskDefinitionProxyConfigurationPtrOutput)
}

func (o EcsTaskDefinitionOutput) RequiresAttributes() EcsTaskDefinitionRequiresAttributeArrayOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) EcsTaskDefinitionRequiresAttributeArrayOutput { return v.RequiresAttributes }).(EcsTaskDefinitionRequiresAttributeArrayOutput)
}

// Requires compatibilities for running jobs. Valid values are [FARGATE]
func (o EcsTaskDefinitionOutput) RequiresCompatibilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringArrayOutput { return v.RequiresCompatibilities }).(pulumi.StringArrayOutput)
}

// The current revision of the task definition.
func (o EcsTaskDefinitionOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.IntOutput { return v.Revision }).(pulumi.IntOutput)
}

// Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.
func (o EcsTaskDefinitionOutput) RuntimePlatform() EcsTaskDefinitionRuntimePlatformOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) EcsTaskDefinitionRuntimePlatformOutput { return v.RuntimePlatform }).(EcsTaskDefinitionRuntimePlatformOutput)
}

// The status of the task definition.
func (o EcsTaskDefinitionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o EcsTaskDefinitionOutput) Tags() EcsTaskDefinitionTagArrayOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) EcsTaskDefinitionTagArrayOutput { return v.Tags }).(EcsTaskDefinitionTagArrayOutput)
}

func (o EcsTaskDefinitionOutput) TaskRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringOutput { return v.TaskRoleArn }).(pulumi.StringOutput)
}

// The GUID of the tenant that the task definition will be created in.
func (o EcsTaskDefinitionOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Defaults to `[]`.
func (o EcsTaskDefinitionOutput) Volumes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EcsTaskDefinition) pulumi.StringPtrOutput { return v.Volumes }).(pulumi.StringPtrOutput)
}

type EcsTaskDefinitionArrayOutput struct{ *pulumi.OutputState }

func (EcsTaskDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsTaskDefinition)(nil)).Elem()
}

func (o EcsTaskDefinitionArrayOutput) ToEcsTaskDefinitionArrayOutput() EcsTaskDefinitionArrayOutput {
	return o
}

func (o EcsTaskDefinitionArrayOutput) ToEcsTaskDefinitionArrayOutputWithContext(ctx context.Context) EcsTaskDefinitionArrayOutput {
	return o
}

func (o EcsTaskDefinitionArrayOutput) Index(i pulumi.IntInput) EcsTaskDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EcsTaskDefinition {
		return vs[0].([]*EcsTaskDefinition)[vs[1].(int)]
	}).(EcsTaskDefinitionOutput)
}

type EcsTaskDefinitionMapOutput struct{ *pulumi.OutputState }

func (EcsTaskDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsTaskDefinition)(nil)).Elem()
}

func (o EcsTaskDefinitionMapOutput) ToEcsTaskDefinitionMapOutput() EcsTaskDefinitionMapOutput {
	return o
}

func (o EcsTaskDefinitionMapOutput) ToEcsTaskDefinitionMapOutputWithContext(ctx context.Context) EcsTaskDefinitionMapOutput {
	return o
}

func (o EcsTaskDefinitionMapOutput) MapIndex(k pulumi.StringInput) EcsTaskDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EcsTaskDefinition {
		return vs[0].(map[string]*EcsTaskDefinition)[vs[1].(string)]
	}).(EcsTaskDefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EcsTaskDefinitionInput)(nil)).Elem(), &EcsTaskDefinition{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsTaskDefinitionArrayInput)(nil)).Elem(), EcsTaskDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsTaskDefinitionMapInput)(nil)).Elem(), EcsTaskDefinitionMap{})
	pulumi.RegisterOutputType(EcsTaskDefinitionOutput{})
	pulumi.RegisterOutputType(EcsTaskDefinitionArrayOutput{})
	pulumi.RegisterOutputType(EcsTaskDefinitionMapOutput{})
}
