// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `PlanSettings` manages an plan settings in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewPlanSettings(ctx, "myplanSettings", &duplocloud.PlanSettingsArgs{
//				PlanId:            pulumi.String("myplan"),
//				UnrestrictedExtLb: pulumi.Bool(true),
//				DnsSetting: &duplocloud.PlanSettingsDnsSettingArgs{
//					DomainId:          pulumi.String("Z02791752705G9GHH8CYF"),
//					InternalDnsSuffix: pulumi.String(".test.duplocloud.net"),
//					ExternalDnsSuffix: pulumi.String(".test.duplocloud.net"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import duplocloud:index/planSettings:PlanSettings myplanSettings PLAN_ID
// ```
type PlanSettings struct {
	pulumi.CustomResourceState

	// A complete list of metadata for this plan, even ones not being managed by this resource.
	AllMetadatas PlanSettingsAllMetadataArrayOutput `pulumi:"allMetadatas"`
	DnsSetting   PlanSettingsDnsSettingOutput       `pulumi:"dnsSetting"`
	// A list of metadata for the plan to manage.
	Metadatas PlanSettingsMetadataArrayOutput `pulumi:"metadatas"`
	// The ID of the plan to configure.
	PlanId pulumi.StringOutput `pulumi:"planId"`
	// A list of metadata being managed by this resource.
	SpecifiedMetadatas pulumi.StringArrayOutput `pulumi:"specifiedMetadatas"`
	UnrestrictedExtLb  pulumi.BoolOutput        `pulumi:"unrestrictedExtLb"`
}

// NewPlanSettings registers a new resource with the given unique name, arguments, and options.
func NewPlanSettings(ctx *pulumi.Context,
	name string, args *PlanSettingsArgs, opts ...pulumi.ResourceOption) (*PlanSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlanId == nil {
		return nil, errors.New("invalid value for required argument 'PlanId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PlanSettings
	err := ctx.RegisterResource("duplocloud:index/planSettings:PlanSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlanSettings gets an existing PlanSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlanSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlanSettingsState, opts ...pulumi.ResourceOption) (*PlanSettings, error) {
	var resource PlanSettings
	err := ctx.ReadResource("duplocloud:index/planSettings:PlanSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlanSettings resources.
type planSettingsState struct {
	// A complete list of metadata for this plan, even ones not being managed by this resource.
	AllMetadatas []PlanSettingsAllMetadata `pulumi:"allMetadatas"`
	DnsSetting   *PlanSettingsDnsSetting   `pulumi:"dnsSetting"`
	// A list of metadata for the plan to manage.
	Metadatas []PlanSettingsMetadata `pulumi:"metadatas"`
	// The ID of the plan to configure.
	PlanId *string `pulumi:"planId"`
	// A list of metadata being managed by this resource.
	SpecifiedMetadatas []string `pulumi:"specifiedMetadatas"`
	UnrestrictedExtLb  *bool    `pulumi:"unrestrictedExtLb"`
}

type PlanSettingsState struct {
	// A complete list of metadata for this plan, even ones not being managed by this resource.
	AllMetadatas PlanSettingsAllMetadataArrayInput
	DnsSetting   PlanSettingsDnsSettingPtrInput
	// A list of metadata for the plan to manage.
	Metadatas PlanSettingsMetadataArrayInput
	// The ID of the plan to configure.
	PlanId pulumi.StringPtrInput
	// A list of metadata being managed by this resource.
	SpecifiedMetadatas pulumi.StringArrayInput
	UnrestrictedExtLb  pulumi.BoolPtrInput
}

func (PlanSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*planSettingsState)(nil)).Elem()
}

type planSettingsArgs struct {
	DnsSetting *PlanSettingsDnsSetting `pulumi:"dnsSetting"`
	// A list of metadata for the plan to manage.
	Metadatas []PlanSettingsMetadata `pulumi:"metadatas"`
	// The ID of the plan to configure.
	PlanId string `pulumi:"planId"`
	// A list of metadata being managed by this resource.
	SpecifiedMetadatas []string `pulumi:"specifiedMetadatas"`
	UnrestrictedExtLb  *bool    `pulumi:"unrestrictedExtLb"`
}

// The set of arguments for constructing a PlanSettings resource.
type PlanSettingsArgs struct {
	DnsSetting PlanSettingsDnsSettingPtrInput
	// A list of metadata for the plan to manage.
	Metadatas PlanSettingsMetadataArrayInput
	// The ID of the plan to configure.
	PlanId pulumi.StringInput
	// A list of metadata being managed by this resource.
	SpecifiedMetadatas pulumi.StringArrayInput
	UnrestrictedExtLb  pulumi.BoolPtrInput
}

func (PlanSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*planSettingsArgs)(nil)).Elem()
}

type PlanSettingsInput interface {
	pulumi.Input

	ToPlanSettingsOutput() PlanSettingsOutput
	ToPlanSettingsOutputWithContext(ctx context.Context) PlanSettingsOutput
}

func (*PlanSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSettings)(nil)).Elem()
}

func (i *PlanSettings) ToPlanSettingsOutput() PlanSettingsOutput {
	return i.ToPlanSettingsOutputWithContext(context.Background())
}

func (i *PlanSettings) ToPlanSettingsOutputWithContext(ctx context.Context) PlanSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSettingsOutput)
}

// PlanSettingsArrayInput is an input type that accepts PlanSettingsArray and PlanSettingsArrayOutput values.
// You can construct a concrete instance of `PlanSettingsArrayInput` via:
//
//	PlanSettingsArray{ PlanSettingsArgs{...} }
type PlanSettingsArrayInput interface {
	pulumi.Input

	ToPlanSettingsArrayOutput() PlanSettingsArrayOutput
	ToPlanSettingsArrayOutputWithContext(context.Context) PlanSettingsArrayOutput
}

type PlanSettingsArray []PlanSettingsInput

func (PlanSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlanSettings)(nil)).Elem()
}

func (i PlanSettingsArray) ToPlanSettingsArrayOutput() PlanSettingsArrayOutput {
	return i.ToPlanSettingsArrayOutputWithContext(context.Background())
}

func (i PlanSettingsArray) ToPlanSettingsArrayOutputWithContext(ctx context.Context) PlanSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSettingsArrayOutput)
}

// PlanSettingsMapInput is an input type that accepts PlanSettingsMap and PlanSettingsMapOutput values.
// You can construct a concrete instance of `PlanSettingsMapInput` via:
//
//	PlanSettingsMap{ "key": PlanSettingsArgs{...} }
type PlanSettingsMapInput interface {
	pulumi.Input

	ToPlanSettingsMapOutput() PlanSettingsMapOutput
	ToPlanSettingsMapOutputWithContext(context.Context) PlanSettingsMapOutput
}

type PlanSettingsMap map[string]PlanSettingsInput

func (PlanSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlanSettings)(nil)).Elem()
}

func (i PlanSettingsMap) ToPlanSettingsMapOutput() PlanSettingsMapOutput {
	return i.ToPlanSettingsMapOutputWithContext(context.Background())
}

func (i PlanSettingsMap) ToPlanSettingsMapOutputWithContext(ctx context.Context) PlanSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSettingsMapOutput)
}

type PlanSettingsOutput struct{ *pulumi.OutputState }

func (PlanSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSettings)(nil)).Elem()
}

func (o PlanSettingsOutput) ToPlanSettingsOutput() PlanSettingsOutput {
	return o
}

func (o PlanSettingsOutput) ToPlanSettingsOutputWithContext(ctx context.Context) PlanSettingsOutput {
	return o
}

// A complete list of metadata for this plan, even ones not being managed by this resource.
func (o PlanSettingsOutput) AllMetadatas() PlanSettingsAllMetadataArrayOutput {
	return o.ApplyT(func(v *PlanSettings) PlanSettingsAllMetadataArrayOutput { return v.AllMetadatas }).(PlanSettingsAllMetadataArrayOutput)
}

func (o PlanSettingsOutput) DnsSetting() PlanSettingsDnsSettingOutput {
	return o.ApplyT(func(v *PlanSettings) PlanSettingsDnsSettingOutput { return v.DnsSetting }).(PlanSettingsDnsSettingOutput)
}

// A list of metadata for the plan to manage.
func (o PlanSettingsOutput) Metadatas() PlanSettingsMetadataArrayOutput {
	return o.ApplyT(func(v *PlanSettings) PlanSettingsMetadataArrayOutput { return v.Metadatas }).(PlanSettingsMetadataArrayOutput)
}

// The ID of the plan to configure.
func (o PlanSettingsOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *PlanSettings) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

// A list of metadata being managed by this resource.
func (o PlanSettingsOutput) SpecifiedMetadatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlanSettings) pulumi.StringArrayOutput { return v.SpecifiedMetadatas }).(pulumi.StringArrayOutput)
}

func (o PlanSettingsOutput) UnrestrictedExtLb() pulumi.BoolOutput {
	return o.ApplyT(func(v *PlanSettings) pulumi.BoolOutput { return v.UnrestrictedExtLb }).(pulumi.BoolOutput)
}

type PlanSettingsArrayOutput struct{ *pulumi.OutputState }

func (PlanSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlanSettings)(nil)).Elem()
}

func (o PlanSettingsArrayOutput) ToPlanSettingsArrayOutput() PlanSettingsArrayOutput {
	return o
}

func (o PlanSettingsArrayOutput) ToPlanSettingsArrayOutputWithContext(ctx context.Context) PlanSettingsArrayOutput {
	return o
}

func (o PlanSettingsArrayOutput) Index(i pulumi.IntInput) PlanSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PlanSettings {
		return vs[0].([]*PlanSettings)[vs[1].(int)]
	}).(PlanSettingsOutput)
}

type PlanSettingsMapOutput struct{ *pulumi.OutputState }

func (PlanSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlanSettings)(nil)).Elem()
}

func (o PlanSettingsMapOutput) ToPlanSettingsMapOutput() PlanSettingsMapOutput {
	return o
}

func (o PlanSettingsMapOutput) ToPlanSettingsMapOutputWithContext(ctx context.Context) PlanSettingsMapOutput {
	return o
}

func (o PlanSettingsMapOutput) MapIndex(k pulumi.StringInput) PlanSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PlanSettings {
		return vs[0].(map[string]*PlanSettings)[vs[1].(string)]
	}).(PlanSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlanSettingsInput)(nil)).Elem(), &PlanSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanSettingsArrayInput)(nil)).Elem(), PlanSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanSettingsMapInput)(nil)).Elem(), PlanSettingsMap{})
	pulumi.RegisterOutputType(PlanSettingsOutput{})
	pulumi.RegisterOutputType(PlanSettingsArrayOutput{})
	pulumi.RegisterOutputType(PlanSettingsMapOutput{})
}
