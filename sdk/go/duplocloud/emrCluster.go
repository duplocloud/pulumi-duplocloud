// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `EmrCluster` manages an AWS emrCluster in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal([]map[string]interface{}{
//				map[string]interface{}{
//					"Name": "Hadoop",
//				},
//				map[string]interface{}{
//					"Name": "JupyterHub",
//				},
//				map[string]interface{}{
//					"Name": "Spark",
//				},
//				map[string]interface{}{
//					"Name": "Hive",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"ComputeLimits": map[string]interface{}{
//					"UnitType":                     "Instances",
//					"MinimumCapacityUnits":         2,
//					"MaximumCapacityUnits":         5,
//					"MaximumOnDemandCapacityUnits": 5,
//					"MaximumCoreCapacityUnits":     3,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			tmpJSON2, err := json.Marshal([]map[string]interface{}{
//				map[string]interface{}{
//					"Classification": "hive-site",
//					"Properties": map[string]interface{}{
//						"hive.metastore.client.factory.class":       "com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory",
//						"spark.sql.catalog.my_catalog":              "org.apache.iceberg.spark.SparkCatalog",
//						"spark.sql.catalog.my_catalog.catalog-impl": "org.apache.iceberg.aws.glue.GlueCatalog",
//						"spark.sql.catalog.my_catalog.io-impl":      "org.apache.iceberg.aws.s3.S3FileIO",
//						"spark.sql.catalog.my_catalog.lock-impl":    "org.apache.iceberg.aws.glue.DynamoLockManager",
//						"spark.sql.catalog.my_catalog.lock.table":   "myGlueLockTable",
//						"spark.sql.catalog.sampledb.warehouse":      "s3://name-of-my-bucket/parquet5",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json2 := string(tmpJSON2)
//			tmpJSON3, err := json.Marshal([]map[string]interface{}{
//				map[string]interface{}{
//					"Name": "InstallApacheIceberg",
//					"ScriptBootstrapAction": map[string]interface{}{
//						"Args": []string{
//							"name",
//							"value",
//						},
//						"Path": "s3://name-of-my-bucket/bootstrap-iceberg.sh",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json3 := string(tmpJSON3)
//			// Example 1:  EMR cluster with auto-scaling.
//			_, err = duplocloud.NewEmrCluster(ctx, "test", &duplocloud.EmrClusterArgs{
//				TenantId:                    myapp.TenantId,
//				Name:                        pulumi.String("emrp1"),
//				ReleaseLabel:                pulumi.String("emr-6.2.0"),
//				LogUri:                      pulumi.String("s3://name-of-my-bucket"),
//				VisibleToAllUsers:           pulumi.Bool(true),
//				MasterInstanceType:          pulumi.String("m4.large"),
//				SlaveInstanceType:           pulumi.String("m4.large"),
//				InstanceCount:               pulumi.Int(3),
//				KeepJobFlowAliveWhenNoSteps: pulumi.Bool(true),
//				Applications:                pulumi.String(json0),
//				ManagedScalingPolicy:        pulumi.String(json1),
//				Configurations:              pulumi.String(json2),
//				BootstrapActions:            pulumi.String(json3),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing EMR cluster
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *JOB_FLOW_ID* is the EMR cluster job flow ID
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/emrCluster:EmrCluster mycluster *TENANT_ID*/*JOB_FLOW_ID*
// ```
type EmrCluster struct {
	pulumi.CustomResourceState

	// Emr - additional_info.
	AdditionalInfo     pulumi.StringPtrOutput `pulumi:"additionalInfo"`
	AdditionalInfoHash pulumi.StringOutput    `pulumi:"additionalInfoHash"`
	// Emr - list of applications to be installed.
	Applications     pulumi.StringPtrOutput `pulumi:"applications"`
	ApplicationsHash pulumi.StringOutput    `pulumi:"applicationsHash"`
	// The ARN of the emrCluster.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Emr - list of bootstrapActions to be installed.
	BootstrapActions     pulumi.StringPtrOutput `pulumi:"bootstrapActions"`
	BootstrapActionsHash pulumi.StringOutput    `pulumi:"bootstrapActionsHash"`
	// Emr - list of application configurations to be updated.
	Configurations     pulumi.StringPtrOutput `pulumi:"configurations"`
	ConfigurationsHash pulumi.StringOutput    `pulumi:"configurationsHash"`
	// EMR CustomAmiId.
	CustomAmiId pulumi.StringPtrOutput `pulumi:"customAmiId"`
	// Emr Cluster Ec2 ebs*root*volume_size settings.
	EbsRootVolumeSize pulumi.IntPtrOutput `pulumi:"ebsRootVolumeSize"`
	// full_name - Duplo will add a prefix to the name.
	FullName pulumi.StringOutput `pulumi:"fullName"`
	// Emr Instance Count.
	InstanceCount pulumi.IntPtrOutput `pulumi:"instanceCount"`
	// Emr - instance_fleets.
	InstanceFleets     pulumi.StringPtrOutput `pulumi:"instanceFleets"`
	InstanceFleetsHash pulumi.StringOutput    `pulumi:"instanceFleetsHash"`
	// Emr - instance_groups.
	InstanceGroups     pulumi.StringPtrOutput `pulumi:"instanceGroups"`
	InstanceGroupsHash pulumi.StringOutput    `pulumi:"instanceGroupsHash"`
	// job flow id.
	JobFlowId pulumi.StringOutput `pulumi:"jobFlowId"`
	// Keep Job Flow Alive When No Steps. Emr Cluster will be terminated if true. Defaults to `true`.
	KeepJobFlowAliveWhenNoSteps pulumi.BoolPtrOutput `pulumi:"keepJobFlowAliveWhenNoSteps"`
	// S3 bucket path for logs.
	LogUri pulumi.StringPtrOutput `pulumi:"logUri"`
	// Emr - managed*scaling*policy.
	ManagedScalingPolicy     pulumi.StringPtrOutput `pulumi:"managedScalingPolicy"`
	ManagedScalingPolicyHash pulumi.StringOutput    `pulumi:"managedScalingPolicyHash"`
	// Emr MasterInstanceType. Supported InstanceTypes e.g. m4.large
	MasterInstanceType pulumi.StringPtrOutput `pulumi:"masterInstanceType"`
	// The short name of the emrCluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringOutput `pulumi:"name"`
	// EMR ReleaseLabel.
	ReleaseLabel pulumi.StringOutput `pulumi:"releaseLabel"`
	// Emr scale*down*behavior. Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.
	ScaleDownBehavior pulumi.StringPtrOutput `pulumi:"scaleDownBehavior"`
	// Emr SlaveInstanceType. Supported InstanceTypes e.g. m4.large
	SlaveInstanceType pulumi.StringPtrOutput `pulumi:"slaveInstanceType"`
	// The status of the emrCluster.
	Status pulumi.StringOutput `pulumi:"status"`
	// Emr Cluster step*concurrency*level settings. Defaults to `1`.
	StepConcurrencyLevel pulumi.IntPtrOutput `pulumi:"stepConcurrencyLevel"`
	// Emr - list of steps to be run after cluster is ready.
	Steps     pulumi.StringPtrOutput `pulumi:"steps"`
	StepsHash pulumi.StringOutput    `pulumi:"stepsHash"`
	// The GUID of the tenant that the emrCluster will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Emr termination protection setting.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
	// Emr Cluster visible to all users settings.
	VisibleToAllUsers pulumi.BoolPtrOutput `pulumi:"visibleToAllUsers"`
}

// NewEmrCluster registers a new resource with the given unique name, arguments, and options.
func NewEmrCluster(ctx *pulumi.Context,
	name string, args *EmrClusterArgs, opts ...pulumi.ResourceOption) (*EmrCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReleaseLabel == nil {
		return nil, errors.New("invalid value for required argument 'ReleaseLabel'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmrCluster
	err := ctx.RegisterResource("duplocloud:index/emrCluster:EmrCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmrCluster gets an existing EmrCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmrCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmrClusterState, opts ...pulumi.ResourceOption) (*EmrCluster, error) {
	var resource EmrCluster
	err := ctx.ReadResource("duplocloud:index/emrCluster:EmrCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmrCluster resources.
type emrClusterState struct {
	// Emr - additional_info.
	AdditionalInfo     *string `pulumi:"additionalInfo"`
	AdditionalInfoHash *string `pulumi:"additionalInfoHash"`
	// Emr - list of applications to be installed.
	Applications     *string `pulumi:"applications"`
	ApplicationsHash *string `pulumi:"applicationsHash"`
	// The ARN of the emrCluster.
	Arn *string `pulumi:"arn"`
	// Emr - list of bootstrapActions to be installed.
	BootstrapActions     *string `pulumi:"bootstrapActions"`
	BootstrapActionsHash *string `pulumi:"bootstrapActionsHash"`
	// Emr - list of application configurations to be updated.
	Configurations     *string `pulumi:"configurations"`
	ConfigurationsHash *string `pulumi:"configurationsHash"`
	// EMR CustomAmiId.
	CustomAmiId *string `pulumi:"customAmiId"`
	// Emr Cluster Ec2 ebs*root*volume_size settings.
	EbsRootVolumeSize *int `pulumi:"ebsRootVolumeSize"`
	// full_name - Duplo will add a prefix to the name.
	FullName *string `pulumi:"fullName"`
	// Emr Instance Count.
	InstanceCount *int `pulumi:"instanceCount"`
	// Emr - instance_fleets.
	InstanceFleets     *string `pulumi:"instanceFleets"`
	InstanceFleetsHash *string `pulumi:"instanceFleetsHash"`
	// Emr - instance_groups.
	InstanceGroups     *string `pulumi:"instanceGroups"`
	InstanceGroupsHash *string `pulumi:"instanceGroupsHash"`
	// job flow id.
	JobFlowId *string `pulumi:"jobFlowId"`
	// Keep Job Flow Alive When No Steps. Emr Cluster will be terminated if true. Defaults to `true`.
	KeepJobFlowAliveWhenNoSteps *bool `pulumi:"keepJobFlowAliveWhenNoSteps"`
	// S3 bucket path for logs.
	LogUri *string `pulumi:"logUri"`
	// Emr - managed*scaling*policy.
	ManagedScalingPolicy     *string `pulumi:"managedScalingPolicy"`
	ManagedScalingPolicyHash *string `pulumi:"managedScalingPolicyHash"`
	// Emr MasterInstanceType. Supported InstanceTypes e.g. m4.large
	MasterInstanceType *string `pulumi:"masterInstanceType"`
	// The short name of the emrCluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// EMR ReleaseLabel.
	ReleaseLabel *string `pulumi:"releaseLabel"`
	// Emr scale*down*behavior. Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.
	ScaleDownBehavior *string `pulumi:"scaleDownBehavior"`
	// Emr SlaveInstanceType. Supported InstanceTypes e.g. m4.large
	SlaveInstanceType *string `pulumi:"slaveInstanceType"`
	// The status of the emrCluster.
	Status *string `pulumi:"status"`
	// Emr Cluster step*concurrency*level settings. Defaults to `1`.
	StepConcurrencyLevel *int `pulumi:"stepConcurrencyLevel"`
	// Emr - list of steps to be run after cluster is ready.
	Steps     *string `pulumi:"steps"`
	StepsHash *string `pulumi:"stepsHash"`
	// The GUID of the tenant that the emrCluster will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Emr termination protection setting.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// Emr Cluster visible to all users settings.
	VisibleToAllUsers *bool `pulumi:"visibleToAllUsers"`
}

type EmrClusterState struct {
	// Emr - additional_info.
	AdditionalInfo     pulumi.StringPtrInput
	AdditionalInfoHash pulumi.StringPtrInput
	// Emr - list of applications to be installed.
	Applications     pulumi.StringPtrInput
	ApplicationsHash pulumi.StringPtrInput
	// The ARN of the emrCluster.
	Arn pulumi.StringPtrInput
	// Emr - list of bootstrapActions to be installed.
	BootstrapActions     pulumi.StringPtrInput
	BootstrapActionsHash pulumi.StringPtrInput
	// Emr - list of application configurations to be updated.
	Configurations     pulumi.StringPtrInput
	ConfigurationsHash pulumi.StringPtrInput
	// EMR CustomAmiId.
	CustomAmiId pulumi.StringPtrInput
	// Emr Cluster Ec2 ebs*root*volume_size settings.
	EbsRootVolumeSize pulumi.IntPtrInput
	// full_name - Duplo will add a prefix to the name.
	FullName pulumi.StringPtrInput
	// Emr Instance Count.
	InstanceCount pulumi.IntPtrInput
	// Emr - instance_fleets.
	InstanceFleets     pulumi.StringPtrInput
	InstanceFleetsHash pulumi.StringPtrInput
	// Emr - instance_groups.
	InstanceGroups     pulumi.StringPtrInput
	InstanceGroupsHash pulumi.StringPtrInput
	// job flow id.
	JobFlowId pulumi.StringPtrInput
	// Keep Job Flow Alive When No Steps. Emr Cluster will be terminated if true. Defaults to `true`.
	KeepJobFlowAliveWhenNoSteps pulumi.BoolPtrInput
	// S3 bucket path for logs.
	LogUri pulumi.StringPtrInput
	// Emr - managed*scaling*policy.
	ManagedScalingPolicy     pulumi.StringPtrInput
	ManagedScalingPolicyHash pulumi.StringPtrInput
	// Emr MasterInstanceType. Supported InstanceTypes e.g. m4.large
	MasterInstanceType pulumi.StringPtrInput
	// The short name of the emrCluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// EMR ReleaseLabel.
	ReleaseLabel pulumi.StringPtrInput
	// Emr scale*down*behavior. Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.
	ScaleDownBehavior pulumi.StringPtrInput
	// Emr SlaveInstanceType. Supported InstanceTypes e.g. m4.large
	SlaveInstanceType pulumi.StringPtrInput
	// The status of the emrCluster.
	Status pulumi.StringPtrInput
	// Emr Cluster step*concurrency*level settings. Defaults to `1`.
	StepConcurrencyLevel pulumi.IntPtrInput
	// Emr - list of steps to be run after cluster is ready.
	Steps     pulumi.StringPtrInput
	StepsHash pulumi.StringPtrInput
	// The GUID of the tenant that the emrCluster will be created in.
	TenantId pulumi.StringPtrInput
	// Emr termination protection setting.
	TerminationProtection pulumi.BoolPtrInput
	// Emr Cluster visible to all users settings.
	VisibleToAllUsers pulumi.BoolPtrInput
}

func (EmrClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*emrClusterState)(nil)).Elem()
}

type emrClusterArgs struct {
	// Emr - additional_info.
	AdditionalInfo *string `pulumi:"additionalInfo"`
	// Emr - list of applications to be installed.
	Applications *string `pulumi:"applications"`
	// The ARN of the emrCluster.
	Arn *string `pulumi:"arn"`
	// Emr - list of bootstrapActions to be installed.
	BootstrapActions *string `pulumi:"bootstrapActions"`
	// Emr - list of application configurations to be updated.
	Configurations *string `pulumi:"configurations"`
	// EMR CustomAmiId.
	CustomAmiId *string `pulumi:"customAmiId"`
	// Emr Cluster Ec2 ebs*root*volume_size settings.
	EbsRootVolumeSize *int `pulumi:"ebsRootVolumeSize"`
	// full_name - Duplo will add a prefix to the name.
	FullName *string `pulumi:"fullName"`
	// Emr Instance Count.
	InstanceCount *int `pulumi:"instanceCount"`
	// Emr - instance_fleets.
	InstanceFleets *string `pulumi:"instanceFleets"`
	// Emr - instance_groups.
	InstanceGroups *string `pulumi:"instanceGroups"`
	// job flow id.
	JobFlowId *string `pulumi:"jobFlowId"`
	// Keep Job Flow Alive When No Steps. Emr Cluster will be terminated if true. Defaults to `true`.
	KeepJobFlowAliveWhenNoSteps *bool `pulumi:"keepJobFlowAliveWhenNoSteps"`
	// S3 bucket path for logs.
	LogUri *string `pulumi:"logUri"`
	// Emr - managed*scaling*policy.
	ManagedScalingPolicy *string `pulumi:"managedScalingPolicy"`
	// Emr MasterInstanceType. Supported InstanceTypes e.g. m4.large
	MasterInstanceType *string `pulumi:"masterInstanceType"`
	// The short name of the emrCluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// EMR ReleaseLabel.
	ReleaseLabel string `pulumi:"releaseLabel"`
	// Emr scale*down*behavior. Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.
	ScaleDownBehavior *string `pulumi:"scaleDownBehavior"`
	// Emr SlaveInstanceType. Supported InstanceTypes e.g. m4.large
	SlaveInstanceType *string `pulumi:"slaveInstanceType"`
	// The status of the emrCluster.
	Status *string `pulumi:"status"`
	// Emr Cluster step*concurrency*level settings. Defaults to `1`.
	StepConcurrencyLevel *int `pulumi:"stepConcurrencyLevel"`
	// Emr - list of steps to be run after cluster is ready.
	Steps *string `pulumi:"steps"`
	// The GUID of the tenant that the emrCluster will be created in.
	TenantId string `pulumi:"tenantId"`
	// Emr termination protection setting.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// Emr Cluster visible to all users settings.
	VisibleToAllUsers *bool `pulumi:"visibleToAllUsers"`
}

// The set of arguments for constructing a EmrCluster resource.
type EmrClusterArgs struct {
	// Emr - additional_info.
	AdditionalInfo pulumi.StringPtrInput
	// Emr - list of applications to be installed.
	Applications pulumi.StringPtrInput
	// The ARN of the emrCluster.
	Arn pulumi.StringPtrInput
	// Emr - list of bootstrapActions to be installed.
	BootstrapActions pulumi.StringPtrInput
	// Emr - list of application configurations to be updated.
	Configurations pulumi.StringPtrInput
	// EMR CustomAmiId.
	CustomAmiId pulumi.StringPtrInput
	// Emr Cluster Ec2 ebs*root*volume_size settings.
	EbsRootVolumeSize pulumi.IntPtrInput
	// full_name - Duplo will add a prefix to the name.
	FullName pulumi.StringPtrInput
	// Emr Instance Count.
	InstanceCount pulumi.IntPtrInput
	// Emr - instance_fleets.
	InstanceFleets pulumi.StringPtrInput
	// Emr - instance_groups.
	InstanceGroups pulumi.StringPtrInput
	// job flow id.
	JobFlowId pulumi.StringPtrInput
	// Keep Job Flow Alive When No Steps. Emr Cluster will be terminated if true. Defaults to `true`.
	KeepJobFlowAliveWhenNoSteps pulumi.BoolPtrInput
	// S3 bucket path for logs.
	LogUri pulumi.StringPtrInput
	// Emr - managed*scaling*policy.
	ManagedScalingPolicy pulumi.StringPtrInput
	// Emr MasterInstanceType. Supported InstanceTypes e.g. m4.large
	MasterInstanceType pulumi.StringPtrInput
	// The short name of the emrCluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// EMR ReleaseLabel.
	ReleaseLabel pulumi.StringInput
	// Emr scale*down*behavior. Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.
	ScaleDownBehavior pulumi.StringPtrInput
	// Emr SlaveInstanceType. Supported InstanceTypes e.g. m4.large
	SlaveInstanceType pulumi.StringPtrInput
	// The status of the emrCluster.
	Status pulumi.StringPtrInput
	// Emr Cluster step*concurrency*level settings. Defaults to `1`.
	StepConcurrencyLevel pulumi.IntPtrInput
	// Emr - list of steps to be run after cluster is ready.
	Steps pulumi.StringPtrInput
	// The GUID of the tenant that the emrCluster will be created in.
	TenantId pulumi.StringInput
	// Emr termination protection setting.
	TerminationProtection pulumi.BoolPtrInput
	// Emr Cluster visible to all users settings.
	VisibleToAllUsers pulumi.BoolPtrInput
}

func (EmrClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emrClusterArgs)(nil)).Elem()
}

type EmrClusterInput interface {
	pulumi.Input

	ToEmrClusterOutput() EmrClusterOutput
	ToEmrClusterOutputWithContext(ctx context.Context) EmrClusterOutput
}

func (*EmrCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**EmrCluster)(nil)).Elem()
}

func (i *EmrCluster) ToEmrClusterOutput() EmrClusterOutput {
	return i.ToEmrClusterOutputWithContext(context.Background())
}

func (i *EmrCluster) ToEmrClusterOutputWithContext(ctx context.Context) EmrClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmrClusterOutput)
}

// EmrClusterArrayInput is an input type that accepts EmrClusterArray and EmrClusterArrayOutput values.
// You can construct a concrete instance of `EmrClusterArrayInput` via:
//
//	EmrClusterArray{ EmrClusterArgs{...} }
type EmrClusterArrayInput interface {
	pulumi.Input

	ToEmrClusterArrayOutput() EmrClusterArrayOutput
	ToEmrClusterArrayOutputWithContext(context.Context) EmrClusterArrayOutput
}

type EmrClusterArray []EmrClusterInput

func (EmrClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmrCluster)(nil)).Elem()
}

func (i EmrClusterArray) ToEmrClusterArrayOutput() EmrClusterArrayOutput {
	return i.ToEmrClusterArrayOutputWithContext(context.Background())
}

func (i EmrClusterArray) ToEmrClusterArrayOutputWithContext(ctx context.Context) EmrClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmrClusterArrayOutput)
}

// EmrClusterMapInput is an input type that accepts EmrClusterMap and EmrClusterMapOutput values.
// You can construct a concrete instance of `EmrClusterMapInput` via:
//
//	EmrClusterMap{ "key": EmrClusterArgs{...} }
type EmrClusterMapInput interface {
	pulumi.Input

	ToEmrClusterMapOutput() EmrClusterMapOutput
	ToEmrClusterMapOutputWithContext(context.Context) EmrClusterMapOutput
}

type EmrClusterMap map[string]EmrClusterInput

func (EmrClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmrCluster)(nil)).Elem()
}

func (i EmrClusterMap) ToEmrClusterMapOutput() EmrClusterMapOutput {
	return i.ToEmrClusterMapOutputWithContext(context.Background())
}

func (i EmrClusterMap) ToEmrClusterMapOutputWithContext(ctx context.Context) EmrClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmrClusterMapOutput)
}

type EmrClusterOutput struct{ *pulumi.OutputState }

func (EmrClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmrCluster)(nil)).Elem()
}

func (o EmrClusterOutput) ToEmrClusterOutput() EmrClusterOutput {
	return o
}

func (o EmrClusterOutput) ToEmrClusterOutputWithContext(ctx context.Context) EmrClusterOutput {
	return o
}

// Emr - additional_info.
func (o EmrClusterOutput) AdditionalInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringPtrOutput { return v.AdditionalInfo }).(pulumi.StringPtrOutput)
}

func (o EmrClusterOutput) AdditionalInfoHash() pulumi.StringOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringOutput { return v.AdditionalInfoHash }).(pulumi.StringOutput)
}

// Emr - list of applications to be installed.
func (o EmrClusterOutput) Applications() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringPtrOutput { return v.Applications }).(pulumi.StringPtrOutput)
}

func (o EmrClusterOutput) ApplicationsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringOutput { return v.ApplicationsHash }).(pulumi.StringOutput)
}

// The ARN of the emrCluster.
func (o EmrClusterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Emr - list of bootstrapActions to be installed.
func (o EmrClusterOutput) BootstrapActions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringPtrOutput { return v.BootstrapActions }).(pulumi.StringPtrOutput)
}

func (o EmrClusterOutput) BootstrapActionsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringOutput { return v.BootstrapActionsHash }).(pulumi.StringOutput)
}

// Emr - list of application configurations to be updated.
func (o EmrClusterOutput) Configurations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringPtrOutput { return v.Configurations }).(pulumi.StringPtrOutput)
}

func (o EmrClusterOutput) ConfigurationsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringOutput { return v.ConfigurationsHash }).(pulumi.StringOutput)
}

// EMR CustomAmiId.
func (o EmrClusterOutput) CustomAmiId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringPtrOutput { return v.CustomAmiId }).(pulumi.StringPtrOutput)
}

// Emr Cluster Ec2 ebs*root*volume_size settings.
func (o EmrClusterOutput) EbsRootVolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.IntPtrOutput { return v.EbsRootVolumeSize }).(pulumi.IntPtrOutput)
}

// full_name - Duplo will add a prefix to the name.
func (o EmrClusterOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringOutput { return v.FullName }).(pulumi.StringOutput)
}

// Emr Instance Count.
func (o EmrClusterOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.IntPtrOutput { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Emr - instance_fleets.
func (o EmrClusterOutput) InstanceFleets() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringPtrOutput { return v.InstanceFleets }).(pulumi.StringPtrOutput)
}

func (o EmrClusterOutput) InstanceFleetsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringOutput { return v.InstanceFleetsHash }).(pulumi.StringOutput)
}

// Emr - instance_groups.
func (o EmrClusterOutput) InstanceGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringPtrOutput { return v.InstanceGroups }).(pulumi.StringPtrOutput)
}

func (o EmrClusterOutput) InstanceGroupsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringOutput { return v.InstanceGroupsHash }).(pulumi.StringOutput)
}

// job flow id.
func (o EmrClusterOutput) JobFlowId() pulumi.StringOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringOutput { return v.JobFlowId }).(pulumi.StringOutput)
}

// Keep Job Flow Alive When No Steps. Emr Cluster will be terminated if true. Defaults to `true`.
func (o EmrClusterOutput) KeepJobFlowAliveWhenNoSteps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.BoolPtrOutput { return v.KeepJobFlowAliveWhenNoSteps }).(pulumi.BoolPtrOutput)
}

// S3 bucket path for logs.
func (o EmrClusterOutput) LogUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringPtrOutput { return v.LogUri }).(pulumi.StringPtrOutput)
}

// Emr - managed*scaling*policy.
func (o EmrClusterOutput) ManagedScalingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringPtrOutput { return v.ManagedScalingPolicy }).(pulumi.StringPtrOutput)
}

func (o EmrClusterOutput) ManagedScalingPolicyHash() pulumi.StringOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringOutput { return v.ManagedScalingPolicyHash }).(pulumi.StringOutput)
}

// Emr MasterInstanceType. Supported InstanceTypes e.g. m4.large
func (o EmrClusterOutput) MasterInstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringPtrOutput { return v.MasterInstanceType }).(pulumi.StringPtrOutput)
}

// The short name of the emrCluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
func (o EmrClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// EMR ReleaseLabel.
func (o EmrClusterOutput) ReleaseLabel() pulumi.StringOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringOutput { return v.ReleaseLabel }).(pulumi.StringOutput)
}

// Emr scale*down*behavior. Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.
func (o EmrClusterOutput) ScaleDownBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringPtrOutput { return v.ScaleDownBehavior }).(pulumi.StringPtrOutput)
}

// Emr SlaveInstanceType. Supported InstanceTypes e.g. m4.large
func (o EmrClusterOutput) SlaveInstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringPtrOutput { return v.SlaveInstanceType }).(pulumi.StringPtrOutput)
}

// The status of the emrCluster.
func (o EmrClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Emr Cluster step*concurrency*level settings. Defaults to `1`.
func (o EmrClusterOutput) StepConcurrencyLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.IntPtrOutput { return v.StepConcurrencyLevel }).(pulumi.IntPtrOutput)
}

// Emr - list of steps to be run after cluster is ready.
func (o EmrClusterOutput) Steps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringPtrOutput { return v.Steps }).(pulumi.StringPtrOutput)
}

func (o EmrClusterOutput) StepsHash() pulumi.StringOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringOutput { return v.StepsHash }).(pulumi.StringOutput)
}

// The GUID of the tenant that the emrCluster will be created in.
func (o EmrClusterOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Emr termination protection setting.
func (o EmrClusterOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

// Emr Cluster visible to all users settings.
func (o EmrClusterOutput) VisibleToAllUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EmrCluster) pulumi.BoolPtrOutput { return v.VisibleToAllUsers }).(pulumi.BoolPtrOutput)
}

type EmrClusterArrayOutput struct{ *pulumi.OutputState }

func (EmrClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmrCluster)(nil)).Elem()
}

func (o EmrClusterArrayOutput) ToEmrClusterArrayOutput() EmrClusterArrayOutput {
	return o
}

func (o EmrClusterArrayOutput) ToEmrClusterArrayOutputWithContext(ctx context.Context) EmrClusterArrayOutput {
	return o
}

func (o EmrClusterArrayOutput) Index(i pulumi.IntInput) EmrClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmrCluster {
		return vs[0].([]*EmrCluster)[vs[1].(int)]
	}).(EmrClusterOutput)
}

type EmrClusterMapOutput struct{ *pulumi.OutputState }

func (EmrClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmrCluster)(nil)).Elem()
}

func (o EmrClusterMapOutput) ToEmrClusterMapOutput() EmrClusterMapOutput {
	return o
}

func (o EmrClusterMapOutput) ToEmrClusterMapOutputWithContext(ctx context.Context) EmrClusterMapOutput {
	return o
}

func (o EmrClusterMapOutput) MapIndex(k pulumi.StringInput) EmrClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmrCluster {
		return vs[0].(map[string]*EmrCluster)[vs[1].(string)]
	}).(EmrClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmrClusterInput)(nil)).Elem(), &EmrCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmrClusterArrayInput)(nil)).Elem(), EmrClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmrClusterMapInput)(nil)).Elem(), EmrClusterMap{})
	pulumi.RegisterOutputType(EmrClusterOutput{})
	pulumi.RegisterOutputType(EmrClusterArrayOutput{})
	pulumi.RegisterOutputType(EmrClusterMapOutput{})
}
