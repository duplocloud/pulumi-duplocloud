// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureMssqlServer` manages an azure mssql server in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAzureMssqlServer(ctx, "mssql_server", &duplocloud.AzureMssqlServerArgs{
//				TenantId:                   myapp.TenantId,
//				Name:                       pulumi.String("mssql-test"),
//				AdministratorLogin:         pulumi.String("testroot"),
//				AdministratorLoginPassword: pulumi.String("P@ssword12345"),
//				Version:                    pulumi.String("12.0"),
//				MinimumTlsVersion:          pulumi.String("1.2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing Azure MS SQL Server
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the Azure MS SQL Server
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/azureMssqlServer:AzureMssqlServer myMsSqlServer *TENANT_ID*/*SHORT_NAME*
// ```
type AzureMssqlServer struct {
	pulumi.CustomResourceState

	// The Administrator Login for the  MS sql Server.
	AdministratorLogin pulumi.StringOutput `pulumi:"administratorLogin"`
	// The Password associated with the `administratorLogin` for the MS sql Server.
	AdministratorLoginPassword pulumi.StringPtrOutput `pulumi:"administratorLoginPassword"`
	// The fully qualified domain name of the Azure SQL Server.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// The Minimum TLS Version for all SQL Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.
	MinimumTlsVersion pulumi.StringOutput `pulumi:"minimumTlsVersion"`
	// The name of the Microsoft SQL Server. This needs to be globally unique within Azure.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether public network access is enabled or disabled for this server. Valid values are `Enabled` or `Disabled`.
	PublicNetworkAccess pulumi.StringOutput    `pulumi:"publicNetworkAccess"`
	Tags                pulumi.StringMapOutput `pulumi:"tags"`
	// The GUID of the tenant that the azure mssql server will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The version for the new server. Valid values are: `2.0` (for v11 server) and `12.0` (for v12 server).
	Version pulumi.StringOutput `pulumi:"version"`
	// Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrOutput `pulumi:"waitUntilReady"`
}

// NewAzureMssqlServer registers a new resource with the given unique name, arguments, and options.
func NewAzureMssqlServer(ctx *pulumi.Context,
	name string, args *AzureMssqlServerArgs, opts ...pulumi.ResourceOption) (*AzureMssqlServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.AdministratorLoginPassword != nil {
		args.AdministratorLoginPassword = pulumi.ToSecret(args.AdministratorLoginPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"administratorLoginPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureMssqlServer
	err := ctx.RegisterResource("duplocloud:index/azureMssqlServer:AzureMssqlServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureMssqlServer gets an existing AzureMssqlServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureMssqlServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureMssqlServerState, opts ...pulumi.ResourceOption) (*AzureMssqlServer, error) {
	var resource AzureMssqlServer
	err := ctx.ReadResource("duplocloud:index/azureMssqlServer:AzureMssqlServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureMssqlServer resources.
type azureMssqlServerState struct {
	// The Administrator Login for the  MS sql Server.
	AdministratorLogin *string `pulumi:"administratorLogin"`
	// The Password associated with the `administratorLogin` for the MS sql Server.
	AdministratorLoginPassword *string `pulumi:"administratorLoginPassword"`
	// The fully qualified domain name of the Azure SQL Server.
	Fqdn *string `pulumi:"fqdn"`
	// The Minimum TLS Version for all SQL Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.
	MinimumTlsVersion *string `pulumi:"minimumTlsVersion"`
	// The name of the Microsoft SQL Server. This needs to be globally unique within Azure.
	Name *string `pulumi:"name"`
	// Whether public network access is enabled or disabled for this server. Valid values are `Enabled` or `Disabled`.
	PublicNetworkAccess *string           `pulumi:"publicNetworkAccess"`
	Tags                map[string]string `pulumi:"tags"`
	// The GUID of the tenant that the azure mssql server will be created in.
	TenantId *string `pulumi:"tenantId"`
	// The version for the new server. Valid values are: `2.0` (for v11 server) and `12.0` (for v12 server).
	Version *string `pulumi:"version"`
	// Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

type AzureMssqlServerState struct {
	// The Administrator Login for the  MS sql Server.
	AdministratorLogin pulumi.StringPtrInput
	// The Password associated with the `administratorLogin` for the MS sql Server.
	AdministratorLoginPassword pulumi.StringPtrInput
	// The fully qualified domain name of the Azure SQL Server.
	Fqdn pulumi.StringPtrInput
	// The Minimum TLS Version for all SQL Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.
	MinimumTlsVersion pulumi.StringPtrInput
	// The name of the Microsoft SQL Server. This needs to be globally unique within Azure.
	Name pulumi.StringPtrInput
	// Whether public network access is enabled or disabled for this server. Valid values are `Enabled` or `Disabled`.
	PublicNetworkAccess pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	// The GUID of the tenant that the azure mssql server will be created in.
	TenantId pulumi.StringPtrInput
	// The version for the new server. Valid values are: `2.0` (for v11 server) and `12.0` (for v12 server).
	Version pulumi.StringPtrInput
	// Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzureMssqlServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureMssqlServerState)(nil)).Elem()
}

type azureMssqlServerArgs struct {
	// The Administrator Login for the  MS sql Server.
	AdministratorLogin *string `pulumi:"administratorLogin"`
	// The Password associated with the `administratorLogin` for the MS sql Server.
	AdministratorLoginPassword *string `pulumi:"administratorLoginPassword"`
	// The Minimum TLS Version for all SQL Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.
	MinimumTlsVersion *string `pulumi:"minimumTlsVersion"`
	// The name of the Microsoft SQL Server. This needs to be globally unique within Azure.
	Name *string `pulumi:"name"`
	// Whether public network access is enabled or disabled for this server. Valid values are `Enabled` or `Disabled`.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// The GUID of the tenant that the azure mssql server will be created in.
	TenantId string `pulumi:"tenantId"`
	// The version for the new server. Valid values are: `2.0` (for v11 server) and `12.0` (for v12 server).
	Version string `pulumi:"version"`
	// Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

// The set of arguments for constructing a AzureMssqlServer resource.
type AzureMssqlServerArgs struct {
	// The Administrator Login for the  MS sql Server.
	AdministratorLogin pulumi.StringPtrInput
	// The Password associated with the `administratorLogin` for the MS sql Server.
	AdministratorLoginPassword pulumi.StringPtrInput
	// The Minimum TLS Version for all SQL Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.
	MinimumTlsVersion pulumi.StringPtrInput
	// The name of the Microsoft SQL Server. This needs to be globally unique within Azure.
	Name pulumi.StringPtrInput
	// Whether public network access is enabled or disabled for this server. Valid values are `Enabled` or `Disabled`.
	PublicNetworkAccess pulumi.StringPtrInput
	// The GUID of the tenant that the azure mssql server will be created in.
	TenantId pulumi.StringInput
	// The version for the new server. Valid values are: `2.0` (for v11 server) and `12.0` (for v12 server).
	Version pulumi.StringInput
	// Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzureMssqlServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureMssqlServerArgs)(nil)).Elem()
}

type AzureMssqlServerInput interface {
	pulumi.Input

	ToAzureMssqlServerOutput() AzureMssqlServerOutput
	ToAzureMssqlServerOutputWithContext(ctx context.Context) AzureMssqlServerOutput
}

func (*AzureMssqlServer) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMssqlServer)(nil)).Elem()
}

func (i *AzureMssqlServer) ToAzureMssqlServerOutput() AzureMssqlServerOutput {
	return i.ToAzureMssqlServerOutputWithContext(context.Background())
}

func (i *AzureMssqlServer) ToAzureMssqlServerOutputWithContext(ctx context.Context) AzureMssqlServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMssqlServerOutput)
}

// AzureMssqlServerArrayInput is an input type that accepts AzureMssqlServerArray and AzureMssqlServerArrayOutput values.
// You can construct a concrete instance of `AzureMssqlServerArrayInput` via:
//
//	AzureMssqlServerArray{ AzureMssqlServerArgs{...} }
type AzureMssqlServerArrayInput interface {
	pulumi.Input

	ToAzureMssqlServerArrayOutput() AzureMssqlServerArrayOutput
	ToAzureMssqlServerArrayOutputWithContext(context.Context) AzureMssqlServerArrayOutput
}

type AzureMssqlServerArray []AzureMssqlServerInput

func (AzureMssqlServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureMssqlServer)(nil)).Elem()
}

func (i AzureMssqlServerArray) ToAzureMssqlServerArrayOutput() AzureMssqlServerArrayOutput {
	return i.ToAzureMssqlServerArrayOutputWithContext(context.Background())
}

func (i AzureMssqlServerArray) ToAzureMssqlServerArrayOutputWithContext(ctx context.Context) AzureMssqlServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMssqlServerArrayOutput)
}

// AzureMssqlServerMapInput is an input type that accepts AzureMssqlServerMap and AzureMssqlServerMapOutput values.
// You can construct a concrete instance of `AzureMssqlServerMapInput` via:
//
//	AzureMssqlServerMap{ "key": AzureMssqlServerArgs{...} }
type AzureMssqlServerMapInput interface {
	pulumi.Input

	ToAzureMssqlServerMapOutput() AzureMssqlServerMapOutput
	ToAzureMssqlServerMapOutputWithContext(context.Context) AzureMssqlServerMapOutput
}

type AzureMssqlServerMap map[string]AzureMssqlServerInput

func (AzureMssqlServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureMssqlServer)(nil)).Elem()
}

func (i AzureMssqlServerMap) ToAzureMssqlServerMapOutput() AzureMssqlServerMapOutput {
	return i.ToAzureMssqlServerMapOutputWithContext(context.Background())
}

func (i AzureMssqlServerMap) ToAzureMssqlServerMapOutputWithContext(ctx context.Context) AzureMssqlServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMssqlServerMapOutput)
}

type AzureMssqlServerOutput struct{ *pulumi.OutputState }

func (AzureMssqlServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMssqlServer)(nil)).Elem()
}

func (o AzureMssqlServerOutput) ToAzureMssqlServerOutput() AzureMssqlServerOutput {
	return o
}

func (o AzureMssqlServerOutput) ToAzureMssqlServerOutputWithContext(ctx context.Context) AzureMssqlServerOutput {
	return o
}

// The Administrator Login for the  MS sql Server.
func (o AzureMssqlServerOutput) AdministratorLogin() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMssqlServer) pulumi.StringOutput { return v.AdministratorLogin }).(pulumi.StringOutput)
}

// The Password associated with the `administratorLogin` for the MS sql Server.
func (o AzureMssqlServerOutput) AdministratorLoginPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMssqlServer) pulumi.StringPtrOutput { return v.AdministratorLoginPassword }).(pulumi.StringPtrOutput)
}

// The fully qualified domain name of the Azure SQL Server.
func (o AzureMssqlServerOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMssqlServer) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// The Minimum TLS Version for all SQL Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` and `1.2`.
func (o AzureMssqlServerOutput) MinimumTlsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMssqlServer) pulumi.StringOutput { return v.MinimumTlsVersion }).(pulumi.StringOutput)
}

// The name of the Microsoft SQL Server. This needs to be globally unique within Azure.
func (o AzureMssqlServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMssqlServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether public network access is enabled or disabled for this server. Valid values are `Enabled` or `Disabled`.
func (o AzureMssqlServerOutput) PublicNetworkAccess() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMssqlServer) pulumi.StringOutput { return v.PublicNetworkAccess }).(pulumi.StringOutput)
}

func (o AzureMssqlServerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AzureMssqlServer) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The GUID of the tenant that the azure mssql server will be created in.
func (o AzureMssqlServerOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMssqlServer) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The version for the new server. Valid values are: `2.0` (for v11 server) and `12.0` (for v12 server).
func (o AzureMssqlServerOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMssqlServer) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.
func (o AzureMssqlServerOutput) WaitUntilReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureMssqlServer) pulumi.BoolPtrOutput { return v.WaitUntilReady }).(pulumi.BoolPtrOutput)
}

type AzureMssqlServerArrayOutput struct{ *pulumi.OutputState }

func (AzureMssqlServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureMssqlServer)(nil)).Elem()
}

func (o AzureMssqlServerArrayOutput) ToAzureMssqlServerArrayOutput() AzureMssqlServerArrayOutput {
	return o
}

func (o AzureMssqlServerArrayOutput) ToAzureMssqlServerArrayOutputWithContext(ctx context.Context) AzureMssqlServerArrayOutput {
	return o
}

func (o AzureMssqlServerArrayOutput) Index(i pulumi.IntInput) AzureMssqlServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureMssqlServer {
		return vs[0].([]*AzureMssqlServer)[vs[1].(int)]
	}).(AzureMssqlServerOutput)
}

type AzureMssqlServerMapOutput struct{ *pulumi.OutputState }

func (AzureMssqlServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureMssqlServer)(nil)).Elem()
}

func (o AzureMssqlServerMapOutput) ToAzureMssqlServerMapOutput() AzureMssqlServerMapOutput {
	return o
}

func (o AzureMssqlServerMapOutput) ToAzureMssqlServerMapOutputWithContext(ctx context.Context) AzureMssqlServerMapOutput {
	return o
}

func (o AzureMssqlServerMapOutput) MapIndex(k pulumi.StringInput) AzureMssqlServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureMssqlServer {
		return vs[0].(map[string]*AzureMssqlServer)[vs[1].(string)]
	}).(AzureMssqlServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureMssqlServerInput)(nil)).Elem(), &AzureMssqlServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureMssqlServerArrayInput)(nil)).Elem(), AzureMssqlServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureMssqlServerMapInput)(nil)).Elem(), AzureMssqlServerMap{})
	pulumi.RegisterOutputType(AzureMssqlServerOutput{})
	pulumi.RegisterOutputType(AzureMssqlServerArrayOutput{})
	pulumi.RegisterOutputType(AzureMssqlServerMapOutput{})
}
