// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `duplocloudHelmRepository` manages helm repository in duplocloud
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewHelmRepository(ctx, "repo", &duplocloud.HelmRepositoryArgs{
//				TenantId: myapp.TenantId,
//				Name:     "repo-name",
//				Interval: "06m00s",
//				Url:      "https://helm.github.com",
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing helm repository
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *NAME* is the helm repository name
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/k8HelmRepository:K8HelmRepository repo *TENANT_ID*/helm-repository/*NAME*
// ```
type K8HelmRepository struct {
	pulumi.CustomResourceState

	// The interval associated to helm repository Defaults to `5m0s`.
	Interval pulumi.StringPtrOutput `pulumi:"interval"`
	// The identifier name for the helm repository in duplocloud
	Name pulumi.StringOutput `pulumi:"name"`
	// The GUID of the tenant that the storage bucket will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The url of helm repository to be attached
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewK8HelmRepository registers a new resource with the given unique name, arguments, and options.
func NewK8HelmRepository(ctx *pulumi.Context,
	name string, args *K8HelmRepositoryArgs, opts ...pulumi.ResourceOption) (*K8HelmRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource K8HelmRepository
	err := ctx.RegisterResource("duplocloud:index/k8HelmRepository:K8HelmRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetK8HelmRepository gets an existing K8HelmRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetK8HelmRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *K8HelmRepositoryState, opts ...pulumi.ResourceOption) (*K8HelmRepository, error) {
	var resource K8HelmRepository
	err := ctx.ReadResource("duplocloud:index/k8HelmRepository:K8HelmRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering K8HelmRepository resources.
type k8helmRepositoryState struct {
	// The interval associated to helm repository Defaults to `5m0s`.
	Interval *string `pulumi:"interval"`
	// The identifier name for the helm repository in duplocloud
	Name *string `pulumi:"name"`
	// The GUID of the tenant that the storage bucket will be created in.
	TenantId *string `pulumi:"tenantId"`
	// The url of helm repository to be attached
	Url *string `pulumi:"url"`
}

type K8HelmRepositoryState struct {
	// The interval associated to helm repository Defaults to `5m0s`.
	Interval pulumi.StringPtrInput
	// The identifier name for the helm repository in duplocloud
	Name pulumi.StringPtrInput
	// The GUID of the tenant that the storage bucket will be created in.
	TenantId pulumi.StringPtrInput
	// The url of helm repository to be attached
	Url pulumi.StringPtrInput
}

func (K8HelmRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*k8helmRepositoryState)(nil)).Elem()
}

type k8helmRepositoryArgs struct {
	// The interval associated to helm repository Defaults to `5m0s`.
	Interval *string `pulumi:"interval"`
	// The identifier name for the helm repository in duplocloud
	Name *string `pulumi:"name"`
	// The GUID of the tenant that the storage bucket will be created in.
	TenantId string `pulumi:"tenantId"`
	// The url of helm repository to be attached
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a K8HelmRepository resource.
type K8HelmRepositoryArgs struct {
	// The interval associated to helm repository Defaults to `5m0s`.
	Interval pulumi.StringPtrInput
	// The identifier name for the helm repository in duplocloud
	Name pulumi.StringPtrInput
	// The GUID of the tenant that the storage bucket will be created in.
	TenantId pulumi.StringInput
	// The url of helm repository to be attached
	Url pulumi.StringInput
}

func (K8HelmRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*k8helmRepositoryArgs)(nil)).Elem()
}

type K8HelmRepositoryInput interface {
	pulumi.Input

	ToK8HelmRepositoryOutput() K8HelmRepositoryOutput
	ToK8HelmRepositoryOutputWithContext(ctx context.Context) K8HelmRepositoryOutput
}

func (*K8HelmRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**K8HelmRepository)(nil)).Elem()
}

func (i *K8HelmRepository) ToK8HelmRepositoryOutput() K8HelmRepositoryOutput {
	return i.ToK8HelmRepositoryOutputWithContext(context.Background())
}

func (i *K8HelmRepository) ToK8HelmRepositoryOutputWithContext(ctx context.Context) K8HelmRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8HelmRepositoryOutput)
}

// K8HelmRepositoryArrayInput is an input type that accepts K8HelmRepositoryArray and K8HelmRepositoryArrayOutput values.
// You can construct a concrete instance of `K8HelmRepositoryArrayInput` via:
//
//	K8HelmRepositoryArray{ K8HelmRepositoryArgs{...} }
type K8HelmRepositoryArrayInput interface {
	pulumi.Input

	ToK8HelmRepositoryArrayOutput() K8HelmRepositoryArrayOutput
	ToK8HelmRepositoryArrayOutputWithContext(context.Context) K8HelmRepositoryArrayOutput
}

type K8HelmRepositoryArray []K8HelmRepositoryInput

func (K8HelmRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8HelmRepository)(nil)).Elem()
}

func (i K8HelmRepositoryArray) ToK8HelmRepositoryArrayOutput() K8HelmRepositoryArrayOutput {
	return i.ToK8HelmRepositoryArrayOutputWithContext(context.Background())
}

func (i K8HelmRepositoryArray) ToK8HelmRepositoryArrayOutputWithContext(ctx context.Context) K8HelmRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8HelmRepositoryArrayOutput)
}

// K8HelmRepositoryMapInput is an input type that accepts K8HelmRepositoryMap and K8HelmRepositoryMapOutput values.
// You can construct a concrete instance of `K8HelmRepositoryMapInput` via:
//
//	K8HelmRepositoryMap{ "key": K8HelmRepositoryArgs{...} }
type K8HelmRepositoryMapInput interface {
	pulumi.Input

	ToK8HelmRepositoryMapOutput() K8HelmRepositoryMapOutput
	ToK8HelmRepositoryMapOutputWithContext(context.Context) K8HelmRepositoryMapOutput
}

type K8HelmRepositoryMap map[string]K8HelmRepositoryInput

func (K8HelmRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8HelmRepository)(nil)).Elem()
}

func (i K8HelmRepositoryMap) ToK8HelmRepositoryMapOutput() K8HelmRepositoryMapOutput {
	return i.ToK8HelmRepositoryMapOutputWithContext(context.Background())
}

func (i K8HelmRepositoryMap) ToK8HelmRepositoryMapOutputWithContext(ctx context.Context) K8HelmRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8HelmRepositoryMapOutput)
}

type K8HelmRepositoryOutput struct{ *pulumi.OutputState }

func (K8HelmRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8HelmRepository)(nil)).Elem()
}

func (o K8HelmRepositoryOutput) ToK8HelmRepositoryOutput() K8HelmRepositoryOutput {
	return o
}

func (o K8HelmRepositoryOutput) ToK8HelmRepositoryOutputWithContext(ctx context.Context) K8HelmRepositoryOutput {
	return o
}

// The interval associated to helm repository Defaults to `5m0s`.
func (o K8HelmRepositoryOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8HelmRepository) pulumi.StringPtrOutput { return v.Interval }).(pulumi.StringPtrOutput)
}

// The identifier name for the helm repository in duplocloud
func (o K8HelmRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *K8HelmRepository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The GUID of the tenant that the storage bucket will be created in.
func (o K8HelmRepositoryOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *K8HelmRepository) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The url of helm repository to be attached
func (o K8HelmRepositoryOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *K8HelmRepository) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type K8HelmRepositoryArrayOutput struct{ *pulumi.OutputState }

func (K8HelmRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8HelmRepository)(nil)).Elem()
}

func (o K8HelmRepositoryArrayOutput) ToK8HelmRepositoryArrayOutput() K8HelmRepositoryArrayOutput {
	return o
}

func (o K8HelmRepositoryArrayOutput) ToK8HelmRepositoryArrayOutputWithContext(ctx context.Context) K8HelmRepositoryArrayOutput {
	return o
}

func (o K8HelmRepositoryArrayOutput) Index(i pulumi.IntInput) K8HelmRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *K8HelmRepository {
		return vs[0].([]*K8HelmRepository)[vs[1].(int)]
	}).(K8HelmRepositoryOutput)
}

type K8HelmRepositoryMapOutput struct{ *pulumi.OutputState }

func (K8HelmRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8HelmRepository)(nil)).Elem()
}

func (o K8HelmRepositoryMapOutput) ToK8HelmRepositoryMapOutput() K8HelmRepositoryMapOutput {
	return o
}

func (o K8HelmRepositoryMapOutput) ToK8HelmRepositoryMapOutputWithContext(ctx context.Context) K8HelmRepositoryMapOutput {
	return o
}

func (o K8HelmRepositoryMapOutput) MapIndex(k pulumi.StringInput) K8HelmRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *K8HelmRepository {
		return vs[0].(map[string]*K8HelmRepository)[vs[1].(string)]
	}).(K8HelmRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*K8HelmRepositoryInput)(nil)).Elem(), &K8HelmRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8HelmRepositoryArrayInput)(nil)).Elem(), K8HelmRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8HelmRepositoryMapInput)(nil)).Elem(), K8HelmRepositoryMap{})
	pulumi.RegisterOutputType(K8HelmRepositoryOutput{})
	pulumi.RegisterOutputType(K8HelmRepositoryArrayOutput{})
	pulumi.RegisterOutputType(K8HelmRepositoryMapOutput{})
}
