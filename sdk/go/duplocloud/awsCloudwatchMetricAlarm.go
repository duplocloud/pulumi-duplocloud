// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AwsCloudwatchMetricAlarm` manages an AWS cloudwatch metric alarm in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewTenant(ctx, "duplo-app", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("duplo-app"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAwsCloudwatchMetricAlarm(ctx, "mAlarm", &duplocloud.AwsCloudwatchMetricAlarmArgs{
//				TenantId:           duplo_app.TenantId,
//				MetricName:         pulumi.String("CPUUtilization"),
//				ComparisonOperator: pulumi.String("GreaterThanOrEqualToThreshold"),
//				EvaluationPeriods:  pulumi.Int(1),
//				Namespace:          pulumi.String("AWS/EC2"),
//				Period:             pulumi.Int(300),
//				Threshold:          pulumi.Float64(80),
//				Statistic:          pulumi.String("Average"),
//				Dimensions: duplocloud.AwsCloudwatchMetricAlarmDimensionArray{
//					&duplocloud.AwsCloudwatchMetricAlarmDimensionArgs{
//						Key:   pulumi.String("InstanceId"),
//						Value: pulumi.String("i-1234567abcdefghj"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing cloudwatch metric alarm
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *FRIENDLY_NAME* is the hypen separated alarm dimension values and metric name
//
// ```sh
// $ pulumi import duplocloud:index/awsCloudwatchMetricAlarm:AwsCloudwatchMetricAlarm myMetricAlarm *TENANT_ID*/*FRIENDLY_NAME*
// ```
type AwsCloudwatchMetricAlarm struct {
	pulumi.CustomResourceState

	// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`
	ComparisonOperator pulumi.StringOutput `pulumi:"comparisonOperator"`
	// The dimensions for the alarm's associated metric. For the list of available dimensions see the AWS documentation.
	Dimensions AwsCloudwatchMetricAlarmDimensionArrayOutput `pulumi:"dimensions"`
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods pulumi.IntOutput `pulumi:"evaluationPeriods"`
	// Duplo will generate name of the metric alarm.
	Fullname pulumi.StringOutput `pulumi:"fullname"`
	// The name for the alarm's associated metric.
	MetricName pulumi.StringOutput `pulumi:"metricName"`
	// The namespace for the alarm's associated metric.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The period in seconds over which the specified `statistic` is applied.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// The statistic to apply to the alarm's associated metric. Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Statistic pulumi.StringPtrOutput `pulumi:"statistic"`
	// The GUID of the tenant that the cloudwatch metric alarm will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
	Threshold pulumi.Float64PtrOutput `pulumi:"threshold"`
}

// NewAwsCloudwatchMetricAlarm registers a new resource with the given unique name, arguments, and options.
func NewAwsCloudwatchMetricAlarm(ctx *pulumi.Context,
	name string, args *AwsCloudwatchMetricAlarmArgs, opts ...pulumi.ResourceOption) (*AwsCloudwatchMetricAlarm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ComparisonOperator == nil {
		return nil, errors.New("invalid value for required argument 'ComparisonOperator'")
	}
	if args.EvaluationPeriods == nil {
		return nil, errors.New("invalid value for required argument 'EvaluationPeriods'")
	}
	if args.MetricName == nil {
		return nil, errors.New("invalid value for required argument 'MetricName'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsCloudwatchMetricAlarm
	err := ctx.RegisterResource("duplocloud:index/awsCloudwatchMetricAlarm:AwsCloudwatchMetricAlarm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsCloudwatchMetricAlarm gets an existing AwsCloudwatchMetricAlarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsCloudwatchMetricAlarm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsCloudwatchMetricAlarmState, opts ...pulumi.ResourceOption) (*AwsCloudwatchMetricAlarm, error) {
	var resource AwsCloudwatchMetricAlarm
	err := ctx.ReadResource("duplocloud:index/awsCloudwatchMetricAlarm:AwsCloudwatchMetricAlarm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsCloudwatchMetricAlarm resources.
type awsCloudwatchMetricAlarmState struct {
	// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`
	ComparisonOperator *string `pulumi:"comparisonOperator"`
	// The dimensions for the alarm's associated metric. For the list of available dimensions see the AWS documentation.
	Dimensions []AwsCloudwatchMetricAlarmDimension `pulumi:"dimensions"`
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods *int `pulumi:"evaluationPeriods"`
	// Duplo will generate name of the metric alarm.
	Fullname *string `pulumi:"fullname"`
	// The name for the alarm's associated metric.
	MetricName *string `pulumi:"metricName"`
	// The namespace for the alarm's associated metric.
	Namespace *string `pulumi:"namespace"`
	// The period in seconds over which the specified `statistic` is applied.
	Period *int `pulumi:"period"`
	// The statistic to apply to the alarm's associated metric. Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Statistic *string `pulumi:"statistic"`
	// The GUID of the tenant that the cloudwatch metric alarm will be created in.
	TenantId *string `pulumi:"tenantId"`
	// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
	Threshold *float64 `pulumi:"threshold"`
}

type AwsCloudwatchMetricAlarmState struct {
	// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`
	ComparisonOperator pulumi.StringPtrInput
	// The dimensions for the alarm's associated metric. For the list of available dimensions see the AWS documentation.
	Dimensions AwsCloudwatchMetricAlarmDimensionArrayInput
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods pulumi.IntPtrInput
	// Duplo will generate name of the metric alarm.
	Fullname pulumi.StringPtrInput
	// The name for the alarm's associated metric.
	MetricName pulumi.StringPtrInput
	// The namespace for the alarm's associated metric.
	Namespace pulumi.StringPtrInput
	// The period in seconds over which the specified `statistic` is applied.
	Period pulumi.IntPtrInput
	// The statistic to apply to the alarm's associated metric. Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Statistic pulumi.StringPtrInput
	// The GUID of the tenant that the cloudwatch metric alarm will be created in.
	TenantId pulumi.StringPtrInput
	// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
	Threshold pulumi.Float64PtrInput
}

func (AwsCloudwatchMetricAlarmState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsCloudwatchMetricAlarmState)(nil)).Elem()
}

type awsCloudwatchMetricAlarmArgs struct {
	// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`
	ComparisonOperator string `pulumi:"comparisonOperator"`
	// The dimensions for the alarm's associated metric. For the list of available dimensions see the AWS documentation.
	Dimensions []AwsCloudwatchMetricAlarmDimension `pulumi:"dimensions"`
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods int `pulumi:"evaluationPeriods"`
	// The name for the alarm's associated metric.
	MetricName string `pulumi:"metricName"`
	// The namespace for the alarm's associated metric.
	Namespace *string `pulumi:"namespace"`
	// The period in seconds over which the specified `statistic` is applied.
	Period *int `pulumi:"period"`
	// The statistic to apply to the alarm's associated metric. Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Statistic *string `pulumi:"statistic"`
	// The GUID of the tenant that the cloudwatch metric alarm will be created in.
	TenantId string `pulumi:"tenantId"`
	// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
	Threshold *float64 `pulumi:"threshold"`
}

// The set of arguments for constructing a AwsCloudwatchMetricAlarm resource.
type AwsCloudwatchMetricAlarmArgs struct {
	// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`
	ComparisonOperator pulumi.StringInput
	// The dimensions for the alarm's associated metric. For the list of available dimensions see the AWS documentation.
	Dimensions AwsCloudwatchMetricAlarmDimensionArrayInput
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods pulumi.IntInput
	// The name for the alarm's associated metric.
	MetricName pulumi.StringInput
	// The namespace for the alarm's associated metric.
	Namespace pulumi.StringPtrInput
	// The period in seconds over which the specified `statistic` is applied.
	Period pulumi.IntPtrInput
	// The statistic to apply to the alarm's associated metric. Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Statistic pulumi.StringPtrInput
	// The GUID of the tenant that the cloudwatch metric alarm will be created in.
	TenantId pulumi.StringInput
	// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
	Threshold pulumi.Float64PtrInput
}

func (AwsCloudwatchMetricAlarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsCloudwatchMetricAlarmArgs)(nil)).Elem()
}

type AwsCloudwatchMetricAlarmInput interface {
	pulumi.Input

	ToAwsCloudwatchMetricAlarmOutput() AwsCloudwatchMetricAlarmOutput
	ToAwsCloudwatchMetricAlarmOutputWithContext(ctx context.Context) AwsCloudwatchMetricAlarmOutput
}

func (*AwsCloudwatchMetricAlarm) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsCloudwatchMetricAlarm)(nil)).Elem()
}

func (i *AwsCloudwatchMetricAlarm) ToAwsCloudwatchMetricAlarmOutput() AwsCloudwatchMetricAlarmOutput {
	return i.ToAwsCloudwatchMetricAlarmOutputWithContext(context.Background())
}

func (i *AwsCloudwatchMetricAlarm) ToAwsCloudwatchMetricAlarmOutputWithContext(ctx context.Context) AwsCloudwatchMetricAlarmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCloudwatchMetricAlarmOutput)
}

// AwsCloudwatchMetricAlarmArrayInput is an input type that accepts AwsCloudwatchMetricAlarmArray and AwsCloudwatchMetricAlarmArrayOutput values.
// You can construct a concrete instance of `AwsCloudwatchMetricAlarmArrayInput` via:
//
//	AwsCloudwatchMetricAlarmArray{ AwsCloudwatchMetricAlarmArgs{...} }
type AwsCloudwatchMetricAlarmArrayInput interface {
	pulumi.Input

	ToAwsCloudwatchMetricAlarmArrayOutput() AwsCloudwatchMetricAlarmArrayOutput
	ToAwsCloudwatchMetricAlarmArrayOutputWithContext(context.Context) AwsCloudwatchMetricAlarmArrayOutput
}

type AwsCloudwatchMetricAlarmArray []AwsCloudwatchMetricAlarmInput

func (AwsCloudwatchMetricAlarmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsCloudwatchMetricAlarm)(nil)).Elem()
}

func (i AwsCloudwatchMetricAlarmArray) ToAwsCloudwatchMetricAlarmArrayOutput() AwsCloudwatchMetricAlarmArrayOutput {
	return i.ToAwsCloudwatchMetricAlarmArrayOutputWithContext(context.Background())
}

func (i AwsCloudwatchMetricAlarmArray) ToAwsCloudwatchMetricAlarmArrayOutputWithContext(ctx context.Context) AwsCloudwatchMetricAlarmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCloudwatchMetricAlarmArrayOutput)
}

// AwsCloudwatchMetricAlarmMapInput is an input type that accepts AwsCloudwatchMetricAlarmMap and AwsCloudwatchMetricAlarmMapOutput values.
// You can construct a concrete instance of `AwsCloudwatchMetricAlarmMapInput` via:
//
//	AwsCloudwatchMetricAlarmMap{ "key": AwsCloudwatchMetricAlarmArgs{...} }
type AwsCloudwatchMetricAlarmMapInput interface {
	pulumi.Input

	ToAwsCloudwatchMetricAlarmMapOutput() AwsCloudwatchMetricAlarmMapOutput
	ToAwsCloudwatchMetricAlarmMapOutputWithContext(context.Context) AwsCloudwatchMetricAlarmMapOutput
}

type AwsCloudwatchMetricAlarmMap map[string]AwsCloudwatchMetricAlarmInput

func (AwsCloudwatchMetricAlarmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsCloudwatchMetricAlarm)(nil)).Elem()
}

func (i AwsCloudwatchMetricAlarmMap) ToAwsCloudwatchMetricAlarmMapOutput() AwsCloudwatchMetricAlarmMapOutput {
	return i.ToAwsCloudwatchMetricAlarmMapOutputWithContext(context.Background())
}

func (i AwsCloudwatchMetricAlarmMap) ToAwsCloudwatchMetricAlarmMapOutputWithContext(ctx context.Context) AwsCloudwatchMetricAlarmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCloudwatchMetricAlarmMapOutput)
}

type AwsCloudwatchMetricAlarmOutput struct{ *pulumi.OutputState }

func (AwsCloudwatchMetricAlarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsCloudwatchMetricAlarm)(nil)).Elem()
}

func (o AwsCloudwatchMetricAlarmOutput) ToAwsCloudwatchMetricAlarmOutput() AwsCloudwatchMetricAlarmOutput {
	return o
}

func (o AwsCloudwatchMetricAlarmOutput) ToAwsCloudwatchMetricAlarmOutputWithContext(ctx context.Context) AwsCloudwatchMetricAlarmOutput {
	return o
}

// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`
func (o AwsCloudwatchMetricAlarmOutput) ComparisonOperator() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCloudwatchMetricAlarm) pulumi.StringOutput { return v.ComparisonOperator }).(pulumi.StringOutput)
}

// The dimensions for the alarm's associated metric. For the list of available dimensions see the AWS documentation.
func (o AwsCloudwatchMetricAlarmOutput) Dimensions() AwsCloudwatchMetricAlarmDimensionArrayOutput {
	return o.ApplyT(func(v *AwsCloudwatchMetricAlarm) AwsCloudwatchMetricAlarmDimensionArrayOutput { return v.Dimensions }).(AwsCloudwatchMetricAlarmDimensionArrayOutput)
}

// The number of periods over which data is compared to the specified threshold.
func (o AwsCloudwatchMetricAlarmOutput) EvaluationPeriods() pulumi.IntOutput {
	return o.ApplyT(func(v *AwsCloudwatchMetricAlarm) pulumi.IntOutput { return v.EvaluationPeriods }).(pulumi.IntOutput)
}

// Duplo will generate name of the metric alarm.
func (o AwsCloudwatchMetricAlarmOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCloudwatchMetricAlarm) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

// The name for the alarm's associated metric.
func (o AwsCloudwatchMetricAlarmOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCloudwatchMetricAlarm) pulumi.StringOutput { return v.MetricName }).(pulumi.StringOutput)
}

// The namespace for the alarm's associated metric.
func (o AwsCloudwatchMetricAlarmOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsCloudwatchMetricAlarm) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The period in seconds over which the specified `statistic` is applied.
func (o AwsCloudwatchMetricAlarmOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AwsCloudwatchMetricAlarm) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// The statistic to apply to the alarm's associated metric. Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
func (o AwsCloudwatchMetricAlarmOutput) Statistic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsCloudwatchMetricAlarm) pulumi.StringPtrOutput { return v.Statistic }).(pulumi.StringPtrOutput)
}

// The GUID of the tenant that the cloudwatch metric alarm will be created in.
func (o AwsCloudwatchMetricAlarmOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCloudwatchMetricAlarm) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
func (o AwsCloudwatchMetricAlarmOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AwsCloudwatchMetricAlarm) pulumi.Float64PtrOutput { return v.Threshold }).(pulumi.Float64PtrOutput)
}

type AwsCloudwatchMetricAlarmArrayOutput struct{ *pulumi.OutputState }

func (AwsCloudwatchMetricAlarmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsCloudwatchMetricAlarm)(nil)).Elem()
}

func (o AwsCloudwatchMetricAlarmArrayOutput) ToAwsCloudwatchMetricAlarmArrayOutput() AwsCloudwatchMetricAlarmArrayOutput {
	return o
}

func (o AwsCloudwatchMetricAlarmArrayOutput) ToAwsCloudwatchMetricAlarmArrayOutputWithContext(ctx context.Context) AwsCloudwatchMetricAlarmArrayOutput {
	return o
}

func (o AwsCloudwatchMetricAlarmArrayOutput) Index(i pulumi.IntInput) AwsCloudwatchMetricAlarmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsCloudwatchMetricAlarm {
		return vs[0].([]*AwsCloudwatchMetricAlarm)[vs[1].(int)]
	}).(AwsCloudwatchMetricAlarmOutput)
}

type AwsCloudwatchMetricAlarmMapOutput struct{ *pulumi.OutputState }

func (AwsCloudwatchMetricAlarmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsCloudwatchMetricAlarm)(nil)).Elem()
}

func (o AwsCloudwatchMetricAlarmMapOutput) ToAwsCloudwatchMetricAlarmMapOutput() AwsCloudwatchMetricAlarmMapOutput {
	return o
}

func (o AwsCloudwatchMetricAlarmMapOutput) ToAwsCloudwatchMetricAlarmMapOutputWithContext(ctx context.Context) AwsCloudwatchMetricAlarmMapOutput {
	return o
}

func (o AwsCloudwatchMetricAlarmMapOutput) MapIndex(k pulumi.StringInput) AwsCloudwatchMetricAlarmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsCloudwatchMetricAlarm {
		return vs[0].(map[string]*AwsCloudwatchMetricAlarm)[vs[1].(string)]
	}).(AwsCloudwatchMetricAlarmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsCloudwatchMetricAlarmInput)(nil)).Elem(), &AwsCloudwatchMetricAlarm{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsCloudwatchMetricAlarmArrayInput)(nil)).Elem(), AwsCloudwatchMetricAlarmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsCloudwatchMetricAlarmMapInput)(nil)).Elem(), AwsCloudwatchMetricAlarmMap{})
	pulumi.RegisterOutputType(AwsCloudwatchMetricAlarmOutput{})
	pulumi.RegisterOutputType(AwsCloudwatchMetricAlarmArrayOutput{})
	pulumi.RegisterOutputType(AwsCloudwatchMetricAlarmMapOutput{})
}
