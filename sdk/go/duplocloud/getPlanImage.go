// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `getPlanImage` retrieves details of a specific image for a given plan.
func LookupPlanImage(ctx *pulumi.Context, args *LookupPlanImageArgs, opts ...pulumi.InvokeOption) (*LookupPlanImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPlanImageResult
	err := ctx.Invoke("duplocloud:index/getPlanImage:getPlanImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlanImage.
type LookupPlanImageArgs struct {
	Name string `pulumi:"name"`
	// The plan ID
	PlanId string `pulumi:"planId"`
}

// A collection of values returned by getPlanImage.
type LookupPlanImageResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id      string `pulumi:"id"`
	ImageId string `pulumi:"imageId"`
	Name    string `pulumi:"name"`
	Os      string `pulumi:"os"`
	// The plan ID
	PlanId   string            `pulumi:"planId"`
	Tags     []GetPlanImageTag `pulumi:"tags"`
	Username string            `pulumi:"username"`
}

func LookupPlanImageOutput(ctx *pulumi.Context, args LookupPlanImageOutputArgs, opts ...pulumi.InvokeOption) LookupPlanImageResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPlanImageResultOutput, error) {
			args := v.(LookupPlanImageArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("duplocloud:index/getPlanImage:getPlanImage", args, LookupPlanImageResultOutput{}, options).(LookupPlanImageResultOutput), nil
		}).(LookupPlanImageResultOutput)
}

// A collection of arguments for invoking getPlanImage.
type LookupPlanImageOutputArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	// The plan ID
	PlanId pulumi.StringInput `pulumi:"planId"`
}

func (LookupPlanImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanImageArgs)(nil)).Elem()
}

// A collection of values returned by getPlanImage.
type LookupPlanImageResultOutput struct{ *pulumi.OutputState }

func (LookupPlanImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanImageResult)(nil)).Elem()
}

func (o LookupPlanImageResultOutput) ToLookupPlanImageResultOutput() LookupPlanImageResultOutput {
	return o
}

func (o LookupPlanImageResultOutput) ToLookupPlanImageResultOutputWithContext(ctx context.Context) LookupPlanImageResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPlanImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanImageResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPlanImageResultOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanImageResult) string { return v.ImageId }).(pulumi.StringOutput)
}

func (o LookupPlanImageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanImageResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupPlanImageResultOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanImageResult) string { return v.Os }).(pulumi.StringOutput)
}

// The plan ID
func (o LookupPlanImageResultOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanImageResult) string { return v.PlanId }).(pulumi.StringOutput)
}

func (o LookupPlanImageResultOutput) Tags() GetPlanImageTagArrayOutput {
	return o.ApplyT(func(v LookupPlanImageResult) []GetPlanImageTag { return v.Tags }).(GetPlanImageTagArrayOutput)
}

func (o LookupPlanImageResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanImageResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPlanImageResultOutput{})
}
