// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureStorageclassBlob` manages an Azure storage class blob in Duplo.
type AzureStorageclassBlob struct {
	pulumi.CustomResourceState

	// The name of the Blob. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the storage class in which to create the blob. Changing this forces a new resource to be created.
	StorageAccountName pulumi.StringOutput `pulumi:"storageAccountName"`
	// The GUID of the tenant that the azure storage class blob will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The URL of the Blob.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewAzureStorageclassBlob registers a new resource with the given unique name, arguments, and options.
func NewAzureStorageclassBlob(ctx *pulumi.Context,
	name string, args *AzureStorageclassBlobArgs, opts ...pulumi.ResourceOption) (*AzureStorageclassBlob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StorageAccountName == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountName'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureStorageclassBlob
	err := ctx.RegisterResource("duplocloud:index/azureStorageclassBlob:AzureStorageclassBlob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureStorageclassBlob gets an existing AzureStorageclassBlob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureStorageclassBlob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureStorageclassBlobState, opts ...pulumi.ResourceOption) (*AzureStorageclassBlob, error) {
	var resource AzureStorageclassBlob
	err := ctx.ReadResource("duplocloud:index/azureStorageclassBlob:AzureStorageclassBlob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureStorageclassBlob resources.
type azureStorageclassBlobState struct {
	// The name of the Blob. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the storage class in which to create the blob. Changing this forces a new resource to be created.
	StorageAccountName *string `pulumi:"storageAccountName"`
	// The GUID of the tenant that the azure storage class blob will be created in.
	TenantId *string `pulumi:"tenantId"`
	// The URL of the Blob.
	Url *string `pulumi:"url"`
}

type AzureStorageclassBlobState struct {
	// The name of the Blob. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the storage class in which to create the blob. Changing this forces a new resource to be created.
	StorageAccountName pulumi.StringPtrInput
	// The GUID of the tenant that the azure storage class blob will be created in.
	TenantId pulumi.StringPtrInput
	// The URL of the Blob.
	Url pulumi.StringPtrInput
}

func (AzureStorageclassBlobState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureStorageclassBlobState)(nil)).Elem()
}

type azureStorageclassBlobArgs struct {
	// The name of the Blob. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the storage class in which to create the blob. Changing this forces a new resource to be created.
	StorageAccountName string `pulumi:"storageAccountName"`
	// The GUID of the tenant that the azure storage class blob will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AzureStorageclassBlob resource.
type AzureStorageclassBlobArgs struct {
	// The name of the Blob. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the storage class in which to create the blob. Changing this forces a new resource to be created.
	StorageAccountName pulumi.StringInput
	// The GUID of the tenant that the azure storage class blob will be created in.
	TenantId pulumi.StringInput
}

func (AzureStorageclassBlobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureStorageclassBlobArgs)(nil)).Elem()
}

type AzureStorageclassBlobInput interface {
	pulumi.Input

	ToAzureStorageclassBlobOutput() AzureStorageclassBlobOutput
	ToAzureStorageclassBlobOutputWithContext(ctx context.Context) AzureStorageclassBlobOutput
}

func (*AzureStorageclassBlob) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStorageclassBlob)(nil)).Elem()
}

func (i *AzureStorageclassBlob) ToAzureStorageclassBlobOutput() AzureStorageclassBlobOutput {
	return i.ToAzureStorageclassBlobOutputWithContext(context.Background())
}

func (i *AzureStorageclassBlob) ToAzureStorageclassBlobOutputWithContext(ctx context.Context) AzureStorageclassBlobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStorageclassBlobOutput)
}

// AzureStorageclassBlobArrayInput is an input type that accepts AzureStorageclassBlobArray and AzureStorageclassBlobArrayOutput values.
// You can construct a concrete instance of `AzureStorageclassBlobArrayInput` via:
//
//	AzureStorageclassBlobArray{ AzureStorageclassBlobArgs{...} }
type AzureStorageclassBlobArrayInput interface {
	pulumi.Input

	ToAzureStorageclassBlobArrayOutput() AzureStorageclassBlobArrayOutput
	ToAzureStorageclassBlobArrayOutputWithContext(context.Context) AzureStorageclassBlobArrayOutput
}

type AzureStorageclassBlobArray []AzureStorageclassBlobInput

func (AzureStorageclassBlobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureStorageclassBlob)(nil)).Elem()
}

func (i AzureStorageclassBlobArray) ToAzureStorageclassBlobArrayOutput() AzureStorageclassBlobArrayOutput {
	return i.ToAzureStorageclassBlobArrayOutputWithContext(context.Background())
}

func (i AzureStorageclassBlobArray) ToAzureStorageclassBlobArrayOutputWithContext(ctx context.Context) AzureStorageclassBlobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStorageclassBlobArrayOutput)
}

// AzureStorageclassBlobMapInput is an input type that accepts AzureStorageclassBlobMap and AzureStorageclassBlobMapOutput values.
// You can construct a concrete instance of `AzureStorageclassBlobMapInput` via:
//
//	AzureStorageclassBlobMap{ "key": AzureStorageclassBlobArgs{...} }
type AzureStorageclassBlobMapInput interface {
	pulumi.Input

	ToAzureStorageclassBlobMapOutput() AzureStorageclassBlobMapOutput
	ToAzureStorageclassBlobMapOutputWithContext(context.Context) AzureStorageclassBlobMapOutput
}

type AzureStorageclassBlobMap map[string]AzureStorageclassBlobInput

func (AzureStorageclassBlobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureStorageclassBlob)(nil)).Elem()
}

func (i AzureStorageclassBlobMap) ToAzureStorageclassBlobMapOutput() AzureStorageclassBlobMapOutput {
	return i.ToAzureStorageclassBlobMapOutputWithContext(context.Background())
}

func (i AzureStorageclassBlobMap) ToAzureStorageclassBlobMapOutputWithContext(ctx context.Context) AzureStorageclassBlobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStorageclassBlobMapOutput)
}

type AzureStorageclassBlobOutput struct{ *pulumi.OutputState }

func (AzureStorageclassBlobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStorageclassBlob)(nil)).Elem()
}

func (o AzureStorageclassBlobOutput) ToAzureStorageclassBlobOutput() AzureStorageclassBlobOutput {
	return o
}

func (o AzureStorageclassBlobOutput) ToAzureStorageclassBlobOutputWithContext(ctx context.Context) AzureStorageclassBlobOutput {
	return o
}

// The name of the Blob. Changing this forces a new resource to be created.
func (o AzureStorageclassBlobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureStorageclassBlob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the storage class in which to create the blob. Changing this forces a new resource to be created.
func (o AzureStorageclassBlobOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureStorageclassBlob) pulumi.StringOutput { return v.StorageAccountName }).(pulumi.StringOutput)
}

// The GUID of the tenant that the azure storage class blob will be created in.
func (o AzureStorageclassBlobOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureStorageclassBlob) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The URL of the Blob.
func (o AzureStorageclassBlobOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureStorageclassBlob) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type AzureStorageclassBlobArrayOutput struct{ *pulumi.OutputState }

func (AzureStorageclassBlobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureStorageclassBlob)(nil)).Elem()
}

func (o AzureStorageclassBlobArrayOutput) ToAzureStorageclassBlobArrayOutput() AzureStorageclassBlobArrayOutput {
	return o
}

func (o AzureStorageclassBlobArrayOutput) ToAzureStorageclassBlobArrayOutputWithContext(ctx context.Context) AzureStorageclassBlobArrayOutput {
	return o
}

func (o AzureStorageclassBlobArrayOutput) Index(i pulumi.IntInput) AzureStorageclassBlobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureStorageclassBlob {
		return vs[0].([]*AzureStorageclassBlob)[vs[1].(int)]
	}).(AzureStorageclassBlobOutput)
}

type AzureStorageclassBlobMapOutput struct{ *pulumi.OutputState }

func (AzureStorageclassBlobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureStorageclassBlob)(nil)).Elem()
}

func (o AzureStorageclassBlobMapOutput) ToAzureStorageclassBlobMapOutput() AzureStorageclassBlobMapOutput {
	return o
}

func (o AzureStorageclassBlobMapOutput) ToAzureStorageclassBlobMapOutputWithContext(ctx context.Context) AzureStorageclassBlobMapOutput {
	return o
}

func (o AzureStorageclassBlobMapOutput) MapIndex(k pulumi.StringInput) AzureStorageclassBlobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureStorageclassBlob {
		return vs[0].(map[string]*AzureStorageclassBlob)[vs[1].(string)]
	}).(AzureStorageclassBlobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureStorageclassBlobInput)(nil)).Elem(), &AzureStorageclassBlob{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureStorageclassBlobArrayInput)(nil)).Elem(), AzureStorageclassBlobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureStorageclassBlobMapInput)(nil)).Elem(), AzureStorageclassBlobMap{})
	pulumi.RegisterOutputType(AzureStorageclassBlobOutput{})
	pulumi.RegisterOutputType(AzureStorageclassBlobArrayOutput{})
	pulumi.RegisterOutputType(AzureStorageclassBlobMapOutput{})
}
