// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureMysqlDatabase` manages an Azure mysql database in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAzureMysqlDatabase(ctx, "mydb", &duplocloud.AzureMysqlDatabaseArgs{
//				TenantId:                   myapp.TenantId,
//				Name:                       pulumi.String("mysql-test"),
//				AdministratorLogin:         pulumi.String("testroot"),
//				AdministratorLoginPassword: pulumi.String("P@ssword12345"),
//				StorageMb:                  pulumi.Int(102400),
//				Version:                    pulumi.String("5.7"),
//				SkuName:                    pulumi.String("GP_Gen5_4"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing Azure Mysql Database
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the Azure Mysql Database
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/azureMysqlDatabase:AzureMysqlDatabase mysqlDatabase *TENANT_ID*/*SHORT_NAME*
// ```
type AzureMysqlDatabase struct {
	pulumi.CustomResourceState

	// The Administrator Login for the MySQL Server.
	AdministratorLogin pulumi.StringOutput `pulumi:"administratorLogin"`
	// The Password associated with the `administratorLogin` for the MySQL Server.
	AdministratorLoginPassword pulumi.StringPtrOutput `pulumi:"administratorLoginPassword"`
	// Backup retention days for the server, supported values are between `7` and `35` days.
	BackupRetentionDays pulumi.IntOutput `pulumi:"backupRetentionDays"`
	// The FQDN of the MySQL Server.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// Turn Geo-redundant server backups on/off.
	GeoRedundantBackup pulumi.StringOutput `pulumi:"geoRedundantBackup"`
	// Specifies the name of the MySQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the SKU Name for this MySQL Server.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
	// Specifies if SSL should be enforced on connections.
	SslEnforcement pulumi.StringOutput `pulumi:"sslEnforcement"`
	// Max storage allowed for a server. Possible values are between `5120` MB(5GB) and `1048576` MB(1TB) for the Basic SKU and between `5120` MB(5GB) and `4194304` MB(4TB) for General Purpose/Memory Optimized SKUs.
	StorageMb pulumi.IntOutput       `pulumi:"storageMb"`
	Tags      pulumi.StringMapOutput `pulumi:"tags"`
	// The GUID of the tenant that the azure mysql database will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Specifies the version of MySQL to use. Valid values are `5.7`, or `8.0`. Changing this forces a new resource to be created.
	Version pulumi.StringOutput `pulumi:"version"`
	// Whether or not to wait until MySql Server instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrOutput `pulumi:"waitUntilReady"`
}

// NewAzureMysqlDatabase registers a new resource with the given unique name, arguments, and options.
func NewAzureMysqlDatabase(ctx *pulumi.Context,
	name string, args *AzureMysqlDatabaseArgs, opts ...pulumi.ResourceOption) (*AzureMysqlDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SkuName == nil {
		return nil, errors.New("invalid value for required argument 'SkuName'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.AdministratorLoginPassword != nil {
		args.AdministratorLoginPassword = pulumi.ToSecret(args.AdministratorLoginPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"administratorLoginPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureMysqlDatabase
	err := ctx.RegisterResource("duplocloud:index/azureMysqlDatabase:AzureMysqlDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureMysqlDatabase gets an existing AzureMysqlDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureMysqlDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureMysqlDatabaseState, opts ...pulumi.ResourceOption) (*AzureMysqlDatabase, error) {
	var resource AzureMysqlDatabase
	err := ctx.ReadResource("duplocloud:index/azureMysqlDatabase:AzureMysqlDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureMysqlDatabase resources.
type azureMysqlDatabaseState struct {
	// The Administrator Login for the MySQL Server.
	AdministratorLogin *string `pulumi:"administratorLogin"`
	// The Password associated with the `administratorLogin` for the MySQL Server.
	AdministratorLoginPassword *string `pulumi:"administratorLoginPassword"`
	// Backup retention days for the server, supported values are between `7` and `35` days.
	BackupRetentionDays *int `pulumi:"backupRetentionDays"`
	// The FQDN of the MySQL Server.
	Fqdn *string `pulumi:"fqdn"`
	// Turn Geo-redundant server backups on/off.
	GeoRedundantBackup *string `pulumi:"geoRedundantBackup"`
	// Specifies the name of the MySQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.
	Name *string `pulumi:"name"`
	// Specifies the SKU Name for this MySQL Server.
	SkuName *string `pulumi:"skuName"`
	// Specifies if SSL should be enforced on connections.
	SslEnforcement *string `pulumi:"sslEnforcement"`
	// Max storage allowed for a server. Possible values are between `5120` MB(5GB) and `1048576` MB(1TB) for the Basic SKU and between `5120` MB(5GB) and `4194304` MB(4TB) for General Purpose/Memory Optimized SKUs.
	StorageMb *int              `pulumi:"storageMb"`
	Tags      map[string]string `pulumi:"tags"`
	// The GUID of the tenant that the azure mysql database will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the version of MySQL to use. Valid values are `5.7`, or `8.0`. Changing this forces a new resource to be created.
	Version *string `pulumi:"version"`
	// Whether or not to wait until MySql Server instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

type AzureMysqlDatabaseState struct {
	// The Administrator Login for the MySQL Server.
	AdministratorLogin pulumi.StringPtrInput
	// The Password associated with the `administratorLogin` for the MySQL Server.
	AdministratorLoginPassword pulumi.StringPtrInput
	// Backup retention days for the server, supported values are between `7` and `35` days.
	BackupRetentionDays pulumi.IntPtrInput
	// The FQDN of the MySQL Server.
	Fqdn pulumi.StringPtrInput
	// Turn Geo-redundant server backups on/off.
	GeoRedundantBackup pulumi.StringPtrInput
	// Specifies the name of the MySQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.
	Name pulumi.StringPtrInput
	// Specifies the SKU Name for this MySQL Server.
	SkuName pulumi.StringPtrInput
	// Specifies if SSL should be enforced on connections.
	SslEnforcement pulumi.StringPtrInput
	// Max storage allowed for a server. Possible values are between `5120` MB(5GB) and `1048576` MB(1TB) for the Basic SKU and between `5120` MB(5GB) and `4194304` MB(4TB) for General Purpose/Memory Optimized SKUs.
	StorageMb pulumi.IntPtrInput
	Tags      pulumi.StringMapInput
	// The GUID of the tenant that the azure mysql database will be created in.
	TenantId pulumi.StringPtrInput
	// Specifies the version of MySQL to use. Valid values are `5.7`, or `8.0`. Changing this forces a new resource to be created.
	Version pulumi.StringPtrInput
	// Whether or not to wait until MySql Server instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzureMysqlDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureMysqlDatabaseState)(nil)).Elem()
}

type azureMysqlDatabaseArgs struct {
	// The Administrator Login for the MySQL Server.
	AdministratorLogin *string `pulumi:"administratorLogin"`
	// The Password associated with the `administratorLogin` for the MySQL Server.
	AdministratorLoginPassword *string `pulumi:"administratorLoginPassword"`
	// Backup retention days for the server, supported values are between `7` and `35` days.
	BackupRetentionDays *int `pulumi:"backupRetentionDays"`
	// Turn Geo-redundant server backups on/off.
	GeoRedundantBackup *string `pulumi:"geoRedundantBackup"`
	// Specifies the name of the MySQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.
	Name *string `pulumi:"name"`
	// Specifies the SKU Name for this MySQL Server.
	SkuName string `pulumi:"skuName"`
	// Specifies if SSL should be enforced on connections.
	SslEnforcement *string `pulumi:"sslEnforcement"`
	// Max storage allowed for a server. Possible values are between `5120` MB(5GB) and `1048576` MB(1TB) for the Basic SKU and between `5120` MB(5GB) and `4194304` MB(4TB) for General Purpose/Memory Optimized SKUs.
	StorageMb *int `pulumi:"storageMb"`
	// The GUID of the tenant that the azure mysql database will be created in.
	TenantId string `pulumi:"tenantId"`
	// Specifies the version of MySQL to use. Valid values are `5.7`, or `8.0`. Changing this forces a new resource to be created.
	Version string `pulumi:"version"`
	// Whether or not to wait until MySql Server instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

// The set of arguments for constructing a AzureMysqlDatabase resource.
type AzureMysqlDatabaseArgs struct {
	// The Administrator Login for the MySQL Server.
	AdministratorLogin pulumi.StringPtrInput
	// The Password associated with the `administratorLogin` for the MySQL Server.
	AdministratorLoginPassword pulumi.StringPtrInput
	// Backup retention days for the server, supported values are between `7` and `35` days.
	BackupRetentionDays pulumi.IntPtrInput
	// Turn Geo-redundant server backups on/off.
	GeoRedundantBackup pulumi.StringPtrInput
	// Specifies the name of the MySQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.
	Name pulumi.StringPtrInput
	// Specifies the SKU Name for this MySQL Server.
	SkuName pulumi.StringInput
	// Specifies if SSL should be enforced on connections.
	SslEnforcement pulumi.StringPtrInput
	// Max storage allowed for a server. Possible values are between `5120` MB(5GB) and `1048576` MB(1TB) for the Basic SKU and between `5120` MB(5GB) and `4194304` MB(4TB) for General Purpose/Memory Optimized SKUs.
	StorageMb pulumi.IntPtrInput
	// The GUID of the tenant that the azure mysql database will be created in.
	TenantId pulumi.StringInput
	// Specifies the version of MySQL to use. Valid values are `5.7`, or `8.0`. Changing this forces a new resource to be created.
	Version pulumi.StringInput
	// Whether or not to wait until MySql Server instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzureMysqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureMysqlDatabaseArgs)(nil)).Elem()
}

type AzureMysqlDatabaseInput interface {
	pulumi.Input

	ToAzureMysqlDatabaseOutput() AzureMysqlDatabaseOutput
	ToAzureMysqlDatabaseOutputWithContext(ctx context.Context) AzureMysqlDatabaseOutput
}

func (*AzureMysqlDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMysqlDatabase)(nil)).Elem()
}

func (i *AzureMysqlDatabase) ToAzureMysqlDatabaseOutput() AzureMysqlDatabaseOutput {
	return i.ToAzureMysqlDatabaseOutputWithContext(context.Background())
}

func (i *AzureMysqlDatabase) ToAzureMysqlDatabaseOutputWithContext(ctx context.Context) AzureMysqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMysqlDatabaseOutput)
}

// AzureMysqlDatabaseArrayInput is an input type that accepts AzureMysqlDatabaseArray and AzureMysqlDatabaseArrayOutput values.
// You can construct a concrete instance of `AzureMysqlDatabaseArrayInput` via:
//
//	AzureMysqlDatabaseArray{ AzureMysqlDatabaseArgs{...} }
type AzureMysqlDatabaseArrayInput interface {
	pulumi.Input

	ToAzureMysqlDatabaseArrayOutput() AzureMysqlDatabaseArrayOutput
	ToAzureMysqlDatabaseArrayOutputWithContext(context.Context) AzureMysqlDatabaseArrayOutput
}

type AzureMysqlDatabaseArray []AzureMysqlDatabaseInput

func (AzureMysqlDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureMysqlDatabase)(nil)).Elem()
}

func (i AzureMysqlDatabaseArray) ToAzureMysqlDatabaseArrayOutput() AzureMysqlDatabaseArrayOutput {
	return i.ToAzureMysqlDatabaseArrayOutputWithContext(context.Background())
}

func (i AzureMysqlDatabaseArray) ToAzureMysqlDatabaseArrayOutputWithContext(ctx context.Context) AzureMysqlDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMysqlDatabaseArrayOutput)
}

// AzureMysqlDatabaseMapInput is an input type that accepts AzureMysqlDatabaseMap and AzureMysqlDatabaseMapOutput values.
// You can construct a concrete instance of `AzureMysqlDatabaseMapInput` via:
//
//	AzureMysqlDatabaseMap{ "key": AzureMysqlDatabaseArgs{...} }
type AzureMysqlDatabaseMapInput interface {
	pulumi.Input

	ToAzureMysqlDatabaseMapOutput() AzureMysqlDatabaseMapOutput
	ToAzureMysqlDatabaseMapOutputWithContext(context.Context) AzureMysqlDatabaseMapOutput
}

type AzureMysqlDatabaseMap map[string]AzureMysqlDatabaseInput

func (AzureMysqlDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureMysqlDatabase)(nil)).Elem()
}

func (i AzureMysqlDatabaseMap) ToAzureMysqlDatabaseMapOutput() AzureMysqlDatabaseMapOutput {
	return i.ToAzureMysqlDatabaseMapOutputWithContext(context.Background())
}

func (i AzureMysqlDatabaseMap) ToAzureMysqlDatabaseMapOutputWithContext(ctx context.Context) AzureMysqlDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMysqlDatabaseMapOutput)
}

type AzureMysqlDatabaseOutput struct{ *pulumi.OutputState }

func (AzureMysqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMysqlDatabase)(nil)).Elem()
}

func (o AzureMysqlDatabaseOutput) ToAzureMysqlDatabaseOutput() AzureMysqlDatabaseOutput {
	return o
}

func (o AzureMysqlDatabaseOutput) ToAzureMysqlDatabaseOutputWithContext(ctx context.Context) AzureMysqlDatabaseOutput {
	return o
}

// The Administrator Login for the MySQL Server.
func (o AzureMysqlDatabaseOutput) AdministratorLogin() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMysqlDatabase) pulumi.StringOutput { return v.AdministratorLogin }).(pulumi.StringOutput)
}

// The Password associated with the `administratorLogin` for the MySQL Server.
func (o AzureMysqlDatabaseOutput) AdministratorLoginPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMysqlDatabase) pulumi.StringPtrOutput { return v.AdministratorLoginPassword }).(pulumi.StringPtrOutput)
}

// Backup retention days for the server, supported values are between `7` and `35` days.
func (o AzureMysqlDatabaseOutput) BackupRetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v *AzureMysqlDatabase) pulumi.IntOutput { return v.BackupRetentionDays }).(pulumi.IntOutput)
}

// The FQDN of the MySQL Server.
func (o AzureMysqlDatabaseOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMysqlDatabase) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// Turn Geo-redundant server backups on/off.
func (o AzureMysqlDatabaseOutput) GeoRedundantBackup() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMysqlDatabase) pulumi.StringOutput { return v.GeoRedundantBackup }).(pulumi.StringOutput)
}

// Specifies the name of the MySQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.
func (o AzureMysqlDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMysqlDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the SKU Name for this MySQL Server.
func (o AzureMysqlDatabaseOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMysqlDatabase) pulumi.StringOutput { return v.SkuName }).(pulumi.StringOutput)
}

// Specifies if SSL should be enforced on connections.
func (o AzureMysqlDatabaseOutput) SslEnforcement() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMysqlDatabase) pulumi.StringOutput { return v.SslEnforcement }).(pulumi.StringOutput)
}

// Max storage allowed for a server. Possible values are between `5120` MB(5GB) and `1048576` MB(1TB) for the Basic SKU and between `5120` MB(5GB) and `4194304` MB(4TB) for General Purpose/Memory Optimized SKUs.
func (o AzureMysqlDatabaseOutput) StorageMb() pulumi.IntOutput {
	return o.ApplyT(func(v *AzureMysqlDatabase) pulumi.IntOutput { return v.StorageMb }).(pulumi.IntOutput)
}

func (o AzureMysqlDatabaseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AzureMysqlDatabase) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The GUID of the tenant that the azure mysql database will be created in.
func (o AzureMysqlDatabaseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMysqlDatabase) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Specifies the version of MySQL to use. Valid values are `5.7`, or `8.0`. Changing this forces a new resource to be created.
func (o AzureMysqlDatabaseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureMysqlDatabase) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Whether or not to wait until MySql Server instance to be ready, after creation. Defaults to `true`.
func (o AzureMysqlDatabaseOutput) WaitUntilReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureMysqlDatabase) pulumi.BoolPtrOutput { return v.WaitUntilReady }).(pulumi.BoolPtrOutput)
}

type AzureMysqlDatabaseArrayOutput struct{ *pulumi.OutputState }

func (AzureMysqlDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureMysqlDatabase)(nil)).Elem()
}

func (o AzureMysqlDatabaseArrayOutput) ToAzureMysqlDatabaseArrayOutput() AzureMysqlDatabaseArrayOutput {
	return o
}

func (o AzureMysqlDatabaseArrayOutput) ToAzureMysqlDatabaseArrayOutputWithContext(ctx context.Context) AzureMysqlDatabaseArrayOutput {
	return o
}

func (o AzureMysqlDatabaseArrayOutput) Index(i pulumi.IntInput) AzureMysqlDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureMysqlDatabase {
		return vs[0].([]*AzureMysqlDatabase)[vs[1].(int)]
	}).(AzureMysqlDatabaseOutput)
}

type AzureMysqlDatabaseMapOutput struct{ *pulumi.OutputState }

func (AzureMysqlDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureMysqlDatabase)(nil)).Elem()
}

func (o AzureMysqlDatabaseMapOutput) ToAzureMysqlDatabaseMapOutput() AzureMysqlDatabaseMapOutput {
	return o
}

func (o AzureMysqlDatabaseMapOutput) ToAzureMysqlDatabaseMapOutputWithContext(ctx context.Context) AzureMysqlDatabaseMapOutput {
	return o
}

func (o AzureMysqlDatabaseMapOutput) MapIndex(k pulumi.StringInput) AzureMysqlDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureMysqlDatabase {
		return vs[0].(map[string]*AzureMysqlDatabase)[vs[1].(string)]
	}).(AzureMysqlDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureMysqlDatabaseInput)(nil)).Elem(), &AzureMysqlDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureMysqlDatabaseArrayInput)(nil)).Elem(), AzureMysqlDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureMysqlDatabaseMapInput)(nil)).Elem(), AzureMysqlDatabaseMap{})
	pulumi.RegisterOutputType(AzureMysqlDatabaseOutput{})
	pulumi.RegisterOutputType(AzureMysqlDatabaseArrayOutput{})
	pulumi.RegisterOutputType(AzureMysqlDatabaseMapOutput{})
}
