// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupEcsService(ctx *pulumi.Context, args *LookupEcsServiceArgs, opts ...pulumi.InvokeOption) (*LookupEcsServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEcsServiceResult
	err := ctx.Invoke("duplocloud:index/getEcsService:getEcsService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEcsService.
type LookupEcsServiceArgs struct {
	// The name of the service to create.
	Name string `pulumi:"name"`
	// The GUID of the tenant that the service will be created in.
	TenantId string `pulumi:"tenantId"`
}

// A collection of values returned by getEcsService.
type LookupEcsServiceResult struct {
	CapacityProviderStrategies []GetEcsServiceCapacityProviderStrategy `pulumi:"capacityProviderStrategies"`
	// The DNS prefix to assign to this service's load balancer.
	DnsPrfx                       string `pulumi:"dnsPrfx"`
	HealthCheckGracePeriodSeconds int    `pulumi:"healthCheckGracePeriodSeconds"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The index of the ecs service.
	Index             int  `pulumi:"index"`
	IsTargetGroupOnly bool `pulumi:"isTargetGroupOnly"`
	// Zero or more load balancer configurations to associate with this service.
	LoadBalancers []GetEcsServiceLoadBalancer `pulumi:"loadBalancers"`
	// The name of the service to create.
	Name string `pulumi:"name"`
	// The number of older task definitions to retain in AWS.
	OldTaskDefinitionBufferSize int `pulumi:"oldTaskDefinitionBufferSize"`
	// The number of container replicas to create.
	Replicas        int      `pulumi:"replicas"`
	TargetGroupArns []string `pulumi:"targetGroupArns"`
	// The ARN of the task definition to use.
	TaskDefinition string `pulumi:"taskDefinition"`
	// The GUID of the tenant that the service will be created in.
	TenantId string `pulumi:"tenantId"`
	// Whether or not to wait until all target groups are created for ecs service, after creation.
	WaitUntilTargetsReady bool `pulumi:"waitUntilTargetsReady"`
}

func LookupEcsServiceOutput(ctx *pulumi.Context, args LookupEcsServiceOutputArgs, opts ...pulumi.InvokeOption) LookupEcsServiceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEcsServiceResultOutput, error) {
			args := v.(LookupEcsServiceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("duplocloud:index/getEcsService:getEcsService", args, LookupEcsServiceResultOutput{}, options).(LookupEcsServiceResultOutput), nil
		}).(LookupEcsServiceResultOutput)
}

// A collection of arguments for invoking getEcsService.
type LookupEcsServiceOutputArgs struct {
	// The name of the service to create.
	Name pulumi.StringInput `pulumi:"name"`
	// The GUID of the tenant that the service will be created in.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (LookupEcsServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEcsServiceArgs)(nil)).Elem()
}

// A collection of values returned by getEcsService.
type LookupEcsServiceResultOutput struct{ *pulumi.OutputState }

func (LookupEcsServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEcsServiceResult)(nil)).Elem()
}

func (o LookupEcsServiceResultOutput) ToLookupEcsServiceResultOutput() LookupEcsServiceResultOutput {
	return o
}

func (o LookupEcsServiceResultOutput) ToLookupEcsServiceResultOutputWithContext(ctx context.Context) LookupEcsServiceResultOutput {
	return o
}

func (o LookupEcsServiceResultOutput) CapacityProviderStrategies() GetEcsServiceCapacityProviderStrategyArrayOutput {
	return o.ApplyT(func(v LookupEcsServiceResult) []GetEcsServiceCapacityProviderStrategy {
		return v.CapacityProviderStrategies
	}).(GetEcsServiceCapacityProviderStrategyArrayOutput)
}

// The DNS prefix to assign to this service's load balancer.
func (o LookupEcsServiceResultOutput) DnsPrfx() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsServiceResult) string { return v.DnsPrfx }).(pulumi.StringOutput)
}

func (o LookupEcsServiceResultOutput) HealthCheckGracePeriodSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEcsServiceResult) int { return v.HealthCheckGracePeriodSeconds }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupEcsServiceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsServiceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The index of the ecs service.
func (o LookupEcsServiceResultOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEcsServiceResult) int { return v.Index }).(pulumi.IntOutput)
}

func (o LookupEcsServiceResultOutput) IsTargetGroupOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEcsServiceResult) bool { return v.IsTargetGroupOnly }).(pulumi.BoolOutput)
}

// Zero or more load balancer configurations to associate with this service.
func (o LookupEcsServiceResultOutput) LoadBalancers() GetEcsServiceLoadBalancerArrayOutput {
	return o.ApplyT(func(v LookupEcsServiceResult) []GetEcsServiceLoadBalancer { return v.LoadBalancers }).(GetEcsServiceLoadBalancerArrayOutput)
}

// The name of the service to create.
func (o LookupEcsServiceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsServiceResult) string { return v.Name }).(pulumi.StringOutput)
}

// The number of older task definitions to retain in AWS.
func (o LookupEcsServiceResultOutput) OldTaskDefinitionBufferSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEcsServiceResult) int { return v.OldTaskDefinitionBufferSize }).(pulumi.IntOutput)
}

// The number of container replicas to create.
func (o LookupEcsServiceResultOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEcsServiceResult) int { return v.Replicas }).(pulumi.IntOutput)
}

func (o LookupEcsServiceResultOutput) TargetGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEcsServiceResult) []string { return v.TargetGroupArns }).(pulumi.StringArrayOutput)
}

// The ARN of the task definition to use.
func (o LookupEcsServiceResultOutput) TaskDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsServiceResult) string { return v.TaskDefinition }).(pulumi.StringOutput)
}

// The GUID of the tenant that the service will be created in.
func (o LookupEcsServiceResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEcsServiceResult) string { return v.TenantId }).(pulumi.StringOutput)
}

// Whether or not to wait until all target groups are created for ecs service, after creation.
func (o LookupEcsServiceResultOutput) WaitUntilTargetsReady() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEcsServiceResult) bool { return v.WaitUntilTargetsReady }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEcsServiceResultOutput{})
}
