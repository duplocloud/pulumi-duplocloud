// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Create a DuploCloud infrastructure named nonprod
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewInfrastructure(ctx, "infra", &duplocloud.InfrastructureArgs{
//				InfraName:       pulumi.String("nonprod"),
//				Cloud:           pulumi.Int(0),
//				Region:          pulumi.String("us-west-2"),
//				EnableK8Cluster: pulumi.Bool(true),
//				AddressPrefix:   pulumi.String("10.11.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a DuploCloud infrastructure named nonprod with cidr 10.34.0.0/16 in us-west-2 region
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewInfrastructure(ctx, "infra", &duplocloud.InfrastructureArgs{
//				InfraName:       pulumi.String("nonprod"),
//				Cloud:           pulumi.Int(0),
//				Region:          pulumi.String("us-west-2"),
//				EnableK8Cluster: pulumi.Bool(true),
//				AddressPrefix:   pulumi.String("10.34.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a DuploCloud infrastructure named nonprod with cidr 10.30.0.0/16 in us-east-1 region with EKS cluster
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewInfrastructure(ctx, "infra", &duplocloud.InfrastructureArgs{
//				InfraName:       pulumi.String("nonprod"),
//				Cloud:           pulumi.Int(0),
//				Region:          pulumi.String("us-east-1"),
//				Azcount:         pulumi.Int(2),
//				EnableK8Cluster: pulumi.Bool(true),
//				AddressPrefix:   pulumi.String("10.30.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a DuploCloud infrastructure named 'prod' in the us-east-2 region, with a VPC CIDR of 10.30.0.0/16, a subnet mask of 24, and EKS cluster enabled
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewInfrastructure(ctx, "infra", &duplocloud.InfrastructureArgs{
//				InfraName:       pulumi.String("prod"),
//				Cloud:           pulumi.Int(0),
//				Region:          pulumi.String("us-east-2"),
//				Azcount:         pulumi.Int(2),
//				EnableK8Cluster: pulumi.Bool(true),
//				AddressPrefix:   pulumi.String("10.30.0.0/16"),
//				SubnetCidr:      pulumi.Int(24),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a DuploCloud infrastructure named 'prod' in the us-east-2 region, with a VPC CIDR of 10.30.0.0/16, a subnet mask of 24, and an EKS cluster disabled with an ingress controller
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			prodInfra, err := duplocloud.NewInfrastructure(ctx, "prod_infra", &duplocloud.InfrastructureArgs{
//				InfraName:       pulumi.String("prod"),
//				Cloud:           pulumi.Int(0),
//				Region:          pulumi.String("us-east-2"),
//				Azcount:         pulumi.Int(2),
//				EnableK8Cluster: pulumi.Bool(false),
//				AddressPrefix:   pulumi.String("10.30.0.0/16"),
//				SubnetCidr:      pulumi.Int(24),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewInfrastructureSetting(ctx, "settings", &duplocloud.InfrastructureSettingArgs{
//				InfraName: prodInfra.InfraName,
//				Settings: duplocloud.InfrastructureSettingSettingArray{
//					&duplocloud.InfrastructureSettingSettingArgs{
//						Key:   pulumi.String("EnableAwsAlbIngress"),
//						Value: pulumi.String("true"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a DuploCloud infrastructure named 'nonprod' in the us-west-2 region, with a VPC CIDR of 10.60.0.0/16, a subnet mask of 24, and an EKS cluster enabled with an autoscaler
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			nonprodInfra, err := duplocloud.NewInfrastructure(ctx, "nonprod_infra", &duplocloud.InfrastructureArgs{
//				InfraName:       pulumi.String("nonprod"),
//				Cloud:           pulumi.Int(0),
//				Region:          pulumi.String("us-west-2"),
//				Azcount:         pulumi.Int(2),
//				EnableK8Cluster: pulumi.Bool(true),
//				AddressPrefix:   pulumi.String("10.60.0.0/16"),
//				SubnetCidr:      pulumi.Int(24),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewInfrastructureSetting(ctx, "nonprod_settings", &duplocloud.InfrastructureSettingArgs{
//				InfraName: nonprodInfra.InfraName,
//				Settings: duplocloud.InfrastructureSettingSettingArray{
//					&duplocloud.InfrastructureSettingSettingArgs{
//						Key:   pulumi.String("EnableClusterAutoscaler"),
//						Value: pulumi.String("true"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a DuploCloud infrastructure named 'nonprod' in the us-west-2 region, with a VPC CIDR of 10.60.0.0/16, a subnet mask of 24, and an EKS cluster enabled with an autoscaler, ingress controller, and Secrets Store CSI Driver
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			nonprodInfra, err := duplocloud.NewInfrastructure(ctx, "nonprod_infra", &duplocloud.InfrastructureArgs{
//				InfraName:       pulumi.String("nonprod"),
//				Cloud:           pulumi.Int(0),
//				Region:          pulumi.String("us-west-2"),
//				Azcount:         pulumi.Int(2),
//				EnableK8Cluster: pulumi.Bool(true),
//				AddressPrefix:   pulumi.String("10.60.0.0/16"),
//				SubnetCidr:      pulumi.Int(24),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewInfrastructureSetting(ctx, "nonprod_settings", &duplocloud.InfrastructureSettingArgs{
//				InfraName: nonprodInfra.InfraName,
//				Settings: duplocloud.InfrastructureSettingSettingArray{
//					&duplocloud.InfrastructureSettingSettingArgs{
//						Key:   pulumi.String("EnableClusterAutoscaler"),
//						Value: pulumi.String("true"),
//					},
//					&duplocloud.InfrastructureSettingSettingArgs{
//						Key:   pulumi.String("EnableAwsAlbIngress"),
//						Value: pulumi.String("true"),
//					},
//					&duplocloud.InfrastructureSettingSettingArgs{
//						Key:   pulumi.String("EnableSecretCsiDriver"),
//						Value: pulumi.String("true"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a DuploCloud infrastructure named 'prod' in the us-east-2 region, with a VPC CIDR of 10.50.0.0/16, a subnet mask of 22, and ECS cluster enabled
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewInfrastructure(ctx, "infra", &duplocloud.InfrastructureArgs{
//				InfraName:        pulumi.String("prod"),
//				Cloud:            pulumi.Int(0),
//				Region:           pulumi.String("us-east-2"),
//				Azcount:          pulumi.Int(2),
//				EnableEcsCluster: pulumi.Bool(true),
//				AddressPrefix:    pulumi.String("10.50.0.0/16"),
//				SubnetCidr:       pulumi.Int(22),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a DuploCloud infrastructure named 'prod' in the us-east-2 region, with a VPC CIDR of 10.49.0.0/16, a subnet mask of 24, and EKS, ECS cluster enabled
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewInfrastructure(ctx, "infra", &duplocloud.InfrastructureArgs{
//				InfraName:        pulumi.String("prod"),
//				Cloud:            pulumi.Int(0),
//				Region:           pulumi.String("us-east-2"),
//				Azcount:          pulumi.Int(2),
//				EnableK8Cluster:  pulumi.Bool(true),
//				EnableEcsCluster: pulumi.Bool(true),
//				AddressPrefix:    pulumi.String("10.49.0.0/16"),
//				SubnetCidr:       pulumi.Int(24),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing infrastructure
//
//   - *NAME* is the infrastructure name
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/infrastructure:Infrastructure myinfra v2/admin/InfrastructureV2/*NAME*
// ```
type Infrastructure struct {
	pulumi.CustomResourceState

	// The cloud account ID.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The CIDR to use for the VPC or VNet.
	AddressPrefix pulumi.StringOutput `pulumi:"addressPrefix"`
	// A complete list of configuration settings for this infrastructure, even ones not being managed by this resource.
	AllSettings InfrastructureAllSettingArrayOutput `pulumi:"allSettings"`
	// The number of availability zones. Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.
	Azcount pulumi.IntPtrOutput `pulumi:"azcount"`
	// The numerical index of cloud provider to use for the infrastructure. Should be one of: - `0` : AWS - `2` : Azure - `3` :
	// Google
	Cloud pulumi.IntPtrOutput `pulumi:"cloud"`
	// cluster IP CIDR defines a private IP address range used for internal Kubernetes services.
	ClusterIpCidr pulumi.StringOutput `pulumi:"clusterIpCidr"`
	// A list of configuration settings to apply on creation, expressed as key / value pairs.
	//
	// Deprecated: The customData argument is only applied on creation, and is deprecated in favor of the settings argument.
	CustomDatas InfrastructureCustomDataArrayOutput `pulumi:"customDatas"`
	// Whether or not this resource should delete any settings not specified by this resource. **WARNING:** It is not
	// recommended to change the default value of `false`.
	DeleteUnspecifiedSettings pulumi.BoolPtrOutput `pulumi:"deleteUnspecifiedSettings"`
	// Whether or not to enable container insights for an ECS cluster.
	EnableContainerInsights pulumi.BoolOutput `pulumi:"enableContainerInsights"`
	// Whether or not to provision an ECS cluster.
	EnableEcsCluster pulumi.BoolOutput `pulumi:"enableEcsCluster"`
	// Whether or not to provision a kubernetes cluster.
	EnableK8Cluster pulumi.BoolOutput `pulumi:"enableK8Cluster"`
	// The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.
	InfraName pulumi.StringOutput `pulumi:"infraName"`
	// Whether or not to make GKE with autopilot.
	IsServerlessKubernetes pulumi.BoolOutput `pulumi:"isServerlessKubernetes"`
	// The private subnets for the VPC or VNet.
	PrivateSubnets InfrastructurePrivateSubnetArrayOutput `pulumi:"privateSubnets"`
	// The public subnets for the VPC or VNet.
	PublicSubnets InfrastructurePublicSubnetArrayOutput `pulumi:"publicSubnets"`
	// The cloud provider region. The Duplo portal must have already been configured to support this region.
	Region pulumi.StringOutput `pulumi:"region"`
	// The security groups for the VPC or VNet.
	SecurityGroups InfrastructureSecurityGroupArrayOutput `pulumi:"securityGroups"`
	// A list of configuration settings to manage, expressed as key / value pairs.
	Settings InfrastructureSettingTypeArrayOutput `pulumi:"settings"`
	// A list of configuration setting key being managed by this resource.
	SpecifiedSettings pulumi.StringArrayOutput `pulumi:"specifiedSettings"`
	// The status of the infrastructure.
	Status pulumi.StringOutput `pulumi:"status"`
	// The address prefixe to use for the subnet. This is applicable only for Azure
	SubnetAddressPrefix pulumi.StringOutput `pulumi:"subnetAddressPrefix"`
	// The CIDR subnet size (in bits) for the automatically created subnets. This is applicable only for AWS.
	SubnetCidr pulumi.IntPtrOutput `pulumi:"subnetCidr"`
	// The full name of the subnet. This is applicable only for Azure.
	SubnetFullname pulumi.StringOutput `pulumi:"subnetFullname"`
	// The name of the subnet. This is applicable only for Azure.
	SubnetName pulumi.StringOutput `pulumi:"subnetName"`
	// The VPC or VNet ID.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The VPC or VNet name.
	VpcName pulumi.StringOutput `pulumi:"vpcName"`
	// Whether or not to wait until Duplo has destroyed the infrastructure.
	WaitUntilDeleted pulumi.BoolPtrOutput `pulumi:"waitUntilDeleted"`
}

// NewInfrastructure registers a new resource with the given unique name, arguments, and options.
func NewInfrastructure(ctx *pulumi.Context,
	name string, args *InfrastructureArgs, opts ...pulumi.ResourceOption) (*Infrastructure, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressPrefix == nil {
		return nil, errors.New("invalid value for required argument 'AddressPrefix'")
	}
	if args.EnableK8Cluster == nil {
		return nil, errors.New("invalid value for required argument 'EnableK8Cluster'")
	}
	if args.InfraName == nil {
		return nil, errors.New("invalid value for required argument 'InfraName'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Infrastructure
	err := ctx.RegisterResource("duplocloud:index/infrastructure:Infrastructure", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInfrastructure gets an existing Infrastructure resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInfrastructure(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InfrastructureState, opts ...pulumi.ResourceOption) (*Infrastructure, error) {
	var resource Infrastructure
	err := ctx.ReadResource("duplocloud:index/infrastructure:Infrastructure", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Infrastructure resources.
type infrastructureState struct {
	// The cloud account ID.
	AccountId *string `pulumi:"accountId"`
	// The CIDR to use for the VPC or VNet.
	AddressPrefix *string `pulumi:"addressPrefix"`
	// A complete list of configuration settings for this infrastructure, even ones not being managed by this resource.
	AllSettings []InfrastructureAllSetting `pulumi:"allSettings"`
	// The number of availability zones. Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.
	Azcount *int `pulumi:"azcount"`
	// The numerical index of cloud provider to use for the infrastructure. Should be one of: - `0` : AWS - `2` : Azure - `3` :
	// Google
	Cloud *int `pulumi:"cloud"`
	// cluster IP CIDR defines a private IP address range used for internal Kubernetes services.
	ClusterIpCidr *string `pulumi:"clusterIpCidr"`
	// A list of configuration settings to apply on creation, expressed as key / value pairs.
	//
	// Deprecated: The customData argument is only applied on creation, and is deprecated in favor of the settings argument.
	CustomDatas []InfrastructureCustomData `pulumi:"customDatas"`
	// Whether or not this resource should delete any settings not specified by this resource. **WARNING:** It is not
	// recommended to change the default value of `false`.
	DeleteUnspecifiedSettings *bool `pulumi:"deleteUnspecifiedSettings"`
	// Whether or not to enable container insights for an ECS cluster.
	EnableContainerInsights *bool `pulumi:"enableContainerInsights"`
	// Whether or not to provision an ECS cluster.
	EnableEcsCluster *bool `pulumi:"enableEcsCluster"`
	// Whether or not to provision a kubernetes cluster.
	EnableK8Cluster *bool `pulumi:"enableK8Cluster"`
	// The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.
	InfraName *string `pulumi:"infraName"`
	// Whether or not to make GKE with autopilot.
	IsServerlessKubernetes *bool `pulumi:"isServerlessKubernetes"`
	// The private subnets for the VPC or VNet.
	PrivateSubnets []InfrastructurePrivateSubnet `pulumi:"privateSubnets"`
	// The public subnets for the VPC or VNet.
	PublicSubnets []InfrastructurePublicSubnet `pulumi:"publicSubnets"`
	// The cloud provider region. The Duplo portal must have already been configured to support this region.
	Region *string `pulumi:"region"`
	// The security groups for the VPC or VNet.
	SecurityGroups []InfrastructureSecurityGroup `pulumi:"securityGroups"`
	// A list of configuration settings to manage, expressed as key / value pairs.
	Settings []InfrastructureSettingType `pulumi:"settings"`
	// A list of configuration setting key being managed by this resource.
	SpecifiedSettings []string `pulumi:"specifiedSettings"`
	// The status of the infrastructure.
	Status *string `pulumi:"status"`
	// The address prefixe to use for the subnet. This is applicable only for Azure
	SubnetAddressPrefix *string `pulumi:"subnetAddressPrefix"`
	// The CIDR subnet size (in bits) for the automatically created subnets. This is applicable only for AWS.
	SubnetCidr *int `pulumi:"subnetCidr"`
	// The full name of the subnet. This is applicable only for Azure.
	SubnetFullname *string `pulumi:"subnetFullname"`
	// The name of the subnet. This is applicable only for Azure.
	SubnetName *string `pulumi:"subnetName"`
	// The VPC or VNet ID.
	VpcId *string `pulumi:"vpcId"`
	// The VPC or VNet name.
	VpcName *string `pulumi:"vpcName"`
	// Whether or not to wait until Duplo has destroyed the infrastructure.
	WaitUntilDeleted *bool `pulumi:"waitUntilDeleted"`
}

type InfrastructureState struct {
	// The cloud account ID.
	AccountId pulumi.StringPtrInput
	// The CIDR to use for the VPC or VNet.
	AddressPrefix pulumi.StringPtrInput
	// A complete list of configuration settings for this infrastructure, even ones not being managed by this resource.
	AllSettings InfrastructureAllSettingArrayInput
	// The number of availability zones. Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.
	Azcount pulumi.IntPtrInput
	// The numerical index of cloud provider to use for the infrastructure. Should be one of: - `0` : AWS - `2` : Azure - `3` :
	// Google
	Cloud pulumi.IntPtrInput
	// cluster IP CIDR defines a private IP address range used for internal Kubernetes services.
	ClusterIpCidr pulumi.StringPtrInput
	// A list of configuration settings to apply on creation, expressed as key / value pairs.
	//
	// Deprecated: The customData argument is only applied on creation, and is deprecated in favor of the settings argument.
	CustomDatas InfrastructureCustomDataArrayInput
	// Whether or not this resource should delete any settings not specified by this resource. **WARNING:** It is not
	// recommended to change the default value of `false`.
	DeleteUnspecifiedSettings pulumi.BoolPtrInput
	// Whether or not to enable container insights for an ECS cluster.
	EnableContainerInsights pulumi.BoolPtrInput
	// Whether or not to provision an ECS cluster.
	EnableEcsCluster pulumi.BoolPtrInput
	// Whether or not to provision a kubernetes cluster.
	EnableK8Cluster pulumi.BoolPtrInput
	// The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.
	InfraName pulumi.StringPtrInput
	// Whether or not to make GKE with autopilot.
	IsServerlessKubernetes pulumi.BoolPtrInput
	// The private subnets for the VPC or VNet.
	PrivateSubnets InfrastructurePrivateSubnetArrayInput
	// The public subnets for the VPC or VNet.
	PublicSubnets InfrastructurePublicSubnetArrayInput
	// The cloud provider region. The Duplo portal must have already been configured to support this region.
	Region pulumi.StringPtrInput
	// The security groups for the VPC or VNet.
	SecurityGroups InfrastructureSecurityGroupArrayInput
	// A list of configuration settings to manage, expressed as key / value pairs.
	Settings InfrastructureSettingTypeArrayInput
	// A list of configuration setting key being managed by this resource.
	SpecifiedSettings pulumi.StringArrayInput
	// The status of the infrastructure.
	Status pulumi.StringPtrInput
	// The address prefixe to use for the subnet. This is applicable only for Azure
	SubnetAddressPrefix pulumi.StringPtrInput
	// The CIDR subnet size (in bits) for the automatically created subnets. This is applicable only for AWS.
	SubnetCidr pulumi.IntPtrInput
	// The full name of the subnet. This is applicable only for Azure.
	SubnetFullname pulumi.StringPtrInput
	// The name of the subnet. This is applicable only for Azure.
	SubnetName pulumi.StringPtrInput
	// The VPC or VNet ID.
	VpcId pulumi.StringPtrInput
	// The VPC or VNet name.
	VpcName pulumi.StringPtrInput
	// Whether or not to wait until Duplo has destroyed the infrastructure.
	WaitUntilDeleted pulumi.BoolPtrInput
}

func (InfrastructureState) ElementType() reflect.Type {
	return reflect.TypeOf((*infrastructureState)(nil)).Elem()
}

type infrastructureArgs struct {
	// The cloud account ID.
	AccountId *string `pulumi:"accountId"`
	// The CIDR to use for the VPC or VNet.
	AddressPrefix string `pulumi:"addressPrefix"`
	// The number of availability zones. Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.
	Azcount *int `pulumi:"azcount"`
	// The numerical index of cloud provider to use for the infrastructure. Should be one of: - `0` : AWS - `2` : Azure - `3` :
	// Google
	Cloud *int `pulumi:"cloud"`
	// cluster IP CIDR defines a private IP address range used for internal Kubernetes services.
	ClusterIpCidr *string `pulumi:"clusterIpCidr"`
	// A list of configuration settings to apply on creation, expressed as key / value pairs.
	//
	// Deprecated: The customData argument is only applied on creation, and is deprecated in favor of the settings argument.
	CustomDatas []InfrastructureCustomData `pulumi:"customDatas"`
	// Whether or not this resource should delete any settings not specified by this resource. **WARNING:** It is not
	// recommended to change the default value of `false`.
	DeleteUnspecifiedSettings *bool `pulumi:"deleteUnspecifiedSettings"`
	// Whether or not to enable container insights for an ECS cluster.
	EnableContainerInsights *bool `pulumi:"enableContainerInsights"`
	// Whether or not to provision an ECS cluster.
	EnableEcsCluster *bool `pulumi:"enableEcsCluster"`
	// Whether or not to provision a kubernetes cluster.
	EnableK8Cluster bool `pulumi:"enableK8Cluster"`
	// The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.
	InfraName string `pulumi:"infraName"`
	// Whether or not to make GKE with autopilot.
	IsServerlessKubernetes *bool `pulumi:"isServerlessKubernetes"`
	// The cloud provider region. The Duplo portal must have already been configured to support this region.
	Region string `pulumi:"region"`
	// A list of configuration settings to manage, expressed as key / value pairs.
	Settings []InfrastructureSettingType `pulumi:"settings"`
	// The address prefixe to use for the subnet. This is applicable only for Azure
	SubnetAddressPrefix *string `pulumi:"subnetAddressPrefix"`
	// The CIDR subnet size (in bits) for the automatically created subnets. This is applicable only for AWS.
	SubnetCidr *int `pulumi:"subnetCidr"`
	// The name of the subnet. This is applicable only for Azure.
	SubnetName *string `pulumi:"subnetName"`
	// Whether or not to wait until Duplo has destroyed the infrastructure.
	WaitUntilDeleted *bool `pulumi:"waitUntilDeleted"`
}

// The set of arguments for constructing a Infrastructure resource.
type InfrastructureArgs struct {
	// The cloud account ID.
	AccountId pulumi.StringPtrInput
	// The CIDR to use for the VPC or VNet.
	AddressPrefix pulumi.StringInput
	// The number of availability zones. Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.
	Azcount pulumi.IntPtrInput
	// The numerical index of cloud provider to use for the infrastructure. Should be one of: - `0` : AWS - `2` : Azure - `3` :
	// Google
	Cloud pulumi.IntPtrInput
	// cluster IP CIDR defines a private IP address range used for internal Kubernetes services.
	ClusterIpCidr pulumi.StringPtrInput
	// A list of configuration settings to apply on creation, expressed as key / value pairs.
	//
	// Deprecated: The customData argument is only applied on creation, and is deprecated in favor of the settings argument.
	CustomDatas InfrastructureCustomDataArrayInput
	// Whether or not this resource should delete any settings not specified by this resource. **WARNING:** It is not
	// recommended to change the default value of `false`.
	DeleteUnspecifiedSettings pulumi.BoolPtrInput
	// Whether or not to enable container insights for an ECS cluster.
	EnableContainerInsights pulumi.BoolPtrInput
	// Whether or not to provision an ECS cluster.
	EnableEcsCluster pulumi.BoolPtrInput
	// Whether or not to provision a kubernetes cluster.
	EnableK8Cluster pulumi.BoolInput
	// The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.
	InfraName pulumi.StringInput
	// Whether or not to make GKE with autopilot.
	IsServerlessKubernetes pulumi.BoolPtrInput
	// The cloud provider region. The Duplo portal must have already been configured to support this region.
	Region pulumi.StringInput
	// A list of configuration settings to manage, expressed as key / value pairs.
	Settings InfrastructureSettingTypeArrayInput
	// The address prefixe to use for the subnet. This is applicable only for Azure
	SubnetAddressPrefix pulumi.StringPtrInput
	// The CIDR subnet size (in bits) for the automatically created subnets. This is applicable only for AWS.
	SubnetCidr pulumi.IntPtrInput
	// The name of the subnet. This is applicable only for Azure.
	SubnetName pulumi.StringPtrInput
	// Whether or not to wait until Duplo has destroyed the infrastructure.
	WaitUntilDeleted pulumi.BoolPtrInput
}

func (InfrastructureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*infrastructureArgs)(nil)).Elem()
}

type InfrastructureInput interface {
	pulumi.Input

	ToInfrastructureOutput() InfrastructureOutput
	ToInfrastructureOutputWithContext(ctx context.Context) InfrastructureOutput
}

func (*Infrastructure) ElementType() reflect.Type {
	return reflect.TypeOf((**Infrastructure)(nil)).Elem()
}

func (i *Infrastructure) ToInfrastructureOutput() InfrastructureOutput {
	return i.ToInfrastructureOutputWithContext(context.Background())
}

func (i *Infrastructure) ToInfrastructureOutputWithContext(ctx context.Context) InfrastructureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureOutput)
}

// InfrastructureArrayInput is an input type that accepts InfrastructureArray and InfrastructureArrayOutput values.
// You can construct a concrete instance of `InfrastructureArrayInput` via:
//
//	InfrastructureArray{ InfrastructureArgs{...} }
type InfrastructureArrayInput interface {
	pulumi.Input

	ToInfrastructureArrayOutput() InfrastructureArrayOutput
	ToInfrastructureArrayOutputWithContext(context.Context) InfrastructureArrayOutput
}

type InfrastructureArray []InfrastructureInput

func (InfrastructureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Infrastructure)(nil)).Elem()
}

func (i InfrastructureArray) ToInfrastructureArrayOutput() InfrastructureArrayOutput {
	return i.ToInfrastructureArrayOutputWithContext(context.Background())
}

func (i InfrastructureArray) ToInfrastructureArrayOutputWithContext(ctx context.Context) InfrastructureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureArrayOutput)
}

// InfrastructureMapInput is an input type that accepts InfrastructureMap and InfrastructureMapOutput values.
// You can construct a concrete instance of `InfrastructureMapInput` via:
//
//	InfrastructureMap{ "key": InfrastructureArgs{...} }
type InfrastructureMapInput interface {
	pulumi.Input

	ToInfrastructureMapOutput() InfrastructureMapOutput
	ToInfrastructureMapOutputWithContext(context.Context) InfrastructureMapOutput
}

type InfrastructureMap map[string]InfrastructureInput

func (InfrastructureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Infrastructure)(nil)).Elem()
}

func (i InfrastructureMap) ToInfrastructureMapOutput() InfrastructureMapOutput {
	return i.ToInfrastructureMapOutputWithContext(context.Background())
}

func (i InfrastructureMap) ToInfrastructureMapOutputWithContext(ctx context.Context) InfrastructureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureMapOutput)
}

type InfrastructureOutput struct{ *pulumi.OutputState }

func (InfrastructureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Infrastructure)(nil)).Elem()
}

func (o InfrastructureOutput) ToInfrastructureOutput() InfrastructureOutput {
	return o
}

func (o InfrastructureOutput) ToInfrastructureOutputWithContext(ctx context.Context) InfrastructureOutput {
	return o
}

// The cloud account ID.
func (o InfrastructureOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The CIDR to use for the VPC or VNet.
func (o InfrastructureOutput) AddressPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.AddressPrefix }).(pulumi.StringOutput)
}

// A complete list of configuration settings for this infrastructure, even ones not being managed by this resource.
func (o InfrastructureOutput) AllSettings() InfrastructureAllSettingArrayOutput {
	return o.ApplyT(func(v *Infrastructure) InfrastructureAllSettingArrayOutput { return v.AllSettings }).(InfrastructureAllSettingArrayOutput)
}

// The number of availability zones. Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.
func (o InfrastructureOutput) Azcount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.IntPtrOutput { return v.Azcount }).(pulumi.IntPtrOutput)
}

// The numerical index of cloud provider to use for the infrastructure. Should be one of: - `0` : AWS - `2` : Azure - `3` :
// Google
func (o InfrastructureOutput) Cloud() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.IntPtrOutput { return v.Cloud }).(pulumi.IntPtrOutput)
}

// cluster IP CIDR defines a private IP address range used for internal Kubernetes services.
func (o InfrastructureOutput) ClusterIpCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.ClusterIpCidr }).(pulumi.StringOutput)
}

// A list of configuration settings to apply on creation, expressed as key / value pairs.
//
// Deprecated: The customData argument is only applied on creation, and is deprecated in favor of the settings argument.
func (o InfrastructureOutput) CustomDatas() InfrastructureCustomDataArrayOutput {
	return o.ApplyT(func(v *Infrastructure) InfrastructureCustomDataArrayOutput { return v.CustomDatas }).(InfrastructureCustomDataArrayOutput)
}

// Whether or not this resource should delete any settings not specified by this resource. **WARNING:** It is not
// recommended to change the default value of `false`.
func (o InfrastructureOutput) DeleteUnspecifiedSettings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.BoolPtrOutput { return v.DeleteUnspecifiedSettings }).(pulumi.BoolPtrOutput)
}

// Whether or not to enable container insights for an ECS cluster.
func (o InfrastructureOutput) EnableContainerInsights() pulumi.BoolOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.BoolOutput { return v.EnableContainerInsights }).(pulumi.BoolOutput)
}

// Whether or not to provision an ECS cluster.
func (o InfrastructureOutput) EnableEcsCluster() pulumi.BoolOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.BoolOutput { return v.EnableEcsCluster }).(pulumi.BoolOutput)
}

// Whether or not to provision a kubernetes cluster.
func (o InfrastructureOutput) EnableK8Cluster() pulumi.BoolOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.BoolOutput { return v.EnableK8Cluster }).(pulumi.BoolOutput)
}

// The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.
func (o InfrastructureOutput) InfraName() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.InfraName }).(pulumi.StringOutput)
}

// Whether or not to make GKE with autopilot.
func (o InfrastructureOutput) IsServerlessKubernetes() pulumi.BoolOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.BoolOutput { return v.IsServerlessKubernetes }).(pulumi.BoolOutput)
}

// The private subnets for the VPC or VNet.
func (o InfrastructureOutput) PrivateSubnets() InfrastructurePrivateSubnetArrayOutput {
	return o.ApplyT(func(v *Infrastructure) InfrastructurePrivateSubnetArrayOutput { return v.PrivateSubnets }).(InfrastructurePrivateSubnetArrayOutput)
}

// The public subnets for the VPC or VNet.
func (o InfrastructureOutput) PublicSubnets() InfrastructurePublicSubnetArrayOutput {
	return o.ApplyT(func(v *Infrastructure) InfrastructurePublicSubnetArrayOutput { return v.PublicSubnets }).(InfrastructurePublicSubnetArrayOutput)
}

// The cloud provider region. The Duplo portal must have already been configured to support this region.
func (o InfrastructureOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The security groups for the VPC or VNet.
func (o InfrastructureOutput) SecurityGroups() InfrastructureSecurityGroupArrayOutput {
	return o.ApplyT(func(v *Infrastructure) InfrastructureSecurityGroupArrayOutput { return v.SecurityGroups }).(InfrastructureSecurityGroupArrayOutput)
}

// A list of configuration settings to manage, expressed as key / value pairs.
func (o InfrastructureOutput) Settings() InfrastructureSettingTypeArrayOutput {
	return o.ApplyT(func(v *Infrastructure) InfrastructureSettingTypeArrayOutput { return v.Settings }).(InfrastructureSettingTypeArrayOutput)
}

// A list of configuration setting key being managed by this resource.
func (o InfrastructureOutput) SpecifiedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringArrayOutput { return v.SpecifiedSettings }).(pulumi.StringArrayOutput)
}

// The status of the infrastructure.
func (o InfrastructureOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The address prefixe to use for the subnet. This is applicable only for Azure
func (o InfrastructureOutput) SubnetAddressPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.SubnetAddressPrefix }).(pulumi.StringOutput)
}

// The CIDR subnet size (in bits) for the automatically created subnets. This is applicable only for AWS.
func (o InfrastructureOutput) SubnetCidr() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.IntPtrOutput { return v.SubnetCidr }).(pulumi.IntPtrOutput)
}

// The full name of the subnet. This is applicable only for Azure.
func (o InfrastructureOutput) SubnetFullname() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.SubnetFullname }).(pulumi.StringOutput)
}

// The name of the subnet. This is applicable only for Azure.
func (o InfrastructureOutput) SubnetName() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.SubnetName }).(pulumi.StringOutput)
}

// The VPC or VNet ID.
func (o InfrastructureOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The VPC or VNet name.
func (o InfrastructureOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.VpcName }).(pulumi.StringOutput)
}

// Whether or not to wait until Duplo has destroyed the infrastructure.
func (o InfrastructureOutput) WaitUntilDeleted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.BoolPtrOutput { return v.WaitUntilDeleted }).(pulumi.BoolPtrOutput)
}

type InfrastructureArrayOutput struct{ *pulumi.OutputState }

func (InfrastructureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Infrastructure)(nil)).Elem()
}

func (o InfrastructureArrayOutput) ToInfrastructureArrayOutput() InfrastructureArrayOutput {
	return o
}

func (o InfrastructureArrayOutput) ToInfrastructureArrayOutputWithContext(ctx context.Context) InfrastructureArrayOutput {
	return o
}

func (o InfrastructureArrayOutput) Index(i pulumi.IntInput) InfrastructureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Infrastructure {
		return vs[0].([]*Infrastructure)[vs[1].(int)]
	}).(InfrastructureOutput)
}

type InfrastructureMapOutput struct{ *pulumi.OutputState }

func (InfrastructureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Infrastructure)(nil)).Elem()
}

func (o InfrastructureMapOutput) ToInfrastructureMapOutput() InfrastructureMapOutput {
	return o
}

func (o InfrastructureMapOutput) ToInfrastructureMapOutputWithContext(ctx context.Context) InfrastructureMapOutput {
	return o
}

func (o InfrastructureMapOutput) MapIndex(k pulumi.StringInput) InfrastructureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Infrastructure {
		return vs[0].(map[string]*Infrastructure)[vs[1].(string)]
	}).(InfrastructureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureInput)(nil)).Elem(), &Infrastructure{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureArrayInput)(nil)).Elem(), InfrastructureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureMapInput)(nil)).Elem(), InfrastructureMap{})
	pulumi.RegisterOutputType(InfrastructureOutput{})
	pulumi.RegisterOutputType(InfrastructureArrayOutput{})
	pulumi.RegisterOutputType(InfrastructureMapOutput{})
}
