// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `DuploServiceLbconfigs` manages additional configuration for a container-based service in Duplo.
//
// NOTE: For Amazon ECS services, see the `EcsService` resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			// Deploy NGINX using Duplo's native container agent, and configure additional load balancer settings.
//			myservice, err := duplocloud.NewDuploService(ctx, "myservice", &duplocloud.DuploServiceArgs{
//				TenantId:      myapp.TenantId,
//				Name:          pulumi.String("myservice"),
//				AgentPlatform: pulumi.Int(0),
//				DockerImage:   pulumi.String("nginx:latest"),
//				Replicas:      pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			myserviceDuploServiceLbconfigs, err := duplocloud.NewDuploServiceLbconfigs(ctx, "myservice", &duplocloud.DuploServiceLbconfigsArgs{
//				TenantId:                  myservice.TenantId,
//				ReplicationControllerName: myservice.Name,
//				Lbconfigs: duplocloud.DuploServiceLbconfigsLbconfigArray{
//					&duplocloud.DuploServiceLbconfigsLbconfigArgs{
//						ExternalPort:   pulumi.Int(80),
//						HealthCheckUrl: pulumi.String("/"),
//						IsNative:       pulumi.Bool(false),
//						LbType:         pulumi.Int(1),
//						Port:           pulumi.String("80"),
//						Protocol:       pulumi.String("http"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewDuploServiceParams(ctx, "myservice", &duplocloud.DuploServiceParamsArgs{
//				TenantId:                  myserviceDuploServiceLbconfigs.TenantId,
//				ReplicationControllerName: myserviceDuploServiceLbconfigs.ReplicationControllerName,
//				DnsPrfx:                   pulumi.String("myservice"),
//				DropInvalidHeaders:        pulumi.Bool(true),
//				EnableAccessLogs:          pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing service's parameters
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *NAME* is the name of the service
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/duploServiceParams:DuploServiceParams myservice v2/subscriptions/*TENANT_ID*/ReplicationControllerParamsV2/*NAME*
// ```
type DuploServiceParams struct {
	pulumi.CustomResourceState

	// The DNS prefix to assign to this service's load balancer.
	DnsPrfx pulumi.StringOutput `pulumi:"dnsPrfx"`
	// Whether or not to drop invalid HTTP headers received by the load balancer.
	DropInvalidHeaders pulumi.BoolOutput `pulumi:"dropInvalidHeaders"`
	// Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan
	EnableAccessLogs pulumi.BoolOutput `pulumi:"enableAccessLogs"`
	// Whether or not to enable http to https redirection.
	HttpToHttpsRedirect pulumi.BoolOutput `pulumi:"httpToHttpsRedirect"`
	// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
	IdleTimeout pulumi.IntOutput `pulumi:"idleTimeout"`
	// The load balancer ARN.
	LoadBalancerArn pulumi.StringOutput `pulumi:"loadBalancerArn"`
	// The load balancer name.
	LoadBalancerName pulumi.StringOutput `pulumi:"loadBalancerName"`
	// The name of the duplo service.
	ReplicationControllerName pulumi.StringOutput `pulumi:"replicationControllerName"`
	// The GUID of the tenant that hosts the duplo service.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The ARN of a web application firewall to associate this load balancer.
	Webaclid pulumi.StringOutput `pulumi:"webaclid"`
}

// NewDuploServiceParams registers a new resource with the given unique name, arguments, and options.
func NewDuploServiceParams(ctx *pulumi.Context,
	name string, args *DuploServiceParamsArgs, opts ...pulumi.ResourceOption) (*DuploServiceParams, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReplicationControllerName == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationControllerName'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DuploServiceParams
	err := ctx.RegisterResource("duplocloud:index/duploServiceParams:DuploServiceParams", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDuploServiceParams gets an existing DuploServiceParams resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDuploServiceParams(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DuploServiceParamsState, opts ...pulumi.ResourceOption) (*DuploServiceParams, error) {
	var resource DuploServiceParams
	err := ctx.ReadResource("duplocloud:index/duploServiceParams:DuploServiceParams", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DuploServiceParams resources.
type duploServiceParamsState struct {
	// The DNS prefix to assign to this service's load balancer.
	DnsPrfx *string `pulumi:"dnsPrfx"`
	// Whether or not to drop invalid HTTP headers received by the load balancer.
	DropInvalidHeaders *bool `pulumi:"dropInvalidHeaders"`
	// Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan
	EnableAccessLogs *bool `pulumi:"enableAccessLogs"`
	// Whether or not to enable http to https redirection.
	HttpToHttpsRedirect *bool `pulumi:"httpToHttpsRedirect"`
	// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// The load balancer ARN.
	LoadBalancerArn *string `pulumi:"loadBalancerArn"`
	// The load balancer name.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// The name of the duplo service.
	ReplicationControllerName *string `pulumi:"replicationControllerName"`
	// The GUID of the tenant that hosts the duplo service.
	TenantId *string `pulumi:"tenantId"`
	// The ARN of a web application firewall to associate this load balancer.
	Webaclid *string `pulumi:"webaclid"`
}

type DuploServiceParamsState struct {
	// The DNS prefix to assign to this service's load balancer.
	DnsPrfx pulumi.StringPtrInput
	// Whether or not to drop invalid HTTP headers received by the load balancer.
	DropInvalidHeaders pulumi.BoolPtrInput
	// Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan
	EnableAccessLogs pulumi.BoolPtrInput
	// Whether or not to enable http to https redirection.
	HttpToHttpsRedirect pulumi.BoolPtrInput
	// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
	IdleTimeout pulumi.IntPtrInput
	// The load balancer ARN.
	LoadBalancerArn pulumi.StringPtrInput
	// The load balancer name.
	LoadBalancerName pulumi.StringPtrInput
	// The name of the duplo service.
	ReplicationControllerName pulumi.StringPtrInput
	// The GUID of the tenant that hosts the duplo service.
	TenantId pulumi.StringPtrInput
	// The ARN of a web application firewall to associate this load balancer.
	Webaclid pulumi.StringPtrInput
}

func (DuploServiceParamsState) ElementType() reflect.Type {
	return reflect.TypeOf((*duploServiceParamsState)(nil)).Elem()
}

type duploServiceParamsArgs struct {
	// The DNS prefix to assign to this service's load balancer.
	DnsPrfx *string `pulumi:"dnsPrfx"`
	// Whether or not to drop invalid HTTP headers received by the load balancer.
	DropInvalidHeaders *bool `pulumi:"dropInvalidHeaders"`
	// Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan
	EnableAccessLogs *bool `pulumi:"enableAccessLogs"`
	// Whether or not to enable http to https redirection.
	HttpToHttpsRedirect *bool `pulumi:"httpToHttpsRedirect"`
	// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// The name of the duplo service.
	ReplicationControllerName string `pulumi:"replicationControllerName"`
	// The GUID of the tenant that hosts the duplo service.
	TenantId string `pulumi:"tenantId"`
	// The ARN of a web application firewall to associate this load balancer.
	Webaclid *string `pulumi:"webaclid"`
}

// The set of arguments for constructing a DuploServiceParams resource.
type DuploServiceParamsArgs struct {
	// The DNS prefix to assign to this service's load balancer.
	DnsPrfx pulumi.StringPtrInput
	// Whether or not to drop invalid HTTP headers received by the load balancer.
	DropInvalidHeaders pulumi.BoolPtrInput
	// Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan
	EnableAccessLogs pulumi.BoolPtrInput
	// Whether or not to enable http to https redirection.
	HttpToHttpsRedirect pulumi.BoolPtrInput
	// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
	IdleTimeout pulumi.IntPtrInput
	// The name of the duplo service.
	ReplicationControllerName pulumi.StringInput
	// The GUID of the tenant that hosts the duplo service.
	TenantId pulumi.StringInput
	// The ARN of a web application firewall to associate this load balancer.
	Webaclid pulumi.StringPtrInput
}

func (DuploServiceParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*duploServiceParamsArgs)(nil)).Elem()
}

type DuploServiceParamsInput interface {
	pulumi.Input

	ToDuploServiceParamsOutput() DuploServiceParamsOutput
	ToDuploServiceParamsOutputWithContext(ctx context.Context) DuploServiceParamsOutput
}

func (*DuploServiceParams) ElementType() reflect.Type {
	return reflect.TypeOf((**DuploServiceParams)(nil)).Elem()
}

func (i *DuploServiceParams) ToDuploServiceParamsOutput() DuploServiceParamsOutput {
	return i.ToDuploServiceParamsOutputWithContext(context.Background())
}

func (i *DuploServiceParams) ToDuploServiceParamsOutputWithContext(ctx context.Context) DuploServiceParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DuploServiceParamsOutput)
}

// DuploServiceParamsArrayInput is an input type that accepts DuploServiceParamsArray and DuploServiceParamsArrayOutput values.
// You can construct a concrete instance of `DuploServiceParamsArrayInput` via:
//
//	DuploServiceParamsArray{ DuploServiceParamsArgs{...} }
type DuploServiceParamsArrayInput interface {
	pulumi.Input

	ToDuploServiceParamsArrayOutput() DuploServiceParamsArrayOutput
	ToDuploServiceParamsArrayOutputWithContext(context.Context) DuploServiceParamsArrayOutput
}

type DuploServiceParamsArray []DuploServiceParamsInput

func (DuploServiceParamsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DuploServiceParams)(nil)).Elem()
}

func (i DuploServiceParamsArray) ToDuploServiceParamsArrayOutput() DuploServiceParamsArrayOutput {
	return i.ToDuploServiceParamsArrayOutputWithContext(context.Background())
}

func (i DuploServiceParamsArray) ToDuploServiceParamsArrayOutputWithContext(ctx context.Context) DuploServiceParamsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DuploServiceParamsArrayOutput)
}

// DuploServiceParamsMapInput is an input type that accepts DuploServiceParamsMap and DuploServiceParamsMapOutput values.
// You can construct a concrete instance of `DuploServiceParamsMapInput` via:
//
//	DuploServiceParamsMap{ "key": DuploServiceParamsArgs{...} }
type DuploServiceParamsMapInput interface {
	pulumi.Input

	ToDuploServiceParamsMapOutput() DuploServiceParamsMapOutput
	ToDuploServiceParamsMapOutputWithContext(context.Context) DuploServiceParamsMapOutput
}

type DuploServiceParamsMap map[string]DuploServiceParamsInput

func (DuploServiceParamsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DuploServiceParams)(nil)).Elem()
}

func (i DuploServiceParamsMap) ToDuploServiceParamsMapOutput() DuploServiceParamsMapOutput {
	return i.ToDuploServiceParamsMapOutputWithContext(context.Background())
}

func (i DuploServiceParamsMap) ToDuploServiceParamsMapOutputWithContext(ctx context.Context) DuploServiceParamsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DuploServiceParamsMapOutput)
}

type DuploServiceParamsOutput struct{ *pulumi.OutputState }

func (DuploServiceParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DuploServiceParams)(nil)).Elem()
}

func (o DuploServiceParamsOutput) ToDuploServiceParamsOutput() DuploServiceParamsOutput {
	return o
}

func (o DuploServiceParamsOutput) ToDuploServiceParamsOutputWithContext(ctx context.Context) DuploServiceParamsOutput {
	return o
}

// The DNS prefix to assign to this service's load balancer.
func (o DuploServiceParamsOutput) DnsPrfx() pulumi.StringOutput {
	return o.ApplyT(func(v *DuploServiceParams) pulumi.StringOutput { return v.DnsPrfx }).(pulumi.StringOutput)
}

// Whether or not to drop invalid HTTP headers received by the load balancer.
func (o DuploServiceParamsOutput) DropInvalidHeaders() pulumi.BoolOutput {
	return o.ApplyT(func(v *DuploServiceParams) pulumi.BoolOutput { return v.DropInvalidHeaders }).(pulumi.BoolOutput)
}

// Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan
func (o DuploServiceParamsOutput) EnableAccessLogs() pulumi.BoolOutput {
	return o.ApplyT(func(v *DuploServiceParams) pulumi.BoolOutput { return v.EnableAccessLogs }).(pulumi.BoolOutput)
}

// Whether or not to enable http to https redirection.
func (o DuploServiceParamsOutput) HttpToHttpsRedirect() pulumi.BoolOutput {
	return o.ApplyT(func(v *DuploServiceParams) pulumi.BoolOutput { return v.HttpToHttpsRedirect }).(pulumi.BoolOutput)
}

// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
func (o DuploServiceParamsOutput) IdleTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DuploServiceParams) pulumi.IntOutput { return v.IdleTimeout }).(pulumi.IntOutput)
}

// The load balancer ARN.
func (o DuploServiceParamsOutput) LoadBalancerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DuploServiceParams) pulumi.StringOutput { return v.LoadBalancerArn }).(pulumi.StringOutput)
}

// The load balancer name.
func (o DuploServiceParamsOutput) LoadBalancerName() pulumi.StringOutput {
	return o.ApplyT(func(v *DuploServiceParams) pulumi.StringOutput { return v.LoadBalancerName }).(pulumi.StringOutput)
}

// The name of the duplo service.
func (o DuploServiceParamsOutput) ReplicationControllerName() pulumi.StringOutput {
	return o.ApplyT(func(v *DuploServiceParams) pulumi.StringOutput { return v.ReplicationControllerName }).(pulumi.StringOutput)
}

// The GUID of the tenant that hosts the duplo service.
func (o DuploServiceParamsOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *DuploServiceParams) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The ARN of a web application firewall to associate this load balancer.
func (o DuploServiceParamsOutput) Webaclid() pulumi.StringOutput {
	return o.ApplyT(func(v *DuploServiceParams) pulumi.StringOutput { return v.Webaclid }).(pulumi.StringOutput)
}

type DuploServiceParamsArrayOutput struct{ *pulumi.OutputState }

func (DuploServiceParamsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DuploServiceParams)(nil)).Elem()
}

func (o DuploServiceParamsArrayOutput) ToDuploServiceParamsArrayOutput() DuploServiceParamsArrayOutput {
	return o
}

func (o DuploServiceParamsArrayOutput) ToDuploServiceParamsArrayOutputWithContext(ctx context.Context) DuploServiceParamsArrayOutput {
	return o
}

func (o DuploServiceParamsArrayOutput) Index(i pulumi.IntInput) DuploServiceParamsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DuploServiceParams {
		return vs[0].([]*DuploServiceParams)[vs[1].(int)]
	}).(DuploServiceParamsOutput)
}

type DuploServiceParamsMapOutput struct{ *pulumi.OutputState }

func (DuploServiceParamsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DuploServiceParams)(nil)).Elem()
}

func (o DuploServiceParamsMapOutput) ToDuploServiceParamsMapOutput() DuploServiceParamsMapOutput {
	return o
}

func (o DuploServiceParamsMapOutput) ToDuploServiceParamsMapOutputWithContext(ctx context.Context) DuploServiceParamsMapOutput {
	return o
}

func (o DuploServiceParamsMapOutput) MapIndex(k pulumi.StringInput) DuploServiceParamsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DuploServiceParams {
		return vs[0].(map[string]*DuploServiceParams)[vs[1].(string)]
	}).(DuploServiceParamsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DuploServiceParamsInput)(nil)).Elem(), &DuploServiceParams{})
	pulumi.RegisterInputType(reflect.TypeOf((*DuploServiceParamsArrayInput)(nil)).Elem(), DuploServiceParamsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DuploServiceParamsMapInput)(nil)).Elem(), DuploServiceParamsMap{})
	pulumi.RegisterOutputType(DuploServiceParamsOutput{})
	pulumi.RegisterOutputType(DuploServiceParamsArrayOutput{})
	pulumi.RegisterOutputType(DuploServiceParamsMapOutput{})
}
