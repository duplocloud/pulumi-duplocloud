// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `PlanKms` manages the list of kms avaialble to a plan in Duplo.
//
// This resource allows you take control of individual plan kms for a specific plan.
func LookupPlanKmsKey(ctx *pulumi.Context, args *LookupPlanKmsKeyArgs, opts ...pulumi.InvokeOption) (*LookupPlanKmsKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPlanKmsKeyResult
	err := ctx.Invoke("duplocloud:index/getPlanKmsKey:getPlanKmsKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlanKmsKey.
type LookupPlanKmsKeyArgs struct {
	// The ID of the plan to configure.
	PlanId string `pulumi:"planId"`
}

// A collection of values returned by getPlanKmsKey.
type LookupPlanKmsKeyResult struct {
	Datas []GetPlanKmsKeyData `pulumi:"datas"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the plan to configure.
	PlanId string `pulumi:"planId"`
}

func LookupPlanKmsKeyOutput(ctx *pulumi.Context, args LookupPlanKmsKeyOutputArgs, opts ...pulumi.InvokeOption) LookupPlanKmsKeyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPlanKmsKeyResultOutput, error) {
			args := v.(LookupPlanKmsKeyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("duplocloud:index/getPlanKmsKey:getPlanKmsKey", args, LookupPlanKmsKeyResultOutput{}, options).(LookupPlanKmsKeyResultOutput), nil
		}).(LookupPlanKmsKeyResultOutput)
}

// A collection of arguments for invoking getPlanKmsKey.
type LookupPlanKmsKeyOutputArgs struct {
	// The ID of the plan to configure.
	PlanId pulumi.StringInput `pulumi:"planId"`
}

func (LookupPlanKmsKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanKmsKeyArgs)(nil)).Elem()
}

// A collection of values returned by getPlanKmsKey.
type LookupPlanKmsKeyResultOutput struct{ *pulumi.OutputState }

func (LookupPlanKmsKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanKmsKeyResult)(nil)).Elem()
}

func (o LookupPlanKmsKeyResultOutput) ToLookupPlanKmsKeyResultOutput() LookupPlanKmsKeyResultOutput {
	return o
}

func (o LookupPlanKmsKeyResultOutput) ToLookupPlanKmsKeyResultOutputWithContext(ctx context.Context) LookupPlanKmsKeyResultOutput {
	return o
}

func (o LookupPlanKmsKeyResultOutput) Datas() GetPlanKmsKeyDataArrayOutput {
	return o.ApplyT(func(v LookupPlanKmsKeyResult) []GetPlanKmsKeyData { return v.Datas }).(GetPlanKmsKeyDataArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPlanKmsKeyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanKmsKeyResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the plan to configure.
func (o LookupPlanKmsKeyResultOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanKmsKeyResult) string { return v.PlanId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPlanKmsKeyResultOutput{})
}
