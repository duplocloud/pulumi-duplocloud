// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `User` manages a user in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewUser(ctx, "myuser", &duplocloud.UserArgs{
//				Username: pulumi.String("me@abc.com"),
//				Roles: pulumi.StringArray{
//					pulumi.String("User"),
//					pulumi.String("Administrator"),
//					pulumi.String("SignupUser"),
//					pulumi.String("SecurityAdmin"),
//				},
//				IsReadonly:            pulumi.Bool(false),
//				ReallocateVpnAddress:  pulumi.Bool(false),
//				RegenerateVpnPassword: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing duplo user
//
//   - *USERNAME* is the duplo username
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/user:User myuser *USERNAME*
// ```
type User struct {
	pulumi.CustomResourceState

	CurrentSessionToken     pulumi.StringOutput `pulumi:"currentSessionToken"`
	IsConfirmationEmailSent pulumi.BoolOutput   `pulumi:"isConfirmationEmailSent"`
	// Defaults to `false`.
	IsReadonly         pulumi.BoolPtrOutput `pulumi:"isReadonly"`
	IsVpnConfigCreated pulumi.BoolOutput    `pulumi:"isVpnConfigCreated"`
	// Defaults to `false`.
	ReallocateVpnAddress pulumi.BoolPtrOutput `pulumi:"reallocateVpnAddress"`
	// Defaults to `false`.
	RegenerateVpnPassword pulumi.BoolPtrOutput `pulumi:"regenerateVpnPassword"`
	// The list of roles to be assigned to thh created user. Valid values are - `User`, `Administrator`, `SignupUser`, `SecurityAdmin`.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// The unique user name or the email.
	Username    pulumi.StringOutput `pulumi:"username"`
	VpnStaticIp pulumi.StringOutput `pulumi:"vpnStaticIp"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("duplocloud:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("duplocloud:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	CurrentSessionToken     *string `pulumi:"currentSessionToken"`
	IsConfirmationEmailSent *bool   `pulumi:"isConfirmationEmailSent"`
	// Defaults to `false`.
	IsReadonly         *bool `pulumi:"isReadonly"`
	IsVpnConfigCreated *bool `pulumi:"isVpnConfigCreated"`
	// Defaults to `false`.
	ReallocateVpnAddress *bool `pulumi:"reallocateVpnAddress"`
	// Defaults to `false`.
	RegenerateVpnPassword *bool `pulumi:"regenerateVpnPassword"`
	// The list of roles to be assigned to thh created user. Valid values are - `User`, `Administrator`, `SignupUser`, `SecurityAdmin`.
	Roles []string `pulumi:"roles"`
	// The unique user name or the email.
	Username    *string `pulumi:"username"`
	VpnStaticIp *string `pulumi:"vpnStaticIp"`
}

type UserState struct {
	CurrentSessionToken     pulumi.StringPtrInput
	IsConfirmationEmailSent pulumi.BoolPtrInput
	// Defaults to `false`.
	IsReadonly         pulumi.BoolPtrInput
	IsVpnConfigCreated pulumi.BoolPtrInput
	// Defaults to `false`.
	ReallocateVpnAddress pulumi.BoolPtrInput
	// Defaults to `false`.
	RegenerateVpnPassword pulumi.BoolPtrInput
	// The list of roles to be assigned to thh created user. Valid values are - `User`, `Administrator`, `SignupUser`, `SecurityAdmin`.
	Roles pulumi.StringArrayInput
	// The unique user name or the email.
	Username    pulumi.StringPtrInput
	VpnStaticIp pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// Defaults to `false`.
	IsReadonly *bool `pulumi:"isReadonly"`
	// Defaults to `false`.
	ReallocateVpnAddress *bool `pulumi:"reallocateVpnAddress"`
	// Defaults to `false`.
	RegenerateVpnPassword *bool `pulumi:"regenerateVpnPassword"`
	// The list of roles to be assigned to thh created user. Valid values are - `User`, `Administrator`, `SignupUser`, `SecurityAdmin`.
	Roles []string `pulumi:"roles"`
	// The unique user name or the email.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Defaults to `false`.
	IsReadonly pulumi.BoolPtrInput
	// Defaults to `false`.
	ReallocateVpnAddress pulumi.BoolPtrInput
	// Defaults to `false`.
	RegenerateVpnPassword pulumi.BoolPtrInput
	// The list of roles to be assigned to thh created user. Valid values are - `User`, `Administrator`, `SignupUser`, `SecurityAdmin`.
	Roles pulumi.StringArrayInput
	// The unique user name or the email.
	Username pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func (o UserOutput) CurrentSessionToken() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.CurrentSessionToken }).(pulumi.StringOutput)
}

func (o UserOutput) IsConfirmationEmailSent() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.IsConfirmationEmailSent }).(pulumi.BoolOutput)
}

// Defaults to `false`.
func (o UserOutput) IsReadonly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.IsReadonly }).(pulumi.BoolPtrOutput)
}

func (o UserOutput) IsVpnConfigCreated() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.IsVpnConfigCreated }).(pulumi.BoolOutput)
}

// Defaults to `false`.
func (o UserOutput) ReallocateVpnAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.ReallocateVpnAddress }).(pulumi.BoolPtrOutput)
}

// Defaults to `false`.
func (o UserOutput) RegenerateVpnPassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.RegenerateVpnPassword }).(pulumi.BoolPtrOutput)
}

// The list of roles to be assigned to thh created user. Valid values are - `User`, `Administrator`, `SignupUser`, `SecurityAdmin`.
func (o UserOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *User) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

// The unique user name or the email.
func (o UserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

func (o UserOutput) VpnStaticIp() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.VpnStaticIp }).(pulumi.StringOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
