// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupK8Secret(ctx *pulumi.Context, args *LookupK8SecretArgs, opts ...pulumi.InvokeOption) (*LookupK8SecretResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupK8SecretResult
	err := ctx.Invoke("duplocloud:index/getK8Secret:getK8Secret", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getK8Secret.
type LookupK8SecretArgs struct {
	// The name of the secret.
	SecretName string `pulumi:"secretName"`
	// The GUID of the tenant that the secret will be created in.
	TenantId string `pulumi:"tenantId"`
}

// A collection of values returned by getK8Secret.
type LookupK8SecretResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Annotations for the secret
	SecretAnnotations map[string]string `pulumi:"secretAnnotations"`
	// A JSON encoded string representing the secret metadata. You can use the `jsonencode()` function to convert map or object data, if needed. You can use the `jsondecode()` function to read data.
	SecretData string `pulumi:"secretData"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) the secret
	SecretLabels map[string]string `pulumi:"secretLabels"`
	// The name of the secret.
	SecretName string `pulumi:"secretName"`
	// The type of the secret.  Usually `"Opaque"`.
	SecretType    string `pulumi:"secretType"`
	SecretVersion string `pulumi:"secretVersion"`
	// The GUID of the tenant that the secret will be created in.
	TenantId string `pulumi:"tenantId"`
}

func LookupK8SecretOutput(ctx *pulumi.Context, args LookupK8SecretOutputArgs, opts ...pulumi.InvokeOption) LookupK8SecretResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupK8SecretResultOutput, error) {
			args := v.(LookupK8SecretArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("duplocloud:index/getK8Secret:getK8Secret", args, LookupK8SecretResultOutput{}, options).(LookupK8SecretResultOutput), nil
		}).(LookupK8SecretResultOutput)
}

// A collection of arguments for invoking getK8Secret.
type LookupK8SecretOutputArgs struct {
	// The name of the secret.
	SecretName pulumi.StringInput `pulumi:"secretName"`
	// The GUID of the tenant that the secret will be created in.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (LookupK8SecretOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupK8SecretArgs)(nil)).Elem()
}

// A collection of values returned by getK8Secret.
type LookupK8SecretResultOutput struct{ *pulumi.OutputState }

func (LookupK8SecretResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupK8SecretResult)(nil)).Elem()
}

func (o LookupK8SecretResultOutput) ToLookupK8SecretResultOutput() LookupK8SecretResultOutput {
	return o
}

func (o LookupK8SecretResultOutput) ToLookupK8SecretResultOutputWithContext(ctx context.Context) LookupK8SecretResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupK8SecretResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupK8SecretResult) string { return v.Id }).(pulumi.StringOutput)
}

// Annotations for the secret
func (o LookupK8SecretResultOutput) SecretAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupK8SecretResult) map[string]string { return v.SecretAnnotations }).(pulumi.StringMapOutput)
}

// A JSON encoded string representing the secret metadata. You can use the `jsonencode()` function to convert map or object data, if needed. You can use the `jsondecode()` function to read data.
func (o LookupK8SecretResultOutput) SecretData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupK8SecretResult) string { return v.SecretData }).(pulumi.StringOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) the secret
func (o LookupK8SecretResultOutput) SecretLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupK8SecretResult) map[string]string { return v.SecretLabels }).(pulumi.StringMapOutput)
}

// The name of the secret.
func (o LookupK8SecretResultOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupK8SecretResult) string { return v.SecretName }).(pulumi.StringOutput)
}

// The type of the secret.  Usually `"Opaque"`.
func (o LookupK8SecretResultOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupK8SecretResult) string { return v.SecretType }).(pulumi.StringOutput)
}

func (o LookupK8SecretResultOutput) SecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupK8SecretResult) string { return v.SecretVersion }).(pulumi.StringOutput)
}

// The GUID of the tenant that the secret will be created in.
func (o LookupK8SecretResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupK8SecretResult) string { return v.TenantId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupK8SecretResultOutput{})
}
