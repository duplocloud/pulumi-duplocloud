// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `PlanKms` manages the list of kms avaialble to a plan in Duplo.
//
// This resource allows you take control of individual plan kms for a specific plan.
func LookupPlanKms(ctx *pulumi.Context, args *LookupPlanKmsArgs, opts ...pulumi.InvokeOption) (*LookupPlanKmsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPlanKmsResult
	err := ctx.Invoke("duplocloud:index/getPlanKms:getPlanKms", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlanKms.
type LookupPlanKmsArgs struct {
	KmsName string `pulumi:"kmsName"`
	// The ID of the plan to configure.
	PlanId string `pulumi:"planId"`
}

// A collection of values returned by getPlanKms.
type LookupPlanKmsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id      string `pulumi:"id"`
	KmsArn  string `pulumi:"kmsArn"`
	KmsId   string `pulumi:"kmsId"`
	KmsName string `pulumi:"kmsName"`
	// The ID of the plan to configure.
	PlanId string `pulumi:"planId"`
}

func LookupPlanKmsOutput(ctx *pulumi.Context, args LookupPlanKmsOutputArgs, opts ...pulumi.InvokeOption) LookupPlanKmsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPlanKmsResultOutput, error) {
			args := v.(LookupPlanKmsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("duplocloud:index/getPlanKms:getPlanKms", args, LookupPlanKmsResultOutput{}, options).(LookupPlanKmsResultOutput), nil
		}).(LookupPlanKmsResultOutput)
}

// A collection of arguments for invoking getPlanKms.
type LookupPlanKmsOutputArgs struct {
	KmsName pulumi.StringInput `pulumi:"kmsName"`
	// The ID of the plan to configure.
	PlanId pulumi.StringInput `pulumi:"planId"`
}

func (LookupPlanKmsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanKmsArgs)(nil)).Elem()
}

// A collection of values returned by getPlanKms.
type LookupPlanKmsResultOutput struct{ *pulumi.OutputState }

func (LookupPlanKmsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanKmsResult)(nil)).Elem()
}

func (o LookupPlanKmsResultOutput) ToLookupPlanKmsResultOutput() LookupPlanKmsResultOutput {
	return o
}

func (o LookupPlanKmsResultOutput) ToLookupPlanKmsResultOutputWithContext(ctx context.Context) LookupPlanKmsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPlanKmsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanKmsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPlanKmsResultOutput) KmsArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanKmsResult) string { return v.KmsArn }).(pulumi.StringOutput)
}

func (o LookupPlanKmsResultOutput) KmsId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanKmsResult) string { return v.KmsId }).(pulumi.StringOutput)
}

func (o LookupPlanKmsResultOutput) KmsName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanKmsResult) string { return v.KmsName }).(pulumi.StringOutput)
}

// The ID of the plan to configure.
func (o LookupPlanKmsResultOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanKmsResult) string { return v.PlanId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPlanKmsResultOutput{})
}
