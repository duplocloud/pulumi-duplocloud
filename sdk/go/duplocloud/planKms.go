// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `PlanKms` manages the list of kms avaialble to a plan in Duplo.
//
// This resource allows you take control of individual plan kms for a specific plan.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewPlanKms(ctx, "myplan", &duplocloud.PlanKmsArgs{
//				PlanId:  pulumi.String("plan-name"),
//				KmsId:   pulumi.String("kms-id"),
//				KmsArn:  pulumi.String("kms-arn"),
//				KmsName: pulumi.String("kms-name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing WAF instance
//
//   - *PLAN_ID* is the plan name
//
//   - *KMS_NAME* is the name of the KMS
//
// ```sh
// $ pulumi import duplocloud:index/planKms:PlanKms myplan *PLAN_ID*/kms/*KMS_NAME*
// ```
type PlanKms struct {
	pulumi.CustomResourceState

	KmsArn  pulumi.StringOutput `pulumi:"kmsArn"`
	KmsId   pulumi.StringOutput `pulumi:"kmsId"`
	KmsName pulumi.StringOutput `pulumi:"kmsName"`
	// The ID of the plan to configure.
	PlanId pulumi.StringOutput `pulumi:"planId"`
}

// NewPlanKms registers a new resource with the given unique name, arguments, and options.
func NewPlanKms(ctx *pulumi.Context,
	name string, args *PlanKmsArgs, opts ...pulumi.ResourceOption) (*PlanKms, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KmsArn == nil {
		return nil, errors.New("invalid value for required argument 'KmsArn'")
	}
	if args.KmsId == nil {
		return nil, errors.New("invalid value for required argument 'KmsId'")
	}
	if args.KmsName == nil {
		return nil, errors.New("invalid value for required argument 'KmsName'")
	}
	if args.PlanId == nil {
		return nil, errors.New("invalid value for required argument 'PlanId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PlanKms
	err := ctx.RegisterResource("duplocloud:index/planKms:PlanKms", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlanKms gets an existing PlanKms resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlanKms(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlanKmsState, opts ...pulumi.ResourceOption) (*PlanKms, error) {
	var resource PlanKms
	err := ctx.ReadResource("duplocloud:index/planKms:PlanKms", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlanKms resources.
type planKmsState struct {
	KmsArn  *string `pulumi:"kmsArn"`
	KmsId   *string `pulumi:"kmsId"`
	KmsName *string `pulumi:"kmsName"`
	// The ID of the plan to configure.
	PlanId *string `pulumi:"planId"`
}

type PlanKmsState struct {
	KmsArn  pulumi.StringPtrInput
	KmsId   pulumi.StringPtrInput
	KmsName pulumi.StringPtrInput
	// The ID of the plan to configure.
	PlanId pulumi.StringPtrInput
}

func (PlanKmsState) ElementType() reflect.Type {
	return reflect.TypeOf((*planKmsState)(nil)).Elem()
}

type planKmsArgs struct {
	KmsArn  string `pulumi:"kmsArn"`
	KmsId   string `pulumi:"kmsId"`
	KmsName string `pulumi:"kmsName"`
	// The ID of the plan to configure.
	PlanId string `pulumi:"planId"`
}

// The set of arguments for constructing a PlanKms resource.
type PlanKmsArgs struct {
	KmsArn  pulumi.StringInput
	KmsId   pulumi.StringInput
	KmsName pulumi.StringInput
	// The ID of the plan to configure.
	PlanId pulumi.StringInput
}

func (PlanKmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*planKmsArgs)(nil)).Elem()
}

type PlanKmsInput interface {
	pulumi.Input

	ToPlanKmsOutput() PlanKmsOutput
	ToPlanKmsOutputWithContext(ctx context.Context) PlanKmsOutput
}

func (*PlanKms) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanKms)(nil)).Elem()
}

func (i *PlanKms) ToPlanKmsOutput() PlanKmsOutput {
	return i.ToPlanKmsOutputWithContext(context.Background())
}

func (i *PlanKms) ToPlanKmsOutputWithContext(ctx context.Context) PlanKmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanKmsOutput)
}

// PlanKmsArrayInput is an input type that accepts PlanKmsArray and PlanKmsArrayOutput values.
// You can construct a concrete instance of `PlanKmsArrayInput` via:
//
//	PlanKmsArray{ PlanKmsArgs{...} }
type PlanKmsArrayInput interface {
	pulumi.Input

	ToPlanKmsArrayOutput() PlanKmsArrayOutput
	ToPlanKmsArrayOutputWithContext(context.Context) PlanKmsArrayOutput
}

type PlanKmsArray []PlanKmsInput

func (PlanKmsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlanKms)(nil)).Elem()
}

func (i PlanKmsArray) ToPlanKmsArrayOutput() PlanKmsArrayOutput {
	return i.ToPlanKmsArrayOutputWithContext(context.Background())
}

func (i PlanKmsArray) ToPlanKmsArrayOutputWithContext(ctx context.Context) PlanKmsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanKmsArrayOutput)
}

// PlanKmsMapInput is an input type that accepts PlanKmsMap and PlanKmsMapOutput values.
// You can construct a concrete instance of `PlanKmsMapInput` via:
//
//	PlanKmsMap{ "key": PlanKmsArgs{...} }
type PlanKmsMapInput interface {
	pulumi.Input

	ToPlanKmsMapOutput() PlanKmsMapOutput
	ToPlanKmsMapOutputWithContext(context.Context) PlanKmsMapOutput
}

type PlanKmsMap map[string]PlanKmsInput

func (PlanKmsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlanKms)(nil)).Elem()
}

func (i PlanKmsMap) ToPlanKmsMapOutput() PlanKmsMapOutput {
	return i.ToPlanKmsMapOutputWithContext(context.Background())
}

func (i PlanKmsMap) ToPlanKmsMapOutputWithContext(ctx context.Context) PlanKmsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanKmsMapOutput)
}

type PlanKmsOutput struct{ *pulumi.OutputState }

func (PlanKmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanKms)(nil)).Elem()
}

func (o PlanKmsOutput) ToPlanKmsOutput() PlanKmsOutput {
	return o
}

func (o PlanKmsOutput) ToPlanKmsOutputWithContext(ctx context.Context) PlanKmsOutput {
	return o
}

func (o PlanKmsOutput) KmsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *PlanKms) pulumi.StringOutput { return v.KmsArn }).(pulumi.StringOutput)
}

func (o PlanKmsOutput) KmsId() pulumi.StringOutput {
	return o.ApplyT(func(v *PlanKms) pulumi.StringOutput { return v.KmsId }).(pulumi.StringOutput)
}

func (o PlanKmsOutput) KmsName() pulumi.StringOutput {
	return o.ApplyT(func(v *PlanKms) pulumi.StringOutput { return v.KmsName }).(pulumi.StringOutput)
}

// The ID of the plan to configure.
func (o PlanKmsOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *PlanKms) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

type PlanKmsArrayOutput struct{ *pulumi.OutputState }

func (PlanKmsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlanKms)(nil)).Elem()
}

func (o PlanKmsArrayOutput) ToPlanKmsArrayOutput() PlanKmsArrayOutput {
	return o
}

func (o PlanKmsArrayOutput) ToPlanKmsArrayOutputWithContext(ctx context.Context) PlanKmsArrayOutput {
	return o
}

func (o PlanKmsArrayOutput) Index(i pulumi.IntInput) PlanKmsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PlanKms {
		return vs[0].([]*PlanKms)[vs[1].(int)]
	}).(PlanKmsOutput)
}

type PlanKmsMapOutput struct{ *pulumi.OutputState }

func (PlanKmsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlanKms)(nil)).Elem()
}

func (o PlanKmsMapOutput) ToPlanKmsMapOutput() PlanKmsMapOutput {
	return o
}

func (o PlanKmsMapOutput) ToPlanKmsMapOutputWithContext(ctx context.Context) PlanKmsMapOutput {
	return o
}

func (o PlanKmsMapOutput) MapIndex(k pulumi.StringInput) PlanKmsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PlanKms {
		return vs[0].(map[string]*PlanKms)[vs[1].(string)]
	}).(PlanKmsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlanKmsInput)(nil)).Elem(), &PlanKms{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanKmsArrayInput)(nil)).Elem(), PlanKmsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanKmsMapInput)(nil)).Elem(), PlanKmsMap{})
	pulumi.RegisterOutputType(PlanKmsOutput{})
	pulumi.RegisterOutputType(PlanKmsArrayOutput{})
	pulumi.RegisterOutputType(PlanKmsMapOutput{})
}
