// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureRedisCache` manages an Azure redis cache in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAzureRedisCache(ctx, "myCache", &duplocloud.AzureRedisCacheArgs{
//				TenantId:         myapp.TenantId,
//				Name:             pulumi.String("cache-test"),
//				Capacity:         pulumi.Int(1),
//				Family:           pulumi.String("p"),
//				SkuName:          pulumi.String("Premium"),
//				SubnetId:         pulumi.String("/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default"),
//				EnableNonSslPort: pulumi.Bool(false),
//				ShardCount:       pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing Azure Redis Cache
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the Azure Redis Cache
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/azureRedisCache:AzureRedisCache myRedisCache *TENANT_ID*/*SHORT_NAME*
// ```
type AzureRedisCache struct {
	pulumi.CustomResourceState

	// The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`
	Capacity pulumi.IntOutput `pulumi:"capacity"`
	// Enable the non-SSL port (6379) Defaults to `false`.
	EnableNonSslPort pulumi.BoolPtrOutput `pulumi:"enableNonSslPort"`
	// The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
	Family   pulumi.StringOutput `pulumi:"family"`
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The minimum TLS version.
	MinimumTlsVersion pulumi.StringPtrOutput `pulumi:"minimumTlsVersion"`
	// The name of the Redis instance. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	Port pulumi.IntOutput    `pulumi:"port"`
	// Redis version. Only major version needed. Valid values: `4`, `6`.
	RedisVersion pulumi.StringOutput `pulumi:"redisVersion"`
	// Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.
	ShardCount pulumi.IntPtrOutput `pulumi:"shardCount"`
	// The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
	SslPort pulumi.IntOutput    `pulumi:"sslPort"`
	// Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed.
	SubnetId pulumi.StringPtrOutput `pulumi:"subnetId"`
	Tags     pulumi.StringMapOutput `pulumi:"tags"`
	// The GUID of the tenant that the azure redis cache will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrOutput `pulumi:"waitUntilReady"`
}

// NewAzureRedisCache registers a new resource with the given unique name, arguments, and options.
func NewAzureRedisCache(ctx *pulumi.Context,
	name string, args *AzureRedisCacheArgs, opts ...pulumi.ResourceOption) (*AzureRedisCache, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Capacity == nil {
		return nil, errors.New("invalid value for required argument 'Capacity'")
	}
	if args.Family == nil {
		return nil, errors.New("invalid value for required argument 'Family'")
	}
	if args.SkuName == nil {
		return nil, errors.New("invalid value for required argument 'SkuName'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureRedisCache
	err := ctx.RegisterResource("duplocloud:index/azureRedisCache:AzureRedisCache", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureRedisCache gets an existing AzureRedisCache resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureRedisCache(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureRedisCacheState, opts ...pulumi.ResourceOption) (*AzureRedisCache, error) {
	var resource AzureRedisCache
	err := ctx.ReadResource("duplocloud:index/azureRedisCache:AzureRedisCache", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureRedisCache resources.
type azureRedisCacheState struct {
	// The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`
	Capacity *int `pulumi:"capacity"`
	// Enable the non-SSL port (6379) Defaults to `false`.
	EnableNonSslPort *bool `pulumi:"enableNonSslPort"`
	// The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
	Family   *string `pulumi:"family"`
	Hostname *string `pulumi:"hostname"`
	// The minimum TLS version.
	MinimumTlsVersion *string `pulumi:"minimumTlsVersion"`
	// The name of the Redis instance. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	Port *int    `pulumi:"port"`
	// Redis version. Only major version needed. Valid values: `4`, `6`.
	RedisVersion *string `pulumi:"redisVersion"`
	// Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.
	ShardCount *int `pulumi:"shardCount"`
	// The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
	SkuName *string `pulumi:"skuName"`
	SslPort *int    `pulumi:"sslPort"`
	// Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed.
	SubnetId *string           `pulumi:"subnetId"`
	Tags     map[string]string `pulumi:"tags"`
	// The GUID of the tenant that the azure redis cache will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

type AzureRedisCacheState struct {
	// The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`
	Capacity pulumi.IntPtrInput
	// Enable the non-SSL port (6379) Defaults to `false`.
	EnableNonSslPort pulumi.BoolPtrInput
	// The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
	Family   pulumi.StringPtrInput
	Hostname pulumi.StringPtrInput
	// The minimum TLS version.
	MinimumTlsVersion pulumi.StringPtrInput
	// The name of the Redis instance. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	Port pulumi.IntPtrInput
	// Redis version. Only major version needed. Valid values: `4`, `6`.
	RedisVersion pulumi.StringPtrInput
	// Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.
	ShardCount pulumi.IntPtrInput
	// The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
	SkuName pulumi.StringPtrInput
	SslPort pulumi.IntPtrInput
	// Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed.
	SubnetId pulumi.StringPtrInput
	Tags     pulumi.StringMapInput
	// The GUID of the tenant that the azure redis cache will be created in.
	TenantId pulumi.StringPtrInput
	// Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzureRedisCacheState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureRedisCacheState)(nil)).Elem()
}

type azureRedisCacheArgs struct {
	// The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`
	Capacity int `pulumi:"capacity"`
	// Enable the non-SSL port (6379) Defaults to `false`.
	EnableNonSslPort *bool `pulumi:"enableNonSslPort"`
	// The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
	Family string `pulumi:"family"`
	// The minimum TLS version.
	MinimumTlsVersion *string `pulumi:"minimumTlsVersion"`
	// The name of the Redis instance. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Redis version. Only major version needed. Valid values: `4`, `6`.
	RedisVersion *string `pulumi:"redisVersion"`
	// Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.
	ShardCount *int `pulumi:"shardCount"`
	// The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
	SkuName string `pulumi:"skuName"`
	// Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed.
	SubnetId *string `pulumi:"subnetId"`
	// The GUID of the tenant that the azure redis cache will be created in.
	TenantId string `pulumi:"tenantId"`
	// Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

// The set of arguments for constructing a AzureRedisCache resource.
type AzureRedisCacheArgs struct {
	// The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`
	Capacity pulumi.IntInput
	// Enable the non-SSL port (6379) Defaults to `false`.
	EnableNonSslPort pulumi.BoolPtrInput
	// The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
	Family pulumi.StringInput
	// The minimum TLS version.
	MinimumTlsVersion pulumi.StringPtrInput
	// The name of the Redis instance. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Redis version. Only major version needed. Valid values: `4`, `6`.
	RedisVersion pulumi.StringPtrInput
	// Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.
	ShardCount pulumi.IntPtrInput
	// The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
	SkuName pulumi.StringInput
	// Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed.
	SubnetId pulumi.StringPtrInput
	// The GUID of the tenant that the azure redis cache will be created in.
	TenantId pulumi.StringInput
	// Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzureRedisCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureRedisCacheArgs)(nil)).Elem()
}

type AzureRedisCacheInput interface {
	pulumi.Input

	ToAzureRedisCacheOutput() AzureRedisCacheOutput
	ToAzureRedisCacheOutputWithContext(ctx context.Context) AzureRedisCacheOutput
}

func (*AzureRedisCache) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureRedisCache)(nil)).Elem()
}

func (i *AzureRedisCache) ToAzureRedisCacheOutput() AzureRedisCacheOutput {
	return i.ToAzureRedisCacheOutputWithContext(context.Background())
}

func (i *AzureRedisCache) ToAzureRedisCacheOutputWithContext(ctx context.Context) AzureRedisCacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureRedisCacheOutput)
}

// AzureRedisCacheArrayInput is an input type that accepts AzureRedisCacheArray and AzureRedisCacheArrayOutput values.
// You can construct a concrete instance of `AzureRedisCacheArrayInput` via:
//
//	AzureRedisCacheArray{ AzureRedisCacheArgs{...} }
type AzureRedisCacheArrayInput interface {
	pulumi.Input

	ToAzureRedisCacheArrayOutput() AzureRedisCacheArrayOutput
	ToAzureRedisCacheArrayOutputWithContext(context.Context) AzureRedisCacheArrayOutput
}

type AzureRedisCacheArray []AzureRedisCacheInput

func (AzureRedisCacheArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureRedisCache)(nil)).Elem()
}

func (i AzureRedisCacheArray) ToAzureRedisCacheArrayOutput() AzureRedisCacheArrayOutput {
	return i.ToAzureRedisCacheArrayOutputWithContext(context.Background())
}

func (i AzureRedisCacheArray) ToAzureRedisCacheArrayOutputWithContext(ctx context.Context) AzureRedisCacheArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureRedisCacheArrayOutput)
}

// AzureRedisCacheMapInput is an input type that accepts AzureRedisCacheMap and AzureRedisCacheMapOutput values.
// You can construct a concrete instance of `AzureRedisCacheMapInput` via:
//
//	AzureRedisCacheMap{ "key": AzureRedisCacheArgs{...} }
type AzureRedisCacheMapInput interface {
	pulumi.Input

	ToAzureRedisCacheMapOutput() AzureRedisCacheMapOutput
	ToAzureRedisCacheMapOutputWithContext(context.Context) AzureRedisCacheMapOutput
}

type AzureRedisCacheMap map[string]AzureRedisCacheInput

func (AzureRedisCacheMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureRedisCache)(nil)).Elem()
}

func (i AzureRedisCacheMap) ToAzureRedisCacheMapOutput() AzureRedisCacheMapOutput {
	return i.ToAzureRedisCacheMapOutputWithContext(context.Background())
}

func (i AzureRedisCacheMap) ToAzureRedisCacheMapOutputWithContext(ctx context.Context) AzureRedisCacheMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureRedisCacheMapOutput)
}

type AzureRedisCacheOutput struct{ *pulumi.OutputState }

func (AzureRedisCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureRedisCache)(nil)).Elem()
}

func (o AzureRedisCacheOutput) ToAzureRedisCacheOutput() AzureRedisCacheOutput {
	return o
}

func (o AzureRedisCacheOutput) ToAzureRedisCacheOutputWithContext(ctx context.Context) AzureRedisCacheOutput {
	return o
}

// The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`
func (o AzureRedisCacheOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v *AzureRedisCache) pulumi.IntOutput { return v.Capacity }).(pulumi.IntOutput)
}

// Enable the non-SSL port (6379) Defaults to `false`.
func (o AzureRedisCacheOutput) EnableNonSslPort() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureRedisCache) pulumi.BoolPtrOutput { return v.EnableNonSslPort }).(pulumi.BoolPtrOutput)
}

// The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
func (o AzureRedisCacheOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureRedisCache) pulumi.StringOutput { return v.Family }).(pulumi.StringOutput)
}

func (o AzureRedisCacheOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureRedisCache) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// The minimum TLS version.
func (o AzureRedisCacheOutput) MinimumTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureRedisCache) pulumi.StringPtrOutput { return v.MinimumTlsVersion }).(pulumi.StringPtrOutput)
}

// The name of the Redis instance. Changing this forces a new resource to be created.
func (o AzureRedisCacheOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureRedisCache) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AzureRedisCacheOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *AzureRedisCache) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Redis version. Only major version needed. Valid values: `4`, `6`.
func (o AzureRedisCacheOutput) RedisVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureRedisCache) pulumi.StringOutput { return v.RedisVersion }).(pulumi.StringOutput)
}

// Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.
func (o AzureRedisCacheOutput) ShardCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureRedisCache) pulumi.IntPtrOutput { return v.ShardCount }).(pulumi.IntPtrOutput)
}

// The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
func (o AzureRedisCacheOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureRedisCache) pulumi.StringOutput { return v.SkuName }).(pulumi.StringOutput)
}

func (o AzureRedisCacheOutput) SslPort() pulumi.IntOutput {
	return o.ApplyT(func(v *AzureRedisCache) pulumi.IntOutput { return v.SslPort }).(pulumi.IntOutput)
}

// Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed.
func (o AzureRedisCacheOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureRedisCache) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

func (o AzureRedisCacheOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AzureRedisCache) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The GUID of the tenant that the azure redis cache will be created in.
func (o AzureRedisCacheOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureRedisCache) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
func (o AzureRedisCacheOutput) WaitUntilReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureRedisCache) pulumi.BoolPtrOutput { return v.WaitUntilReady }).(pulumi.BoolPtrOutput)
}

type AzureRedisCacheArrayOutput struct{ *pulumi.OutputState }

func (AzureRedisCacheArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureRedisCache)(nil)).Elem()
}

func (o AzureRedisCacheArrayOutput) ToAzureRedisCacheArrayOutput() AzureRedisCacheArrayOutput {
	return o
}

func (o AzureRedisCacheArrayOutput) ToAzureRedisCacheArrayOutputWithContext(ctx context.Context) AzureRedisCacheArrayOutput {
	return o
}

func (o AzureRedisCacheArrayOutput) Index(i pulumi.IntInput) AzureRedisCacheOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureRedisCache {
		return vs[0].([]*AzureRedisCache)[vs[1].(int)]
	}).(AzureRedisCacheOutput)
}

type AzureRedisCacheMapOutput struct{ *pulumi.OutputState }

func (AzureRedisCacheMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureRedisCache)(nil)).Elem()
}

func (o AzureRedisCacheMapOutput) ToAzureRedisCacheMapOutput() AzureRedisCacheMapOutput {
	return o
}

func (o AzureRedisCacheMapOutput) ToAzureRedisCacheMapOutputWithContext(ctx context.Context) AzureRedisCacheMapOutput {
	return o
}

func (o AzureRedisCacheMapOutput) MapIndex(k pulumi.StringInput) AzureRedisCacheOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureRedisCache {
		return vs[0].(map[string]*AzureRedisCache)[vs[1].(string)]
	}).(AzureRedisCacheOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureRedisCacheInput)(nil)).Elem(), &AzureRedisCache{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureRedisCacheArrayInput)(nil)).Elem(), AzureRedisCacheArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureRedisCacheMapInput)(nil)).Elem(), AzureRedisCacheMap{})
	pulumi.RegisterOutputType(AzureRedisCacheOutput{})
	pulumi.RegisterOutputType(AzureRedisCacheArrayOutput{})
	pulumi.RegisterOutputType(AzureRedisCacheMapOutput{})
}
