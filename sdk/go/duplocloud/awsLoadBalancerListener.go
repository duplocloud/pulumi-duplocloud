// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AwsLoadBalancerListener` manages an AWS application load balancer listener in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			myappAwsLoadBalancer, err := duplocloud.NewAwsLoadBalancer(ctx, "myapp", &duplocloud.AwsLoadBalancerArgs{
//				TenantId:           myapp.TenantId,
//				Name:               pulumi.String("myapp"),
//				IsInternal:         pulumi.Bool(true),
//				EnableAccessLogs:   pulumi.Bool(true),
//				DropInvalidHeaders: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAwsLoadBalancerListener(ctx, "myapp-listener", &duplocloud.AwsLoadBalancerListenerArgs{
//				TenantId:         myapp.TenantId,
//				LoadBalancerName: myappAwsLoadBalancer.Name,
//				Port:             pulumi.Int(8443),
//				Protocol:         pulumi.String("https"),
//				TargetGroupArn:   pulumi.String("arn:aws:elasticloadbalancing:us-west-2:1234567890:targetgroup/duplo2-stage-antcmw-http4000/fc6f818e85fa737a"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing AWS load balancer listener
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *LB_NAME* is the name of the AWS load balancer
//
//   - *LISTENER_ARN* is the arn of the AWS load balancer listener
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/awsLoadBalancerListener:AwsLoadBalancerListener myalb-listener *TENANT_ID*/*LB_NAME*/*LISTENER_ARN*
// ```
type AwsLoadBalancerListener struct {
	pulumi.CustomResourceState

	// ARN of the listener.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ARN of the certificate to attach to the listener.
	CertificateArn  pulumi.StringOutput                             `pulumi:"certificateArn"`
	Certificates    AwsLoadBalancerListenerCertificateArrayOutput   `pulumi:"certificates"`
	DefaultActions  AwsLoadBalancerListenerDefaultActionArrayOutput `pulumi:"defaultActions"`
	LoadBalancerArn pulumi.StringOutput                             `pulumi:"loadBalancerArn"`
	// The full name of the load balancer.
	LoadBalancerFullname pulumi.StringOutput `pulumi:"loadBalancerFullname"`
	// The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	LoadBalancerName pulumi.StringOutput `pulumi:"loadBalancerName"`
	// Port on which the load balancer is listening.
	Port pulumi.IntOutput `pulumi:"port"`
	// Protocol for connections from clients to the load balancer.
	Protocol  pulumi.StringOutput `pulumi:"protocol"`
	SslPolicy pulumi.StringOutput `pulumi:"sslPolicy"`
	// ARN of the Target Group to which to route traffic.
	TargetGroupArn pulumi.StringOutput `pulumi:"targetGroupArn"`
	// The GUID of the tenant that the load balancer will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewAwsLoadBalancerListener registers a new resource with the given unique name, arguments, and options.
func NewAwsLoadBalancerListener(ctx *pulumi.Context,
	name string, args *AwsLoadBalancerListenerArgs, opts ...pulumi.ResourceOption) (*AwsLoadBalancerListener, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadBalancerName == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerName'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.TargetGroupArn == nil {
		return nil, errors.New("invalid value for required argument 'TargetGroupArn'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsLoadBalancerListener
	err := ctx.RegisterResource("duplocloud:index/awsLoadBalancerListener:AwsLoadBalancerListener", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsLoadBalancerListener gets an existing AwsLoadBalancerListener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsLoadBalancerListener(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsLoadBalancerListenerState, opts ...pulumi.ResourceOption) (*AwsLoadBalancerListener, error) {
	var resource AwsLoadBalancerListener
	err := ctx.ReadResource("duplocloud:index/awsLoadBalancerListener:AwsLoadBalancerListener", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsLoadBalancerListener resources.
type awsLoadBalancerListenerState struct {
	// ARN of the listener.
	Arn *string `pulumi:"arn"`
	// The ARN of the certificate to attach to the listener.
	CertificateArn  *string                                `pulumi:"certificateArn"`
	Certificates    []AwsLoadBalancerListenerCertificate   `pulumi:"certificates"`
	DefaultActions  []AwsLoadBalancerListenerDefaultAction `pulumi:"defaultActions"`
	LoadBalancerArn *string                                `pulumi:"loadBalancerArn"`
	// The full name of the load balancer.
	LoadBalancerFullname *string `pulumi:"loadBalancerFullname"`
	// The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// Port on which the load balancer is listening.
	Port *int `pulumi:"port"`
	// Protocol for connections from clients to the load balancer.
	Protocol  *string `pulumi:"protocol"`
	SslPolicy *string `pulumi:"sslPolicy"`
	// ARN of the Target Group to which to route traffic.
	TargetGroupArn *string `pulumi:"targetGroupArn"`
	// The GUID of the tenant that the load balancer will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type AwsLoadBalancerListenerState struct {
	// ARN of the listener.
	Arn pulumi.StringPtrInput
	// The ARN of the certificate to attach to the listener.
	CertificateArn  pulumi.StringPtrInput
	Certificates    AwsLoadBalancerListenerCertificateArrayInput
	DefaultActions  AwsLoadBalancerListenerDefaultActionArrayInput
	LoadBalancerArn pulumi.StringPtrInput
	// The full name of the load balancer.
	LoadBalancerFullname pulumi.StringPtrInput
	// The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	LoadBalancerName pulumi.StringPtrInput
	// Port on which the load balancer is listening.
	Port pulumi.IntPtrInput
	// Protocol for connections from clients to the load balancer.
	Protocol  pulumi.StringPtrInput
	SslPolicy pulumi.StringPtrInput
	// ARN of the Target Group to which to route traffic.
	TargetGroupArn pulumi.StringPtrInput
	// The GUID of the tenant that the load balancer will be created in.
	TenantId pulumi.StringPtrInput
}

func (AwsLoadBalancerListenerState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsLoadBalancerListenerState)(nil)).Elem()
}

type awsLoadBalancerListenerArgs struct {
	// The ARN of the certificate to attach to the listener.
	CertificateArn *string `pulumi:"certificateArn"`
	// The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	LoadBalancerName string `pulumi:"loadBalancerName"`
	// Port on which the load balancer is listening.
	Port int `pulumi:"port"`
	// Protocol for connections from clients to the load balancer.
	Protocol string `pulumi:"protocol"`
	// ARN of the Target Group to which to route traffic.
	TargetGroupArn string `pulumi:"targetGroupArn"`
	// The GUID of the tenant that the load balancer will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AwsLoadBalancerListener resource.
type AwsLoadBalancerListenerArgs struct {
	// The ARN of the certificate to attach to the listener.
	CertificateArn pulumi.StringPtrInput
	// The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	LoadBalancerName pulumi.StringInput
	// Port on which the load balancer is listening.
	Port pulumi.IntInput
	// Protocol for connections from clients to the load balancer.
	Protocol pulumi.StringInput
	// ARN of the Target Group to which to route traffic.
	TargetGroupArn pulumi.StringInput
	// The GUID of the tenant that the load balancer will be created in.
	TenantId pulumi.StringInput
}

func (AwsLoadBalancerListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsLoadBalancerListenerArgs)(nil)).Elem()
}

type AwsLoadBalancerListenerInput interface {
	pulumi.Input

	ToAwsLoadBalancerListenerOutput() AwsLoadBalancerListenerOutput
	ToAwsLoadBalancerListenerOutputWithContext(ctx context.Context) AwsLoadBalancerListenerOutput
}

func (*AwsLoadBalancerListener) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsLoadBalancerListener)(nil)).Elem()
}

func (i *AwsLoadBalancerListener) ToAwsLoadBalancerListenerOutput() AwsLoadBalancerListenerOutput {
	return i.ToAwsLoadBalancerListenerOutputWithContext(context.Background())
}

func (i *AwsLoadBalancerListener) ToAwsLoadBalancerListenerOutputWithContext(ctx context.Context) AwsLoadBalancerListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLoadBalancerListenerOutput)
}

// AwsLoadBalancerListenerArrayInput is an input type that accepts AwsLoadBalancerListenerArray and AwsLoadBalancerListenerArrayOutput values.
// You can construct a concrete instance of `AwsLoadBalancerListenerArrayInput` via:
//
//	AwsLoadBalancerListenerArray{ AwsLoadBalancerListenerArgs{...} }
type AwsLoadBalancerListenerArrayInput interface {
	pulumi.Input

	ToAwsLoadBalancerListenerArrayOutput() AwsLoadBalancerListenerArrayOutput
	ToAwsLoadBalancerListenerArrayOutputWithContext(context.Context) AwsLoadBalancerListenerArrayOutput
}

type AwsLoadBalancerListenerArray []AwsLoadBalancerListenerInput

func (AwsLoadBalancerListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsLoadBalancerListener)(nil)).Elem()
}

func (i AwsLoadBalancerListenerArray) ToAwsLoadBalancerListenerArrayOutput() AwsLoadBalancerListenerArrayOutput {
	return i.ToAwsLoadBalancerListenerArrayOutputWithContext(context.Background())
}

func (i AwsLoadBalancerListenerArray) ToAwsLoadBalancerListenerArrayOutputWithContext(ctx context.Context) AwsLoadBalancerListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLoadBalancerListenerArrayOutput)
}

// AwsLoadBalancerListenerMapInput is an input type that accepts AwsLoadBalancerListenerMap and AwsLoadBalancerListenerMapOutput values.
// You can construct a concrete instance of `AwsLoadBalancerListenerMapInput` via:
//
//	AwsLoadBalancerListenerMap{ "key": AwsLoadBalancerListenerArgs{...} }
type AwsLoadBalancerListenerMapInput interface {
	pulumi.Input

	ToAwsLoadBalancerListenerMapOutput() AwsLoadBalancerListenerMapOutput
	ToAwsLoadBalancerListenerMapOutputWithContext(context.Context) AwsLoadBalancerListenerMapOutput
}

type AwsLoadBalancerListenerMap map[string]AwsLoadBalancerListenerInput

func (AwsLoadBalancerListenerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsLoadBalancerListener)(nil)).Elem()
}

func (i AwsLoadBalancerListenerMap) ToAwsLoadBalancerListenerMapOutput() AwsLoadBalancerListenerMapOutput {
	return i.ToAwsLoadBalancerListenerMapOutputWithContext(context.Background())
}

func (i AwsLoadBalancerListenerMap) ToAwsLoadBalancerListenerMapOutputWithContext(ctx context.Context) AwsLoadBalancerListenerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLoadBalancerListenerMapOutput)
}

type AwsLoadBalancerListenerOutput struct{ *pulumi.OutputState }

func (AwsLoadBalancerListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsLoadBalancerListener)(nil)).Elem()
}

func (o AwsLoadBalancerListenerOutput) ToAwsLoadBalancerListenerOutput() AwsLoadBalancerListenerOutput {
	return o
}

func (o AwsLoadBalancerListenerOutput) ToAwsLoadBalancerListenerOutputWithContext(ctx context.Context) AwsLoadBalancerListenerOutput {
	return o
}

// ARN of the listener.
func (o AwsLoadBalancerListenerOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLoadBalancerListener) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The ARN of the certificate to attach to the listener.
func (o AwsLoadBalancerListenerOutput) CertificateArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLoadBalancerListener) pulumi.StringOutput { return v.CertificateArn }).(pulumi.StringOutput)
}

func (o AwsLoadBalancerListenerOutput) Certificates() AwsLoadBalancerListenerCertificateArrayOutput {
	return o.ApplyT(func(v *AwsLoadBalancerListener) AwsLoadBalancerListenerCertificateArrayOutput { return v.Certificates }).(AwsLoadBalancerListenerCertificateArrayOutput)
}

func (o AwsLoadBalancerListenerOutput) DefaultActions() AwsLoadBalancerListenerDefaultActionArrayOutput {
	return o.ApplyT(func(v *AwsLoadBalancerListener) AwsLoadBalancerListenerDefaultActionArrayOutput {
		return v.DefaultActions
	}).(AwsLoadBalancerListenerDefaultActionArrayOutput)
}

func (o AwsLoadBalancerListenerOutput) LoadBalancerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLoadBalancerListener) pulumi.StringOutput { return v.LoadBalancerArn }).(pulumi.StringOutput)
}

// The full name of the load balancer.
func (o AwsLoadBalancerListenerOutput) LoadBalancerFullname() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLoadBalancerListener) pulumi.StringOutput { return v.LoadBalancerFullname }).(pulumi.StringOutput)
}

// The short name of the load balancer.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
func (o AwsLoadBalancerListenerOutput) LoadBalancerName() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLoadBalancerListener) pulumi.StringOutput { return v.LoadBalancerName }).(pulumi.StringOutput)
}

// Port on which the load balancer is listening.
func (o AwsLoadBalancerListenerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *AwsLoadBalancerListener) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Protocol for connections from clients to the load balancer.
func (o AwsLoadBalancerListenerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLoadBalancerListener) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o AwsLoadBalancerListenerOutput) SslPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLoadBalancerListener) pulumi.StringOutput { return v.SslPolicy }).(pulumi.StringOutput)
}

// ARN of the Target Group to which to route traffic.
func (o AwsLoadBalancerListenerOutput) TargetGroupArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLoadBalancerListener) pulumi.StringOutput { return v.TargetGroupArn }).(pulumi.StringOutput)
}

// The GUID of the tenant that the load balancer will be created in.
func (o AwsLoadBalancerListenerOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLoadBalancerListener) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type AwsLoadBalancerListenerArrayOutput struct{ *pulumi.OutputState }

func (AwsLoadBalancerListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsLoadBalancerListener)(nil)).Elem()
}

func (o AwsLoadBalancerListenerArrayOutput) ToAwsLoadBalancerListenerArrayOutput() AwsLoadBalancerListenerArrayOutput {
	return o
}

func (o AwsLoadBalancerListenerArrayOutput) ToAwsLoadBalancerListenerArrayOutputWithContext(ctx context.Context) AwsLoadBalancerListenerArrayOutput {
	return o
}

func (o AwsLoadBalancerListenerArrayOutput) Index(i pulumi.IntInput) AwsLoadBalancerListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsLoadBalancerListener {
		return vs[0].([]*AwsLoadBalancerListener)[vs[1].(int)]
	}).(AwsLoadBalancerListenerOutput)
}

type AwsLoadBalancerListenerMapOutput struct{ *pulumi.OutputState }

func (AwsLoadBalancerListenerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsLoadBalancerListener)(nil)).Elem()
}

func (o AwsLoadBalancerListenerMapOutput) ToAwsLoadBalancerListenerMapOutput() AwsLoadBalancerListenerMapOutput {
	return o
}

func (o AwsLoadBalancerListenerMapOutput) ToAwsLoadBalancerListenerMapOutputWithContext(ctx context.Context) AwsLoadBalancerListenerMapOutput {
	return o
}

func (o AwsLoadBalancerListenerMapOutput) MapIndex(k pulumi.StringInput) AwsLoadBalancerListenerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsLoadBalancerListener {
		return vs[0].(map[string]*AwsLoadBalancerListener)[vs[1].(string)]
	}).(AwsLoadBalancerListenerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLoadBalancerListenerInput)(nil)).Elem(), &AwsLoadBalancerListener{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLoadBalancerListenerArrayInput)(nil)).Elem(), AwsLoadBalancerListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLoadBalancerListenerMapInput)(nil)).Elem(), AwsLoadBalancerListenerMap{})
	pulumi.RegisterOutputType(AwsLoadBalancerListenerOutput{})
	pulumi.RegisterOutputType(AwsLoadBalancerListenerArrayOutput{})
	pulumi.RegisterOutputType(AwsLoadBalancerListenerMapOutput{})
}
