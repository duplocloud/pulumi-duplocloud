// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AwsDynamodbTableV2` manages an AWS dynamodb table in Duplo.
//
// ## Import
//
// Example: Importing an existing AWS DynamoDb Table
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *NAME* is the name of dynamodb table
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/awsDynamodbTableV2:AwsDynamodbTableV2 myDynamodbTable *TENANT_ID*/*NAME*
// ```
type AwsDynamodbTableV2 struct {
	pulumi.CustomResourceState

	// The ARN of the dynamodb table.
	Arn        pulumi.StringOutput                    `pulumi:"arn"`
	Attributes AwsDynamodbTableV2AttributeArrayOutput `pulumi:"attributes"`
	// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
	BillingMode pulumi.StringPtrOutput `pulumi:"billingMode"`
	// Deletion protection keeps the tables from being deleted unintentionally. While this setting is on, you can't delete the table.
	DeletionProtectionEnabled pulumi.BoolOutput `pulumi:"deletionProtectionEnabled"`
	// The name of the table, this needs to be unique within a region.
	Fullname pulumi.StringOutput `pulumi:"fullname"`
	// Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.
	GlobalSecondaryIndices AwsDynamodbTableV2GlobalSecondaryIndexArrayOutput `pulumi:"globalSecondaryIndices"`
	// The point in time recovery status of the dynamodb table. Enabled if true.
	IsPointInTimeRecovery pulumi.BoolOutput                                `pulumi:"isPointInTimeRecovery"`
	KeySchemas            AwsDynamodbTableV2KeySchemaArrayOutput           `pulumi:"keySchemas"`
	LocalSecondaryIndices AwsDynamodbTableV2LocalSecondaryIndexArrayOutput `pulumi:"localSecondaryIndices"`
	// The name of the table, this needs to be unique within a region.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of read units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	ReadCapacity pulumi.IntPtrOutput `pulumi:"readCapacity"`
	// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
	ServerSideEncryption AwsDynamodbTableV2ServerSideEncryptionOutput `pulumi:"serverSideEncryption"`
	// The status of the dynamodb table.
	Status    pulumi.StringOutput `pulumi:"status"`
	StreamArn pulumi.StringOutput `pulumi:"streamArn"`
	// Indicates whether Streams are to be enabled (true) or disabled (false).
	StreamEnabled pulumi.BoolPtrOutput `pulumi:"streamEnabled"`
	StreamLabel   pulumi.StringOutput  `pulumi:"streamLabel"`
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType pulumi.StringOutput              `pulumi:"streamViewType"`
	Tags           AwsDynamodbTableV2TagArrayOutput `pulumi:"tags"`
	// The GUID of the tenant that the dynamodb table will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Setup ttl for dynamodb table. Defaults to `false or empty`, To disable ttl, enabled field should be set to false
	Ttl AwsDynamodbTableV2TtlPtrOutput `pulumi:"ttl"`
	// Whether or not to wait until dynamodb instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrOutput `pulumi:"waitUntilReady"`
	// The number of write units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	WriteCapacity pulumi.IntPtrOutput `pulumi:"writeCapacity"`
}

// NewAwsDynamodbTableV2 registers a new resource with the given unique name, arguments, and options.
func NewAwsDynamodbTableV2(ctx *pulumi.Context,
	name string, args *AwsDynamodbTableV2Args, opts ...pulumi.ResourceOption) (*AwsDynamodbTableV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Attributes == nil {
		return nil, errors.New("invalid value for required argument 'Attributes'")
	}
	if args.KeySchemas == nil {
		return nil, errors.New("invalid value for required argument 'KeySchemas'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsDynamodbTableV2
	err := ctx.RegisterResource("duplocloud:index/awsDynamodbTableV2:AwsDynamodbTableV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsDynamodbTableV2 gets an existing AwsDynamodbTableV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsDynamodbTableV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsDynamodbTableV2State, opts ...pulumi.ResourceOption) (*AwsDynamodbTableV2, error) {
	var resource AwsDynamodbTableV2
	err := ctx.ReadResource("duplocloud:index/awsDynamodbTableV2:AwsDynamodbTableV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsDynamodbTableV2 resources.
type awsDynamodbTableV2State struct {
	// The ARN of the dynamodb table.
	Arn        *string                       `pulumi:"arn"`
	Attributes []AwsDynamodbTableV2Attribute `pulumi:"attributes"`
	// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
	BillingMode *string `pulumi:"billingMode"`
	// Deletion protection keeps the tables from being deleted unintentionally. While this setting is on, you can't delete the table.
	DeletionProtectionEnabled *bool `pulumi:"deletionProtectionEnabled"`
	// The name of the table, this needs to be unique within a region.
	Fullname *string `pulumi:"fullname"`
	// Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.
	GlobalSecondaryIndices []AwsDynamodbTableV2GlobalSecondaryIndex `pulumi:"globalSecondaryIndices"`
	// The point in time recovery status of the dynamodb table. Enabled if true.
	IsPointInTimeRecovery *bool                                   `pulumi:"isPointInTimeRecovery"`
	KeySchemas            []AwsDynamodbTableV2KeySchema           `pulumi:"keySchemas"`
	LocalSecondaryIndices []AwsDynamodbTableV2LocalSecondaryIndex `pulumi:"localSecondaryIndices"`
	// The name of the table, this needs to be unique within a region.
	Name *string `pulumi:"name"`
	// The number of read units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	ReadCapacity *int `pulumi:"readCapacity"`
	// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
	ServerSideEncryption *AwsDynamodbTableV2ServerSideEncryption `pulumi:"serverSideEncryption"`
	// The status of the dynamodb table.
	Status    *string `pulumi:"status"`
	StreamArn *string `pulumi:"streamArn"`
	// Indicates whether Streams are to be enabled (true) or disabled (false).
	StreamEnabled *bool   `pulumi:"streamEnabled"`
	StreamLabel   *string `pulumi:"streamLabel"`
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType *string                 `pulumi:"streamViewType"`
	Tags           []AwsDynamodbTableV2Tag `pulumi:"tags"`
	// The GUID of the tenant that the dynamodb table will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Setup ttl for dynamodb table. Defaults to `false or empty`, To disable ttl, enabled field should be set to false
	Ttl *AwsDynamodbTableV2Ttl `pulumi:"ttl"`
	// Whether or not to wait until dynamodb instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
	// The number of write units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	WriteCapacity *int `pulumi:"writeCapacity"`
}

type AwsDynamodbTableV2State struct {
	// The ARN of the dynamodb table.
	Arn        pulumi.StringPtrInput
	Attributes AwsDynamodbTableV2AttributeArrayInput
	// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
	BillingMode pulumi.StringPtrInput
	// Deletion protection keeps the tables from being deleted unintentionally. While this setting is on, you can't delete the table.
	DeletionProtectionEnabled pulumi.BoolPtrInput
	// The name of the table, this needs to be unique within a region.
	Fullname pulumi.StringPtrInput
	// Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.
	GlobalSecondaryIndices AwsDynamodbTableV2GlobalSecondaryIndexArrayInput
	// The point in time recovery status of the dynamodb table. Enabled if true.
	IsPointInTimeRecovery pulumi.BoolPtrInput
	KeySchemas            AwsDynamodbTableV2KeySchemaArrayInput
	LocalSecondaryIndices AwsDynamodbTableV2LocalSecondaryIndexArrayInput
	// The name of the table, this needs to be unique within a region.
	Name pulumi.StringPtrInput
	// The number of read units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	ReadCapacity pulumi.IntPtrInput
	// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
	ServerSideEncryption AwsDynamodbTableV2ServerSideEncryptionPtrInput
	// The status of the dynamodb table.
	Status    pulumi.StringPtrInput
	StreamArn pulumi.StringPtrInput
	// Indicates whether Streams are to be enabled (true) or disabled (false).
	StreamEnabled pulumi.BoolPtrInput
	StreamLabel   pulumi.StringPtrInput
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType pulumi.StringPtrInput
	Tags           AwsDynamodbTableV2TagArrayInput
	// The GUID of the tenant that the dynamodb table will be created in.
	TenantId pulumi.StringPtrInput
	// Setup ttl for dynamodb table. Defaults to `false or empty`, To disable ttl, enabled field should be set to false
	Ttl AwsDynamodbTableV2TtlPtrInput
	// Whether or not to wait until dynamodb instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
	// The number of write units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	WriteCapacity pulumi.IntPtrInput
}

func (AwsDynamodbTableV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*awsDynamodbTableV2State)(nil)).Elem()
}

type awsDynamodbTableV2Args struct {
	Attributes []AwsDynamodbTableV2Attribute `pulumi:"attributes"`
	// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
	BillingMode *string `pulumi:"billingMode"`
	// Deletion protection keeps the tables from being deleted unintentionally. While this setting is on, you can't delete the table.
	DeletionProtectionEnabled *bool `pulumi:"deletionProtectionEnabled"`
	// Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.
	GlobalSecondaryIndices []AwsDynamodbTableV2GlobalSecondaryIndex `pulumi:"globalSecondaryIndices"`
	// The point in time recovery status of the dynamodb table. Enabled if true.
	IsPointInTimeRecovery *bool                                   `pulumi:"isPointInTimeRecovery"`
	KeySchemas            []AwsDynamodbTableV2KeySchema           `pulumi:"keySchemas"`
	LocalSecondaryIndices []AwsDynamodbTableV2LocalSecondaryIndex `pulumi:"localSecondaryIndices"`
	// The name of the table, this needs to be unique within a region.
	Name *string `pulumi:"name"`
	// The number of read units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	ReadCapacity *int `pulumi:"readCapacity"`
	// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
	ServerSideEncryption *AwsDynamodbTableV2ServerSideEncryption `pulumi:"serverSideEncryption"`
	// Indicates whether Streams are to be enabled (true) or disabled (false).
	StreamEnabled *bool `pulumi:"streamEnabled"`
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType *string                 `pulumi:"streamViewType"`
	Tags           []AwsDynamodbTableV2Tag `pulumi:"tags"`
	// The GUID of the tenant that the dynamodb table will be created in.
	TenantId string `pulumi:"tenantId"`
	// Setup ttl for dynamodb table. Defaults to `false or empty`, To disable ttl, enabled field should be set to false
	Ttl *AwsDynamodbTableV2Ttl `pulumi:"ttl"`
	// Whether or not to wait until dynamodb instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
	// The number of write units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	WriteCapacity *int `pulumi:"writeCapacity"`
}

// The set of arguments for constructing a AwsDynamodbTableV2 resource.
type AwsDynamodbTableV2Args struct {
	Attributes AwsDynamodbTableV2AttributeArrayInput
	// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
	BillingMode pulumi.StringPtrInput
	// Deletion protection keeps the tables from being deleted unintentionally. While this setting is on, you can't delete the table.
	DeletionProtectionEnabled pulumi.BoolPtrInput
	// Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.
	GlobalSecondaryIndices AwsDynamodbTableV2GlobalSecondaryIndexArrayInput
	// The point in time recovery status of the dynamodb table. Enabled if true.
	IsPointInTimeRecovery pulumi.BoolPtrInput
	KeySchemas            AwsDynamodbTableV2KeySchemaArrayInput
	LocalSecondaryIndices AwsDynamodbTableV2LocalSecondaryIndexArrayInput
	// The name of the table, this needs to be unique within a region.
	Name pulumi.StringPtrInput
	// The number of read units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	ReadCapacity pulumi.IntPtrInput
	// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
	ServerSideEncryption AwsDynamodbTableV2ServerSideEncryptionPtrInput
	// Indicates whether Streams are to be enabled (true) or disabled (false).
	StreamEnabled pulumi.BoolPtrInput
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType pulumi.StringPtrInput
	Tags           AwsDynamodbTableV2TagArrayInput
	// The GUID of the tenant that the dynamodb table will be created in.
	TenantId pulumi.StringInput
	// Setup ttl for dynamodb table. Defaults to `false or empty`, To disable ttl, enabled field should be set to false
	Ttl AwsDynamodbTableV2TtlPtrInput
	// Whether or not to wait until dynamodb instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
	// The number of write units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	WriteCapacity pulumi.IntPtrInput
}

func (AwsDynamodbTableV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*awsDynamodbTableV2Args)(nil)).Elem()
}

type AwsDynamodbTableV2Input interface {
	pulumi.Input

	ToAwsDynamodbTableV2Output() AwsDynamodbTableV2Output
	ToAwsDynamodbTableV2OutputWithContext(ctx context.Context) AwsDynamodbTableV2Output
}

func (*AwsDynamodbTableV2) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsDynamodbTableV2)(nil)).Elem()
}

func (i *AwsDynamodbTableV2) ToAwsDynamodbTableV2Output() AwsDynamodbTableV2Output {
	return i.ToAwsDynamodbTableV2OutputWithContext(context.Background())
}

func (i *AwsDynamodbTableV2) ToAwsDynamodbTableV2OutputWithContext(ctx context.Context) AwsDynamodbTableV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(AwsDynamodbTableV2Output)
}

// AwsDynamodbTableV2ArrayInput is an input type that accepts AwsDynamodbTableV2Array and AwsDynamodbTableV2ArrayOutput values.
// You can construct a concrete instance of `AwsDynamodbTableV2ArrayInput` via:
//
//	AwsDynamodbTableV2Array{ AwsDynamodbTableV2Args{...} }
type AwsDynamodbTableV2ArrayInput interface {
	pulumi.Input

	ToAwsDynamodbTableV2ArrayOutput() AwsDynamodbTableV2ArrayOutput
	ToAwsDynamodbTableV2ArrayOutputWithContext(context.Context) AwsDynamodbTableV2ArrayOutput
}

type AwsDynamodbTableV2Array []AwsDynamodbTableV2Input

func (AwsDynamodbTableV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsDynamodbTableV2)(nil)).Elem()
}

func (i AwsDynamodbTableV2Array) ToAwsDynamodbTableV2ArrayOutput() AwsDynamodbTableV2ArrayOutput {
	return i.ToAwsDynamodbTableV2ArrayOutputWithContext(context.Background())
}

func (i AwsDynamodbTableV2Array) ToAwsDynamodbTableV2ArrayOutputWithContext(ctx context.Context) AwsDynamodbTableV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsDynamodbTableV2ArrayOutput)
}

// AwsDynamodbTableV2MapInput is an input type that accepts AwsDynamodbTableV2Map and AwsDynamodbTableV2MapOutput values.
// You can construct a concrete instance of `AwsDynamodbTableV2MapInput` via:
//
//	AwsDynamodbTableV2Map{ "key": AwsDynamodbTableV2Args{...} }
type AwsDynamodbTableV2MapInput interface {
	pulumi.Input

	ToAwsDynamodbTableV2MapOutput() AwsDynamodbTableV2MapOutput
	ToAwsDynamodbTableV2MapOutputWithContext(context.Context) AwsDynamodbTableV2MapOutput
}

type AwsDynamodbTableV2Map map[string]AwsDynamodbTableV2Input

func (AwsDynamodbTableV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsDynamodbTableV2)(nil)).Elem()
}

func (i AwsDynamodbTableV2Map) ToAwsDynamodbTableV2MapOutput() AwsDynamodbTableV2MapOutput {
	return i.ToAwsDynamodbTableV2MapOutputWithContext(context.Background())
}

func (i AwsDynamodbTableV2Map) ToAwsDynamodbTableV2MapOutputWithContext(ctx context.Context) AwsDynamodbTableV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsDynamodbTableV2MapOutput)
}

type AwsDynamodbTableV2Output struct{ *pulumi.OutputState }

func (AwsDynamodbTableV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsDynamodbTableV2)(nil)).Elem()
}

func (o AwsDynamodbTableV2Output) ToAwsDynamodbTableV2Output() AwsDynamodbTableV2Output {
	return o
}

func (o AwsDynamodbTableV2Output) ToAwsDynamodbTableV2OutputWithContext(ctx context.Context) AwsDynamodbTableV2Output {
	return o
}

// The ARN of the dynamodb table.
func (o AwsDynamodbTableV2Output) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o AwsDynamodbTableV2Output) Attributes() AwsDynamodbTableV2AttributeArrayOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) AwsDynamodbTableV2AttributeArrayOutput { return v.Attributes }).(AwsDynamodbTableV2AttributeArrayOutput)
}

// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
func (o AwsDynamodbTableV2Output) BillingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) pulumi.StringPtrOutput { return v.BillingMode }).(pulumi.StringPtrOutput)
}

// Deletion protection keeps the tables from being deleted unintentionally. While this setting is on, you can't delete the table.
func (o AwsDynamodbTableV2Output) DeletionProtectionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) pulumi.BoolOutput { return v.DeletionProtectionEnabled }).(pulumi.BoolOutput)
}

// The name of the table, this needs to be unique within a region.
func (o AwsDynamodbTableV2Output) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

// Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.
func (o AwsDynamodbTableV2Output) GlobalSecondaryIndices() AwsDynamodbTableV2GlobalSecondaryIndexArrayOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) AwsDynamodbTableV2GlobalSecondaryIndexArrayOutput {
		return v.GlobalSecondaryIndices
	}).(AwsDynamodbTableV2GlobalSecondaryIndexArrayOutput)
}

// The point in time recovery status of the dynamodb table. Enabled if true.
func (o AwsDynamodbTableV2Output) IsPointInTimeRecovery() pulumi.BoolOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) pulumi.BoolOutput { return v.IsPointInTimeRecovery }).(pulumi.BoolOutput)
}

func (o AwsDynamodbTableV2Output) KeySchemas() AwsDynamodbTableV2KeySchemaArrayOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) AwsDynamodbTableV2KeySchemaArrayOutput { return v.KeySchemas }).(AwsDynamodbTableV2KeySchemaArrayOutput)
}

func (o AwsDynamodbTableV2Output) LocalSecondaryIndices() AwsDynamodbTableV2LocalSecondaryIndexArrayOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) AwsDynamodbTableV2LocalSecondaryIndexArrayOutput {
		return v.LocalSecondaryIndices
	}).(AwsDynamodbTableV2LocalSecondaryIndexArrayOutput)
}

// The name of the table, this needs to be unique within a region.
func (o AwsDynamodbTableV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of read units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
func (o AwsDynamodbTableV2Output) ReadCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) pulumi.IntPtrOutput { return v.ReadCapacity }).(pulumi.IntPtrOutput)
}

// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
func (o AwsDynamodbTableV2Output) ServerSideEncryption() AwsDynamodbTableV2ServerSideEncryptionOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) AwsDynamodbTableV2ServerSideEncryptionOutput {
		return v.ServerSideEncryption
	}).(AwsDynamodbTableV2ServerSideEncryptionOutput)
}

// The status of the dynamodb table.
func (o AwsDynamodbTableV2Output) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o AwsDynamodbTableV2Output) StreamArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) pulumi.StringOutput { return v.StreamArn }).(pulumi.StringOutput)
}

// Indicates whether Streams are to be enabled (true) or disabled (false).
func (o AwsDynamodbTableV2Output) StreamEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) pulumi.BoolPtrOutput { return v.StreamEnabled }).(pulumi.BoolPtrOutput)
}

func (o AwsDynamodbTableV2Output) StreamLabel() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) pulumi.StringOutput { return v.StreamLabel }).(pulumi.StringOutput)
}

// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
func (o AwsDynamodbTableV2Output) StreamViewType() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) pulumi.StringOutput { return v.StreamViewType }).(pulumi.StringOutput)
}

func (o AwsDynamodbTableV2Output) Tags() AwsDynamodbTableV2TagArrayOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) AwsDynamodbTableV2TagArrayOutput { return v.Tags }).(AwsDynamodbTableV2TagArrayOutput)
}

// The GUID of the tenant that the dynamodb table will be created in.
func (o AwsDynamodbTableV2Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Setup ttl for dynamodb table. Defaults to `false or empty`, To disable ttl, enabled field should be set to false
func (o AwsDynamodbTableV2Output) Ttl() AwsDynamodbTableV2TtlPtrOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) AwsDynamodbTableV2TtlPtrOutput { return v.Ttl }).(AwsDynamodbTableV2TtlPtrOutput)
}

// Whether or not to wait until dynamodb instance to be ready, after creation. Defaults to `true`.
func (o AwsDynamodbTableV2Output) WaitUntilReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) pulumi.BoolPtrOutput { return v.WaitUntilReady }).(pulumi.BoolPtrOutput)
}

// The number of write units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
func (o AwsDynamodbTableV2Output) WriteCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AwsDynamodbTableV2) pulumi.IntPtrOutput { return v.WriteCapacity }).(pulumi.IntPtrOutput)
}

type AwsDynamodbTableV2ArrayOutput struct{ *pulumi.OutputState }

func (AwsDynamodbTableV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsDynamodbTableV2)(nil)).Elem()
}

func (o AwsDynamodbTableV2ArrayOutput) ToAwsDynamodbTableV2ArrayOutput() AwsDynamodbTableV2ArrayOutput {
	return o
}

func (o AwsDynamodbTableV2ArrayOutput) ToAwsDynamodbTableV2ArrayOutputWithContext(ctx context.Context) AwsDynamodbTableV2ArrayOutput {
	return o
}

func (o AwsDynamodbTableV2ArrayOutput) Index(i pulumi.IntInput) AwsDynamodbTableV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsDynamodbTableV2 {
		return vs[0].([]*AwsDynamodbTableV2)[vs[1].(int)]
	}).(AwsDynamodbTableV2Output)
}

type AwsDynamodbTableV2MapOutput struct{ *pulumi.OutputState }

func (AwsDynamodbTableV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsDynamodbTableV2)(nil)).Elem()
}

func (o AwsDynamodbTableV2MapOutput) ToAwsDynamodbTableV2MapOutput() AwsDynamodbTableV2MapOutput {
	return o
}

func (o AwsDynamodbTableV2MapOutput) ToAwsDynamodbTableV2MapOutputWithContext(ctx context.Context) AwsDynamodbTableV2MapOutput {
	return o
}

func (o AwsDynamodbTableV2MapOutput) MapIndex(k pulumi.StringInput) AwsDynamodbTableV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsDynamodbTableV2 {
		return vs[0].(map[string]*AwsDynamodbTableV2)[vs[1].(string)]
	}).(AwsDynamodbTableV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsDynamodbTableV2Input)(nil)).Elem(), &AwsDynamodbTableV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsDynamodbTableV2ArrayInput)(nil)).Elem(), AwsDynamodbTableV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsDynamodbTableV2MapInput)(nil)).Elem(), AwsDynamodbTableV2Map{})
	pulumi.RegisterOutputType(AwsDynamodbTableV2Output{})
	pulumi.RegisterOutputType(AwsDynamodbTableV2ArrayOutput{})
	pulumi.RegisterOutputType(AwsDynamodbTableV2MapOutput{})
}
