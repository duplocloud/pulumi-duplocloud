// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Create a DuploCloud tenant named 'prod'.
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.
//			infra, err := duplocloud.NewInfrastructure(ctx, "infra", &duplocloud.InfrastructureArgs{
//				InfraName:       pulumi.String("prod"),
//				Cloud:           pulumi.Int(0),
//				Region:          pulumi.String("us-west-2"),
//				EnableK8Cluster: pulumi.Bool(false),
//				AddressPrefix:   pulumi.String("10.11.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.
//			_, err = duplocloud.NewTenant(ctx, "tenant", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("prod"),
//				PlanId:      infra.InfraName,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a DuploCloud tenant named 'prod' inside the following prod infra.
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewInfrastructure(ctx, "infra", &duplocloud.InfrastructureArgs{
//				InfraName:       pulumi.String("prod"),
//				Cloud:           pulumi.Int(0),
//				Region:          pulumi.String("us-west-2"),
//				EnableK8Cluster: pulumi.Bool(false),
//				AddressPrefix:   pulumi.String("10.11.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource.
//			_, err := duplocloud.NewTenant(ctx, "tenant", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("prod"),
//				PlanId:      pulumi.Any(infra.InfraName),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a DuploCloud tenant named 'dev' within the 'nonprod' infrastructure.
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Ensure the 'nonprod' infrastructure is already created before setting up the tenant.
//			infra, err := duplocloud.LookupInfrastructure(ctx, &duplocloud.LookupInfrastructureArgs{
//				InfraName: pulumi.StringRef("nonprod"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewTenant(ctx, "tenant", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("dev"),
//				PlanId:      pulumi.String(infra.InfraName),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a DuploCloud tenant named 'dev' with infra name variable and tenant id as output.
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			infraName := "nonprod"
//			if param := cfg.Get("infraName"); param != "" {
//				infraName = param
//			}
//			// Ensure the 'nonprod' infrastructure is already created before setting up the tenant.
//			infra, err := duplocloud.LookupInfrastructure(ctx, &duplocloud.LookupInfrastructureArgs{
//				InfraName: pulumi.StringRef("nonprod"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			tenant, err := duplocloud.NewTenant(ctx, "tenant", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("dev"),
//				PlanId:      pulumi.String(infra.InfraName),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("tenantId", tenant.TenantId)
//			return nil
//		})
//	}
//
// ```
//
// ### Create a duplocloud tenant named dev with AWS Cognito power user access in the nonprod infrastructure.
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi-aws/sdk/go/aws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.
//			infra, err := duplocloud.LookupInfrastructure(ctx, &duplocloud.LookupInfrastructureArgs{
//				InfraName: pulumi.StringRef("nonprod"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Here’s how to create a tenant by providing the infrastructure name for the plan_id field.
//			tenant, err := duplocloud.NewTenant(ctx, "tenant", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("dev"),
//				PlanId:      pulumi.String(infra.InfraName),
//			})
//			if err != nil {
//				return err
//			}
//			// Attaches a managed IAM policy to an IAM role.
//			_, err = aws.NewIamRolePolicyAttachment(ctx, "AmazonCognitoPowerUser", &aws.IamRolePolicyAttachmentArgs{
//				Role:      pulumi.Sprintf("duploservices-%v", tenant.AccountName),
//				PolicyArn: "arn:aws:iam::aws:policy/AmazonCognitoPowerUser",
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a DuploCloud tenant named 'qa' with full access to invoke AWS API Gateway in the nonprod infrastructure.
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi-aws/sdk/go/aws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.
//			infra, err := duplocloud.LookupInfrastructure(ctx, &duplocloud.LookupInfrastructureArgs{
//				InfraName: pulumi.StringRef("nonprod"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Here’s how to create a tenant by providing the infrastructure name for the plan_id field.
//			tenant, err := duplocloud.NewTenant(ctx, "tenant", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("qa"),
//				PlanId:      pulumi.String(infra.InfraName),
//			})
//			if err != nil {
//				return err
//			}
//			// Attaches a managed IAM policy to an IAM role.
//			_, err = aws.NewIamRolePolicyAttachment(ctx, "AmazonAPIGatewayInvokeFullAccess", &aws.IamRolePolicyAttachmentArgs{
//				Role:      pulumi.Sprintf("duploservices-%v", tenant.AccountName),
//				PolicyArn: "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess",
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create duplocloud tenant named dev with security group rule to allow access from 10.220.0.0/16 on port 5432 in nonprod infra’
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			infra, err := duplocloud.LookupInfrastructure(ctx, &duplocloud.LookupInfrastructureArgs{
//				InfraName: pulumi.StringRef("nonprod"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			tenant, err := duplocloud.NewTenant(ctx, "tenant", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("dev"),
//				PlanId:      pulumi.String(infra.InfraName),
//			})
//			if err != nil {
//				return err
//			}
//			// Allow communication on port 5432 for the PostgreSQL database from the 10.220.0.0/16 subnet
//			_, err = duplocloud.NewTenantNetworkSecurityRule(ctx, "allow_from_vpn", &duplocloud.TenantNetworkSecurityRuleArgs{
//				TenantId:      tenant.TenantId,
//				SourceAddress: pulumi.String("10.220.0.0/16"),
//				Protocol:      pulumi.String("tcp"),
//				FromPort:      pulumi.Int(5432),
//				ToPort:        pulumi.Int(5432),
//				Description:   pulumi.String("Allow communication from 10.220.0.0/16 on port 5432."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Setup duplocloud tenant named dev with security group rule to allow access from 10.220.0.0/16 on port 22 in nonprod infra’
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			infra, err := duplocloud.LookupInfrastructure(ctx, &duplocloud.LookupInfrastructureArgs{
//				InfraName: pulumi.StringRef("nonprod"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			tenant, err := duplocloud.NewTenant(ctx, "tenant", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("dev"),
//				PlanId:      pulumi.String(infra.InfraName),
//			})
//			if err != nil {
//				return err
//			}
//			// Allow communication on port 22 from the 10.220.0.0/16 subnet.
//			_, err = duplocloud.NewTenantNetworkSecurityRule(ctx, "allow_from_vpn", &duplocloud.TenantNetworkSecurityRuleArgs{
//				TenantId:      tenant.TenantId,
//				SourceAddress: pulumi.String("10.220.0.0/16"),
//				Protocol:      pulumi.String("tcp"),
//				FromPort:      pulumi.Int(22),
//				ToPort:        pulumi.Int(22),
//				Description:   pulumi.String("Allow communication from 10.220.0.0/16 on port 22."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Provision a tenant named 'myapp' within the infrastructure 'myinfra' and disable deletion protection.
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			infra, err := duplocloud.LookupInfrastructure(ctx, &duplocloud.LookupInfrastructureArgs{
//				InfraName: pulumi.StringRef("myinfra"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			tenant, err := duplocloud.NewTenant(ctx, "tenant", &duplocloud.TenantArgs{
//				AccountName:   pulumi.String("myapp"),
//				PlanId:        pulumi.String(infra.InfraName),
//				AllowDeletion: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			// Reference the tenant_id field from the duplocloud_tenant resource.
//			_, err = duplocloud.NewTenantConfig(ctx, "tenant_config", &duplocloud.TenantConfigArgs{
//				TenantId: tenant.TenantId,
//				Settings: duplocloud.TenantConfigSettingArray{
//					&duplocloud.TenantConfigSettingArgs{
//						Key:   pulumi.String("delete_protection"),
//						Value: pulumi.String("false"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Provision a tenant named 'myapp' within the infrastructure 'myinfra', and ensure that the S3 bucket has public access blocked and SSL enforcement enabled in the S3 bucket policy.
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			infra, err := duplocloud.LookupInfrastructure(ctx, &duplocloud.LookupInfrastructureArgs{
//				InfraName: pulumi.StringRef("myinfra"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			tenant, err := duplocloud.NewTenant(ctx, "tenant", &duplocloud.TenantArgs{
//				AccountName:   pulumi.String("myapp"),
//				PlanId:        pulumi.String(infra.InfraName),
//				AllowDeletion: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			// Reference the tenant_id field from the duplocloud_tenant resource.
//			_, err = duplocloud.NewTenantConfig(ctx, "tenant_config", &duplocloud.TenantConfigArgs{
//				TenantId: tenant.TenantId,
//				Settings: duplocloud.TenantConfigSettingArray{
//					&duplocloud.TenantConfigSettingArgs{
//						Key:   pulumi.String("block_public_access_to_s3"),
//						Value: pulumi.String("true"),
//					},
//					&duplocloud.TenantConfigSettingArgs{
//						Key:   pulumi.String("enforce_ssl_for_s3"),
//						Value: pulumi.String("true"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import duplocloud:index/tenant:Tenant myapp v2/admin/TenantV2/*TENANT_ID*
// ```
type Tenant struct {
	pulumi.CustomResourceState

	// The name of the tenant. Tenant names are globally unique, and cannot be a prefix of any other tenant name.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// Whether or not to even try and delete the tenant. *NOTE: This only works if you have disabled deletion protection for the tenant.* Defaults to `false`.
	AllowDeletion pulumi.BoolPtrOutput `pulumi:"allowDeletion"`
	// Existing kubernetes namespace to use by the tenant. *NOTE: This is an advanced feature, please contact your DuploCloud administrator for help if you want to use this field.*
	ExistingK8sNamespace pulumi.StringOutput `pulumi:"existingK8sNamespace"`
	InfraOwner           pulumi.StringOutput `pulumi:"infraOwner"`
	// The name of the plan under which the tenant will be created.
	PlanId   pulumi.StringOutput      `pulumi:"planId"`
	Policies TenantPolicyArrayOutput  `pulumi:"policies"`
	Tags     TenantTagTypeArrayOutput `pulumi:"tags"`
	// A GUID identifying the tenant. This is automatically generated by Duplo.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Whether or not to wait until Duplo has created the tenant. Defaults to `true`.
	WaitUntilCreated pulumi.BoolPtrOutput `pulumi:"waitUntilCreated"`
	// Whether or not to wait until Duplo has destroyed the tenant. Defaults to `false`.
	WaitUntilDeleted pulumi.BoolPtrOutput `pulumi:"waitUntilDeleted"`
}

// NewTenant registers a new resource with the given unique name, arguments, and options.
func NewTenant(ctx *pulumi.Context,
	name string, args *TenantArgs, opts ...pulumi.ResourceOption) (*Tenant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.PlanId == nil {
		return nil, errors.New("invalid value for required argument 'PlanId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tenant
	err := ctx.RegisterResource("duplocloud:index/tenant:Tenant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTenant gets an existing Tenant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTenant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TenantState, opts ...pulumi.ResourceOption) (*Tenant, error) {
	var resource Tenant
	err := ctx.ReadResource("duplocloud:index/tenant:Tenant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tenant resources.
type tenantState struct {
	// The name of the tenant. Tenant names are globally unique, and cannot be a prefix of any other tenant name.
	AccountName *string `pulumi:"accountName"`
	// Whether or not to even try and delete the tenant. *NOTE: This only works if you have disabled deletion protection for the tenant.* Defaults to `false`.
	AllowDeletion *bool `pulumi:"allowDeletion"`
	// Existing kubernetes namespace to use by the tenant. *NOTE: This is an advanced feature, please contact your DuploCloud administrator for help if you want to use this field.*
	ExistingK8sNamespace *string `pulumi:"existingK8sNamespace"`
	InfraOwner           *string `pulumi:"infraOwner"`
	// The name of the plan under which the tenant will be created.
	PlanId   *string         `pulumi:"planId"`
	Policies []TenantPolicy  `pulumi:"policies"`
	Tags     []TenantTagType `pulumi:"tags"`
	// A GUID identifying the tenant. This is automatically generated by Duplo.
	TenantId *string `pulumi:"tenantId"`
	// Whether or not to wait until Duplo has created the tenant. Defaults to `true`.
	WaitUntilCreated *bool `pulumi:"waitUntilCreated"`
	// Whether or not to wait until Duplo has destroyed the tenant. Defaults to `false`.
	WaitUntilDeleted *bool `pulumi:"waitUntilDeleted"`
}

type TenantState struct {
	// The name of the tenant. Tenant names are globally unique, and cannot be a prefix of any other tenant name.
	AccountName pulumi.StringPtrInput
	// Whether or not to even try and delete the tenant. *NOTE: This only works if you have disabled deletion protection for the tenant.* Defaults to `false`.
	AllowDeletion pulumi.BoolPtrInput
	// Existing kubernetes namespace to use by the tenant. *NOTE: This is an advanced feature, please contact your DuploCloud administrator for help if you want to use this field.*
	ExistingK8sNamespace pulumi.StringPtrInput
	InfraOwner           pulumi.StringPtrInput
	// The name of the plan under which the tenant will be created.
	PlanId   pulumi.StringPtrInput
	Policies TenantPolicyArrayInput
	Tags     TenantTagTypeArrayInput
	// A GUID identifying the tenant. This is automatically generated by Duplo.
	TenantId pulumi.StringPtrInput
	// Whether or not to wait until Duplo has created the tenant. Defaults to `true`.
	WaitUntilCreated pulumi.BoolPtrInput
	// Whether or not to wait until Duplo has destroyed the tenant. Defaults to `false`.
	WaitUntilDeleted pulumi.BoolPtrInput
}

func (TenantState) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantState)(nil)).Elem()
}

type tenantArgs struct {
	// The name of the tenant. Tenant names are globally unique, and cannot be a prefix of any other tenant name.
	AccountName string `pulumi:"accountName"`
	// Whether or not to even try and delete the tenant. *NOTE: This only works if you have disabled deletion protection for the tenant.* Defaults to `false`.
	AllowDeletion *bool `pulumi:"allowDeletion"`
	// Existing kubernetes namespace to use by the tenant. *NOTE: This is an advanced feature, please contact your DuploCloud administrator for help if you want to use this field.*
	ExistingK8sNamespace *string `pulumi:"existingK8sNamespace"`
	// The name of the plan under which the tenant will be created.
	PlanId string `pulumi:"planId"`
	// Whether or not to wait until Duplo has created the tenant. Defaults to `true`.
	WaitUntilCreated *bool `pulumi:"waitUntilCreated"`
	// Whether or not to wait until Duplo has destroyed the tenant. Defaults to `false`.
	WaitUntilDeleted *bool `pulumi:"waitUntilDeleted"`
}

// The set of arguments for constructing a Tenant resource.
type TenantArgs struct {
	// The name of the tenant. Tenant names are globally unique, and cannot be a prefix of any other tenant name.
	AccountName pulumi.StringInput
	// Whether or not to even try and delete the tenant. *NOTE: This only works if you have disabled deletion protection for the tenant.* Defaults to `false`.
	AllowDeletion pulumi.BoolPtrInput
	// Existing kubernetes namespace to use by the tenant. *NOTE: This is an advanced feature, please contact your DuploCloud administrator for help if you want to use this field.*
	ExistingK8sNamespace pulumi.StringPtrInput
	// The name of the plan under which the tenant will be created.
	PlanId pulumi.StringInput
	// Whether or not to wait until Duplo has created the tenant. Defaults to `true`.
	WaitUntilCreated pulumi.BoolPtrInput
	// Whether or not to wait until Duplo has destroyed the tenant. Defaults to `false`.
	WaitUntilDeleted pulumi.BoolPtrInput
}

func (TenantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantArgs)(nil)).Elem()
}

type TenantInput interface {
	pulumi.Input

	ToTenantOutput() TenantOutput
	ToTenantOutputWithContext(ctx context.Context) TenantOutput
}

func (*Tenant) ElementType() reflect.Type {
	return reflect.TypeOf((**Tenant)(nil)).Elem()
}

func (i *Tenant) ToTenantOutput() TenantOutput {
	return i.ToTenantOutputWithContext(context.Background())
}

func (i *Tenant) ToTenantOutputWithContext(ctx context.Context) TenantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantOutput)
}

// TenantArrayInput is an input type that accepts TenantArray and TenantArrayOutput values.
// You can construct a concrete instance of `TenantArrayInput` via:
//
//	TenantArray{ TenantArgs{...} }
type TenantArrayInput interface {
	pulumi.Input

	ToTenantArrayOutput() TenantArrayOutput
	ToTenantArrayOutputWithContext(context.Context) TenantArrayOutput
}

type TenantArray []TenantInput

func (TenantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tenant)(nil)).Elem()
}

func (i TenantArray) ToTenantArrayOutput() TenantArrayOutput {
	return i.ToTenantArrayOutputWithContext(context.Background())
}

func (i TenantArray) ToTenantArrayOutputWithContext(ctx context.Context) TenantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantArrayOutput)
}

// TenantMapInput is an input type that accepts TenantMap and TenantMapOutput values.
// You can construct a concrete instance of `TenantMapInput` via:
//
//	TenantMap{ "key": TenantArgs{...} }
type TenantMapInput interface {
	pulumi.Input

	ToTenantMapOutput() TenantMapOutput
	ToTenantMapOutputWithContext(context.Context) TenantMapOutput
}

type TenantMap map[string]TenantInput

func (TenantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tenant)(nil)).Elem()
}

func (i TenantMap) ToTenantMapOutput() TenantMapOutput {
	return i.ToTenantMapOutputWithContext(context.Background())
}

func (i TenantMap) ToTenantMapOutputWithContext(ctx context.Context) TenantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantMapOutput)
}

type TenantOutput struct{ *pulumi.OutputState }

func (TenantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tenant)(nil)).Elem()
}

func (o TenantOutput) ToTenantOutput() TenantOutput {
	return o
}

func (o TenantOutput) ToTenantOutputWithContext(ctx context.Context) TenantOutput {
	return o
}

// The name of the tenant. Tenant names are globally unique, and cannot be a prefix of any other tenant name.
func (o TenantOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// Whether or not to even try and delete the tenant. *NOTE: This only works if you have disabled deletion protection for the tenant.* Defaults to `false`.
func (o TenantOutput) AllowDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.BoolPtrOutput { return v.AllowDeletion }).(pulumi.BoolPtrOutput)
}

// Existing kubernetes namespace to use by the tenant. *NOTE: This is an advanced feature, please contact your DuploCloud administrator for help if you want to use this field.*
func (o TenantOutput) ExistingK8sNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.ExistingK8sNamespace }).(pulumi.StringOutput)
}

func (o TenantOutput) InfraOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.InfraOwner }).(pulumi.StringOutput)
}

// The name of the plan under which the tenant will be created.
func (o TenantOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

func (o TenantOutput) Policies() TenantPolicyArrayOutput {
	return o.ApplyT(func(v *Tenant) TenantPolicyArrayOutput { return v.Policies }).(TenantPolicyArrayOutput)
}

func (o TenantOutput) Tags() TenantTagTypeArrayOutput {
	return o.ApplyT(func(v *Tenant) TenantTagTypeArrayOutput { return v.Tags }).(TenantTagTypeArrayOutput)
}

// A GUID identifying the tenant. This is automatically generated by Duplo.
func (o TenantOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Whether or not to wait until Duplo has created the tenant. Defaults to `true`.
func (o TenantOutput) WaitUntilCreated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.BoolPtrOutput { return v.WaitUntilCreated }).(pulumi.BoolPtrOutput)
}

// Whether or not to wait until Duplo has destroyed the tenant. Defaults to `false`.
func (o TenantOutput) WaitUntilDeleted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.BoolPtrOutput { return v.WaitUntilDeleted }).(pulumi.BoolPtrOutput)
}

type TenantArrayOutput struct{ *pulumi.OutputState }

func (TenantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tenant)(nil)).Elem()
}

func (o TenantArrayOutput) ToTenantArrayOutput() TenantArrayOutput {
	return o
}

func (o TenantArrayOutput) ToTenantArrayOutputWithContext(ctx context.Context) TenantArrayOutput {
	return o
}

func (o TenantArrayOutput) Index(i pulumi.IntInput) TenantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Tenant {
		return vs[0].([]*Tenant)[vs[1].(int)]
	}).(TenantOutput)
}

type TenantMapOutput struct{ *pulumi.OutputState }

func (TenantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tenant)(nil)).Elem()
}

func (o TenantMapOutput) ToTenantMapOutput() TenantMapOutput {
	return o
}

func (o TenantMapOutput) ToTenantMapOutputWithContext(ctx context.Context) TenantMapOutput {
	return o
}

func (o TenantMapOutput) MapIndex(k pulumi.StringInput) TenantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Tenant {
		return vs[0].(map[string]*Tenant)[vs[1].(string)]
	}).(TenantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TenantInput)(nil)).Elem(), &Tenant{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantArrayInput)(nil)).Elem(), TenantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantMapInput)(nil)).Elem(), TenantMap{})
	pulumi.RegisterOutputType(TenantOutput{})
	pulumi.RegisterOutputType(TenantArrayOutput{})
	pulumi.RegisterOutputType(TenantMapOutput{})
}
