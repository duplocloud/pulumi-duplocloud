// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AwsEcrRepository` manages an aws ecr repository in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAwsEcrRepository(ctx, "test-ecr", &duplocloud.AwsEcrRepositoryArgs{
//				TenantId:              myapp.TenantId,
//				Name:                  pulumi.String("test-ecr"),
//				EnableScanImageOnPush: pulumi.Bool(true),
//				EnableTagImmutability: pulumi.Bool(true),
//				ForceDelete:           pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing AWS ECR repository
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the AWS ECR repository
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/awsEcrRepository:AwsEcrRepository myecr *TENANT_ID*/*SHORT_NAME*
// ```
type AwsEcrRepository struct {
	pulumi.CustomResourceState

	// Full ARN of the ECR repository.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
	EnableScanImageOnPush pulumi.BoolOutput `pulumi:"enableScanImageOnPush"`
	// The tag mutability setting for the repository.
	EnableTagImmutability pulumi.BoolOutput `pulumi:"enableTagImmutability"`
	// Whether to force delete the repository on destroy operations Defaults to `false`.
	ForceDelete pulumi.BoolPtrOutput `pulumi:"forceDelete"`
	// The ARN of the KMS key to use.
	KmsEncryptionKey pulumi.StringOutput `pulumi:"kmsEncryptionKey"`
	// The name of the ECR Repository.
	Name pulumi.StringOutput `pulumi:"name"`
	// The registry ID where the repository was created.
	RegistryId pulumi.StringOutput `pulumi:"registryId"`
	// The URL of the repository.
	RepositoryUrl pulumi.StringOutput `pulumi:"repositoryUrl"`
	// The GUID of the tenant that the aws ecr repository will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewAwsEcrRepository registers a new resource with the given unique name, arguments, and options.
func NewAwsEcrRepository(ctx *pulumi.Context,
	name string, args *AwsEcrRepositoryArgs, opts ...pulumi.ResourceOption) (*AwsEcrRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsEcrRepository
	err := ctx.RegisterResource("duplocloud:index/awsEcrRepository:AwsEcrRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsEcrRepository gets an existing AwsEcrRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsEcrRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsEcrRepositoryState, opts ...pulumi.ResourceOption) (*AwsEcrRepository, error) {
	var resource AwsEcrRepository
	err := ctx.ReadResource("duplocloud:index/awsEcrRepository:AwsEcrRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsEcrRepository resources.
type awsEcrRepositoryState struct {
	// Full ARN of the ECR repository.
	Arn *string `pulumi:"arn"`
	// Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
	EnableScanImageOnPush *bool `pulumi:"enableScanImageOnPush"`
	// The tag mutability setting for the repository.
	EnableTagImmutability *bool `pulumi:"enableTagImmutability"`
	// Whether to force delete the repository on destroy operations Defaults to `false`.
	ForceDelete *bool `pulumi:"forceDelete"`
	// The ARN of the KMS key to use.
	KmsEncryptionKey *string `pulumi:"kmsEncryptionKey"`
	// The name of the ECR Repository.
	Name *string `pulumi:"name"`
	// The registry ID where the repository was created.
	RegistryId *string `pulumi:"registryId"`
	// The URL of the repository.
	RepositoryUrl *string `pulumi:"repositoryUrl"`
	// The GUID of the tenant that the aws ecr repository will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type AwsEcrRepositoryState struct {
	// Full ARN of the ECR repository.
	Arn pulumi.StringPtrInput
	// Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
	EnableScanImageOnPush pulumi.BoolPtrInput
	// The tag mutability setting for the repository.
	EnableTagImmutability pulumi.BoolPtrInput
	// Whether to force delete the repository on destroy operations Defaults to `false`.
	ForceDelete pulumi.BoolPtrInput
	// The ARN of the KMS key to use.
	KmsEncryptionKey pulumi.StringPtrInput
	// The name of the ECR Repository.
	Name pulumi.StringPtrInput
	// The registry ID where the repository was created.
	RegistryId pulumi.StringPtrInput
	// The URL of the repository.
	RepositoryUrl pulumi.StringPtrInput
	// The GUID of the tenant that the aws ecr repository will be created in.
	TenantId pulumi.StringPtrInput
}

func (AwsEcrRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsEcrRepositoryState)(nil)).Elem()
}

type awsEcrRepositoryArgs struct {
	// Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
	EnableScanImageOnPush *bool `pulumi:"enableScanImageOnPush"`
	// The tag mutability setting for the repository.
	EnableTagImmutability *bool `pulumi:"enableTagImmutability"`
	// Whether to force delete the repository on destroy operations Defaults to `false`.
	ForceDelete *bool `pulumi:"forceDelete"`
	// The ARN of the KMS key to use.
	KmsEncryptionKey *string `pulumi:"kmsEncryptionKey"`
	// The name of the ECR Repository.
	Name *string `pulumi:"name"`
	// The GUID of the tenant that the aws ecr repository will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AwsEcrRepository resource.
type AwsEcrRepositoryArgs struct {
	// Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
	EnableScanImageOnPush pulumi.BoolPtrInput
	// The tag mutability setting for the repository.
	EnableTagImmutability pulumi.BoolPtrInput
	// Whether to force delete the repository on destroy operations Defaults to `false`.
	ForceDelete pulumi.BoolPtrInput
	// The ARN of the KMS key to use.
	KmsEncryptionKey pulumi.StringPtrInput
	// The name of the ECR Repository.
	Name pulumi.StringPtrInput
	// The GUID of the tenant that the aws ecr repository will be created in.
	TenantId pulumi.StringInput
}

func (AwsEcrRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsEcrRepositoryArgs)(nil)).Elem()
}

type AwsEcrRepositoryInput interface {
	pulumi.Input

	ToAwsEcrRepositoryOutput() AwsEcrRepositoryOutput
	ToAwsEcrRepositoryOutputWithContext(ctx context.Context) AwsEcrRepositoryOutput
}

func (*AwsEcrRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsEcrRepository)(nil)).Elem()
}

func (i *AwsEcrRepository) ToAwsEcrRepositoryOutput() AwsEcrRepositoryOutput {
	return i.ToAwsEcrRepositoryOutputWithContext(context.Background())
}

func (i *AwsEcrRepository) ToAwsEcrRepositoryOutputWithContext(ctx context.Context) AwsEcrRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsEcrRepositoryOutput)
}

// AwsEcrRepositoryArrayInput is an input type that accepts AwsEcrRepositoryArray and AwsEcrRepositoryArrayOutput values.
// You can construct a concrete instance of `AwsEcrRepositoryArrayInput` via:
//
//	AwsEcrRepositoryArray{ AwsEcrRepositoryArgs{...} }
type AwsEcrRepositoryArrayInput interface {
	pulumi.Input

	ToAwsEcrRepositoryArrayOutput() AwsEcrRepositoryArrayOutput
	ToAwsEcrRepositoryArrayOutputWithContext(context.Context) AwsEcrRepositoryArrayOutput
}

type AwsEcrRepositoryArray []AwsEcrRepositoryInput

func (AwsEcrRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsEcrRepository)(nil)).Elem()
}

func (i AwsEcrRepositoryArray) ToAwsEcrRepositoryArrayOutput() AwsEcrRepositoryArrayOutput {
	return i.ToAwsEcrRepositoryArrayOutputWithContext(context.Background())
}

func (i AwsEcrRepositoryArray) ToAwsEcrRepositoryArrayOutputWithContext(ctx context.Context) AwsEcrRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsEcrRepositoryArrayOutput)
}

// AwsEcrRepositoryMapInput is an input type that accepts AwsEcrRepositoryMap and AwsEcrRepositoryMapOutput values.
// You can construct a concrete instance of `AwsEcrRepositoryMapInput` via:
//
//	AwsEcrRepositoryMap{ "key": AwsEcrRepositoryArgs{...} }
type AwsEcrRepositoryMapInput interface {
	pulumi.Input

	ToAwsEcrRepositoryMapOutput() AwsEcrRepositoryMapOutput
	ToAwsEcrRepositoryMapOutputWithContext(context.Context) AwsEcrRepositoryMapOutput
}

type AwsEcrRepositoryMap map[string]AwsEcrRepositoryInput

func (AwsEcrRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsEcrRepository)(nil)).Elem()
}

func (i AwsEcrRepositoryMap) ToAwsEcrRepositoryMapOutput() AwsEcrRepositoryMapOutput {
	return i.ToAwsEcrRepositoryMapOutputWithContext(context.Background())
}

func (i AwsEcrRepositoryMap) ToAwsEcrRepositoryMapOutputWithContext(ctx context.Context) AwsEcrRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsEcrRepositoryMapOutput)
}

type AwsEcrRepositoryOutput struct{ *pulumi.OutputState }

func (AwsEcrRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsEcrRepository)(nil)).Elem()
}

func (o AwsEcrRepositoryOutput) ToAwsEcrRepositoryOutput() AwsEcrRepositoryOutput {
	return o
}

func (o AwsEcrRepositoryOutput) ToAwsEcrRepositoryOutputWithContext(ctx context.Context) AwsEcrRepositoryOutput {
	return o
}

// Full ARN of the ECR repository.
func (o AwsEcrRepositoryOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsEcrRepository) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
func (o AwsEcrRepositoryOutput) EnableScanImageOnPush() pulumi.BoolOutput {
	return o.ApplyT(func(v *AwsEcrRepository) pulumi.BoolOutput { return v.EnableScanImageOnPush }).(pulumi.BoolOutput)
}

// The tag mutability setting for the repository.
func (o AwsEcrRepositoryOutput) EnableTagImmutability() pulumi.BoolOutput {
	return o.ApplyT(func(v *AwsEcrRepository) pulumi.BoolOutput { return v.EnableTagImmutability }).(pulumi.BoolOutput)
}

// Whether to force delete the repository on destroy operations Defaults to `false`.
func (o AwsEcrRepositoryOutput) ForceDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AwsEcrRepository) pulumi.BoolPtrOutput { return v.ForceDelete }).(pulumi.BoolPtrOutput)
}

// The ARN of the KMS key to use.
func (o AwsEcrRepositoryOutput) KmsEncryptionKey() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsEcrRepository) pulumi.StringOutput { return v.KmsEncryptionKey }).(pulumi.StringOutput)
}

// The name of the ECR Repository.
func (o AwsEcrRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsEcrRepository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The registry ID where the repository was created.
func (o AwsEcrRepositoryOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsEcrRepository) pulumi.StringOutput { return v.RegistryId }).(pulumi.StringOutput)
}

// The URL of the repository.
func (o AwsEcrRepositoryOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsEcrRepository) pulumi.StringOutput { return v.RepositoryUrl }).(pulumi.StringOutput)
}

// The GUID of the tenant that the aws ecr repository will be created in.
func (o AwsEcrRepositoryOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsEcrRepository) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type AwsEcrRepositoryArrayOutput struct{ *pulumi.OutputState }

func (AwsEcrRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsEcrRepository)(nil)).Elem()
}

func (o AwsEcrRepositoryArrayOutput) ToAwsEcrRepositoryArrayOutput() AwsEcrRepositoryArrayOutput {
	return o
}

func (o AwsEcrRepositoryArrayOutput) ToAwsEcrRepositoryArrayOutputWithContext(ctx context.Context) AwsEcrRepositoryArrayOutput {
	return o
}

func (o AwsEcrRepositoryArrayOutput) Index(i pulumi.IntInput) AwsEcrRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsEcrRepository {
		return vs[0].([]*AwsEcrRepository)[vs[1].(int)]
	}).(AwsEcrRepositoryOutput)
}

type AwsEcrRepositoryMapOutput struct{ *pulumi.OutputState }

func (AwsEcrRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsEcrRepository)(nil)).Elem()
}

func (o AwsEcrRepositoryMapOutput) ToAwsEcrRepositoryMapOutput() AwsEcrRepositoryMapOutput {
	return o
}

func (o AwsEcrRepositoryMapOutput) ToAwsEcrRepositoryMapOutputWithContext(ctx context.Context) AwsEcrRepositoryMapOutput {
	return o
}

func (o AwsEcrRepositoryMapOutput) MapIndex(k pulumi.StringInput) AwsEcrRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsEcrRepository {
		return vs[0].(map[string]*AwsEcrRepository)[vs[1].(string)]
	}).(AwsEcrRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsEcrRepositoryInput)(nil)).Elem(), &AwsEcrRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsEcrRepositoryArrayInput)(nil)).Elem(), AwsEcrRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsEcrRepositoryMapInput)(nil)).Elem(), AwsEcrRepositoryMap{})
	pulumi.RegisterOutputType(AwsEcrRepositoryOutput{})
	pulumi.RegisterOutputType(AwsEcrRepositoryArrayOutput{})
	pulumi.RegisterOutputType(AwsEcrRepositoryMapOutput{})
}
