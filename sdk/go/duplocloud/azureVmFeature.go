// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureVmFeature` manages an Azure VM Feature in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			// supported feature names are "loganalytics", "publicip", "addsjoin", and "aadjoin"
//			_, err = duplocloud.NewAzureVmFeature(ctx, "vm_feature", &duplocloud.AzureVmFeatureArgs{
//				TenantId:    myapp.TenantId,
//				ComponentId: pulumi.String("p01-host01"),
//				FeatureName: pulumi.String("aadjoin"),
//				Enabled:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing Azure Virtual Machine Feature
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *VM_NAME* is the short name of the Azure Virtual Machine
//
//   - *FEATURE_NAME* is the short name of the Azure Virtual Machine Feature
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/azureVmFeature:AzureVmFeature vm_feature *TENANT_ID*/*VM_NAME*/*FEATURE_NAME*
// ```
type AzureVmFeature struct {
	pulumi.CustomResourceState

	// Specifies the name of the VM created in duplo. Changing this forces a new resource to be created.
	ComponentId pulumi.StringOutput `pulumi:"componentId"`
	// The status of the VM feature. By default, this is set to false.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The name of the VM feature to be enabled.
	FeatureName pulumi.StringOutput `pulumi:"featureName"`
	// The GUID of the tenant that the azure vm feature will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewAzureVmFeature registers a new resource with the given unique name, arguments, and options.
func NewAzureVmFeature(ctx *pulumi.Context,
	name string, args *AzureVmFeatureArgs, opts ...pulumi.ResourceOption) (*AzureVmFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ComponentId == nil {
		return nil, errors.New("invalid value for required argument 'ComponentId'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.FeatureName == nil {
		return nil, errors.New("invalid value for required argument 'FeatureName'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureVmFeature
	err := ctx.RegisterResource("duplocloud:index/azureVmFeature:AzureVmFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureVmFeature gets an existing AzureVmFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureVmFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureVmFeatureState, opts ...pulumi.ResourceOption) (*AzureVmFeature, error) {
	var resource AzureVmFeature
	err := ctx.ReadResource("duplocloud:index/azureVmFeature:AzureVmFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureVmFeature resources.
type azureVmFeatureState struct {
	// Specifies the name of the VM created in duplo. Changing this forces a new resource to be created.
	ComponentId *string `pulumi:"componentId"`
	// The status of the VM feature. By default, this is set to false.
	Enabled *bool `pulumi:"enabled"`
	// The name of the VM feature to be enabled.
	FeatureName *string `pulumi:"featureName"`
	// The GUID of the tenant that the azure vm feature will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type AzureVmFeatureState struct {
	// Specifies the name of the VM created in duplo. Changing this forces a new resource to be created.
	ComponentId pulumi.StringPtrInput
	// The status of the VM feature. By default, this is set to false.
	Enabled pulumi.BoolPtrInput
	// The name of the VM feature to be enabled.
	FeatureName pulumi.StringPtrInput
	// The GUID of the tenant that the azure vm feature will be created in.
	TenantId pulumi.StringPtrInput
}

func (AzureVmFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureVmFeatureState)(nil)).Elem()
}

type azureVmFeatureArgs struct {
	// Specifies the name of the VM created in duplo. Changing this forces a new resource to be created.
	ComponentId string `pulumi:"componentId"`
	// The status of the VM feature. By default, this is set to false.
	Enabled bool `pulumi:"enabled"`
	// The name of the VM feature to be enabled.
	FeatureName string `pulumi:"featureName"`
	// The GUID of the tenant that the azure vm feature will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AzureVmFeature resource.
type AzureVmFeatureArgs struct {
	// Specifies the name of the VM created in duplo. Changing this forces a new resource to be created.
	ComponentId pulumi.StringInput
	// The status of the VM feature. By default, this is set to false.
	Enabled pulumi.BoolInput
	// The name of the VM feature to be enabled.
	FeatureName pulumi.StringInput
	// The GUID of the tenant that the azure vm feature will be created in.
	TenantId pulumi.StringInput
}

func (AzureVmFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureVmFeatureArgs)(nil)).Elem()
}

type AzureVmFeatureInput interface {
	pulumi.Input

	ToAzureVmFeatureOutput() AzureVmFeatureOutput
	ToAzureVmFeatureOutputWithContext(ctx context.Context) AzureVmFeatureOutput
}

func (*AzureVmFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureVmFeature)(nil)).Elem()
}

func (i *AzureVmFeature) ToAzureVmFeatureOutput() AzureVmFeatureOutput {
	return i.ToAzureVmFeatureOutputWithContext(context.Background())
}

func (i *AzureVmFeature) ToAzureVmFeatureOutputWithContext(ctx context.Context) AzureVmFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureVmFeatureOutput)
}

// AzureVmFeatureArrayInput is an input type that accepts AzureVmFeatureArray and AzureVmFeatureArrayOutput values.
// You can construct a concrete instance of `AzureVmFeatureArrayInput` via:
//
//	AzureVmFeatureArray{ AzureVmFeatureArgs{...} }
type AzureVmFeatureArrayInput interface {
	pulumi.Input

	ToAzureVmFeatureArrayOutput() AzureVmFeatureArrayOutput
	ToAzureVmFeatureArrayOutputWithContext(context.Context) AzureVmFeatureArrayOutput
}

type AzureVmFeatureArray []AzureVmFeatureInput

func (AzureVmFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureVmFeature)(nil)).Elem()
}

func (i AzureVmFeatureArray) ToAzureVmFeatureArrayOutput() AzureVmFeatureArrayOutput {
	return i.ToAzureVmFeatureArrayOutputWithContext(context.Background())
}

func (i AzureVmFeatureArray) ToAzureVmFeatureArrayOutputWithContext(ctx context.Context) AzureVmFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureVmFeatureArrayOutput)
}

// AzureVmFeatureMapInput is an input type that accepts AzureVmFeatureMap and AzureVmFeatureMapOutput values.
// You can construct a concrete instance of `AzureVmFeatureMapInput` via:
//
//	AzureVmFeatureMap{ "key": AzureVmFeatureArgs{...} }
type AzureVmFeatureMapInput interface {
	pulumi.Input

	ToAzureVmFeatureMapOutput() AzureVmFeatureMapOutput
	ToAzureVmFeatureMapOutputWithContext(context.Context) AzureVmFeatureMapOutput
}

type AzureVmFeatureMap map[string]AzureVmFeatureInput

func (AzureVmFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureVmFeature)(nil)).Elem()
}

func (i AzureVmFeatureMap) ToAzureVmFeatureMapOutput() AzureVmFeatureMapOutput {
	return i.ToAzureVmFeatureMapOutputWithContext(context.Background())
}

func (i AzureVmFeatureMap) ToAzureVmFeatureMapOutputWithContext(ctx context.Context) AzureVmFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureVmFeatureMapOutput)
}

type AzureVmFeatureOutput struct{ *pulumi.OutputState }

func (AzureVmFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureVmFeature)(nil)).Elem()
}

func (o AzureVmFeatureOutput) ToAzureVmFeatureOutput() AzureVmFeatureOutput {
	return o
}

func (o AzureVmFeatureOutput) ToAzureVmFeatureOutputWithContext(ctx context.Context) AzureVmFeatureOutput {
	return o
}

// Specifies the name of the VM created in duplo. Changing this forces a new resource to be created.
func (o AzureVmFeatureOutput) ComponentId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureVmFeature) pulumi.StringOutput { return v.ComponentId }).(pulumi.StringOutput)
}

// The status of the VM feature. By default, this is set to false.
func (o AzureVmFeatureOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AzureVmFeature) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The name of the VM feature to be enabled.
func (o AzureVmFeatureOutput) FeatureName() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureVmFeature) pulumi.StringOutput { return v.FeatureName }).(pulumi.StringOutput)
}

// The GUID of the tenant that the azure vm feature will be created in.
func (o AzureVmFeatureOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureVmFeature) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type AzureVmFeatureArrayOutput struct{ *pulumi.OutputState }

func (AzureVmFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureVmFeature)(nil)).Elem()
}

func (o AzureVmFeatureArrayOutput) ToAzureVmFeatureArrayOutput() AzureVmFeatureArrayOutput {
	return o
}

func (o AzureVmFeatureArrayOutput) ToAzureVmFeatureArrayOutputWithContext(ctx context.Context) AzureVmFeatureArrayOutput {
	return o
}

func (o AzureVmFeatureArrayOutput) Index(i pulumi.IntInput) AzureVmFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureVmFeature {
		return vs[0].([]*AzureVmFeature)[vs[1].(int)]
	}).(AzureVmFeatureOutput)
}

type AzureVmFeatureMapOutput struct{ *pulumi.OutputState }

func (AzureVmFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureVmFeature)(nil)).Elem()
}

func (o AzureVmFeatureMapOutput) ToAzureVmFeatureMapOutput() AzureVmFeatureMapOutput {
	return o
}

func (o AzureVmFeatureMapOutput) ToAzureVmFeatureMapOutputWithContext(ctx context.Context) AzureVmFeatureMapOutput {
	return o
}

func (o AzureVmFeatureMapOutput) MapIndex(k pulumi.StringInput) AzureVmFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureVmFeature {
		return vs[0].(map[string]*AzureVmFeature)[vs[1].(string)]
	}).(AzureVmFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureVmFeatureInput)(nil)).Elem(), &AzureVmFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureVmFeatureArrayInput)(nil)).Elem(), AzureVmFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureVmFeatureMapInput)(nil)).Elem(), AzureVmFeatureMap{})
	pulumi.RegisterOutputType(AzureVmFeatureOutput{})
	pulumi.RegisterOutputType(AzureVmFeatureArrayOutput{})
	pulumi.RegisterOutputType(AzureVmFeatureMapOutput{})
}
