// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `K8ConfigMap` reads data from a single kubernetes configmap in a Duplo tenant.
func LookupK8ConfigMap(ctx *pulumi.Context, args *LookupK8ConfigMapArgs, opts ...pulumi.InvokeOption) (*LookupK8ConfigMapResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupK8ConfigMapResult
	err := ctx.Invoke("duplocloud:index/getK8ConfigMap:getK8ConfigMap", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getK8ConfigMap.
type LookupK8ConfigMapArgs struct {
	// The name of the configmap.
	Name string `pulumi:"name"`
	// The GUID of the tenant that the configmap will be created in.
	TenantId string `pulumi:"tenantId"`
}

// A collection of values returned by getK8ConfigMap.
type LookupK8ConfigMapResult struct {
	// A JSON encoded string representing the configmap data. You can use the `jsondecode()` function to parse this, if needed.
	Data string `pulumi:"data"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A JSON encoded string representing the configmap metadata. You can use the `jsondecode()` function to parse this, if needed.
	Metadata string `pulumi:"metadata"`
	// The name of the configmap.
	Name string `pulumi:"name"`
	// The GUID of the tenant that the configmap will be created in.
	TenantId string `pulumi:"tenantId"`
}

func LookupK8ConfigMapOutput(ctx *pulumi.Context, args LookupK8ConfigMapOutputArgs, opts ...pulumi.InvokeOption) LookupK8ConfigMapResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupK8ConfigMapResultOutput, error) {
			args := v.(LookupK8ConfigMapArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("duplocloud:index/getK8ConfigMap:getK8ConfigMap", args, LookupK8ConfigMapResultOutput{}, options).(LookupK8ConfigMapResultOutput), nil
		}).(LookupK8ConfigMapResultOutput)
}

// A collection of arguments for invoking getK8ConfigMap.
type LookupK8ConfigMapOutputArgs struct {
	// The name of the configmap.
	Name pulumi.StringInput `pulumi:"name"`
	// The GUID of the tenant that the configmap will be created in.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (LookupK8ConfigMapOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupK8ConfigMapArgs)(nil)).Elem()
}

// A collection of values returned by getK8ConfigMap.
type LookupK8ConfigMapResultOutput struct{ *pulumi.OutputState }

func (LookupK8ConfigMapResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupK8ConfigMapResult)(nil)).Elem()
}

func (o LookupK8ConfigMapResultOutput) ToLookupK8ConfigMapResultOutput() LookupK8ConfigMapResultOutput {
	return o
}

func (o LookupK8ConfigMapResultOutput) ToLookupK8ConfigMapResultOutputWithContext(ctx context.Context) LookupK8ConfigMapResultOutput {
	return o
}

// A JSON encoded string representing the configmap data. You can use the `jsondecode()` function to parse this, if needed.
func (o LookupK8ConfigMapResultOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v LookupK8ConfigMapResult) string { return v.Data }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupK8ConfigMapResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupK8ConfigMapResult) string { return v.Id }).(pulumi.StringOutput)
}

// A JSON encoded string representing the configmap metadata. You can use the `jsondecode()` function to parse this, if needed.
func (o LookupK8ConfigMapResultOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v LookupK8ConfigMapResult) string { return v.Metadata }).(pulumi.StringOutput)
}

// The name of the configmap.
func (o LookupK8ConfigMapResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupK8ConfigMapResult) string { return v.Name }).(pulumi.StringOutput)
}

// The GUID of the tenant that the configmap will be created in.
func (o LookupK8ConfigMapResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupK8ConfigMapResult) string { return v.TenantId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupK8ConfigMapResultOutput{})
}
