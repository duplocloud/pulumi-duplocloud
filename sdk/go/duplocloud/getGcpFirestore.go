// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			app, err := duplocloud.LookupGcpFirestore(ctx, &duplocloud.LookupGcpFirestoreArgs{
//				TenantId: "tenant_id",
//				Name:     "name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("out", pulumi.Map{
//				"name":                      app.Name,
//				"type":                      app.Type,
//				"locationId":                app.LocationId,
//				"enableDeleteProtection":    app.EnableDeleteProtection,
//				"enablePointInTimeRecovery": app.EnablePointInTimeRecovery,
//				"etag":                      app.Etag,
//				"uid":                       app.Uid,
//				"versionRetentionPeriod":    app.VersionRetentionPeriod,
//				"earliestVersionTime":       app.EarliestVersionTime,
//				"concurrencyMode":           app.ConcurrencyMode,
//				"appEngineIntegrationMode":  app.AppEngineIntegrationMode,
//			})
//			return nil
//		})
//	}
//
// ```
func LookupGcpFirestore(ctx *pulumi.Context, args *LookupGcpFirestoreArgs, opts ...pulumi.InvokeOption) (*LookupGcpFirestoreResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGcpFirestoreResult
	err := ctx.Invoke("duplocloud:index/getGcpFirestore:getGcpFirestore", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGcpFirestore.
type LookupGcpFirestoreArgs struct {
	// The full name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name string `pulumi:"name"`
	// The GUID of the tenant that the firestore will be created in.
	TenantId string `pulumi:"tenantId"`
}

// A collection of values returned by getGcpFirestore.
type LookupGcpFirestoreResult struct {
	AppEngineIntegrationMode string `pulumi:"appEngineIntegrationMode"`
	ConcurrencyMode          string `pulumi:"concurrencyMode"`
	EarliestVersionTime      string `pulumi:"earliestVersionTime"`
	// Delete protection prevents accidental deletion of firestore.
	EnableDeleteProtection bool `pulumi:"enableDeleteProtection"`
	// Restores data to a specific moment in time, enhancing data protection and recovery capabilities.
	EnablePointInTimeRecovery bool   `pulumi:"enablePointInTimeRecovery"`
	Etag                      string `pulumi:"etag"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Location for firestore
	LocationId string `pulumi:"locationId"`
	// The full name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name string `pulumi:"name"`
	// The GUID of the tenant that the firestore will be created in.
	TenantId string `pulumi:"tenantId"`
	// Firestore type
	Type                   string `pulumi:"type"`
	Uid                    string `pulumi:"uid"`
	VersionRetentionPeriod string `pulumi:"versionRetentionPeriod"`
}

func LookupGcpFirestoreOutput(ctx *pulumi.Context, args LookupGcpFirestoreOutputArgs, opts ...pulumi.InvokeOption) LookupGcpFirestoreResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupGcpFirestoreResultOutput, error) {
			args := v.(LookupGcpFirestoreArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("duplocloud:index/getGcpFirestore:getGcpFirestore", args, LookupGcpFirestoreResultOutput{}, options).(LookupGcpFirestoreResultOutput), nil
		}).(LookupGcpFirestoreResultOutput)
}

// A collection of arguments for invoking getGcpFirestore.
type LookupGcpFirestoreOutputArgs struct {
	// The full name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringInput `pulumi:"name"`
	// The GUID of the tenant that the firestore will be created in.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (LookupGcpFirestoreOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGcpFirestoreArgs)(nil)).Elem()
}

// A collection of values returned by getGcpFirestore.
type LookupGcpFirestoreResultOutput struct{ *pulumi.OutputState }

func (LookupGcpFirestoreResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGcpFirestoreResult)(nil)).Elem()
}

func (o LookupGcpFirestoreResultOutput) ToLookupGcpFirestoreResultOutput() LookupGcpFirestoreResultOutput {
	return o
}

func (o LookupGcpFirestoreResultOutput) ToLookupGcpFirestoreResultOutputWithContext(ctx context.Context) LookupGcpFirestoreResultOutput {
	return o
}

func (o LookupGcpFirestoreResultOutput) AppEngineIntegrationMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpFirestoreResult) string { return v.AppEngineIntegrationMode }).(pulumi.StringOutput)
}

func (o LookupGcpFirestoreResultOutput) ConcurrencyMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpFirestoreResult) string { return v.ConcurrencyMode }).(pulumi.StringOutput)
}

func (o LookupGcpFirestoreResultOutput) EarliestVersionTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpFirestoreResult) string { return v.EarliestVersionTime }).(pulumi.StringOutput)
}

// Delete protection prevents accidental deletion of firestore.
func (o LookupGcpFirestoreResultOutput) EnableDeleteProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupGcpFirestoreResult) bool { return v.EnableDeleteProtection }).(pulumi.BoolOutput)
}

// Restores data to a specific moment in time, enhancing data protection and recovery capabilities.
func (o LookupGcpFirestoreResultOutput) EnablePointInTimeRecovery() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupGcpFirestoreResult) bool { return v.EnablePointInTimeRecovery }).(pulumi.BoolOutput)
}

func (o LookupGcpFirestoreResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpFirestoreResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGcpFirestoreResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpFirestoreResult) string { return v.Id }).(pulumi.StringOutput)
}

// Location for firestore
func (o LookupGcpFirestoreResultOutput) LocationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpFirestoreResult) string { return v.LocationId }).(pulumi.StringOutput)
}

// The full name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
func (o LookupGcpFirestoreResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpFirestoreResult) string { return v.Name }).(pulumi.StringOutput)
}

// The GUID of the tenant that the firestore will be created in.
func (o LookupGcpFirestoreResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpFirestoreResult) string { return v.TenantId }).(pulumi.StringOutput)
}

// Firestore type
func (o LookupGcpFirestoreResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpFirestoreResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupGcpFirestoreResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpFirestoreResult) string { return v.Uid }).(pulumi.StringOutput)
}

func (o LookupGcpFirestoreResultOutput) VersionRetentionPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpFirestoreResult) string { return v.VersionRetentionPeriod }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGcpFirestoreResultOutput{})
}
