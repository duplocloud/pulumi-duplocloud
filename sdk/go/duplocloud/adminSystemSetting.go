// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AdminSystemSetting` manages an admin system setting in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewAdminSystemSetting(ctx, "test-setting", &duplocloud.AdminSystemSettingArgs{
//				Key:   pulumi.String("EnableVPN"),
//				Value: pulumi.String("true"),
//				Type:  pulumi.String("Flags"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing duplo admin setting
//
//   - *KEY_TYPE* is the type of setting key. Replace any occurrences of '/' with '_SLASH_' if they exist within the KEY_TYPE.
//
//   - *KEY* is the key name
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/adminSystemSetting:AdminSystemSetting mySetting *KEY_TYPE*/*KEY*
// ```
type AdminSystemSetting struct {
	pulumi.CustomResourceState

	// Key name for the system setting.
	Key pulumi.StringOutput `pulumi:"key"`
	// Type of the system setting.
	Type pulumi.StringOutput `pulumi:"type"`
	// Value for the system setting.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewAdminSystemSetting registers a new resource with the given unique name, arguments, and options.
func NewAdminSystemSetting(ctx *pulumi.Context,
	name string, args *AdminSystemSettingArgs, opts ...pulumi.ResourceOption) (*AdminSystemSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AdminSystemSetting
	err := ctx.RegisterResource("duplocloud:index/adminSystemSetting:AdminSystemSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdminSystemSetting gets an existing AdminSystemSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdminSystemSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdminSystemSettingState, opts ...pulumi.ResourceOption) (*AdminSystemSetting, error) {
	var resource AdminSystemSetting
	err := ctx.ReadResource("duplocloud:index/adminSystemSetting:AdminSystemSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdminSystemSetting resources.
type adminSystemSettingState struct {
	// Key name for the system setting.
	Key *string `pulumi:"key"`
	// Type of the system setting.
	Type *string `pulumi:"type"`
	// Value for the system setting.
	Value *string `pulumi:"value"`
}

type AdminSystemSettingState struct {
	// Key name for the system setting.
	Key pulumi.StringPtrInput
	// Type of the system setting.
	Type pulumi.StringPtrInput
	// Value for the system setting.
	Value pulumi.StringPtrInput
}

func (AdminSystemSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*adminSystemSettingState)(nil)).Elem()
}

type adminSystemSettingArgs struct {
	// Key name for the system setting.
	Key string `pulumi:"key"`
	// Type of the system setting.
	Type string `pulumi:"type"`
	// Value for the system setting.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a AdminSystemSetting resource.
type AdminSystemSettingArgs struct {
	// Key name for the system setting.
	Key pulumi.StringInput
	// Type of the system setting.
	Type pulumi.StringInput
	// Value for the system setting.
	Value pulumi.StringInput
}

func (AdminSystemSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*adminSystemSettingArgs)(nil)).Elem()
}

type AdminSystemSettingInput interface {
	pulumi.Input

	ToAdminSystemSettingOutput() AdminSystemSettingOutput
	ToAdminSystemSettingOutputWithContext(ctx context.Context) AdminSystemSettingOutput
}

func (*AdminSystemSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminSystemSetting)(nil)).Elem()
}

func (i *AdminSystemSetting) ToAdminSystemSettingOutput() AdminSystemSettingOutput {
	return i.ToAdminSystemSettingOutputWithContext(context.Background())
}

func (i *AdminSystemSetting) ToAdminSystemSettingOutputWithContext(ctx context.Context) AdminSystemSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminSystemSettingOutput)
}

// AdminSystemSettingArrayInput is an input type that accepts AdminSystemSettingArray and AdminSystemSettingArrayOutput values.
// You can construct a concrete instance of `AdminSystemSettingArrayInput` via:
//
//	AdminSystemSettingArray{ AdminSystemSettingArgs{...} }
type AdminSystemSettingArrayInput interface {
	pulumi.Input

	ToAdminSystemSettingArrayOutput() AdminSystemSettingArrayOutput
	ToAdminSystemSettingArrayOutputWithContext(context.Context) AdminSystemSettingArrayOutput
}

type AdminSystemSettingArray []AdminSystemSettingInput

func (AdminSystemSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdminSystemSetting)(nil)).Elem()
}

func (i AdminSystemSettingArray) ToAdminSystemSettingArrayOutput() AdminSystemSettingArrayOutput {
	return i.ToAdminSystemSettingArrayOutputWithContext(context.Background())
}

func (i AdminSystemSettingArray) ToAdminSystemSettingArrayOutputWithContext(ctx context.Context) AdminSystemSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminSystemSettingArrayOutput)
}

// AdminSystemSettingMapInput is an input type that accepts AdminSystemSettingMap and AdminSystemSettingMapOutput values.
// You can construct a concrete instance of `AdminSystemSettingMapInput` via:
//
//	AdminSystemSettingMap{ "key": AdminSystemSettingArgs{...} }
type AdminSystemSettingMapInput interface {
	pulumi.Input

	ToAdminSystemSettingMapOutput() AdminSystemSettingMapOutput
	ToAdminSystemSettingMapOutputWithContext(context.Context) AdminSystemSettingMapOutput
}

type AdminSystemSettingMap map[string]AdminSystemSettingInput

func (AdminSystemSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdminSystemSetting)(nil)).Elem()
}

func (i AdminSystemSettingMap) ToAdminSystemSettingMapOutput() AdminSystemSettingMapOutput {
	return i.ToAdminSystemSettingMapOutputWithContext(context.Background())
}

func (i AdminSystemSettingMap) ToAdminSystemSettingMapOutputWithContext(ctx context.Context) AdminSystemSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminSystemSettingMapOutput)
}

type AdminSystemSettingOutput struct{ *pulumi.OutputState }

func (AdminSystemSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminSystemSetting)(nil)).Elem()
}

func (o AdminSystemSettingOutput) ToAdminSystemSettingOutput() AdminSystemSettingOutput {
	return o
}

func (o AdminSystemSettingOutput) ToAdminSystemSettingOutputWithContext(ctx context.Context) AdminSystemSettingOutput {
	return o
}

// Key name for the system setting.
func (o AdminSystemSettingOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminSystemSetting) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Type of the system setting.
func (o AdminSystemSettingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminSystemSetting) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Value for the system setting.
func (o AdminSystemSettingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminSystemSetting) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type AdminSystemSettingArrayOutput struct{ *pulumi.OutputState }

func (AdminSystemSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdminSystemSetting)(nil)).Elem()
}

func (o AdminSystemSettingArrayOutput) ToAdminSystemSettingArrayOutput() AdminSystemSettingArrayOutput {
	return o
}

func (o AdminSystemSettingArrayOutput) ToAdminSystemSettingArrayOutputWithContext(ctx context.Context) AdminSystemSettingArrayOutput {
	return o
}

func (o AdminSystemSettingArrayOutput) Index(i pulumi.IntInput) AdminSystemSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AdminSystemSetting {
		return vs[0].([]*AdminSystemSetting)[vs[1].(int)]
	}).(AdminSystemSettingOutput)
}

type AdminSystemSettingMapOutput struct{ *pulumi.OutputState }

func (AdminSystemSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdminSystemSetting)(nil)).Elem()
}

func (o AdminSystemSettingMapOutput) ToAdminSystemSettingMapOutput() AdminSystemSettingMapOutput {
	return o
}

func (o AdminSystemSettingMapOutput) ToAdminSystemSettingMapOutputWithContext(ctx context.Context) AdminSystemSettingMapOutput {
	return o
}

func (o AdminSystemSettingMapOutput) MapIndex(k pulumi.StringInput) AdminSystemSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AdminSystemSetting {
		return vs[0].(map[string]*AdminSystemSetting)[vs[1].(string)]
	}).(AdminSystemSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdminSystemSettingInput)(nil)).Elem(), &AdminSystemSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminSystemSettingArrayInput)(nil)).Elem(), AdminSystemSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminSystemSettingMapInput)(nil)).Elem(), AdminSystemSettingMap{})
	pulumi.RegisterOutputType(AdminSystemSettingOutput{})
	pulumi.RegisterOutputType(AdminSystemSettingArrayOutput{})
	pulumi.RegisterOutputType(AdminSystemSettingMapOutput{})
}
