// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `getPlanCertificate` retrieves details of a specific certificate for a given plan.
func LookupPlanCertificate(ctx *pulumi.Context, args *LookupPlanCertificateArgs, opts ...pulumi.InvokeOption) (*LookupPlanCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPlanCertificateResult
	err := ctx.Invoke("duplocloud:index/getPlanCertificate:getPlanCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlanCertificate.
type LookupPlanCertificateArgs struct {
	// A domain name for which the certificate should be issued
	Name string `pulumi:"name"`
	// The plan ID
	PlanId string `pulumi:"planId"`
}

// A collection of values returned by getPlanCertificate.
type LookupPlanCertificateResult struct {
	// The ARN of the certificate
	Arn string `pulumi:"arn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A domain name for which the certificate should be issued
	Name string `pulumi:"name"`
	// The plan ID
	PlanId string `pulumi:"planId"`
}

func LookupPlanCertificateOutput(ctx *pulumi.Context, args LookupPlanCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupPlanCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPlanCertificateResultOutput, error) {
			args := v.(LookupPlanCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("duplocloud:index/getPlanCertificate:getPlanCertificate", args, LookupPlanCertificateResultOutput{}, options).(LookupPlanCertificateResultOutput), nil
		}).(LookupPlanCertificateResultOutput)
}

// A collection of arguments for invoking getPlanCertificate.
type LookupPlanCertificateOutputArgs struct {
	// A domain name for which the certificate should be issued
	Name pulumi.StringInput `pulumi:"name"`
	// The plan ID
	PlanId pulumi.StringInput `pulumi:"planId"`
}

func (LookupPlanCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getPlanCertificate.
type LookupPlanCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupPlanCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanCertificateResult)(nil)).Elem()
}

func (o LookupPlanCertificateResultOutput) ToLookupPlanCertificateResultOutput() LookupPlanCertificateResultOutput {
	return o
}

func (o LookupPlanCertificateResultOutput) ToLookupPlanCertificateResultOutputWithContext(ctx context.Context) LookupPlanCertificateResultOutput {
	return o
}

// The ARN of the certificate
func (o LookupPlanCertificateResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanCertificateResult) string { return v.Arn }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPlanCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// A domain name for which the certificate should be issued
func (o LookupPlanCertificateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanCertificateResult) string { return v.Name }).(pulumi.StringOutput)
}

// The plan ID
func (o LookupPlanCertificateResultOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlanCertificateResult) string { return v.PlanId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPlanCertificateResultOutput{})
}
