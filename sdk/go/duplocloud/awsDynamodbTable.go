// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AwsDynamodbTable` manages an AWS dynamodb table in Duplo.
type AwsDynamodbTable struct {
	pulumi.CustomResourceState

	// The ARN of the dynamodb table.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The attribute type of the primary key attribute.
	AttributeType pulumi.StringOutput `pulumi:"attributeType"`
	// The full name of the dynamodb table.
	Fullname pulumi.StringOutput `pulumi:"fullname"`
	// The key type of the primary key.
	KeyType pulumi.StringOutput `pulumi:"keyType"`
	// The short name of the dynamodb table.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringOutput `pulumi:"name"`
	// The attribute name of the primary key attribute.
	PrimaryKeyName pulumi.StringOutput `pulumi:"primaryKeyName"`
	// The status of the dynamodb table.
	Status pulumi.StringOutput `pulumi:"status"`
	// The GUID of the tenant that the dynamodb table will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewAwsDynamodbTable registers a new resource with the given unique name, arguments, and options.
func NewAwsDynamodbTable(ctx *pulumi.Context,
	name string, args *AwsDynamodbTableArgs, opts ...pulumi.ResourceOption) (*AwsDynamodbTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttributeType == nil {
		return nil, errors.New("invalid value for required argument 'AttributeType'")
	}
	if args.KeyType == nil {
		return nil, errors.New("invalid value for required argument 'KeyType'")
	}
	if args.PrimaryKeyName == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryKeyName'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsDynamodbTable
	err := ctx.RegisterResource("duplocloud:index/awsDynamodbTable:AwsDynamodbTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsDynamodbTable gets an existing AwsDynamodbTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsDynamodbTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsDynamodbTableState, opts ...pulumi.ResourceOption) (*AwsDynamodbTable, error) {
	var resource AwsDynamodbTable
	err := ctx.ReadResource("duplocloud:index/awsDynamodbTable:AwsDynamodbTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsDynamodbTable resources.
type awsDynamodbTableState struct {
	// The ARN of the dynamodb table.
	Arn *string `pulumi:"arn"`
	// The attribute type of the primary key attribute.
	AttributeType *string `pulumi:"attributeType"`
	// The full name of the dynamodb table.
	Fullname *string `pulumi:"fullname"`
	// The key type of the primary key.
	KeyType *string `pulumi:"keyType"`
	// The short name of the dynamodb table.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// The attribute name of the primary key attribute.
	PrimaryKeyName *string `pulumi:"primaryKeyName"`
	// The status of the dynamodb table.
	Status *string `pulumi:"status"`
	// The GUID of the tenant that the dynamodb table will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type AwsDynamodbTableState struct {
	// The ARN of the dynamodb table.
	Arn pulumi.StringPtrInput
	// The attribute type of the primary key attribute.
	AttributeType pulumi.StringPtrInput
	// The full name of the dynamodb table.
	Fullname pulumi.StringPtrInput
	// The key type of the primary key.
	KeyType pulumi.StringPtrInput
	// The short name of the dynamodb table.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// The attribute name of the primary key attribute.
	PrimaryKeyName pulumi.StringPtrInput
	// The status of the dynamodb table.
	Status pulumi.StringPtrInput
	// The GUID of the tenant that the dynamodb table will be created in.
	TenantId pulumi.StringPtrInput
}

func (AwsDynamodbTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsDynamodbTableState)(nil)).Elem()
}

type awsDynamodbTableArgs struct {
	// The attribute type of the primary key attribute.
	AttributeType string `pulumi:"attributeType"`
	// The key type of the primary key.
	KeyType string `pulumi:"keyType"`
	// The short name of the dynamodb table.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// The attribute name of the primary key attribute.
	PrimaryKeyName string `pulumi:"primaryKeyName"`
	// The GUID of the tenant that the dynamodb table will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AwsDynamodbTable resource.
type AwsDynamodbTableArgs struct {
	// The attribute type of the primary key attribute.
	AttributeType pulumi.StringInput
	// The key type of the primary key.
	KeyType pulumi.StringInput
	// The short name of the dynamodb table.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// The attribute name of the primary key attribute.
	PrimaryKeyName pulumi.StringInput
	// The GUID of the tenant that the dynamodb table will be created in.
	TenantId pulumi.StringInput
}

func (AwsDynamodbTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsDynamodbTableArgs)(nil)).Elem()
}

type AwsDynamodbTableInput interface {
	pulumi.Input

	ToAwsDynamodbTableOutput() AwsDynamodbTableOutput
	ToAwsDynamodbTableOutputWithContext(ctx context.Context) AwsDynamodbTableOutput
}

func (*AwsDynamodbTable) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsDynamodbTable)(nil)).Elem()
}

func (i *AwsDynamodbTable) ToAwsDynamodbTableOutput() AwsDynamodbTableOutput {
	return i.ToAwsDynamodbTableOutputWithContext(context.Background())
}

func (i *AwsDynamodbTable) ToAwsDynamodbTableOutputWithContext(ctx context.Context) AwsDynamodbTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsDynamodbTableOutput)
}

// AwsDynamodbTableArrayInput is an input type that accepts AwsDynamodbTableArray and AwsDynamodbTableArrayOutput values.
// You can construct a concrete instance of `AwsDynamodbTableArrayInput` via:
//
//	AwsDynamodbTableArray{ AwsDynamodbTableArgs{...} }
type AwsDynamodbTableArrayInput interface {
	pulumi.Input

	ToAwsDynamodbTableArrayOutput() AwsDynamodbTableArrayOutput
	ToAwsDynamodbTableArrayOutputWithContext(context.Context) AwsDynamodbTableArrayOutput
}

type AwsDynamodbTableArray []AwsDynamodbTableInput

func (AwsDynamodbTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsDynamodbTable)(nil)).Elem()
}

func (i AwsDynamodbTableArray) ToAwsDynamodbTableArrayOutput() AwsDynamodbTableArrayOutput {
	return i.ToAwsDynamodbTableArrayOutputWithContext(context.Background())
}

func (i AwsDynamodbTableArray) ToAwsDynamodbTableArrayOutputWithContext(ctx context.Context) AwsDynamodbTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsDynamodbTableArrayOutput)
}

// AwsDynamodbTableMapInput is an input type that accepts AwsDynamodbTableMap and AwsDynamodbTableMapOutput values.
// You can construct a concrete instance of `AwsDynamodbTableMapInput` via:
//
//	AwsDynamodbTableMap{ "key": AwsDynamodbTableArgs{...} }
type AwsDynamodbTableMapInput interface {
	pulumi.Input

	ToAwsDynamodbTableMapOutput() AwsDynamodbTableMapOutput
	ToAwsDynamodbTableMapOutputWithContext(context.Context) AwsDynamodbTableMapOutput
}

type AwsDynamodbTableMap map[string]AwsDynamodbTableInput

func (AwsDynamodbTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsDynamodbTable)(nil)).Elem()
}

func (i AwsDynamodbTableMap) ToAwsDynamodbTableMapOutput() AwsDynamodbTableMapOutput {
	return i.ToAwsDynamodbTableMapOutputWithContext(context.Background())
}

func (i AwsDynamodbTableMap) ToAwsDynamodbTableMapOutputWithContext(ctx context.Context) AwsDynamodbTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsDynamodbTableMapOutput)
}

type AwsDynamodbTableOutput struct{ *pulumi.OutputState }

func (AwsDynamodbTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsDynamodbTable)(nil)).Elem()
}

func (o AwsDynamodbTableOutput) ToAwsDynamodbTableOutput() AwsDynamodbTableOutput {
	return o
}

func (o AwsDynamodbTableOutput) ToAwsDynamodbTableOutputWithContext(ctx context.Context) AwsDynamodbTableOutput {
	return o
}

// The ARN of the dynamodb table.
func (o AwsDynamodbTableOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTable) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The attribute type of the primary key attribute.
func (o AwsDynamodbTableOutput) AttributeType() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTable) pulumi.StringOutput { return v.AttributeType }).(pulumi.StringOutput)
}

// The full name of the dynamodb table.
func (o AwsDynamodbTableOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTable) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

// The key type of the primary key.
func (o AwsDynamodbTableOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTable) pulumi.StringOutput { return v.KeyType }).(pulumi.StringOutput)
}

// The short name of the dynamodb table.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
func (o AwsDynamodbTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The attribute name of the primary key attribute.
func (o AwsDynamodbTableOutput) PrimaryKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTable) pulumi.StringOutput { return v.PrimaryKeyName }).(pulumi.StringOutput)
}

// The status of the dynamodb table.
func (o AwsDynamodbTableOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTable) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The GUID of the tenant that the dynamodb table will be created in.
func (o AwsDynamodbTableOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsDynamodbTable) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type AwsDynamodbTableArrayOutput struct{ *pulumi.OutputState }

func (AwsDynamodbTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsDynamodbTable)(nil)).Elem()
}

func (o AwsDynamodbTableArrayOutput) ToAwsDynamodbTableArrayOutput() AwsDynamodbTableArrayOutput {
	return o
}

func (o AwsDynamodbTableArrayOutput) ToAwsDynamodbTableArrayOutputWithContext(ctx context.Context) AwsDynamodbTableArrayOutput {
	return o
}

func (o AwsDynamodbTableArrayOutput) Index(i pulumi.IntInput) AwsDynamodbTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsDynamodbTable {
		return vs[0].([]*AwsDynamodbTable)[vs[1].(int)]
	}).(AwsDynamodbTableOutput)
}

type AwsDynamodbTableMapOutput struct{ *pulumi.OutputState }

func (AwsDynamodbTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsDynamodbTable)(nil)).Elem()
}

func (o AwsDynamodbTableMapOutput) ToAwsDynamodbTableMapOutput() AwsDynamodbTableMapOutput {
	return o
}

func (o AwsDynamodbTableMapOutput) ToAwsDynamodbTableMapOutputWithContext(ctx context.Context) AwsDynamodbTableMapOutput {
	return o
}

func (o AwsDynamodbTableMapOutput) MapIndex(k pulumi.StringInput) AwsDynamodbTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsDynamodbTable {
		return vs[0].(map[string]*AwsDynamodbTable)[vs[1].(string)]
	}).(AwsDynamodbTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsDynamodbTableInput)(nil)).Elem(), &AwsDynamodbTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsDynamodbTableArrayInput)(nil)).Elem(), AwsDynamodbTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsDynamodbTableMapInput)(nil)).Elem(), AwsDynamodbTableMap{})
	pulumi.RegisterOutputType(AwsDynamodbTableOutput{})
	pulumi.RegisterOutputType(AwsDynamodbTableArrayOutput{})
	pulumi.RegisterOutputType(AwsDynamodbTableMapOutput{})
}
