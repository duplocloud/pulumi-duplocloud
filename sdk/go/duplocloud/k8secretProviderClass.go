// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `K8SecretProviderClass` manages a kubernetes Secret Provider Class in a Duplo tenant.
//
// ## Import
//
// Example: Importing an existing kubernetes secret provider class
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *NAME* is the secret provider class name
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/k8SecretProviderClass:K8SecretProviderClass spc v3/subscriptions/*TENANT_ID*/k8s/secretproviderclass/*NAME*
// ```
type K8SecretProviderClass struct {
	pulumi.CustomResourceState

	// An unstructured key value map stored with the secret provider class that may be used to store arbitrary metadata.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) the service.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the Secret Provider Class.
	Name pulumi.StringOutput `pulumi:"name"`
	// The parameters section contains the details of the mount request.
	Parameters pulumi.StringOutput `pulumi:"parameters"`
	// You may want to create a Kubernetes Secret to mirror the mounted content. Use the optional secretObjects field to define the desired state of the synced Kubernetes secret objects
	SecretObjects K8SecretProviderClassSecretObjectArrayOutput `pulumi:"secretObjects"`
	// Provider to be used.
	SecretProvider pulumi.StringOutput `pulumi:"secretProvider"`
	// The GUID of the tenant that the Secret Provider Class will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewK8SecretProviderClass registers a new resource with the given unique name, arguments, and options.
func NewK8SecretProviderClass(ctx *pulumi.Context,
	name string, args *K8SecretProviderClassArgs, opts ...pulumi.ResourceOption) (*K8SecretProviderClass, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecretProvider == nil {
		return nil, errors.New("invalid value for required argument 'SecretProvider'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource K8SecretProviderClass
	err := ctx.RegisterResource("duplocloud:index/k8SecretProviderClass:K8SecretProviderClass", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetK8SecretProviderClass gets an existing K8SecretProviderClass resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetK8SecretProviderClass(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *K8SecretProviderClassState, opts ...pulumi.ResourceOption) (*K8SecretProviderClass, error) {
	var resource K8SecretProviderClass
	err := ctx.ReadResource("duplocloud:index/k8SecretProviderClass:K8SecretProviderClass", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering K8SecretProviderClass resources.
type k8secretProviderClassState struct {
	// An unstructured key value map stored with the secret provider class that may be used to store arbitrary metadata.
	Annotations map[string]string `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) the service.
	Labels map[string]string `pulumi:"labels"`
	// The name of the Secret Provider Class.
	Name *string `pulumi:"name"`
	// The parameters section contains the details of the mount request.
	Parameters *string `pulumi:"parameters"`
	// You may want to create a Kubernetes Secret to mirror the mounted content. Use the optional secretObjects field to define the desired state of the synced Kubernetes secret objects
	SecretObjects []K8SecretProviderClassSecretObject `pulumi:"secretObjects"`
	// Provider to be used.
	SecretProvider *string `pulumi:"secretProvider"`
	// The GUID of the tenant that the Secret Provider Class will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type K8SecretProviderClassState struct {
	// An unstructured key value map stored with the secret provider class that may be used to store arbitrary metadata.
	Annotations pulumi.StringMapInput
	// Map of string keys and values that can be used to organize and categorize (scope and select) the service.
	Labels pulumi.StringMapInput
	// The name of the Secret Provider Class.
	Name pulumi.StringPtrInput
	// The parameters section contains the details of the mount request.
	Parameters pulumi.StringPtrInput
	// You may want to create a Kubernetes Secret to mirror the mounted content. Use the optional secretObjects field to define the desired state of the synced Kubernetes secret objects
	SecretObjects K8SecretProviderClassSecretObjectArrayInput
	// Provider to be used.
	SecretProvider pulumi.StringPtrInput
	// The GUID of the tenant that the Secret Provider Class will be created in.
	TenantId pulumi.StringPtrInput
}

func (K8SecretProviderClassState) ElementType() reflect.Type {
	return reflect.TypeOf((*k8secretProviderClassState)(nil)).Elem()
}

type k8secretProviderClassArgs struct {
	// An unstructured key value map stored with the secret provider class that may be used to store arbitrary metadata.
	Annotations map[string]string `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) the service.
	Labels map[string]string `pulumi:"labels"`
	// The name of the Secret Provider Class.
	Name *string `pulumi:"name"`
	// The parameters section contains the details of the mount request.
	Parameters *string `pulumi:"parameters"`
	// You may want to create a Kubernetes Secret to mirror the mounted content. Use the optional secretObjects field to define the desired state of the synced Kubernetes secret objects
	SecretObjects []K8SecretProviderClassSecretObject `pulumi:"secretObjects"`
	// Provider to be used.
	SecretProvider string `pulumi:"secretProvider"`
	// The GUID of the tenant that the Secret Provider Class will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a K8SecretProviderClass resource.
type K8SecretProviderClassArgs struct {
	// An unstructured key value map stored with the secret provider class that may be used to store arbitrary metadata.
	Annotations pulumi.StringMapInput
	// Map of string keys and values that can be used to organize and categorize (scope and select) the service.
	Labels pulumi.StringMapInput
	// The name of the Secret Provider Class.
	Name pulumi.StringPtrInput
	// The parameters section contains the details of the mount request.
	Parameters pulumi.StringPtrInput
	// You may want to create a Kubernetes Secret to mirror the mounted content. Use the optional secretObjects field to define the desired state of the synced Kubernetes secret objects
	SecretObjects K8SecretProviderClassSecretObjectArrayInput
	// Provider to be used.
	SecretProvider pulumi.StringInput
	// The GUID of the tenant that the Secret Provider Class will be created in.
	TenantId pulumi.StringInput
}

func (K8SecretProviderClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*k8secretProviderClassArgs)(nil)).Elem()
}

type K8SecretProviderClassInput interface {
	pulumi.Input

	ToK8SecretProviderClassOutput() K8SecretProviderClassOutput
	ToK8SecretProviderClassOutputWithContext(ctx context.Context) K8SecretProviderClassOutput
}

func (*K8SecretProviderClass) ElementType() reflect.Type {
	return reflect.TypeOf((**K8SecretProviderClass)(nil)).Elem()
}

func (i *K8SecretProviderClass) ToK8SecretProviderClassOutput() K8SecretProviderClassOutput {
	return i.ToK8SecretProviderClassOutputWithContext(context.Background())
}

func (i *K8SecretProviderClass) ToK8SecretProviderClassOutputWithContext(ctx context.Context) K8SecretProviderClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8SecretProviderClassOutput)
}

// K8SecretProviderClassArrayInput is an input type that accepts K8SecretProviderClassArray and K8SecretProviderClassArrayOutput values.
// You can construct a concrete instance of `K8SecretProviderClassArrayInput` via:
//
//	K8SecretProviderClassArray{ K8SecretProviderClassArgs{...} }
type K8SecretProviderClassArrayInput interface {
	pulumi.Input

	ToK8SecretProviderClassArrayOutput() K8SecretProviderClassArrayOutput
	ToK8SecretProviderClassArrayOutputWithContext(context.Context) K8SecretProviderClassArrayOutput
}

type K8SecretProviderClassArray []K8SecretProviderClassInput

func (K8SecretProviderClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8SecretProviderClass)(nil)).Elem()
}

func (i K8SecretProviderClassArray) ToK8SecretProviderClassArrayOutput() K8SecretProviderClassArrayOutput {
	return i.ToK8SecretProviderClassArrayOutputWithContext(context.Background())
}

func (i K8SecretProviderClassArray) ToK8SecretProviderClassArrayOutputWithContext(ctx context.Context) K8SecretProviderClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8SecretProviderClassArrayOutput)
}

// K8SecretProviderClassMapInput is an input type that accepts K8SecretProviderClassMap and K8SecretProviderClassMapOutput values.
// You can construct a concrete instance of `K8SecretProviderClassMapInput` via:
//
//	K8SecretProviderClassMap{ "key": K8SecretProviderClassArgs{...} }
type K8SecretProviderClassMapInput interface {
	pulumi.Input

	ToK8SecretProviderClassMapOutput() K8SecretProviderClassMapOutput
	ToK8SecretProviderClassMapOutputWithContext(context.Context) K8SecretProviderClassMapOutput
}

type K8SecretProviderClassMap map[string]K8SecretProviderClassInput

func (K8SecretProviderClassMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8SecretProviderClass)(nil)).Elem()
}

func (i K8SecretProviderClassMap) ToK8SecretProviderClassMapOutput() K8SecretProviderClassMapOutput {
	return i.ToK8SecretProviderClassMapOutputWithContext(context.Background())
}

func (i K8SecretProviderClassMap) ToK8SecretProviderClassMapOutputWithContext(ctx context.Context) K8SecretProviderClassMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8SecretProviderClassMapOutput)
}

type K8SecretProviderClassOutput struct{ *pulumi.OutputState }

func (K8SecretProviderClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8SecretProviderClass)(nil)).Elem()
}

func (o K8SecretProviderClassOutput) ToK8SecretProviderClassOutput() K8SecretProviderClassOutput {
	return o
}

func (o K8SecretProviderClassOutput) ToK8SecretProviderClassOutputWithContext(ctx context.Context) K8SecretProviderClassOutput {
	return o
}

// An unstructured key value map stored with the secret provider class that may be used to store arbitrary metadata.
func (o K8SecretProviderClassOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *K8SecretProviderClass) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) the service.
func (o K8SecretProviderClassOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *K8SecretProviderClass) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the Secret Provider Class.
func (o K8SecretProviderClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *K8SecretProviderClass) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The parameters section contains the details of the mount request.
func (o K8SecretProviderClassOutput) Parameters() pulumi.StringOutput {
	return o.ApplyT(func(v *K8SecretProviderClass) pulumi.StringOutput { return v.Parameters }).(pulumi.StringOutput)
}

// You may want to create a Kubernetes Secret to mirror the mounted content. Use the optional secretObjects field to define the desired state of the synced Kubernetes secret objects
func (o K8SecretProviderClassOutput) SecretObjects() K8SecretProviderClassSecretObjectArrayOutput {
	return o.ApplyT(func(v *K8SecretProviderClass) K8SecretProviderClassSecretObjectArrayOutput { return v.SecretObjects }).(K8SecretProviderClassSecretObjectArrayOutput)
}

// Provider to be used.
func (o K8SecretProviderClassOutput) SecretProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *K8SecretProviderClass) pulumi.StringOutput { return v.SecretProvider }).(pulumi.StringOutput)
}

// The GUID of the tenant that the Secret Provider Class will be created in.
func (o K8SecretProviderClassOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *K8SecretProviderClass) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type K8SecretProviderClassArrayOutput struct{ *pulumi.OutputState }

func (K8SecretProviderClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8SecretProviderClass)(nil)).Elem()
}

func (o K8SecretProviderClassArrayOutput) ToK8SecretProviderClassArrayOutput() K8SecretProviderClassArrayOutput {
	return o
}

func (o K8SecretProviderClassArrayOutput) ToK8SecretProviderClassArrayOutputWithContext(ctx context.Context) K8SecretProviderClassArrayOutput {
	return o
}

func (o K8SecretProviderClassArrayOutput) Index(i pulumi.IntInput) K8SecretProviderClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *K8SecretProviderClass {
		return vs[0].([]*K8SecretProviderClass)[vs[1].(int)]
	}).(K8SecretProviderClassOutput)
}

type K8SecretProviderClassMapOutput struct{ *pulumi.OutputState }

func (K8SecretProviderClassMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8SecretProviderClass)(nil)).Elem()
}

func (o K8SecretProviderClassMapOutput) ToK8SecretProviderClassMapOutput() K8SecretProviderClassMapOutput {
	return o
}

func (o K8SecretProviderClassMapOutput) ToK8SecretProviderClassMapOutputWithContext(ctx context.Context) K8SecretProviderClassMapOutput {
	return o
}

func (o K8SecretProviderClassMapOutput) MapIndex(k pulumi.StringInput) K8SecretProviderClassOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *K8SecretProviderClass {
		return vs[0].(map[string]*K8SecretProviderClass)[vs[1].(string)]
	}).(K8SecretProviderClassOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*K8SecretProviderClassInput)(nil)).Elem(), &K8SecretProviderClass{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8SecretProviderClassArrayInput)(nil)).Elem(), K8SecretProviderClassArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8SecretProviderClassMapInput)(nil)).Elem(), K8SecretProviderClassMap{})
	pulumi.RegisterOutputType(K8SecretProviderClassOutput{})
	pulumi.RegisterOutputType(K8SecretProviderClassArrayOutput{})
	pulumi.RegisterOutputType(K8SecretProviderClassMapOutput{})
}
