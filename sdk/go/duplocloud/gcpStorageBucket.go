// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `GcpStorageBucket` manages a GCP storage bucket in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewGcpStorageBucket(ctx, "mybucket", &duplocloud.GcpStorageBucketArgs{
//				TenantId:         myapp.TenantId,
//				Name:             pulumi.String("mybucket"),
//				EnableVersioning: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing GCP storage bucket
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the GCP storage bucket
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/gcpStorageBucket:GcpStorageBucket mybucket *TENANT_ID*/*SHORT_NAME*
// ```
type GcpStorageBucket struct {
	pulumi.CustomResourceState

	// Whether or not public access might be allowed for the storage bucket. Defaults to `false`.
	AllowPublicAccess pulumi.BoolPtrOutput `pulumi:"allowPublicAccess"`
	// Whether or not versioning is enabled for the storage bucket. Defaults to `false`.
	EnableVersioning pulumi.BoolPtrOutput `pulumi:"enableVersioning"`
	// The full name of the storage bucket.
	Fullname pulumi.StringOutput `pulumi:"fullname"`
	// The labels assigned to this storage bucket.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The short name of the storage bucket.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringOutput `pulumi:"name"`
	// The SelfLink of the storage bucket.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The GUID of the tenant that the storage bucket will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewGcpStorageBucket registers a new resource with the given unique name, arguments, and options.
func NewGcpStorageBucket(ctx *pulumi.Context,
	name string, args *GcpStorageBucketArgs, opts ...pulumi.ResourceOption) (*GcpStorageBucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GcpStorageBucket
	err := ctx.RegisterResource("duplocloud:index/gcpStorageBucket:GcpStorageBucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcpStorageBucket gets an existing GcpStorageBucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcpStorageBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpStorageBucketState, opts ...pulumi.ResourceOption) (*GcpStorageBucket, error) {
	var resource GcpStorageBucket
	err := ctx.ReadResource("duplocloud:index/gcpStorageBucket:GcpStorageBucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcpStorageBucket resources.
type gcpStorageBucketState struct {
	// Whether or not public access might be allowed for the storage bucket. Defaults to `false`.
	AllowPublicAccess *bool `pulumi:"allowPublicAccess"`
	// Whether or not versioning is enabled for the storage bucket. Defaults to `false`.
	EnableVersioning *bool `pulumi:"enableVersioning"`
	// The full name of the storage bucket.
	Fullname *string `pulumi:"fullname"`
	// The labels assigned to this storage bucket.
	Labels map[string]string `pulumi:"labels"`
	// The short name of the storage bucket.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// The SelfLink of the storage bucket.
	SelfLink *string `pulumi:"selfLink"`
	// The GUID of the tenant that the storage bucket will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type GcpStorageBucketState struct {
	// Whether or not public access might be allowed for the storage bucket. Defaults to `false`.
	AllowPublicAccess pulumi.BoolPtrInput
	// Whether or not versioning is enabled for the storage bucket. Defaults to `false`.
	EnableVersioning pulumi.BoolPtrInput
	// The full name of the storage bucket.
	Fullname pulumi.StringPtrInput
	// The labels assigned to this storage bucket.
	Labels pulumi.StringMapInput
	// The short name of the storage bucket.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// The SelfLink of the storage bucket.
	SelfLink pulumi.StringPtrInput
	// The GUID of the tenant that the storage bucket will be created in.
	TenantId pulumi.StringPtrInput
}

func (GcpStorageBucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpStorageBucketState)(nil)).Elem()
}

type gcpStorageBucketArgs struct {
	// Whether or not public access might be allowed for the storage bucket. Defaults to `false`.
	AllowPublicAccess *bool `pulumi:"allowPublicAccess"`
	// Whether or not versioning is enabled for the storage bucket. Defaults to `false`.
	EnableVersioning *bool `pulumi:"enableVersioning"`
	// The labels assigned to this storage bucket.
	Labels map[string]string `pulumi:"labels"`
	// The short name of the storage bucket.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// The GUID of the tenant that the storage bucket will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a GcpStorageBucket resource.
type GcpStorageBucketArgs struct {
	// Whether or not public access might be allowed for the storage bucket. Defaults to `false`.
	AllowPublicAccess pulumi.BoolPtrInput
	// Whether or not versioning is enabled for the storage bucket. Defaults to `false`.
	EnableVersioning pulumi.BoolPtrInput
	// The labels assigned to this storage bucket.
	Labels pulumi.StringMapInput
	// The short name of the storage bucket.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// The GUID of the tenant that the storage bucket will be created in.
	TenantId pulumi.StringInput
}

func (GcpStorageBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpStorageBucketArgs)(nil)).Elem()
}

type GcpStorageBucketInput interface {
	pulumi.Input

	ToGcpStorageBucketOutput() GcpStorageBucketOutput
	ToGcpStorageBucketOutputWithContext(ctx context.Context) GcpStorageBucketOutput
}

func (*GcpStorageBucket) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpStorageBucket)(nil)).Elem()
}

func (i *GcpStorageBucket) ToGcpStorageBucketOutput() GcpStorageBucketOutput {
	return i.ToGcpStorageBucketOutputWithContext(context.Background())
}

func (i *GcpStorageBucket) ToGcpStorageBucketOutputWithContext(ctx context.Context) GcpStorageBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpStorageBucketOutput)
}

// GcpStorageBucketArrayInput is an input type that accepts GcpStorageBucketArray and GcpStorageBucketArrayOutput values.
// You can construct a concrete instance of `GcpStorageBucketArrayInput` via:
//
//	GcpStorageBucketArray{ GcpStorageBucketArgs{...} }
type GcpStorageBucketArrayInput interface {
	pulumi.Input

	ToGcpStorageBucketArrayOutput() GcpStorageBucketArrayOutput
	ToGcpStorageBucketArrayOutputWithContext(context.Context) GcpStorageBucketArrayOutput
}

type GcpStorageBucketArray []GcpStorageBucketInput

func (GcpStorageBucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpStorageBucket)(nil)).Elem()
}

func (i GcpStorageBucketArray) ToGcpStorageBucketArrayOutput() GcpStorageBucketArrayOutput {
	return i.ToGcpStorageBucketArrayOutputWithContext(context.Background())
}

func (i GcpStorageBucketArray) ToGcpStorageBucketArrayOutputWithContext(ctx context.Context) GcpStorageBucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpStorageBucketArrayOutput)
}

// GcpStorageBucketMapInput is an input type that accepts GcpStorageBucketMap and GcpStorageBucketMapOutput values.
// You can construct a concrete instance of `GcpStorageBucketMapInput` via:
//
//	GcpStorageBucketMap{ "key": GcpStorageBucketArgs{...} }
type GcpStorageBucketMapInput interface {
	pulumi.Input

	ToGcpStorageBucketMapOutput() GcpStorageBucketMapOutput
	ToGcpStorageBucketMapOutputWithContext(context.Context) GcpStorageBucketMapOutput
}

type GcpStorageBucketMap map[string]GcpStorageBucketInput

func (GcpStorageBucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpStorageBucket)(nil)).Elem()
}

func (i GcpStorageBucketMap) ToGcpStorageBucketMapOutput() GcpStorageBucketMapOutput {
	return i.ToGcpStorageBucketMapOutputWithContext(context.Background())
}

func (i GcpStorageBucketMap) ToGcpStorageBucketMapOutputWithContext(ctx context.Context) GcpStorageBucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpStorageBucketMapOutput)
}

type GcpStorageBucketOutput struct{ *pulumi.OutputState }

func (GcpStorageBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpStorageBucket)(nil)).Elem()
}

func (o GcpStorageBucketOutput) ToGcpStorageBucketOutput() GcpStorageBucketOutput {
	return o
}

func (o GcpStorageBucketOutput) ToGcpStorageBucketOutputWithContext(ctx context.Context) GcpStorageBucketOutput {
	return o
}

// Whether or not public access might be allowed for the storage bucket. Defaults to `false`.
func (o GcpStorageBucketOutput) AllowPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcpStorageBucket) pulumi.BoolPtrOutput { return v.AllowPublicAccess }).(pulumi.BoolPtrOutput)
}

// Whether or not versioning is enabled for the storage bucket. Defaults to `false`.
func (o GcpStorageBucketOutput) EnableVersioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcpStorageBucket) pulumi.BoolPtrOutput { return v.EnableVersioning }).(pulumi.BoolPtrOutput)
}

// The full name of the storage bucket.
func (o GcpStorageBucketOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpStorageBucket) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

// The labels assigned to this storage bucket.
func (o GcpStorageBucketOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GcpStorageBucket) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The short name of the storage bucket.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
func (o GcpStorageBucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpStorageBucket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The SelfLink of the storage bucket.
func (o GcpStorageBucketOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpStorageBucket) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The GUID of the tenant that the storage bucket will be created in.
func (o GcpStorageBucketOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpStorageBucket) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type GcpStorageBucketArrayOutput struct{ *pulumi.OutputState }

func (GcpStorageBucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpStorageBucket)(nil)).Elem()
}

func (o GcpStorageBucketArrayOutput) ToGcpStorageBucketArrayOutput() GcpStorageBucketArrayOutput {
	return o
}

func (o GcpStorageBucketArrayOutput) ToGcpStorageBucketArrayOutputWithContext(ctx context.Context) GcpStorageBucketArrayOutput {
	return o
}

func (o GcpStorageBucketArrayOutput) Index(i pulumi.IntInput) GcpStorageBucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GcpStorageBucket {
		return vs[0].([]*GcpStorageBucket)[vs[1].(int)]
	}).(GcpStorageBucketOutput)
}

type GcpStorageBucketMapOutput struct{ *pulumi.OutputState }

func (GcpStorageBucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpStorageBucket)(nil)).Elem()
}

func (o GcpStorageBucketMapOutput) ToGcpStorageBucketMapOutput() GcpStorageBucketMapOutput {
	return o
}

func (o GcpStorageBucketMapOutput) ToGcpStorageBucketMapOutputWithContext(ctx context.Context) GcpStorageBucketMapOutput {
	return o
}

func (o GcpStorageBucketMapOutput) MapIndex(k pulumi.StringInput) GcpStorageBucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GcpStorageBucket {
		return vs[0].(map[string]*GcpStorageBucket)[vs[1].(string)]
	}).(GcpStorageBucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcpStorageBucketInput)(nil)).Elem(), &GcpStorageBucket{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpStorageBucketArrayInput)(nil)).Elem(), GcpStorageBucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpStorageBucketMapInput)(nil)).Elem(), GcpStorageBucketMap{})
	pulumi.RegisterOutputType(GcpStorageBucketOutput{})
	pulumi.RegisterOutputType(GcpStorageBucketArrayOutput{})
	pulumi.RegisterOutputType(GcpStorageBucketMapOutput{})
}
