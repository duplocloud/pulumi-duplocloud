// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `duplocloudGcpK8NodePools` manages a GCP Node Pool in Duplo.
//
// ## Import
//
// Example: Importing an existing GCP Node Pool
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *FULLNAME* is the  name of the Node Pool
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/gcpNodePool:GcpNodePool node_pool *TENANT_ID*/*FULLNAME*
// ```
type GcpNodePool struct {
	pulumi.CustomResourceState

	Accelerators GcpNodePoolAcceleratorArrayOutput `pulumi:"accelerators"`
	// Whether the nodes will be automatically repaired.
	AutoRepair pulumi.BoolOutput `pulumi:"autoRepair"`
	// Whether the nodes will be automatically upgraded.
	AutoUpgrade pulumi.BoolOutput `pulumi:"autoUpgrade"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the
	// default disk size is 100GB.
	DiscSizeGb pulumi.IntOutput `pulumi:"discSizeGb"`
	// Type of the disk attached to each node If unspecified, the default disk type is 'pd-standard'
	DiscType pulumi.StringOutput `pulumi:"discType"`
	// The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
	// attribute.
	Fullname pulumi.StringOutput `pulumi:"fullname"`
	// The image type to use for this node. Note that for a given image type, the latest version of it will be used
	ImageType pulumi.StringOutput `pulumi:"imageType"`
	// The initial node count for the pool
	InitialNodeCount pulumi.IntPtrOutput `pulumi:"initialNodeCount"`
	// Is autoscaling enabled for this node pool.
	IsAutoscalingEnabled pulumi.BoolOutput `pulumi:"isAutoscalingEnabled"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Parameters that can be configured on Linux nodes
	LinuxNodeConfig GcpNodePoolLinuxNodeConfigOutput `pulumi:"linuxNodeConfig"`
	// Update strategy of the node pool.
	LocationPolicy pulumi.StringPtrOutput `pulumi:"locationPolicy"`
	// The name of a Google Compute Engine machine type. If unspecified, the default machine type is e2-medium.
	MachineType pulumi.StringOutput `pulumi:"machineType"`
	// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
	MaxNodeCount pulumi.IntPtrOutput `pulumi:"maxNodeCount"`
	// The metadata key/value pairs assigned to instances in the cluster.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
	MinNodeCount pulumi.IntPtrOutput `pulumi:"minNodeCount"`
	// The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
	// attribute.
	Name pulumi.StringOutput `pulumi:"name"`
	// Logging configuration.
	NodePoolLoggingConfig GcpNodePoolNodePoolLoggingConfigOutput `pulumi:"nodePoolLoggingConfig"`
	// The set of Google API scopes to be made available on all of the node VMs under the default service account.
	OauthScopes pulumi.StringArrayOutput `pulumi:"oauthScopes"`
	// Resource labels associated to node pool
	ResourceLabels pulumi.StringMapOutput `pulumi:"resourceLabels"`
	// Spot flag for enabling Spot VM
	Spot pulumi.BoolPtrOutput `pulumi:"spot"`
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls
	// and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
	Tags   pulumi.StringArrayOutput    `pulumi:"tags"`
	Taints GcpNodePoolTaintArrayOutput `pulumi:"taints"`
	// The GUID of the tenant that the node pool will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
	TotalMaxNodeCount pulumi.IntPtrOutput `pulumi:"totalMaxNodeCount"`
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
	TotalMinNodeCount pulumi.IntPtrOutput `pulumi:"totalMinNodeCount"`
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings GcpNodePoolUpgradeSettingArrayOutput `pulumi:"upgradeSettings"`
	// The list of Google Compute Engine zones in which the NodePool's nodes should be located.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewGcpNodePool registers a new resource with the given unique name, arguments, and options.
func NewGcpNodePool(ctx *pulumi.Context,
	name string, args *GcpNodePoolArgs, opts ...pulumi.ResourceOption) (*GcpNodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageType == nil {
		return nil, errors.New("invalid value for required argument 'ImageType'")
	}
	if args.MachineType == nil {
		return nil, errors.New("invalid value for required argument 'MachineType'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.Zones == nil {
		return nil, errors.New("invalid value for required argument 'Zones'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GcpNodePool
	err := ctx.RegisterResource("duplocloud:index/gcpNodePool:GcpNodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcpNodePool gets an existing GcpNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcpNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpNodePoolState, opts ...pulumi.ResourceOption) (*GcpNodePool, error) {
	var resource GcpNodePool
	err := ctx.ReadResource("duplocloud:index/gcpNodePool:GcpNodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcpNodePool resources.
type gcpNodePoolState struct {
	Accelerators []GcpNodePoolAccelerator `pulumi:"accelerators"`
	// Whether the nodes will be automatically repaired.
	AutoRepair *bool `pulumi:"autoRepair"`
	// Whether the nodes will be automatically upgraded.
	AutoUpgrade *bool `pulumi:"autoUpgrade"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the
	// default disk size is 100GB.
	DiscSizeGb *int `pulumi:"discSizeGb"`
	// Type of the disk attached to each node If unspecified, the default disk type is 'pd-standard'
	DiscType *string `pulumi:"discType"`
	// The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
	// attribute.
	Fullname *string `pulumi:"fullname"`
	// The image type to use for this node. Note that for a given image type, the latest version of it will be used
	ImageType *string `pulumi:"imageType"`
	// The initial node count for the pool
	InitialNodeCount *int `pulumi:"initialNodeCount"`
	// Is autoscaling enabled for this node pool.
	IsAutoscalingEnabled *bool `pulumi:"isAutoscalingEnabled"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node.
	Labels map[string]string `pulumi:"labels"`
	// Parameters that can be configured on Linux nodes
	LinuxNodeConfig *GcpNodePoolLinuxNodeConfig `pulumi:"linuxNodeConfig"`
	// Update strategy of the node pool.
	LocationPolicy *string `pulumi:"locationPolicy"`
	// The name of a Google Compute Engine machine type. If unspecified, the default machine type is e2-medium.
	MachineType *string `pulumi:"machineType"`
	// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
	MaxNodeCount *int `pulumi:"maxNodeCount"`
	// The metadata key/value pairs assigned to instances in the cluster.
	Metadata map[string]string `pulumi:"metadata"`
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
	MinNodeCount *int `pulumi:"minNodeCount"`
	// The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
	// attribute.
	Name *string `pulumi:"name"`
	// Logging configuration.
	NodePoolLoggingConfig *GcpNodePoolNodePoolLoggingConfig `pulumi:"nodePoolLoggingConfig"`
	// The set of Google API scopes to be made available on all of the node VMs under the default service account.
	OauthScopes []string `pulumi:"oauthScopes"`
	// Resource labels associated to node pool
	ResourceLabels map[string]string `pulumi:"resourceLabels"`
	// Spot flag for enabling Spot VM
	Spot *bool `pulumi:"spot"`
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls
	// and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
	Tags   []string           `pulumi:"tags"`
	Taints []GcpNodePoolTaint `pulumi:"taints"`
	// The GUID of the tenant that the node pool will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
	TotalMaxNodeCount *int `pulumi:"totalMaxNodeCount"`
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
	TotalMinNodeCount *int `pulumi:"totalMinNodeCount"`
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings []GcpNodePoolUpgradeSetting `pulumi:"upgradeSettings"`
	// The list of Google Compute Engine zones in which the NodePool's nodes should be located.
	Zones []string `pulumi:"zones"`
}

type GcpNodePoolState struct {
	Accelerators GcpNodePoolAcceleratorArrayInput
	// Whether the nodes will be automatically repaired.
	AutoRepair pulumi.BoolPtrInput
	// Whether the nodes will be automatically upgraded.
	AutoUpgrade pulumi.BoolPtrInput
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the
	// default disk size is 100GB.
	DiscSizeGb pulumi.IntPtrInput
	// Type of the disk attached to each node If unspecified, the default disk type is 'pd-standard'
	DiscType pulumi.StringPtrInput
	// The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
	// attribute.
	Fullname pulumi.StringPtrInput
	// The image type to use for this node. Note that for a given image type, the latest version of it will be used
	ImageType pulumi.StringPtrInput
	// The initial node count for the pool
	InitialNodeCount pulumi.IntPtrInput
	// Is autoscaling enabled for this node pool.
	IsAutoscalingEnabled pulumi.BoolPtrInput
	// The map of Kubernetes labels (key/value pairs) to be applied to each node.
	Labels pulumi.StringMapInput
	// Parameters that can be configured on Linux nodes
	LinuxNodeConfig GcpNodePoolLinuxNodeConfigPtrInput
	// Update strategy of the node pool.
	LocationPolicy pulumi.StringPtrInput
	// The name of a Google Compute Engine machine type. If unspecified, the default machine type is e2-medium.
	MachineType pulumi.StringPtrInput
	// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
	MaxNodeCount pulumi.IntPtrInput
	// The metadata key/value pairs assigned to instances in the cluster.
	Metadata pulumi.StringMapInput
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
	MinNodeCount pulumi.IntPtrInput
	// The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
	// attribute.
	Name pulumi.StringPtrInput
	// Logging configuration.
	NodePoolLoggingConfig GcpNodePoolNodePoolLoggingConfigPtrInput
	// The set of Google API scopes to be made available on all of the node VMs under the default service account.
	OauthScopes pulumi.StringArrayInput
	// Resource labels associated to node pool
	ResourceLabels pulumi.StringMapInput
	// Spot flag for enabling Spot VM
	Spot pulumi.BoolPtrInput
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls
	// and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
	Tags   pulumi.StringArrayInput
	Taints GcpNodePoolTaintArrayInput
	// The GUID of the tenant that the node pool will be created in.
	TenantId pulumi.StringPtrInput
	// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
	TotalMaxNodeCount pulumi.IntPtrInput
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
	TotalMinNodeCount pulumi.IntPtrInput
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings GcpNodePoolUpgradeSettingArrayInput
	// The list of Google Compute Engine zones in which the NodePool's nodes should be located.
	Zones pulumi.StringArrayInput
}

func (GcpNodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpNodePoolState)(nil)).Elem()
}

type gcpNodePoolArgs struct {
	Accelerators []GcpNodePoolAccelerator `pulumi:"accelerators"`
	// Whether the nodes will be automatically repaired.
	AutoRepair *bool `pulumi:"autoRepair"`
	// Whether the nodes will be automatically upgraded.
	AutoUpgrade *bool `pulumi:"autoUpgrade"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the
	// default disk size is 100GB.
	DiscSizeGb *int `pulumi:"discSizeGb"`
	// Type of the disk attached to each node If unspecified, the default disk type is 'pd-standard'
	DiscType *string `pulumi:"discType"`
	// The image type to use for this node. Note that for a given image type, the latest version of it will be used
	ImageType string `pulumi:"imageType"`
	// The initial node count for the pool
	InitialNodeCount *int `pulumi:"initialNodeCount"`
	// Is autoscaling enabled for this node pool.
	IsAutoscalingEnabled *bool `pulumi:"isAutoscalingEnabled"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node.
	Labels map[string]string `pulumi:"labels"`
	// Parameters that can be configured on Linux nodes
	LinuxNodeConfig *GcpNodePoolLinuxNodeConfig `pulumi:"linuxNodeConfig"`
	// Update strategy of the node pool.
	LocationPolicy *string `pulumi:"locationPolicy"`
	// The name of a Google Compute Engine machine type. If unspecified, the default machine type is e2-medium.
	MachineType string `pulumi:"machineType"`
	// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
	MaxNodeCount *int `pulumi:"maxNodeCount"`
	// The metadata key/value pairs assigned to instances in the cluster.
	Metadata map[string]string `pulumi:"metadata"`
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
	MinNodeCount *int `pulumi:"minNodeCount"`
	// The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
	// attribute.
	Name *string `pulumi:"name"`
	// Logging configuration.
	NodePoolLoggingConfig *GcpNodePoolNodePoolLoggingConfig `pulumi:"nodePoolLoggingConfig"`
	// The set of Google API scopes to be made available on all of the node VMs under the default service account.
	OauthScopes []string `pulumi:"oauthScopes"`
	// Resource labels associated to node pool
	ResourceLabels map[string]string `pulumi:"resourceLabels"`
	// Spot flag for enabling Spot VM
	Spot *bool `pulumi:"spot"`
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls
	// and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
	Tags   []string           `pulumi:"tags"`
	Taints []GcpNodePoolTaint `pulumi:"taints"`
	// The GUID of the tenant that the node pool will be created in.
	TenantId string `pulumi:"tenantId"`
	// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
	TotalMaxNodeCount *int `pulumi:"totalMaxNodeCount"`
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
	TotalMinNodeCount *int `pulumi:"totalMinNodeCount"`
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings []GcpNodePoolUpgradeSetting `pulumi:"upgradeSettings"`
	// The list of Google Compute Engine zones in which the NodePool's nodes should be located.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a GcpNodePool resource.
type GcpNodePoolArgs struct {
	Accelerators GcpNodePoolAcceleratorArrayInput
	// Whether the nodes will be automatically repaired.
	AutoRepair pulumi.BoolPtrInput
	// Whether the nodes will be automatically upgraded.
	AutoUpgrade pulumi.BoolPtrInput
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the
	// default disk size is 100GB.
	DiscSizeGb pulumi.IntPtrInput
	// Type of the disk attached to each node If unspecified, the default disk type is 'pd-standard'
	DiscType pulumi.StringPtrInput
	// The image type to use for this node. Note that for a given image type, the latest version of it will be used
	ImageType pulumi.StringInput
	// The initial node count for the pool
	InitialNodeCount pulumi.IntPtrInput
	// Is autoscaling enabled for this node pool.
	IsAutoscalingEnabled pulumi.BoolPtrInput
	// The map of Kubernetes labels (key/value pairs) to be applied to each node.
	Labels pulumi.StringMapInput
	// Parameters that can be configured on Linux nodes
	LinuxNodeConfig GcpNodePoolLinuxNodeConfigPtrInput
	// Update strategy of the node pool.
	LocationPolicy pulumi.StringPtrInput
	// The name of a Google Compute Engine machine type. If unspecified, the default machine type is e2-medium.
	MachineType pulumi.StringInput
	// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
	MaxNodeCount pulumi.IntPtrInput
	// The metadata key/value pairs assigned to instances in the cluster.
	Metadata pulumi.StringMapInput
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
	MinNodeCount pulumi.IntPtrInput
	// The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
	// attribute.
	Name pulumi.StringPtrInput
	// Logging configuration.
	NodePoolLoggingConfig GcpNodePoolNodePoolLoggingConfigPtrInput
	// The set of Google API scopes to be made available on all of the node VMs under the default service account.
	OauthScopes pulumi.StringArrayInput
	// Resource labels associated to node pool
	ResourceLabels pulumi.StringMapInput
	// Spot flag for enabling Spot VM
	Spot pulumi.BoolPtrInput
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls
	// and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
	Tags   pulumi.StringArrayInput
	Taints GcpNodePoolTaintArrayInput
	// The GUID of the tenant that the node pool will be created in.
	TenantId pulumi.StringInput
	// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
	TotalMaxNodeCount pulumi.IntPtrInput
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
	TotalMinNodeCount pulumi.IntPtrInput
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings GcpNodePoolUpgradeSettingArrayInput
	// The list of Google Compute Engine zones in which the NodePool's nodes should be located.
	Zones pulumi.StringArrayInput
}

func (GcpNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpNodePoolArgs)(nil)).Elem()
}

type GcpNodePoolInput interface {
	pulumi.Input

	ToGcpNodePoolOutput() GcpNodePoolOutput
	ToGcpNodePoolOutputWithContext(ctx context.Context) GcpNodePoolOutput
}

func (*GcpNodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpNodePool)(nil)).Elem()
}

func (i *GcpNodePool) ToGcpNodePoolOutput() GcpNodePoolOutput {
	return i.ToGcpNodePoolOutputWithContext(context.Background())
}

func (i *GcpNodePool) ToGcpNodePoolOutputWithContext(ctx context.Context) GcpNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpNodePoolOutput)
}

// GcpNodePoolArrayInput is an input type that accepts GcpNodePoolArray and GcpNodePoolArrayOutput values.
// You can construct a concrete instance of `GcpNodePoolArrayInput` via:
//
//	GcpNodePoolArray{ GcpNodePoolArgs{...} }
type GcpNodePoolArrayInput interface {
	pulumi.Input

	ToGcpNodePoolArrayOutput() GcpNodePoolArrayOutput
	ToGcpNodePoolArrayOutputWithContext(context.Context) GcpNodePoolArrayOutput
}

type GcpNodePoolArray []GcpNodePoolInput

func (GcpNodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpNodePool)(nil)).Elem()
}

func (i GcpNodePoolArray) ToGcpNodePoolArrayOutput() GcpNodePoolArrayOutput {
	return i.ToGcpNodePoolArrayOutputWithContext(context.Background())
}

func (i GcpNodePoolArray) ToGcpNodePoolArrayOutputWithContext(ctx context.Context) GcpNodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpNodePoolArrayOutput)
}

// GcpNodePoolMapInput is an input type that accepts GcpNodePoolMap and GcpNodePoolMapOutput values.
// You can construct a concrete instance of `GcpNodePoolMapInput` via:
//
//	GcpNodePoolMap{ "key": GcpNodePoolArgs{...} }
type GcpNodePoolMapInput interface {
	pulumi.Input

	ToGcpNodePoolMapOutput() GcpNodePoolMapOutput
	ToGcpNodePoolMapOutputWithContext(context.Context) GcpNodePoolMapOutput
}

type GcpNodePoolMap map[string]GcpNodePoolInput

func (GcpNodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpNodePool)(nil)).Elem()
}

func (i GcpNodePoolMap) ToGcpNodePoolMapOutput() GcpNodePoolMapOutput {
	return i.ToGcpNodePoolMapOutputWithContext(context.Background())
}

func (i GcpNodePoolMap) ToGcpNodePoolMapOutputWithContext(ctx context.Context) GcpNodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpNodePoolMapOutput)
}

type GcpNodePoolOutput struct{ *pulumi.OutputState }

func (GcpNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpNodePool)(nil)).Elem()
}

func (o GcpNodePoolOutput) ToGcpNodePoolOutput() GcpNodePoolOutput {
	return o
}

func (o GcpNodePoolOutput) ToGcpNodePoolOutputWithContext(ctx context.Context) GcpNodePoolOutput {
	return o
}

func (o GcpNodePoolOutput) Accelerators() GcpNodePoolAcceleratorArrayOutput {
	return o.ApplyT(func(v *GcpNodePool) GcpNodePoolAcceleratorArrayOutput { return v.Accelerators }).(GcpNodePoolAcceleratorArrayOutput)
}

// Whether the nodes will be automatically repaired.
func (o GcpNodePoolOutput) AutoRepair() pulumi.BoolOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.BoolOutput { return v.AutoRepair }).(pulumi.BoolOutput)
}

// Whether the nodes will be automatically upgraded.
func (o GcpNodePoolOutput) AutoUpgrade() pulumi.BoolOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.BoolOutput { return v.AutoUpgrade }).(pulumi.BoolOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the
// default disk size is 100GB.
func (o GcpNodePoolOutput) DiscSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.IntOutput { return v.DiscSizeGb }).(pulumi.IntOutput)
}

// Type of the disk attached to each node If unspecified, the default disk type is 'pd-standard'
func (o GcpNodePoolOutput) DiscType() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.StringOutput { return v.DiscType }).(pulumi.StringOutput)
}

// The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
// attribute.
func (o GcpNodePoolOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

// The image type to use for this node. Note that for a given image type, the latest version of it will be used
func (o GcpNodePoolOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.StringOutput { return v.ImageType }).(pulumi.StringOutput)
}

// The initial node count for the pool
func (o GcpNodePoolOutput) InitialNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.IntPtrOutput { return v.InitialNodeCount }).(pulumi.IntPtrOutput)
}

// Is autoscaling enabled for this node pool.
func (o GcpNodePoolOutput) IsAutoscalingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.BoolOutput { return v.IsAutoscalingEnabled }).(pulumi.BoolOutput)
}

// The map of Kubernetes labels (key/value pairs) to be applied to each node.
func (o GcpNodePoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Parameters that can be configured on Linux nodes
func (o GcpNodePoolOutput) LinuxNodeConfig() GcpNodePoolLinuxNodeConfigOutput {
	return o.ApplyT(func(v *GcpNodePool) GcpNodePoolLinuxNodeConfigOutput { return v.LinuxNodeConfig }).(GcpNodePoolLinuxNodeConfigOutput)
}

// Update strategy of the node pool.
func (o GcpNodePoolOutput) LocationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.StringPtrOutput { return v.LocationPolicy }).(pulumi.StringPtrOutput)
}

// The name of a Google Compute Engine machine type. If unspecified, the default machine type is e2-medium.
func (o GcpNodePoolOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.StringOutput { return v.MachineType }).(pulumi.StringOutput)
}

// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
func (o GcpNodePoolOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.IntPtrOutput { return v.MaxNodeCount }).(pulumi.IntPtrOutput)
}

// The metadata key/value pairs assigned to instances in the cluster.
func (o GcpNodePoolOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
func (o GcpNodePoolOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.IntPtrOutput { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

// The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
// attribute.
func (o GcpNodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Logging configuration.
func (o GcpNodePoolOutput) NodePoolLoggingConfig() GcpNodePoolNodePoolLoggingConfigOutput {
	return o.ApplyT(func(v *GcpNodePool) GcpNodePoolNodePoolLoggingConfigOutput { return v.NodePoolLoggingConfig }).(GcpNodePoolNodePoolLoggingConfigOutput)
}

// The set of Google API scopes to be made available on all of the node VMs under the default service account.
func (o GcpNodePoolOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.StringArrayOutput { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// Resource labels associated to node pool
func (o GcpNodePoolOutput) ResourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.StringMapOutput { return v.ResourceLabels }).(pulumi.StringMapOutput)
}

// Spot flag for enabling Spot VM
func (o GcpNodePoolOutput) Spot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.BoolPtrOutput { return v.Spot }).(pulumi.BoolPtrOutput)
}

// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls
// and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
func (o GcpNodePoolOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o GcpNodePoolOutput) Taints() GcpNodePoolTaintArrayOutput {
	return o.ApplyT(func(v *GcpNodePool) GcpNodePoolTaintArrayOutput { return v.Taints }).(GcpNodePoolTaintArrayOutput)
}

// The GUID of the tenant that the node pool will be created in.
func (o GcpNodePoolOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
func (o GcpNodePoolOutput) TotalMaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.IntPtrOutput { return v.TotalMaxNodeCount }).(pulumi.IntPtrOutput)
}

// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
func (o GcpNodePoolOutput) TotalMinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.IntPtrOutput { return v.TotalMinNodeCount }).(pulumi.IntPtrOutput)
}

// Upgrade settings control disruption and speed of the upgrade.
func (o GcpNodePoolOutput) UpgradeSettings() GcpNodePoolUpgradeSettingArrayOutput {
	return o.ApplyT(func(v *GcpNodePool) GcpNodePoolUpgradeSettingArrayOutput { return v.UpgradeSettings }).(GcpNodePoolUpgradeSettingArrayOutput)
}

// The list of Google Compute Engine zones in which the NodePool's nodes should be located.
func (o GcpNodePoolOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GcpNodePool) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

type GcpNodePoolArrayOutput struct{ *pulumi.OutputState }

func (GcpNodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpNodePool)(nil)).Elem()
}

func (o GcpNodePoolArrayOutput) ToGcpNodePoolArrayOutput() GcpNodePoolArrayOutput {
	return o
}

func (o GcpNodePoolArrayOutput) ToGcpNodePoolArrayOutputWithContext(ctx context.Context) GcpNodePoolArrayOutput {
	return o
}

func (o GcpNodePoolArrayOutput) Index(i pulumi.IntInput) GcpNodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GcpNodePool {
		return vs[0].([]*GcpNodePool)[vs[1].(int)]
	}).(GcpNodePoolOutput)
}

type GcpNodePoolMapOutput struct{ *pulumi.OutputState }

func (GcpNodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpNodePool)(nil)).Elem()
}

func (o GcpNodePoolMapOutput) ToGcpNodePoolMapOutput() GcpNodePoolMapOutput {
	return o
}

func (o GcpNodePoolMapOutput) ToGcpNodePoolMapOutputWithContext(ctx context.Context) GcpNodePoolMapOutput {
	return o
}

func (o GcpNodePoolMapOutput) MapIndex(k pulumi.StringInput) GcpNodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GcpNodePool {
		return vs[0].(map[string]*GcpNodePool)[vs[1].(string)]
	}).(GcpNodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcpNodePoolInput)(nil)).Elem(), &GcpNodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpNodePoolArrayInput)(nil)).Elem(), GcpNodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpNodePoolMapInput)(nil)).Elem(), GcpNodePoolMap{})
	pulumi.RegisterOutputType(GcpNodePoolOutput{})
	pulumi.RegisterOutputType(GcpNodePoolArrayOutput{})
	pulumi.RegisterOutputType(GcpNodePoolMapOutput{})
}
