// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `GcpPubsubTopic` manages a GCP pubsub topic in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewGcpPubsubTopic(ctx, "mytopic", &duplocloud.GcpPubsubTopicArgs{
//				TenantId: myapp.TenantId,
//				Name:     pulumi.String("mytopic"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing GCP pubsub topic
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the GCP pubsub topic
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/gcpPubsubTopic:GcpPubsubTopic mytopic *TENANT_ID*/*SHORT_NAME*
// ```
type GcpPubsubTopic struct {
	pulumi.CustomResourceState

	// The full name of the pubsub topic.
	Fullname pulumi.StringOutput `pulumi:"fullname"`
	// The labels assigned to this pubsub topic.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The short name of the pubsub topic.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringOutput `pulumi:"name"`
	// The SelfLink of the pubsub topic.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The GUID of the tenant that the pubsub topic will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewGcpPubsubTopic registers a new resource with the given unique name, arguments, and options.
func NewGcpPubsubTopic(ctx *pulumi.Context,
	name string, args *GcpPubsubTopicArgs, opts ...pulumi.ResourceOption) (*GcpPubsubTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GcpPubsubTopic
	err := ctx.RegisterResource("duplocloud:index/gcpPubsubTopic:GcpPubsubTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcpPubsubTopic gets an existing GcpPubsubTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcpPubsubTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpPubsubTopicState, opts ...pulumi.ResourceOption) (*GcpPubsubTopic, error) {
	var resource GcpPubsubTopic
	err := ctx.ReadResource("duplocloud:index/gcpPubsubTopic:GcpPubsubTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcpPubsubTopic resources.
type gcpPubsubTopicState struct {
	// The full name of the pubsub topic.
	Fullname *string `pulumi:"fullname"`
	// The labels assigned to this pubsub topic.
	Labels map[string]string `pulumi:"labels"`
	// The short name of the pubsub topic.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// The SelfLink of the pubsub topic.
	SelfLink *string `pulumi:"selfLink"`
	// The GUID of the tenant that the pubsub topic will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type GcpPubsubTopicState struct {
	// The full name of the pubsub topic.
	Fullname pulumi.StringPtrInput
	// The labels assigned to this pubsub topic.
	Labels pulumi.StringMapInput
	// The short name of the pubsub topic.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// The SelfLink of the pubsub topic.
	SelfLink pulumi.StringPtrInput
	// The GUID of the tenant that the pubsub topic will be created in.
	TenantId pulumi.StringPtrInput
}

func (GcpPubsubTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpPubsubTopicState)(nil)).Elem()
}

type gcpPubsubTopicArgs struct {
	// The labels assigned to this pubsub topic.
	Labels map[string]string `pulumi:"labels"`
	// The short name of the pubsub topic.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name *string `pulumi:"name"`
	// The GUID of the tenant that the pubsub topic will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a GcpPubsubTopic resource.
type GcpPubsubTopicArgs struct {
	// The labels assigned to this pubsub topic.
	Labels pulumi.StringMapInput
	// The short name of the pubsub topic.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
	Name pulumi.StringPtrInput
	// The GUID of the tenant that the pubsub topic will be created in.
	TenantId pulumi.StringInput
}

func (GcpPubsubTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpPubsubTopicArgs)(nil)).Elem()
}

type GcpPubsubTopicInput interface {
	pulumi.Input

	ToGcpPubsubTopicOutput() GcpPubsubTopicOutput
	ToGcpPubsubTopicOutputWithContext(ctx context.Context) GcpPubsubTopicOutput
}

func (*GcpPubsubTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpPubsubTopic)(nil)).Elem()
}

func (i *GcpPubsubTopic) ToGcpPubsubTopicOutput() GcpPubsubTopicOutput {
	return i.ToGcpPubsubTopicOutputWithContext(context.Background())
}

func (i *GcpPubsubTopic) ToGcpPubsubTopicOutputWithContext(ctx context.Context) GcpPubsubTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpPubsubTopicOutput)
}

// GcpPubsubTopicArrayInput is an input type that accepts GcpPubsubTopicArray and GcpPubsubTopicArrayOutput values.
// You can construct a concrete instance of `GcpPubsubTopicArrayInput` via:
//
//	GcpPubsubTopicArray{ GcpPubsubTopicArgs{...} }
type GcpPubsubTopicArrayInput interface {
	pulumi.Input

	ToGcpPubsubTopicArrayOutput() GcpPubsubTopicArrayOutput
	ToGcpPubsubTopicArrayOutputWithContext(context.Context) GcpPubsubTopicArrayOutput
}

type GcpPubsubTopicArray []GcpPubsubTopicInput

func (GcpPubsubTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpPubsubTopic)(nil)).Elem()
}

func (i GcpPubsubTopicArray) ToGcpPubsubTopicArrayOutput() GcpPubsubTopicArrayOutput {
	return i.ToGcpPubsubTopicArrayOutputWithContext(context.Background())
}

func (i GcpPubsubTopicArray) ToGcpPubsubTopicArrayOutputWithContext(ctx context.Context) GcpPubsubTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpPubsubTopicArrayOutput)
}

// GcpPubsubTopicMapInput is an input type that accepts GcpPubsubTopicMap and GcpPubsubTopicMapOutput values.
// You can construct a concrete instance of `GcpPubsubTopicMapInput` via:
//
//	GcpPubsubTopicMap{ "key": GcpPubsubTopicArgs{...} }
type GcpPubsubTopicMapInput interface {
	pulumi.Input

	ToGcpPubsubTopicMapOutput() GcpPubsubTopicMapOutput
	ToGcpPubsubTopicMapOutputWithContext(context.Context) GcpPubsubTopicMapOutput
}

type GcpPubsubTopicMap map[string]GcpPubsubTopicInput

func (GcpPubsubTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpPubsubTopic)(nil)).Elem()
}

func (i GcpPubsubTopicMap) ToGcpPubsubTopicMapOutput() GcpPubsubTopicMapOutput {
	return i.ToGcpPubsubTopicMapOutputWithContext(context.Background())
}

func (i GcpPubsubTopicMap) ToGcpPubsubTopicMapOutputWithContext(ctx context.Context) GcpPubsubTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpPubsubTopicMapOutput)
}

type GcpPubsubTopicOutput struct{ *pulumi.OutputState }

func (GcpPubsubTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpPubsubTopic)(nil)).Elem()
}

func (o GcpPubsubTopicOutput) ToGcpPubsubTopicOutput() GcpPubsubTopicOutput {
	return o
}

func (o GcpPubsubTopicOutput) ToGcpPubsubTopicOutputWithContext(ctx context.Context) GcpPubsubTopicOutput {
	return o
}

// The full name of the pubsub topic.
func (o GcpPubsubTopicOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpPubsubTopic) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

// The labels assigned to this pubsub topic.
func (o GcpPubsubTopicOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GcpPubsubTopic) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The short name of the pubsub topic.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
func (o GcpPubsubTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpPubsubTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The SelfLink of the pubsub topic.
func (o GcpPubsubTopicOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpPubsubTopic) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The GUID of the tenant that the pubsub topic will be created in.
func (o GcpPubsubTopicOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpPubsubTopic) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type GcpPubsubTopicArrayOutput struct{ *pulumi.OutputState }

func (GcpPubsubTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpPubsubTopic)(nil)).Elem()
}

func (o GcpPubsubTopicArrayOutput) ToGcpPubsubTopicArrayOutput() GcpPubsubTopicArrayOutput {
	return o
}

func (o GcpPubsubTopicArrayOutput) ToGcpPubsubTopicArrayOutputWithContext(ctx context.Context) GcpPubsubTopicArrayOutput {
	return o
}

func (o GcpPubsubTopicArrayOutput) Index(i pulumi.IntInput) GcpPubsubTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GcpPubsubTopic {
		return vs[0].([]*GcpPubsubTopic)[vs[1].(int)]
	}).(GcpPubsubTopicOutput)
}

type GcpPubsubTopicMapOutput struct{ *pulumi.OutputState }

func (GcpPubsubTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpPubsubTopic)(nil)).Elem()
}

func (o GcpPubsubTopicMapOutput) ToGcpPubsubTopicMapOutput() GcpPubsubTopicMapOutput {
	return o
}

func (o GcpPubsubTopicMapOutput) ToGcpPubsubTopicMapOutputWithContext(ctx context.Context) GcpPubsubTopicMapOutput {
	return o
}

func (o GcpPubsubTopicMapOutput) MapIndex(k pulumi.StringInput) GcpPubsubTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GcpPubsubTopic {
		return vs[0].(map[string]*GcpPubsubTopic)[vs[1].(string)]
	}).(GcpPubsubTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcpPubsubTopicInput)(nil)).Elem(), &GcpPubsubTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpPubsubTopicArrayInput)(nil)).Elem(), GcpPubsubTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpPubsubTopicMapInput)(nil)).Elem(), GcpPubsubTopicMap{})
	pulumi.RegisterOutputType(GcpPubsubTopicOutput{})
	pulumi.RegisterOutputType(GcpPubsubTopicArrayOutput{})
	pulumi.RegisterOutputType(GcpPubsubTopicMapOutput{})
}
