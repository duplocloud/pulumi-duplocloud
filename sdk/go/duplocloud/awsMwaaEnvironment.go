// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AwsMwaaEnvironment` manages an AWS MWAA Environment resource in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			tenantKmsKey := duplocloud.GetTenantAwsKmsKeyOutput(ctx, duplocloud.GetTenantAwsKmsKeyOutputArgs{
//				TenantId: myapp.TenantId,
//			}, nil)
//			_, err = duplocloud.NewAwsMwaaEnvironment(ctx, "my-mwaa", &duplocloud.AwsMwaaEnvironmentArgs{
//				TenantId:            myapp.TenantId,
//				Name:                pulumi.String("airflow-test"),
//				SourceBucketArn:     pulumi.String("arn:aws:s3:::xxx-xxx-xx-xxxx"),
//				DagS3Path:           pulumi.String("AirflowDags/dag"),
//				PluginsS3Path:       pulumi.String("AirflowDags/plugins.zip"),
//				RequirementsS3Path:  pulumi.String("AirflowDags/requirements.txt"),
//				StartupScriptS3Path: pulumi.String("AirflowDags/startup-script.sh"),
//				KmsKey: pulumi.String(tenantKmsKey.ApplyT(func(tenantKmsKey duplocloud.GetTenantAwsKmsKeyResult) (*string, error) {
//					return &tenantKmsKey.KeyArn, nil
//				}).(pulumi.StringPtrOutput)),
//				Schedulers:                   pulumi.Int(2),
//				MaxWorkers:                   pulumi.Int(10),
//				MinWorkers:                   pulumi.Int(1),
//				AirflowVersion:               pulumi.String("2.6.3"),
//				WeeklyMaintenanceWindowStart: pulumi.String("SUN:23:30"),
//				EnvironmentClass:             pulumi.String("mw1.small"),
//				AirflowConfigurationOptions: pulumi.StringMap{
//					"core.log_format": pulumi.String("[%%(asctime)s] {{%%(filename)s:%%(lineno)d}} %%(levelname)s - %%(message)s"),
//				},
//				LoggingConfiguration: &duplocloud.AwsMwaaEnvironmentLoggingConfigurationArgs{
//					DagProcessingLogs: &duplocloud.AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogsArgs{
//						Enabled:  pulumi.Bool(false),
//						LogLevel: pulumi.String("INFO"),
//					},
//					SchedulerLogs: &duplocloud.AwsMwaaEnvironmentLoggingConfigurationSchedulerLogsArgs{
//						Enabled:  pulumi.Bool(false),
//						LogLevel: pulumi.String("INFO"),
//					},
//					TaskLogs: &duplocloud.AwsMwaaEnvironmentLoggingConfigurationTaskLogsArgs{
//						Enabled:  pulumi.Bool(false),
//						LogLevel: pulumi.String("INFO"),
//					},
//					WebserverLogs: &duplocloud.AwsMwaaEnvironmentLoggingConfigurationWebserverLogsArgs{
//						Enabled:  pulumi.Bool(false),
//						LogLevel: pulumi.String("INFO"),
//					},
//					WorkerLogs: &duplocloud.AwsMwaaEnvironmentLoggingConfigurationWorkerLogsArgs{
//						Enabled:  pulumi.Bool(false),
//						LogLevel: pulumi.String("INFO"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing AWS MWAA Environment resource.
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *FULL_NAME* is the fullname of the AWS MWAA Environment resource
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/awsMwaaEnvironment:AwsMwaaEnvironment my-mwaa *TENANT_ID*/*FULL_NAME*
// ```
type AwsMwaaEnvironment struct {
	pulumi.CustomResourceState

	// The `airflowConfigurationOptions` parameter specifies airflow override options
	AirflowConfigurationOptions pulumi.StringMapOutput `pulumi:"airflowConfigurationOptions"`
	// Airflow version of your environment, will be set by default to the latest version that MWAA supports.
	AirflowVersion pulumi.StringOutput `pulumi:"airflowVersion"`
	// The ARN of the Managed Workflows Apache Airflow.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The relative path to the DAG folder on your Amazon S3 storage bucket.
	DagS3Path pulumi.StringOutput `pulumi:"dagS3Path"`
	// Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`, `mw1.xlarge`, `mw1.2xlarge`.
	EnvironmentClass pulumi.StringOutput `pulumi:"environmentClass"`
	// The Execution Role ARN of the Amazon MWAA Environment
	ExecutionRoleArn pulumi.StringOutput `pulumi:"executionRoleArn"`
	// The full name provided by duplo for Apache Airflow Environment.
	Fullname pulumi.StringOutput `pulumi:"fullname"`
	// The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key aws/airflow by default.
	KmsKey               pulumi.StringPtrOutput                       `pulumi:"kmsKey"`
	LastUpdateds         AwsMwaaEnvironmentLastUpdatedArrayOutput     `pulumi:"lastUpdateds"`
	LoggingConfiguration AwsMwaaEnvironmentLoggingConfigurationOutput `pulumi:"loggingConfiguration"`
	// The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`.
	MaxWorkers pulumi.IntOutput `pulumi:"maxWorkers"`
	// The minimum number of workers that you want to run in your environment.
	MinWorkers pulumi.IntOutput `pulumi:"minWorkers"`
	// The name of the Apache Airflow Environment.
	Name pulumi.StringOutput `pulumi:"name"`
	// The plugins.zip file version you want to use. If not set, latest s3 file version will be used.
	PluginsS3ObjectVersion pulumi.StringOutput `pulumi:"pluginsS3ObjectVersion"`
	// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then `pluginsS3ObjectVersion` is required.
	PluginsS3Path pulumi.StringOutput `pulumi:"pluginsS3Path"`
	// The requirements.txt file version you want to use. If not set, latest s3 file version will be used.
	RequirementsS3ObjectVersion pulumi.StringOutput `pulumi:"requirementsS3ObjectVersion"`
	// The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements*s3*object_version is required.
	RequirementsS3Path pulumi.StringOutput `pulumi:"requirementsS3Path"`
	// The number of schedulers that you want to run in your environment.
	Schedulers pulumi.IntOutput `pulumi:"schedulers"`
	// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
	SourceBucketArn pulumi.StringOutput `pulumi:"sourceBucketArn"`
	// The startup script file version you want to use. If not set, latest s3 file version will be used.
	StartupScriptS3ObjectVersion pulumi.StringOutput `pulumi:"startupScriptS3ObjectVersion"`
	// The relative path to the startup script file on your Amazon S3 storage bucket. For example, startup_script.sh.
	StartupScriptS3Path pulumi.StringOutput `pulumi:"startupScriptS3Path"`
	// The status of the Amazon MWAA Environment.
	Status pulumi.StringOutput `pulumi:"status"`
	// Tags.
	Tags pulumi.StringOutput `pulumi:"tags"`
	// The GUID of the tenant that the Managed Workflows Apache Airflow will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Whether or not to wait until Amazon MWAA Environment to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrOutput `pulumi:"waitUntilReady"`
	// Specifies whether the webserver should be accessible over the internet or via your specified VPC.  Defaults to `PUBLIC_ONLY`.
	WebserverAccessMode pulumi.StringPtrOutput `pulumi:"webserverAccessMode"`
	// The webserver URL of the MWAA Environment.
	WebserverUrl pulumi.StringOutput `pulumi:"webserverUrl"`
	// Specifies the start date for the weekly maintenance window.
	WeeklyMaintenanceWindowStart pulumi.StringOutput `pulumi:"weeklyMaintenanceWindowStart"`
}

// NewAwsMwaaEnvironment registers a new resource with the given unique name, arguments, and options.
func NewAwsMwaaEnvironment(ctx *pulumi.Context,
	name string, args *AwsMwaaEnvironmentArgs, opts ...pulumi.ResourceOption) (*AwsMwaaEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DagS3Path == nil {
		return nil, errors.New("invalid value for required argument 'DagS3Path'")
	}
	if args.SourceBucketArn == nil {
		return nil, errors.New("invalid value for required argument 'SourceBucketArn'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.AirflowConfigurationOptions != nil {
		args.AirflowConfigurationOptions = pulumi.ToSecret(args.AirflowConfigurationOptions).(pulumi.StringMapInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"airflowConfigurationOptions",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsMwaaEnvironment
	err := ctx.RegisterResource("duplocloud:index/awsMwaaEnvironment:AwsMwaaEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsMwaaEnvironment gets an existing AwsMwaaEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsMwaaEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsMwaaEnvironmentState, opts ...pulumi.ResourceOption) (*AwsMwaaEnvironment, error) {
	var resource AwsMwaaEnvironment
	err := ctx.ReadResource("duplocloud:index/awsMwaaEnvironment:AwsMwaaEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsMwaaEnvironment resources.
type awsMwaaEnvironmentState struct {
	// The `airflowConfigurationOptions` parameter specifies airflow override options
	AirflowConfigurationOptions map[string]string `pulumi:"airflowConfigurationOptions"`
	// Airflow version of your environment, will be set by default to the latest version that MWAA supports.
	AirflowVersion *string `pulumi:"airflowVersion"`
	// The ARN of the Managed Workflows Apache Airflow.
	Arn *string `pulumi:"arn"`
	// The relative path to the DAG folder on your Amazon S3 storage bucket.
	DagS3Path *string `pulumi:"dagS3Path"`
	// Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`, `mw1.xlarge`, `mw1.2xlarge`.
	EnvironmentClass *string `pulumi:"environmentClass"`
	// The Execution Role ARN of the Amazon MWAA Environment
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// The full name provided by duplo for Apache Airflow Environment.
	Fullname *string `pulumi:"fullname"`
	// The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key aws/airflow by default.
	KmsKey               *string                                 `pulumi:"kmsKey"`
	LastUpdateds         []AwsMwaaEnvironmentLastUpdated         `pulumi:"lastUpdateds"`
	LoggingConfiguration *AwsMwaaEnvironmentLoggingConfiguration `pulumi:"loggingConfiguration"`
	// The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`.
	MaxWorkers *int `pulumi:"maxWorkers"`
	// The minimum number of workers that you want to run in your environment.
	MinWorkers *int `pulumi:"minWorkers"`
	// The name of the Apache Airflow Environment.
	Name *string `pulumi:"name"`
	// The plugins.zip file version you want to use. If not set, latest s3 file version will be used.
	PluginsS3ObjectVersion *string `pulumi:"pluginsS3ObjectVersion"`
	// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then `pluginsS3ObjectVersion` is required.
	PluginsS3Path *string `pulumi:"pluginsS3Path"`
	// The requirements.txt file version you want to use. If not set, latest s3 file version will be used.
	RequirementsS3ObjectVersion *string `pulumi:"requirementsS3ObjectVersion"`
	// The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements*s3*object_version is required.
	RequirementsS3Path *string `pulumi:"requirementsS3Path"`
	// The number of schedulers that you want to run in your environment.
	Schedulers *int `pulumi:"schedulers"`
	// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
	SourceBucketArn *string `pulumi:"sourceBucketArn"`
	// The startup script file version you want to use. If not set, latest s3 file version will be used.
	StartupScriptS3ObjectVersion *string `pulumi:"startupScriptS3ObjectVersion"`
	// The relative path to the startup script file on your Amazon S3 storage bucket. For example, startup_script.sh.
	StartupScriptS3Path *string `pulumi:"startupScriptS3Path"`
	// The status of the Amazon MWAA Environment.
	Status *string `pulumi:"status"`
	// Tags.
	Tags *string `pulumi:"tags"`
	// The GUID of the tenant that the Managed Workflows Apache Airflow will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Whether or not to wait until Amazon MWAA Environment to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
	// Specifies whether the webserver should be accessible over the internet or via your specified VPC.  Defaults to `PUBLIC_ONLY`.
	WebserverAccessMode *string `pulumi:"webserverAccessMode"`
	// The webserver URL of the MWAA Environment.
	WebserverUrl *string `pulumi:"webserverUrl"`
	// Specifies the start date for the weekly maintenance window.
	WeeklyMaintenanceWindowStart *string `pulumi:"weeklyMaintenanceWindowStart"`
}

type AwsMwaaEnvironmentState struct {
	// The `airflowConfigurationOptions` parameter specifies airflow override options
	AirflowConfigurationOptions pulumi.StringMapInput
	// Airflow version of your environment, will be set by default to the latest version that MWAA supports.
	AirflowVersion pulumi.StringPtrInput
	// The ARN of the Managed Workflows Apache Airflow.
	Arn pulumi.StringPtrInput
	// The relative path to the DAG folder on your Amazon S3 storage bucket.
	DagS3Path pulumi.StringPtrInput
	// Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`, `mw1.xlarge`, `mw1.2xlarge`.
	EnvironmentClass pulumi.StringPtrInput
	// The Execution Role ARN of the Amazon MWAA Environment
	ExecutionRoleArn pulumi.StringPtrInput
	// The full name provided by duplo for Apache Airflow Environment.
	Fullname pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key aws/airflow by default.
	KmsKey               pulumi.StringPtrInput
	LastUpdateds         AwsMwaaEnvironmentLastUpdatedArrayInput
	LoggingConfiguration AwsMwaaEnvironmentLoggingConfigurationPtrInput
	// The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`.
	MaxWorkers pulumi.IntPtrInput
	// The minimum number of workers that you want to run in your environment.
	MinWorkers pulumi.IntPtrInput
	// The name of the Apache Airflow Environment.
	Name pulumi.StringPtrInput
	// The plugins.zip file version you want to use. If not set, latest s3 file version will be used.
	PluginsS3ObjectVersion pulumi.StringPtrInput
	// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then `pluginsS3ObjectVersion` is required.
	PluginsS3Path pulumi.StringPtrInput
	// The requirements.txt file version you want to use. If not set, latest s3 file version will be used.
	RequirementsS3ObjectVersion pulumi.StringPtrInput
	// The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements*s3*object_version is required.
	RequirementsS3Path pulumi.StringPtrInput
	// The number of schedulers that you want to run in your environment.
	Schedulers pulumi.IntPtrInput
	// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
	SourceBucketArn pulumi.StringPtrInput
	// The startup script file version you want to use. If not set, latest s3 file version will be used.
	StartupScriptS3ObjectVersion pulumi.StringPtrInput
	// The relative path to the startup script file on your Amazon S3 storage bucket. For example, startup_script.sh.
	StartupScriptS3Path pulumi.StringPtrInput
	// The status of the Amazon MWAA Environment.
	Status pulumi.StringPtrInput
	// Tags.
	Tags pulumi.StringPtrInput
	// The GUID of the tenant that the Managed Workflows Apache Airflow will be created in.
	TenantId pulumi.StringPtrInput
	// Whether or not to wait until Amazon MWAA Environment to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
	// Specifies whether the webserver should be accessible over the internet or via your specified VPC.  Defaults to `PUBLIC_ONLY`.
	WebserverAccessMode pulumi.StringPtrInput
	// The webserver URL of the MWAA Environment.
	WebserverUrl pulumi.StringPtrInput
	// Specifies the start date for the weekly maintenance window.
	WeeklyMaintenanceWindowStart pulumi.StringPtrInput
}

func (AwsMwaaEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsMwaaEnvironmentState)(nil)).Elem()
}

type awsMwaaEnvironmentArgs struct {
	// The `airflowConfigurationOptions` parameter specifies airflow override options
	AirflowConfigurationOptions map[string]string `pulumi:"airflowConfigurationOptions"`
	// Airflow version of your environment, will be set by default to the latest version that MWAA supports.
	AirflowVersion *string `pulumi:"airflowVersion"`
	// The relative path to the DAG folder on your Amazon S3 storage bucket.
	DagS3Path string `pulumi:"dagS3Path"`
	// Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`, `mw1.xlarge`, `mw1.2xlarge`.
	EnvironmentClass *string `pulumi:"environmentClass"`
	// The Execution Role ARN of the Amazon MWAA Environment
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key aws/airflow by default.
	KmsKey               *string                                 `pulumi:"kmsKey"`
	LoggingConfiguration *AwsMwaaEnvironmentLoggingConfiguration `pulumi:"loggingConfiguration"`
	// The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`.
	MaxWorkers *int `pulumi:"maxWorkers"`
	// The minimum number of workers that you want to run in your environment.
	MinWorkers *int `pulumi:"minWorkers"`
	// The name of the Apache Airflow Environment.
	Name *string `pulumi:"name"`
	// The plugins.zip file version you want to use. If not set, latest s3 file version will be used.
	PluginsS3ObjectVersion *string `pulumi:"pluginsS3ObjectVersion"`
	// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then `pluginsS3ObjectVersion` is required.
	PluginsS3Path *string `pulumi:"pluginsS3Path"`
	// The requirements.txt file version you want to use. If not set, latest s3 file version will be used.
	RequirementsS3ObjectVersion *string `pulumi:"requirementsS3ObjectVersion"`
	// The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements*s3*object_version is required.
	RequirementsS3Path *string `pulumi:"requirementsS3Path"`
	// The number of schedulers that you want to run in your environment.
	Schedulers *int `pulumi:"schedulers"`
	// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
	SourceBucketArn string `pulumi:"sourceBucketArn"`
	// The startup script file version you want to use. If not set, latest s3 file version will be used.
	StartupScriptS3ObjectVersion *string `pulumi:"startupScriptS3ObjectVersion"`
	// The relative path to the startup script file on your Amazon S3 storage bucket. For example, startup_script.sh.
	StartupScriptS3Path *string `pulumi:"startupScriptS3Path"`
	// The GUID of the tenant that the Managed Workflows Apache Airflow will be created in.
	TenantId string `pulumi:"tenantId"`
	// Whether or not to wait until Amazon MWAA Environment to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
	// Specifies whether the webserver should be accessible over the internet or via your specified VPC.  Defaults to `PUBLIC_ONLY`.
	WebserverAccessMode *string `pulumi:"webserverAccessMode"`
	// Specifies the start date for the weekly maintenance window.
	WeeklyMaintenanceWindowStart *string `pulumi:"weeklyMaintenanceWindowStart"`
}

// The set of arguments for constructing a AwsMwaaEnvironment resource.
type AwsMwaaEnvironmentArgs struct {
	// The `airflowConfigurationOptions` parameter specifies airflow override options
	AirflowConfigurationOptions pulumi.StringMapInput
	// Airflow version of your environment, will be set by default to the latest version that MWAA supports.
	AirflowVersion pulumi.StringPtrInput
	// The relative path to the DAG folder on your Amazon S3 storage bucket.
	DagS3Path pulumi.StringInput
	// Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`, `mw1.xlarge`, `mw1.2xlarge`.
	EnvironmentClass pulumi.StringPtrInput
	// The Execution Role ARN of the Amazon MWAA Environment
	ExecutionRoleArn pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key aws/airflow by default.
	KmsKey               pulumi.StringPtrInput
	LoggingConfiguration AwsMwaaEnvironmentLoggingConfigurationPtrInput
	// The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`.
	MaxWorkers pulumi.IntPtrInput
	// The minimum number of workers that you want to run in your environment.
	MinWorkers pulumi.IntPtrInput
	// The name of the Apache Airflow Environment.
	Name pulumi.StringPtrInput
	// The plugins.zip file version you want to use. If not set, latest s3 file version will be used.
	PluginsS3ObjectVersion pulumi.StringPtrInput
	// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then `pluginsS3ObjectVersion` is required.
	PluginsS3Path pulumi.StringPtrInput
	// The requirements.txt file version you want to use. If not set, latest s3 file version will be used.
	RequirementsS3ObjectVersion pulumi.StringPtrInput
	// The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements*s3*object_version is required.
	RequirementsS3Path pulumi.StringPtrInput
	// The number of schedulers that you want to run in your environment.
	Schedulers pulumi.IntPtrInput
	// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
	SourceBucketArn pulumi.StringInput
	// The startup script file version you want to use. If not set, latest s3 file version will be used.
	StartupScriptS3ObjectVersion pulumi.StringPtrInput
	// The relative path to the startup script file on your Amazon S3 storage bucket. For example, startup_script.sh.
	StartupScriptS3Path pulumi.StringPtrInput
	// The GUID of the tenant that the Managed Workflows Apache Airflow will be created in.
	TenantId pulumi.StringInput
	// Whether or not to wait until Amazon MWAA Environment to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
	// Specifies whether the webserver should be accessible over the internet or via your specified VPC.  Defaults to `PUBLIC_ONLY`.
	WebserverAccessMode pulumi.StringPtrInput
	// Specifies the start date for the weekly maintenance window.
	WeeklyMaintenanceWindowStart pulumi.StringPtrInput
}

func (AwsMwaaEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsMwaaEnvironmentArgs)(nil)).Elem()
}

type AwsMwaaEnvironmentInput interface {
	pulumi.Input

	ToAwsMwaaEnvironmentOutput() AwsMwaaEnvironmentOutput
	ToAwsMwaaEnvironmentOutputWithContext(ctx context.Context) AwsMwaaEnvironmentOutput
}

func (*AwsMwaaEnvironment) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsMwaaEnvironment)(nil)).Elem()
}

func (i *AwsMwaaEnvironment) ToAwsMwaaEnvironmentOutput() AwsMwaaEnvironmentOutput {
	return i.ToAwsMwaaEnvironmentOutputWithContext(context.Background())
}

func (i *AwsMwaaEnvironment) ToAwsMwaaEnvironmentOutputWithContext(ctx context.Context) AwsMwaaEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsMwaaEnvironmentOutput)
}

// AwsMwaaEnvironmentArrayInput is an input type that accepts AwsMwaaEnvironmentArray and AwsMwaaEnvironmentArrayOutput values.
// You can construct a concrete instance of `AwsMwaaEnvironmentArrayInput` via:
//
//	AwsMwaaEnvironmentArray{ AwsMwaaEnvironmentArgs{...} }
type AwsMwaaEnvironmentArrayInput interface {
	pulumi.Input

	ToAwsMwaaEnvironmentArrayOutput() AwsMwaaEnvironmentArrayOutput
	ToAwsMwaaEnvironmentArrayOutputWithContext(context.Context) AwsMwaaEnvironmentArrayOutput
}

type AwsMwaaEnvironmentArray []AwsMwaaEnvironmentInput

func (AwsMwaaEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsMwaaEnvironment)(nil)).Elem()
}

func (i AwsMwaaEnvironmentArray) ToAwsMwaaEnvironmentArrayOutput() AwsMwaaEnvironmentArrayOutput {
	return i.ToAwsMwaaEnvironmentArrayOutputWithContext(context.Background())
}

func (i AwsMwaaEnvironmentArray) ToAwsMwaaEnvironmentArrayOutputWithContext(ctx context.Context) AwsMwaaEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsMwaaEnvironmentArrayOutput)
}

// AwsMwaaEnvironmentMapInput is an input type that accepts AwsMwaaEnvironmentMap and AwsMwaaEnvironmentMapOutput values.
// You can construct a concrete instance of `AwsMwaaEnvironmentMapInput` via:
//
//	AwsMwaaEnvironmentMap{ "key": AwsMwaaEnvironmentArgs{...} }
type AwsMwaaEnvironmentMapInput interface {
	pulumi.Input

	ToAwsMwaaEnvironmentMapOutput() AwsMwaaEnvironmentMapOutput
	ToAwsMwaaEnvironmentMapOutputWithContext(context.Context) AwsMwaaEnvironmentMapOutput
}

type AwsMwaaEnvironmentMap map[string]AwsMwaaEnvironmentInput

func (AwsMwaaEnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsMwaaEnvironment)(nil)).Elem()
}

func (i AwsMwaaEnvironmentMap) ToAwsMwaaEnvironmentMapOutput() AwsMwaaEnvironmentMapOutput {
	return i.ToAwsMwaaEnvironmentMapOutputWithContext(context.Background())
}

func (i AwsMwaaEnvironmentMap) ToAwsMwaaEnvironmentMapOutputWithContext(ctx context.Context) AwsMwaaEnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsMwaaEnvironmentMapOutput)
}

type AwsMwaaEnvironmentOutput struct{ *pulumi.OutputState }

func (AwsMwaaEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsMwaaEnvironment)(nil)).Elem()
}

func (o AwsMwaaEnvironmentOutput) ToAwsMwaaEnvironmentOutput() AwsMwaaEnvironmentOutput {
	return o
}

func (o AwsMwaaEnvironmentOutput) ToAwsMwaaEnvironmentOutputWithContext(ctx context.Context) AwsMwaaEnvironmentOutput {
	return o
}

// The `airflowConfigurationOptions` parameter specifies airflow override options
func (o AwsMwaaEnvironmentOutput) AirflowConfigurationOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringMapOutput { return v.AirflowConfigurationOptions }).(pulumi.StringMapOutput)
}

// Airflow version of your environment, will be set by default to the latest version that MWAA supports.
func (o AwsMwaaEnvironmentOutput) AirflowVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.AirflowVersion }).(pulumi.StringOutput)
}

// The ARN of the Managed Workflows Apache Airflow.
func (o AwsMwaaEnvironmentOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The relative path to the DAG folder on your Amazon S3 storage bucket.
func (o AwsMwaaEnvironmentOutput) DagS3Path() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.DagS3Path }).(pulumi.StringOutput)
}

// Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`, `mw1.xlarge`, `mw1.2xlarge`.
func (o AwsMwaaEnvironmentOutput) EnvironmentClass() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.EnvironmentClass }).(pulumi.StringOutput)
}

// The Execution Role ARN of the Amazon MWAA Environment
func (o AwsMwaaEnvironmentOutput) ExecutionRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.ExecutionRoleArn }).(pulumi.StringOutput)
}

// The full name provided by duplo for Apache Airflow Environment.
func (o AwsMwaaEnvironmentOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key aws/airflow by default.
func (o AwsMwaaEnvironmentOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringPtrOutput { return v.KmsKey }).(pulumi.StringPtrOutput)
}

func (o AwsMwaaEnvironmentOutput) LastUpdateds() AwsMwaaEnvironmentLastUpdatedArrayOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) AwsMwaaEnvironmentLastUpdatedArrayOutput { return v.LastUpdateds }).(AwsMwaaEnvironmentLastUpdatedArrayOutput)
}

func (o AwsMwaaEnvironmentOutput) LoggingConfiguration() AwsMwaaEnvironmentLoggingConfigurationOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) AwsMwaaEnvironmentLoggingConfigurationOutput {
		return v.LoggingConfiguration
	}).(AwsMwaaEnvironmentLoggingConfigurationOutput)
}

// The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`.
func (o AwsMwaaEnvironmentOutput) MaxWorkers() pulumi.IntOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.IntOutput { return v.MaxWorkers }).(pulumi.IntOutput)
}

// The minimum number of workers that you want to run in your environment.
func (o AwsMwaaEnvironmentOutput) MinWorkers() pulumi.IntOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.IntOutput { return v.MinWorkers }).(pulumi.IntOutput)
}

// The name of the Apache Airflow Environment.
func (o AwsMwaaEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The plugins.zip file version you want to use. If not set, latest s3 file version will be used.
func (o AwsMwaaEnvironmentOutput) PluginsS3ObjectVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.PluginsS3ObjectVersion }).(pulumi.StringOutput)
}

// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then `pluginsS3ObjectVersion` is required.
func (o AwsMwaaEnvironmentOutput) PluginsS3Path() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.PluginsS3Path }).(pulumi.StringOutput)
}

// The requirements.txt file version you want to use. If not set, latest s3 file version will be used.
func (o AwsMwaaEnvironmentOutput) RequirementsS3ObjectVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.RequirementsS3ObjectVersion }).(pulumi.StringOutput)
}

// The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements*s3*object_version is required.
func (o AwsMwaaEnvironmentOutput) RequirementsS3Path() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.RequirementsS3Path }).(pulumi.StringOutput)
}

// The number of schedulers that you want to run in your environment.
func (o AwsMwaaEnvironmentOutput) Schedulers() pulumi.IntOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.IntOutput { return v.Schedulers }).(pulumi.IntOutput)
}

// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
func (o AwsMwaaEnvironmentOutput) SourceBucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.SourceBucketArn }).(pulumi.StringOutput)
}

// The startup script file version you want to use. If not set, latest s3 file version will be used.
func (o AwsMwaaEnvironmentOutput) StartupScriptS3ObjectVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.StartupScriptS3ObjectVersion }).(pulumi.StringOutput)
}

// The relative path to the startup script file on your Amazon S3 storage bucket. For example, startup_script.sh.
func (o AwsMwaaEnvironmentOutput) StartupScriptS3Path() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.StartupScriptS3Path }).(pulumi.StringOutput)
}

// The status of the Amazon MWAA Environment.
func (o AwsMwaaEnvironmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tags.
func (o AwsMwaaEnvironmentOutput) Tags() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.Tags }).(pulumi.StringOutput)
}

// The GUID of the tenant that the Managed Workflows Apache Airflow will be created in.
func (o AwsMwaaEnvironmentOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Whether or not to wait until Amazon MWAA Environment to be ready, after creation. Defaults to `true`.
func (o AwsMwaaEnvironmentOutput) WaitUntilReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.BoolPtrOutput { return v.WaitUntilReady }).(pulumi.BoolPtrOutput)
}

// Specifies whether the webserver should be accessible over the internet or via your specified VPC.  Defaults to `PUBLIC_ONLY`.
func (o AwsMwaaEnvironmentOutput) WebserverAccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringPtrOutput { return v.WebserverAccessMode }).(pulumi.StringPtrOutput)
}

// The webserver URL of the MWAA Environment.
func (o AwsMwaaEnvironmentOutput) WebserverUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.WebserverUrl }).(pulumi.StringOutput)
}

// Specifies the start date for the weekly maintenance window.
func (o AwsMwaaEnvironmentOutput) WeeklyMaintenanceWindowStart() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsMwaaEnvironment) pulumi.StringOutput { return v.WeeklyMaintenanceWindowStart }).(pulumi.StringOutput)
}

type AwsMwaaEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (AwsMwaaEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsMwaaEnvironment)(nil)).Elem()
}

func (o AwsMwaaEnvironmentArrayOutput) ToAwsMwaaEnvironmentArrayOutput() AwsMwaaEnvironmentArrayOutput {
	return o
}

func (o AwsMwaaEnvironmentArrayOutput) ToAwsMwaaEnvironmentArrayOutputWithContext(ctx context.Context) AwsMwaaEnvironmentArrayOutput {
	return o
}

func (o AwsMwaaEnvironmentArrayOutput) Index(i pulumi.IntInput) AwsMwaaEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsMwaaEnvironment {
		return vs[0].([]*AwsMwaaEnvironment)[vs[1].(int)]
	}).(AwsMwaaEnvironmentOutput)
}

type AwsMwaaEnvironmentMapOutput struct{ *pulumi.OutputState }

func (AwsMwaaEnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsMwaaEnvironment)(nil)).Elem()
}

func (o AwsMwaaEnvironmentMapOutput) ToAwsMwaaEnvironmentMapOutput() AwsMwaaEnvironmentMapOutput {
	return o
}

func (o AwsMwaaEnvironmentMapOutput) ToAwsMwaaEnvironmentMapOutputWithContext(ctx context.Context) AwsMwaaEnvironmentMapOutput {
	return o
}

func (o AwsMwaaEnvironmentMapOutput) MapIndex(k pulumi.StringInput) AwsMwaaEnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsMwaaEnvironment {
		return vs[0].(map[string]*AwsMwaaEnvironment)[vs[1].(string)]
	}).(AwsMwaaEnvironmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsMwaaEnvironmentInput)(nil)).Elem(), &AwsMwaaEnvironment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsMwaaEnvironmentArrayInput)(nil)).Elem(), AwsMwaaEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsMwaaEnvironmentMapInput)(nil)).Elem(), AwsMwaaEnvironmentMap{})
	pulumi.RegisterOutputType(AwsMwaaEnvironmentOutput{})
	pulumi.RegisterOutputType(AwsMwaaEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(AwsMwaaEnvironmentMapOutput{})
}
