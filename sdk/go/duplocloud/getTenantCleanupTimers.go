// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupTenantCleanupTimers(ctx *pulumi.Context, args *LookupTenantCleanupTimersArgs, opts ...pulumi.InvokeOption) (*LookupTenantCleanupTimersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTenantCleanupTimersResult
	err := ctx.Invoke("duplocloud:index/getTenantCleanupTimers:getTenantCleanupTimers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTenantCleanupTimers.
type LookupTenantCleanupTimersArgs struct {
	// The GUID of the tenant that the cleanup timers will be created in.
	TenantId string `pulumi:"tenantId"`
}

// A collection of values returned by getTenantCleanupTimers.
type LookupTenantCleanupTimersResult struct {
	// The expiry time of the tenant.
	ExpiryTime string `pulumi:"expiryTime"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The time to pause the tenant.
	PauseTime string `pulumi:"pauseTime"`
	// The GUID of the tenant that the cleanup timers will be created in.
	TenantId string `pulumi:"tenantId"`
}

func LookupTenantCleanupTimersOutput(ctx *pulumi.Context, args LookupTenantCleanupTimersOutputArgs, opts ...pulumi.InvokeOption) LookupTenantCleanupTimersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTenantCleanupTimersResultOutput, error) {
			args := v.(LookupTenantCleanupTimersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("duplocloud:index/getTenantCleanupTimers:getTenantCleanupTimers", args, LookupTenantCleanupTimersResultOutput{}, options).(LookupTenantCleanupTimersResultOutput), nil
		}).(LookupTenantCleanupTimersResultOutput)
}

// A collection of arguments for invoking getTenantCleanupTimers.
type LookupTenantCleanupTimersOutputArgs struct {
	// The GUID of the tenant that the cleanup timers will be created in.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (LookupTenantCleanupTimersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTenantCleanupTimersArgs)(nil)).Elem()
}

// A collection of values returned by getTenantCleanupTimers.
type LookupTenantCleanupTimersResultOutput struct{ *pulumi.OutputState }

func (LookupTenantCleanupTimersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTenantCleanupTimersResult)(nil)).Elem()
}

func (o LookupTenantCleanupTimersResultOutput) ToLookupTenantCleanupTimersResultOutput() LookupTenantCleanupTimersResultOutput {
	return o
}

func (o LookupTenantCleanupTimersResultOutput) ToLookupTenantCleanupTimersResultOutputWithContext(ctx context.Context) LookupTenantCleanupTimersResultOutput {
	return o
}

// The expiry time of the tenant.
func (o LookupTenantCleanupTimersResultOutput) ExpiryTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTenantCleanupTimersResult) string { return v.ExpiryTime }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupTenantCleanupTimersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTenantCleanupTimersResult) string { return v.Id }).(pulumi.StringOutput)
}

// The time to pause the tenant.
func (o LookupTenantCleanupTimersResultOutput) PauseTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTenantCleanupTimersResult) string { return v.PauseTime }).(pulumi.StringOutput)
}

// The GUID of the tenant that the cleanup timers will be created in.
func (o LookupTenantCleanupTimersResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTenantCleanupTimersResult) string { return v.TenantId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTenantCleanupTimersResultOutput{})
}
