// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `PlanCertificates` manages the list of certificates avaialble to a plan in Duplo.
//
// This resource allows you take control of individual plan certificates for a specific plan.
//
// ## Import
//
// ```sh
// $ pulumi import duplocloud:index/planCertificates:PlanCertificates myplan PLAN_ID
// ```
type PlanCertificates struct {
	pulumi.CustomResourceState

	// A list of certificates to manage.
	Certificate PlanCertificatesCertificateArrayOutput `pulumi:"certificate"`
	// A complete list of certificates for this plan, even ones not being managed by this resource.
	Certificates PlanCertificatesCertificateArrayOutput `pulumi:"certificates"`
	// Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedCertificates pulumi.BoolPtrOutput `pulumi:"deleteUnspecifiedCertificates"`
	// The ID of the plan to configure.
	PlanId pulumi.StringOutput `pulumi:"planId"`
	// A list of certificate names being managed by this resource.
	SpecifiedCertificates pulumi.StringArrayOutput `pulumi:"specifiedCertificates"`
}

// NewPlanCertificates registers a new resource with the given unique name, arguments, and options.
func NewPlanCertificates(ctx *pulumi.Context,
	name string, args *PlanCertificatesArgs, opts ...pulumi.ResourceOption) (*PlanCertificates, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlanId == nil {
		return nil, errors.New("invalid value for required argument 'PlanId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PlanCertificates
	err := ctx.RegisterResource("duplocloud:index/planCertificates:PlanCertificates", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlanCertificates gets an existing PlanCertificates resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlanCertificates(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlanCertificatesState, opts ...pulumi.ResourceOption) (*PlanCertificates, error) {
	var resource PlanCertificates
	err := ctx.ReadResource("duplocloud:index/planCertificates:PlanCertificates", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlanCertificates resources.
type planCertificatesState struct {
	// A list of certificates to manage.
	Certificate []PlanCertificatesCertificate `pulumi:"certificate"`
	// A complete list of certificates for this plan, even ones not being managed by this resource.
	Certificates []PlanCertificatesCertificate `pulumi:"certificates"`
	// Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedCertificates *bool `pulumi:"deleteUnspecifiedCertificates"`
	// The ID of the plan to configure.
	PlanId *string `pulumi:"planId"`
	// A list of certificate names being managed by this resource.
	SpecifiedCertificates []string `pulumi:"specifiedCertificates"`
}

type PlanCertificatesState struct {
	// A list of certificates to manage.
	Certificate PlanCertificatesCertificateArrayInput
	// A complete list of certificates for this plan, even ones not being managed by this resource.
	Certificates PlanCertificatesCertificateArrayInput
	// Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedCertificates pulumi.BoolPtrInput
	// The ID of the plan to configure.
	PlanId pulumi.StringPtrInput
	// A list of certificate names being managed by this resource.
	SpecifiedCertificates pulumi.StringArrayInput
}

func (PlanCertificatesState) ElementType() reflect.Type {
	return reflect.TypeOf((*planCertificatesState)(nil)).Elem()
}

type planCertificatesArgs struct {
	// A list of certificates to manage.
	Certificate []PlanCertificatesCertificate `pulumi:"certificate"`
	// Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedCertificates *bool `pulumi:"deleteUnspecifiedCertificates"`
	// The ID of the plan to configure.
	PlanId string `pulumi:"planId"`
}

// The set of arguments for constructing a PlanCertificates resource.
type PlanCertificatesArgs struct {
	// A list of certificates to manage.
	Certificate PlanCertificatesCertificateArrayInput
	// Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedCertificates pulumi.BoolPtrInput
	// The ID of the plan to configure.
	PlanId pulumi.StringInput
}

func (PlanCertificatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*planCertificatesArgs)(nil)).Elem()
}

type PlanCertificatesInput interface {
	pulumi.Input

	ToPlanCertificatesOutput() PlanCertificatesOutput
	ToPlanCertificatesOutputWithContext(ctx context.Context) PlanCertificatesOutput
}

func (*PlanCertificates) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanCertificates)(nil)).Elem()
}

func (i *PlanCertificates) ToPlanCertificatesOutput() PlanCertificatesOutput {
	return i.ToPlanCertificatesOutputWithContext(context.Background())
}

func (i *PlanCertificates) ToPlanCertificatesOutputWithContext(ctx context.Context) PlanCertificatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanCertificatesOutput)
}

// PlanCertificatesArrayInput is an input type that accepts PlanCertificatesArray and PlanCertificatesArrayOutput values.
// You can construct a concrete instance of `PlanCertificatesArrayInput` via:
//
//	PlanCertificatesArray{ PlanCertificatesArgs{...} }
type PlanCertificatesArrayInput interface {
	pulumi.Input

	ToPlanCertificatesArrayOutput() PlanCertificatesArrayOutput
	ToPlanCertificatesArrayOutputWithContext(context.Context) PlanCertificatesArrayOutput
}

type PlanCertificatesArray []PlanCertificatesInput

func (PlanCertificatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlanCertificates)(nil)).Elem()
}

func (i PlanCertificatesArray) ToPlanCertificatesArrayOutput() PlanCertificatesArrayOutput {
	return i.ToPlanCertificatesArrayOutputWithContext(context.Background())
}

func (i PlanCertificatesArray) ToPlanCertificatesArrayOutputWithContext(ctx context.Context) PlanCertificatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanCertificatesArrayOutput)
}

// PlanCertificatesMapInput is an input type that accepts PlanCertificatesMap and PlanCertificatesMapOutput values.
// You can construct a concrete instance of `PlanCertificatesMapInput` via:
//
//	PlanCertificatesMap{ "key": PlanCertificatesArgs{...} }
type PlanCertificatesMapInput interface {
	pulumi.Input

	ToPlanCertificatesMapOutput() PlanCertificatesMapOutput
	ToPlanCertificatesMapOutputWithContext(context.Context) PlanCertificatesMapOutput
}

type PlanCertificatesMap map[string]PlanCertificatesInput

func (PlanCertificatesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlanCertificates)(nil)).Elem()
}

func (i PlanCertificatesMap) ToPlanCertificatesMapOutput() PlanCertificatesMapOutput {
	return i.ToPlanCertificatesMapOutputWithContext(context.Background())
}

func (i PlanCertificatesMap) ToPlanCertificatesMapOutputWithContext(ctx context.Context) PlanCertificatesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanCertificatesMapOutput)
}

type PlanCertificatesOutput struct{ *pulumi.OutputState }

func (PlanCertificatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanCertificates)(nil)).Elem()
}

func (o PlanCertificatesOutput) ToPlanCertificatesOutput() PlanCertificatesOutput {
	return o
}

func (o PlanCertificatesOutput) ToPlanCertificatesOutputWithContext(ctx context.Context) PlanCertificatesOutput {
	return o
}

// A list of certificates to manage.
func (o PlanCertificatesOutput) Certificate() PlanCertificatesCertificateArrayOutput {
	return o.ApplyT(func(v *PlanCertificates) PlanCertificatesCertificateArrayOutput { return v.Certificate }).(PlanCertificatesCertificateArrayOutput)
}

// A complete list of certificates for this plan, even ones not being managed by this resource.
func (o PlanCertificatesOutput) Certificates() PlanCertificatesCertificateArrayOutput {
	return o.ApplyT(func(v *PlanCertificates) PlanCertificatesCertificateArrayOutput { return v.Certificates }).(PlanCertificatesCertificateArrayOutput)
}

// Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
func (o PlanCertificatesOutput) DeleteUnspecifiedCertificates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanCertificates) pulumi.BoolPtrOutput { return v.DeleteUnspecifiedCertificates }).(pulumi.BoolPtrOutput)
}

// The ID of the plan to configure.
func (o PlanCertificatesOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *PlanCertificates) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

// A list of certificate names being managed by this resource.
func (o PlanCertificatesOutput) SpecifiedCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlanCertificates) pulumi.StringArrayOutput { return v.SpecifiedCertificates }).(pulumi.StringArrayOutput)
}

type PlanCertificatesArrayOutput struct{ *pulumi.OutputState }

func (PlanCertificatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlanCertificates)(nil)).Elem()
}

func (o PlanCertificatesArrayOutput) ToPlanCertificatesArrayOutput() PlanCertificatesArrayOutput {
	return o
}

func (o PlanCertificatesArrayOutput) ToPlanCertificatesArrayOutputWithContext(ctx context.Context) PlanCertificatesArrayOutput {
	return o
}

func (o PlanCertificatesArrayOutput) Index(i pulumi.IntInput) PlanCertificatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PlanCertificates {
		return vs[0].([]*PlanCertificates)[vs[1].(int)]
	}).(PlanCertificatesOutput)
}

type PlanCertificatesMapOutput struct{ *pulumi.OutputState }

func (PlanCertificatesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlanCertificates)(nil)).Elem()
}

func (o PlanCertificatesMapOutput) ToPlanCertificatesMapOutput() PlanCertificatesMapOutput {
	return o
}

func (o PlanCertificatesMapOutput) ToPlanCertificatesMapOutputWithContext(ctx context.Context) PlanCertificatesMapOutput {
	return o
}

func (o PlanCertificatesMapOutput) MapIndex(k pulumi.StringInput) PlanCertificatesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PlanCertificates {
		return vs[0].(map[string]*PlanCertificates)[vs[1].(string)]
	}).(PlanCertificatesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlanCertificatesInput)(nil)).Elem(), &PlanCertificates{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanCertificatesArrayInput)(nil)).Elem(), PlanCertificatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanCertificatesMapInput)(nil)).Elem(), PlanCertificatesMap{})
	pulumi.RegisterOutputType(PlanCertificatesOutput{})
	pulumi.RegisterOutputType(PlanCertificatesArrayOutput{})
	pulumi.RegisterOutputType(PlanCertificatesMapOutput{})
}
