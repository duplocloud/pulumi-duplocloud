// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `GcpCloudFunction` manages a GCP cloud function in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			// A simple cloud function with an HTTPS trigger
//			_, err = duplocloud.NewGcpCloudFunction(ctx, "myfunc", &duplocloud.GcpCloudFunctionArgs{
//				TenantId:          myapp.TenantId,
//				Name:              pulumi.String("myfunc"),
//				SourceArchiveUrl:  pulumi.String("gs://my-function-code-bucket/myfunc.zip"),
//				Entrypoint:        pulumi.String("my_entrypoint"),
//				Runtime:           pulumi.String("nodejs10"),
//				AvailableMemoryMb: pulumi.Int(256),
//				IngressType:       pulumi.Int(1),
//				Timeout:           pulumi.Int(60),
//				EnvironmentVariables: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				HttpsTrigger: &duplocloud.GcpCloudFunctionHttpsTriggerArgs{},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing GCP cloud function
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the GCP cloud function
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/gcpCloudFunction:GcpCloudFunction myfunc *TENANT_ID*/*SHORT_NAME*
// ```
type GcpCloudFunction struct {
	pulumi.CustomResourceState

	// Whether or not to allow unauthenticated invocations.
	AllowUnauthenticated pulumi.BoolPtrOutput `pulumi:"allowUnauthenticated"`
	// The amount of memory available to the cloud function.
	AvailableMemoryMb pulumi.IntPtrOutput `pulumi:"availableMemoryMb"`
	// The build environment variables for this cloud function.
	BuildEnvironmentVariables pulumi.StringMapOutput `pulumi:"buildEnvironmentVariables"`
	// The ID of the cloud build that built the cloud function.
	BuildId pulumi.StringOutput `pulumi:"buildId"`
	// The description of the cloud function.
	Description pulumi.StringOutput `pulumi:"description"`
	// The entry point of the cloud function.
	Entrypoint pulumi.StringOutput `pulumi:"entrypoint"`
	// The environment variables for this cloud function.
	EnvironmentVariables pulumi.StringMapOutput `pulumi:"environmentVariables"`
	// Specifies an event trigger for the cloud function.
	EventTrigger GcpCloudFunctionEventTriggerPtrOutput `pulumi:"eventTrigger"`
	// The full name of the cloud function.
	Fullname pulumi.StringOutput `pulumi:"fullname"`
	// Specifies an HTTPS trigger for the cloud function.
	HttpsTrigger GcpCloudFunctionHttpsTriggerPtrOutput `pulumi:"httpsTrigger"`
	// The numerical index of ingress type to use for this cloud function. Should be one of: - `1` : Allow all - `2` : Allow
	// internal traffic - `3` : Allow internal traffic and GCP load balancing
	IngressType pulumi.IntPtrOutput `pulumi:"ingressType"`
	// The labels assigned to this cloud function.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The short name of the cloud function. Duplo will add a prefix to the name. You can retrieve the full name from the
	// `fullname` attribute.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether or not to require HTTPS.
	RequireHttps pulumi.BoolPtrOutput `pulumi:"requireHttps"`
	// The runtime of the cloud function. Should be one of: - `nodejs10` : Node.js 10 - `nodejs12` : Node.js 12 - `nodejs14` :
	// Node.js 14 - `python37` : Python 3.7 - `python38` : Python 3.8 - `python39` : Python 3.9 - `go111` : Go 1.11 - `go113` :
	// Go 1.13 - `java11` : Java 11 - `dotnet3` : .NET Framework 3 - `ruby26` : Ruby 2.6 - `ruby27` : Ruby 2.7 - `nodejs6` :
	// Node.js 6 (deprecated) - `nodejs8` : Node.js 8 (deprecated)
	Runtime pulumi.StringOutput `pulumi:"runtime"`
	// The SelfLink of the cloud function.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The cloud storage URL where the cloud function package is located.
	SourceArchiveUrl pulumi.StringOutput `pulumi:"sourceArchiveUrl"`
	// The GUID of the tenant that the cloud function will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The execution time limit for the cloud function.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// The current version of the cloud function.
	VersionId pulumi.IntOutput `pulumi:"versionId"`
	// The numerical index of the VPC networking type to use for this cloud function. Should be one of: - `0` : All traffic
	// through the VPC - `1` : Only private traffic through the VPC - `2` : No VPC networking
	VpcNetworkingType pulumi.IntPtrOutput `pulumi:"vpcNetworkingType"`
}

// NewGcpCloudFunction registers a new resource with the given unique name, arguments, and options.
func NewGcpCloudFunction(ctx *pulumi.Context,
	name string, args *GcpCloudFunctionArgs, opts ...pulumi.ResourceOption) (*GcpCloudFunction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entrypoint == nil {
		return nil, errors.New("invalid value for required argument 'Entrypoint'")
	}
	if args.Runtime == nil {
		return nil, errors.New("invalid value for required argument 'Runtime'")
	}
	if args.SourceArchiveUrl == nil {
		return nil, errors.New("invalid value for required argument 'SourceArchiveUrl'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GcpCloudFunction
	err := ctx.RegisterResource("duplocloud:index/gcpCloudFunction:GcpCloudFunction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcpCloudFunction gets an existing GcpCloudFunction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcpCloudFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpCloudFunctionState, opts ...pulumi.ResourceOption) (*GcpCloudFunction, error) {
	var resource GcpCloudFunction
	err := ctx.ReadResource("duplocloud:index/gcpCloudFunction:GcpCloudFunction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcpCloudFunction resources.
type gcpCloudFunctionState struct {
	// Whether or not to allow unauthenticated invocations.
	AllowUnauthenticated *bool `pulumi:"allowUnauthenticated"`
	// The amount of memory available to the cloud function.
	AvailableMemoryMb *int `pulumi:"availableMemoryMb"`
	// The build environment variables for this cloud function.
	BuildEnvironmentVariables map[string]string `pulumi:"buildEnvironmentVariables"`
	// The ID of the cloud build that built the cloud function.
	BuildId *string `pulumi:"buildId"`
	// The description of the cloud function.
	Description *string `pulumi:"description"`
	// The entry point of the cloud function.
	Entrypoint *string `pulumi:"entrypoint"`
	// The environment variables for this cloud function.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Specifies an event trigger for the cloud function.
	EventTrigger *GcpCloudFunctionEventTrigger `pulumi:"eventTrigger"`
	// The full name of the cloud function.
	Fullname *string `pulumi:"fullname"`
	// Specifies an HTTPS trigger for the cloud function.
	HttpsTrigger *GcpCloudFunctionHttpsTrigger `pulumi:"httpsTrigger"`
	// The numerical index of ingress type to use for this cloud function. Should be one of: - `1` : Allow all - `2` : Allow
	// internal traffic - `3` : Allow internal traffic and GCP load balancing
	IngressType *int `pulumi:"ingressType"`
	// The labels assigned to this cloud function.
	Labels map[string]string `pulumi:"labels"`
	// The short name of the cloud function. Duplo will add a prefix to the name. You can retrieve the full name from the
	// `fullname` attribute.
	Name *string `pulumi:"name"`
	// Whether or not to require HTTPS.
	RequireHttps *bool `pulumi:"requireHttps"`
	// The runtime of the cloud function. Should be one of: - `nodejs10` : Node.js 10 - `nodejs12` : Node.js 12 - `nodejs14` :
	// Node.js 14 - `python37` : Python 3.7 - `python38` : Python 3.8 - `python39` : Python 3.9 - `go111` : Go 1.11 - `go113` :
	// Go 1.13 - `java11` : Java 11 - `dotnet3` : .NET Framework 3 - `ruby26` : Ruby 2.6 - `ruby27` : Ruby 2.7 - `nodejs6` :
	// Node.js 6 (deprecated) - `nodejs8` : Node.js 8 (deprecated)
	Runtime *string `pulumi:"runtime"`
	// The SelfLink of the cloud function.
	SelfLink *string `pulumi:"selfLink"`
	// The cloud storage URL where the cloud function package is located.
	SourceArchiveUrl *string `pulumi:"sourceArchiveUrl"`
	// The GUID of the tenant that the cloud function will be created in.
	TenantId *string `pulumi:"tenantId"`
	// The execution time limit for the cloud function.
	Timeout *int `pulumi:"timeout"`
	// The current version of the cloud function.
	VersionId *int `pulumi:"versionId"`
	// The numerical index of the VPC networking type to use for this cloud function. Should be one of: - `0` : All traffic
	// through the VPC - `1` : Only private traffic through the VPC - `2` : No VPC networking
	VpcNetworkingType *int `pulumi:"vpcNetworkingType"`
}

type GcpCloudFunctionState struct {
	// Whether or not to allow unauthenticated invocations.
	AllowUnauthenticated pulumi.BoolPtrInput
	// The amount of memory available to the cloud function.
	AvailableMemoryMb pulumi.IntPtrInput
	// The build environment variables for this cloud function.
	BuildEnvironmentVariables pulumi.StringMapInput
	// The ID of the cloud build that built the cloud function.
	BuildId pulumi.StringPtrInput
	// The description of the cloud function.
	Description pulumi.StringPtrInput
	// The entry point of the cloud function.
	Entrypoint pulumi.StringPtrInput
	// The environment variables for this cloud function.
	EnvironmentVariables pulumi.StringMapInput
	// Specifies an event trigger for the cloud function.
	EventTrigger GcpCloudFunctionEventTriggerPtrInput
	// The full name of the cloud function.
	Fullname pulumi.StringPtrInput
	// Specifies an HTTPS trigger for the cloud function.
	HttpsTrigger GcpCloudFunctionHttpsTriggerPtrInput
	// The numerical index of ingress type to use for this cloud function. Should be one of: - `1` : Allow all - `2` : Allow
	// internal traffic - `3` : Allow internal traffic and GCP load balancing
	IngressType pulumi.IntPtrInput
	// The labels assigned to this cloud function.
	Labels pulumi.StringMapInput
	// The short name of the cloud function. Duplo will add a prefix to the name. You can retrieve the full name from the
	// `fullname` attribute.
	Name pulumi.StringPtrInput
	// Whether or not to require HTTPS.
	RequireHttps pulumi.BoolPtrInput
	// The runtime of the cloud function. Should be one of: - `nodejs10` : Node.js 10 - `nodejs12` : Node.js 12 - `nodejs14` :
	// Node.js 14 - `python37` : Python 3.7 - `python38` : Python 3.8 - `python39` : Python 3.9 - `go111` : Go 1.11 - `go113` :
	// Go 1.13 - `java11` : Java 11 - `dotnet3` : .NET Framework 3 - `ruby26` : Ruby 2.6 - `ruby27` : Ruby 2.7 - `nodejs6` :
	// Node.js 6 (deprecated) - `nodejs8` : Node.js 8 (deprecated)
	Runtime pulumi.StringPtrInput
	// The SelfLink of the cloud function.
	SelfLink pulumi.StringPtrInput
	// The cloud storage URL where the cloud function package is located.
	SourceArchiveUrl pulumi.StringPtrInput
	// The GUID of the tenant that the cloud function will be created in.
	TenantId pulumi.StringPtrInput
	// The execution time limit for the cloud function.
	Timeout pulumi.IntPtrInput
	// The current version of the cloud function.
	VersionId pulumi.IntPtrInput
	// The numerical index of the VPC networking type to use for this cloud function. Should be one of: - `0` : All traffic
	// through the VPC - `1` : Only private traffic through the VPC - `2` : No VPC networking
	VpcNetworkingType pulumi.IntPtrInput
}

func (GcpCloudFunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpCloudFunctionState)(nil)).Elem()
}

type gcpCloudFunctionArgs struct {
	// Whether or not to allow unauthenticated invocations.
	AllowUnauthenticated *bool `pulumi:"allowUnauthenticated"`
	// The amount of memory available to the cloud function.
	AvailableMemoryMb *int `pulumi:"availableMemoryMb"`
	// The build environment variables for this cloud function.
	BuildEnvironmentVariables map[string]string `pulumi:"buildEnvironmentVariables"`
	// The description of the cloud function.
	Description *string `pulumi:"description"`
	// The entry point of the cloud function.
	Entrypoint string `pulumi:"entrypoint"`
	// The environment variables for this cloud function.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Specifies an event trigger for the cloud function.
	EventTrigger *GcpCloudFunctionEventTrigger `pulumi:"eventTrigger"`
	// Specifies an HTTPS trigger for the cloud function.
	HttpsTrigger *GcpCloudFunctionHttpsTrigger `pulumi:"httpsTrigger"`
	// The numerical index of ingress type to use for this cloud function. Should be one of: - `1` : Allow all - `2` : Allow
	// internal traffic - `3` : Allow internal traffic and GCP load balancing
	IngressType *int `pulumi:"ingressType"`
	// The labels assigned to this cloud function.
	Labels map[string]string `pulumi:"labels"`
	// The short name of the cloud function. Duplo will add a prefix to the name. You can retrieve the full name from the
	// `fullname` attribute.
	Name *string `pulumi:"name"`
	// Whether or not to require HTTPS.
	RequireHttps *bool `pulumi:"requireHttps"`
	// The runtime of the cloud function. Should be one of: - `nodejs10` : Node.js 10 - `nodejs12` : Node.js 12 - `nodejs14` :
	// Node.js 14 - `python37` : Python 3.7 - `python38` : Python 3.8 - `python39` : Python 3.9 - `go111` : Go 1.11 - `go113` :
	// Go 1.13 - `java11` : Java 11 - `dotnet3` : .NET Framework 3 - `ruby26` : Ruby 2.6 - `ruby27` : Ruby 2.7 - `nodejs6` :
	// Node.js 6 (deprecated) - `nodejs8` : Node.js 8 (deprecated)
	Runtime string `pulumi:"runtime"`
	// The cloud storage URL where the cloud function package is located.
	SourceArchiveUrl string `pulumi:"sourceArchiveUrl"`
	// The GUID of the tenant that the cloud function will be created in.
	TenantId string `pulumi:"tenantId"`
	// The execution time limit for the cloud function.
	Timeout *int `pulumi:"timeout"`
	// The numerical index of the VPC networking type to use for this cloud function. Should be one of: - `0` : All traffic
	// through the VPC - `1` : Only private traffic through the VPC - `2` : No VPC networking
	VpcNetworkingType *int `pulumi:"vpcNetworkingType"`
}

// The set of arguments for constructing a GcpCloudFunction resource.
type GcpCloudFunctionArgs struct {
	// Whether or not to allow unauthenticated invocations.
	AllowUnauthenticated pulumi.BoolPtrInput
	// The amount of memory available to the cloud function.
	AvailableMemoryMb pulumi.IntPtrInput
	// The build environment variables for this cloud function.
	BuildEnvironmentVariables pulumi.StringMapInput
	// The description of the cloud function.
	Description pulumi.StringPtrInput
	// The entry point of the cloud function.
	Entrypoint pulumi.StringInput
	// The environment variables for this cloud function.
	EnvironmentVariables pulumi.StringMapInput
	// Specifies an event trigger for the cloud function.
	EventTrigger GcpCloudFunctionEventTriggerPtrInput
	// Specifies an HTTPS trigger for the cloud function.
	HttpsTrigger GcpCloudFunctionHttpsTriggerPtrInput
	// The numerical index of ingress type to use for this cloud function. Should be one of: - `1` : Allow all - `2` : Allow
	// internal traffic - `3` : Allow internal traffic and GCP load balancing
	IngressType pulumi.IntPtrInput
	// The labels assigned to this cloud function.
	Labels pulumi.StringMapInput
	// The short name of the cloud function. Duplo will add a prefix to the name. You can retrieve the full name from the
	// `fullname` attribute.
	Name pulumi.StringPtrInput
	// Whether or not to require HTTPS.
	RequireHttps pulumi.BoolPtrInput
	// The runtime of the cloud function. Should be one of: - `nodejs10` : Node.js 10 - `nodejs12` : Node.js 12 - `nodejs14` :
	// Node.js 14 - `python37` : Python 3.7 - `python38` : Python 3.8 - `python39` : Python 3.9 - `go111` : Go 1.11 - `go113` :
	// Go 1.13 - `java11` : Java 11 - `dotnet3` : .NET Framework 3 - `ruby26` : Ruby 2.6 - `ruby27` : Ruby 2.7 - `nodejs6` :
	// Node.js 6 (deprecated) - `nodejs8` : Node.js 8 (deprecated)
	Runtime pulumi.StringInput
	// The cloud storage URL where the cloud function package is located.
	SourceArchiveUrl pulumi.StringInput
	// The GUID of the tenant that the cloud function will be created in.
	TenantId pulumi.StringInput
	// The execution time limit for the cloud function.
	Timeout pulumi.IntPtrInput
	// The numerical index of the VPC networking type to use for this cloud function. Should be one of: - `0` : All traffic
	// through the VPC - `1` : Only private traffic through the VPC - `2` : No VPC networking
	VpcNetworkingType pulumi.IntPtrInput
}

func (GcpCloudFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpCloudFunctionArgs)(nil)).Elem()
}

type GcpCloudFunctionInput interface {
	pulumi.Input

	ToGcpCloudFunctionOutput() GcpCloudFunctionOutput
	ToGcpCloudFunctionOutputWithContext(ctx context.Context) GcpCloudFunctionOutput
}

func (*GcpCloudFunction) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpCloudFunction)(nil)).Elem()
}

func (i *GcpCloudFunction) ToGcpCloudFunctionOutput() GcpCloudFunctionOutput {
	return i.ToGcpCloudFunctionOutputWithContext(context.Background())
}

func (i *GcpCloudFunction) ToGcpCloudFunctionOutputWithContext(ctx context.Context) GcpCloudFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpCloudFunctionOutput)
}

// GcpCloudFunctionArrayInput is an input type that accepts GcpCloudFunctionArray and GcpCloudFunctionArrayOutput values.
// You can construct a concrete instance of `GcpCloudFunctionArrayInput` via:
//
//	GcpCloudFunctionArray{ GcpCloudFunctionArgs{...} }
type GcpCloudFunctionArrayInput interface {
	pulumi.Input

	ToGcpCloudFunctionArrayOutput() GcpCloudFunctionArrayOutput
	ToGcpCloudFunctionArrayOutputWithContext(context.Context) GcpCloudFunctionArrayOutput
}

type GcpCloudFunctionArray []GcpCloudFunctionInput

func (GcpCloudFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpCloudFunction)(nil)).Elem()
}

func (i GcpCloudFunctionArray) ToGcpCloudFunctionArrayOutput() GcpCloudFunctionArrayOutput {
	return i.ToGcpCloudFunctionArrayOutputWithContext(context.Background())
}

func (i GcpCloudFunctionArray) ToGcpCloudFunctionArrayOutputWithContext(ctx context.Context) GcpCloudFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpCloudFunctionArrayOutput)
}

// GcpCloudFunctionMapInput is an input type that accepts GcpCloudFunctionMap and GcpCloudFunctionMapOutput values.
// You can construct a concrete instance of `GcpCloudFunctionMapInput` via:
//
//	GcpCloudFunctionMap{ "key": GcpCloudFunctionArgs{...} }
type GcpCloudFunctionMapInput interface {
	pulumi.Input

	ToGcpCloudFunctionMapOutput() GcpCloudFunctionMapOutput
	ToGcpCloudFunctionMapOutputWithContext(context.Context) GcpCloudFunctionMapOutput
}

type GcpCloudFunctionMap map[string]GcpCloudFunctionInput

func (GcpCloudFunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpCloudFunction)(nil)).Elem()
}

func (i GcpCloudFunctionMap) ToGcpCloudFunctionMapOutput() GcpCloudFunctionMapOutput {
	return i.ToGcpCloudFunctionMapOutputWithContext(context.Background())
}

func (i GcpCloudFunctionMap) ToGcpCloudFunctionMapOutputWithContext(ctx context.Context) GcpCloudFunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpCloudFunctionMapOutput)
}

type GcpCloudFunctionOutput struct{ *pulumi.OutputState }

func (GcpCloudFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpCloudFunction)(nil)).Elem()
}

func (o GcpCloudFunctionOutput) ToGcpCloudFunctionOutput() GcpCloudFunctionOutput {
	return o
}

func (o GcpCloudFunctionOutput) ToGcpCloudFunctionOutputWithContext(ctx context.Context) GcpCloudFunctionOutput {
	return o
}

// Whether or not to allow unauthenticated invocations.
func (o GcpCloudFunctionOutput) AllowUnauthenticated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.BoolPtrOutput { return v.AllowUnauthenticated }).(pulumi.BoolPtrOutput)
}

// The amount of memory available to the cloud function.
func (o GcpCloudFunctionOutput) AvailableMemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.IntPtrOutput { return v.AvailableMemoryMb }).(pulumi.IntPtrOutput)
}

// The build environment variables for this cloud function.
func (o GcpCloudFunctionOutput) BuildEnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.StringMapOutput { return v.BuildEnvironmentVariables }).(pulumi.StringMapOutput)
}

// The ID of the cloud build that built the cloud function.
func (o GcpCloudFunctionOutput) BuildId() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.StringOutput { return v.BuildId }).(pulumi.StringOutput)
}

// The description of the cloud function.
func (o GcpCloudFunctionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The entry point of the cloud function.
func (o GcpCloudFunctionOutput) Entrypoint() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.StringOutput { return v.Entrypoint }).(pulumi.StringOutput)
}

// The environment variables for this cloud function.
func (o GcpCloudFunctionOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.StringMapOutput { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Specifies an event trigger for the cloud function.
func (o GcpCloudFunctionOutput) EventTrigger() GcpCloudFunctionEventTriggerPtrOutput {
	return o.ApplyT(func(v *GcpCloudFunction) GcpCloudFunctionEventTriggerPtrOutput { return v.EventTrigger }).(GcpCloudFunctionEventTriggerPtrOutput)
}

// The full name of the cloud function.
func (o GcpCloudFunctionOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

// Specifies an HTTPS trigger for the cloud function.
func (o GcpCloudFunctionOutput) HttpsTrigger() GcpCloudFunctionHttpsTriggerPtrOutput {
	return o.ApplyT(func(v *GcpCloudFunction) GcpCloudFunctionHttpsTriggerPtrOutput { return v.HttpsTrigger }).(GcpCloudFunctionHttpsTriggerPtrOutput)
}

// The numerical index of ingress type to use for this cloud function. Should be one of: - `1` : Allow all - `2` : Allow
// internal traffic - `3` : Allow internal traffic and GCP load balancing
func (o GcpCloudFunctionOutput) IngressType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.IntPtrOutput { return v.IngressType }).(pulumi.IntPtrOutput)
}

// The labels assigned to this cloud function.
func (o GcpCloudFunctionOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The short name of the cloud function. Duplo will add a prefix to the name. You can retrieve the full name from the
// `fullname` attribute.
func (o GcpCloudFunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether or not to require HTTPS.
func (o GcpCloudFunctionOutput) RequireHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.BoolPtrOutput { return v.RequireHttps }).(pulumi.BoolPtrOutput)
}

// The runtime of the cloud function. Should be one of: - `nodejs10` : Node.js 10 - `nodejs12` : Node.js 12 - `nodejs14` :
// Node.js 14 - `python37` : Python 3.7 - `python38` : Python 3.8 - `python39` : Python 3.9 - `go111` : Go 1.11 - `go113` :
// Go 1.13 - `java11` : Java 11 - `dotnet3` : .NET Framework 3 - `ruby26` : Ruby 2.6 - `ruby27` : Ruby 2.7 - `nodejs6` :
// Node.js 6 (deprecated) - `nodejs8` : Node.js 8 (deprecated)
func (o GcpCloudFunctionOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.StringOutput { return v.Runtime }).(pulumi.StringOutput)
}

// The SelfLink of the cloud function.
func (o GcpCloudFunctionOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The cloud storage URL where the cloud function package is located.
func (o GcpCloudFunctionOutput) SourceArchiveUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.StringOutput { return v.SourceArchiveUrl }).(pulumi.StringOutput)
}

// The GUID of the tenant that the cloud function will be created in.
func (o GcpCloudFunctionOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The execution time limit for the cloud function.
func (o GcpCloudFunctionOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The current version of the cloud function.
func (o GcpCloudFunctionOutput) VersionId() pulumi.IntOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.IntOutput { return v.VersionId }).(pulumi.IntOutput)
}

// The numerical index of the VPC networking type to use for this cloud function. Should be one of: - `0` : All traffic
// through the VPC - `1` : Only private traffic through the VPC - `2` : No VPC networking
func (o GcpCloudFunctionOutput) VpcNetworkingType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GcpCloudFunction) pulumi.IntPtrOutput { return v.VpcNetworkingType }).(pulumi.IntPtrOutput)
}

type GcpCloudFunctionArrayOutput struct{ *pulumi.OutputState }

func (GcpCloudFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpCloudFunction)(nil)).Elem()
}

func (o GcpCloudFunctionArrayOutput) ToGcpCloudFunctionArrayOutput() GcpCloudFunctionArrayOutput {
	return o
}

func (o GcpCloudFunctionArrayOutput) ToGcpCloudFunctionArrayOutputWithContext(ctx context.Context) GcpCloudFunctionArrayOutput {
	return o
}

func (o GcpCloudFunctionArrayOutput) Index(i pulumi.IntInput) GcpCloudFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GcpCloudFunction {
		return vs[0].([]*GcpCloudFunction)[vs[1].(int)]
	}).(GcpCloudFunctionOutput)
}

type GcpCloudFunctionMapOutput struct{ *pulumi.OutputState }

func (GcpCloudFunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpCloudFunction)(nil)).Elem()
}

func (o GcpCloudFunctionMapOutput) ToGcpCloudFunctionMapOutput() GcpCloudFunctionMapOutput {
	return o
}

func (o GcpCloudFunctionMapOutput) ToGcpCloudFunctionMapOutputWithContext(ctx context.Context) GcpCloudFunctionMapOutput {
	return o
}

func (o GcpCloudFunctionMapOutput) MapIndex(k pulumi.StringInput) GcpCloudFunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GcpCloudFunction {
		return vs[0].(map[string]*GcpCloudFunction)[vs[1].(string)]
	}).(GcpCloudFunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcpCloudFunctionInput)(nil)).Elem(), &GcpCloudFunction{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpCloudFunctionArrayInput)(nil)).Elem(), GcpCloudFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpCloudFunctionMapInput)(nil)).Elem(), GcpCloudFunctionMap{})
	pulumi.RegisterOutputType(GcpCloudFunctionOutput{})
	pulumi.RegisterOutputType(GcpCloudFunctionArrayOutput{})
	pulumi.RegisterOutputType(GcpCloudFunctionMapOutput{})
}
