// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzurePostgresqlFlexibleDatabase` manages an azure postgresql flexible  database in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAzurePostgresqlFlexibleDatabase(ctx, "db", &duplocloud.AzurePostgresqlFlexibleDatabaseArgs{
//				TenantId:                   myapp.TenantId,
//				Name:                       pulumi.String("psqlflex"),
//				ServiceTier:                pulumi.String("Burstable"),
//				Hardware:                   pulumi.String("Standard_B2ms"),
//				HighAvailability:           pulumi.String("Disabled"),
//				StorageGb:                  pulumi.Int(64),
//				Version:                    pulumi.String("16"),
//				Subnet:                     pulumi.String("subnet"),
//				AdministratorLogin:         pulumi.String("tftry"),
//				AdministratorLoginPassword: pulumi.String("trynew#1"),
//				BackupRetentionDays:        pulumi.Int(7),
//				GeoRedundantBackup:         pulumi.String("Enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing Azure PostgreSQL Database
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the Azure PostgreSQL Database
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/azurePostgresqlFlexibleDatabase:AzurePostgresqlFlexibleDatabase myPostgreSQLDatabase *TENANT_ID*/*SHORT_NAME*
// ```
type AzurePostgresqlFlexibleDatabase struct {
	pulumi.CustomResourceState

	// The Administrator Login for the PostgreSQL Server.
	AdministratorLogin pulumi.StringOutput `pulumi:"administratorLogin"`
	// The Password associated with the `administratorLogin` for the PostgreSQL Server.
	AdministratorLoginPassword pulumi.StringOutput `pulumi:"administratorLoginPassword"`
	// Backup retention days for the server, supported values are between `7` and `35` days. Note: Updation allowed on updating with higher retention days value from current
	BackupRetentionDays pulumi.IntOutput `pulumi:"backupRetentionDays"`
	// Turn Geo-redundant server backups Enabled/Disabled. To enable or disable geo*redundant*backup resource need to be recreated
	GeoRedundantBackup pulumi.StringOutput `pulumi:"geoRedundantBackup"`
	// Specify compute based on service tier by prepending Standard_ keyword from following document https://azure.microsoft.com/en-in/pricing/details/postgresql/flexible-server
	Hardware pulumi.StringOutput `pulumi:"hardware"`
	// High availability options— Disabled, SameZone, and ZoneRedundant — are applicable if the service tier is set to GeneralPurpose or MemoryOptimized. Defaults to `Disabled`.
	HighAvailability pulumi.StringPtrOutput `pulumi:"highAvailability"`
	Location         pulumi.StringOutput    `pulumi:"location"`
	// Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specify service*tier among `Burstable`, `GeneralPurpose` or `MemoryOptimized`. Note: should disable high*availability before updating to Burstable
	ServiceTier pulumi.StringOutput `pulumi:"serviceTier"`
	// Max storage allowed for a server. Possible values are `32`,`64`,`128`,`256`,`512`,`1024`,`2048`,`4096`,`8192`,`16384`,`32768` GB. Note: Updation allowed on updating with higher storage size from current
	StorageGb pulumi.IntOutput       `pulumi:"storageGb"`
	Subnet    pulumi.StringOutput    `pulumi:"subnet"`
	Tags      pulumi.StringMapOutput `pulumi:"tags"`
	// The GUID of the tenant that the azure postgresql database will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Specifies the version of PostgreSQL Flexible DB to use. Valid values are `16`,`15`,`14`,`13`,`12`,`11`. Changing this forces a new resource to be created.
	Version pulumi.StringOutput `pulumi:"version"`
	// Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrOutput `pulumi:"waitUntilReady"`
}

// NewAzurePostgresqlFlexibleDatabase registers a new resource with the given unique name, arguments, and options.
func NewAzurePostgresqlFlexibleDatabase(ctx *pulumi.Context,
	name string, args *AzurePostgresqlFlexibleDatabaseArgs, opts ...pulumi.ResourceOption) (*AzurePostgresqlFlexibleDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdministratorLogin == nil {
		return nil, errors.New("invalid value for required argument 'AdministratorLogin'")
	}
	if args.AdministratorLoginPassword == nil {
		return nil, errors.New("invalid value for required argument 'AdministratorLoginPassword'")
	}
	if args.Hardware == nil {
		return nil, errors.New("invalid value for required argument 'Hardware'")
	}
	if args.ServiceTier == nil {
		return nil, errors.New("invalid value for required argument 'ServiceTier'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.AdministratorLoginPassword != nil {
		args.AdministratorLoginPassword = pulumi.ToSecret(args.AdministratorLoginPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"administratorLoginPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzurePostgresqlFlexibleDatabase
	err := ctx.RegisterResource("duplocloud:index/azurePostgresqlFlexibleDatabase:AzurePostgresqlFlexibleDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzurePostgresqlFlexibleDatabase gets an existing AzurePostgresqlFlexibleDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzurePostgresqlFlexibleDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzurePostgresqlFlexibleDatabaseState, opts ...pulumi.ResourceOption) (*AzurePostgresqlFlexibleDatabase, error) {
	var resource AzurePostgresqlFlexibleDatabase
	err := ctx.ReadResource("duplocloud:index/azurePostgresqlFlexibleDatabase:AzurePostgresqlFlexibleDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzurePostgresqlFlexibleDatabase resources.
type azurePostgresqlFlexibleDatabaseState struct {
	// The Administrator Login for the PostgreSQL Server.
	AdministratorLogin *string `pulumi:"administratorLogin"`
	// The Password associated with the `administratorLogin` for the PostgreSQL Server.
	AdministratorLoginPassword *string `pulumi:"administratorLoginPassword"`
	// Backup retention days for the server, supported values are between `7` and `35` days. Note: Updation allowed on updating with higher retention days value from current
	BackupRetentionDays *int `pulumi:"backupRetentionDays"`
	// Turn Geo-redundant server backups Enabled/Disabled. To enable or disable geo*redundant*backup resource need to be recreated
	GeoRedundantBackup *string `pulumi:"geoRedundantBackup"`
	// Specify compute based on service tier by prepending Standard_ keyword from following document https://azure.microsoft.com/en-in/pricing/details/postgresql/flexible-server
	Hardware *string `pulumi:"hardware"`
	// High availability options— Disabled, SameZone, and ZoneRedundant — are applicable if the service tier is set to GeneralPurpose or MemoryOptimized. Defaults to `Disabled`.
	HighAvailability *string `pulumi:"highAvailability"`
	Location         *string `pulumi:"location"`
	// Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.
	Name *string `pulumi:"name"`
	// Specify service*tier among `Burstable`, `GeneralPurpose` or `MemoryOptimized`. Note: should disable high*availability before updating to Burstable
	ServiceTier *string `pulumi:"serviceTier"`
	// Max storage allowed for a server. Possible values are `32`,`64`,`128`,`256`,`512`,`1024`,`2048`,`4096`,`8192`,`16384`,`32768` GB. Note: Updation allowed on updating with higher storage size from current
	StorageGb *int              `pulumi:"storageGb"`
	Subnet    *string           `pulumi:"subnet"`
	Tags      map[string]string `pulumi:"tags"`
	// The GUID of the tenant that the azure postgresql database will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the version of PostgreSQL Flexible DB to use. Valid values are `16`,`15`,`14`,`13`,`12`,`11`. Changing this forces a new resource to be created.
	Version *string `pulumi:"version"`
	// Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

type AzurePostgresqlFlexibleDatabaseState struct {
	// The Administrator Login for the PostgreSQL Server.
	AdministratorLogin pulumi.StringPtrInput
	// The Password associated with the `administratorLogin` for the PostgreSQL Server.
	AdministratorLoginPassword pulumi.StringPtrInput
	// Backup retention days for the server, supported values are between `7` and `35` days. Note: Updation allowed on updating with higher retention days value from current
	BackupRetentionDays pulumi.IntPtrInput
	// Turn Geo-redundant server backups Enabled/Disabled. To enable or disable geo*redundant*backup resource need to be recreated
	GeoRedundantBackup pulumi.StringPtrInput
	// Specify compute based on service tier by prepending Standard_ keyword from following document https://azure.microsoft.com/en-in/pricing/details/postgresql/flexible-server
	Hardware pulumi.StringPtrInput
	// High availability options— Disabled, SameZone, and ZoneRedundant — are applicable if the service tier is set to GeneralPurpose or MemoryOptimized. Defaults to `Disabled`.
	HighAvailability pulumi.StringPtrInput
	Location         pulumi.StringPtrInput
	// Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.
	Name pulumi.StringPtrInput
	// Specify service*tier among `Burstable`, `GeneralPurpose` or `MemoryOptimized`. Note: should disable high*availability before updating to Burstable
	ServiceTier pulumi.StringPtrInput
	// Max storage allowed for a server. Possible values are `32`,`64`,`128`,`256`,`512`,`1024`,`2048`,`4096`,`8192`,`16384`,`32768` GB. Note: Updation allowed on updating with higher storage size from current
	StorageGb pulumi.IntPtrInput
	Subnet    pulumi.StringPtrInput
	Tags      pulumi.StringMapInput
	// The GUID of the tenant that the azure postgresql database will be created in.
	TenantId pulumi.StringPtrInput
	// Specifies the version of PostgreSQL Flexible DB to use. Valid values are `16`,`15`,`14`,`13`,`12`,`11`. Changing this forces a new resource to be created.
	Version pulumi.StringPtrInput
	// Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzurePostgresqlFlexibleDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*azurePostgresqlFlexibleDatabaseState)(nil)).Elem()
}

type azurePostgresqlFlexibleDatabaseArgs struct {
	// The Administrator Login for the PostgreSQL Server.
	AdministratorLogin string `pulumi:"administratorLogin"`
	// The Password associated with the `administratorLogin` for the PostgreSQL Server.
	AdministratorLoginPassword string `pulumi:"administratorLoginPassword"`
	// Backup retention days for the server, supported values are between `7` and `35` days. Note: Updation allowed on updating with higher retention days value from current
	BackupRetentionDays *int `pulumi:"backupRetentionDays"`
	// Turn Geo-redundant server backups Enabled/Disabled. To enable or disable geo*redundant*backup resource need to be recreated
	GeoRedundantBackup *string `pulumi:"geoRedundantBackup"`
	// Specify compute based on service tier by prepending Standard_ keyword from following document https://azure.microsoft.com/en-in/pricing/details/postgresql/flexible-server
	Hardware string `pulumi:"hardware"`
	// High availability options— Disabled, SameZone, and ZoneRedundant — are applicable if the service tier is set to GeneralPurpose or MemoryOptimized. Defaults to `Disabled`.
	HighAvailability *string `pulumi:"highAvailability"`
	// Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.
	Name *string `pulumi:"name"`
	// Specify service*tier among `Burstable`, `GeneralPurpose` or `MemoryOptimized`. Note: should disable high*availability before updating to Burstable
	ServiceTier string `pulumi:"serviceTier"`
	// Max storage allowed for a server. Possible values are `32`,`64`,`128`,`256`,`512`,`1024`,`2048`,`4096`,`8192`,`16384`,`32768` GB. Note: Updation allowed on updating with higher storage size from current
	StorageGb *int   `pulumi:"storageGb"`
	Subnet    string `pulumi:"subnet"`
	// The GUID of the tenant that the azure postgresql database will be created in.
	TenantId string `pulumi:"tenantId"`
	// Specifies the version of PostgreSQL Flexible DB to use. Valid values are `16`,`15`,`14`,`13`,`12`,`11`. Changing this forces a new resource to be created.
	Version string `pulumi:"version"`
	// Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

// The set of arguments for constructing a AzurePostgresqlFlexibleDatabase resource.
type AzurePostgresqlFlexibleDatabaseArgs struct {
	// The Administrator Login for the PostgreSQL Server.
	AdministratorLogin pulumi.StringInput
	// The Password associated with the `administratorLogin` for the PostgreSQL Server.
	AdministratorLoginPassword pulumi.StringInput
	// Backup retention days for the server, supported values are between `7` and `35` days. Note: Updation allowed on updating with higher retention days value from current
	BackupRetentionDays pulumi.IntPtrInput
	// Turn Geo-redundant server backups Enabled/Disabled. To enable or disable geo*redundant*backup resource need to be recreated
	GeoRedundantBackup pulumi.StringPtrInput
	// Specify compute based on service tier by prepending Standard_ keyword from following document https://azure.microsoft.com/en-in/pricing/details/postgresql/flexible-server
	Hardware pulumi.StringInput
	// High availability options— Disabled, SameZone, and ZoneRedundant — are applicable if the service tier is set to GeneralPurpose or MemoryOptimized. Defaults to `Disabled`.
	HighAvailability pulumi.StringPtrInput
	// Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.
	Name pulumi.StringPtrInput
	// Specify service*tier among `Burstable`, `GeneralPurpose` or `MemoryOptimized`. Note: should disable high*availability before updating to Burstable
	ServiceTier pulumi.StringInput
	// Max storage allowed for a server. Possible values are `32`,`64`,`128`,`256`,`512`,`1024`,`2048`,`4096`,`8192`,`16384`,`32768` GB. Note: Updation allowed on updating with higher storage size from current
	StorageGb pulumi.IntPtrInput
	Subnet    pulumi.StringInput
	// The GUID of the tenant that the azure postgresql database will be created in.
	TenantId pulumi.StringInput
	// Specifies the version of PostgreSQL Flexible DB to use. Valid values are `16`,`15`,`14`,`13`,`12`,`11`. Changing this forces a new resource to be created.
	Version pulumi.StringInput
	// Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzurePostgresqlFlexibleDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azurePostgresqlFlexibleDatabaseArgs)(nil)).Elem()
}

type AzurePostgresqlFlexibleDatabaseInput interface {
	pulumi.Input

	ToAzurePostgresqlFlexibleDatabaseOutput() AzurePostgresqlFlexibleDatabaseOutput
	ToAzurePostgresqlFlexibleDatabaseOutputWithContext(ctx context.Context) AzurePostgresqlFlexibleDatabaseOutput
}

func (*AzurePostgresqlFlexibleDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**AzurePostgresqlFlexibleDatabase)(nil)).Elem()
}

func (i *AzurePostgresqlFlexibleDatabase) ToAzurePostgresqlFlexibleDatabaseOutput() AzurePostgresqlFlexibleDatabaseOutput {
	return i.ToAzurePostgresqlFlexibleDatabaseOutputWithContext(context.Background())
}

func (i *AzurePostgresqlFlexibleDatabase) ToAzurePostgresqlFlexibleDatabaseOutputWithContext(ctx context.Context) AzurePostgresqlFlexibleDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePostgresqlFlexibleDatabaseOutput)
}

// AzurePostgresqlFlexibleDatabaseArrayInput is an input type that accepts AzurePostgresqlFlexibleDatabaseArray and AzurePostgresqlFlexibleDatabaseArrayOutput values.
// You can construct a concrete instance of `AzurePostgresqlFlexibleDatabaseArrayInput` via:
//
//	AzurePostgresqlFlexibleDatabaseArray{ AzurePostgresqlFlexibleDatabaseArgs{...} }
type AzurePostgresqlFlexibleDatabaseArrayInput interface {
	pulumi.Input

	ToAzurePostgresqlFlexibleDatabaseArrayOutput() AzurePostgresqlFlexibleDatabaseArrayOutput
	ToAzurePostgresqlFlexibleDatabaseArrayOutputWithContext(context.Context) AzurePostgresqlFlexibleDatabaseArrayOutput
}

type AzurePostgresqlFlexibleDatabaseArray []AzurePostgresqlFlexibleDatabaseInput

func (AzurePostgresqlFlexibleDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzurePostgresqlFlexibleDatabase)(nil)).Elem()
}

func (i AzurePostgresqlFlexibleDatabaseArray) ToAzurePostgresqlFlexibleDatabaseArrayOutput() AzurePostgresqlFlexibleDatabaseArrayOutput {
	return i.ToAzurePostgresqlFlexibleDatabaseArrayOutputWithContext(context.Background())
}

func (i AzurePostgresqlFlexibleDatabaseArray) ToAzurePostgresqlFlexibleDatabaseArrayOutputWithContext(ctx context.Context) AzurePostgresqlFlexibleDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePostgresqlFlexibleDatabaseArrayOutput)
}

// AzurePostgresqlFlexibleDatabaseMapInput is an input type that accepts AzurePostgresqlFlexibleDatabaseMap and AzurePostgresqlFlexibleDatabaseMapOutput values.
// You can construct a concrete instance of `AzurePostgresqlFlexibleDatabaseMapInput` via:
//
//	AzurePostgresqlFlexibleDatabaseMap{ "key": AzurePostgresqlFlexibleDatabaseArgs{...} }
type AzurePostgresqlFlexibleDatabaseMapInput interface {
	pulumi.Input

	ToAzurePostgresqlFlexibleDatabaseMapOutput() AzurePostgresqlFlexibleDatabaseMapOutput
	ToAzurePostgresqlFlexibleDatabaseMapOutputWithContext(context.Context) AzurePostgresqlFlexibleDatabaseMapOutput
}

type AzurePostgresqlFlexibleDatabaseMap map[string]AzurePostgresqlFlexibleDatabaseInput

func (AzurePostgresqlFlexibleDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzurePostgresqlFlexibleDatabase)(nil)).Elem()
}

func (i AzurePostgresqlFlexibleDatabaseMap) ToAzurePostgresqlFlexibleDatabaseMapOutput() AzurePostgresqlFlexibleDatabaseMapOutput {
	return i.ToAzurePostgresqlFlexibleDatabaseMapOutputWithContext(context.Background())
}

func (i AzurePostgresqlFlexibleDatabaseMap) ToAzurePostgresqlFlexibleDatabaseMapOutputWithContext(ctx context.Context) AzurePostgresqlFlexibleDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePostgresqlFlexibleDatabaseMapOutput)
}

type AzurePostgresqlFlexibleDatabaseOutput struct{ *pulumi.OutputState }

func (AzurePostgresqlFlexibleDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzurePostgresqlFlexibleDatabase)(nil)).Elem()
}

func (o AzurePostgresqlFlexibleDatabaseOutput) ToAzurePostgresqlFlexibleDatabaseOutput() AzurePostgresqlFlexibleDatabaseOutput {
	return o
}

func (o AzurePostgresqlFlexibleDatabaseOutput) ToAzurePostgresqlFlexibleDatabaseOutputWithContext(ctx context.Context) AzurePostgresqlFlexibleDatabaseOutput {
	return o
}

// The Administrator Login for the PostgreSQL Server.
func (o AzurePostgresqlFlexibleDatabaseOutput) AdministratorLogin() pulumi.StringOutput {
	return o.ApplyT(func(v *AzurePostgresqlFlexibleDatabase) pulumi.StringOutput { return v.AdministratorLogin }).(pulumi.StringOutput)
}

// The Password associated with the `administratorLogin` for the PostgreSQL Server.
func (o AzurePostgresqlFlexibleDatabaseOutput) AdministratorLoginPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *AzurePostgresqlFlexibleDatabase) pulumi.StringOutput { return v.AdministratorLoginPassword }).(pulumi.StringOutput)
}

// Backup retention days for the server, supported values are between `7` and `35` days. Note: Updation allowed on updating with higher retention days value from current
func (o AzurePostgresqlFlexibleDatabaseOutput) BackupRetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v *AzurePostgresqlFlexibleDatabase) pulumi.IntOutput { return v.BackupRetentionDays }).(pulumi.IntOutput)
}

// Turn Geo-redundant server backups Enabled/Disabled. To enable or disable geo*redundant*backup resource need to be recreated
func (o AzurePostgresqlFlexibleDatabaseOutput) GeoRedundantBackup() pulumi.StringOutput {
	return o.ApplyT(func(v *AzurePostgresqlFlexibleDatabase) pulumi.StringOutput { return v.GeoRedundantBackup }).(pulumi.StringOutput)
}

// Specify compute based on service tier by prepending Standard_ keyword from following document https://azure.microsoft.com/en-in/pricing/details/postgresql/flexible-server
func (o AzurePostgresqlFlexibleDatabaseOutput) Hardware() pulumi.StringOutput {
	return o.ApplyT(func(v *AzurePostgresqlFlexibleDatabase) pulumi.StringOutput { return v.Hardware }).(pulumi.StringOutput)
}

// High availability options— Disabled, SameZone, and ZoneRedundant — are applicable if the service tier is set to GeneralPurpose or MemoryOptimized. Defaults to `Disabled`.
func (o AzurePostgresqlFlexibleDatabaseOutput) HighAvailability() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgresqlFlexibleDatabase) pulumi.StringPtrOutput { return v.HighAvailability }).(pulumi.StringPtrOutput)
}

func (o AzurePostgresqlFlexibleDatabaseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AzurePostgresqlFlexibleDatabase) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.
func (o AzurePostgresqlFlexibleDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzurePostgresqlFlexibleDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specify service*tier among `Burstable`, `GeneralPurpose` or `MemoryOptimized`. Note: should disable high*availability before updating to Burstable
func (o AzurePostgresqlFlexibleDatabaseOutput) ServiceTier() pulumi.StringOutput {
	return o.ApplyT(func(v *AzurePostgresqlFlexibleDatabase) pulumi.StringOutput { return v.ServiceTier }).(pulumi.StringOutput)
}

// Max storage allowed for a server. Possible values are `32`,`64`,`128`,`256`,`512`,`1024`,`2048`,`4096`,`8192`,`16384`,`32768` GB. Note: Updation allowed on updating with higher storage size from current
func (o AzurePostgresqlFlexibleDatabaseOutput) StorageGb() pulumi.IntOutput {
	return o.ApplyT(func(v *AzurePostgresqlFlexibleDatabase) pulumi.IntOutput { return v.StorageGb }).(pulumi.IntOutput)
}

func (o AzurePostgresqlFlexibleDatabaseOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *AzurePostgresqlFlexibleDatabase) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

func (o AzurePostgresqlFlexibleDatabaseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AzurePostgresqlFlexibleDatabase) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The GUID of the tenant that the azure postgresql database will be created in.
func (o AzurePostgresqlFlexibleDatabaseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzurePostgresqlFlexibleDatabase) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Specifies the version of PostgreSQL Flexible DB to use. Valid values are `16`,`15`,`14`,`13`,`12`,`11`. Changing this forces a new resource to be created.
func (o AzurePostgresqlFlexibleDatabaseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *AzurePostgresqlFlexibleDatabase) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.
func (o AzurePostgresqlFlexibleDatabaseOutput) WaitUntilReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzurePostgresqlFlexibleDatabase) pulumi.BoolPtrOutput { return v.WaitUntilReady }).(pulumi.BoolPtrOutput)
}

type AzurePostgresqlFlexibleDatabaseArrayOutput struct{ *pulumi.OutputState }

func (AzurePostgresqlFlexibleDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzurePostgresqlFlexibleDatabase)(nil)).Elem()
}

func (o AzurePostgresqlFlexibleDatabaseArrayOutput) ToAzurePostgresqlFlexibleDatabaseArrayOutput() AzurePostgresqlFlexibleDatabaseArrayOutput {
	return o
}

func (o AzurePostgresqlFlexibleDatabaseArrayOutput) ToAzurePostgresqlFlexibleDatabaseArrayOutputWithContext(ctx context.Context) AzurePostgresqlFlexibleDatabaseArrayOutput {
	return o
}

func (o AzurePostgresqlFlexibleDatabaseArrayOutput) Index(i pulumi.IntInput) AzurePostgresqlFlexibleDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzurePostgresqlFlexibleDatabase {
		return vs[0].([]*AzurePostgresqlFlexibleDatabase)[vs[1].(int)]
	}).(AzurePostgresqlFlexibleDatabaseOutput)
}

type AzurePostgresqlFlexibleDatabaseMapOutput struct{ *pulumi.OutputState }

func (AzurePostgresqlFlexibleDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzurePostgresqlFlexibleDatabase)(nil)).Elem()
}

func (o AzurePostgresqlFlexibleDatabaseMapOutput) ToAzurePostgresqlFlexibleDatabaseMapOutput() AzurePostgresqlFlexibleDatabaseMapOutput {
	return o
}

func (o AzurePostgresqlFlexibleDatabaseMapOutput) ToAzurePostgresqlFlexibleDatabaseMapOutputWithContext(ctx context.Context) AzurePostgresqlFlexibleDatabaseMapOutput {
	return o
}

func (o AzurePostgresqlFlexibleDatabaseMapOutput) MapIndex(k pulumi.StringInput) AzurePostgresqlFlexibleDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzurePostgresqlFlexibleDatabase {
		return vs[0].(map[string]*AzurePostgresqlFlexibleDatabase)[vs[1].(string)]
	}).(AzurePostgresqlFlexibleDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzurePostgresqlFlexibleDatabaseInput)(nil)).Elem(), &AzurePostgresqlFlexibleDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzurePostgresqlFlexibleDatabaseArrayInput)(nil)).Elem(), AzurePostgresqlFlexibleDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzurePostgresqlFlexibleDatabaseMapInput)(nil)).Elem(), AzurePostgresqlFlexibleDatabaseMap{})
	pulumi.RegisterOutputType(AzurePostgresqlFlexibleDatabaseOutput{})
	pulumi.RegisterOutputType(AzurePostgresqlFlexibleDatabaseArrayOutput{})
	pulumi.RegisterOutputType(AzurePostgresqlFlexibleDatabaseMapOutput{})
}
