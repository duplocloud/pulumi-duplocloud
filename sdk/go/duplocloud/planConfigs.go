// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `PlanConfigs` manages the list of configs avaialble to a plan in Duplo.
//
// This resource allows you take control of individual configs for a specific plan.
//
// ## Import
//
// ```sh
// $ pulumi import duplocloud:index/planConfigs:PlanConfigs myplan PLAN_ID
// ```
type PlanConfigs struct {
	pulumi.CustomResourceState

	// A list of configs to manage.
	Config PlanConfigsConfigArrayOutput `pulumi:"config"`
	// A complete list of configs for this plan, even ones not being managed by this resource.
	Configs PlanConfigsConfigArrayOutput `pulumi:"configs"`
	// Whether or not this resource should delete any configs not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedConfigs pulumi.BoolPtrOutput `pulumi:"deleteUnspecifiedConfigs"`
	// The ID of the plan to configure.
	PlanId pulumi.StringOutput `pulumi:"planId"`
	// A list of config keys being managed by this resource.
	SpecifiedConfigs pulumi.StringArrayOutput `pulumi:"specifiedConfigs"`
}

// NewPlanConfigs registers a new resource with the given unique name, arguments, and options.
func NewPlanConfigs(ctx *pulumi.Context,
	name string, args *PlanConfigsArgs, opts ...pulumi.ResourceOption) (*PlanConfigs, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlanId == nil {
		return nil, errors.New("invalid value for required argument 'PlanId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PlanConfigs
	err := ctx.RegisterResource("duplocloud:index/planConfigs:PlanConfigs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlanConfigs gets an existing PlanConfigs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlanConfigs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlanConfigsState, opts ...pulumi.ResourceOption) (*PlanConfigs, error) {
	var resource PlanConfigs
	err := ctx.ReadResource("duplocloud:index/planConfigs:PlanConfigs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlanConfigs resources.
type planConfigsState struct {
	// A list of configs to manage.
	Config []PlanConfigsConfig `pulumi:"config"`
	// A complete list of configs for this plan, even ones not being managed by this resource.
	Configs []PlanConfigsConfig `pulumi:"configs"`
	// Whether or not this resource should delete any configs not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedConfigs *bool `pulumi:"deleteUnspecifiedConfigs"`
	// The ID of the plan to configure.
	PlanId *string `pulumi:"planId"`
	// A list of config keys being managed by this resource.
	SpecifiedConfigs []string `pulumi:"specifiedConfigs"`
}

type PlanConfigsState struct {
	// A list of configs to manage.
	Config PlanConfigsConfigArrayInput
	// A complete list of configs for this plan, even ones not being managed by this resource.
	Configs PlanConfigsConfigArrayInput
	// Whether or not this resource should delete any configs not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedConfigs pulumi.BoolPtrInput
	// The ID of the plan to configure.
	PlanId pulumi.StringPtrInput
	// A list of config keys being managed by this resource.
	SpecifiedConfigs pulumi.StringArrayInput
}

func (PlanConfigsState) ElementType() reflect.Type {
	return reflect.TypeOf((*planConfigsState)(nil)).Elem()
}

type planConfigsArgs struct {
	// A list of configs to manage.
	Config []PlanConfigsConfig `pulumi:"config"`
	// Whether or not this resource should delete any configs not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedConfigs *bool `pulumi:"deleteUnspecifiedConfigs"`
	// The ID of the plan to configure.
	PlanId string `pulumi:"planId"`
}

// The set of arguments for constructing a PlanConfigs resource.
type PlanConfigsArgs struct {
	// A list of configs to manage.
	Config PlanConfigsConfigArrayInput
	// Whether or not this resource should delete any configs not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedConfigs pulumi.BoolPtrInput
	// The ID of the plan to configure.
	PlanId pulumi.StringInput
}

func (PlanConfigsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*planConfigsArgs)(nil)).Elem()
}

type PlanConfigsInput interface {
	pulumi.Input

	ToPlanConfigsOutput() PlanConfigsOutput
	ToPlanConfigsOutputWithContext(ctx context.Context) PlanConfigsOutput
}

func (*PlanConfigs) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanConfigs)(nil)).Elem()
}

func (i *PlanConfigs) ToPlanConfigsOutput() PlanConfigsOutput {
	return i.ToPlanConfigsOutputWithContext(context.Background())
}

func (i *PlanConfigs) ToPlanConfigsOutputWithContext(ctx context.Context) PlanConfigsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanConfigsOutput)
}

// PlanConfigsArrayInput is an input type that accepts PlanConfigsArray and PlanConfigsArrayOutput values.
// You can construct a concrete instance of `PlanConfigsArrayInput` via:
//
//	PlanConfigsArray{ PlanConfigsArgs{...} }
type PlanConfigsArrayInput interface {
	pulumi.Input

	ToPlanConfigsArrayOutput() PlanConfigsArrayOutput
	ToPlanConfigsArrayOutputWithContext(context.Context) PlanConfigsArrayOutput
}

type PlanConfigsArray []PlanConfigsInput

func (PlanConfigsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlanConfigs)(nil)).Elem()
}

func (i PlanConfigsArray) ToPlanConfigsArrayOutput() PlanConfigsArrayOutput {
	return i.ToPlanConfigsArrayOutputWithContext(context.Background())
}

func (i PlanConfigsArray) ToPlanConfigsArrayOutputWithContext(ctx context.Context) PlanConfigsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanConfigsArrayOutput)
}

// PlanConfigsMapInput is an input type that accepts PlanConfigsMap and PlanConfigsMapOutput values.
// You can construct a concrete instance of `PlanConfigsMapInput` via:
//
//	PlanConfigsMap{ "key": PlanConfigsArgs{...} }
type PlanConfigsMapInput interface {
	pulumi.Input

	ToPlanConfigsMapOutput() PlanConfigsMapOutput
	ToPlanConfigsMapOutputWithContext(context.Context) PlanConfigsMapOutput
}

type PlanConfigsMap map[string]PlanConfigsInput

func (PlanConfigsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlanConfigs)(nil)).Elem()
}

func (i PlanConfigsMap) ToPlanConfigsMapOutput() PlanConfigsMapOutput {
	return i.ToPlanConfigsMapOutputWithContext(context.Background())
}

func (i PlanConfigsMap) ToPlanConfigsMapOutputWithContext(ctx context.Context) PlanConfigsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanConfigsMapOutput)
}

type PlanConfigsOutput struct{ *pulumi.OutputState }

func (PlanConfigsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanConfigs)(nil)).Elem()
}

func (o PlanConfigsOutput) ToPlanConfigsOutput() PlanConfigsOutput {
	return o
}

func (o PlanConfigsOutput) ToPlanConfigsOutputWithContext(ctx context.Context) PlanConfigsOutput {
	return o
}

// A list of configs to manage.
func (o PlanConfigsOutput) Config() PlanConfigsConfigArrayOutput {
	return o.ApplyT(func(v *PlanConfigs) PlanConfigsConfigArrayOutput { return v.Config }).(PlanConfigsConfigArrayOutput)
}

// A complete list of configs for this plan, even ones not being managed by this resource.
func (o PlanConfigsOutput) Configs() PlanConfigsConfigArrayOutput {
	return o.ApplyT(func(v *PlanConfigs) PlanConfigsConfigArrayOutput { return v.Configs }).(PlanConfigsConfigArrayOutput)
}

// Whether or not this resource should delete any configs not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
func (o PlanConfigsOutput) DeleteUnspecifiedConfigs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanConfigs) pulumi.BoolPtrOutput { return v.DeleteUnspecifiedConfigs }).(pulumi.BoolPtrOutput)
}

// The ID of the plan to configure.
func (o PlanConfigsOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *PlanConfigs) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

// A list of config keys being managed by this resource.
func (o PlanConfigsOutput) SpecifiedConfigs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlanConfigs) pulumi.StringArrayOutput { return v.SpecifiedConfigs }).(pulumi.StringArrayOutput)
}

type PlanConfigsArrayOutput struct{ *pulumi.OutputState }

func (PlanConfigsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlanConfigs)(nil)).Elem()
}

func (o PlanConfigsArrayOutput) ToPlanConfigsArrayOutput() PlanConfigsArrayOutput {
	return o
}

func (o PlanConfigsArrayOutput) ToPlanConfigsArrayOutputWithContext(ctx context.Context) PlanConfigsArrayOutput {
	return o
}

func (o PlanConfigsArrayOutput) Index(i pulumi.IntInput) PlanConfigsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PlanConfigs {
		return vs[0].([]*PlanConfigs)[vs[1].(int)]
	}).(PlanConfigsOutput)
}

type PlanConfigsMapOutput struct{ *pulumi.OutputState }

func (PlanConfigsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlanConfigs)(nil)).Elem()
}

func (o PlanConfigsMapOutput) ToPlanConfigsMapOutput() PlanConfigsMapOutput {
	return o
}

func (o PlanConfigsMapOutput) ToPlanConfigsMapOutputWithContext(ctx context.Context) PlanConfigsMapOutput {
	return o
}

func (o PlanConfigsMapOutput) MapIndex(k pulumi.StringInput) PlanConfigsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PlanConfigs {
		return vs[0].(map[string]*PlanConfigs)[vs[1].(string)]
	}).(PlanConfigsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlanConfigsInput)(nil)).Elem(), &PlanConfigs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanConfigsArrayInput)(nil)).Elem(), PlanConfigsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanConfigsMapInput)(nil)).Elem(), PlanConfigsMap{})
	pulumi.RegisterOutputType(PlanConfigsOutput{})
	pulumi.RegisterOutputType(PlanConfigsArrayOutput{})
	pulumi.RegisterOutputType(PlanConfigsMapOutput{})
}
