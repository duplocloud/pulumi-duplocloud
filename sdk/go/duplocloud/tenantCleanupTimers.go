// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage tenant expiry in DuploCloud
//
// ## Import
//
// ```sh
// $ pulumi import duplocloud:index/tenantCleanupTimers:TenantCleanupTimers mytimers *TENANT_ID*
// ```
type TenantCleanupTimers struct {
	pulumi.CustomResourceState

	// The expiry time of the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)
	ExpiryTime pulumi.StringPtrOutput `pulumi:"expiryTime"`
	// The time to pause the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)
	PauseTime pulumi.StringPtrOutput `pulumi:"pauseTime"`
	// Whether to remove the expiry time.
	RemoveExpiryTime pulumi.BoolPtrOutput `pulumi:"removeExpiryTime"`
	// Whether to remove the pause time.
	RemovePauseTime pulumi.BoolPtrOutput `pulumi:"removePauseTime"`
	// The GUID of the tenant that the expiry will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewTenantCleanupTimers registers a new resource with the given unique name, arguments, and options.
func NewTenantCleanupTimers(ctx *pulumi.Context,
	name string, args *TenantCleanupTimersArgs, opts ...pulumi.ResourceOption) (*TenantCleanupTimers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TenantCleanupTimers
	err := ctx.RegisterResource("duplocloud:index/tenantCleanupTimers:TenantCleanupTimers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTenantCleanupTimers gets an existing TenantCleanupTimers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTenantCleanupTimers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TenantCleanupTimersState, opts ...pulumi.ResourceOption) (*TenantCleanupTimers, error) {
	var resource TenantCleanupTimers
	err := ctx.ReadResource("duplocloud:index/tenantCleanupTimers:TenantCleanupTimers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TenantCleanupTimers resources.
type tenantCleanupTimersState struct {
	// The expiry time of the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)
	ExpiryTime *string `pulumi:"expiryTime"`
	// The time to pause the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)
	PauseTime *string `pulumi:"pauseTime"`
	// Whether to remove the expiry time.
	RemoveExpiryTime *bool `pulumi:"removeExpiryTime"`
	// Whether to remove the pause time.
	RemovePauseTime *bool `pulumi:"removePauseTime"`
	// The GUID of the tenant that the expiry will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type TenantCleanupTimersState struct {
	// The expiry time of the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)
	ExpiryTime pulumi.StringPtrInput
	// The time to pause the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)
	PauseTime pulumi.StringPtrInput
	// Whether to remove the expiry time.
	RemoveExpiryTime pulumi.BoolPtrInput
	// Whether to remove the pause time.
	RemovePauseTime pulumi.BoolPtrInput
	// The GUID of the tenant that the expiry will be created in.
	TenantId pulumi.StringPtrInput
}

func (TenantCleanupTimersState) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantCleanupTimersState)(nil)).Elem()
}

type tenantCleanupTimersArgs struct {
	// The expiry time of the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)
	ExpiryTime *string `pulumi:"expiryTime"`
	// The time to pause the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)
	PauseTime *string `pulumi:"pauseTime"`
	// Whether to remove the expiry time.
	RemoveExpiryTime *bool `pulumi:"removeExpiryTime"`
	// Whether to remove the pause time.
	RemovePauseTime *bool `pulumi:"removePauseTime"`
	// The GUID of the tenant that the expiry will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a TenantCleanupTimers resource.
type TenantCleanupTimersArgs struct {
	// The expiry time of the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)
	ExpiryTime pulumi.StringPtrInput
	// The time to pause the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)
	PauseTime pulumi.StringPtrInput
	// Whether to remove the expiry time.
	RemoveExpiryTime pulumi.BoolPtrInput
	// Whether to remove the pause time.
	RemovePauseTime pulumi.BoolPtrInput
	// The GUID of the tenant that the expiry will be created in.
	TenantId pulumi.StringInput
}

func (TenantCleanupTimersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantCleanupTimersArgs)(nil)).Elem()
}

type TenantCleanupTimersInput interface {
	pulumi.Input

	ToTenantCleanupTimersOutput() TenantCleanupTimersOutput
	ToTenantCleanupTimersOutputWithContext(ctx context.Context) TenantCleanupTimersOutput
}

func (*TenantCleanupTimers) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantCleanupTimers)(nil)).Elem()
}

func (i *TenantCleanupTimers) ToTenantCleanupTimersOutput() TenantCleanupTimersOutput {
	return i.ToTenantCleanupTimersOutputWithContext(context.Background())
}

func (i *TenantCleanupTimers) ToTenantCleanupTimersOutputWithContext(ctx context.Context) TenantCleanupTimersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantCleanupTimersOutput)
}

// TenantCleanupTimersArrayInput is an input type that accepts TenantCleanupTimersArray and TenantCleanupTimersArrayOutput values.
// You can construct a concrete instance of `TenantCleanupTimersArrayInput` via:
//
//	TenantCleanupTimersArray{ TenantCleanupTimersArgs{...} }
type TenantCleanupTimersArrayInput interface {
	pulumi.Input

	ToTenantCleanupTimersArrayOutput() TenantCleanupTimersArrayOutput
	ToTenantCleanupTimersArrayOutputWithContext(context.Context) TenantCleanupTimersArrayOutput
}

type TenantCleanupTimersArray []TenantCleanupTimersInput

func (TenantCleanupTimersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TenantCleanupTimers)(nil)).Elem()
}

func (i TenantCleanupTimersArray) ToTenantCleanupTimersArrayOutput() TenantCleanupTimersArrayOutput {
	return i.ToTenantCleanupTimersArrayOutputWithContext(context.Background())
}

func (i TenantCleanupTimersArray) ToTenantCleanupTimersArrayOutputWithContext(ctx context.Context) TenantCleanupTimersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantCleanupTimersArrayOutput)
}

// TenantCleanupTimersMapInput is an input type that accepts TenantCleanupTimersMap and TenantCleanupTimersMapOutput values.
// You can construct a concrete instance of `TenantCleanupTimersMapInput` via:
//
//	TenantCleanupTimersMap{ "key": TenantCleanupTimersArgs{...} }
type TenantCleanupTimersMapInput interface {
	pulumi.Input

	ToTenantCleanupTimersMapOutput() TenantCleanupTimersMapOutput
	ToTenantCleanupTimersMapOutputWithContext(context.Context) TenantCleanupTimersMapOutput
}

type TenantCleanupTimersMap map[string]TenantCleanupTimersInput

func (TenantCleanupTimersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TenantCleanupTimers)(nil)).Elem()
}

func (i TenantCleanupTimersMap) ToTenantCleanupTimersMapOutput() TenantCleanupTimersMapOutput {
	return i.ToTenantCleanupTimersMapOutputWithContext(context.Background())
}

func (i TenantCleanupTimersMap) ToTenantCleanupTimersMapOutputWithContext(ctx context.Context) TenantCleanupTimersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantCleanupTimersMapOutput)
}

type TenantCleanupTimersOutput struct{ *pulumi.OutputState }

func (TenantCleanupTimersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantCleanupTimers)(nil)).Elem()
}

func (o TenantCleanupTimersOutput) ToTenantCleanupTimersOutput() TenantCleanupTimersOutput {
	return o
}

func (o TenantCleanupTimersOutput) ToTenantCleanupTimersOutputWithContext(ctx context.Context) TenantCleanupTimersOutput {
	return o
}

// The expiry time of the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)
func (o TenantCleanupTimersOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantCleanupTimers) pulumi.StringPtrOutput { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

// The time to pause the tenant, in UTC with the format YYYY-MM-DDTHH:MM:SSZ (e.g. `2021-06-01T00:00:00Z`)
func (o TenantCleanupTimersOutput) PauseTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantCleanupTimers) pulumi.StringPtrOutput { return v.PauseTime }).(pulumi.StringPtrOutput)
}

// Whether to remove the expiry time.
func (o TenantCleanupTimersOutput) RemoveExpiryTime() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TenantCleanupTimers) pulumi.BoolPtrOutput { return v.RemoveExpiryTime }).(pulumi.BoolPtrOutput)
}

// Whether to remove the pause time.
func (o TenantCleanupTimersOutput) RemovePauseTime() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TenantCleanupTimers) pulumi.BoolPtrOutput { return v.RemovePauseTime }).(pulumi.BoolPtrOutput)
}

// The GUID of the tenant that the expiry will be created in.
func (o TenantCleanupTimersOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantCleanupTimers) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type TenantCleanupTimersArrayOutput struct{ *pulumi.OutputState }

func (TenantCleanupTimersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TenantCleanupTimers)(nil)).Elem()
}

func (o TenantCleanupTimersArrayOutput) ToTenantCleanupTimersArrayOutput() TenantCleanupTimersArrayOutput {
	return o
}

func (o TenantCleanupTimersArrayOutput) ToTenantCleanupTimersArrayOutputWithContext(ctx context.Context) TenantCleanupTimersArrayOutput {
	return o
}

func (o TenantCleanupTimersArrayOutput) Index(i pulumi.IntInput) TenantCleanupTimersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TenantCleanupTimers {
		return vs[0].([]*TenantCleanupTimers)[vs[1].(int)]
	}).(TenantCleanupTimersOutput)
}

type TenantCleanupTimersMapOutput struct{ *pulumi.OutputState }

func (TenantCleanupTimersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TenantCleanupTimers)(nil)).Elem()
}

func (o TenantCleanupTimersMapOutput) ToTenantCleanupTimersMapOutput() TenantCleanupTimersMapOutput {
	return o
}

func (o TenantCleanupTimersMapOutput) ToTenantCleanupTimersMapOutputWithContext(ctx context.Context) TenantCleanupTimersMapOutput {
	return o
}

func (o TenantCleanupTimersMapOutput) MapIndex(k pulumi.StringInput) TenantCleanupTimersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TenantCleanupTimers {
		return vs[0].(map[string]*TenantCleanupTimers)[vs[1].(string)]
	}).(TenantCleanupTimersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TenantCleanupTimersInput)(nil)).Elem(), &TenantCleanupTimers{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantCleanupTimersArrayInput)(nil)).Elem(), TenantCleanupTimersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantCleanupTimersMapInput)(nil)).Elem(), TenantCleanupTimersMap{})
	pulumi.RegisterOutputType(TenantCleanupTimersOutput{})
	pulumi.RegisterOutputType(TenantCleanupTimersArrayOutput{})
	pulumi.RegisterOutputType(TenantCleanupTimersMapOutput{})
}
