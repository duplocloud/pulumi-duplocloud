// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `DuploServiceLbconfigs` manages load balancer configuration(s) for a container-based service in Duplo.
//
// NOTE: For Amazon ECS services, see the `EcsService` resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			// Deploy NGINX using Duplo's native container agent, and configure a load balancer.
//			myservice, err := duplocloud.NewDuploService(ctx, "myservice", &duplocloud.DuploServiceArgs{
//				TenantId:      myapp.TenantId,
//				Name:          pulumi.String("myservice"),
//				AgentPlatform: pulumi.Int(0),
//				DockerImage:   pulumi.String("nginx:latest"),
//				Replicas:      pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewDuploServiceLbconfigs(ctx, "myservice", &duplocloud.DuploServiceLbconfigsArgs{
//				TenantId:                  myservice.TenantId,
//				ReplicationControllerName: myservice.Name,
//				Lbconfigs: duplocloud.DuploServiceLbconfigsLbconfigArray{
//					&duplocloud.DuploServiceLbconfigsLbconfigArgs{
//						ExternalPort:   pulumi.Int(80),
//						HealthCheckUrl: pulumi.String("/"),
//						IsNative:       pulumi.Bool(false),
//						LbType:         pulumi.Int(1),
//						Port:           pulumi.String("80"),
//						Protocol:       pulumi.String("http"),
//						HealthCheck: &duplocloud.DuploServiceLbconfigsLbconfigHealthCheckArgs{
//							HealthyThreshold:   pulumi.Int(4),
//							UnhealthyThreshold: pulumi.Int(4),
//							Timeout:            pulumi.Int(50),
//							Interval:           pulumi.Int(30),
//							HttpSuccessCodes:   pulumi.String("200-399"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing service's load balancer configurations
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *NAME* is the name of the service
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/duploServiceLbconfigs:DuploServiceLbconfigs myservice v2/subscriptions/*TENANT_ID*/ServiceLBConfigsV2/*NAME*
// ```
type DuploServiceLbconfigs struct {
	pulumi.CustomResourceState

	// The load balancer ARN.
	Arn       pulumi.StringOutput                      `pulumi:"arn"`
	Lbconfigs DuploServiceLbconfigsLbconfigArrayOutput `pulumi:"lbconfigs"`
	// The name of the duplo service.
	ReplicationControllerName pulumi.StringOutput `pulumi:"replicationControllerName"`
	// The load balancer's current status.
	Status pulumi.StringOutput `pulumi:"status"`
	// The GUID of the tenant that hosts the duplo service.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Whether or not to wait until Duplo considers all of the load balancers ready
	WaitUntilReady pulumi.BoolPtrOutput `pulumi:"waitUntilReady"`
}

// NewDuploServiceLbconfigs registers a new resource with the given unique name, arguments, and options.
func NewDuploServiceLbconfigs(ctx *pulumi.Context,
	name string, args *DuploServiceLbconfigsArgs, opts ...pulumi.ResourceOption) (*DuploServiceLbconfigs, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Lbconfigs == nil {
		return nil, errors.New("invalid value for required argument 'Lbconfigs'")
	}
	if args.ReplicationControllerName == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationControllerName'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DuploServiceLbconfigs
	err := ctx.RegisterResource("duplocloud:index/duploServiceLbconfigs:DuploServiceLbconfigs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDuploServiceLbconfigs gets an existing DuploServiceLbconfigs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDuploServiceLbconfigs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DuploServiceLbconfigsState, opts ...pulumi.ResourceOption) (*DuploServiceLbconfigs, error) {
	var resource DuploServiceLbconfigs
	err := ctx.ReadResource("duplocloud:index/duploServiceLbconfigs:DuploServiceLbconfigs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DuploServiceLbconfigs resources.
type duploServiceLbconfigsState struct {
	// The load balancer ARN.
	Arn       *string                         `pulumi:"arn"`
	Lbconfigs []DuploServiceLbconfigsLbconfig `pulumi:"lbconfigs"`
	// The name of the duplo service.
	ReplicationControllerName *string `pulumi:"replicationControllerName"`
	// The load balancer's current status.
	Status *string `pulumi:"status"`
	// The GUID of the tenant that hosts the duplo service.
	TenantId *string `pulumi:"tenantId"`
	// Whether or not to wait until Duplo considers all of the load balancers ready
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

type DuploServiceLbconfigsState struct {
	// The load balancer ARN.
	Arn       pulumi.StringPtrInput
	Lbconfigs DuploServiceLbconfigsLbconfigArrayInput
	// The name of the duplo service.
	ReplicationControllerName pulumi.StringPtrInput
	// The load balancer's current status.
	Status pulumi.StringPtrInput
	// The GUID of the tenant that hosts the duplo service.
	TenantId pulumi.StringPtrInput
	// Whether or not to wait until Duplo considers all of the load balancers ready
	WaitUntilReady pulumi.BoolPtrInput
}

func (DuploServiceLbconfigsState) ElementType() reflect.Type {
	return reflect.TypeOf((*duploServiceLbconfigsState)(nil)).Elem()
}

type duploServiceLbconfigsArgs struct {
	Lbconfigs []DuploServiceLbconfigsLbconfig `pulumi:"lbconfigs"`
	// The name of the duplo service.
	ReplicationControllerName string `pulumi:"replicationControllerName"`
	// The GUID of the tenant that hosts the duplo service.
	TenantId string `pulumi:"tenantId"`
	// Whether or not to wait until Duplo considers all of the load balancers ready
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

// The set of arguments for constructing a DuploServiceLbconfigs resource.
type DuploServiceLbconfigsArgs struct {
	Lbconfigs DuploServiceLbconfigsLbconfigArrayInput
	// The name of the duplo service.
	ReplicationControllerName pulumi.StringInput
	// The GUID of the tenant that hosts the duplo service.
	TenantId pulumi.StringInput
	// Whether or not to wait until Duplo considers all of the load balancers ready
	WaitUntilReady pulumi.BoolPtrInput
}

func (DuploServiceLbconfigsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*duploServiceLbconfigsArgs)(nil)).Elem()
}

type DuploServiceLbconfigsInput interface {
	pulumi.Input

	ToDuploServiceLbconfigsOutput() DuploServiceLbconfigsOutput
	ToDuploServiceLbconfigsOutputWithContext(ctx context.Context) DuploServiceLbconfigsOutput
}

func (*DuploServiceLbconfigs) ElementType() reflect.Type {
	return reflect.TypeOf((**DuploServiceLbconfigs)(nil)).Elem()
}

func (i *DuploServiceLbconfigs) ToDuploServiceLbconfigsOutput() DuploServiceLbconfigsOutput {
	return i.ToDuploServiceLbconfigsOutputWithContext(context.Background())
}

func (i *DuploServiceLbconfigs) ToDuploServiceLbconfigsOutputWithContext(ctx context.Context) DuploServiceLbconfigsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DuploServiceLbconfigsOutput)
}

// DuploServiceLbconfigsArrayInput is an input type that accepts DuploServiceLbconfigsArray and DuploServiceLbconfigsArrayOutput values.
// You can construct a concrete instance of `DuploServiceLbconfigsArrayInput` via:
//
//	DuploServiceLbconfigsArray{ DuploServiceLbconfigsArgs{...} }
type DuploServiceLbconfigsArrayInput interface {
	pulumi.Input

	ToDuploServiceLbconfigsArrayOutput() DuploServiceLbconfigsArrayOutput
	ToDuploServiceLbconfigsArrayOutputWithContext(context.Context) DuploServiceLbconfigsArrayOutput
}

type DuploServiceLbconfigsArray []DuploServiceLbconfigsInput

func (DuploServiceLbconfigsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DuploServiceLbconfigs)(nil)).Elem()
}

func (i DuploServiceLbconfigsArray) ToDuploServiceLbconfigsArrayOutput() DuploServiceLbconfigsArrayOutput {
	return i.ToDuploServiceLbconfigsArrayOutputWithContext(context.Background())
}

func (i DuploServiceLbconfigsArray) ToDuploServiceLbconfigsArrayOutputWithContext(ctx context.Context) DuploServiceLbconfigsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DuploServiceLbconfigsArrayOutput)
}

// DuploServiceLbconfigsMapInput is an input type that accepts DuploServiceLbconfigsMap and DuploServiceLbconfigsMapOutput values.
// You can construct a concrete instance of `DuploServiceLbconfigsMapInput` via:
//
//	DuploServiceLbconfigsMap{ "key": DuploServiceLbconfigsArgs{...} }
type DuploServiceLbconfigsMapInput interface {
	pulumi.Input

	ToDuploServiceLbconfigsMapOutput() DuploServiceLbconfigsMapOutput
	ToDuploServiceLbconfigsMapOutputWithContext(context.Context) DuploServiceLbconfigsMapOutput
}

type DuploServiceLbconfigsMap map[string]DuploServiceLbconfigsInput

func (DuploServiceLbconfigsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DuploServiceLbconfigs)(nil)).Elem()
}

func (i DuploServiceLbconfigsMap) ToDuploServiceLbconfigsMapOutput() DuploServiceLbconfigsMapOutput {
	return i.ToDuploServiceLbconfigsMapOutputWithContext(context.Background())
}

func (i DuploServiceLbconfigsMap) ToDuploServiceLbconfigsMapOutputWithContext(ctx context.Context) DuploServiceLbconfigsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DuploServiceLbconfigsMapOutput)
}

type DuploServiceLbconfigsOutput struct{ *pulumi.OutputState }

func (DuploServiceLbconfigsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DuploServiceLbconfigs)(nil)).Elem()
}

func (o DuploServiceLbconfigsOutput) ToDuploServiceLbconfigsOutput() DuploServiceLbconfigsOutput {
	return o
}

func (o DuploServiceLbconfigsOutput) ToDuploServiceLbconfigsOutputWithContext(ctx context.Context) DuploServiceLbconfigsOutput {
	return o
}

// The load balancer ARN.
func (o DuploServiceLbconfigsOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DuploServiceLbconfigs) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DuploServiceLbconfigsOutput) Lbconfigs() DuploServiceLbconfigsLbconfigArrayOutput {
	return o.ApplyT(func(v *DuploServiceLbconfigs) DuploServiceLbconfigsLbconfigArrayOutput { return v.Lbconfigs }).(DuploServiceLbconfigsLbconfigArrayOutput)
}

// The name of the duplo service.
func (o DuploServiceLbconfigsOutput) ReplicationControllerName() pulumi.StringOutput {
	return o.ApplyT(func(v *DuploServiceLbconfigs) pulumi.StringOutput { return v.ReplicationControllerName }).(pulumi.StringOutput)
}

// The load balancer's current status.
func (o DuploServiceLbconfigsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DuploServiceLbconfigs) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The GUID of the tenant that hosts the duplo service.
func (o DuploServiceLbconfigsOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *DuploServiceLbconfigs) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Whether or not to wait until Duplo considers all of the load balancers ready
func (o DuploServiceLbconfigsOutput) WaitUntilReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DuploServiceLbconfigs) pulumi.BoolPtrOutput { return v.WaitUntilReady }).(pulumi.BoolPtrOutput)
}

type DuploServiceLbconfigsArrayOutput struct{ *pulumi.OutputState }

func (DuploServiceLbconfigsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DuploServiceLbconfigs)(nil)).Elem()
}

func (o DuploServiceLbconfigsArrayOutput) ToDuploServiceLbconfigsArrayOutput() DuploServiceLbconfigsArrayOutput {
	return o
}

func (o DuploServiceLbconfigsArrayOutput) ToDuploServiceLbconfigsArrayOutputWithContext(ctx context.Context) DuploServiceLbconfigsArrayOutput {
	return o
}

func (o DuploServiceLbconfigsArrayOutput) Index(i pulumi.IntInput) DuploServiceLbconfigsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DuploServiceLbconfigs {
		return vs[0].([]*DuploServiceLbconfigs)[vs[1].(int)]
	}).(DuploServiceLbconfigsOutput)
}

type DuploServiceLbconfigsMapOutput struct{ *pulumi.OutputState }

func (DuploServiceLbconfigsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DuploServiceLbconfigs)(nil)).Elem()
}

func (o DuploServiceLbconfigsMapOutput) ToDuploServiceLbconfigsMapOutput() DuploServiceLbconfigsMapOutput {
	return o
}

func (o DuploServiceLbconfigsMapOutput) ToDuploServiceLbconfigsMapOutputWithContext(ctx context.Context) DuploServiceLbconfigsMapOutput {
	return o
}

func (o DuploServiceLbconfigsMapOutput) MapIndex(k pulumi.StringInput) DuploServiceLbconfigsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DuploServiceLbconfigs {
		return vs[0].(map[string]*DuploServiceLbconfigs)[vs[1].(string)]
	}).(DuploServiceLbconfigsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DuploServiceLbconfigsInput)(nil)).Elem(), &DuploServiceLbconfigs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DuploServiceLbconfigsArrayInput)(nil)).Elem(), DuploServiceLbconfigsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DuploServiceLbconfigsMapInput)(nil)).Elem(), DuploServiceLbconfigsMap{})
	pulumi.RegisterOutputType(DuploServiceLbconfigsOutput{})
	pulumi.RegisterOutputType(DuploServiceLbconfigsArrayOutput{})
	pulumi.RegisterOutputType(DuploServiceLbconfigsMapOutput{})
}
