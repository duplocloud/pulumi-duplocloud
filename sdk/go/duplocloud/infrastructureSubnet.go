// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// For AWS
//			_, err := duplocloud.NewInfrastructureSubnet(ctx, "aws-subnet", &duplocloud.InfrastructureSubnetArgs{
//				Name:      pulumi.String("mySubnet"),
//				InfraName: pulumi.String("myinfra"),
//				CidrBlock: pulumi.String("10.34.1.0/24"),
//				Type:      pulumi.String("private"),
//				Zone:      pulumi.String("A"),
//			})
//			if err != nil {
//				return err
//			}
//			// For Azure
//			_, err = duplocloud.NewInfrastructureSubnet(ctx, "az-subnet", &duplocloud.InfrastructureSubnetArgs{
//				Name:      pulumi.String("mySubnet"),
//				InfraName: pulumi.String("myinfra"),
//				CidrBlock: pulumi.String("10.34.1.0/24"),
//				Type:      pulumi.String("appgwsubnet"),
//				ServiceEndpoints: pulumi.StringArray{
//					pulumi.String("Microsoft.Storage"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing infrastructure subnet
//
//   - *INFRA_NAME* is the infrastructure name
//
//   - *NAME* is the infrastructure subnet name
//
//   - *ADDRESS_PREFIX* is the infrastructure subnet address prefix
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/infrastructureSubnet:InfrastructureSubnet subnet *INFRA_NAME*/*NAME*/*ADDRESS_PREFIX*
// ```
type InfrastructureSubnet struct {
	pulumi.CustomResourceState

	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	InfraName pulumi.StringOutput `pulumi:"infraName"`
	// Determines whether the isolated network is enabled. This is applicable only for Azure subnets. Defaults to `false`.
	IsolatedNetwork pulumi.BoolPtrOutput `pulumi:"isolatedNetwork"`
	Name            pulumi.StringOutput  `pulumi:"name"`
	// The list of Service endpoints to associate with the azure subnet. Possible values include: `Microsoft.AzureActiveDirectory`, `Microsoft.AzureCosmosDB`, `Microsoft.ContainerRegistry`, `Microsoft.EventHub`, `Microsoft.KeyVault`, `Microsoft.ServiceBus`,`Microsoft.Sql`, `Microsoft.Storage` and `Microsoft.Web`. This is applicable only for Azure subnets.
	ServiceEndpoints pulumi.StringArrayOutput `pulumi:"serviceEndpoints"`
	SubnetId         pulumi.StringOutput      `pulumi:"subnetId"`
	SubnetName       pulumi.StringOutput      `pulumi:"subnetName"`
	Tags             pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll          pulumi.StringMapOutput   `pulumi:"tagsAll"`
	// Specify subnet type. `private` and `public` is used for AWS subnet. Will be one of `none`, `appgwsubnet`, `appgw-internal-subnet`, `azurebastionsubnet`, `managedinstance`, `databrick-workspace`, `mysql-flexiserver`, `postgres-flexiserver` is used for azure.
	Type pulumi.StringOutput `pulumi:"type"`
	// The Duplo zone that the subnet resides in.  Will be one of:  `"A"`, `"B"`, `"C"`, or `"D"`. This is applicable only for AWS subnets.
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewInfrastructureSubnet registers a new resource with the given unique name, arguments, and options.
func NewInfrastructureSubnet(ctx *pulumi.Context,
	name string, args *InfrastructureSubnetArgs, opts ...pulumi.ResourceOption) (*InfrastructureSubnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlock'")
	}
	if args.InfraName == nil {
		return nil, errors.New("invalid value for required argument 'InfraName'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InfrastructureSubnet
	err := ctx.RegisterResource("duplocloud:index/infrastructureSubnet:InfrastructureSubnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInfrastructureSubnet gets an existing InfrastructureSubnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInfrastructureSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InfrastructureSubnetState, opts ...pulumi.ResourceOption) (*InfrastructureSubnet, error) {
	var resource InfrastructureSubnet
	err := ctx.ReadResource("duplocloud:index/infrastructureSubnet:InfrastructureSubnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InfrastructureSubnet resources.
type infrastructureSubnetState struct {
	CidrBlock *string `pulumi:"cidrBlock"`
	InfraName *string `pulumi:"infraName"`
	// Determines whether the isolated network is enabled. This is applicable only for Azure subnets. Defaults to `false`.
	IsolatedNetwork *bool   `pulumi:"isolatedNetwork"`
	Name            *string `pulumi:"name"`
	// The list of Service endpoints to associate with the azure subnet. Possible values include: `Microsoft.AzureActiveDirectory`, `Microsoft.AzureCosmosDB`, `Microsoft.ContainerRegistry`, `Microsoft.EventHub`, `Microsoft.KeyVault`, `Microsoft.ServiceBus`,`Microsoft.Sql`, `Microsoft.Storage` and `Microsoft.Web`. This is applicable only for Azure subnets.
	ServiceEndpoints []string          `pulumi:"serviceEndpoints"`
	SubnetId         *string           `pulumi:"subnetId"`
	SubnetName       *string           `pulumi:"subnetName"`
	Tags             map[string]string `pulumi:"tags"`
	TagsAll          map[string]string `pulumi:"tagsAll"`
	// Specify subnet type. `private` and `public` is used for AWS subnet. Will be one of `none`, `appgwsubnet`, `appgw-internal-subnet`, `azurebastionsubnet`, `managedinstance`, `databrick-workspace`, `mysql-flexiserver`, `postgres-flexiserver` is used for azure.
	Type *string `pulumi:"type"`
	// The Duplo zone that the subnet resides in.  Will be one of:  `"A"`, `"B"`, `"C"`, or `"D"`. This is applicable only for AWS subnets.
	Zone *string `pulumi:"zone"`
}

type InfrastructureSubnetState struct {
	CidrBlock pulumi.StringPtrInput
	InfraName pulumi.StringPtrInput
	// Determines whether the isolated network is enabled. This is applicable only for Azure subnets. Defaults to `false`.
	IsolatedNetwork pulumi.BoolPtrInput
	Name            pulumi.StringPtrInput
	// The list of Service endpoints to associate with the azure subnet. Possible values include: `Microsoft.AzureActiveDirectory`, `Microsoft.AzureCosmosDB`, `Microsoft.ContainerRegistry`, `Microsoft.EventHub`, `Microsoft.KeyVault`, `Microsoft.ServiceBus`,`Microsoft.Sql`, `Microsoft.Storage` and `Microsoft.Web`. This is applicable only for Azure subnets.
	ServiceEndpoints pulumi.StringArrayInput
	SubnetId         pulumi.StringPtrInput
	SubnetName       pulumi.StringPtrInput
	Tags             pulumi.StringMapInput
	TagsAll          pulumi.StringMapInput
	// Specify subnet type. `private` and `public` is used for AWS subnet. Will be one of `none`, `appgwsubnet`, `appgw-internal-subnet`, `azurebastionsubnet`, `managedinstance`, `databrick-workspace`, `mysql-flexiserver`, `postgres-flexiserver` is used for azure.
	Type pulumi.StringPtrInput
	// The Duplo zone that the subnet resides in.  Will be one of:  `"A"`, `"B"`, `"C"`, or `"D"`. This is applicable only for AWS subnets.
	Zone pulumi.StringPtrInput
}

func (InfrastructureSubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*infrastructureSubnetState)(nil)).Elem()
}

type infrastructureSubnetArgs struct {
	CidrBlock string `pulumi:"cidrBlock"`
	InfraName string `pulumi:"infraName"`
	// Determines whether the isolated network is enabled. This is applicable only for Azure subnets. Defaults to `false`.
	IsolatedNetwork *bool   `pulumi:"isolatedNetwork"`
	Name            *string `pulumi:"name"`
	// The list of Service endpoints to associate with the azure subnet. Possible values include: `Microsoft.AzureActiveDirectory`, `Microsoft.AzureCosmosDB`, `Microsoft.ContainerRegistry`, `Microsoft.EventHub`, `Microsoft.KeyVault`, `Microsoft.ServiceBus`,`Microsoft.Sql`, `Microsoft.Storage` and `Microsoft.Web`. This is applicable only for Azure subnets.
	ServiceEndpoints []string          `pulumi:"serviceEndpoints"`
	Tags             map[string]string `pulumi:"tags"`
	// Specify subnet type. `private` and `public` is used for AWS subnet. Will be one of `none`, `appgwsubnet`, `appgw-internal-subnet`, `azurebastionsubnet`, `managedinstance`, `databrick-workspace`, `mysql-flexiserver`, `postgres-flexiserver` is used for azure.
	Type string `pulumi:"type"`
	// The Duplo zone that the subnet resides in.  Will be one of:  `"A"`, `"B"`, `"C"`, or `"D"`. This is applicable only for AWS subnets.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a InfrastructureSubnet resource.
type InfrastructureSubnetArgs struct {
	CidrBlock pulumi.StringInput
	InfraName pulumi.StringInput
	// Determines whether the isolated network is enabled. This is applicable only for Azure subnets. Defaults to `false`.
	IsolatedNetwork pulumi.BoolPtrInput
	Name            pulumi.StringPtrInput
	// The list of Service endpoints to associate with the azure subnet. Possible values include: `Microsoft.AzureActiveDirectory`, `Microsoft.AzureCosmosDB`, `Microsoft.ContainerRegistry`, `Microsoft.EventHub`, `Microsoft.KeyVault`, `Microsoft.ServiceBus`,`Microsoft.Sql`, `Microsoft.Storage` and `Microsoft.Web`. This is applicable only for Azure subnets.
	ServiceEndpoints pulumi.StringArrayInput
	Tags             pulumi.StringMapInput
	// Specify subnet type. `private` and `public` is used for AWS subnet. Will be one of `none`, `appgwsubnet`, `appgw-internal-subnet`, `azurebastionsubnet`, `managedinstance`, `databrick-workspace`, `mysql-flexiserver`, `postgres-flexiserver` is used for azure.
	Type pulumi.StringInput
	// The Duplo zone that the subnet resides in.  Will be one of:  `"A"`, `"B"`, `"C"`, or `"D"`. This is applicable only for AWS subnets.
	Zone pulumi.StringPtrInput
}

func (InfrastructureSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*infrastructureSubnetArgs)(nil)).Elem()
}

type InfrastructureSubnetInput interface {
	pulumi.Input

	ToInfrastructureSubnetOutput() InfrastructureSubnetOutput
	ToInfrastructureSubnetOutputWithContext(ctx context.Context) InfrastructureSubnetOutput
}

func (*InfrastructureSubnet) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureSubnet)(nil)).Elem()
}

func (i *InfrastructureSubnet) ToInfrastructureSubnetOutput() InfrastructureSubnetOutput {
	return i.ToInfrastructureSubnetOutputWithContext(context.Background())
}

func (i *InfrastructureSubnet) ToInfrastructureSubnetOutputWithContext(ctx context.Context) InfrastructureSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureSubnetOutput)
}

// InfrastructureSubnetArrayInput is an input type that accepts InfrastructureSubnetArray and InfrastructureSubnetArrayOutput values.
// You can construct a concrete instance of `InfrastructureSubnetArrayInput` via:
//
//	InfrastructureSubnetArray{ InfrastructureSubnetArgs{...} }
type InfrastructureSubnetArrayInput interface {
	pulumi.Input

	ToInfrastructureSubnetArrayOutput() InfrastructureSubnetArrayOutput
	ToInfrastructureSubnetArrayOutputWithContext(context.Context) InfrastructureSubnetArrayOutput
}

type InfrastructureSubnetArray []InfrastructureSubnetInput

func (InfrastructureSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfrastructureSubnet)(nil)).Elem()
}

func (i InfrastructureSubnetArray) ToInfrastructureSubnetArrayOutput() InfrastructureSubnetArrayOutput {
	return i.ToInfrastructureSubnetArrayOutputWithContext(context.Background())
}

func (i InfrastructureSubnetArray) ToInfrastructureSubnetArrayOutputWithContext(ctx context.Context) InfrastructureSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureSubnetArrayOutput)
}

// InfrastructureSubnetMapInput is an input type that accepts InfrastructureSubnetMap and InfrastructureSubnetMapOutput values.
// You can construct a concrete instance of `InfrastructureSubnetMapInput` via:
//
//	InfrastructureSubnetMap{ "key": InfrastructureSubnetArgs{...} }
type InfrastructureSubnetMapInput interface {
	pulumi.Input

	ToInfrastructureSubnetMapOutput() InfrastructureSubnetMapOutput
	ToInfrastructureSubnetMapOutputWithContext(context.Context) InfrastructureSubnetMapOutput
}

type InfrastructureSubnetMap map[string]InfrastructureSubnetInput

func (InfrastructureSubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfrastructureSubnet)(nil)).Elem()
}

func (i InfrastructureSubnetMap) ToInfrastructureSubnetMapOutput() InfrastructureSubnetMapOutput {
	return i.ToInfrastructureSubnetMapOutputWithContext(context.Background())
}

func (i InfrastructureSubnetMap) ToInfrastructureSubnetMapOutputWithContext(ctx context.Context) InfrastructureSubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureSubnetMapOutput)
}

type InfrastructureSubnetOutput struct{ *pulumi.OutputState }

func (InfrastructureSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureSubnet)(nil)).Elem()
}

func (o InfrastructureSubnetOutput) ToInfrastructureSubnetOutput() InfrastructureSubnetOutput {
	return o
}

func (o InfrastructureSubnetOutput) ToInfrastructureSubnetOutputWithContext(ctx context.Context) InfrastructureSubnetOutput {
	return o
}

func (o InfrastructureSubnetOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureSubnet) pulumi.StringOutput { return v.CidrBlock }).(pulumi.StringOutput)
}

func (o InfrastructureSubnetOutput) InfraName() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureSubnet) pulumi.StringOutput { return v.InfraName }).(pulumi.StringOutput)
}

// Determines whether the isolated network is enabled. This is applicable only for Azure subnets. Defaults to `false`.
func (o InfrastructureSubnetOutput) IsolatedNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InfrastructureSubnet) pulumi.BoolPtrOutput { return v.IsolatedNetwork }).(pulumi.BoolPtrOutput)
}

func (o InfrastructureSubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureSubnet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The list of Service endpoints to associate with the azure subnet. Possible values include: `Microsoft.AzureActiveDirectory`, `Microsoft.AzureCosmosDB`, `Microsoft.ContainerRegistry`, `Microsoft.EventHub`, `Microsoft.KeyVault`, `Microsoft.ServiceBus`,`Microsoft.Sql`, `Microsoft.Storage` and `Microsoft.Web`. This is applicable only for Azure subnets.
func (o InfrastructureSubnetOutput) ServiceEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureSubnet) pulumi.StringArrayOutput { return v.ServiceEndpoints }).(pulumi.StringArrayOutput)
}

func (o InfrastructureSubnetOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureSubnet) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o InfrastructureSubnetOutput) SubnetName() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureSubnet) pulumi.StringOutput { return v.SubnetName }).(pulumi.StringOutput)
}

func (o InfrastructureSubnetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InfrastructureSubnet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o InfrastructureSubnetOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InfrastructureSubnet) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Specify subnet type. `private` and `public` is used for AWS subnet. Will be one of `none`, `appgwsubnet`, `appgw-internal-subnet`, `azurebastionsubnet`, `managedinstance`, `databrick-workspace`, `mysql-flexiserver`, `postgres-flexiserver` is used for azure.
func (o InfrastructureSubnetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureSubnet) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The Duplo zone that the subnet resides in.  Will be one of:  `"A"`, `"B"`, `"C"`, or `"D"`. This is applicable only for AWS subnets.
func (o InfrastructureSubnetOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureSubnet) pulumi.StringPtrOutput { return v.Zone }).(pulumi.StringPtrOutput)
}

type InfrastructureSubnetArrayOutput struct{ *pulumi.OutputState }

func (InfrastructureSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfrastructureSubnet)(nil)).Elem()
}

func (o InfrastructureSubnetArrayOutput) ToInfrastructureSubnetArrayOutput() InfrastructureSubnetArrayOutput {
	return o
}

func (o InfrastructureSubnetArrayOutput) ToInfrastructureSubnetArrayOutputWithContext(ctx context.Context) InfrastructureSubnetArrayOutput {
	return o
}

func (o InfrastructureSubnetArrayOutput) Index(i pulumi.IntInput) InfrastructureSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InfrastructureSubnet {
		return vs[0].([]*InfrastructureSubnet)[vs[1].(int)]
	}).(InfrastructureSubnetOutput)
}

type InfrastructureSubnetMapOutput struct{ *pulumi.OutputState }

func (InfrastructureSubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfrastructureSubnet)(nil)).Elem()
}

func (o InfrastructureSubnetMapOutput) ToInfrastructureSubnetMapOutput() InfrastructureSubnetMapOutput {
	return o
}

func (o InfrastructureSubnetMapOutput) ToInfrastructureSubnetMapOutputWithContext(ctx context.Context) InfrastructureSubnetMapOutput {
	return o
}

func (o InfrastructureSubnetMapOutput) MapIndex(k pulumi.StringInput) InfrastructureSubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InfrastructureSubnet {
		return vs[0].(map[string]*InfrastructureSubnet)[vs[1].(string)]
	}).(InfrastructureSubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureSubnetInput)(nil)).Elem(), &InfrastructureSubnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureSubnetArrayInput)(nil)).Elem(), InfrastructureSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureSubnetMapInput)(nil)).Elem(), InfrastructureSubnetMap{})
	pulumi.RegisterOutputType(InfrastructureSubnetOutput{})
	pulumi.RegisterOutputType(InfrastructureSubnetArrayOutput{})
	pulumi.RegisterOutputType(InfrastructureSubnetMapOutput{})
}
