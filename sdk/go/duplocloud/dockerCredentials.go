// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `DockerCredentials` manages the docker credentials for the tenant in Duplo.
//
// This resource allows you take control of docker registry credentials for a specific tenant.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewTenant(ctx, "duplo-app", &duplocloud.TenantArgs{
//				AccountName:   pulumi.String("duplo-app"),
//				PlanId:        pulumi.String("default"),
//				AllowDeletion: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewDockerCredentials(ctx, "docker_creds", &duplocloud.DockerCredentialsArgs{
//				TenantId: duplo_app.TenantId,
//				UserName: pulumi.String("myname"),
//				Email:    pulumi.String("abc@xyz.com"),
//				Password: pulumi.String("p@assW0rd"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing Docker Credentials
//
//   - *TENANT_ID* is the tenant GUID
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/dockerCredentials:DockerCredentials myDockerCreds *TENANT_ID*
// ```
type DockerCredentials struct {
	pulumi.CustomResourceState

	Email    pulumi.StringOutput `pulumi:"email"`
	Password pulumi.StringOutput `pulumi:"password"`
	Registry pulumi.StringOutput `pulumi:"registry"`
	// The GUID of the tenant that the docker credentials will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewDockerCredentials registers a new resource with the given unique name, arguments, and options.
func NewDockerCredentials(ctx *pulumi.Context,
	name string, args *DockerCredentialsArgs, opts ...pulumi.ResourceOption) (*DockerCredentials, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DockerCredentials
	err := ctx.RegisterResource("duplocloud:index/dockerCredentials:DockerCredentials", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDockerCredentials gets an existing DockerCredentials resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDockerCredentials(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DockerCredentialsState, opts ...pulumi.ResourceOption) (*DockerCredentials, error) {
	var resource DockerCredentials
	err := ctx.ReadResource("duplocloud:index/dockerCredentials:DockerCredentials", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DockerCredentials resources.
type dockerCredentialsState struct {
	Email    *string `pulumi:"email"`
	Password *string `pulumi:"password"`
	Registry *string `pulumi:"registry"`
	// The GUID of the tenant that the docker credentials will be created in.
	TenantId *string `pulumi:"tenantId"`
	UserName *string `pulumi:"userName"`
}

type DockerCredentialsState struct {
	Email    pulumi.StringPtrInput
	Password pulumi.StringPtrInput
	Registry pulumi.StringPtrInput
	// The GUID of the tenant that the docker credentials will be created in.
	TenantId pulumi.StringPtrInput
	UserName pulumi.StringPtrInput
}

func (DockerCredentialsState) ElementType() reflect.Type {
	return reflect.TypeOf((*dockerCredentialsState)(nil)).Elem()
}

type dockerCredentialsArgs struct {
	Email    string  `pulumi:"email"`
	Password string  `pulumi:"password"`
	Registry *string `pulumi:"registry"`
	// The GUID of the tenant that the docker credentials will be created in.
	TenantId string `pulumi:"tenantId"`
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a DockerCredentials resource.
type DockerCredentialsArgs struct {
	Email    pulumi.StringInput
	Password pulumi.StringInput
	Registry pulumi.StringPtrInput
	// The GUID of the tenant that the docker credentials will be created in.
	TenantId pulumi.StringInput
	UserName pulumi.StringInput
}

func (DockerCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dockerCredentialsArgs)(nil)).Elem()
}

type DockerCredentialsInput interface {
	pulumi.Input

	ToDockerCredentialsOutput() DockerCredentialsOutput
	ToDockerCredentialsOutputWithContext(ctx context.Context) DockerCredentialsOutput
}

func (*DockerCredentials) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerCredentials)(nil)).Elem()
}

func (i *DockerCredentials) ToDockerCredentialsOutput() DockerCredentialsOutput {
	return i.ToDockerCredentialsOutputWithContext(context.Background())
}

func (i *DockerCredentials) ToDockerCredentialsOutputWithContext(ctx context.Context) DockerCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerCredentialsOutput)
}

// DockerCredentialsArrayInput is an input type that accepts DockerCredentialsArray and DockerCredentialsArrayOutput values.
// You can construct a concrete instance of `DockerCredentialsArrayInput` via:
//
//	DockerCredentialsArray{ DockerCredentialsArgs{...} }
type DockerCredentialsArrayInput interface {
	pulumi.Input

	ToDockerCredentialsArrayOutput() DockerCredentialsArrayOutput
	ToDockerCredentialsArrayOutputWithContext(context.Context) DockerCredentialsArrayOutput
}

type DockerCredentialsArray []DockerCredentialsInput

func (DockerCredentialsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DockerCredentials)(nil)).Elem()
}

func (i DockerCredentialsArray) ToDockerCredentialsArrayOutput() DockerCredentialsArrayOutput {
	return i.ToDockerCredentialsArrayOutputWithContext(context.Background())
}

func (i DockerCredentialsArray) ToDockerCredentialsArrayOutputWithContext(ctx context.Context) DockerCredentialsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerCredentialsArrayOutput)
}

// DockerCredentialsMapInput is an input type that accepts DockerCredentialsMap and DockerCredentialsMapOutput values.
// You can construct a concrete instance of `DockerCredentialsMapInput` via:
//
//	DockerCredentialsMap{ "key": DockerCredentialsArgs{...} }
type DockerCredentialsMapInput interface {
	pulumi.Input

	ToDockerCredentialsMapOutput() DockerCredentialsMapOutput
	ToDockerCredentialsMapOutputWithContext(context.Context) DockerCredentialsMapOutput
}

type DockerCredentialsMap map[string]DockerCredentialsInput

func (DockerCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DockerCredentials)(nil)).Elem()
}

func (i DockerCredentialsMap) ToDockerCredentialsMapOutput() DockerCredentialsMapOutput {
	return i.ToDockerCredentialsMapOutputWithContext(context.Background())
}

func (i DockerCredentialsMap) ToDockerCredentialsMapOutputWithContext(ctx context.Context) DockerCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerCredentialsMapOutput)
}

type DockerCredentialsOutput struct{ *pulumi.OutputState }

func (DockerCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerCredentials)(nil)).Elem()
}

func (o DockerCredentialsOutput) ToDockerCredentialsOutput() DockerCredentialsOutput {
	return o
}

func (o DockerCredentialsOutput) ToDockerCredentialsOutputWithContext(ctx context.Context) DockerCredentialsOutput {
	return o
}

func (o DockerCredentialsOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *DockerCredentials) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

func (o DockerCredentialsOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DockerCredentials) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o DockerCredentialsOutput) Registry() pulumi.StringOutput {
	return o.ApplyT(func(v *DockerCredentials) pulumi.StringOutput { return v.Registry }).(pulumi.StringOutput)
}

// The GUID of the tenant that the docker credentials will be created in.
func (o DockerCredentialsOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *DockerCredentials) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

func (o DockerCredentialsOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *DockerCredentials) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type DockerCredentialsArrayOutput struct{ *pulumi.OutputState }

func (DockerCredentialsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DockerCredentials)(nil)).Elem()
}

func (o DockerCredentialsArrayOutput) ToDockerCredentialsArrayOutput() DockerCredentialsArrayOutput {
	return o
}

func (o DockerCredentialsArrayOutput) ToDockerCredentialsArrayOutputWithContext(ctx context.Context) DockerCredentialsArrayOutput {
	return o
}

func (o DockerCredentialsArrayOutput) Index(i pulumi.IntInput) DockerCredentialsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DockerCredentials {
		return vs[0].([]*DockerCredentials)[vs[1].(int)]
	}).(DockerCredentialsOutput)
}

type DockerCredentialsMapOutput struct{ *pulumi.OutputState }

func (DockerCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DockerCredentials)(nil)).Elem()
}

func (o DockerCredentialsMapOutput) ToDockerCredentialsMapOutput() DockerCredentialsMapOutput {
	return o
}

func (o DockerCredentialsMapOutput) ToDockerCredentialsMapOutputWithContext(ctx context.Context) DockerCredentialsMapOutput {
	return o
}

func (o DockerCredentialsMapOutput) MapIndex(k pulumi.StringInput) DockerCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DockerCredentials {
		return vs[0].(map[string]*DockerCredentials)[vs[1].(string)]
	}).(DockerCredentialsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DockerCredentialsInput)(nil)).Elem(), &DockerCredentials{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerCredentialsArrayInput)(nil)).Elem(), DockerCredentialsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerCredentialsMapInput)(nil)).Elem(), DockerCredentialsMap{})
	pulumi.RegisterOutputType(DockerCredentialsOutput{})
	pulumi.RegisterOutputType(DockerCredentialsArrayOutput{})
	pulumi.RegisterOutputType(DockerCredentialsMapOutput{})
}
