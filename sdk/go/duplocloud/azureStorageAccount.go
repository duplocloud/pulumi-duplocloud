// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureStorageAccount` manages an Azure storage account in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAzureStorageAccount(ctx, "myapp", &duplocloud.AzureStorageAccountArgs{
//				TenantId: myapp.TenantId,
//				Name:     pulumi.String("storagacctest"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing Azure storage account
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the Azure storage account
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/azureStorageAccount:AzureStorageAccount mystorageaccount *TENANT_ID*/*SHORT_NAME*
// ```
type AzureStorageAccount struct {
	pulumi.CustomResourceState

	// Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The GUID of the tenant that the storage account will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Whether or not to wait until azure storage account to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrOutput `pulumi:"waitUntilReady"`
}

// NewAzureStorageAccount registers a new resource with the given unique name, arguments, and options.
func NewAzureStorageAccount(ctx *pulumi.Context,
	name string, args *AzureStorageAccountArgs, opts ...pulumi.ResourceOption) (*AzureStorageAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureStorageAccount
	err := ctx.RegisterResource("duplocloud:index/azureStorageAccount:AzureStorageAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureStorageAccount gets an existing AzureStorageAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureStorageAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureStorageAccountState, opts ...pulumi.ResourceOption) (*AzureStorageAccount, error) {
	var resource AzureStorageAccount
	err := ctx.ReadResource("duplocloud:index/azureStorageAccount:AzureStorageAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureStorageAccount resources.
type azureStorageAccountState struct {
	// Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
	Name *string `pulumi:"name"`
	// The GUID of the tenant that the storage account will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Whether or not to wait until azure storage account to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

type AzureStorageAccountState struct {
	// Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
	Name pulumi.StringPtrInput
	// The GUID of the tenant that the storage account will be created in.
	TenantId pulumi.StringPtrInput
	// Whether or not to wait until azure storage account to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzureStorageAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureStorageAccountState)(nil)).Elem()
}

type azureStorageAccountArgs struct {
	// Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
	Name *string `pulumi:"name"`
	// The GUID of the tenant that the storage account will be created in.
	TenantId string `pulumi:"tenantId"`
	// Whether or not to wait until azure storage account to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

// The set of arguments for constructing a AzureStorageAccount resource.
type AzureStorageAccountArgs struct {
	// Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
	Name pulumi.StringPtrInput
	// The GUID of the tenant that the storage account will be created in.
	TenantId pulumi.StringInput
	// Whether or not to wait until azure storage account to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzureStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureStorageAccountArgs)(nil)).Elem()
}

type AzureStorageAccountInput interface {
	pulumi.Input

	ToAzureStorageAccountOutput() AzureStorageAccountOutput
	ToAzureStorageAccountOutputWithContext(ctx context.Context) AzureStorageAccountOutput
}

func (*AzureStorageAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStorageAccount)(nil)).Elem()
}

func (i *AzureStorageAccount) ToAzureStorageAccountOutput() AzureStorageAccountOutput {
	return i.ToAzureStorageAccountOutputWithContext(context.Background())
}

func (i *AzureStorageAccount) ToAzureStorageAccountOutputWithContext(ctx context.Context) AzureStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStorageAccountOutput)
}

// AzureStorageAccountArrayInput is an input type that accepts AzureStorageAccountArray and AzureStorageAccountArrayOutput values.
// You can construct a concrete instance of `AzureStorageAccountArrayInput` via:
//
//	AzureStorageAccountArray{ AzureStorageAccountArgs{...} }
type AzureStorageAccountArrayInput interface {
	pulumi.Input

	ToAzureStorageAccountArrayOutput() AzureStorageAccountArrayOutput
	ToAzureStorageAccountArrayOutputWithContext(context.Context) AzureStorageAccountArrayOutput
}

type AzureStorageAccountArray []AzureStorageAccountInput

func (AzureStorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureStorageAccount)(nil)).Elem()
}

func (i AzureStorageAccountArray) ToAzureStorageAccountArrayOutput() AzureStorageAccountArrayOutput {
	return i.ToAzureStorageAccountArrayOutputWithContext(context.Background())
}

func (i AzureStorageAccountArray) ToAzureStorageAccountArrayOutputWithContext(ctx context.Context) AzureStorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStorageAccountArrayOutput)
}

// AzureStorageAccountMapInput is an input type that accepts AzureStorageAccountMap and AzureStorageAccountMapOutput values.
// You can construct a concrete instance of `AzureStorageAccountMapInput` via:
//
//	AzureStorageAccountMap{ "key": AzureStorageAccountArgs{...} }
type AzureStorageAccountMapInput interface {
	pulumi.Input

	ToAzureStorageAccountMapOutput() AzureStorageAccountMapOutput
	ToAzureStorageAccountMapOutputWithContext(context.Context) AzureStorageAccountMapOutput
}

type AzureStorageAccountMap map[string]AzureStorageAccountInput

func (AzureStorageAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureStorageAccount)(nil)).Elem()
}

func (i AzureStorageAccountMap) ToAzureStorageAccountMapOutput() AzureStorageAccountMapOutput {
	return i.ToAzureStorageAccountMapOutputWithContext(context.Background())
}

func (i AzureStorageAccountMap) ToAzureStorageAccountMapOutputWithContext(ctx context.Context) AzureStorageAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStorageAccountMapOutput)
}

type AzureStorageAccountOutput struct{ *pulumi.OutputState }

func (AzureStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStorageAccount)(nil)).Elem()
}

func (o AzureStorageAccountOutput) ToAzureStorageAccountOutput() AzureStorageAccountOutput {
	return o
}

func (o AzureStorageAccountOutput) ToAzureStorageAccountOutputWithContext(ctx context.Context) AzureStorageAccountOutput {
	return o
}

// Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
func (o AzureStorageAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureStorageAccount) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The GUID of the tenant that the storage account will be created in.
func (o AzureStorageAccountOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureStorageAccount) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Whether or not to wait until azure storage account to be ready, after creation. Defaults to `true`.
func (o AzureStorageAccountOutput) WaitUntilReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureStorageAccount) pulumi.BoolPtrOutput { return v.WaitUntilReady }).(pulumi.BoolPtrOutput)
}

type AzureStorageAccountArrayOutput struct{ *pulumi.OutputState }

func (AzureStorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureStorageAccount)(nil)).Elem()
}

func (o AzureStorageAccountArrayOutput) ToAzureStorageAccountArrayOutput() AzureStorageAccountArrayOutput {
	return o
}

func (o AzureStorageAccountArrayOutput) ToAzureStorageAccountArrayOutputWithContext(ctx context.Context) AzureStorageAccountArrayOutput {
	return o
}

func (o AzureStorageAccountArrayOutput) Index(i pulumi.IntInput) AzureStorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureStorageAccount {
		return vs[0].([]*AzureStorageAccount)[vs[1].(int)]
	}).(AzureStorageAccountOutput)
}

type AzureStorageAccountMapOutput struct{ *pulumi.OutputState }

func (AzureStorageAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureStorageAccount)(nil)).Elem()
}

func (o AzureStorageAccountMapOutput) ToAzureStorageAccountMapOutput() AzureStorageAccountMapOutput {
	return o
}

func (o AzureStorageAccountMapOutput) ToAzureStorageAccountMapOutputWithContext(ctx context.Context) AzureStorageAccountMapOutput {
	return o
}

func (o AzureStorageAccountMapOutput) MapIndex(k pulumi.StringInput) AzureStorageAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureStorageAccount {
		return vs[0].(map[string]*AzureStorageAccount)[vs[1].(string)]
	}).(AzureStorageAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureStorageAccountInput)(nil)).Elem(), &AzureStorageAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureStorageAccountArrayInput)(nil)).Elem(), AzureStorageAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureStorageAccountMapInput)(nil)).Elem(), AzureStorageAccountMap{})
	pulumi.RegisterOutputType(AzureStorageAccountOutput{})
	pulumi.RegisterOutputType(AzureStorageAccountArrayOutput{})
	pulumi.RegisterOutputType(AzureStorageAccountMapOutput{})
}
