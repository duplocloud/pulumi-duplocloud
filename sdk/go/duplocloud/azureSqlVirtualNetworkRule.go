// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureSqlVirtualNetworkRule` allows you to add, update, or remove an Azure SQL server to a subnet of a virtual network.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAzureSqlVirtualNetworkRule(ctx, "sql_vnet_rule", &duplocloud.AzureSqlVirtualNetworkRuleArgs{
//				TenantId:                         myapp.TenantId,
//				Name:                             pulumi.String("test-rule"),
//				ServerName:                       pulumi.String("test-server"),
//				SubnetId:                         pulumi.String("/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default"),
//				IgnoreMissingVnetServiceEndpoint: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing Azure SQL server Vnet Rule
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SERVER_NAME* is the name of the Azure Sql server
//
//   - *RULE_NAME* is the name of the Azure Sql server Vnet Rule
//
// ```sh
// $ pulumi import duplocloud:index/azureSqlVirtualNetworkRule:AzureSqlVirtualNetworkRule sql_vnet_rule *TENANT_ID*/*SERVER_NAME*/*RULE_NAME*
// ```
type AzureSqlVirtualNetworkRule struct {
	pulumi.CustomResourceState

	// The ID of the SQL virtual network rule.
	AzureId pulumi.StringOutput `pulumi:"azureId"`
	// Create the virtual network rule before the subnet has the virtual network service endpoint enabled.
	IgnoreMissingVnetServiceEndpoint pulumi.BoolOutput `pulumi:"ignoreMissingVnetServiceEndpoint"`
	// The name of the SQL virtual network rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the SQL Server to which this SQL virtual network rule will be applied to.
	ServerName pulumi.StringOutput `pulumi:"serverName"`
	// The ID of the subnet that the SQL server will be connected to.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The GUID of the tenant that the sql virtual network rule will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrOutput `pulumi:"waitUntilReady"`
}

// NewAzureSqlVirtualNetworkRule registers a new resource with the given unique name, arguments, and options.
func NewAzureSqlVirtualNetworkRule(ctx *pulumi.Context,
	name string, args *AzureSqlVirtualNetworkRuleArgs, opts ...pulumi.ResourceOption) (*AzureSqlVirtualNetworkRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureSqlVirtualNetworkRule
	err := ctx.RegisterResource("duplocloud:index/azureSqlVirtualNetworkRule:AzureSqlVirtualNetworkRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureSqlVirtualNetworkRule gets an existing AzureSqlVirtualNetworkRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureSqlVirtualNetworkRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureSqlVirtualNetworkRuleState, opts ...pulumi.ResourceOption) (*AzureSqlVirtualNetworkRule, error) {
	var resource AzureSqlVirtualNetworkRule
	err := ctx.ReadResource("duplocloud:index/azureSqlVirtualNetworkRule:AzureSqlVirtualNetworkRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureSqlVirtualNetworkRule resources.
type azureSqlVirtualNetworkRuleState struct {
	// The ID of the SQL virtual network rule.
	AzureId *string `pulumi:"azureId"`
	// Create the virtual network rule before the subnet has the virtual network service endpoint enabled.
	IgnoreMissingVnetServiceEndpoint *bool `pulumi:"ignoreMissingVnetServiceEndpoint"`
	// The name of the SQL virtual network rule.
	Name *string `pulumi:"name"`
	// The name of the SQL Server to which this SQL virtual network rule will be applied to.
	ServerName *string `pulumi:"serverName"`
	// The ID of the subnet that the SQL server will be connected to.
	SubnetId *string `pulumi:"subnetId"`
	// The GUID of the tenant that the sql virtual network rule will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

type AzureSqlVirtualNetworkRuleState struct {
	// The ID of the SQL virtual network rule.
	AzureId pulumi.StringPtrInput
	// Create the virtual network rule before the subnet has the virtual network service endpoint enabled.
	IgnoreMissingVnetServiceEndpoint pulumi.BoolPtrInput
	// The name of the SQL virtual network rule.
	Name pulumi.StringPtrInput
	// The name of the SQL Server to which this SQL virtual network rule will be applied to.
	ServerName pulumi.StringPtrInput
	// The ID of the subnet that the SQL server will be connected to.
	SubnetId pulumi.StringPtrInput
	// The GUID of the tenant that the sql virtual network rule will be created in.
	TenantId pulumi.StringPtrInput
	// Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzureSqlVirtualNetworkRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureSqlVirtualNetworkRuleState)(nil)).Elem()
}

type azureSqlVirtualNetworkRuleArgs struct {
	// Create the virtual network rule before the subnet has the virtual network service endpoint enabled.
	IgnoreMissingVnetServiceEndpoint *bool `pulumi:"ignoreMissingVnetServiceEndpoint"`
	// The name of the SQL virtual network rule.
	Name *string `pulumi:"name"`
	// The name of the SQL Server to which this SQL virtual network rule will be applied to.
	ServerName string `pulumi:"serverName"`
	// The ID of the subnet that the SQL server will be connected to.
	SubnetId string `pulumi:"subnetId"`
	// The GUID of the tenant that the sql virtual network rule will be created in.
	TenantId string `pulumi:"tenantId"`
	// Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

// The set of arguments for constructing a AzureSqlVirtualNetworkRule resource.
type AzureSqlVirtualNetworkRuleArgs struct {
	// Create the virtual network rule before the subnet has the virtual network service endpoint enabled.
	IgnoreMissingVnetServiceEndpoint pulumi.BoolPtrInput
	// The name of the SQL virtual network rule.
	Name pulumi.StringPtrInput
	// The name of the SQL Server to which this SQL virtual network rule will be applied to.
	ServerName pulumi.StringInput
	// The ID of the subnet that the SQL server will be connected to.
	SubnetId pulumi.StringInput
	// The GUID of the tenant that the sql virtual network rule will be created in.
	TenantId pulumi.StringInput
	// Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzureSqlVirtualNetworkRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureSqlVirtualNetworkRuleArgs)(nil)).Elem()
}

type AzureSqlVirtualNetworkRuleInput interface {
	pulumi.Input

	ToAzureSqlVirtualNetworkRuleOutput() AzureSqlVirtualNetworkRuleOutput
	ToAzureSqlVirtualNetworkRuleOutputWithContext(ctx context.Context) AzureSqlVirtualNetworkRuleOutput
}

func (*AzureSqlVirtualNetworkRule) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSqlVirtualNetworkRule)(nil)).Elem()
}

func (i *AzureSqlVirtualNetworkRule) ToAzureSqlVirtualNetworkRuleOutput() AzureSqlVirtualNetworkRuleOutput {
	return i.ToAzureSqlVirtualNetworkRuleOutputWithContext(context.Background())
}

func (i *AzureSqlVirtualNetworkRule) ToAzureSqlVirtualNetworkRuleOutputWithContext(ctx context.Context) AzureSqlVirtualNetworkRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlVirtualNetworkRuleOutput)
}

// AzureSqlVirtualNetworkRuleArrayInput is an input type that accepts AzureSqlVirtualNetworkRuleArray and AzureSqlVirtualNetworkRuleArrayOutput values.
// You can construct a concrete instance of `AzureSqlVirtualNetworkRuleArrayInput` via:
//
//	AzureSqlVirtualNetworkRuleArray{ AzureSqlVirtualNetworkRuleArgs{...} }
type AzureSqlVirtualNetworkRuleArrayInput interface {
	pulumi.Input

	ToAzureSqlVirtualNetworkRuleArrayOutput() AzureSqlVirtualNetworkRuleArrayOutput
	ToAzureSqlVirtualNetworkRuleArrayOutputWithContext(context.Context) AzureSqlVirtualNetworkRuleArrayOutput
}

type AzureSqlVirtualNetworkRuleArray []AzureSqlVirtualNetworkRuleInput

func (AzureSqlVirtualNetworkRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureSqlVirtualNetworkRule)(nil)).Elem()
}

func (i AzureSqlVirtualNetworkRuleArray) ToAzureSqlVirtualNetworkRuleArrayOutput() AzureSqlVirtualNetworkRuleArrayOutput {
	return i.ToAzureSqlVirtualNetworkRuleArrayOutputWithContext(context.Background())
}

func (i AzureSqlVirtualNetworkRuleArray) ToAzureSqlVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) AzureSqlVirtualNetworkRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlVirtualNetworkRuleArrayOutput)
}

// AzureSqlVirtualNetworkRuleMapInput is an input type that accepts AzureSqlVirtualNetworkRuleMap and AzureSqlVirtualNetworkRuleMapOutput values.
// You can construct a concrete instance of `AzureSqlVirtualNetworkRuleMapInput` via:
//
//	AzureSqlVirtualNetworkRuleMap{ "key": AzureSqlVirtualNetworkRuleArgs{...} }
type AzureSqlVirtualNetworkRuleMapInput interface {
	pulumi.Input

	ToAzureSqlVirtualNetworkRuleMapOutput() AzureSqlVirtualNetworkRuleMapOutput
	ToAzureSqlVirtualNetworkRuleMapOutputWithContext(context.Context) AzureSqlVirtualNetworkRuleMapOutput
}

type AzureSqlVirtualNetworkRuleMap map[string]AzureSqlVirtualNetworkRuleInput

func (AzureSqlVirtualNetworkRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureSqlVirtualNetworkRule)(nil)).Elem()
}

func (i AzureSqlVirtualNetworkRuleMap) ToAzureSqlVirtualNetworkRuleMapOutput() AzureSqlVirtualNetworkRuleMapOutput {
	return i.ToAzureSqlVirtualNetworkRuleMapOutputWithContext(context.Background())
}

func (i AzureSqlVirtualNetworkRuleMap) ToAzureSqlVirtualNetworkRuleMapOutputWithContext(ctx context.Context) AzureSqlVirtualNetworkRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlVirtualNetworkRuleMapOutput)
}

type AzureSqlVirtualNetworkRuleOutput struct{ *pulumi.OutputState }

func (AzureSqlVirtualNetworkRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSqlVirtualNetworkRule)(nil)).Elem()
}

func (o AzureSqlVirtualNetworkRuleOutput) ToAzureSqlVirtualNetworkRuleOutput() AzureSqlVirtualNetworkRuleOutput {
	return o
}

func (o AzureSqlVirtualNetworkRuleOutput) ToAzureSqlVirtualNetworkRuleOutputWithContext(ctx context.Context) AzureSqlVirtualNetworkRuleOutput {
	return o
}

// The ID of the SQL virtual network rule.
func (o AzureSqlVirtualNetworkRuleOutput) AzureId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlVirtualNetworkRule) pulumi.StringOutput { return v.AzureId }).(pulumi.StringOutput)
}

// Create the virtual network rule before the subnet has the virtual network service endpoint enabled.
func (o AzureSqlVirtualNetworkRuleOutput) IgnoreMissingVnetServiceEndpoint() pulumi.BoolOutput {
	return o.ApplyT(func(v *AzureSqlVirtualNetworkRule) pulumi.BoolOutput { return v.IgnoreMissingVnetServiceEndpoint }).(pulumi.BoolOutput)
}

// The name of the SQL virtual network rule.
func (o AzureSqlVirtualNetworkRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlVirtualNetworkRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the SQL Server to which this SQL virtual network rule will be applied to.
func (o AzureSqlVirtualNetworkRuleOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlVirtualNetworkRule) pulumi.StringOutput { return v.ServerName }).(pulumi.StringOutput)
}

// The ID of the subnet that the SQL server will be connected to.
func (o AzureSqlVirtualNetworkRuleOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlVirtualNetworkRule) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The GUID of the tenant that the sql virtual network rule will be created in.
func (o AzureSqlVirtualNetworkRuleOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureSqlVirtualNetworkRule) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
func (o AzureSqlVirtualNetworkRuleOutput) WaitUntilReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureSqlVirtualNetworkRule) pulumi.BoolPtrOutput { return v.WaitUntilReady }).(pulumi.BoolPtrOutput)
}

type AzureSqlVirtualNetworkRuleArrayOutput struct{ *pulumi.OutputState }

func (AzureSqlVirtualNetworkRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureSqlVirtualNetworkRule)(nil)).Elem()
}

func (o AzureSqlVirtualNetworkRuleArrayOutput) ToAzureSqlVirtualNetworkRuleArrayOutput() AzureSqlVirtualNetworkRuleArrayOutput {
	return o
}

func (o AzureSqlVirtualNetworkRuleArrayOutput) ToAzureSqlVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) AzureSqlVirtualNetworkRuleArrayOutput {
	return o
}

func (o AzureSqlVirtualNetworkRuleArrayOutput) Index(i pulumi.IntInput) AzureSqlVirtualNetworkRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureSqlVirtualNetworkRule {
		return vs[0].([]*AzureSqlVirtualNetworkRule)[vs[1].(int)]
	}).(AzureSqlVirtualNetworkRuleOutput)
}

type AzureSqlVirtualNetworkRuleMapOutput struct{ *pulumi.OutputState }

func (AzureSqlVirtualNetworkRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureSqlVirtualNetworkRule)(nil)).Elem()
}

func (o AzureSqlVirtualNetworkRuleMapOutput) ToAzureSqlVirtualNetworkRuleMapOutput() AzureSqlVirtualNetworkRuleMapOutput {
	return o
}

func (o AzureSqlVirtualNetworkRuleMapOutput) ToAzureSqlVirtualNetworkRuleMapOutputWithContext(ctx context.Context) AzureSqlVirtualNetworkRuleMapOutput {
	return o
}

func (o AzureSqlVirtualNetworkRuleMapOutput) MapIndex(k pulumi.StringInput) AzureSqlVirtualNetworkRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureSqlVirtualNetworkRule {
		return vs[0].(map[string]*AzureSqlVirtualNetworkRule)[vs[1].(string)]
	}).(AzureSqlVirtualNetworkRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureSqlVirtualNetworkRuleInput)(nil)).Elem(), &AzureSqlVirtualNetworkRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureSqlVirtualNetworkRuleArrayInput)(nil)).Elem(), AzureSqlVirtualNetworkRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureSqlVirtualNetworkRuleMapInput)(nil)).Elem(), AzureSqlVirtualNetworkRuleMap{})
	pulumi.RegisterOutputType(AzureSqlVirtualNetworkRuleOutput{})
	pulumi.RegisterOutputType(AzureSqlVirtualNetworkRuleArrayOutput{})
	pulumi.RegisterOutputType(AzureSqlVirtualNetworkRuleMapOutput{})
}
