// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewK8sCronJob(ctx, "myapp", &duplocloud.K8sCronJobArgs{
//				TenantId: myapp.TenantId,
//				Metadata: &duplocloud.K8sCronJobMetadataArgs{
//					Name: pulumi.String("jobname"),
//				},
//				Specs: duplocloud.K8sCronJobSpecArray{
//					&duplocloud.K8sCronJobSpecArgs{
//						JobTemplate: &duplocloud.K8sCronJobSpecJobTemplateArgs{
//							Spec: &duplocloud.K8sCronJobSpecJobTemplateSpecArgs{
//								Template: &duplocloud.K8sCronJobSpecJobTemplateSpecTemplateArgs{
//									Spec: &duplocloud.K8sCronJobSpecJobTemplateSpecTemplateSpecArgs{
//										Containers: duplocloud.K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArray{
//											&duplocloud.K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArgs{
//												Name:  pulumi.String("containername"),
//												Image: pulumi.String("nginx:latest"),
//											},
//										},
//									},
//								},
//							},
//						},
//						Schedule: pulumi.String("*/1 * * * *"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing kubernetes job
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *NAME* is the k8s job name
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/k8sCronJob:K8sCronJob myapp v3/subscriptions/*TENANT_ID*/k8s/cronjob/*NAME*
// ```
type K8sCronJob struct {
	pulumi.CustomResourceState

	// Defaults to `false`.
	IsAnyHostAllowed pulumi.BoolPtrOutput `pulumi:"isAnyHostAllowed"`
	// Standard cronjob's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata K8sCronJobMetadataOutput `pulumi:"metadata"`
	// Spec of the cron job owned by the cluster
	Specs K8sCronJobSpecArrayOutput `pulumi:"specs"`
	// The GUID of the tenant that the job will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewK8sCronJob registers a new resource with the given unique name, arguments, and options.
func NewK8sCronJob(ctx *pulumi.Context,
	name string, args *K8sCronJobArgs, opts ...pulumi.ResourceOption) (*K8sCronJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Metadata == nil {
		return nil, errors.New("invalid value for required argument 'Metadata'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource K8sCronJob
	err := ctx.RegisterResource("duplocloud:index/k8sCronJob:K8sCronJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetK8sCronJob gets an existing K8sCronJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetK8sCronJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *K8sCronJobState, opts ...pulumi.ResourceOption) (*K8sCronJob, error) {
	var resource K8sCronJob
	err := ctx.ReadResource("duplocloud:index/k8sCronJob:K8sCronJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering K8sCronJob resources.
type k8sCronJobState struct {
	// Defaults to `false`.
	IsAnyHostAllowed *bool `pulumi:"isAnyHostAllowed"`
	// Standard cronjob's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *K8sCronJobMetadata `pulumi:"metadata"`
	// Spec of the cron job owned by the cluster
	Specs []K8sCronJobSpec `pulumi:"specs"`
	// The GUID of the tenant that the job will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type K8sCronJobState struct {
	// Defaults to `false`.
	IsAnyHostAllowed pulumi.BoolPtrInput
	// Standard cronjob's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata K8sCronJobMetadataPtrInput
	// Spec of the cron job owned by the cluster
	Specs K8sCronJobSpecArrayInput
	// The GUID of the tenant that the job will be created in.
	TenantId pulumi.StringPtrInput
}

func (K8sCronJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sCronJobState)(nil)).Elem()
}

type k8sCronJobArgs struct {
	// Defaults to `false`.
	IsAnyHostAllowed *bool `pulumi:"isAnyHostAllowed"`
	// Standard cronjob's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata K8sCronJobMetadata `pulumi:"metadata"`
	// Spec of the cron job owned by the cluster
	Specs []K8sCronJobSpec `pulumi:"specs"`
	// The GUID of the tenant that the job will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a K8sCronJob resource.
type K8sCronJobArgs struct {
	// Defaults to `false`.
	IsAnyHostAllowed pulumi.BoolPtrInput
	// Standard cronjob's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata K8sCronJobMetadataInput
	// Spec of the cron job owned by the cluster
	Specs K8sCronJobSpecArrayInput
	// The GUID of the tenant that the job will be created in.
	TenantId pulumi.StringInput
}

func (K8sCronJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sCronJobArgs)(nil)).Elem()
}

type K8sCronJobInput interface {
	pulumi.Input

	ToK8sCronJobOutput() K8sCronJobOutput
	ToK8sCronJobOutputWithContext(ctx context.Context) K8sCronJobOutput
}

func (*K8sCronJob) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sCronJob)(nil)).Elem()
}

func (i *K8sCronJob) ToK8sCronJobOutput() K8sCronJobOutput {
	return i.ToK8sCronJobOutputWithContext(context.Background())
}

func (i *K8sCronJob) ToK8sCronJobOutputWithContext(ctx context.Context) K8sCronJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sCronJobOutput)
}

// K8sCronJobArrayInput is an input type that accepts K8sCronJobArray and K8sCronJobArrayOutput values.
// You can construct a concrete instance of `K8sCronJobArrayInput` via:
//
//	K8sCronJobArray{ K8sCronJobArgs{...} }
type K8sCronJobArrayInput interface {
	pulumi.Input

	ToK8sCronJobArrayOutput() K8sCronJobArrayOutput
	ToK8sCronJobArrayOutputWithContext(context.Context) K8sCronJobArrayOutput
}

type K8sCronJobArray []K8sCronJobInput

func (K8sCronJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sCronJob)(nil)).Elem()
}

func (i K8sCronJobArray) ToK8sCronJobArrayOutput() K8sCronJobArrayOutput {
	return i.ToK8sCronJobArrayOutputWithContext(context.Background())
}

func (i K8sCronJobArray) ToK8sCronJobArrayOutputWithContext(ctx context.Context) K8sCronJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sCronJobArrayOutput)
}

// K8sCronJobMapInput is an input type that accepts K8sCronJobMap and K8sCronJobMapOutput values.
// You can construct a concrete instance of `K8sCronJobMapInput` via:
//
//	K8sCronJobMap{ "key": K8sCronJobArgs{...} }
type K8sCronJobMapInput interface {
	pulumi.Input

	ToK8sCronJobMapOutput() K8sCronJobMapOutput
	ToK8sCronJobMapOutputWithContext(context.Context) K8sCronJobMapOutput
}

type K8sCronJobMap map[string]K8sCronJobInput

func (K8sCronJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sCronJob)(nil)).Elem()
}

func (i K8sCronJobMap) ToK8sCronJobMapOutput() K8sCronJobMapOutput {
	return i.ToK8sCronJobMapOutputWithContext(context.Background())
}

func (i K8sCronJobMap) ToK8sCronJobMapOutputWithContext(ctx context.Context) K8sCronJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sCronJobMapOutput)
}

type K8sCronJobOutput struct{ *pulumi.OutputState }

func (K8sCronJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sCronJob)(nil)).Elem()
}

func (o K8sCronJobOutput) ToK8sCronJobOutput() K8sCronJobOutput {
	return o
}

func (o K8sCronJobOutput) ToK8sCronJobOutputWithContext(ctx context.Context) K8sCronJobOutput {
	return o
}

// Defaults to `false`.
func (o K8sCronJobOutput) IsAnyHostAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sCronJob) pulumi.BoolPtrOutput { return v.IsAnyHostAllowed }).(pulumi.BoolPtrOutput)
}

// Standard cronjob's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o K8sCronJobOutput) Metadata() K8sCronJobMetadataOutput {
	return o.ApplyT(func(v *K8sCronJob) K8sCronJobMetadataOutput { return v.Metadata }).(K8sCronJobMetadataOutput)
}

// Spec of the cron job owned by the cluster
func (o K8sCronJobOutput) Specs() K8sCronJobSpecArrayOutput {
	return o.ApplyT(func(v *K8sCronJob) K8sCronJobSpecArrayOutput { return v.Specs }).(K8sCronJobSpecArrayOutput)
}

// The GUID of the tenant that the job will be created in.
func (o K8sCronJobOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *K8sCronJob) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type K8sCronJobArrayOutput struct{ *pulumi.OutputState }

func (K8sCronJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sCronJob)(nil)).Elem()
}

func (o K8sCronJobArrayOutput) ToK8sCronJobArrayOutput() K8sCronJobArrayOutput {
	return o
}

func (o K8sCronJobArrayOutput) ToK8sCronJobArrayOutputWithContext(ctx context.Context) K8sCronJobArrayOutput {
	return o
}

func (o K8sCronJobArrayOutput) Index(i pulumi.IntInput) K8sCronJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *K8sCronJob {
		return vs[0].([]*K8sCronJob)[vs[1].(int)]
	}).(K8sCronJobOutput)
}

type K8sCronJobMapOutput struct{ *pulumi.OutputState }

func (K8sCronJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sCronJob)(nil)).Elem()
}

func (o K8sCronJobMapOutput) ToK8sCronJobMapOutput() K8sCronJobMapOutput {
	return o
}

func (o K8sCronJobMapOutput) ToK8sCronJobMapOutputWithContext(ctx context.Context) K8sCronJobMapOutput {
	return o
}

func (o K8sCronJobMapOutput) MapIndex(k pulumi.StringInput) K8sCronJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *K8sCronJob {
		return vs[0].(map[string]*K8sCronJob)[vs[1].(string)]
	}).(K8sCronJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*K8sCronJobInput)(nil)).Elem(), &K8sCronJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sCronJobArrayInput)(nil)).Elem(), K8sCronJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sCronJobMapInput)(nil)).Elem(), K8sCronJobMap{})
	pulumi.RegisterOutputType(K8sCronJobOutput{})
	pulumi.RegisterOutputType(K8sCronJobArrayOutput{})
	pulumi.RegisterOutputType(K8sCronJobMapOutput{})
}
