// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `duplocloudHelmRelease` manages helm release at duplocloud
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"replicaCount": 2,
//				"serviceAccount": map[string]interface{}{
//					"create": false,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = duplocloud.NewK8HelmRelease(ctx, "release", &duplocloud.K8HelmReleaseArgs{
//				TenantId:    myapp.TenantId,
//				Name:        pulumi.String("helm-release-name"),
//				Interval:    pulumi.String("05m00s"),
//				ReleaseName: pulumi.String("helm-release-1"),
//				Charts: duplocloud.K8HelmReleaseChartArray{
//					&duplocloud.K8HelmReleaseChartArgs{
//						Name:              pulumi.String("chart-name"),
//						Version:           pulumi.String("v1"),
//						ReconcileStrategy: pulumi.String("ChartVersion"),
//						SourceType:        pulumi.String("HelmRepository"),
//						SourceName:        pulumi.Any(repo.Name),
//					},
//				},
//				Values: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing helm release
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *NAME* is the helm release name
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/k8HelmRelease:K8HelmRelease release *TENANT_ID*/helm-release/*NAME*
// ```
type K8HelmRelease struct {
	pulumi.CustomResourceState

	// Helm chart
	Charts K8HelmReleaseChartArrayOutput `pulumi:"charts"`
	// Interval related to helm release Defaults to `5m0s`.
	Interval pulumi.StringPtrOutput `pulumi:"interval"`
	// The name of the helm chart
	Name pulumi.StringOutput `pulumi:"name"`
	// Provide release name to identify specific deployment of helm chart.
	ReleaseName pulumi.StringOutput `pulumi:"releaseName"`
	// The GUID of the tenant that the storage bucket will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Customise an helm chart.
	Values pulumi.StringPtrOutput `pulumi:"values"`
}

// NewK8HelmRelease registers a new resource with the given unique name, arguments, and options.
func NewK8HelmRelease(ctx *pulumi.Context,
	name string, args *K8HelmReleaseArgs, opts ...pulumi.ResourceOption) (*K8HelmRelease, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReleaseName == nil {
		return nil, errors.New("invalid value for required argument 'ReleaseName'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource K8HelmRelease
	err := ctx.RegisterResource("duplocloud:index/k8HelmRelease:K8HelmRelease", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetK8HelmRelease gets an existing K8HelmRelease resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetK8HelmRelease(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *K8HelmReleaseState, opts ...pulumi.ResourceOption) (*K8HelmRelease, error) {
	var resource K8HelmRelease
	err := ctx.ReadResource("duplocloud:index/k8HelmRelease:K8HelmRelease", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering K8HelmRelease resources.
type k8helmReleaseState struct {
	// Helm chart
	Charts []K8HelmReleaseChart `pulumi:"charts"`
	// Interval related to helm release Defaults to `5m0s`.
	Interval *string `pulumi:"interval"`
	// The name of the helm chart
	Name *string `pulumi:"name"`
	// Provide release name to identify specific deployment of helm chart.
	ReleaseName *string `pulumi:"releaseName"`
	// The GUID of the tenant that the storage bucket will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Customise an helm chart.
	Values *string `pulumi:"values"`
}

type K8HelmReleaseState struct {
	// Helm chart
	Charts K8HelmReleaseChartArrayInput
	// Interval related to helm release Defaults to `5m0s`.
	Interval pulumi.StringPtrInput
	// The name of the helm chart
	Name pulumi.StringPtrInput
	// Provide release name to identify specific deployment of helm chart.
	ReleaseName pulumi.StringPtrInput
	// The GUID of the tenant that the storage bucket will be created in.
	TenantId pulumi.StringPtrInput
	// Customise an helm chart.
	Values pulumi.StringPtrInput
}

func (K8HelmReleaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*k8helmReleaseState)(nil)).Elem()
}

type k8helmReleaseArgs struct {
	// Helm chart
	Charts []K8HelmReleaseChart `pulumi:"charts"`
	// Interval related to helm release Defaults to `5m0s`.
	Interval *string `pulumi:"interval"`
	// The name of the helm chart
	Name *string `pulumi:"name"`
	// Provide release name to identify specific deployment of helm chart.
	ReleaseName string `pulumi:"releaseName"`
	// The GUID of the tenant that the storage bucket will be created in.
	TenantId string `pulumi:"tenantId"`
	// Customise an helm chart.
	Values *string `pulumi:"values"`
}

// The set of arguments for constructing a K8HelmRelease resource.
type K8HelmReleaseArgs struct {
	// Helm chart
	Charts K8HelmReleaseChartArrayInput
	// Interval related to helm release Defaults to `5m0s`.
	Interval pulumi.StringPtrInput
	// The name of the helm chart
	Name pulumi.StringPtrInput
	// Provide release name to identify specific deployment of helm chart.
	ReleaseName pulumi.StringInput
	// The GUID of the tenant that the storage bucket will be created in.
	TenantId pulumi.StringInput
	// Customise an helm chart.
	Values pulumi.StringPtrInput
}

func (K8HelmReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*k8helmReleaseArgs)(nil)).Elem()
}

type K8HelmReleaseInput interface {
	pulumi.Input

	ToK8HelmReleaseOutput() K8HelmReleaseOutput
	ToK8HelmReleaseOutputWithContext(ctx context.Context) K8HelmReleaseOutput
}

func (*K8HelmRelease) ElementType() reflect.Type {
	return reflect.TypeOf((**K8HelmRelease)(nil)).Elem()
}

func (i *K8HelmRelease) ToK8HelmReleaseOutput() K8HelmReleaseOutput {
	return i.ToK8HelmReleaseOutputWithContext(context.Background())
}

func (i *K8HelmRelease) ToK8HelmReleaseOutputWithContext(ctx context.Context) K8HelmReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8HelmReleaseOutput)
}

// K8HelmReleaseArrayInput is an input type that accepts K8HelmReleaseArray and K8HelmReleaseArrayOutput values.
// You can construct a concrete instance of `K8HelmReleaseArrayInput` via:
//
//	K8HelmReleaseArray{ K8HelmReleaseArgs{...} }
type K8HelmReleaseArrayInput interface {
	pulumi.Input

	ToK8HelmReleaseArrayOutput() K8HelmReleaseArrayOutput
	ToK8HelmReleaseArrayOutputWithContext(context.Context) K8HelmReleaseArrayOutput
}

type K8HelmReleaseArray []K8HelmReleaseInput

func (K8HelmReleaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8HelmRelease)(nil)).Elem()
}

func (i K8HelmReleaseArray) ToK8HelmReleaseArrayOutput() K8HelmReleaseArrayOutput {
	return i.ToK8HelmReleaseArrayOutputWithContext(context.Background())
}

func (i K8HelmReleaseArray) ToK8HelmReleaseArrayOutputWithContext(ctx context.Context) K8HelmReleaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8HelmReleaseArrayOutput)
}

// K8HelmReleaseMapInput is an input type that accepts K8HelmReleaseMap and K8HelmReleaseMapOutput values.
// You can construct a concrete instance of `K8HelmReleaseMapInput` via:
//
//	K8HelmReleaseMap{ "key": K8HelmReleaseArgs{...} }
type K8HelmReleaseMapInput interface {
	pulumi.Input

	ToK8HelmReleaseMapOutput() K8HelmReleaseMapOutput
	ToK8HelmReleaseMapOutputWithContext(context.Context) K8HelmReleaseMapOutput
}

type K8HelmReleaseMap map[string]K8HelmReleaseInput

func (K8HelmReleaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8HelmRelease)(nil)).Elem()
}

func (i K8HelmReleaseMap) ToK8HelmReleaseMapOutput() K8HelmReleaseMapOutput {
	return i.ToK8HelmReleaseMapOutputWithContext(context.Background())
}

func (i K8HelmReleaseMap) ToK8HelmReleaseMapOutputWithContext(ctx context.Context) K8HelmReleaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8HelmReleaseMapOutput)
}

type K8HelmReleaseOutput struct{ *pulumi.OutputState }

func (K8HelmReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8HelmRelease)(nil)).Elem()
}

func (o K8HelmReleaseOutput) ToK8HelmReleaseOutput() K8HelmReleaseOutput {
	return o
}

func (o K8HelmReleaseOutput) ToK8HelmReleaseOutputWithContext(ctx context.Context) K8HelmReleaseOutput {
	return o
}

// Helm chart
func (o K8HelmReleaseOutput) Charts() K8HelmReleaseChartArrayOutput {
	return o.ApplyT(func(v *K8HelmRelease) K8HelmReleaseChartArrayOutput { return v.Charts }).(K8HelmReleaseChartArrayOutput)
}

// Interval related to helm release Defaults to `5m0s`.
func (o K8HelmReleaseOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8HelmRelease) pulumi.StringPtrOutput { return v.Interval }).(pulumi.StringPtrOutput)
}

// The name of the helm chart
func (o K8HelmReleaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *K8HelmRelease) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provide release name to identify specific deployment of helm chart.
func (o K8HelmReleaseOutput) ReleaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *K8HelmRelease) pulumi.StringOutput { return v.ReleaseName }).(pulumi.StringOutput)
}

// The GUID of the tenant that the storage bucket will be created in.
func (o K8HelmReleaseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *K8HelmRelease) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Customise an helm chart.
func (o K8HelmReleaseOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8HelmRelease) pulumi.StringPtrOutput { return v.Values }).(pulumi.StringPtrOutput)
}

type K8HelmReleaseArrayOutput struct{ *pulumi.OutputState }

func (K8HelmReleaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8HelmRelease)(nil)).Elem()
}

func (o K8HelmReleaseArrayOutput) ToK8HelmReleaseArrayOutput() K8HelmReleaseArrayOutput {
	return o
}

func (o K8HelmReleaseArrayOutput) ToK8HelmReleaseArrayOutputWithContext(ctx context.Context) K8HelmReleaseArrayOutput {
	return o
}

func (o K8HelmReleaseArrayOutput) Index(i pulumi.IntInput) K8HelmReleaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *K8HelmRelease {
		return vs[0].([]*K8HelmRelease)[vs[1].(int)]
	}).(K8HelmReleaseOutput)
}

type K8HelmReleaseMapOutput struct{ *pulumi.OutputState }

func (K8HelmReleaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8HelmRelease)(nil)).Elem()
}

func (o K8HelmReleaseMapOutput) ToK8HelmReleaseMapOutput() K8HelmReleaseMapOutput {
	return o
}

func (o K8HelmReleaseMapOutput) ToK8HelmReleaseMapOutputWithContext(ctx context.Context) K8HelmReleaseMapOutput {
	return o
}

func (o K8HelmReleaseMapOutput) MapIndex(k pulumi.StringInput) K8HelmReleaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *K8HelmRelease {
		return vs[0].(map[string]*K8HelmRelease)[vs[1].(string)]
	}).(K8HelmReleaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*K8HelmReleaseInput)(nil)).Elem(), &K8HelmRelease{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8HelmReleaseArrayInput)(nil)).Elem(), K8HelmReleaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8HelmReleaseMapInput)(nil)).Elem(), K8HelmReleaseMap{})
	pulumi.RegisterOutputType(K8HelmReleaseOutput{})
	pulumi.RegisterOutputType(K8HelmReleaseArrayOutput{})
	pulumi.RegisterOutputType(K8HelmReleaseMapOutput{})
}
