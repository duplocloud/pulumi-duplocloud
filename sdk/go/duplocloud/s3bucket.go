// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Create a S3 bucket named staticAssets
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.
//			infra, err := duplocloud.NewInfrastructure(ctx, "infra", &duplocloud.InfrastructureArgs{
//				InfraName:       pulumi.String("prod"),
//				Cloud:           pulumi.Int(0),
//				Region:          pulumi.String("us-west-2"),
//				EnableK8Cluster: pulumi.Bool(false),
//				AddressPrefix:   pulumi.String("10.11.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.
//			tenant, err := duplocloud.NewTenant(ctx, "tenant", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("prod"),
//				PlanId:      infra.InfraName,
//			})
//			if err != nil {
//				return err
//			}
//			// Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the S3 bucket.
//			_, err = duplocloud.NewS3Bucket(ctx, "bucket", &duplocloud.S3BucketArgs{
//				TenantId:          tenant.TenantId,
//				Name:              pulumi.String("static_assets"),
//				AllowPublicAccess: pulumi.Bool(false),
//				EnableAccessLogs:  pulumi.Bool(true),
//				EnableVersioning:  pulumi.Bool(true),
//				ManagedPolicies: pulumi.StringArray{
//					pulumi.String("ssl"),
//				},
//				DefaultEncryption: &duplocloud.S3BucketDefaultEncryptionArgs{
//					Method: pulumi.String("Sse"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Provision an S3 bucket within the dev tenant
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Ensure the 'dev' tenant is already created before setting up the s3 bucket.
//			tenant, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("dev"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewS3Bucket(ctx, "bucket", &duplocloud.S3BucketArgs{
//				TenantId:          pulumi.String(tenant.Id),
//				Name:              pulumi.String("bucket"),
//				AllowPublicAccess: pulumi.Bool(false),
//				EnableAccessLogs:  pulumi.Bool(true),
//				EnableVersioning:  pulumi.Bool(true),
//				ManagedPolicies: pulumi.StringArray{
//					pulumi.String("ssl"),
//				},
//				DefaultEncryption: &duplocloud.S3BucketDefaultEncryptionArgs{
//					Method: pulumi.String("Sse"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create an S3 bucket in the dev tenant, with public access enabled
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Ensure the 'dev' tenant is already created before setting up the s3 bucket.
//			tenant, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("dev"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewS3Bucket(ctx, "bucket", &duplocloud.S3BucketArgs{
//				TenantId:          pulumi.String(tenant.Id),
//				Name:              pulumi.String("bucket"),
//				AllowPublicAccess: pulumi.Bool(true),
//				EnableAccessLogs:  pulumi.Bool(true),
//				EnableVersioning:  pulumi.Bool(true),
//				ManagedPolicies: pulumi.StringArray{
//					pulumi.String("ssl"),
//				},
//				DefaultEncryption: &duplocloud.S3BucketDefaultEncryptionArgs{
//					Method: pulumi.String("Sse"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create an S3 bucket in the dev tenant within DuploCloud, with versioning disabled
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tenant, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("dev"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewS3Bucket(ctx, "bucket", &duplocloud.S3BucketArgs{
//				TenantId:          pulumi.String(tenant.Id),
//				Name:              pulumi.String("bucket"),
//				AllowPublicAccess: pulumi.Bool(false),
//				EnableAccessLogs:  pulumi.Bool(true),
//				EnableVersioning:  pulumi.Bool(true),
//				ManagedPolicies: pulumi.StringArray{
//					pulumi.String("ssl"),
//				},
//				DefaultEncryption: &duplocloud.S3BucketDefaultEncryptionArgs{
//					Method: pulumi.String("Sse"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Setup an S3 bucket in the qa tenant, with access logs disabled
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tenant, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("qa"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewS3Bucket(ctx, "bucket", &duplocloud.S3BucketArgs{
//				TenantId:          pulumi.String(tenant.Id),
//				Name:              pulumi.String("bucket"),
//				AllowPublicAccess: pulumi.Bool(false),
//				EnableAccessLogs:  pulumi.Bool(false),
//				EnableVersioning:  pulumi.Bool(true),
//				ManagedPolicies: pulumi.StringArray{
//					pulumi.String("ssl"),
//				},
//				DefaultEncryption: &duplocloud.S3BucketDefaultEncryptionArgs{
//					Method: pulumi.String("Sse"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Configure an S3 bucket in the QA tenant, enabling public access while disabling versioning and access logs
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tenant, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("qa"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewS3Bucket(ctx, "bucket", &duplocloud.S3BucketArgs{
//				TenantId:          pulumi.String(tenant.Id),
//				Name:              pulumi.String("bucket"),
//				AllowPublicAccess: pulumi.Bool(true),
//				EnableAccessLogs:  pulumi.Bool(false),
//				EnableVersioning:  pulumi.Bool(false),
//				ManagedPolicies: pulumi.StringArray{
//					pulumi.String("ssl"),
//				},
//				DefaultEncryption: &duplocloud.S3BucketDefaultEncryptionArgs{
//					Method: pulumi.String("Sse"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create an S3 bucket named data in the preprod tenant, with tenant kms enabled
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tenant, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("preprod"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewS3Bucket(ctx, "bucket", &duplocloud.S3BucketArgs{
//				TenantId:          pulumi.String(tenant.Id),
//				Name:              pulumi.String("data"),
//				AllowPublicAccess: pulumi.Bool(false),
//				EnableAccessLogs:  pulumi.Bool(false),
//				EnableVersioning:  pulumi.Bool(true),
//				ManagedPolicies: pulumi.StringArray{
//					pulumi.String("ssl"),
//				},
//				DefaultEncryption: &duplocloud.S3BucketDefaultEncryptionArgs{
//					Method: pulumi.String("TenantKms"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Deploy an S3 bucket with hardened security settings
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tenant, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("test"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewS3Bucket(ctx, "mydata", &duplocloud.S3BucketArgs{
//				TenantId:          pulumi.String(tenant.Id),
//				Name:              pulumi.String("mydata"),
//				AllowPublicAccess: pulumi.Bool(false),
//				EnableAccessLogs:  pulumi.Bool(true),
//				EnableVersioning:  pulumi.Bool(true),
//				ManagedPolicies: pulumi.StringArray{
//					pulumi.String("ssl"),
//				},
//				DefaultEncryption: &duplocloud.S3BucketDefaultEncryptionArgs{
//					Method: pulumi.String("Sse"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Deploy a hardened S3 bucket suitable for public website hosting in test tenant
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tenant, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("test"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewS3Bucket(ctx, "www", &duplocloud.S3BucketArgs{
//				TenantId:          pulumi.String(tenant.Id),
//				Name:              pulumi.String("website"),
//				AllowPublicAccess: pulumi.Bool(true),
//				EnableAccessLogs:  pulumi.Bool(true),
//				EnableVersioning:  pulumi.Bool(true),
//				ManagedPolicies: pulumi.StringArray{
//					pulumi.String("ssl"),
//				},
//				DefaultEncryption: &duplocloud.S3BucketDefaultEncryptionArgs{
//					Method: pulumi.String("Sse"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Deploy an S3 bucket to us-east-1 region
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Ensure the 'test' tenant is already created before creating the s3 bucket.
//			tenant, err := duplocloud.LookupTenant(ctx, &duplocloud.LookupTenantArgs{
//				Name: pulumi.StringRef("test"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewS3Bucket(ctx, "static_assets", &duplocloud.S3BucketArgs{
//				TenantId:          pulumi.String(tenant.Id),
//				Name:              pulumi.String("static_assets"),
//				AllowPublicAccess: pulumi.Bool(false),
//				EnableAccessLogs:  pulumi.Bool(true),
//				EnableVersioning:  pulumi.Bool(true),
//				ManagedPolicies: pulumi.StringArray{
//					pulumi.String("ssl"),
//				},
//				DefaultEncryption: &duplocloud.S3BucketDefaultEncryptionArgs{
//					Method: pulumi.String("Sse"),
//				},
//				Region: pulumi.String("us-east-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing S3 bucket
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORTNAME* is the short name of the S3 bucket (without the duploservices prefix)
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/s3Bucket:S3Bucket mybucket *TENANT_ID*/*SHORTNAME*
// ```
type S3Bucket struct {
	pulumi.CustomResourceState

	// Whether or not to remove the public access block from the bucket.
	AllowPublicAccess pulumi.BoolOutput `pulumi:"allowPublicAccess"`
	// The ARN of the S3 bucket.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Default encryption settings for objects uploaded to the bucket.
	DefaultEncryption S3BucketDefaultEncryptionOutput `pulumi:"defaultEncryption"`
	// The domain name of the S3 bucket.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Whether or not to enable access logs. When enabled, Duplo will send access logs to a centralized S3 bucket per plan.
	EnableAccessLogs pulumi.BoolOutput `pulumi:"enableAccessLogs"`
	// Whether or not to enable versioning.
	EnableVersioning pulumi.BoolOutput `pulumi:"enableVersioning"`
	// The full name of the S3 bucket.
	Fullname pulumi.StringOutput `pulumi:"fullname"`
	// Duplo can manage your S3 bucket policy for you, based on simple list of policy keywords: - `"ssl"`: Require SSL / HTTPS
	// when accessing the bucket. - `"ignore"`: If this value is present, Duplo will not manage your bucket policy.
	ManagedPolicies pulumi.StringArrayOutput `pulumi:"managedPolicies"`
	// The short name of the S3 bucket. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
	// attribute.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region of the S3 bucket.
	Region pulumi.StringOutput    `pulumi:"region"`
	Tags   S3BucketTagArrayOutput `pulumi:"tags"`
	// The GUID of the tenant that the S3 bucket will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewS3Bucket registers a new resource with the given unique name, arguments, and options.
func NewS3Bucket(ctx *pulumi.Context,
	name string, args *S3BucketArgs, opts ...pulumi.ResourceOption) (*S3Bucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource S3Bucket
	err := ctx.RegisterResource("duplocloud:index/s3Bucket:S3Bucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3Bucket gets an existing S3Bucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3Bucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *S3BucketState, opts ...pulumi.ResourceOption) (*S3Bucket, error) {
	var resource S3Bucket
	err := ctx.ReadResource("duplocloud:index/s3Bucket:S3Bucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering S3Bucket resources.
type s3bucketState struct {
	// Whether or not to remove the public access block from the bucket.
	AllowPublicAccess *bool `pulumi:"allowPublicAccess"`
	// The ARN of the S3 bucket.
	Arn *string `pulumi:"arn"`
	// Default encryption settings for objects uploaded to the bucket.
	DefaultEncryption *S3BucketDefaultEncryption `pulumi:"defaultEncryption"`
	// The domain name of the S3 bucket.
	DomainName *string `pulumi:"domainName"`
	// Whether or not to enable access logs. When enabled, Duplo will send access logs to a centralized S3 bucket per plan.
	EnableAccessLogs *bool `pulumi:"enableAccessLogs"`
	// Whether or not to enable versioning.
	EnableVersioning *bool `pulumi:"enableVersioning"`
	// The full name of the S3 bucket.
	Fullname *string `pulumi:"fullname"`
	// Duplo can manage your S3 bucket policy for you, based on simple list of policy keywords: - `"ssl"`: Require SSL / HTTPS
	// when accessing the bucket. - `"ignore"`: If this value is present, Duplo will not manage your bucket policy.
	ManagedPolicies []string `pulumi:"managedPolicies"`
	// The short name of the S3 bucket. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
	// attribute.
	Name *string `pulumi:"name"`
	// The region of the S3 bucket.
	Region *string       `pulumi:"region"`
	Tags   []S3BucketTag `pulumi:"tags"`
	// The GUID of the tenant that the S3 bucket will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type S3BucketState struct {
	// Whether or not to remove the public access block from the bucket.
	AllowPublicAccess pulumi.BoolPtrInput
	// The ARN of the S3 bucket.
	Arn pulumi.StringPtrInput
	// Default encryption settings for objects uploaded to the bucket.
	DefaultEncryption S3BucketDefaultEncryptionPtrInput
	// The domain name of the S3 bucket.
	DomainName pulumi.StringPtrInput
	// Whether or not to enable access logs. When enabled, Duplo will send access logs to a centralized S3 bucket per plan.
	EnableAccessLogs pulumi.BoolPtrInput
	// Whether or not to enable versioning.
	EnableVersioning pulumi.BoolPtrInput
	// The full name of the S3 bucket.
	Fullname pulumi.StringPtrInput
	// Duplo can manage your S3 bucket policy for you, based on simple list of policy keywords: - `"ssl"`: Require SSL / HTTPS
	// when accessing the bucket. - `"ignore"`: If this value is present, Duplo will not manage your bucket policy.
	ManagedPolicies pulumi.StringArrayInput
	// The short name of the S3 bucket. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
	// attribute.
	Name pulumi.StringPtrInput
	// The region of the S3 bucket.
	Region pulumi.StringPtrInput
	Tags   S3BucketTagArrayInput
	// The GUID of the tenant that the S3 bucket will be created in.
	TenantId pulumi.StringPtrInput
}

func (S3BucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*s3bucketState)(nil)).Elem()
}

type s3bucketArgs struct {
	// Whether or not to remove the public access block from the bucket.
	AllowPublicAccess *bool `pulumi:"allowPublicAccess"`
	// Default encryption settings for objects uploaded to the bucket.
	DefaultEncryption *S3BucketDefaultEncryption `pulumi:"defaultEncryption"`
	// Whether or not to enable access logs. When enabled, Duplo will send access logs to a centralized S3 bucket per plan.
	EnableAccessLogs *bool `pulumi:"enableAccessLogs"`
	// Whether or not to enable versioning.
	EnableVersioning *bool `pulumi:"enableVersioning"`
	// Duplo can manage your S3 bucket policy for you, based on simple list of policy keywords: - `"ssl"`: Require SSL / HTTPS
	// when accessing the bucket. - `"ignore"`: If this value is present, Duplo will not manage your bucket policy.
	ManagedPolicies []string `pulumi:"managedPolicies"`
	// The short name of the S3 bucket. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
	// attribute.
	Name *string `pulumi:"name"`
	// The region of the S3 bucket.
	Region *string `pulumi:"region"`
	// The GUID of the tenant that the S3 bucket will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a S3Bucket resource.
type S3BucketArgs struct {
	// Whether or not to remove the public access block from the bucket.
	AllowPublicAccess pulumi.BoolPtrInput
	// Default encryption settings for objects uploaded to the bucket.
	DefaultEncryption S3BucketDefaultEncryptionPtrInput
	// Whether or not to enable access logs. When enabled, Duplo will send access logs to a centralized S3 bucket per plan.
	EnableAccessLogs pulumi.BoolPtrInput
	// Whether or not to enable versioning.
	EnableVersioning pulumi.BoolPtrInput
	// Duplo can manage your S3 bucket policy for you, based on simple list of policy keywords: - `"ssl"`: Require SSL / HTTPS
	// when accessing the bucket. - `"ignore"`: If this value is present, Duplo will not manage your bucket policy.
	ManagedPolicies pulumi.StringArrayInput
	// The short name of the S3 bucket. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
	// attribute.
	Name pulumi.StringPtrInput
	// The region of the S3 bucket.
	Region pulumi.StringPtrInput
	// The GUID of the tenant that the S3 bucket will be created in.
	TenantId pulumi.StringInput
}

func (S3BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3bucketArgs)(nil)).Elem()
}

type S3BucketInput interface {
	pulumi.Input

	ToS3BucketOutput() S3BucketOutput
	ToS3BucketOutputWithContext(ctx context.Context) S3BucketOutput
}

func (*S3Bucket) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Bucket)(nil)).Elem()
}

func (i *S3Bucket) ToS3BucketOutput() S3BucketOutput {
	return i.ToS3BucketOutputWithContext(context.Background())
}

func (i *S3Bucket) ToS3BucketOutputWithContext(ctx context.Context) S3BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketOutput)
}

// S3BucketArrayInput is an input type that accepts S3BucketArray and S3BucketArrayOutput values.
// You can construct a concrete instance of `S3BucketArrayInput` via:
//
//	S3BucketArray{ S3BucketArgs{...} }
type S3BucketArrayInput interface {
	pulumi.Input

	ToS3BucketArrayOutput() S3BucketArrayOutput
	ToS3BucketArrayOutputWithContext(context.Context) S3BucketArrayOutput
}

type S3BucketArray []S3BucketInput

func (S3BucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Bucket)(nil)).Elem()
}

func (i S3BucketArray) ToS3BucketArrayOutput() S3BucketArrayOutput {
	return i.ToS3BucketArrayOutputWithContext(context.Background())
}

func (i S3BucketArray) ToS3BucketArrayOutputWithContext(ctx context.Context) S3BucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketArrayOutput)
}

// S3BucketMapInput is an input type that accepts S3BucketMap and S3BucketMapOutput values.
// You can construct a concrete instance of `S3BucketMapInput` via:
//
//	S3BucketMap{ "key": S3BucketArgs{...} }
type S3BucketMapInput interface {
	pulumi.Input

	ToS3BucketMapOutput() S3BucketMapOutput
	ToS3BucketMapOutputWithContext(context.Context) S3BucketMapOutput
}

type S3BucketMap map[string]S3BucketInput

func (S3BucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Bucket)(nil)).Elem()
}

func (i S3BucketMap) ToS3BucketMapOutput() S3BucketMapOutput {
	return i.ToS3BucketMapOutputWithContext(context.Background())
}

func (i S3BucketMap) ToS3BucketMapOutputWithContext(ctx context.Context) S3BucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketMapOutput)
}

type S3BucketOutput struct{ *pulumi.OutputState }

func (S3BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Bucket)(nil)).Elem()
}

func (o S3BucketOutput) ToS3BucketOutput() S3BucketOutput {
	return o
}

func (o S3BucketOutput) ToS3BucketOutputWithContext(ctx context.Context) S3BucketOutput {
	return o
}

// Whether or not to remove the public access block from the bucket.
func (o S3BucketOutput) AllowPublicAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v *S3Bucket) pulumi.BoolOutput { return v.AllowPublicAccess }).(pulumi.BoolOutput)
}

// The ARN of the S3 bucket.
func (o S3BucketOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Bucket) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Default encryption settings for objects uploaded to the bucket.
func (o S3BucketOutput) DefaultEncryption() S3BucketDefaultEncryptionOutput {
	return o.ApplyT(func(v *S3Bucket) S3BucketDefaultEncryptionOutput { return v.DefaultEncryption }).(S3BucketDefaultEncryptionOutput)
}

// The domain name of the S3 bucket.
func (o S3BucketOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Bucket) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Whether or not to enable access logs. When enabled, Duplo will send access logs to a centralized S3 bucket per plan.
func (o S3BucketOutput) EnableAccessLogs() pulumi.BoolOutput {
	return o.ApplyT(func(v *S3Bucket) pulumi.BoolOutput { return v.EnableAccessLogs }).(pulumi.BoolOutput)
}

// Whether or not to enable versioning.
func (o S3BucketOutput) EnableVersioning() pulumi.BoolOutput {
	return o.ApplyT(func(v *S3Bucket) pulumi.BoolOutput { return v.EnableVersioning }).(pulumi.BoolOutput)
}

// The full name of the S3 bucket.
func (o S3BucketOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Bucket) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

// Duplo can manage your S3 bucket policy for you, based on simple list of policy keywords: - `"ssl"`: Require SSL / HTTPS
// when accessing the bucket. - `"ignore"`: If this value is present, Duplo will not manage your bucket policy.
func (o S3BucketOutput) ManagedPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *S3Bucket) pulumi.StringArrayOutput { return v.ManagedPolicies }).(pulumi.StringArrayOutput)
}

// The short name of the S3 bucket. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
// attribute.
func (o S3BucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Bucket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region of the S3 bucket.
func (o S3BucketOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Bucket) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o S3BucketOutput) Tags() S3BucketTagArrayOutput {
	return o.ApplyT(func(v *S3Bucket) S3BucketTagArrayOutput { return v.Tags }).(S3BucketTagArrayOutput)
}

// The GUID of the tenant that the S3 bucket will be created in.
func (o S3BucketOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Bucket) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type S3BucketArrayOutput struct{ *pulumi.OutputState }

func (S3BucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Bucket)(nil)).Elem()
}

func (o S3BucketArrayOutput) ToS3BucketArrayOutput() S3BucketArrayOutput {
	return o
}

func (o S3BucketArrayOutput) ToS3BucketArrayOutputWithContext(ctx context.Context) S3BucketArrayOutput {
	return o
}

func (o S3BucketArrayOutput) Index(i pulumi.IntInput) S3BucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *S3Bucket {
		return vs[0].([]*S3Bucket)[vs[1].(int)]
	}).(S3BucketOutput)
}

type S3BucketMapOutput struct{ *pulumi.OutputState }

func (S3BucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Bucket)(nil)).Elem()
}

func (o S3BucketMapOutput) ToS3BucketMapOutput() S3BucketMapOutput {
	return o
}

func (o S3BucketMapOutput) ToS3BucketMapOutputWithContext(ctx context.Context) S3BucketMapOutput {
	return o
}

func (o S3BucketMapOutput) MapIndex(k pulumi.StringInput) S3BucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *S3Bucket {
		return vs[0].(map[string]*S3Bucket)[vs[1].(string)]
	}).(S3BucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketInput)(nil)).Elem(), &S3Bucket{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketArrayInput)(nil)).Elem(), S3BucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketMapInput)(nil)).Elem(), S3BucketMap{})
	pulumi.RegisterOutputType(S3BucketOutput{})
	pulumi.RegisterOutputType(S3BucketArrayOutput{})
	pulumi.RegisterOutputType(S3BucketMapOutput{})
}
