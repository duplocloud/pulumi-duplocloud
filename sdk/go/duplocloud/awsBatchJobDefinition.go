// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AwsBatchJobDefinition` manages an aws batch Job Definition in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tenantId := "d186700c-ad18-4525-9593-aad467c843ff"
//			_, err := duplocloud.NewAwsBatchJobDefinition(ctx, "jd", &duplocloud.AwsBatchJobDefinitionArgs{
//				TenantId: pulumi.String(tenantId),
//				Name:     pulumi.String("tf_test_batch_job_definition"),
//				Type:     pulumi.String("container"),
//				PlatformCapabilities: pulumi.StringArray{
//					pulumi.String("EC2"),
//				},
//				RetryStrategy: &duplocloud.AwsBatchJobDefinitionRetryStrategyArgs{
//					Attempts: pulumi.Int(2),
//					EvaluateOnExits: duplocloud.AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArray{
//						&duplocloud.AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArgs{
//							Action:         pulumi.String("EXIT"),
//							OnExitCode:     pulumi.String("1*"),
//							OnReason:       pulumi.String("reason*"),
//							OnStatusReason: pulumi.String("status"),
//						},
//					},
//				},
//				Timeout: &duplocloud.AwsBatchJobDefinitionTimeoutArgs{
//					AttemptDurationSeconds: pulumi.Int(60),
//				},
//				ContainerProperties: pulumi.String(`  {
//	        "Command": [
//	            "sleep",
//	            "5"
//	        ],
//	        "Image": "amazonlinux",
//	        "ResourceRequirements": [
//	            {
//	                "Type": { "Value": "MEMORY" },
//	                "Value": "2048"
//	            },
//	            {
//	                "Type":  { "Value": "VCPU" },
//	                "Value": "1"
//	            },
//	            {
//	                "Type":  { "Value": "GPU" },
//	                "Value": "2"
//	            }
//	        ]
//	  }
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing AWS Batch Job Definition
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *NAME* is the short name of Job Definition
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/awsBatchJobDefinition:AwsBatchJobDefinition jd *TENANT_ID*/*NAME*
// ```
type AwsBatchJobDefinition struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name of the Job Definition.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A valid container properties provided as a single valid JSON document. This parameter is required if the type parameter is `container`.
	ContainerProperties pulumi.StringOutput `pulumi:"containerProperties"`
	// The full name of the Job Definition.
	Fullname pulumi.StringOutput `pulumi:"fullname"`
	// Specifies the name of the Job Definition.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the parameter substitution placeholders to set in the job definition.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
	PlatformCapabilities pulumi.StringArrayOutput `pulumi:"platformCapabilities"`
	// Specifies the retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of `retryStrategy` is `1`.
	RetryStrategy AwsBatchJobDefinitionRetryStrategyPtrOutput `pulumi:"retryStrategy"`
	// The revision of the job definition.
	Revision pulumi.IntOutput `pulumi:"revision"`
	// The status of the Job Definition.
	Status pulumi.StringOutput `pulumi:"status"`
	// Key-value map of resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The GUID of the tenant that the aws batch Job Definition will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`.
	Timeout AwsBatchJobDefinitionTimeoutPtrOutput `pulumi:"timeout"`
	// The `type` of job definition. Must be `container`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAwsBatchJobDefinition registers a new resource with the given unique name, arguments, and options.
func NewAwsBatchJobDefinition(ctx *pulumi.Context,
	name string, args *AwsBatchJobDefinitionArgs, opts ...pulumi.ResourceOption) (*AwsBatchJobDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsBatchJobDefinition
	err := ctx.RegisterResource("duplocloud:index/awsBatchJobDefinition:AwsBatchJobDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsBatchJobDefinition gets an existing AwsBatchJobDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsBatchJobDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsBatchJobDefinitionState, opts ...pulumi.ResourceOption) (*AwsBatchJobDefinition, error) {
	var resource AwsBatchJobDefinition
	err := ctx.ReadResource("duplocloud:index/awsBatchJobDefinition:AwsBatchJobDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsBatchJobDefinition resources.
type awsBatchJobDefinitionState struct {
	// The Amazon Resource Name of the Job Definition.
	Arn *string `pulumi:"arn"`
	// A valid container properties provided as a single valid JSON document. This parameter is required if the type parameter is `container`.
	ContainerProperties *string `pulumi:"containerProperties"`
	// The full name of the Job Definition.
	Fullname *string `pulumi:"fullname"`
	// Specifies the name of the Job Definition.
	Name *string `pulumi:"name"`
	// Specifies the parameter substitution placeholders to set in the job definition.
	Parameters map[string]string `pulumi:"parameters"`
	// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
	PlatformCapabilities []string `pulumi:"platformCapabilities"`
	// Specifies the retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of `retryStrategy` is `1`.
	RetryStrategy *AwsBatchJobDefinitionRetryStrategy `pulumi:"retryStrategy"`
	// The revision of the job definition.
	Revision *int `pulumi:"revision"`
	// The status of the Job Definition.
	Status *string `pulumi:"status"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The GUID of the tenant that the aws batch Job Definition will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`.
	Timeout *AwsBatchJobDefinitionTimeout `pulumi:"timeout"`
	// The `type` of job definition. Must be `container`.
	Type *string `pulumi:"type"`
}

type AwsBatchJobDefinitionState struct {
	// The Amazon Resource Name of the Job Definition.
	Arn pulumi.StringPtrInput
	// A valid container properties provided as a single valid JSON document. This parameter is required if the type parameter is `container`.
	ContainerProperties pulumi.StringPtrInput
	// The full name of the Job Definition.
	Fullname pulumi.StringPtrInput
	// Specifies the name of the Job Definition.
	Name pulumi.StringPtrInput
	// Specifies the parameter substitution placeholders to set in the job definition.
	Parameters pulumi.StringMapInput
	// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
	PlatformCapabilities pulumi.StringArrayInput
	// Specifies the retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of `retryStrategy` is `1`.
	RetryStrategy AwsBatchJobDefinitionRetryStrategyPtrInput
	// The revision of the job definition.
	Revision pulumi.IntPtrInput
	// The status of the Job Definition.
	Status pulumi.StringPtrInput
	// Key-value map of resource tags.
	Tags pulumi.StringMapInput
	// The GUID of the tenant that the aws batch Job Definition will be created in.
	TenantId pulumi.StringPtrInput
	// Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`.
	Timeout AwsBatchJobDefinitionTimeoutPtrInput
	// The `type` of job definition. Must be `container`.
	Type pulumi.StringPtrInput
}

func (AwsBatchJobDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsBatchJobDefinitionState)(nil)).Elem()
}

type awsBatchJobDefinitionArgs struct {
	// A valid container properties provided as a single valid JSON document. This parameter is required if the type parameter is `container`.
	ContainerProperties *string `pulumi:"containerProperties"`
	// Specifies the name of the Job Definition.
	Name *string `pulumi:"name"`
	// Specifies the parameter substitution placeholders to set in the job definition.
	Parameters map[string]string `pulumi:"parameters"`
	// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
	PlatformCapabilities []string `pulumi:"platformCapabilities"`
	// Specifies the retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of `retryStrategy` is `1`.
	RetryStrategy *AwsBatchJobDefinitionRetryStrategy `pulumi:"retryStrategy"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The GUID of the tenant that the aws batch Job Definition will be created in.
	TenantId string `pulumi:"tenantId"`
	// Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`.
	Timeout *AwsBatchJobDefinitionTimeout `pulumi:"timeout"`
	// The `type` of job definition. Must be `container`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a AwsBatchJobDefinition resource.
type AwsBatchJobDefinitionArgs struct {
	// A valid container properties provided as a single valid JSON document. This parameter is required if the type parameter is `container`.
	ContainerProperties pulumi.StringPtrInput
	// Specifies the name of the Job Definition.
	Name pulumi.StringPtrInput
	// Specifies the parameter substitution placeholders to set in the job definition.
	Parameters pulumi.StringMapInput
	// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
	PlatformCapabilities pulumi.StringArrayInput
	// Specifies the retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of `retryStrategy` is `1`.
	RetryStrategy AwsBatchJobDefinitionRetryStrategyPtrInput
	// Key-value map of resource tags.
	Tags pulumi.StringMapInput
	// The GUID of the tenant that the aws batch Job Definition will be created in.
	TenantId pulumi.StringInput
	// Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`.
	Timeout AwsBatchJobDefinitionTimeoutPtrInput
	// The `type` of job definition. Must be `container`.
	Type pulumi.StringInput
}

func (AwsBatchJobDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsBatchJobDefinitionArgs)(nil)).Elem()
}

type AwsBatchJobDefinitionInput interface {
	pulumi.Input

	ToAwsBatchJobDefinitionOutput() AwsBatchJobDefinitionOutput
	ToAwsBatchJobDefinitionOutputWithContext(ctx context.Context) AwsBatchJobDefinitionOutput
}

func (*AwsBatchJobDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsBatchJobDefinition)(nil)).Elem()
}

func (i *AwsBatchJobDefinition) ToAwsBatchJobDefinitionOutput() AwsBatchJobDefinitionOutput {
	return i.ToAwsBatchJobDefinitionOutputWithContext(context.Background())
}

func (i *AwsBatchJobDefinition) ToAwsBatchJobDefinitionOutputWithContext(ctx context.Context) AwsBatchJobDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsBatchJobDefinitionOutput)
}

// AwsBatchJobDefinitionArrayInput is an input type that accepts AwsBatchJobDefinitionArray and AwsBatchJobDefinitionArrayOutput values.
// You can construct a concrete instance of `AwsBatchJobDefinitionArrayInput` via:
//
//	AwsBatchJobDefinitionArray{ AwsBatchJobDefinitionArgs{...} }
type AwsBatchJobDefinitionArrayInput interface {
	pulumi.Input

	ToAwsBatchJobDefinitionArrayOutput() AwsBatchJobDefinitionArrayOutput
	ToAwsBatchJobDefinitionArrayOutputWithContext(context.Context) AwsBatchJobDefinitionArrayOutput
}

type AwsBatchJobDefinitionArray []AwsBatchJobDefinitionInput

func (AwsBatchJobDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsBatchJobDefinition)(nil)).Elem()
}

func (i AwsBatchJobDefinitionArray) ToAwsBatchJobDefinitionArrayOutput() AwsBatchJobDefinitionArrayOutput {
	return i.ToAwsBatchJobDefinitionArrayOutputWithContext(context.Background())
}

func (i AwsBatchJobDefinitionArray) ToAwsBatchJobDefinitionArrayOutputWithContext(ctx context.Context) AwsBatchJobDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsBatchJobDefinitionArrayOutput)
}

// AwsBatchJobDefinitionMapInput is an input type that accepts AwsBatchJobDefinitionMap and AwsBatchJobDefinitionMapOutput values.
// You can construct a concrete instance of `AwsBatchJobDefinitionMapInput` via:
//
//	AwsBatchJobDefinitionMap{ "key": AwsBatchJobDefinitionArgs{...} }
type AwsBatchJobDefinitionMapInput interface {
	pulumi.Input

	ToAwsBatchJobDefinitionMapOutput() AwsBatchJobDefinitionMapOutput
	ToAwsBatchJobDefinitionMapOutputWithContext(context.Context) AwsBatchJobDefinitionMapOutput
}

type AwsBatchJobDefinitionMap map[string]AwsBatchJobDefinitionInput

func (AwsBatchJobDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsBatchJobDefinition)(nil)).Elem()
}

func (i AwsBatchJobDefinitionMap) ToAwsBatchJobDefinitionMapOutput() AwsBatchJobDefinitionMapOutput {
	return i.ToAwsBatchJobDefinitionMapOutputWithContext(context.Background())
}

func (i AwsBatchJobDefinitionMap) ToAwsBatchJobDefinitionMapOutputWithContext(ctx context.Context) AwsBatchJobDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsBatchJobDefinitionMapOutput)
}

type AwsBatchJobDefinitionOutput struct{ *pulumi.OutputState }

func (AwsBatchJobDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsBatchJobDefinition)(nil)).Elem()
}

func (o AwsBatchJobDefinitionOutput) ToAwsBatchJobDefinitionOutput() AwsBatchJobDefinitionOutput {
	return o
}

func (o AwsBatchJobDefinitionOutput) ToAwsBatchJobDefinitionOutputWithContext(ctx context.Context) AwsBatchJobDefinitionOutput {
	return o
}

// The Amazon Resource Name of the Job Definition.
func (o AwsBatchJobDefinitionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsBatchJobDefinition) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A valid container properties provided as a single valid JSON document. This parameter is required if the type parameter is `container`.
func (o AwsBatchJobDefinitionOutput) ContainerProperties() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsBatchJobDefinition) pulumi.StringOutput { return v.ContainerProperties }).(pulumi.StringOutput)
}

// The full name of the Job Definition.
func (o AwsBatchJobDefinitionOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsBatchJobDefinition) pulumi.StringOutput { return v.Fullname }).(pulumi.StringOutput)
}

// Specifies the name of the Job Definition.
func (o AwsBatchJobDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsBatchJobDefinition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the parameter substitution placeholders to set in the job definition.
func (o AwsBatchJobDefinitionOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AwsBatchJobDefinition) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
func (o AwsBatchJobDefinitionOutput) PlatformCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AwsBatchJobDefinition) pulumi.StringArrayOutput { return v.PlatformCapabilities }).(pulumi.StringArrayOutput)
}

// Specifies the retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of `retryStrategy` is `1`.
func (o AwsBatchJobDefinitionOutput) RetryStrategy() AwsBatchJobDefinitionRetryStrategyPtrOutput {
	return o.ApplyT(func(v *AwsBatchJobDefinition) AwsBatchJobDefinitionRetryStrategyPtrOutput { return v.RetryStrategy }).(AwsBatchJobDefinitionRetryStrategyPtrOutput)
}

// The revision of the job definition.
func (o AwsBatchJobDefinitionOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v *AwsBatchJobDefinition) pulumi.IntOutput { return v.Revision }).(pulumi.IntOutput)
}

// The status of the Job Definition.
func (o AwsBatchJobDefinitionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsBatchJobDefinition) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Key-value map of resource tags.
func (o AwsBatchJobDefinitionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AwsBatchJobDefinition) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The GUID of the tenant that the aws batch Job Definition will be created in.
func (o AwsBatchJobDefinitionOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsBatchJobDefinition) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`.
func (o AwsBatchJobDefinitionOutput) Timeout() AwsBatchJobDefinitionTimeoutPtrOutput {
	return o.ApplyT(func(v *AwsBatchJobDefinition) AwsBatchJobDefinitionTimeoutPtrOutput { return v.Timeout }).(AwsBatchJobDefinitionTimeoutPtrOutput)
}

// The `type` of job definition. Must be `container`.
func (o AwsBatchJobDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsBatchJobDefinition) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type AwsBatchJobDefinitionArrayOutput struct{ *pulumi.OutputState }

func (AwsBatchJobDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsBatchJobDefinition)(nil)).Elem()
}

func (o AwsBatchJobDefinitionArrayOutput) ToAwsBatchJobDefinitionArrayOutput() AwsBatchJobDefinitionArrayOutput {
	return o
}

func (o AwsBatchJobDefinitionArrayOutput) ToAwsBatchJobDefinitionArrayOutputWithContext(ctx context.Context) AwsBatchJobDefinitionArrayOutput {
	return o
}

func (o AwsBatchJobDefinitionArrayOutput) Index(i pulumi.IntInput) AwsBatchJobDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsBatchJobDefinition {
		return vs[0].([]*AwsBatchJobDefinition)[vs[1].(int)]
	}).(AwsBatchJobDefinitionOutput)
}

type AwsBatchJobDefinitionMapOutput struct{ *pulumi.OutputState }

func (AwsBatchJobDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsBatchJobDefinition)(nil)).Elem()
}

func (o AwsBatchJobDefinitionMapOutput) ToAwsBatchJobDefinitionMapOutput() AwsBatchJobDefinitionMapOutput {
	return o
}

func (o AwsBatchJobDefinitionMapOutput) ToAwsBatchJobDefinitionMapOutputWithContext(ctx context.Context) AwsBatchJobDefinitionMapOutput {
	return o
}

func (o AwsBatchJobDefinitionMapOutput) MapIndex(k pulumi.StringInput) AwsBatchJobDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsBatchJobDefinition {
		return vs[0].(map[string]*AwsBatchJobDefinition)[vs[1].(string)]
	}).(AwsBatchJobDefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsBatchJobDefinitionInput)(nil)).Elem(), &AwsBatchJobDefinition{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsBatchJobDefinitionArrayInput)(nil)).Elem(), AwsBatchJobDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsBatchJobDefinitionMapInput)(nil)).Elem(), AwsBatchJobDefinitionMap{})
	pulumi.RegisterOutputType(AwsBatchJobDefinitionOutput{})
	pulumi.RegisterOutputType(AwsBatchJobDefinitionArrayOutput{})
	pulumi.RegisterOutputType(AwsBatchJobDefinitionMapOutput{})
}
