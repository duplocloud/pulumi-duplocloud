// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureRecoveryServicesVault` manages an Azure Recovery Services Vault in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewAzureRecoveryServicesVault(ctx, "recovery_services_vault", &duplocloud.AzureRecoveryServicesVaultArgs{
//				InfraName:         pulumi.String("demo"),
//				ResourceGroupName: pulumi.String("duploinfra-demo"),
//				Name:              pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing Azure Recovery Services Vault
//
//   - *INFRA_NAME* is the name of duplo infra.
//
//   - *NAME* is the name of the Recovery Services Vault
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/azureRecoveryServicesVault:AzureRecoveryServicesVault recovery_services_vault *INFRA_NAME*/*NAME*
// ```
type AzureRecoveryServicesVault struct {
	pulumi.CustomResourceState

	AzureId pulumi.StringOutput `pulumi:"azureId"`
	// The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.
	InfraName pulumi.StringOutput `pulumi:"infraName"`
	Location  pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	Sku               pulumi.StringOutput `pulumi:"sku"`
	// Whether or not to wait until Recovery Services Vault to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrOutput `pulumi:"waitUntilReady"`
}

// NewAzureRecoveryServicesVault registers a new resource with the given unique name, arguments, and options.
func NewAzureRecoveryServicesVault(ctx *pulumi.Context,
	name string, args *AzureRecoveryServicesVaultArgs, opts ...pulumi.ResourceOption) (*AzureRecoveryServicesVault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InfraName == nil {
		return nil, errors.New("invalid value for required argument 'InfraName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureRecoveryServicesVault
	err := ctx.RegisterResource("duplocloud:index/azureRecoveryServicesVault:AzureRecoveryServicesVault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureRecoveryServicesVault gets an existing AzureRecoveryServicesVault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureRecoveryServicesVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureRecoveryServicesVaultState, opts ...pulumi.ResourceOption) (*AzureRecoveryServicesVault, error) {
	var resource AzureRecoveryServicesVault
	err := ctx.ReadResource("duplocloud:index/azureRecoveryServicesVault:AzureRecoveryServicesVault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureRecoveryServicesVault resources.
type azureRecoveryServicesVaultState struct {
	AzureId *string `pulumi:"azureId"`
	// The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.
	InfraName *string `pulumi:"infraName"`
	Location  *string `pulumi:"location"`
	// Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	Sku               *string `pulumi:"sku"`
	// Whether or not to wait until Recovery Services Vault to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

type AzureRecoveryServicesVaultState struct {
	AzureId pulumi.StringPtrInput
	// The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.
	InfraName pulumi.StringPtrInput
	Location  pulumi.StringPtrInput
	// Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	Sku               pulumi.StringPtrInput
	// Whether or not to wait until Recovery Services Vault to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzureRecoveryServicesVaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureRecoveryServicesVaultState)(nil)).Elem()
}

type azureRecoveryServicesVaultArgs struct {
	// The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.
	InfraName string `pulumi:"infraName"`
	// Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Whether or not to wait until Recovery Services Vault to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

// The set of arguments for constructing a AzureRecoveryServicesVault resource.
type AzureRecoveryServicesVaultArgs struct {
	// The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.
	InfraName pulumi.StringInput
	// Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Whether or not to wait until Recovery Services Vault to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzureRecoveryServicesVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureRecoveryServicesVaultArgs)(nil)).Elem()
}

type AzureRecoveryServicesVaultInput interface {
	pulumi.Input

	ToAzureRecoveryServicesVaultOutput() AzureRecoveryServicesVaultOutput
	ToAzureRecoveryServicesVaultOutputWithContext(ctx context.Context) AzureRecoveryServicesVaultOutput
}

func (*AzureRecoveryServicesVault) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureRecoveryServicesVault)(nil)).Elem()
}

func (i *AzureRecoveryServicesVault) ToAzureRecoveryServicesVaultOutput() AzureRecoveryServicesVaultOutput {
	return i.ToAzureRecoveryServicesVaultOutputWithContext(context.Background())
}

func (i *AzureRecoveryServicesVault) ToAzureRecoveryServicesVaultOutputWithContext(ctx context.Context) AzureRecoveryServicesVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureRecoveryServicesVaultOutput)
}

// AzureRecoveryServicesVaultArrayInput is an input type that accepts AzureRecoveryServicesVaultArray and AzureRecoveryServicesVaultArrayOutput values.
// You can construct a concrete instance of `AzureRecoveryServicesVaultArrayInput` via:
//
//	AzureRecoveryServicesVaultArray{ AzureRecoveryServicesVaultArgs{...} }
type AzureRecoveryServicesVaultArrayInput interface {
	pulumi.Input

	ToAzureRecoveryServicesVaultArrayOutput() AzureRecoveryServicesVaultArrayOutput
	ToAzureRecoveryServicesVaultArrayOutputWithContext(context.Context) AzureRecoveryServicesVaultArrayOutput
}

type AzureRecoveryServicesVaultArray []AzureRecoveryServicesVaultInput

func (AzureRecoveryServicesVaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureRecoveryServicesVault)(nil)).Elem()
}

func (i AzureRecoveryServicesVaultArray) ToAzureRecoveryServicesVaultArrayOutput() AzureRecoveryServicesVaultArrayOutput {
	return i.ToAzureRecoveryServicesVaultArrayOutputWithContext(context.Background())
}

func (i AzureRecoveryServicesVaultArray) ToAzureRecoveryServicesVaultArrayOutputWithContext(ctx context.Context) AzureRecoveryServicesVaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureRecoveryServicesVaultArrayOutput)
}

// AzureRecoveryServicesVaultMapInput is an input type that accepts AzureRecoveryServicesVaultMap and AzureRecoveryServicesVaultMapOutput values.
// You can construct a concrete instance of `AzureRecoveryServicesVaultMapInput` via:
//
//	AzureRecoveryServicesVaultMap{ "key": AzureRecoveryServicesVaultArgs{...} }
type AzureRecoveryServicesVaultMapInput interface {
	pulumi.Input

	ToAzureRecoveryServicesVaultMapOutput() AzureRecoveryServicesVaultMapOutput
	ToAzureRecoveryServicesVaultMapOutputWithContext(context.Context) AzureRecoveryServicesVaultMapOutput
}

type AzureRecoveryServicesVaultMap map[string]AzureRecoveryServicesVaultInput

func (AzureRecoveryServicesVaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureRecoveryServicesVault)(nil)).Elem()
}

func (i AzureRecoveryServicesVaultMap) ToAzureRecoveryServicesVaultMapOutput() AzureRecoveryServicesVaultMapOutput {
	return i.ToAzureRecoveryServicesVaultMapOutputWithContext(context.Background())
}

func (i AzureRecoveryServicesVaultMap) ToAzureRecoveryServicesVaultMapOutputWithContext(ctx context.Context) AzureRecoveryServicesVaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureRecoveryServicesVaultMapOutput)
}

type AzureRecoveryServicesVaultOutput struct{ *pulumi.OutputState }

func (AzureRecoveryServicesVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureRecoveryServicesVault)(nil)).Elem()
}

func (o AzureRecoveryServicesVaultOutput) ToAzureRecoveryServicesVaultOutput() AzureRecoveryServicesVaultOutput {
	return o
}

func (o AzureRecoveryServicesVaultOutput) ToAzureRecoveryServicesVaultOutputWithContext(ctx context.Context) AzureRecoveryServicesVaultOutput {
	return o
}

func (o AzureRecoveryServicesVaultOutput) AzureId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureRecoveryServicesVault) pulumi.StringOutput { return v.AzureId }).(pulumi.StringOutput)
}

// The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.
func (o AzureRecoveryServicesVaultOutput) InfraName() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureRecoveryServicesVault) pulumi.StringOutput { return v.InfraName }).(pulumi.StringOutput)
}

func (o AzureRecoveryServicesVaultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureRecoveryServicesVault) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.
func (o AzureRecoveryServicesVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureRecoveryServicesVault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
func (o AzureRecoveryServicesVaultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureRecoveryServicesVault) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

func (o AzureRecoveryServicesVaultOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureRecoveryServicesVault) pulumi.StringOutput { return v.Sku }).(pulumi.StringOutput)
}

// Whether or not to wait until Recovery Services Vault to be ready, after creation. Defaults to `true`.
func (o AzureRecoveryServicesVaultOutput) WaitUntilReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureRecoveryServicesVault) pulumi.BoolPtrOutput { return v.WaitUntilReady }).(pulumi.BoolPtrOutput)
}

type AzureRecoveryServicesVaultArrayOutput struct{ *pulumi.OutputState }

func (AzureRecoveryServicesVaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureRecoveryServicesVault)(nil)).Elem()
}

func (o AzureRecoveryServicesVaultArrayOutput) ToAzureRecoveryServicesVaultArrayOutput() AzureRecoveryServicesVaultArrayOutput {
	return o
}

func (o AzureRecoveryServicesVaultArrayOutput) ToAzureRecoveryServicesVaultArrayOutputWithContext(ctx context.Context) AzureRecoveryServicesVaultArrayOutput {
	return o
}

func (o AzureRecoveryServicesVaultArrayOutput) Index(i pulumi.IntInput) AzureRecoveryServicesVaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureRecoveryServicesVault {
		return vs[0].([]*AzureRecoveryServicesVault)[vs[1].(int)]
	}).(AzureRecoveryServicesVaultOutput)
}

type AzureRecoveryServicesVaultMapOutput struct{ *pulumi.OutputState }

func (AzureRecoveryServicesVaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureRecoveryServicesVault)(nil)).Elem()
}

func (o AzureRecoveryServicesVaultMapOutput) ToAzureRecoveryServicesVaultMapOutput() AzureRecoveryServicesVaultMapOutput {
	return o
}

func (o AzureRecoveryServicesVaultMapOutput) ToAzureRecoveryServicesVaultMapOutputWithContext(ctx context.Context) AzureRecoveryServicesVaultMapOutput {
	return o
}

func (o AzureRecoveryServicesVaultMapOutput) MapIndex(k pulumi.StringInput) AzureRecoveryServicesVaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureRecoveryServicesVault {
		return vs[0].(map[string]*AzureRecoveryServicesVault)[vs[1].(string)]
	}).(AzureRecoveryServicesVaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureRecoveryServicesVaultInput)(nil)).Elem(), &AzureRecoveryServicesVault{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureRecoveryServicesVaultArrayInput)(nil)).Elem(), AzureRecoveryServicesVaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureRecoveryServicesVaultMapInput)(nil)).Elem(), AzureRecoveryServicesVaultMap{})
	pulumi.RegisterOutputType(AzureRecoveryServicesVaultOutput{})
	pulumi.RegisterOutputType(AzureRecoveryServicesVaultArrayOutput{})
	pulumi.RegisterOutputType(AzureRecoveryServicesVaultMapOutput{})
}
