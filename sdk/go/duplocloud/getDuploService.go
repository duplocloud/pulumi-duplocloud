// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupDuploService(ctx *pulumi.Context, args *LookupDuploServiceArgs, opts ...pulumi.InvokeOption) (*LookupDuploServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDuploServiceResult
	err := ctx.Invoke("duplocloud:index/getDuploService:getDuploService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDuploService.
type LookupDuploServiceArgs struct {
	Name     string `pulumi:"name"`
	TenantId string `pulumi:"tenantId"`
}

// A collection of values returned by getDuploService.
type LookupDuploServiceResult struct {
	AgentPlatform                   int      `pulumi:"agentPlatform"`
	AllocationTags                  string   `pulumi:"allocationTags"`
	AnyHostAllowed                  bool     `pulumi:"anyHostAllowed"`
	Cloud                           int      `pulumi:"cloud"`
	CloudCredsFromK8sServiceAccount bool     `pulumi:"cloudCredsFromK8sServiceAccount"`
	Commands                        []string `pulumi:"commands"`
	DockerImage                     string   `pulumi:"dockerImage"`
	// The service domain (whichever fqdnEx or fqdn which is non empty)
	Domain           string `pulumi:"domain"`
	ExtraConfig      string `pulumi:"extraConfig"`
	ForceStatefulSet bool   `pulumi:"forceStatefulSet"`
	// The fully qualified domain associated with the service
	Fqdn string `pulumi:"fqdn"`
	// External fully qualified domain associated with the service
	FqdnEx   string `pulumi:"fqdnEx"`
	HpaSpecs string `pulumi:"hpaSpecs"`
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	IsDaemonset bool   `pulumi:"isDaemonset"`
	// Whether or not the replicas must be scheduled on separate Kubernetes nodes.  Only supported on Kubernetes.
	IsUniqueK8sNodeRequired bool   `pulumi:"isUniqueK8sNodeRequired"`
	LbSyncedDeployment      bool   `pulumi:"lbSyncedDeployment"`
	Name                    string `pulumi:"name"`
	OtherDockerConfig       string `pulumi:"otherDockerConfig"`
	OtherDockerHostConfig   string `pulumi:"otherDockerHostConfig"`
	// The service's parent domain
	ParentDomain              string `pulumi:"parentDomain"`
	ReplicaCollocationAllowed bool   `pulumi:"replicaCollocationAllowed"`
	Replicas                  int    `pulumi:"replicas"`
	ReplicasMatchingAsgName   string `pulumi:"replicasMatchingAsgName"`
	// Whether or not the replicas must be spread across availability zones.  Only supported on Kubernetes.
	ShouldSpreadAcrossZones bool                 `pulumi:"shouldSpreadAcrossZones"`
	Tags                    []GetDuploServiceTag `pulumi:"tags"`
	TenantId                string               `pulumi:"tenantId"`
	Volumes                 string               `pulumi:"volumes"`
}

func LookupDuploServiceOutput(ctx *pulumi.Context, args LookupDuploServiceOutputArgs, opts ...pulumi.InvokeOption) LookupDuploServiceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDuploServiceResultOutput, error) {
			args := v.(LookupDuploServiceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("duplocloud:index/getDuploService:getDuploService", args, LookupDuploServiceResultOutput{}, options).(LookupDuploServiceResultOutput), nil
		}).(LookupDuploServiceResultOutput)
}

// A collection of arguments for invoking getDuploService.
type LookupDuploServiceOutputArgs struct {
	Name     pulumi.StringInput `pulumi:"name"`
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (LookupDuploServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDuploServiceArgs)(nil)).Elem()
}

// A collection of values returned by getDuploService.
type LookupDuploServiceResultOutput struct{ *pulumi.OutputState }

func (LookupDuploServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDuploServiceResult)(nil)).Elem()
}

func (o LookupDuploServiceResultOutput) ToLookupDuploServiceResultOutput() LookupDuploServiceResultOutput {
	return o
}

func (o LookupDuploServiceResultOutput) ToLookupDuploServiceResultOutputWithContext(ctx context.Context) LookupDuploServiceResultOutput {
	return o
}

func (o LookupDuploServiceResultOutput) AgentPlatform() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) int { return v.AgentPlatform }).(pulumi.IntOutput)
}

func (o LookupDuploServiceResultOutput) AllocationTags() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) string { return v.AllocationTags }).(pulumi.StringOutput)
}

func (o LookupDuploServiceResultOutput) AnyHostAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) bool { return v.AnyHostAllowed }).(pulumi.BoolOutput)
}

func (o LookupDuploServiceResultOutput) Cloud() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) int { return v.Cloud }).(pulumi.IntOutput)
}

func (o LookupDuploServiceResultOutput) CloudCredsFromK8sServiceAccount() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) bool { return v.CloudCredsFromK8sServiceAccount }).(pulumi.BoolOutput)
}

func (o LookupDuploServiceResultOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

func (o LookupDuploServiceResultOutput) DockerImage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) string { return v.DockerImage }).(pulumi.StringOutput)
}

// The service domain (whichever fqdnEx or fqdn which is non empty)
func (o LookupDuploServiceResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) string { return v.Domain }).(pulumi.StringOutput)
}

func (o LookupDuploServiceResultOutput) ExtraConfig() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) string { return v.ExtraConfig }).(pulumi.StringOutput)
}

func (o LookupDuploServiceResultOutput) ForceStatefulSet() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) bool { return v.ForceStatefulSet }).(pulumi.BoolOutput)
}

// The fully qualified domain associated with the service
func (o LookupDuploServiceResultOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) string { return v.Fqdn }).(pulumi.StringOutput)
}

// External fully qualified domain associated with the service
func (o LookupDuploServiceResultOutput) FqdnEx() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) string { return v.FqdnEx }).(pulumi.StringOutput)
}

func (o LookupDuploServiceResultOutput) HpaSpecs() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) string { return v.HpaSpecs }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDuploServiceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDuploServiceResultOutput) IsDaemonset() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) bool { return v.IsDaemonset }).(pulumi.BoolOutput)
}

// Whether or not the replicas must be scheduled on separate Kubernetes nodes.  Only supported on Kubernetes.
func (o LookupDuploServiceResultOutput) IsUniqueK8sNodeRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) bool { return v.IsUniqueK8sNodeRequired }).(pulumi.BoolOutput)
}

func (o LookupDuploServiceResultOutput) LbSyncedDeployment() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) bool { return v.LbSyncedDeployment }).(pulumi.BoolOutput)
}

func (o LookupDuploServiceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDuploServiceResultOutput) OtherDockerConfig() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) string { return v.OtherDockerConfig }).(pulumi.StringOutput)
}

func (o LookupDuploServiceResultOutput) OtherDockerHostConfig() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) string { return v.OtherDockerHostConfig }).(pulumi.StringOutput)
}

// The service's parent domain
func (o LookupDuploServiceResultOutput) ParentDomain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) string { return v.ParentDomain }).(pulumi.StringOutput)
}

func (o LookupDuploServiceResultOutput) ReplicaCollocationAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) bool { return v.ReplicaCollocationAllowed }).(pulumi.BoolOutput)
}

func (o LookupDuploServiceResultOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) int { return v.Replicas }).(pulumi.IntOutput)
}

func (o LookupDuploServiceResultOutput) ReplicasMatchingAsgName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) string { return v.ReplicasMatchingAsgName }).(pulumi.StringOutput)
}

// Whether or not the replicas must be spread across availability zones.  Only supported on Kubernetes.
func (o LookupDuploServiceResultOutput) ShouldSpreadAcrossZones() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) bool { return v.ShouldSpreadAcrossZones }).(pulumi.BoolOutput)
}

func (o LookupDuploServiceResultOutput) Tags() GetDuploServiceTagArrayOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) []GetDuploServiceTag { return v.Tags }).(GetDuploServiceTagArrayOutput)
}

func (o LookupDuploServiceResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) string { return v.TenantId }).(pulumi.StringOutput)
}

func (o LookupDuploServiceResultOutput) Volumes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDuploServiceResult) string { return v.Volumes }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDuploServiceResultOutput{})
}
