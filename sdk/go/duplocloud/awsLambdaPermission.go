// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AwsLambdaPermission` manages an AWS lambda permissions in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myfunction, err := duplocloud.NewAwsLambdaFunction(ctx, "myfunction", &duplocloud.AwsLambdaFunctionArgs{
//				TenantId:    pulumi.String("mytenant"),
//				Name:        pulumi.String("myfunction"),
//				Description: pulumi.String("A description of my function"),
//				Runtime:     pulumi.String("java11"),
//				Handler:     pulumi.String("com.example.MyFunction::handleRequest"),
//				S3Bucket:    pulumi.String("my-bucket-name"),
//				S3Key:       pulumi.String("my-function.zip"),
//				Environment: &duplocloud.AwsLambdaFunctionEnvironmentArgs{
//					Variables: pulumi.StringMap{
//						"foo": pulumi.String("bar"),
//					},
//				},
//				Timeout:    pulumi.Int(60),
//				MemorySize: pulumi.Int(512),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAwsLambdaPermission(ctx, "permission", &duplocloud.AwsLambdaPermissionArgs{
//				StatementId:  pulumi.String("AllowExecutionFromAPIGateway"),
//				Action:       pulumi.String("lambda:InvokeFunction"),
//				FunctionName: myfunction.Fullname,
//				Principal:    pulumi.String("apigateway.amazonaws.com"),
//				SourceArn:    pulumi.String("arn:aws:execute-api:region:accountId:aws_api_gateway_rest_api.api.id/*/*/*"),
//				TenantId:     pulumi.String("mytenant"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing AWS lambda function permission
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *SHORT_NAME* is the short name of the AWS lambda function
//
//   - *STATEMENT_ID* is the statement ID of the permission
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/awsLambdaPermission:AwsLambdaPermission permission *TENANT_ID*/*SHORT_NAME*/*STATEMENT_ID*
// ```
type AwsLambdaPermission struct {
	pulumi.CustomResourceState

	// The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
	Action pulumi.StringOutput `pulumi:"action"`
	// The Event Source Token to validate.
	EventSourceToken pulumi.StringPtrOutput `pulumi:"eventSourceToken"`
	// Name of the Lambda function whose resource policy you are updating.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// The principal who is getting this permission.
	Principal pulumi.StringOutput `pulumi:"principal"`
	// Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN.
	Qualifier pulumi.StringPtrOutput `pulumi:"qualifier"`
	// This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
	SourceAccount pulumi.StringPtrOutput `pulumi:"sourceAccount"`
	// When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
	SourceArn pulumi.StringPtrOutput `pulumi:"sourceArn"`
	// A unique statement identifier.
	StatementId pulumi.StringOutput `pulumi:"statementId"`
	// The GUID of the tenant that the lambda permission will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewAwsLambdaPermission registers a new resource with the given unique name, arguments, and options.
func NewAwsLambdaPermission(ctx *pulumi.Context,
	name string, args *AwsLambdaPermissionArgs, opts ...pulumi.ResourceOption) (*AwsLambdaPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.StatementId == nil {
		return nil, errors.New("invalid value for required argument 'StatementId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsLambdaPermission
	err := ctx.RegisterResource("duplocloud:index/awsLambdaPermission:AwsLambdaPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsLambdaPermission gets an existing AwsLambdaPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsLambdaPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsLambdaPermissionState, opts ...pulumi.ResourceOption) (*AwsLambdaPermission, error) {
	var resource AwsLambdaPermission
	err := ctx.ReadResource("duplocloud:index/awsLambdaPermission:AwsLambdaPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsLambdaPermission resources.
type awsLambdaPermissionState struct {
	// The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
	Action *string `pulumi:"action"`
	// The Event Source Token to validate.
	EventSourceToken *string `pulumi:"eventSourceToken"`
	// Name of the Lambda function whose resource policy you are updating.
	FunctionName *string `pulumi:"functionName"`
	// The principal who is getting this permission.
	Principal *string `pulumi:"principal"`
	// Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN.
	Qualifier *string `pulumi:"qualifier"`
	// This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
	SourceAccount *string `pulumi:"sourceAccount"`
	// When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
	SourceArn *string `pulumi:"sourceArn"`
	// A unique statement identifier.
	StatementId *string `pulumi:"statementId"`
	// The GUID of the tenant that the lambda permission will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type AwsLambdaPermissionState struct {
	// The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
	Action pulumi.StringPtrInput
	// The Event Source Token to validate.
	EventSourceToken pulumi.StringPtrInput
	// Name of the Lambda function whose resource policy you are updating.
	FunctionName pulumi.StringPtrInput
	// The principal who is getting this permission.
	Principal pulumi.StringPtrInput
	// Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN.
	Qualifier pulumi.StringPtrInput
	// This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
	SourceAccount pulumi.StringPtrInput
	// When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
	SourceArn pulumi.StringPtrInput
	// A unique statement identifier.
	StatementId pulumi.StringPtrInput
	// The GUID of the tenant that the lambda permission will be created in.
	TenantId pulumi.StringPtrInput
}

func (AwsLambdaPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsLambdaPermissionState)(nil)).Elem()
}

type awsLambdaPermissionArgs struct {
	// The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
	Action string `pulumi:"action"`
	// The Event Source Token to validate.
	EventSourceToken *string `pulumi:"eventSourceToken"`
	// Name of the Lambda function whose resource policy you are updating.
	FunctionName string `pulumi:"functionName"`
	// The principal who is getting this permission.
	Principal string `pulumi:"principal"`
	// Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN.
	Qualifier *string `pulumi:"qualifier"`
	// This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
	SourceAccount *string `pulumi:"sourceAccount"`
	// When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
	SourceArn *string `pulumi:"sourceArn"`
	// A unique statement identifier.
	StatementId string `pulumi:"statementId"`
	// The GUID of the tenant that the lambda permission will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AwsLambdaPermission resource.
type AwsLambdaPermissionArgs struct {
	// The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
	Action pulumi.StringInput
	// The Event Source Token to validate.
	EventSourceToken pulumi.StringPtrInput
	// Name of the Lambda function whose resource policy you are updating.
	FunctionName pulumi.StringInput
	// The principal who is getting this permission.
	Principal pulumi.StringInput
	// Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN.
	Qualifier pulumi.StringPtrInput
	// This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
	SourceAccount pulumi.StringPtrInput
	// When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
	SourceArn pulumi.StringPtrInput
	// A unique statement identifier.
	StatementId pulumi.StringInput
	// The GUID of the tenant that the lambda permission will be created in.
	TenantId pulumi.StringInput
}

func (AwsLambdaPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsLambdaPermissionArgs)(nil)).Elem()
}

type AwsLambdaPermissionInput interface {
	pulumi.Input

	ToAwsLambdaPermissionOutput() AwsLambdaPermissionOutput
	ToAwsLambdaPermissionOutputWithContext(ctx context.Context) AwsLambdaPermissionOutput
}

func (*AwsLambdaPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsLambdaPermission)(nil)).Elem()
}

func (i *AwsLambdaPermission) ToAwsLambdaPermissionOutput() AwsLambdaPermissionOutput {
	return i.ToAwsLambdaPermissionOutputWithContext(context.Background())
}

func (i *AwsLambdaPermission) ToAwsLambdaPermissionOutputWithContext(ctx context.Context) AwsLambdaPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLambdaPermissionOutput)
}

// AwsLambdaPermissionArrayInput is an input type that accepts AwsLambdaPermissionArray and AwsLambdaPermissionArrayOutput values.
// You can construct a concrete instance of `AwsLambdaPermissionArrayInput` via:
//
//	AwsLambdaPermissionArray{ AwsLambdaPermissionArgs{...} }
type AwsLambdaPermissionArrayInput interface {
	pulumi.Input

	ToAwsLambdaPermissionArrayOutput() AwsLambdaPermissionArrayOutput
	ToAwsLambdaPermissionArrayOutputWithContext(context.Context) AwsLambdaPermissionArrayOutput
}

type AwsLambdaPermissionArray []AwsLambdaPermissionInput

func (AwsLambdaPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsLambdaPermission)(nil)).Elem()
}

func (i AwsLambdaPermissionArray) ToAwsLambdaPermissionArrayOutput() AwsLambdaPermissionArrayOutput {
	return i.ToAwsLambdaPermissionArrayOutputWithContext(context.Background())
}

func (i AwsLambdaPermissionArray) ToAwsLambdaPermissionArrayOutputWithContext(ctx context.Context) AwsLambdaPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLambdaPermissionArrayOutput)
}

// AwsLambdaPermissionMapInput is an input type that accepts AwsLambdaPermissionMap and AwsLambdaPermissionMapOutput values.
// You can construct a concrete instance of `AwsLambdaPermissionMapInput` via:
//
//	AwsLambdaPermissionMap{ "key": AwsLambdaPermissionArgs{...} }
type AwsLambdaPermissionMapInput interface {
	pulumi.Input

	ToAwsLambdaPermissionMapOutput() AwsLambdaPermissionMapOutput
	ToAwsLambdaPermissionMapOutputWithContext(context.Context) AwsLambdaPermissionMapOutput
}

type AwsLambdaPermissionMap map[string]AwsLambdaPermissionInput

func (AwsLambdaPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsLambdaPermission)(nil)).Elem()
}

func (i AwsLambdaPermissionMap) ToAwsLambdaPermissionMapOutput() AwsLambdaPermissionMapOutput {
	return i.ToAwsLambdaPermissionMapOutputWithContext(context.Background())
}

func (i AwsLambdaPermissionMap) ToAwsLambdaPermissionMapOutputWithContext(ctx context.Context) AwsLambdaPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLambdaPermissionMapOutput)
}

type AwsLambdaPermissionOutput struct{ *pulumi.OutputState }

func (AwsLambdaPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsLambdaPermission)(nil)).Elem()
}

func (o AwsLambdaPermissionOutput) ToAwsLambdaPermissionOutput() AwsLambdaPermissionOutput {
	return o
}

func (o AwsLambdaPermissionOutput) ToAwsLambdaPermissionOutputWithContext(ctx context.Context) AwsLambdaPermissionOutput {
	return o
}

// The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
func (o AwsLambdaPermissionOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaPermission) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The Event Source Token to validate.
func (o AwsLambdaPermissionOutput) EventSourceToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsLambdaPermission) pulumi.StringPtrOutput { return v.EventSourceToken }).(pulumi.StringPtrOutput)
}

// Name of the Lambda function whose resource policy you are updating.
func (o AwsLambdaPermissionOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaPermission) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// The principal who is getting this permission.
func (o AwsLambdaPermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaPermission) pulumi.StringOutput { return v.Principal }).(pulumi.StringOutput)
}

// Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN.
func (o AwsLambdaPermissionOutput) Qualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsLambdaPermission) pulumi.StringPtrOutput { return v.Qualifier }).(pulumi.StringPtrOutput)
}

// This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
func (o AwsLambdaPermissionOutput) SourceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsLambdaPermission) pulumi.StringPtrOutput { return v.SourceAccount }).(pulumi.StringPtrOutput)
}

// When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
func (o AwsLambdaPermissionOutput) SourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsLambdaPermission) pulumi.StringPtrOutput { return v.SourceArn }).(pulumi.StringPtrOutput)
}

// A unique statement identifier.
func (o AwsLambdaPermissionOutput) StatementId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaPermission) pulumi.StringOutput { return v.StatementId }).(pulumi.StringOutput)
}

// The GUID of the tenant that the lambda permission will be created in.
func (o AwsLambdaPermissionOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLambdaPermission) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type AwsLambdaPermissionArrayOutput struct{ *pulumi.OutputState }

func (AwsLambdaPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsLambdaPermission)(nil)).Elem()
}

func (o AwsLambdaPermissionArrayOutput) ToAwsLambdaPermissionArrayOutput() AwsLambdaPermissionArrayOutput {
	return o
}

func (o AwsLambdaPermissionArrayOutput) ToAwsLambdaPermissionArrayOutputWithContext(ctx context.Context) AwsLambdaPermissionArrayOutput {
	return o
}

func (o AwsLambdaPermissionArrayOutput) Index(i pulumi.IntInput) AwsLambdaPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsLambdaPermission {
		return vs[0].([]*AwsLambdaPermission)[vs[1].(int)]
	}).(AwsLambdaPermissionOutput)
}

type AwsLambdaPermissionMapOutput struct{ *pulumi.OutputState }

func (AwsLambdaPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsLambdaPermission)(nil)).Elem()
}

func (o AwsLambdaPermissionMapOutput) ToAwsLambdaPermissionMapOutput() AwsLambdaPermissionMapOutput {
	return o
}

func (o AwsLambdaPermissionMapOutput) ToAwsLambdaPermissionMapOutputWithContext(ctx context.Context) AwsLambdaPermissionMapOutput {
	return o
}

func (o AwsLambdaPermissionMapOutput) MapIndex(k pulumi.StringInput) AwsLambdaPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsLambdaPermission {
		return vs[0].(map[string]*AwsLambdaPermission)[vs[1].(string)]
	}).(AwsLambdaPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLambdaPermissionInput)(nil)).Elem(), &AwsLambdaPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLambdaPermissionArrayInput)(nil)).Elem(), AwsLambdaPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLambdaPermissionMapInput)(nil)).Elem(), AwsLambdaPermissionMap{})
	pulumi.RegisterOutputType(AwsLambdaPermissionOutput{})
	pulumi.RegisterOutputType(AwsLambdaPermissionArrayOutput{})
	pulumi.RegisterOutputType(AwsLambdaPermissionMapOutput{})
}
