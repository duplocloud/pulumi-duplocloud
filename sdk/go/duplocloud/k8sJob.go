// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewK8sJob(ctx, "myapp", &duplocloud.K8sJobArgs{
//				TenantId: myapp.TenantId,
//				Metadata: &duplocloud.K8sJobMetadataArgs{
//					Name: pulumi.String("jobname"),
//				},
//				Specs: duplocloud.K8sJobSpecArray{
//					&duplocloud.K8sJobSpecArgs{
//						Template: &duplocloud.K8sJobSpecTemplateArgs{
//							Spec: &duplocloud.K8sJobSpecTemplateSpecArgs{
//								Containers: duplocloud.K8sJobSpecTemplateSpecContainerArray{
//									&duplocloud.K8sJobSpecTemplateSpecContainerArgs{
//										Name:  pulumi.String("containername"),
//										Image: pulumi.String("nginx:latest"),
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing kubernetes job
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *NAME* is the k8s job name
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/k8sJob:K8sJob myapp v3/subscriptions/*TENANT_ID*/k8s/job/*NAME*
// ```
type K8sJob struct {
	pulumi.CustomResourceState

	// Defaults to `false`.
	IsAnyHostAllowed pulumi.BoolPtrOutput `pulumi:"isAnyHostAllowed"`
	// Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata K8sJobMetadataOutput `pulumi:"metadata"`
	// Spec of the job owned by the cluster
	Specs K8sJobSpecArrayOutput `pulumi:"specs"`
	// The GUID of the tenant that the job will be created in.
	TenantId          pulumi.StringOutput  `pulumi:"tenantId"`
	WaitForCompletion pulumi.BoolPtrOutput `pulumi:"waitForCompletion"`
}

// NewK8sJob registers a new resource with the given unique name, arguments, and options.
func NewK8sJob(ctx *pulumi.Context,
	name string, args *K8sJobArgs, opts ...pulumi.ResourceOption) (*K8sJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Metadata == nil {
		return nil, errors.New("invalid value for required argument 'Metadata'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource K8sJob
	err := ctx.RegisterResource("duplocloud:index/k8sJob:K8sJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetK8sJob gets an existing K8sJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetK8sJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *K8sJobState, opts ...pulumi.ResourceOption) (*K8sJob, error) {
	var resource K8sJob
	err := ctx.ReadResource("duplocloud:index/k8sJob:K8sJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering K8sJob resources.
type k8sJobState struct {
	// Defaults to `false`.
	IsAnyHostAllowed *bool `pulumi:"isAnyHostAllowed"`
	// Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *K8sJobMetadata `pulumi:"metadata"`
	// Spec of the job owned by the cluster
	Specs []K8sJobSpec `pulumi:"specs"`
	// The GUID of the tenant that the job will be created in.
	TenantId          *string `pulumi:"tenantId"`
	WaitForCompletion *bool   `pulumi:"waitForCompletion"`
}

type K8sJobState struct {
	// Defaults to `false`.
	IsAnyHostAllowed pulumi.BoolPtrInput
	// Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata K8sJobMetadataPtrInput
	// Spec of the job owned by the cluster
	Specs K8sJobSpecArrayInput
	// The GUID of the tenant that the job will be created in.
	TenantId          pulumi.StringPtrInput
	WaitForCompletion pulumi.BoolPtrInput
}

func (K8sJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sJobState)(nil)).Elem()
}

type k8sJobArgs struct {
	// Defaults to `false`.
	IsAnyHostAllowed *bool `pulumi:"isAnyHostAllowed"`
	// Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata K8sJobMetadata `pulumi:"metadata"`
	// Spec of the job owned by the cluster
	Specs []K8sJobSpec `pulumi:"specs"`
	// The GUID of the tenant that the job will be created in.
	TenantId          string `pulumi:"tenantId"`
	WaitForCompletion *bool  `pulumi:"waitForCompletion"`
}

// The set of arguments for constructing a K8sJob resource.
type K8sJobArgs struct {
	// Defaults to `false`.
	IsAnyHostAllowed pulumi.BoolPtrInput
	// Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata K8sJobMetadataInput
	// Spec of the job owned by the cluster
	Specs K8sJobSpecArrayInput
	// The GUID of the tenant that the job will be created in.
	TenantId          pulumi.StringInput
	WaitForCompletion pulumi.BoolPtrInput
}

func (K8sJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sJobArgs)(nil)).Elem()
}

type K8sJobInput interface {
	pulumi.Input

	ToK8sJobOutput() K8sJobOutput
	ToK8sJobOutputWithContext(ctx context.Context) K8sJobOutput
}

func (*K8sJob) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sJob)(nil)).Elem()
}

func (i *K8sJob) ToK8sJobOutput() K8sJobOutput {
	return i.ToK8sJobOutputWithContext(context.Background())
}

func (i *K8sJob) ToK8sJobOutputWithContext(ctx context.Context) K8sJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sJobOutput)
}

// K8sJobArrayInput is an input type that accepts K8sJobArray and K8sJobArrayOutput values.
// You can construct a concrete instance of `K8sJobArrayInput` via:
//
//	K8sJobArray{ K8sJobArgs{...} }
type K8sJobArrayInput interface {
	pulumi.Input

	ToK8sJobArrayOutput() K8sJobArrayOutput
	ToK8sJobArrayOutputWithContext(context.Context) K8sJobArrayOutput
}

type K8sJobArray []K8sJobInput

func (K8sJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sJob)(nil)).Elem()
}

func (i K8sJobArray) ToK8sJobArrayOutput() K8sJobArrayOutput {
	return i.ToK8sJobArrayOutputWithContext(context.Background())
}

func (i K8sJobArray) ToK8sJobArrayOutputWithContext(ctx context.Context) K8sJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sJobArrayOutput)
}

// K8sJobMapInput is an input type that accepts K8sJobMap and K8sJobMapOutput values.
// You can construct a concrete instance of `K8sJobMapInput` via:
//
//	K8sJobMap{ "key": K8sJobArgs{...} }
type K8sJobMapInput interface {
	pulumi.Input

	ToK8sJobMapOutput() K8sJobMapOutput
	ToK8sJobMapOutputWithContext(context.Context) K8sJobMapOutput
}

type K8sJobMap map[string]K8sJobInput

func (K8sJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sJob)(nil)).Elem()
}

func (i K8sJobMap) ToK8sJobMapOutput() K8sJobMapOutput {
	return i.ToK8sJobMapOutputWithContext(context.Background())
}

func (i K8sJobMap) ToK8sJobMapOutputWithContext(ctx context.Context) K8sJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sJobMapOutput)
}

type K8sJobOutput struct{ *pulumi.OutputState }

func (K8sJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sJob)(nil)).Elem()
}

func (o K8sJobOutput) ToK8sJobOutput() K8sJobOutput {
	return o
}

func (o K8sJobOutput) ToK8sJobOutputWithContext(ctx context.Context) K8sJobOutput {
	return o
}

// Defaults to `false`.
func (o K8sJobOutput) IsAnyHostAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sJob) pulumi.BoolPtrOutput { return v.IsAnyHostAllowed }).(pulumi.BoolPtrOutput)
}

// Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o K8sJobOutput) Metadata() K8sJobMetadataOutput {
	return o.ApplyT(func(v *K8sJob) K8sJobMetadataOutput { return v.Metadata }).(K8sJobMetadataOutput)
}

// Spec of the job owned by the cluster
func (o K8sJobOutput) Specs() K8sJobSpecArrayOutput {
	return o.ApplyT(func(v *K8sJob) K8sJobSpecArrayOutput { return v.Specs }).(K8sJobSpecArrayOutput)
}

// The GUID of the tenant that the job will be created in.
func (o K8sJobOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *K8sJob) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

func (o K8sJobOutput) WaitForCompletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sJob) pulumi.BoolPtrOutput { return v.WaitForCompletion }).(pulumi.BoolPtrOutput)
}

type K8sJobArrayOutput struct{ *pulumi.OutputState }

func (K8sJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sJob)(nil)).Elem()
}

func (o K8sJobArrayOutput) ToK8sJobArrayOutput() K8sJobArrayOutput {
	return o
}

func (o K8sJobArrayOutput) ToK8sJobArrayOutputWithContext(ctx context.Context) K8sJobArrayOutput {
	return o
}

func (o K8sJobArrayOutput) Index(i pulumi.IntInput) K8sJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *K8sJob {
		return vs[0].([]*K8sJob)[vs[1].(int)]
	}).(K8sJobOutput)
}

type K8sJobMapOutput struct{ *pulumi.OutputState }

func (K8sJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sJob)(nil)).Elem()
}

func (o K8sJobMapOutput) ToK8sJobMapOutput() K8sJobMapOutput {
	return o
}

func (o K8sJobMapOutput) ToK8sJobMapOutputWithContext(ctx context.Context) K8sJobMapOutput {
	return o
}

func (o K8sJobMapOutput) MapIndex(k pulumi.StringInput) K8sJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *K8sJob {
		return vs[0].(map[string]*K8sJob)[vs[1].(string)]
	}).(K8sJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*K8sJobInput)(nil)).Elem(), &K8sJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sJobArrayInput)(nil)).Elem(), K8sJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sJobMapInput)(nil)).Elem(), K8sJobMap{})
	pulumi.RegisterOutputType(K8sJobOutput{})
	pulumi.RegisterOutputType(K8sJobArrayOutput{})
	pulumi.RegisterOutputType(K8sJobMapOutput{})
}
