// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureK8NodePool` manages a Node Pool of Kubernetes Cluster in Duplo.
//
// ## Import
//
// Example: Importing an existing Azure K8S Node Pool
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *FRIENDLY_NAME* is the duplo generated name of the the Azure K8S Node Pool
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/azureK8NodePool:AzureK8NodePool node_pool *TENANT_ID*/*FRIENDLY_NAME*
// ```
type AzureK8NodePool struct {
	pulumi.CustomResourceState

	// Allocation tags for this node pool.
	AllocationTag pulumi.StringOutput `pulumi:"allocationTag"`
	// availability zones of node pool
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	// The initial number of nodes which should exist within this Node.
	DesiredCapacity pulumi.IntOutput `pulumi:"desiredCapacity"`
	// Whether to enable auto-scaler.
	EnableAutoScaling pulumi.BoolOutput `pulumi:"enableAutoScaling"`
	// Node pool identifier. This field is deprecated, Please use `name` instead. identifier has been deprecated instead use name
	//
	// Deprecated: identifier has been deprecated instead use name
	Identifier pulumi.IntOutput `pulumi:"identifier"`
	// The maximum number of nodes which should exist within this Node Pool.
	MaxCapacity pulumi.IntOutput `pulumi:"maxCapacity"`
	// The minimum number of nodes which should exist within this Node Pool.
	MinCapacity pulumi.IntOutput `pulumi:"minCapacity"`
	// The name of the node pool.
	Name pulumi.StringOutput `pulumi:"name"`
	// Kubernetes labels which should be applied to nodes in this Node Pool.
	NodeLabels AzureK8NodePoolNodeLabelArrayOutput `pulumi:"nodeLabels"`
	// A list of Kubernetes taints which should be applied to nodes in the agent pool.
	NodeTaints pulumi.StringArrayOutput `pulumi:"nodeTaints"`
	// The Agent Operating System disk size in GB.
	OsDiskSizeGb pulumi.IntOutput `pulumi:"osDiskSizeGb"`
	// Specifies the OS SKU used by the agent pool. Possible values are `AzureLinux`, `Ubuntu`, `Windows2019` and `Windows2022`
	OsSku pulumi.StringOutput `pulumi:"osSku"`
	// Specifies the OS used by the agent pool. Possible values are `Linux`, `Windows`. Defaults to `Linux`.
	OsType pulumi.StringPtrOutput `pulumi:"osType"`
	// specify the priority for scaling operations,supported priority Regular or Spot
	ScalePriority AzureK8NodePoolScalePriorityOutput `pulumi:"scalePriority"`
	// The GUID of the tenant that the azure node pool will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this forces a new resource to be created.
	VmSize pulumi.StringOutput `pulumi:"vmSize"`
	// Whether or not to wait until node pool to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrOutput `pulumi:"waitUntilReady"`
}

// NewAzureK8NodePool registers a new resource with the given unique name, arguments, and options.
func NewAzureK8NodePool(ctx *pulumi.Context,
	name string, args *AzureK8NodePoolArgs, opts ...pulumi.ResourceOption) (*AzureK8NodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DesiredCapacity == nil {
		return nil, errors.New("invalid value for required argument 'DesiredCapacity'")
	}
	if args.MaxCapacity == nil {
		return nil, errors.New("invalid value for required argument 'MaxCapacity'")
	}
	if args.MinCapacity == nil {
		return nil, errors.New("invalid value for required argument 'MinCapacity'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.VmSize == nil {
		return nil, errors.New("invalid value for required argument 'VmSize'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureK8NodePool
	err := ctx.RegisterResource("duplocloud:index/azureK8NodePool:AzureK8NodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureK8NodePool gets an existing AzureK8NodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureK8NodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureK8NodePoolState, opts ...pulumi.ResourceOption) (*AzureK8NodePool, error) {
	var resource AzureK8NodePool
	err := ctx.ReadResource("duplocloud:index/azureK8NodePool:AzureK8NodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureK8NodePool resources.
type azureK8NodePoolState struct {
	// Allocation tags for this node pool.
	AllocationTag *string `pulumi:"allocationTag"`
	// availability zones of node pool
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The initial number of nodes which should exist within this Node.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// Whether to enable auto-scaler.
	EnableAutoScaling *bool `pulumi:"enableAutoScaling"`
	// Node pool identifier. This field is deprecated, Please use `name` instead. identifier has been deprecated instead use name
	//
	// Deprecated: identifier has been deprecated instead use name
	Identifier *int `pulumi:"identifier"`
	// The maximum number of nodes which should exist within this Node Pool.
	MaxCapacity *int `pulumi:"maxCapacity"`
	// The minimum number of nodes which should exist within this Node Pool.
	MinCapacity *int `pulumi:"minCapacity"`
	// The name of the node pool.
	Name *string `pulumi:"name"`
	// Kubernetes labels which should be applied to nodes in this Node Pool.
	NodeLabels []AzureK8NodePoolNodeLabel `pulumi:"nodeLabels"`
	// A list of Kubernetes taints which should be applied to nodes in the agent pool.
	NodeTaints []string `pulumi:"nodeTaints"`
	// The Agent Operating System disk size in GB.
	OsDiskSizeGb *int `pulumi:"osDiskSizeGb"`
	// Specifies the OS SKU used by the agent pool. Possible values are `AzureLinux`, `Ubuntu`, `Windows2019` and `Windows2022`
	OsSku *string `pulumi:"osSku"`
	// Specifies the OS used by the agent pool. Possible values are `Linux`, `Windows`. Defaults to `Linux`.
	OsType *string `pulumi:"osType"`
	// specify the priority for scaling operations,supported priority Regular or Spot
	ScalePriority *AzureK8NodePoolScalePriority `pulumi:"scalePriority"`
	// The GUID of the tenant that the azure node pool will be created in.
	TenantId *string `pulumi:"tenantId"`
	// The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this forces a new resource to be created.
	VmSize *string `pulumi:"vmSize"`
	// Whether or not to wait until node pool to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

type AzureK8NodePoolState struct {
	// Allocation tags for this node pool.
	AllocationTag pulumi.StringPtrInput
	// availability zones of node pool
	AvailabilityZones pulumi.StringArrayInput
	// The initial number of nodes which should exist within this Node.
	DesiredCapacity pulumi.IntPtrInput
	// Whether to enable auto-scaler.
	EnableAutoScaling pulumi.BoolPtrInput
	// Node pool identifier. This field is deprecated, Please use `name` instead. identifier has been deprecated instead use name
	//
	// Deprecated: identifier has been deprecated instead use name
	Identifier pulumi.IntPtrInput
	// The maximum number of nodes which should exist within this Node Pool.
	MaxCapacity pulumi.IntPtrInput
	// The minimum number of nodes which should exist within this Node Pool.
	MinCapacity pulumi.IntPtrInput
	// The name of the node pool.
	Name pulumi.StringPtrInput
	// Kubernetes labels which should be applied to nodes in this Node Pool.
	NodeLabels AzureK8NodePoolNodeLabelArrayInput
	// A list of Kubernetes taints which should be applied to nodes in the agent pool.
	NodeTaints pulumi.StringArrayInput
	// The Agent Operating System disk size in GB.
	OsDiskSizeGb pulumi.IntPtrInput
	// Specifies the OS SKU used by the agent pool. Possible values are `AzureLinux`, `Ubuntu`, `Windows2019` and `Windows2022`
	OsSku pulumi.StringPtrInput
	// Specifies the OS used by the agent pool. Possible values are `Linux`, `Windows`. Defaults to `Linux`.
	OsType pulumi.StringPtrInput
	// specify the priority for scaling operations,supported priority Regular or Spot
	ScalePriority AzureK8NodePoolScalePriorityPtrInput
	// The GUID of the tenant that the azure node pool will be created in.
	TenantId pulumi.StringPtrInput
	// The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this forces a new resource to be created.
	VmSize pulumi.StringPtrInput
	// Whether or not to wait until node pool to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzureK8NodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureK8NodePoolState)(nil)).Elem()
}

type azureK8NodePoolArgs struct {
	// Allocation tags for this node pool.
	AllocationTag *string `pulumi:"allocationTag"`
	// availability zones of node pool
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The initial number of nodes which should exist within this Node.
	DesiredCapacity int `pulumi:"desiredCapacity"`
	// Whether to enable auto-scaler.
	EnableAutoScaling *bool `pulumi:"enableAutoScaling"`
	// Node pool identifier. This field is deprecated, Please use `name` instead. identifier has been deprecated instead use name
	//
	// Deprecated: identifier has been deprecated instead use name
	Identifier *int `pulumi:"identifier"`
	// The maximum number of nodes which should exist within this Node Pool.
	MaxCapacity int `pulumi:"maxCapacity"`
	// The minimum number of nodes which should exist within this Node Pool.
	MinCapacity int `pulumi:"minCapacity"`
	// The name of the node pool.
	Name *string `pulumi:"name"`
	// Kubernetes labels which should be applied to nodes in this Node Pool.
	NodeLabels []AzureK8NodePoolNodeLabel `pulumi:"nodeLabels"`
	// A list of Kubernetes taints which should be applied to nodes in the agent pool.
	NodeTaints []string `pulumi:"nodeTaints"`
	// The Agent Operating System disk size in GB.
	OsDiskSizeGb *int `pulumi:"osDiskSizeGb"`
	// Specifies the OS SKU used by the agent pool. Possible values are `AzureLinux`, `Ubuntu`, `Windows2019` and `Windows2022`
	OsSku *string `pulumi:"osSku"`
	// Specifies the OS used by the agent pool. Possible values are `Linux`, `Windows`. Defaults to `Linux`.
	OsType *string `pulumi:"osType"`
	// specify the priority for scaling operations,supported priority Regular or Spot
	ScalePriority *AzureK8NodePoolScalePriority `pulumi:"scalePriority"`
	// The GUID of the tenant that the azure node pool will be created in.
	TenantId string `pulumi:"tenantId"`
	// The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
	// Whether or not to wait until node pool to be ready, after creation. Defaults to `true`.
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

// The set of arguments for constructing a AzureK8NodePool resource.
type AzureK8NodePoolArgs struct {
	// Allocation tags for this node pool.
	AllocationTag pulumi.StringPtrInput
	// availability zones of node pool
	AvailabilityZones pulumi.StringArrayInput
	// The initial number of nodes which should exist within this Node.
	DesiredCapacity pulumi.IntInput
	// Whether to enable auto-scaler.
	EnableAutoScaling pulumi.BoolPtrInput
	// Node pool identifier. This field is deprecated, Please use `name` instead. identifier has been deprecated instead use name
	//
	// Deprecated: identifier has been deprecated instead use name
	Identifier pulumi.IntPtrInput
	// The maximum number of nodes which should exist within this Node Pool.
	MaxCapacity pulumi.IntInput
	// The minimum number of nodes which should exist within this Node Pool.
	MinCapacity pulumi.IntInput
	// The name of the node pool.
	Name pulumi.StringPtrInput
	// Kubernetes labels which should be applied to nodes in this Node Pool.
	NodeLabels AzureK8NodePoolNodeLabelArrayInput
	// A list of Kubernetes taints which should be applied to nodes in the agent pool.
	NodeTaints pulumi.StringArrayInput
	// The Agent Operating System disk size in GB.
	OsDiskSizeGb pulumi.IntPtrInput
	// Specifies the OS SKU used by the agent pool. Possible values are `AzureLinux`, `Ubuntu`, `Windows2019` and `Windows2022`
	OsSku pulumi.StringPtrInput
	// Specifies the OS used by the agent pool. Possible values are `Linux`, `Windows`. Defaults to `Linux`.
	OsType pulumi.StringPtrInput
	// specify the priority for scaling operations,supported priority Regular or Spot
	ScalePriority AzureK8NodePoolScalePriorityPtrInput
	// The GUID of the tenant that the azure node pool will be created in.
	TenantId pulumi.StringInput
	// The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput
	// Whether or not to wait until node pool to be ready, after creation. Defaults to `true`.
	WaitUntilReady pulumi.BoolPtrInput
}

func (AzureK8NodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureK8NodePoolArgs)(nil)).Elem()
}

type AzureK8NodePoolInput interface {
	pulumi.Input

	ToAzureK8NodePoolOutput() AzureK8NodePoolOutput
	ToAzureK8NodePoolOutputWithContext(ctx context.Context) AzureK8NodePoolOutput
}

func (*AzureK8NodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureK8NodePool)(nil)).Elem()
}

func (i *AzureK8NodePool) ToAzureK8NodePoolOutput() AzureK8NodePoolOutput {
	return i.ToAzureK8NodePoolOutputWithContext(context.Background())
}

func (i *AzureK8NodePool) ToAzureK8NodePoolOutputWithContext(ctx context.Context) AzureK8NodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureK8NodePoolOutput)
}

// AzureK8NodePoolArrayInput is an input type that accepts AzureK8NodePoolArray and AzureK8NodePoolArrayOutput values.
// You can construct a concrete instance of `AzureK8NodePoolArrayInput` via:
//
//	AzureK8NodePoolArray{ AzureK8NodePoolArgs{...} }
type AzureK8NodePoolArrayInput interface {
	pulumi.Input

	ToAzureK8NodePoolArrayOutput() AzureK8NodePoolArrayOutput
	ToAzureK8NodePoolArrayOutputWithContext(context.Context) AzureK8NodePoolArrayOutput
}

type AzureK8NodePoolArray []AzureK8NodePoolInput

func (AzureK8NodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureK8NodePool)(nil)).Elem()
}

func (i AzureK8NodePoolArray) ToAzureK8NodePoolArrayOutput() AzureK8NodePoolArrayOutput {
	return i.ToAzureK8NodePoolArrayOutputWithContext(context.Background())
}

func (i AzureK8NodePoolArray) ToAzureK8NodePoolArrayOutputWithContext(ctx context.Context) AzureK8NodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureK8NodePoolArrayOutput)
}

// AzureK8NodePoolMapInput is an input type that accepts AzureK8NodePoolMap and AzureK8NodePoolMapOutput values.
// You can construct a concrete instance of `AzureK8NodePoolMapInput` via:
//
//	AzureK8NodePoolMap{ "key": AzureK8NodePoolArgs{...} }
type AzureK8NodePoolMapInput interface {
	pulumi.Input

	ToAzureK8NodePoolMapOutput() AzureK8NodePoolMapOutput
	ToAzureK8NodePoolMapOutputWithContext(context.Context) AzureK8NodePoolMapOutput
}

type AzureK8NodePoolMap map[string]AzureK8NodePoolInput

func (AzureK8NodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureK8NodePool)(nil)).Elem()
}

func (i AzureK8NodePoolMap) ToAzureK8NodePoolMapOutput() AzureK8NodePoolMapOutput {
	return i.ToAzureK8NodePoolMapOutputWithContext(context.Background())
}

func (i AzureK8NodePoolMap) ToAzureK8NodePoolMapOutputWithContext(ctx context.Context) AzureK8NodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureK8NodePoolMapOutput)
}

type AzureK8NodePoolOutput struct{ *pulumi.OutputState }

func (AzureK8NodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureK8NodePool)(nil)).Elem()
}

func (o AzureK8NodePoolOutput) ToAzureK8NodePoolOutput() AzureK8NodePoolOutput {
	return o
}

func (o AzureK8NodePoolOutput) ToAzureK8NodePoolOutputWithContext(ctx context.Context) AzureK8NodePoolOutput {
	return o
}

// Allocation tags for this node pool.
func (o AzureK8NodePoolOutput) AllocationTag() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureK8NodePool) pulumi.StringOutput { return v.AllocationTag }).(pulumi.StringOutput)
}

// availability zones of node pool
func (o AzureK8NodePoolOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzureK8NodePool) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The initial number of nodes which should exist within this Node.
func (o AzureK8NodePoolOutput) DesiredCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *AzureK8NodePool) pulumi.IntOutput { return v.DesiredCapacity }).(pulumi.IntOutput)
}

// Whether to enable auto-scaler.
func (o AzureK8NodePoolOutput) EnableAutoScaling() pulumi.BoolOutput {
	return o.ApplyT(func(v *AzureK8NodePool) pulumi.BoolOutput { return v.EnableAutoScaling }).(pulumi.BoolOutput)
}

// Node pool identifier. This field is deprecated, Please use `name` instead. identifier has been deprecated instead use name
//
// Deprecated: identifier has been deprecated instead use name
func (o AzureK8NodePoolOutput) Identifier() pulumi.IntOutput {
	return o.ApplyT(func(v *AzureK8NodePool) pulumi.IntOutput { return v.Identifier }).(pulumi.IntOutput)
}

// The maximum number of nodes which should exist within this Node Pool.
func (o AzureK8NodePoolOutput) MaxCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *AzureK8NodePool) pulumi.IntOutput { return v.MaxCapacity }).(pulumi.IntOutput)
}

// The minimum number of nodes which should exist within this Node Pool.
func (o AzureK8NodePoolOutput) MinCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *AzureK8NodePool) pulumi.IntOutput { return v.MinCapacity }).(pulumi.IntOutput)
}

// The name of the node pool.
func (o AzureK8NodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureK8NodePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Kubernetes labels which should be applied to nodes in this Node Pool.
func (o AzureK8NodePoolOutput) NodeLabels() AzureK8NodePoolNodeLabelArrayOutput {
	return o.ApplyT(func(v *AzureK8NodePool) AzureK8NodePoolNodeLabelArrayOutput { return v.NodeLabels }).(AzureK8NodePoolNodeLabelArrayOutput)
}

// A list of Kubernetes taints which should be applied to nodes in the agent pool.
func (o AzureK8NodePoolOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzureK8NodePool) pulumi.StringArrayOutput { return v.NodeTaints }).(pulumi.StringArrayOutput)
}

// The Agent Operating System disk size in GB.
func (o AzureK8NodePoolOutput) OsDiskSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v *AzureK8NodePool) pulumi.IntOutput { return v.OsDiskSizeGb }).(pulumi.IntOutput)
}

// Specifies the OS SKU used by the agent pool. Possible values are `AzureLinux`, `Ubuntu`, `Windows2019` and `Windows2022`
func (o AzureK8NodePoolOutput) OsSku() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureK8NodePool) pulumi.StringOutput { return v.OsSku }).(pulumi.StringOutput)
}

// Specifies the OS used by the agent pool. Possible values are `Linux`, `Windows`. Defaults to `Linux`.
func (o AzureK8NodePoolOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureK8NodePool) pulumi.StringPtrOutput { return v.OsType }).(pulumi.StringPtrOutput)
}

// specify the priority for scaling operations,supported priority Regular or Spot
func (o AzureK8NodePoolOutput) ScalePriority() AzureK8NodePoolScalePriorityOutput {
	return o.ApplyT(func(v *AzureK8NodePool) AzureK8NodePoolScalePriorityOutput { return v.ScalePriority }).(AzureK8NodePoolScalePriorityOutput)
}

// The GUID of the tenant that the azure node pool will be created in.
func (o AzureK8NodePoolOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureK8NodePool) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this forces a new resource to be created.
func (o AzureK8NodePoolOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureK8NodePool) pulumi.StringOutput { return v.VmSize }).(pulumi.StringOutput)
}

// Whether or not to wait until node pool to be ready, after creation. Defaults to `true`.
func (o AzureK8NodePoolOutput) WaitUntilReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureK8NodePool) pulumi.BoolPtrOutput { return v.WaitUntilReady }).(pulumi.BoolPtrOutput)
}

type AzureK8NodePoolArrayOutput struct{ *pulumi.OutputState }

func (AzureK8NodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureK8NodePool)(nil)).Elem()
}

func (o AzureK8NodePoolArrayOutput) ToAzureK8NodePoolArrayOutput() AzureK8NodePoolArrayOutput {
	return o
}

func (o AzureK8NodePoolArrayOutput) ToAzureK8NodePoolArrayOutputWithContext(ctx context.Context) AzureK8NodePoolArrayOutput {
	return o
}

func (o AzureK8NodePoolArrayOutput) Index(i pulumi.IntInput) AzureK8NodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureK8NodePool {
		return vs[0].([]*AzureK8NodePool)[vs[1].(int)]
	}).(AzureK8NodePoolOutput)
}

type AzureK8NodePoolMapOutput struct{ *pulumi.OutputState }

func (AzureK8NodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureK8NodePool)(nil)).Elem()
}

func (o AzureK8NodePoolMapOutput) ToAzureK8NodePoolMapOutput() AzureK8NodePoolMapOutput {
	return o
}

func (o AzureK8NodePoolMapOutput) ToAzureK8NodePoolMapOutputWithContext(ctx context.Context) AzureK8NodePoolMapOutput {
	return o
}

func (o AzureK8NodePoolMapOutput) MapIndex(k pulumi.StringInput) AzureK8NodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureK8NodePool {
		return vs[0].(map[string]*AzureK8NodePool)[vs[1].(string)]
	}).(AzureK8NodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureK8NodePoolInput)(nil)).Elem(), &AzureK8NodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureK8NodePoolArrayInput)(nil)).Elem(), AzureK8NodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureK8NodePoolMapInput)(nil)).Elem(), AzureK8NodePoolMap{})
	pulumi.RegisterOutputType(AzureK8NodePoolOutput{})
	pulumi.RegisterOutputType(AzureK8NodePoolArrayOutput{})
	pulumi.RegisterOutputType(AzureK8NodePoolMapOutput{})
}
