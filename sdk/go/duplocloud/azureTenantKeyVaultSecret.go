// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AzureTenantKeyVaultSecret` manages a azure Key Vault secret in DuploCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tenant, err := duplocloud.NewTenant(ctx, "tenant", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("test"),
//				PlanId:      pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			kv, err := duplocloud.NewAzureTenantKeyVault(ctx, "kv", &duplocloud.AzureTenantKeyVaultArgs{
//				TenantId:                tenant.TenantId,
//				Name:                    pulumi.String("tst-kv001"),
//				SkuName:                 pulumi.String("standard"),
//				PurgeProtectionEnabled:  pulumi.Bool(true),
//				SoftDeleteRetentionDays: pulumi.Int(90),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAzureTenantKeyVaultSecret(ctx, "kv_secret", &duplocloud.AzureTenantKeyVaultSecretArgs{
//				TenantId:  tenant.TenantId,
//				VaultName: kv.Name,
//				Name:      pulumi.String("Sec001"),
//				Value:     pulumi.String("SecVal001"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing Azure Key Vault Secret
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *VAULT_NAME* is the name of the Azure Key Vault
//
//   - *SECRET_NAME* is the name of the Azure Key Vault Secret
//
// ```sh
// $ pulumi import duplocloud:index/azureTenantKeyVaultSecret:AzureTenantKeyVaultSecret kv_secret *TENANT_ID*/*VAULT_NAME*/*SECRET_NAME*
// ```
type AzureTenantKeyVaultSecret struct {
	pulumi.CustomResourceState

	// The azure ID of the Key Vault secret.
	AzureId pulumi.StringOutput `pulumi:"azureId"`
	// Specifies the content type for the Key Vault Secret.
	ContentType pulumi.StringOutput `pulumi:"contentType"`
	// Specifies the name of the Key Vault Secret.
	Name pulumi.StringOutput `pulumi:"name"`
	// Reflects the deletion recovery level currently in effect for secrets in the current vault.
	RecoveryLevel pulumi.StringOutput `pulumi:"recoveryLevel"`
	// The GUID of the DuploCloud tenant that the key vault secret will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Specifies the value of the Key Vault Secret. Changing this will create a new version of the Key Vault Secret.
	Value pulumi.StringOutput `pulumi:"value"`
	// Base URL of the Azure Key Vault
	VaultBaseUrl pulumi.StringOutput `pulumi:"vaultBaseUrl"`
	// Name of the Key Vault where the Secret should be created.
	VaultName pulumi.StringOutput `pulumi:"vaultName"`
	// The current version of the Key Vault Secret.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewAzureTenantKeyVaultSecret registers a new resource with the given unique name, arguments, and options.
func NewAzureTenantKeyVaultSecret(ctx *pulumi.Context,
	name string, args *AzureTenantKeyVaultSecretArgs, opts ...pulumi.ResourceOption) (*AzureTenantKeyVaultSecret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	if args.VaultName == nil {
		return nil, errors.New("invalid value for required argument 'VaultName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureTenantKeyVaultSecret
	err := ctx.RegisterResource("duplocloud:index/azureTenantKeyVaultSecret:AzureTenantKeyVaultSecret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureTenantKeyVaultSecret gets an existing AzureTenantKeyVaultSecret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureTenantKeyVaultSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureTenantKeyVaultSecretState, opts ...pulumi.ResourceOption) (*AzureTenantKeyVaultSecret, error) {
	var resource AzureTenantKeyVaultSecret
	err := ctx.ReadResource("duplocloud:index/azureTenantKeyVaultSecret:AzureTenantKeyVaultSecret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureTenantKeyVaultSecret resources.
type azureTenantKeyVaultSecretState struct {
	// The azure ID of the Key Vault secret.
	AzureId *string `pulumi:"azureId"`
	// Specifies the content type for the Key Vault Secret.
	ContentType *string `pulumi:"contentType"`
	// Specifies the name of the Key Vault Secret.
	Name *string `pulumi:"name"`
	// Reflects the deletion recovery level currently in effect for secrets in the current vault.
	RecoveryLevel *string `pulumi:"recoveryLevel"`
	// The GUID of the DuploCloud tenant that the key vault secret will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the value of the Key Vault Secret. Changing this will create a new version of the Key Vault Secret.
	Value *string `pulumi:"value"`
	// Base URL of the Azure Key Vault
	VaultBaseUrl *string `pulumi:"vaultBaseUrl"`
	// Name of the Key Vault where the Secret should be created.
	VaultName *string `pulumi:"vaultName"`
	// The current version of the Key Vault Secret.
	Version *string `pulumi:"version"`
}

type AzureTenantKeyVaultSecretState struct {
	// The azure ID of the Key Vault secret.
	AzureId pulumi.StringPtrInput
	// Specifies the content type for the Key Vault Secret.
	ContentType pulumi.StringPtrInput
	// Specifies the name of the Key Vault Secret.
	Name pulumi.StringPtrInput
	// Reflects the deletion recovery level currently in effect for secrets in the current vault.
	RecoveryLevel pulumi.StringPtrInput
	// The GUID of the DuploCloud tenant that the key vault secret will be created in.
	TenantId pulumi.StringPtrInput
	// Specifies the value of the Key Vault Secret. Changing this will create a new version of the Key Vault Secret.
	Value pulumi.StringPtrInput
	// Base URL of the Azure Key Vault
	VaultBaseUrl pulumi.StringPtrInput
	// Name of the Key Vault where the Secret should be created.
	VaultName pulumi.StringPtrInput
	// The current version of the Key Vault Secret.
	Version pulumi.StringPtrInput
}

func (AzureTenantKeyVaultSecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureTenantKeyVaultSecretState)(nil)).Elem()
}

type azureTenantKeyVaultSecretArgs struct {
	// Specifies the content type for the Key Vault Secret.
	ContentType *string `pulumi:"contentType"`
	// Specifies the name of the Key Vault Secret.
	Name *string `pulumi:"name"`
	// The GUID of the DuploCloud tenant that the key vault secret will be created in.
	TenantId string `pulumi:"tenantId"`
	// Specifies the value of the Key Vault Secret. Changing this will create a new version of the Key Vault Secret.
	Value string `pulumi:"value"`
	// Name of the Key Vault where the Secret should be created.
	VaultName string `pulumi:"vaultName"`
}

// The set of arguments for constructing a AzureTenantKeyVaultSecret resource.
type AzureTenantKeyVaultSecretArgs struct {
	// Specifies the content type for the Key Vault Secret.
	ContentType pulumi.StringPtrInput
	// Specifies the name of the Key Vault Secret.
	Name pulumi.StringPtrInput
	// The GUID of the DuploCloud tenant that the key vault secret will be created in.
	TenantId pulumi.StringInput
	// Specifies the value of the Key Vault Secret. Changing this will create a new version of the Key Vault Secret.
	Value pulumi.StringInput
	// Name of the Key Vault where the Secret should be created.
	VaultName pulumi.StringInput
}

func (AzureTenantKeyVaultSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureTenantKeyVaultSecretArgs)(nil)).Elem()
}

type AzureTenantKeyVaultSecretInput interface {
	pulumi.Input

	ToAzureTenantKeyVaultSecretOutput() AzureTenantKeyVaultSecretOutput
	ToAzureTenantKeyVaultSecretOutputWithContext(ctx context.Context) AzureTenantKeyVaultSecretOutput
}

func (*AzureTenantKeyVaultSecret) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureTenantKeyVaultSecret)(nil)).Elem()
}

func (i *AzureTenantKeyVaultSecret) ToAzureTenantKeyVaultSecretOutput() AzureTenantKeyVaultSecretOutput {
	return i.ToAzureTenantKeyVaultSecretOutputWithContext(context.Background())
}

func (i *AzureTenantKeyVaultSecret) ToAzureTenantKeyVaultSecretOutputWithContext(ctx context.Context) AzureTenantKeyVaultSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTenantKeyVaultSecretOutput)
}

// AzureTenantKeyVaultSecretArrayInput is an input type that accepts AzureTenantKeyVaultSecretArray and AzureTenantKeyVaultSecretArrayOutput values.
// You can construct a concrete instance of `AzureTenantKeyVaultSecretArrayInput` via:
//
//	AzureTenantKeyVaultSecretArray{ AzureTenantKeyVaultSecretArgs{...} }
type AzureTenantKeyVaultSecretArrayInput interface {
	pulumi.Input

	ToAzureTenantKeyVaultSecretArrayOutput() AzureTenantKeyVaultSecretArrayOutput
	ToAzureTenantKeyVaultSecretArrayOutputWithContext(context.Context) AzureTenantKeyVaultSecretArrayOutput
}

type AzureTenantKeyVaultSecretArray []AzureTenantKeyVaultSecretInput

func (AzureTenantKeyVaultSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureTenantKeyVaultSecret)(nil)).Elem()
}

func (i AzureTenantKeyVaultSecretArray) ToAzureTenantKeyVaultSecretArrayOutput() AzureTenantKeyVaultSecretArrayOutput {
	return i.ToAzureTenantKeyVaultSecretArrayOutputWithContext(context.Background())
}

func (i AzureTenantKeyVaultSecretArray) ToAzureTenantKeyVaultSecretArrayOutputWithContext(ctx context.Context) AzureTenantKeyVaultSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTenantKeyVaultSecretArrayOutput)
}

// AzureTenantKeyVaultSecretMapInput is an input type that accepts AzureTenantKeyVaultSecretMap and AzureTenantKeyVaultSecretMapOutput values.
// You can construct a concrete instance of `AzureTenantKeyVaultSecretMapInput` via:
//
//	AzureTenantKeyVaultSecretMap{ "key": AzureTenantKeyVaultSecretArgs{...} }
type AzureTenantKeyVaultSecretMapInput interface {
	pulumi.Input

	ToAzureTenantKeyVaultSecretMapOutput() AzureTenantKeyVaultSecretMapOutput
	ToAzureTenantKeyVaultSecretMapOutputWithContext(context.Context) AzureTenantKeyVaultSecretMapOutput
}

type AzureTenantKeyVaultSecretMap map[string]AzureTenantKeyVaultSecretInput

func (AzureTenantKeyVaultSecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureTenantKeyVaultSecret)(nil)).Elem()
}

func (i AzureTenantKeyVaultSecretMap) ToAzureTenantKeyVaultSecretMapOutput() AzureTenantKeyVaultSecretMapOutput {
	return i.ToAzureTenantKeyVaultSecretMapOutputWithContext(context.Background())
}

func (i AzureTenantKeyVaultSecretMap) ToAzureTenantKeyVaultSecretMapOutputWithContext(ctx context.Context) AzureTenantKeyVaultSecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTenantKeyVaultSecretMapOutput)
}

type AzureTenantKeyVaultSecretOutput struct{ *pulumi.OutputState }

func (AzureTenantKeyVaultSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureTenantKeyVaultSecret)(nil)).Elem()
}

func (o AzureTenantKeyVaultSecretOutput) ToAzureTenantKeyVaultSecretOutput() AzureTenantKeyVaultSecretOutput {
	return o
}

func (o AzureTenantKeyVaultSecretOutput) ToAzureTenantKeyVaultSecretOutputWithContext(ctx context.Context) AzureTenantKeyVaultSecretOutput {
	return o
}

// The azure ID of the Key Vault secret.
func (o AzureTenantKeyVaultSecretOutput) AzureId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureTenantKeyVaultSecret) pulumi.StringOutput { return v.AzureId }).(pulumi.StringOutput)
}

// Specifies the content type for the Key Vault Secret.
func (o AzureTenantKeyVaultSecretOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureTenantKeyVaultSecret) pulumi.StringOutput { return v.ContentType }).(pulumi.StringOutput)
}

// Specifies the name of the Key Vault Secret.
func (o AzureTenantKeyVaultSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureTenantKeyVaultSecret) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Reflects the deletion recovery level currently in effect for secrets in the current vault.
func (o AzureTenantKeyVaultSecretOutput) RecoveryLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureTenantKeyVaultSecret) pulumi.StringOutput { return v.RecoveryLevel }).(pulumi.StringOutput)
}

// The GUID of the DuploCloud tenant that the key vault secret will be created in.
func (o AzureTenantKeyVaultSecretOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureTenantKeyVaultSecret) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Specifies the value of the Key Vault Secret. Changing this will create a new version of the Key Vault Secret.
func (o AzureTenantKeyVaultSecretOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureTenantKeyVaultSecret) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

// Base URL of the Azure Key Vault
func (o AzureTenantKeyVaultSecretOutput) VaultBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureTenantKeyVaultSecret) pulumi.StringOutput { return v.VaultBaseUrl }).(pulumi.StringOutput)
}

// Name of the Key Vault where the Secret should be created.
func (o AzureTenantKeyVaultSecretOutput) VaultName() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureTenantKeyVaultSecret) pulumi.StringOutput { return v.VaultName }).(pulumi.StringOutput)
}

// The current version of the Key Vault Secret.
func (o AzureTenantKeyVaultSecretOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureTenantKeyVaultSecret) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type AzureTenantKeyVaultSecretArrayOutput struct{ *pulumi.OutputState }

func (AzureTenantKeyVaultSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureTenantKeyVaultSecret)(nil)).Elem()
}

func (o AzureTenantKeyVaultSecretArrayOutput) ToAzureTenantKeyVaultSecretArrayOutput() AzureTenantKeyVaultSecretArrayOutput {
	return o
}

func (o AzureTenantKeyVaultSecretArrayOutput) ToAzureTenantKeyVaultSecretArrayOutputWithContext(ctx context.Context) AzureTenantKeyVaultSecretArrayOutput {
	return o
}

func (o AzureTenantKeyVaultSecretArrayOutput) Index(i pulumi.IntInput) AzureTenantKeyVaultSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureTenantKeyVaultSecret {
		return vs[0].([]*AzureTenantKeyVaultSecret)[vs[1].(int)]
	}).(AzureTenantKeyVaultSecretOutput)
}

type AzureTenantKeyVaultSecretMapOutput struct{ *pulumi.OutputState }

func (AzureTenantKeyVaultSecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureTenantKeyVaultSecret)(nil)).Elem()
}

func (o AzureTenantKeyVaultSecretMapOutput) ToAzureTenantKeyVaultSecretMapOutput() AzureTenantKeyVaultSecretMapOutput {
	return o
}

func (o AzureTenantKeyVaultSecretMapOutput) ToAzureTenantKeyVaultSecretMapOutputWithContext(ctx context.Context) AzureTenantKeyVaultSecretMapOutput {
	return o
}

func (o AzureTenantKeyVaultSecretMapOutput) MapIndex(k pulumi.StringInput) AzureTenantKeyVaultSecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureTenantKeyVaultSecret {
		return vs[0].(map[string]*AzureTenantKeyVaultSecret)[vs[1].(string)]
	}).(AzureTenantKeyVaultSecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureTenantKeyVaultSecretInput)(nil)).Elem(), &AzureTenantKeyVaultSecret{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureTenantKeyVaultSecretArrayInput)(nil)).Elem(), AzureTenantKeyVaultSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureTenantKeyVaultSecretMapInput)(nil)).Elem(), AzureTenantKeyVaultSecretMap{})
	pulumi.RegisterOutputType(AzureTenantKeyVaultSecretOutput{})
	pulumi.RegisterOutputType(AzureTenantKeyVaultSecretArrayOutput{})
	pulumi.RegisterOutputType(AzureTenantKeyVaultSecretMapOutput{})
}
