// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AwsTargetGroupAttributes` manages an aws target group attributes in Duplo.
//
// ## Import
//
// Example: Importing an existing AWS target group attributes.
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *TARGET_GROUP_ARN* is the ARN of target group.
//
// #
//
// ```sh
// $ pulumi import duplocloud:index/awsTargetGroupAttributes:AwsTargetGroupAttributes tgAttrs *TENANT_ID*/*TARGET_GROUP_ARN*
// ```
type AwsTargetGroupAttributes struct {
	pulumi.CustomResourceState

	Attributes AwsTargetGroupAttributesAttributeArrayOutput `pulumi:"attributes"`
	// Whether or not to look up the LB via an ECS service name instead of replication controller name.
	IsEcsLb pulumi.BoolPtrOutput `pulumi:"isEcsLb"`
	// Whether or not to look up the LB via the LB name instead of replication controller name.
	IsPassthroughLb pulumi.BoolPtrOutput `pulumi:"isPassthroughLb"`
	// Port used to connect with the target.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// Name of the ecs service or replication controller.
	RoleName pulumi.StringPtrOutput `pulumi:"roleName"`
	// ARN of the Target Group.
	TargetGroupArn pulumi.StringPtrOutput `pulumi:"targetGroupArn"`
	// The GUID of the tenant that the aws target group attributes will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewAwsTargetGroupAttributes registers a new resource with the given unique name, arguments, and options.
func NewAwsTargetGroupAttributes(ctx *pulumi.Context,
	name string, args *AwsTargetGroupAttributesArgs, opts ...pulumi.ResourceOption) (*AwsTargetGroupAttributes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsTargetGroupAttributes
	err := ctx.RegisterResource("duplocloud:index/awsTargetGroupAttributes:AwsTargetGroupAttributes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsTargetGroupAttributes gets an existing AwsTargetGroupAttributes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsTargetGroupAttributes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsTargetGroupAttributesState, opts ...pulumi.ResourceOption) (*AwsTargetGroupAttributes, error) {
	var resource AwsTargetGroupAttributes
	err := ctx.ReadResource("duplocloud:index/awsTargetGroupAttributes:AwsTargetGroupAttributes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsTargetGroupAttributes resources.
type awsTargetGroupAttributesState struct {
	Attributes []AwsTargetGroupAttributesAttribute `pulumi:"attributes"`
	// Whether or not to look up the LB via an ECS service name instead of replication controller name.
	IsEcsLb *bool `pulumi:"isEcsLb"`
	// Whether or not to look up the LB via the LB name instead of replication controller name.
	IsPassthroughLb *bool `pulumi:"isPassthroughLb"`
	// Port used to connect with the target.
	Port *int `pulumi:"port"`
	// Name of the ecs service or replication controller.
	RoleName *string `pulumi:"roleName"`
	// ARN of the Target Group.
	TargetGroupArn *string `pulumi:"targetGroupArn"`
	// The GUID of the tenant that the aws target group attributes will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type AwsTargetGroupAttributesState struct {
	Attributes AwsTargetGroupAttributesAttributeArrayInput
	// Whether or not to look up the LB via an ECS service name instead of replication controller name.
	IsEcsLb pulumi.BoolPtrInput
	// Whether or not to look up the LB via the LB name instead of replication controller name.
	IsPassthroughLb pulumi.BoolPtrInput
	// Port used to connect with the target.
	Port pulumi.IntPtrInput
	// Name of the ecs service or replication controller.
	RoleName pulumi.StringPtrInput
	// ARN of the Target Group.
	TargetGroupArn pulumi.StringPtrInput
	// The GUID of the tenant that the aws target group attributes will be created in.
	TenantId pulumi.StringPtrInput
}

func (AwsTargetGroupAttributesState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsTargetGroupAttributesState)(nil)).Elem()
}

type awsTargetGroupAttributesArgs struct {
	Attributes []AwsTargetGroupAttributesAttribute `pulumi:"attributes"`
	// Whether or not to look up the LB via an ECS service name instead of replication controller name.
	IsEcsLb *bool `pulumi:"isEcsLb"`
	// Whether or not to look up the LB via the LB name instead of replication controller name.
	IsPassthroughLb *bool `pulumi:"isPassthroughLb"`
	// Port used to connect with the target.
	Port *int `pulumi:"port"`
	// Name of the ecs service or replication controller.
	RoleName *string `pulumi:"roleName"`
	// ARN of the Target Group.
	TargetGroupArn *string `pulumi:"targetGroupArn"`
	// The GUID of the tenant that the aws target group attributes will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AwsTargetGroupAttributes resource.
type AwsTargetGroupAttributesArgs struct {
	Attributes AwsTargetGroupAttributesAttributeArrayInput
	// Whether or not to look up the LB via an ECS service name instead of replication controller name.
	IsEcsLb pulumi.BoolPtrInput
	// Whether or not to look up the LB via the LB name instead of replication controller name.
	IsPassthroughLb pulumi.BoolPtrInput
	// Port used to connect with the target.
	Port pulumi.IntPtrInput
	// Name of the ecs service or replication controller.
	RoleName pulumi.StringPtrInput
	// ARN of the Target Group.
	TargetGroupArn pulumi.StringPtrInput
	// The GUID of the tenant that the aws target group attributes will be created in.
	TenantId pulumi.StringInput
}

func (AwsTargetGroupAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsTargetGroupAttributesArgs)(nil)).Elem()
}

type AwsTargetGroupAttributesInput interface {
	pulumi.Input

	ToAwsTargetGroupAttributesOutput() AwsTargetGroupAttributesOutput
	ToAwsTargetGroupAttributesOutputWithContext(ctx context.Context) AwsTargetGroupAttributesOutput
}

func (*AwsTargetGroupAttributes) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsTargetGroupAttributes)(nil)).Elem()
}

func (i *AwsTargetGroupAttributes) ToAwsTargetGroupAttributesOutput() AwsTargetGroupAttributesOutput {
	return i.ToAwsTargetGroupAttributesOutputWithContext(context.Background())
}

func (i *AwsTargetGroupAttributes) ToAwsTargetGroupAttributesOutputWithContext(ctx context.Context) AwsTargetGroupAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsTargetGroupAttributesOutput)
}

// AwsTargetGroupAttributesArrayInput is an input type that accepts AwsTargetGroupAttributesArray and AwsTargetGroupAttributesArrayOutput values.
// You can construct a concrete instance of `AwsTargetGroupAttributesArrayInput` via:
//
//	AwsTargetGroupAttributesArray{ AwsTargetGroupAttributesArgs{...} }
type AwsTargetGroupAttributesArrayInput interface {
	pulumi.Input

	ToAwsTargetGroupAttributesArrayOutput() AwsTargetGroupAttributesArrayOutput
	ToAwsTargetGroupAttributesArrayOutputWithContext(context.Context) AwsTargetGroupAttributesArrayOutput
}

type AwsTargetGroupAttributesArray []AwsTargetGroupAttributesInput

func (AwsTargetGroupAttributesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsTargetGroupAttributes)(nil)).Elem()
}

func (i AwsTargetGroupAttributesArray) ToAwsTargetGroupAttributesArrayOutput() AwsTargetGroupAttributesArrayOutput {
	return i.ToAwsTargetGroupAttributesArrayOutputWithContext(context.Background())
}

func (i AwsTargetGroupAttributesArray) ToAwsTargetGroupAttributesArrayOutputWithContext(ctx context.Context) AwsTargetGroupAttributesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsTargetGroupAttributesArrayOutput)
}

// AwsTargetGroupAttributesMapInput is an input type that accepts AwsTargetGroupAttributesMap and AwsTargetGroupAttributesMapOutput values.
// You can construct a concrete instance of `AwsTargetGroupAttributesMapInput` via:
//
//	AwsTargetGroupAttributesMap{ "key": AwsTargetGroupAttributesArgs{...} }
type AwsTargetGroupAttributesMapInput interface {
	pulumi.Input

	ToAwsTargetGroupAttributesMapOutput() AwsTargetGroupAttributesMapOutput
	ToAwsTargetGroupAttributesMapOutputWithContext(context.Context) AwsTargetGroupAttributesMapOutput
}

type AwsTargetGroupAttributesMap map[string]AwsTargetGroupAttributesInput

func (AwsTargetGroupAttributesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsTargetGroupAttributes)(nil)).Elem()
}

func (i AwsTargetGroupAttributesMap) ToAwsTargetGroupAttributesMapOutput() AwsTargetGroupAttributesMapOutput {
	return i.ToAwsTargetGroupAttributesMapOutputWithContext(context.Background())
}

func (i AwsTargetGroupAttributesMap) ToAwsTargetGroupAttributesMapOutputWithContext(ctx context.Context) AwsTargetGroupAttributesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsTargetGroupAttributesMapOutput)
}

type AwsTargetGroupAttributesOutput struct{ *pulumi.OutputState }

func (AwsTargetGroupAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsTargetGroupAttributes)(nil)).Elem()
}

func (o AwsTargetGroupAttributesOutput) ToAwsTargetGroupAttributesOutput() AwsTargetGroupAttributesOutput {
	return o
}

func (o AwsTargetGroupAttributesOutput) ToAwsTargetGroupAttributesOutputWithContext(ctx context.Context) AwsTargetGroupAttributesOutput {
	return o
}

func (o AwsTargetGroupAttributesOutput) Attributes() AwsTargetGroupAttributesAttributeArrayOutput {
	return o.ApplyT(func(v *AwsTargetGroupAttributes) AwsTargetGroupAttributesAttributeArrayOutput { return v.Attributes }).(AwsTargetGroupAttributesAttributeArrayOutput)
}

// Whether or not to look up the LB via an ECS service name instead of replication controller name.
func (o AwsTargetGroupAttributesOutput) IsEcsLb() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AwsTargetGroupAttributes) pulumi.BoolPtrOutput { return v.IsEcsLb }).(pulumi.BoolPtrOutput)
}

// Whether or not to look up the LB via the LB name instead of replication controller name.
func (o AwsTargetGroupAttributesOutput) IsPassthroughLb() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AwsTargetGroupAttributes) pulumi.BoolPtrOutput { return v.IsPassthroughLb }).(pulumi.BoolPtrOutput)
}

// Port used to connect with the target.
func (o AwsTargetGroupAttributesOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AwsTargetGroupAttributes) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// Name of the ecs service or replication controller.
func (o AwsTargetGroupAttributesOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsTargetGroupAttributes) pulumi.StringPtrOutput { return v.RoleName }).(pulumi.StringPtrOutput)
}

// ARN of the Target Group.
func (o AwsTargetGroupAttributesOutput) TargetGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsTargetGroupAttributes) pulumi.StringPtrOutput { return v.TargetGroupArn }).(pulumi.StringPtrOutput)
}

// The GUID of the tenant that the aws target group attributes will be created in.
func (o AwsTargetGroupAttributesOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsTargetGroupAttributes) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type AwsTargetGroupAttributesArrayOutput struct{ *pulumi.OutputState }

func (AwsTargetGroupAttributesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsTargetGroupAttributes)(nil)).Elem()
}

func (o AwsTargetGroupAttributesArrayOutput) ToAwsTargetGroupAttributesArrayOutput() AwsTargetGroupAttributesArrayOutput {
	return o
}

func (o AwsTargetGroupAttributesArrayOutput) ToAwsTargetGroupAttributesArrayOutputWithContext(ctx context.Context) AwsTargetGroupAttributesArrayOutput {
	return o
}

func (o AwsTargetGroupAttributesArrayOutput) Index(i pulumi.IntInput) AwsTargetGroupAttributesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsTargetGroupAttributes {
		return vs[0].([]*AwsTargetGroupAttributes)[vs[1].(int)]
	}).(AwsTargetGroupAttributesOutput)
}

type AwsTargetGroupAttributesMapOutput struct{ *pulumi.OutputState }

func (AwsTargetGroupAttributesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsTargetGroupAttributes)(nil)).Elem()
}

func (o AwsTargetGroupAttributesMapOutput) ToAwsTargetGroupAttributesMapOutput() AwsTargetGroupAttributesMapOutput {
	return o
}

func (o AwsTargetGroupAttributesMapOutput) ToAwsTargetGroupAttributesMapOutputWithContext(ctx context.Context) AwsTargetGroupAttributesMapOutput {
	return o
}

func (o AwsTargetGroupAttributesMapOutput) MapIndex(k pulumi.StringInput) AwsTargetGroupAttributesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsTargetGroupAttributes {
		return vs[0].(map[string]*AwsTargetGroupAttributes)[vs[1].(string)]
	}).(AwsTargetGroupAttributesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsTargetGroupAttributesInput)(nil)).Elem(), &AwsTargetGroupAttributes{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsTargetGroupAttributesArrayInput)(nil)).Elem(), AwsTargetGroupAttributesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsTargetGroupAttributesMapInput)(nil)).Elem(), AwsTargetGroupAttributesMap{})
	pulumi.RegisterOutputType(AwsTargetGroupAttributesOutput{})
	pulumi.RegisterOutputType(AwsTargetGroupAttributesArrayOutput{})
	pulumi.RegisterOutputType(AwsTargetGroupAttributesMapOutput{})
}
