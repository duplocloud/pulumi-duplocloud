// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `GcpNodePool` retrieves a node pool in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pool, err := duplocloud.LookupGcpNodePool(ctx, &duplocloud.LookupGcpNodePoolArgs{
//				TenantId: "tenantid",
//				Name:     "nodepool-name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("nodepoolOutput", pulumi.Map{
//				"name":            pool.Name,
//				"machineType":     pool.MachineType,
//				"zones":           pool.Zones,
//				"discSizeGb":      pool.DiscSizeGb,
//				"discType":        pool.DiscType,
//				"upgradeSettings": pool.UpgradeSettings,
//			})
//			return nil
//		})
//	}
//
// ```
func LookupGcpNodePool(ctx *pulumi.Context, args *LookupGcpNodePoolArgs, opts ...pulumi.InvokeOption) (*LookupGcpNodePoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGcpNodePoolResult
	err := ctx.Invoke("duplocloud:index/getGcpNodePool:getGcpNodePool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGcpNodePool.
type LookupGcpNodePoolArgs struct {
	Accelerators []GetGcpNodePoolAccelerator `pulumi:"accelerators"`
	// The short name of the node pool.
	Name   string                `pulumi:"name"`
	Taints []GetGcpNodePoolTaint `pulumi:"taints"`
	// The GUID of the tenant that the node pool will be associated with.
	TenantId string `pulumi:"tenantId"`
}

// A collection of values returned by getGcpNodePool.
type LookupGcpNodePoolResult struct {
	Accelerators []GetGcpNodePoolAccelerator `pulumi:"accelerators"`
	// Whether the nodes will be automatically repaired.
	AutoRepair bool `pulumi:"autoRepair"`
	// Whether the nodes will be automatically upgraded.
	AutoUpgrade bool `pulumi:"autoUpgrade"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
	// 			If unspecified, the default disk size is 100GB.
	DiscSizeGb int `pulumi:"discSizeGb"`
	// Type of the disk attached to each node
	// 			If unspecified, the default disk type is 'pd-standard'
	DiscType string `pulumi:"discType"`
	// The full name of the node pool.
	Fullname string `pulumi:"fullname"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The image type to use for this node. Note that for a given image type, the latest version of it will be used
	ImageType string `pulumi:"imageType"`
	// The initial node count for the pool
	InitialNodeCount int `pulumi:"initialNodeCount"`
	// Is autoscaling enabled for this node pool.
	IsAutoscalingEnabled bool `pulumi:"isAutoscalingEnabled"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node.
	Labels map[string]string `pulumi:"labels"`
	// Parameters that can be configured on Linux nodes
	LinuxNodeConfigs []GetGcpNodePoolLinuxNodeConfig `pulumi:"linuxNodeConfigs"`
	// Update strategy of the node pool.
	LocationPolicy string `pulumi:"locationPolicy"`
	// The name of a Google Compute Engine machine type.
	// 			If unspecified, the default machine type is e2-medium.
	MachineType string `pulumi:"machineType"`
	// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// The metadata key/value pairs assigned to instances in the cluster.
	Metadata map[string]string `pulumi:"metadata"`
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
	MinNodeCount int `pulumi:"minNodeCount"`
	// The short name of the node pool.
	Name string `pulumi:"name"`
	// Logging configuration.
	NodePoolLoggingConfigs []GetGcpNodePoolNodePoolLoggingConfig `pulumi:"nodePoolLoggingConfigs"`
	// The set of Google API scopes to be made available on all of the node VMs under the default service account.
	OauthScopes []string `pulumi:"oauthScopes"`
	// Resource labels associated to node pool
	ResourceLabels map[string]string `pulumi:"resourceLabels"`
	// Spot flag for enabling Spot VM
	Spot bool `pulumi:"spot"`
	// The list of instance tags applied to all nodes.
	// 			Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation.
	// 			Each tag within the list must comply with RFC1035.
	Tags   []string              `pulumi:"tags"`
	Taints []GetGcpNodePoolTaint `pulumi:"taints"`
	// The GUID of the tenant that the node pool will be associated with.
	TenantId string `pulumi:"tenantId"`
	// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
	TotalMaxNodeCount int `pulumi:"totalMaxNodeCount"`
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
	TotalMinNodeCount int `pulumi:"totalMinNodeCount"`
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings []GetGcpNodePoolUpgradeSetting `pulumi:"upgradeSettings"`
	// The list of Google Compute Engine zones in which the NodePool's nodes should be located.
	Zones []string `pulumi:"zones"`
}

func LookupGcpNodePoolOutput(ctx *pulumi.Context, args LookupGcpNodePoolOutputArgs, opts ...pulumi.InvokeOption) LookupGcpNodePoolResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupGcpNodePoolResultOutput, error) {
			args := v.(LookupGcpNodePoolArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("duplocloud:index/getGcpNodePool:getGcpNodePool", args, LookupGcpNodePoolResultOutput{}, options).(LookupGcpNodePoolResultOutput), nil
		}).(LookupGcpNodePoolResultOutput)
}

// A collection of arguments for invoking getGcpNodePool.
type LookupGcpNodePoolOutputArgs struct {
	Accelerators GetGcpNodePoolAcceleratorArrayInput `pulumi:"accelerators"`
	// The short name of the node pool.
	Name   pulumi.StringInput            `pulumi:"name"`
	Taints GetGcpNodePoolTaintArrayInput `pulumi:"taints"`
	// The GUID of the tenant that the node pool will be associated with.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (LookupGcpNodePoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGcpNodePoolArgs)(nil)).Elem()
}

// A collection of values returned by getGcpNodePool.
type LookupGcpNodePoolResultOutput struct{ *pulumi.OutputState }

func (LookupGcpNodePoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGcpNodePoolResult)(nil)).Elem()
}

func (o LookupGcpNodePoolResultOutput) ToLookupGcpNodePoolResultOutput() LookupGcpNodePoolResultOutput {
	return o
}

func (o LookupGcpNodePoolResultOutput) ToLookupGcpNodePoolResultOutputWithContext(ctx context.Context) LookupGcpNodePoolResultOutput {
	return o
}

func (o LookupGcpNodePoolResultOutput) Accelerators() GetGcpNodePoolAcceleratorArrayOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) []GetGcpNodePoolAccelerator { return v.Accelerators }).(GetGcpNodePoolAcceleratorArrayOutput)
}

// Whether the nodes will be automatically repaired.
func (o LookupGcpNodePoolResultOutput) AutoRepair() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) bool { return v.AutoRepair }).(pulumi.BoolOutput)
}

// Whether the nodes will be automatically upgraded.
func (o LookupGcpNodePoolResultOutput) AutoUpgrade() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) bool { return v.AutoUpgrade }).(pulumi.BoolOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
//
//	If unspecified, the default disk size is 100GB.
func (o LookupGcpNodePoolResultOutput) DiscSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) int { return v.DiscSizeGb }).(pulumi.IntOutput)
}

// Type of the disk attached to each node
//
//	If unspecified, the default disk type is 'pd-standard'
func (o LookupGcpNodePoolResultOutput) DiscType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) string { return v.DiscType }).(pulumi.StringOutput)
}

// The full name of the node pool.
func (o LookupGcpNodePoolResultOutput) Fullname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) string { return v.Fullname }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGcpNodePoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) string { return v.Id }).(pulumi.StringOutput)
}

// The image type to use for this node. Note that for a given image type, the latest version of it will be used
func (o LookupGcpNodePoolResultOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) string { return v.ImageType }).(pulumi.StringOutput)
}

// The initial node count for the pool
func (o LookupGcpNodePoolResultOutput) InitialNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) int { return v.InitialNodeCount }).(pulumi.IntOutput)
}

// Is autoscaling enabled for this node pool.
func (o LookupGcpNodePoolResultOutput) IsAutoscalingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) bool { return v.IsAutoscalingEnabled }).(pulumi.BoolOutput)
}

// The map of Kubernetes labels (key/value pairs) to be applied to each node.
func (o LookupGcpNodePoolResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Parameters that can be configured on Linux nodes
func (o LookupGcpNodePoolResultOutput) LinuxNodeConfigs() GetGcpNodePoolLinuxNodeConfigArrayOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) []GetGcpNodePoolLinuxNodeConfig { return v.LinuxNodeConfigs }).(GetGcpNodePoolLinuxNodeConfigArrayOutput)
}

// Update strategy of the node pool.
func (o LookupGcpNodePoolResultOutput) LocationPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) string { return v.LocationPolicy }).(pulumi.StringOutput)
}

// The name of a Google Compute Engine machine type.
//
//	If unspecified, the default machine type is e2-medium.
func (o LookupGcpNodePoolResultOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) string { return v.MachineType }).(pulumi.StringOutput)
}

// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
func (o LookupGcpNodePoolResultOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

// The metadata key/value pairs assigned to instances in the cluster.
func (o LookupGcpNodePoolResultOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
func (o LookupGcpNodePoolResultOutput) MinNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) int { return v.MinNodeCount }).(pulumi.IntOutput)
}

// The short name of the node pool.
func (o LookupGcpNodePoolResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) string { return v.Name }).(pulumi.StringOutput)
}

// Logging configuration.
func (o LookupGcpNodePoolResultOutput) NodePoolLoggingConfigs() GetGcpNodePoolNodePoolLoggingConfigArrayOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) []GetGcpNodePoolNodePoolLoggingConfig { return v.NodePoolLoggingConfigs }).(GetGcpNodePoolNodePoolLoggingConfigArrayOutput)
}

// The set of Google API scopes to be made available on all of the node VMs under the default service account.
func (o LookupGcpNodePoolResultOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// Resource labels associated to node pool
func (o LookupGcpNodePoolResultOutput) ResourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) map[string]string { return v.ResourceLabels }).(pulumi.StringMapOutput)
}

// Spot flag for enabling Spot VM
func (o LookupGcpNodePoolResultOutput) Spot() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) bool { return v.Spot }).(pulumi.BoolOutput)
}

// The list of instance tags applied to all nodes.
//
//	Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation.
//	Each tag within the list must comply with RFC1035.
func (o LookupGcpNodePoolResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o LookupGcpNodePoolResultOutput) Taints() GetGcpNodePoolTaintArrayOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) []GetGcpNodePoolTaint { return v.Taints }).(GetGcpNodePoolTaintArrayOutput)
}

// The GUID of the tenant that the node pool will be associated with.
func (o LookupGcpNodePoolResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) string { return v.TenantId }).(pulumi.StringOutput)
}

// Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
func (o LookupGcpNodePoolResultOutput) TotalMaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) int { return v.TotalMaxNodeCount }).(pulumi.IntOutput)
}

// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
func (o LookupGcpNodePoolResultOutput) TotalMinNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) int { return v.TotalMinNodeCount }).(pulumi.IntOutput)
}

// Upgrade settings control disruption and speed of the upgrade.
func (o LookupGcpNodePoolResultOutput) UpgradeSettings() GetGcpNodePoolUpgradeSettingArrayOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) []GetGcpNodePoolUpgradeSetting { return v.UpgradeSettings }).(GetGcpNodePoolUpgradeSettingArrayOutput)
}

// The list of Google Compute Engine zones in which the NodePool's nodes should be located.
func (o LookupGcpNodePoolResultOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGcpNodePoolResult) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGcpNodePoolResultOutput{})
}
