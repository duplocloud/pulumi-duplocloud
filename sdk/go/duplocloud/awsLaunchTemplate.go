// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// duplocloud_aws_launch_template creates the new version over current launch template version
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myapp, err := duplocloud.NewTenant(ctx, "myapp", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("myapp"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAwsLaunchTemplate(ctx, "lt", &duplocloud.AwsLaunchTemplateArgs{
//				TenantId:           myapp.TenantId,
//				Name:               pulumi.String("launch-template-name"),
//				InstanceType:       pulumi.String("t3a.medium"),
//				Version:            pulumi.String("1"),
//				VersionDescription: pulumi.String("launch template description"),
//				Ami:                pulumi.String("ami-123test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing AWS launch template
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *NAME* is the name of the AWS launch template
//
//   - *VERSION* available version of launch template
//
// ```sh
// $ pulumi import duplocloud:index/awsLaunchTemplate:AwsLaunchTemplate lt *TENANT_ID*/launch-template/*NAME*/*VERSION*
// ```
type AwsLaunchTemplate struct {
	pulumi.CustomResourceState

	// Asg ami to be used to update the version from the current version
	Ami pulumi.StringPtrOutput `pulumi:"ami"`
	// The current default version of the launch template.
	DefaultVersion pulumi.StringOutput `pulumi:"defaultVersion"`
	// Asg instance type to be used to update the version from the current version
	InstanceType pulumi.StringPtrOutput `pulumi:"instanceType"`
	// The latest launch template version
	LatestVersion pulumi.StringOutput `pulumi:"latestVersion"`
	// The fullname of the asg group
	Name pulumi.StringOutput `pulumi:"name"`
	// The GUID of the tenant that the launch template will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Any of the existing version of the launch template
	Version pulumi.StringOutput `pulumi:"version"`
	// The version of the launch template
	VersionDescription pulumi.StringOutput `pulumi:"versionDescription"`
	VersionMetadata    pulumi.StringOutput `pulumi:"versionMetadata"`
}

// NewAwsLaunchTemplate registers a new resource with the given unique name, arguments, and options.
func NewAwsLaunchTemplate(ctx *pulumi.Context,
	name string, args *AwsLaunchTemplateArgs, opts ...pulumi.ResourceOption) (*AwsLaunchTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.VersionDescription == nil {
		return nil, errors.New("invalid value for required argument 'VersionDescription'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsLaunchTemplate
	err := ctx.RegisterResource("duplocloud:index/awsLaunchTemplate:AwsLaunchTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsLaunchTemplate gets an existing AwsLaunchTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsLaunchTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsLaunchTemplateState, opts ...pulumi.ResourceOption) (*AwsLaunchTemplate, error) {
	var resource AwsLaunchTemplate
	err := ctx.ReadResource("duplocloud:index/awsLaunchTemplate:AwsLaunchTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsLaunchTemplate resources.
type awsLaunchTemplateState struct {
	// Asg ami to be used to update the version from the current version
	Ami *string `pulumi:"ami"`
	// The current default version of the launch template.
	DefaultVersion *string `pulumi:"defaultVersion"`
	// Asg instance type to be used to update the version from the current version
	InstanceType *string `pulumi:"instanceType"`
	// The latest launch template version
	LatestVersion *string `pulumi:"latestVersion"`
	// The fullname of the asg group
	Name *string `pulumi:"name"`
	// The GUID of the tenant that the launch template will be created in.
	TenantId *string `pulumi:"tenantId"`
	// Any of the existing version of the launch template
	Version *string `pulumi:"version"`
	// The version of the launch template
	VersionDescription *string `pulumi:"versionDescription"`
	VersionMetadata    *string `pulumi:"versionMetadata"`
}

type AwsLaunchTemplateState struct {
	// Asg ami to be used to update the version from the current version
	Ami pulumi.StringPtrInput
	// The current default version of the launch template.
	DefaultVersion pulumi.StringPtrInput
	// Asg instance type to be used to update the version from the current version
	InstanceType pulumi.StringPtrInput
	// The latest launch template version
	LatestVersion pulumi.StringPtrInput
	// The fullname of the asg group
	Name pulumi.StringPtrInput
	// The GUID of the tenant that the launch template will be created in.
	TenantId pulumi.StringPtrInput
	// Any of the existing version of the launch template
	Version pulumi.StringPtrInput
	// The version of the launch template
	VersionDescription pulumi.StringPtrInput
	VersionMetadata    pulumi.StringPtrInput
}

func (AwsLaunchTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsLaunchTemplateState)(nil)).Elem()
}

type awsLaunchTemplateArgs struct {
	// Asg ami to be used to update the version from the current version
	Ami *string `pulumi:"ami"`
	// Asg instance type to be used to update the version from the current version
	InstanceType *string `pulumi:"instanceType"`
	// The fullname of the asg group
	Name *string `pulumi:"name"`
	// The GUID of the tenant that the launch template will be created in.
	TenantId string `pulumi:"tenantId"`
	// Any of the existing version of the launch template
	Version string `pulumi:"version"`
	// The version of the launch template
	VersionDescription string `pulumi:"versionDescription"`
}

// The set of arguments for constructing a AwsLaunchTemplate resource.
type AwsLaunchTemplateArgs struct {
	// Asg ami to be used to update the version from the current version
	Ami pulumi.StringPtrInput
	// Asg instance type to be used to update the version from the current version
	InstanceType pulumi.StringPtrInput
	// The fullname of the asg group
	Name pulumi.StringPtrInput
	// The GUID of the tenant that the launch template will be created in.
	TenantId pulumi.StringInput
	// Any of the existing version of the launch template
	Version pulumi.StringInput
	// The version of the launch template
	VersionDescription pulumi.StringInput
}

func (AwsLaunchTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsLaunchTemplateArgs)(nil)).Elem()
}

type AwsLaunchTemplateInput interface {
	pulumi.Input

	ToAwsLaunchTemplateOutput() AwsLaunchTemplateOutput
	ToAwsLaunchTemplateOutputWithContext(ctx context.Context) AwsLaunchTemplateOutput
}

func (*AwsLaunchTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsLaunchTemplate)(nil)).Elem()
}

func (i *AwsLaunchTemplate) ToAwsLaunchTemplateOutput() AwsLaunchTemplateOutput {
	return i.ToAwsLaunchTemplateOutputWithContext(context.Background())
}

func (i *AwsLaunchTemplate) ToAwsLaunchTemplateOutputWithContext(ctx context.Context) AwsLaunchTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLaunchTemplateOutput)
}

// AwsLaunchTemplateArrayInput is an input type that accepts AwsLaunchTemplateArray and AwsLaunchTemplateArrayOutput values.
// You can construct a concrete instance of `AwsLaunchTemplateArrayInput` via:
//
//	AwsLaunchTemplateArray{ AwsLaunchTemplateArgs{...} }
type AwsLaunchTemplateArrayInput interface {
	pulumi.Input

	ToAwsLaunchTemplateArrayOutput() AwsLaunchTemplateArrayOutput
	ToAwsLaunchTemplateArrayOutputWithContext(context.Context) AwsLaunchTemplateArrayOutput
}

type AwsLaunchTemplateArray []AwsLaunchTemplateInput

func (AwsLaunchTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsLaunchTemplate)(nil)).Elem()
}

func (i AwsLaunchTemplateArray) ToAwsLaunchTemplateArrayOutput() AwsLaunchTemplateArrayOutput {
	return i.ToAwsLaunchTemplateArrayOutputWithContext(context.Background())
}

func (i AwsLaunchTemplateArray) ToAwsLaunchTemplateArrayOutputWithContext(ctx context.Context) AwsLaunchTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLaunchTemplateArrayOutput)
}

// AwsLaunchTemplateMapInput is an input type that accepts AwsLaunchTemplateMap and AwsLaunchTemplateMapOutput values.
// You can construct a concrete instance of `AwsLaunchTemplateMapInput` via:
//
//	AwsLaunchTemplateMap{ "key": AwsLaunchTemplateArgs{...} }
type AwsLaunchTemplateMapInput interface {
	pulumi.Input

	ToAwsLaunchTemplateMapOutput() AwsLaunchTemplateMapOutput
	ToAwsLaunchTemplateMapOutputWithContext(context.Context) AwsLaunchTemplateMapOutput
}

type AwsLaunchTemplateMap map[string]AwsLaunchTemplateInput

func (AwsLaunchTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsLaunchTemplate)(nil)).Elem()
}

func (i AwsLaunchTemplateMap) ToAwsLaunchTemplateMapOutput() AwsLaunchTemplateMapOutput {
	return i.ToAwsLaunchTemplateMapOutputWithContext(context.Background())
}

func (i AwsLaunchTemplateMap) ToAwsLaunchTemplateMapOutputWithContext(ctx context.Context) AwsLaunchTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLaunchTemplateMapOutput)
}

type AwsLaunchTemplateOutput struct{ *pulumi.OutputState }

func (AwsLaunchTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsLaunchTemplate)(nil)).Elem()
}

func (o AwsLaunchTemplateOutput) ToAwsLaunchTemplateOutput() AwsLaunchTemplateOutput {
	return o
}

func (o AwsLaunchTemplateOutput) ToAwsLaunchTemplateOutputWithContext(ctx context.Context) AwsLaunchTemplateOutput {
	return o
}

// Asg ami to be used to update the version from the current version
func (o AwsLaunchTemplateOutput) Ami() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsLaunchTemplate) pulumi.StringPtrOutput { return v.Ami }).(pulumi.StringPtrOutput)
}

// The current default version of the launch template.
func (o AwsLaunchTemplateOutput) DefaultVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLaunchTemplate) pulumi.StringOutput { return v.DefaultVersion }).(pulumi.StringOutput)
}

// Asg instance type to be used to update the version from the current version
func (o AwsLaunchTemplateOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsLaunchTemplate) pulumi.StringPtrOutput { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// The latest launch template version
func (o AwsLaunchTemplateOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLaunchTemplate) pulumi.StringOutput { return v.LatestVersion }).(pulumi.StringOutput)
}

// The fullname of the asg group
func (o AwsLaunchTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLaunchTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The GUID of the tenant that the launch template will be created in.
func (o AwsLaunchTemplateOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLaunchTemplate) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Any of the existing version of the launch template
func (o AwsLaunchTemplateOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLaunchTemplate) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// The version of the launch template
func (o AwsLaunchTemplateOutput) VersionDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLaunchTemplate) pulumi.StringOutput { return v.VersionDescription }).(pulumi.StringOutput)
}

func (o AwsLaunchTemplateOutput) VersionMetadata() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsLaunchTemplate) pulumi.StringOutput { return v.VersionMetadata }).(pulumi.StringOutput)
}

type AwsLaunchTemplateArrayOutput struct{ *pulumi.OutputState }

func (AwsLaunchTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsLaunchTemplate)(nil)).Elem()
}

func (o AwsLaunchTemplateArrayOutput) ToAwsLaunchTemplateArrayOutput() AwsLaunchTemplateArrayOutput {
	return o
}

func (o AwsLaunchTemplateArrayOutput) ToAwsLaunchTemplateArrayOutputWithContext(ctx context.Context) AwsLaunchTemplateArrayOutput {
	return o
}

func (o AwsLaunchTemplateArrayOutput) Index(i pulumi.IntInput) AwsLaunchTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsLaunchTemplate {
		return vs[0].([]*AwsLaunchTemplate)[vs[1].(int)]
	}).(AwsLaunchTemplateOutput)
}

type AwsLaunchTemplateMapOutput struct{ *pulumi.OutputState }

func (AwsLaunchTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsLaunchTemplate)(nil)).Elem()
}

func (o AwsLaunchTemplateMapOutput) ToAwsLaunchTemplateMapOutput() AwsLaunchTemplateMapOutput {
	return o
}

func (o AwsLaunchTemplateMapOutput) ToAwsLaunchTemplateMapOutputWithContext(ctx context.Context) AwsLaunchTemplateMapOutput {
	return o
}

func (o AwsLaunchTemplateMapOutput) MapIndex(k pulumi.StringInput) AwsLaunchTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsLaunchTemplate {
		return vs[0].(map[string]*AwsLaunchTemplate)[vs[1].(string)]
	}).(AwsLaunchTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLaunchTemplateInput)(nil)).Elem(), &AwsLaunchTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLaunchTemplateArrayInput)(nil)).Elem(), AwsLaunchTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLaunchTemplateMapInput)(nil)).Elem(), AwsLaunchTemplateMap{})
	pulumi.RegisterOutputType(AwsLaunchTemplateOutput{})
	pulumi.RegisterOutputType(AwsLaunchTemplateArrayOutput{})
	pulumi.RegisterOutputType(AwsLaunchTemplateMapOutput{})
}
