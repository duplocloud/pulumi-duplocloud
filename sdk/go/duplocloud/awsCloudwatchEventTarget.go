// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AwsCloudwatchEventTarget` manages an AWS cloudwatch event target in Duplo.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := duplocloud.NewTenant(ctx, "duplo-app", &duplocloud.TenantArgs{
//				AccountName: pulumi.String("duplo-app"),
//				PlanId:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			cwErule, err := duplocloud.NewAwsCloudwatchEventRule(ctx, "cw_erule", &duplocloud.AwsCloudwatchEventRuleArgs{
//				TenantId:           duplo_app.TenantId,
//				Name:               pulumi.String("cw_erule"),
//				Description:        pulumi.String("this is a test cloudwatch event rule."),
//				ScheduleExpression: pulumi.String("rate(10 minutes)"),
//				State:              pulumi.String("DISABLED"),
//				Tags: duplocloud.AwsCloudwatchEventRuleTagArray{
//					&duplocloud.AwsCloudwatchEventRuleTagArgs{
//						Key:   pulumi.String("CreatedBy"),
//						Value: pulumi.String("Duplo"),
//					},
//					&duplocloud.AwsCloudwatchEventRuleTagArgs{
//						Key:   pulumi.String("CreatedFrom"),
//						Value: pulumi.String("Duplo"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAwsCloudwatchEventTarget(ctx, "cw_etarget1", &duplocloud.AwsCloudwatchEventTargetArgs{
//				TenantId:  duplo_app.TenantId,
//				RuleName:  cwErule.Fullname,
//				TargetArn: pulumi.String("arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag"),
//				TargetId:  pulumi.String("lamda-tst1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = duplocloud.NewAwsCloudwatchEventTarget(ctx, "cw_etarget2", &duplocloud.AwsCloudwatchEventTargetArgs{
//				TenantId:  duplo_app.TenantId,
//				RuleName:  cwErule.Fullname,
//				TargetArn: pulumi.String("arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag"),
//				TargetId:  pulumi.String("lamda-tst2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Example: Importing an existing AWS cloudwatch event target
//
//   - *TENANT_ID* is the tenant GUID
//
//   - *FRIENDLY_NAME* is the duploservices-<account_name>-<name_of_event_rule>
//
//   - *TARGET_ID* The unique target assignment ID.
//
// ```sh
// $ pulumi import duplocloud:index/awsCloudwatchEventTarget:AwsCloudwatchEventTarget myEventTarget *TENANT_ID*/*FRIENDLY_NAME*/*TARGET_ID*
// ```
type AwsCloudwatchEventTarget struct {
	pulumi.CustomResourceState

	// The event bus to associate with the rule. If you omit this, the default event bus is used.
	EventBusName pulumi.StringOutput `pulumi:"eventBusName"`
	// Valid JSON text passed to the target.
	Input pulumi.StringOutput `pulumi:"input"`
	// The Amazon Resource Name (ARN) associated with the role that is used for target invocation.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// The name of the rule you want to add targets to.
	RuleName pulumi.StringOutput `pulumi:"ruleName"`
	// The Amazon Resource Name (ARN) of the target.
	TargetArn pulumi.StringOutput `pulumi:"targetArn"`
	// The unique target assignment ID.
	TargetId pulumi.StringOutput `pulumi:"targetId"`
	// The GUID of the tenant that the cloudwatch event target will be created in.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewAwsCloudwatchEventTarget registers a new resource with the given unique name, arguments, and options.
func NewAwsCloudwatchEventTarget(ctx *pulumi.Context,
	name string, args *AwsCloudwatchEventTargetArgs, opts ...pulumi.ResourceOption) (*AwsCloudwatchEventTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RuleName == nil {
		return nil, errors.New("invalid value for required argument 'RuleName'")
	}
	if args.TargetArn == nil {
		return nil, errors.New("invalid value for required argument 'TargetArn'")
	}
	if args.TargetId == nil {
		return nil, errors.New("invalid value for required argument 'TargetId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsCloudwatchEventTarget
	err := ctx.RegisterResource("duplocloud:index/awsCloudwatchEventTarget:AwsCloudwatchEventTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsCloudwatchEventTarget gets an existing AwsCloudwatchEventTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsCloudwatchEventTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsCloudwatchEventTargetState, opts ...pulumi.ResourceOption) (*AwsCloudwatchEventTarget, error) {
	var resource AwsCloudwatchEventTarget
	err := ctx.ReadResource("duplocloud:index/awsCloudwatchEventTarget:AwsCloudwatchEventTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsCloudwatchEventTarget resources.
type awsCloudwatchEventTargetState struct {
	// The event bus to associate with the rule. If you omit this, the default event bus is used.
	EventBusName *string `pulumi:"eventBusName"`
	// Valid JSON text passed to the target.
	Input *string `pulumi:"input"`
	// The Amazon Resource Name (ARN) associated with the role that is used for target invocation.
	RoleArn *string `pulumi:"roleArn"`
	// The name of the rule you want to add targets to.
	RuleName *string `pulumi:"ruleName"`
	// The Amazon Resource Name (ARN) of the target.
	TargetArn *string `pulumi:"targetArn"`
	// The unique target assignment ID.
	TargetId *string `pulumi:"targetId"`
	// The GUID of the tenant that the cloudwatch event target will be created in.
	TenantId *string `pulumi:"tenantId"`
}

type AwsCloudwatchEventTargetState struct {
	// The event bus to associate with the rule. If you omit this, the default event bus is used.
	EventBusName pulumi.StringPtrInput
	// Valid JSON text passed to the target.
	Input pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) associated with the role that is used for target invocation.
	RoleArn pulumi.StringPtrInput
	// The name of the rule you want to add targets to.
	RuleName pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the target.
	TargetArn pulumi.StringPtrInput
	// The unique target assignment ID.
	TargetId pulumi.StringPtrInput
	// The GUID of the tenant that the cloudwatch event target will be created in.
	TenantId pulumi.StringPtrInput
}

func (AwsCloudwatchEventTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsCloudwatchEventTargetState)(nil)).Elem()
}

type awsCloudwatchEventTargetArgs struct {
	// The event bus to associate with the rule. If you omit this, the default event bus is used.
	EventBusName *string `pulumi:"eventBusName"`
	// Valid JSON text passed to the target.
	Input *string `pulumi:"input"`
	// The Amazon Resource Name (ARN) associated with the role that is used for target invocation.
	RoleArn *string `pulumi:"roleArn"`
	// The name of the rule you want to add targets to.
	RuleName string `pulumi:"ruleName"`
	// The Amazon Resource Name (ARN) of the target.
	TargetArn string `pulumi:"targetArn"`
	// The unique target assignment ID.
	TargetId string `pulumi:"targetId"`
	// The GUID of the tenant that the cloudwatch event target will be created in.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AwsCloudwatchEventTarget resource.
type AwsCloudwatchEventTargetArgs struct {
	// The event bus to associate with the rule. If you omit this, the default event bus is used.
	EventBusName pulumi.StringPtrInput
	// Valid JSON text passed to the target.
	Input pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) associated with the role that is used for target invocation.
	RoleArn pulumi.StringPtrInput
	// The name of the rule you want to add targets to.
	RuleName pulumi.StringInput
	// The Amazon Resource Name (ARN) of the target.
	TargetArn pulumi.StringInput
	// The unique target assignment ID.
	TargetId pulumi.StringInput
	// The GUID of the tenant that the cloudwatch event target will be created in.
	TenantId pulumi.StringInput
}

func (AwsCloudwatchEventTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsCloudwatchEventTargetArgs)(nil)).Elem()
}

type AwsCloudwatchEventTargetInput interface {
	pulumi.Input

	ToAwsCloudwatchEventTargetOutput() AwsCloudwatchEventTargetOutput
	ToAwsCloudwatchEventTargetOutputWithContext(ctx context.Context) AwsCloudwatchEventTargetOutput
}

func (*AwsCloudwatchEventTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsCloudwatchEventTarget)(nil)).Elem()
}

func (i *AwsCloudwatchEventTarget) ToAwsCloudwatchEventTargetOutput() AwsCloudwatchEventTargetOutput {
	return i.ToAwsCloudwatchEventTargetOutputWithContext(context.Background())
}

func (i *AwsCloudwatchEventTarget) ToAwsCloudwatchEventTargetOutputWithContext(ctx context.Context) AwsCloudwatchEventTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCloudwatchEventTargetOutput)
}

// AwsCloudwatchEventTargetArrayInput is an input type that accepts AwsCloudwatchEventTargetArray and AwsCloudwatchEventTargetArrayOutput values.
// You can construct a concrete instance of `AwsCloudwatchEventTargetArrayInput` via:
//
//	AwsCloudwatchEventTargetArray{ AwsCloudwatchEventTargetArgs{...} }
type AwsCloudwatchEventTargetArrayInput interface {
	pulumi.Input

	ToAwsCloudwatchEventTargetArrayOutput() AwsCloudwatchEventTargetArrayOutput
	ToAwsCloudwatchEventTargetArrayOutputWithContext(context.Context) AwsCloudwatchEventTargetArrayOutput
}

type AwsCloudwatchEventTargetArray []AwsCloudwatchEventTargetInput

func (AwsCloudwatchEventTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsCloudwatchEventTarget)(nil)).Elem()
}

func (i AwsCloudwatchEventTargetArray) ToAwsCloudwatchEventTargetArrayOutput() AwsCloudwatchEventTargetArrayOutput {
	return i.ToAwsCloudwatchEventTargetArrayOutputWithContext(context.Background())
}

func (i AwsCloudwatchEventTargetArray) ToAwsCloudwatchEventTargetArrayOutputWithContext(ctx context.Context) AwsCloudwatchEventTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCloudwatchEventTargetArrayOutput)
}

// AwsCloudwatchEventTargetMapInput is an input type that accepts AwsCloudwatchEventTargetMap and AwsCloudwatchEventTargetMapOutput values.
// You can construct a concrete instance of `AwsCloudwatchEventTargetMapInput` via:
//
//	AwsCloudwatchEventTargetMap{ "key": AwsCloudwatchEventTargetArgs{...} }
type AwsCloudwatchEventTargetMapInput interface {
	pulumi.Input

	ToAwsCloudwatchEventTargetMapOutput() AwsCloudwatchEventTargetMapOutput
	ToAwsCloudwatchEventTargetMapOutputWithContext(context.Context) AwsCloudwatchEventTargetMapOutput
}

type AwsCloudwatchEventTargetMap map[string]AwsCloudwatchEventTargetInput

func (AwsCloudwatchEventTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsCloudwatchEventTarget)(nil)).Elem()
}

func (i AwsCloudwatchEventTargetMap) ToAwsCloudwatchEventTargetMapOutput() AwsCloudwatchEventTargetMapOutput {
	return i.ToAwsCloudwatchEventTargetMapOutputWithContext(context.Background())
}

func (i AwsCloudwatchEventTargetMap) ToAwsCloudwatchEventTargetMapOutputWithContext(ctx context.Context) AwsCloudwatchEventTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCloudwatchEventTargetMapOutput)
}

type AwsCloudwatchEventTargetOutput struct{ *pulumi.OutputState }

func (AwsCloudwatchEventTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsCloudwatchEventTarget)(nil)).Elem()
}

func (o AwsCloudwatchEventTargetOutput) ToAwsCloudwatchEventTargetOutput() AwsCloudwatchEventTargetOutput {
	return o
}

func (o AwsCloudwatchEventTargetOutput) ToAwsCloudwatchEventTargetOutputWithContext(ctx context.Context) AwsCloudwatchEventTargetOutput {
	return o
}

// The event bus to associate with the rule. If you omit this, the default event bus is used.
func (o AwsCloudwatchEventTargetOutput) EventBusName() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCloudwatchEventTarget) pulumi.StringOutput { return v.EventBusName }).(pulumi.StringOutput)
}

// Valid JSON text passed to the target.
func (o AwsCloudwatchEventTargetOutput) Input() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCloudwatchEventTarget) pulumi.StringOutput { return v.Input }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) associated with the role that is used for target invocation.
func (o AwsCloudwatchEventTargetOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCloudwatchEventTarget) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// The name of the rule you want to add targets to.
func (o AwsCloudwatchEventTargetOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCloudwatchEventTarget) pulumi.StringOutput { return v.RuleName }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the target.
func (o AwsCloudwatchEventTargetOutput) TargetArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCloudwatchEventTarget) pulumi.StringOutput { return v.TargetArn }).(pulumi.StringOutput)
}

// The unique target assignment ID.
func (o AwsCloudwatchEventTargetOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCloudwatchEventTarget) pulumi.StringOutput { return v.TargetId }).(pulumi.StringOutput)
}

// The GUID of the tenant that the cloudwatch event target will be created in.
func (o AwsCloudwatchEventTargetOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCloudwatchEventTarget) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type AwsCloudwatchEventTargetArrayOutput struct{ *pulumi.OutputState }

func (AwsCloudwatchEventTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsCloudwatchEventTarget)(nil)).Elem()
}

func (o AwsCloudwatchEventTargetArrayOutput) ToAwsCloudwatchEventTargetArrayOutput() AwsCloudwatchEventTargetArrayOutput {
	return o
}

func (o AwsCloudwatchEventTargetArrayOutput) ToAwsCloudwatchEventTargetArrayOutputWithContext(ctx context.Context) AwsCloudwatchEventTargetArrayOutput {
	return o
}

func (o AwsCloudwatchEventTargetArrayOutput) Index(i pulumi.IntInput) AwsCloudwatchEventTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsCloudwatchEventTarget {
		return vs[0].([]*AwsCloudwatchEventTarget)[vs[1].(int)]
	}).(AwsCloudwatchEventTargetOutput)
}

type AwsCloudwatchEventTargetMapOutput struct{ *pulumi.OutputState }

func (AwsCloudwatchEventTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsCloudwatchEventTarget)(nil)).Elem()
}

func (o AwsCloudwatchEventTargetMapOutput) ToAwsCloudwatchEventTargetMapOutput() AwsCloudwatchEventTargetMapOutput {
	return o
}

func (o AwsCloudwatchEventTargetMapOutput) ToAwsCloudwatchEventTargetMapOutputWithContext(ctx context.Context) AwsCloudwatchEventTargetMapOutput {
	return o
}

func (o AwsCloudwatchEventTargetMapOutput) MapIndex(k pulumi.StringInput) AwsCloudwatchEventTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsCloudwatchEventTarget {
		return vs[0].(map[string]*AwsCloudwatchEventTarget)[vs[1].(string)]
	}).(AwsCloudwatchEventTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsCloudwatchEventTargetInput)(nil)).Elem(), &AwsCloudwatchEventTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsCloudwatchEventTargetArrayInput)(nil)).Elem(), AwsCloudwatchEventTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsCloudwatchEventTargetMapInput)(nil)).Elem(), AwsCloudwatchEventTargetMap{})
	pulumi.RegisterOutputType(AwsCloudwatchEventTargetOutput{})
	pulumi.RegisterOutputType(AwsCloudwatchEventTargetArrayOutput{})
	pulumi.RegisterOutputType(AwsCloudwatchEventTargetMapOutput{})
}
