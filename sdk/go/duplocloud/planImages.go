// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package duplocloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/duplocloud/pulumi-duplocloud/sdk/go/duplocloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `PlanImages` manages the list of images avaialble to a plan in Duplo.
//
// This resource allows you take control of individual images for a specific plan.
//
// ## Import
//
// ```sh
// $ pulumi import duplocloud:index/planImages:PlanImages myplan PLAN_ID/WAF_NAME
// ```
type PlanImages struct {
	pulumi.CustomResourceState

	// Whether or not this resource should delete any images not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedImages pulumi.BoolPtrOutput `pulumi:"deleteUnspecifiedImages"`
	// A list of images to manage.
	Image PlanImagesImageArrayOutput `pulumi:"image"`
	// A complete list of images for this plan, even ones not being managed by this resource.
	Images PlanImagesImageArrayOutput `pulumi:"images"`
	// The ID of the plan to configure.
	PlanId pulumi.StringOutput `pulumi:"planId"`
	// A list of image names being managed by this resource.
	SpecifiedImages pulumi.StringArrayOutput `pulumi:"specifiedImages"`
}

// NewPlanImages registers a new resource with the given unique name, arguments, and options.
func NewPlanImages(ctx *pulumi.Context,
	name string, args *PlanImagesArgs, opts ...pulumi.ResourceOption) (*PlanImages, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlanId == nil {
		return nil, errors.New("invalid value for required argument 'PlanId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PlanImages
	err := ctx.RegisterResource("duplocloud:index/planImages:PlanImages", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlanImages gets an existing PlanImages resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlanImages(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlanImagesState, opts ...pulumi.ResourceOption) (*PlanImages, error) {
	var resource PlanImages
	err := ctx.ReadResource("duplocloud:index/planImages:PlanImages", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlanImages resources.
type planImagesState struct {
	// Whether or not this resource should delete any images not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedImages *bool `pulumi:"deleteUnspecifiedImages"`
	// A list of images to manage.
	Image []PlanImagesImage `pulumi:"image"`
	// A complete list of images for this plan, even ones not being managed by this resource.
	Images []PlanImagesImage `pulumi:"images"`
	// The ID of the plan to configure.
	PlanId *string `pulumi:"planId"`
	// A list of image names being managed by this resource.
	SpecifiedImages []string `pulumi:"specifiedImages"`
}

type PlanImagesState struct {
	// Whether or not this resource should delete any images not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedImages pulumi.BoolPtrInput
	// A list of images to manage.
	Image PlanImagesImageArrayInput
	// A complete list of images for this plan, even ones not being managed by this resource.
	Images PlanImagesImageArrayInput
	// The ID of the plan to configure.
	PlanId pulumi.StringPtrInput
	// A list of image names being managed by this resource.
	SpecifiedImages pulumi.StringArrayInput
}

func (PlanImagesState) ElementType() reflect.Type {
	return reflect.TypeOf((*planImagesState)(nil)).Elem()
}

type planImagesArgs struct {
	// Whether or not this resource should delete any images not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedImages *bool `pulumi:"deleteUnspecifiedImages"`
	// A list of images to manage.
	Image []PlanImagesImage `pulumi:"image"`
	// The ID of the plan to configure.
	PlanId string `pulumi:"planId"`
}

// The set of arguments for constructing a PlanImages resource.
type PlanImagesArgs struct {
	// Whether or not this resource should delete any images not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
	DeleteUnspecifiedImages pulumi.BoolPtrInput
	// A list of images to manage.
	Image PlanImagesImageArrayInput
	// The ID of the plan to configure.
	PlanId pulumi.StringInput
}

func (PlanImagesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*planImagesArgs)(nil)).Elem()
}

type PlanImagesInput interface {
	pulumi.Input

	ToPlanImagesOutput() PlanImagesOutput
	ToPlanImagesOutputWithContext(ctx context.Context) PlanImagesOutput
}

func (*PlanImages) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanImages)(nil)).Elem()
}

func (i *PlanImages) ToPlanImagesOutput() PlanImagesOutput {
	return i.ToPlanImagesOutputWithContext(context.Background())
}

func (i *PlanImages) ToPlanImagesOutputWithContext(ctx context.Context) PlanImagesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanImagesOutput)
}

// PlanImagesArrayInput is an input type that accepts PlanImagesArray and PlanImagesArrayOutput values.
// You can construct a concrete instance of `PlanImagesArrayInput` via:
//
//	PlanImagesArray{ PlanImagesArgs{...} }
type PlanImagesArrayInput interface {
	pulumi.Input

	ToPlanImagesArrayOutput() PlanImagesArrayOutput
	ToPlanImagesArrayOutputWithContext(context.Context) PlanImagesArrayOutput
}

type PlanImagesArray []PlanImagesInput

func (PlanImagesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlanImages)(nil)).Elem()
}

func (i PlanImagesArray) ToPlanImagesArrayOutput() PlanImagesArrayOutput {
	return i.ToPlanImagesArrayOutputWithContext(context.Background())
}

func (i PlanImagesArray) ToPlanImagesArrayOutputWithContext(ctx context.Context) PlanImagesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanImagesArrayOutput)
}

// PlanImagesMapInput is an input type that accepts PlanImagesMap and PlanImagesMapOutput values.
// You can construct a concrete instance of `PlanImagesMapInput` via:
//
//	PlanImagesMap{ "key": PlanImagesArgs{...} }
type PlanImagesMapInput interface {
	pulumi.Input

	ToPlanImagesMapOutput() PlanImagesMapOutput
	ToPlanImagesMapOutputWithContext(context.Context) PlanImagesMapOutput
}

type PlanImagesMap map[string]PlanImagesInput

func (PlanImagesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlanImages)(nil)).Elem()
}

func (i PlanImagesMap) ToPlanImagesMapOutput() PlanImagesMapOutput {
	return i.ToPlanImagesMapOutputWithContext(context.Background())
}

func (i PlanImagesMap) ToPlanImagesMapOutputWithContext(ctx context.Context) PlanImagesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanImagesMapOutput)
}

type PlanImagesOutput struct{ *pulumi.OutputState }

func (PlanImagesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanImages)(nil)).Elem()
}

func (o PlanImagesOutput) ToPlanImagesOutput() PlanImagesOutput {
	return o
}

func (o PlanImagesOutput) ToPlanImagesOutputWithContext(ctx context.Context) PlanImagesOutput {
	return o
}

// Whether or not this resource should delete any images not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
func (o PlanImagesOutput) DeleteUnspecifiedImages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanImages) pulumi.BoolPtrOutput { return v.DeleteUnspecifiedImages }).(pulumi.BoolPtrOutput)
}

// A list of images to manage.
func (o PlanImagesOutput) Image() PlanImagesImageArrayOutput {
	return o.ApplyT(func(v *PlanImages) PlanImagesImageArrayOutput { return v.Image }).(PlanImagesImageArrayOutput)
}

// A complete list of images for this plan, even ones not being managed by this resource.
func (o PlanImagesOutput) Images() PlanImagesImageArrayOutput {
	return o.ApplyT(func(v *PlanImages) PlanImagesImageArrayOutput { return v.Images }).(PlanImagesImageArrayOutput)
}

// The ID of the plan to configure.
func (o PlanImagesOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *PlanImages) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

// A list of image names being managed by this resource.
func (o PlanImagesOutput) SpecifiedImages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlanImages) pulumi.StringArrayOutput { return v.SpecifiedImages }).(pulumi.StringArrayOutput)
}

type PlanImagesArrayOutput struct{ *pulumi.OutputState }

func (PlanImagesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlanImages)(nil)).Elem()
}

func (o PlanImagesArrayOutput) ToPlanImagesArrayOutput() PlanImagesArrayOutput {
	return o
}

func (o PlanImagesArrayOutput) ToPlanImagesArrayOutputWithContext(ctx context.Context) PlanImagesArrayOutput {
	return o
}

func (o PlanImagesArrayOutput) Index(i pulumi.IntInput) PlanImagesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PlanImages {
		return vs[0].([]*PlanImages)[vs[1].(int)]
	}).(PlanImagesOutput)
}

type PlanImagesMapOutput struct{ *pulumi.OutputState }

func (PlanImagesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlanImages)(nil)).Elem()
}

func (o PlanImagesMapOutput) ToPlanImagesMapOutput() PlanImagesMapOutput {
	return o
}

func (o PlanImagesMapOutput) ToPlanImagesMapOutputWithContext(ctx context.Context) PlanImagesMapOutput {
	return o
}

func (o PlanImagesMapOutput) MapIndex(k pulumi.StringInput) PlanImagesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PlanImages {
		return vs[0].(map[string]*PlanImages)[vs[1].(string)]
	}).(PlanImagesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlanImagesInput)(nil)).Elem(), &PlanImages{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanImagesArrayInput)(nil)).Elem(), PlanImagesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanImagesMapInput)(nil)).Elem(), PlanImagesMap{})
	pulumi.RegisterOutputType(PlanImagesOutput{})
	pulumi.RegisterOutputType(PlanImagesArrayOutput{})
	pulumi.RegisterOutputType(PlanImagesMapOutput{})
}
