// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### Create an Amazon ElastiCache cluster of type Redis.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Before creating a ElastiCache cluster, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.
 * const infra = new duplocloud.Infrastructure("infra", {
 *     infraName: "prod",
 *     cloud: 0,
 *     region: "us-west-2",
 *     enableK8Cluster: false,
 *     addressPrefix: "10.11.0.0/16",
 * });
 * // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "prod",
 *     planId: infra.infraName,
 * });
 * // Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.
 * const redisCache = new duplocloud.EcacheInstance("redis_cache", {
 *     tenantId: tenant.tenantId,
 *     name: "mycache",
 *     cacheType: 0,
 *     replicas: 1,
 *     size: "cache.t2.small",
 *     enableClusterMode: true,
 *     numberOfShards: 1,
 * });
 * ```
 *
 * ### Create an Amazon ElastiCache cluster of type Redis with 2 replicas of type cache.t2.small in dev tenant.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.
 * const tenant = duplocloud.getTenant({
 *     name: "dev",
 * });
 * // Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.
 * const redisCache = new duplocloud.EcacheInstance("redis_cache", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "mycache",
 *     cacheType: 0,
 *     replicas: 2,
 *     size: "cache.t2.small",
 *     enableClusterMode: true,
 *     numberOfShards: 1,
 * });
 * ```
 *
 * ### Create an Amazon ElastiCache of type Redis with log delivery configuration and automatic failover enabled in dev tenant.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.
 * const tenant = duplocloud.getTenant({
 *     name: "dev",
 * });
 * // Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache.
 * const redisCache = new duplocloud.EcacheInstance("redis_cache", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "mycache",
 *     cacheType: 0,
 *     replicas: 2,
 *     size: "cache.t2.small",
 *     automaticFailoverEnabled: true,
 *     logDeliveryConfigurations: [
 *         {
 *             logGroup: "/elasticache/redis",
 *             destinationType: "cloudwatch-logs",
 *             logFormat: "text",
 *             logType: "slow-log",
 *         },
 *         {
 *             logGroup: "/elasticache/redis",
 *             destinationType: "cloudwatch-logs",
 *             logFormat: "json",
 *             logType: "engine-log",
 *         },
 *     ],
 * });
 * ```
 *
 * ### Set up an ElastiCache Redis cluster with 2 shards and 2 cache.t2.small replicas in the dev tenant.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.
 * const tenant = duplocloud.getTenant({
 *     name: "dev",
 * });
 * // Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the Redis ElastiCache cluster.
 * const redisCache = new duplocloud.EcacheInstance("redis_cache", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "mycache",
 *     cacheType: 0,
 *     replicas: 2,
 *     size: "cache.t2.small",
 *     enableClusterMode: true,
 *     numberOfShards: 2,
 * });
 * ```
 *
 * ### Create an Amazon ElastiCache cluster of type Memcached.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Assuming the 'dev' tenant is already created, use a data source to fetch the tenant ID.
 * const tenant = duplocloud.getTenant({
 *     name: "dev",
 * });
 * // Use the tenant_id from the duplocloud_tenant data source, which will be populated after the tenant data source is created, when setting up the Memcached ElastiCache cluster.
 * const memCache = new duplocloud.EcacheInstance("mem_cache", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "mycache",
 *     cacheType: 1,
 *     replicas: 1,
 *     size: "cache.t2.small",
 * });
 * ```
 *
 * ### Create an Amazon ElastiCache with snapshot window
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const mycaches = new duplocloud.EcacheInstance("mycaches", {
 *     tenantId: tenant.id,
 *     name: "mycache",
 *     cacheType: 0,
 *     replicas: 2,
 *     size: "cache.t3.small",
 *     engineVersion: "7.1",
 *     snapshotWindow: "04:00-13:00",
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing AWS ElastiCache cluster
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *SHORT_NAME* is the short name of the AWS ElastiCache cluster
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/ecacheInstance:EcacheInstance mycluster v2/subscriptions/*TENANT_ID*&#47;ECacheDBInstance/*SHORT_NAME*
 * ```
 */
export class EcacheInstance extends pulumi.CustomResource {
    /**
     * Get an existing EcacheInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcacheInstanceState, opts?: pulumi.CustomResourceOptions): EcacheInstance {
        return new EcacheInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/ecacheInstance:EcacheInstance';

    /**
     * Returns true if the given object is an instance of EcacheInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcacheInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcacheInstance.__pulumiType;
    }

    /**
     * The ARN of the elasticache instance.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Set a password for authenticating to the ElastiCache instance.  Only supported if `encryptionInTransit` is to to `true`.
     */
    public readonly authToken!: pulumi.Output<string | undefined>;
    /**
     * Enables automatic failover.
     */
    public readonly automaticFailoverEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The numerical index of elasticache instance type. Should be one of: - `0` : Redis - `1` : Memcache
     */
    public readonly cacheType!: pulumi.Output<number | undefined>;
    /**
     * Flag to enable/disable redis cluster mode.
     */
    public readonly enableClusterMode!: pulumi.Output<boolean>;
    /**
     * Enables encryption-at-rest.
     */
    public readonly encryptionAtRest!: pulumi.Output<boolean | undefined>;
    /**
     * Enables encryption-in-transit.
     */
    public readonly encryptionInTransit!: pulumi.Output<boolean | undefined>;
    /**
     * The endpoint of the elasticache instance.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * The engine version of the elastic instance. See AWS documentation for the [available Redis instance
     * types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/supported-engine-versions.html) or the [available
     * Memcached instance
     * types](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/supported-engine-versions-mc.html).
     */
    public readonly engineVersion!: pulumi.Output<string | undefined>;
    /**
     * The DNS hostname of the elasticache instance.
     */
    public /*out*/ readonly host!: pulumi.Output<string>;
    /**
     * The full name of the elasticache instance.
     */
    public /*out*/ readonly identifier!: pulumi.Output<string>;
    /**
     * The status of the elasticache instance.
     */
    public /*out*/ readonly instanceStatus!: pulumi.Output<string>;
    /**
     * The globally unique identifier for the key.
     */
    public readonly kmsKeyId!: pulumi.Output<string>;
    public readonly logDeliveryConfigurations!: pulumi.Output<outputs.EcacheInstanceLogDeliveryConfiguration[] | undefined>;
    /**
     * The short name of the elasticache instance.  Duplo will add a prefix to the name.  You can retrieve the full name from the `identifier` attribute.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of shards to create. Applicable only if enableClusterMode is set to true
     */
    public readonly numberOfShards!: pulumi.Output<number>;
    /**
     * The REDIS parameter group to supply.
     */
    public readonly parameterGroupName!: pulumi.Output<string>;
    /**
     * The listening port of the elasticache instance.
     */
    public /*out*/ readonly port!: pulumi.Output<number>;
    /**
     * The number of replicas to create. Supported number of replicas is 1 to 6
     */
    public readonly replicas!: pulumi.Output<number | undefined>;
    /**
     * The instance type of the elasticache instance.
     * See AWS documentation for the [available instance types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html).
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * Specify the ARN of a Redis RDB snapshot file stored in Amazon S3. User should have the access to export snapshot to s3
     * bucket. One can find steps to provide access to export snapshot to s3 on following link
     * https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html
     */
    public readonly snapshotArns!: pulumi.Output<string[]>;
    /**
     * Select the snapshot/backup you want to use for creating redis.
     */
    public readonly snapshotName!: pulumi.Output<string>;
    /**
     * Specify retention limit in days. Accepted values - 1-35.
     */
    public readonly snapshotRetentionLimit!: pulumi.Output<number>;
    /**
     * Specify snapshot window limit The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of
     * your node group (shard). Example: 05:00-09:00. If you do not specify this parameter, ElastiCache automatically chooses
     * an appropriate time range.
     */
    public readonly snapshotWindow!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the elasticache instance will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a EcacheInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcacheInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcacheInstanceArgs | EcacheInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcacheInstanceState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authToken"] = state ? state.authToken : undefined;
            resourceInputs["automaticFailoverEnabled"] = state ? state.automaticFailoverEnabled : undefined;
            resourceInputs["cacheType"] = state ? state.cacheType : undefined;
            resourceInputs["enableClusterMode"] = state ? state.enableClusterMode : undefined;
            resourceInputs["encryptionAtRest"] = state ? state.encryptionAtRest : undefined;
            resourceInputs["encryptionInTransit"] = state ? state.encryptionInTransit : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["instanceStatus"] = state ? state.instanceStatus : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["logDeliveryConfigurations"] = state ? state.logDeliveryConfigurations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfShards"] = state ? state.numberOfShards : undefined;
            resourceInputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotArns"] = state ? state.snapshotArns : undefined;
            resourceInputs["snapshotName"] = state ? state.snapshotName : undefined;
            resourceInputs["snapshotRetentionLimit"] = state ? state.snapshotRetentionLimit : undefined;
            resourceInputs["snapshotWindow"] = state ? state.snapshotWindow : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as EcacheInstanceArgs | undefined;
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["authToken"] = args ? args.authToken : undefined;
            resourceInputs["automaticFailoverEnabled"] = args ? args.automaticFailoverEnabled : undefined;
            resourceInputs["cacheType"] = args ? args.cacheType : undefined;
            resourceInputs["enableClusterMode"] = args ? args.enableClusterMode : undefined;
            resourceInputs["encryptionAtRest"] = args ? args.encryptionAtRest : undefined;
            resourceInputs["encryptionInTransit"] = args ? args.encryptionInTransit : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["logDeliveryConfigurations"] = args ? args.logDeliveryConfigurations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfShards"] = args ? args.numberOfShards : undefined;
            resourceInputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshotArns"] = args ? args.snapshotArns : undefined;
            resourceInputs["snapshotName"] = args ? args.snapshotName : undefined;
            resourceInputs["snapshotRetentionLimit"] = args ? args.snapshotRetentionLimit : undefined;
            resourceInputs["snapshotWindow"] = args ? args.snapshotWindow : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["identifier"] = undefined /*out*/;
            resourceInputs["instanceStatus"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcacheInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EcacheInstance resources.
 */
export interface EcacheInstanceState {
    /**
     * The ARN of the elasticache instance.
     */
    arn?: pulumi.Input<string>;
    /**
     * Set a password for authenticating to the ElastiCache instance.  Only supported if `encryptionInTransit` is to to `true`.
     */
    authToken?: pulumi.Input<string>;
    /**
     * Enables automatic failover.
     */
    automaticFailoverEnabled?: pulumi.Input<boolean>;
    /**
     * The numerical index of elasticache instance type. Should be one of: - `0` : Redis - `1` : Memcache
     */
    cacheType?: pulumi.Input<number>;
    /**
     * Flag to enable/disable redis cluster mode.
     */
    enableClusterMode?: pulumi.Input<boolean>;
    /**
     * Enables encryption-at-rest.
     */
    encryptionAtRest?: pulumi.Input<boolean>;
    /**
     * Enables encryption-in-transit.
     */
    encryptionInTransit?: pulumi.Input<boolean>;
    /**
     * The endpoint of the elasticache instance.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The engine version of the elastic instance. See AWS documentation for the [available Redis instance
     * types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/supported-engine-versions.html) or the [available
     * Memcached instance
     * types](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/supported-engine-versions-mc.html).
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * The DNS hostname of the elasticache instance.
     */
    host?: pulumi.Input<string>;
    /**
     * The full name of the elasticache instance.
     */
    identifier?: pulumi.Input<string>;
    /**
     * The status of the elasticache instance.
     */
    instanceStatus?: pulumi.Input<string>;
    /**
     * The globally unique identifier for the key.
     */
    kmsKeyId?: pulumi.Input<string>;
    logDeliveryConfigurations?: pulumi.Input<pulumi.Input<inputs.EcacheInstanceLogDeliveryConfiguration>[]>;
    /**
     * The short name of the elasticache instance.  Duplo will add a prefix to the name.  You can retrieve the full name from the `identifier` attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of shards to create. Applicable only if enableClusterMode is set to true
     */
    numberOfShards?: pulumi.Input<number>;
    /**
     * The REDIS parameter group to supply.
     */
    parameterGroupName?: pulumi.Input<string>;
    /**
     * The listening port of the elasticache instance.
     */
    port?: pulumi.Input<number>;
    /**
     * The number of replicas to create. Supported number of replicas is 1 to 6
     */
    replicas?: pulumi.Input<number>;
    /**
     * The instance type of the elasticache instance.
     * See AWS documentation for the [available instance types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html).
     */
    size?: pulumi.Input<string>;
    /**
     * Specify the ARN of a Redis RDB snapshot file stored in Amazon S3. User should have the access to export snapshot to s3
     * bucket. One can find steps to provide access to export snapshot to s3 on following link
     * https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html
     */
    snapshotArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Select the snapshot/backup you want to use for creating redis.
     */
    snapshotName?: pulumi.Input<string>;
    /**
     * Specify retention limit in days. Accepted values - 1-35.
     */
    snapshotRetentionLimit?: pulumi.Input<number>;
    /**
     * Specify snapshot window limit The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of
     * your node group (shard). Example: 05:00-09:00. If you do not specify this parameter, ElastiCache automatically chooses
     * an appropriate time range.
     */
    snapshotWindow?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the elasticache instance will be created in.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EcacheInstance resource.
 */
export interface EcacheInstanceArgs {
    /**
     * Set a password for authenticating to the ElastiCache instance.  Only supported if `encryptionInTransit` is to to `true`.
     */
    authToken?: pulumi.Input<string>;
    /**
     * Enables automatic failover.
     */
    automaticFailoverEnabled?: pulumi.Input<boolean>;
    /**
     * The numerical index of elasticache instance type. Should be one of: - `0` : Redis - `1` : Memcache
     */
    cacheType?: pulumi.Input<number>;
    /**
     * Flag to enable/disable redis cluster mode.
     */
    enableClusterMode?: pulumi.Input<boolean>;
    /**
     * Enables encryption-at-rest.
     */
    encryptionAtRest?: pulumi.Input<boolean>;
    /**
     * Enables encryption-in-transit.
     */
    encryptionInTransit?: pulumi.Input<boolean>;
    /**
     * The engine version of the elastic instance. See AWS documentation for the [available Redis instance
     * types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/supported-engine-versions.html) or the [available
     * Memcached instance
     * types](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/supported-engine-versions-mc.html).
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * The globally unique identifier for the key.
     */
    kmsKeyId?: pulumi.Input<string>;
    logDeliveryConfigurations?: pulumi.Input<pulumi.Input<inputs.EcacheInstanceLogDeliveryConfiguration>[]>;
    /**
     * The short name of the elasticache instance.  Duplo will add a prefix to the name.  You can retrieve the full name from the `identifier` attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of shards to create. Applicable only if enableClusterMode is set to true
     */
    numberOfShards?: pulumi.Input<number>;
    /**
     * The REDIS parameter group to supply.
     */
    parameterGroupName?: pulumi.Input<string>;
    /**
     * The number of replicas to create. Supported number of replicas is 1 to 6
     */
    replicas?: pulumi.Input<number>;
    /**
     * The instance type of the elasticache instance.
     * See AWS documentation for the [available instance types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html).
     */
    size: pulumi.Input<string>;
    /**
     * Specify the ARN of a Redis RDB snapshot file stored in Amazon S3. User should have the access to export snapshot to s3
     * bucket. One can find steps to provide access to export snapshot to s3 on following link
     * https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html
     */
    snapshotArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Select the snapshot/backup you want to use for creating redis.
     */
    snapshotName?: pulumi.Input<string>;
    /**
     * Specify retention limit in days. Accepted values - 1-35.
     */
    snapshotRetentionLimit?: pulumi.Input<number>;
    /**
     * Specify snapshot window limit The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of
     * your node group (shard). Example: 05:00-09:00. If you do not specify this parameter, ElastiCache automatically chooses
     * an appropriate time range.
     */
    snapshotWindow?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the elasticache instance will be created in.
     */
    tenantId: pulumi.Input<string>;
}
