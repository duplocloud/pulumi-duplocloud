// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.TenantConfig` manages a tenant's configuration in Duplo.
 *
 * Tenant configuration is initially populated by Duplo when a tenant is created.  This resource allows you take control of individual configuration settings for a specific tenant.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const myappTenantConfig = new duplocloud.TenantConfig("myapp", {
 *     tenantId: myapp.tenantId,
 *     settings: [
 *         {
 *             key: "block_public_access_to_s3",
 *             value: "true",
 *         },
 *         {
 *             key: "enforce_ssl_for_s3",
 *             value: "true",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import duplocloud:index/tenantConfig:TenantConfig myapp TENANT_ID
 * ```
 */
export class TenantConfig extends pulumi.CustomResource {
    /**
     * Get an existing TenantConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TenantConfigState, opts?: pulumi.CustomResourceOptions): TenantConfig {
        return new TenantConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/tenantConfig:TenantConfig';

    /**
     * Returns true if the given object is an instance of TenantConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TenantConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TenantConfig.__pulumiType;
    }

    /**
     * Whether or not this resource should delete any settings not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
     */
    public readonly deleteUnspecifiedSettings!: pulumi.Output<boolean | undefined>;
    /**
     * A complete list of configuration settings for this tenant, even ones not being managed by this resource.
     */
    public /*out*/ readonly metadatas!: pulumi.Output<outputs.TenantConfigMetadata[]>;
    /**
     * A list of configuration settings to manage, expressed as key / value pairs.
     */
    public readonly settings!: pulumi.Output<outputs.TenantConfigSetting[] | undefined>;
    /**
     * A list of configuration setting key being managed by this resource.
     */
    public /*out*/ readonly specifiedSettings!: pulumi.Output<string[]>;
    /**
     * The GUID of the tenant to configure.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a TenantConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TenantConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TenantConfigArgs | TenantConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TenantConfigState | undefined;
            resourceInputs["deleteUnspecifiedSettings"] = state ? state.deleteUnspecifiedSettings : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["specifiedSettings"] = state ? state.specifiedSettings : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as TenantConfigArgs | undefined;
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["deleteUnspecifiedSettings"] = args ? args.deleteUnspecifiedSettings : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["metadatas"] = undefined /*out*/;
            resourceInputs["specifiedSettings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TenantConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TenantConfig resources.
 */
export interface TenantConfigState {
    /**
     * Whether or not this resource should delete any settings not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
     */
    deleteUnspecifiedSettings?: pulumi.Input<boolean>;
    /**
     * A complete list of configuration settings for this tenant, even ones not being managed by this resource.
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.TenantConfigMetadata>[]>;
    /**
     * A list of configuration settings to manage, expressed as key / value pairs.
     */
    settings?: pulumi.Input<pulumi.Input<inputs.TenantConfigSetting>[]>;
    /**
     * A list of configuration setting key being managed by this resource.
     */
    specifiedSettings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The GUID of the tenant to configure.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TenantConfig resource.
 */
export interface TenantConfigArgs {
    /**
     * Whether or not this resource should delete any settings not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
     */
    deleteUnspecifiedSettings?: pulumi.Input<boolean>;
    /**
     * A list of configuration settings to manage, expressed as key / value pairs.
     */
    settings?: pulumi.Input<pulumi.Input<inputs.TenantConfigSetting>[]>;
    /**
     * The GUID of the tenant to configure.
     */
    tenantId: pulumi.Input<string>;
}
