// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.EcsService` manages a Amazon ECS service in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const myservice = new duplocloud.EcsTaskDefinition("myservice", {});
 * // Deploy NGINX using ECS
 * const myserviceEcsService = new duplocloud.EcsService("myservice", {
 *     tenantId: myapp.tenantId,
 *     taskDefinition: myservice.arn,
 *     replicas: 2,
 *     loadBalancers: [{
 *         lbType: 1,
 *         port: "8080",
 *         externalPort: 80,
 *         protocol: "HTTP",
 *         enableAccessLogs: false,
 *         dropInvalidHeaders: true,
 *         healthCheckUrl: "https://example.healthcheckurl.com/healthcheck",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing service
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *NAME* is the short name of the service
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/ecsService:EcsService myservice v2/subscriptions/*TENANT_ID*&#47;EcsServiceApiV2/*NAME*
 * ```
 */
export class EcsService extends pulumi.CustomResource {
    /**
     * Get an existing EcsService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsServiceState, opts?: pulumi.CustomResourceOptions): EcsService {
        return new EcsService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/ecsService:EcsService';

    /**
     * Returns true if the given object is an instance of EcsService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsService.__pulumiType;
    }

    public readonly capacityProviderStrategies!: pulumi.Output<outputs.EcsServiceCapacityProviderStrategy[]>;
    /**
     * The DNS prefix to assign to this service's load balancer.
     */
    public readonly dnsPrfx!: pulumi.Output<string | undefined>;
    public readonly healthCheckGracePeriodSeconds!: pulumi.Output<number | undefined>;
    /**
     * The index of the ecs service.
     */
    public /*out*/ readonly index!: pulumi.Output<number>;
    public readonly isTargetGroupOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Zero or more load balancer configurations to associate with this service.
     */
    public readonly loadBalancers!: pulumi.Output<outputs.EcsServiceLoadBalancer[] | undefined>;
    /**
     * The name of the service to create.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of older task definitions to retain in AWS.
     */
    public readonly oldTaskDefinitionBufferSize!: pulumi.Output<number | undefined>;
    /**
     * The number of container replicas to create.
     */
    public readonly replicas!: pulumi.Output<number>;
    public /*out*/ readonly targetGroupArns!: pulumi.Output<string[]>;
    /**
     * The ARN of the task definition to use.
     */
    public readonly taskDefinition!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the service will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Whether or not to wait until all target groups are created for ecs service, after creation.
     */
    public readonly waitUntilTargetsReady!: pulumi.Output<boolean | undefined>;

    /**
     * Create a EcsService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcsServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsServiceArgs | EcsServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsServiceState | undefined;
            resourceInputs["capacityProviderStrategies"] = state ? state.capacityProviderStrategies : undefined;
            resourceInputs["dnsPrfx"] = state ? state.dnsPrfx : undefined;
            resourceInputs["healthCheckGracePeriodSeconds"] = state ? state.healthCheckGracePeriodSeconds : undefined;
            resourceInputs["index"] = state ? state.index : undefined;
            resourceInputs["isTargetGroupOnly"] = state ? state.isTargetGroupOnly : undefined;
            resourceInputs["loadBalancers"] = state ? state.loadBalancers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oldTaskDefinitionBufferSize"] = state ? state.oldTaskDefinitionBufferSize : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["targetGroupArns"] = state ? state.targetGroupArns : undefined;
            resourceInputs["taskDefinition"] = state ? state.taskDefinition : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["waitUntilTargetsReady"] = state ? state.waitUntilTargetsReady : undefined;
        } else {
            const args = argsOrState as EcsServiceArgs | undefined;
            if ((!args || args.replicas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicas'");
            }
            if ((!args || args.taskDefinition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskDefinition'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["capacityProviderStrategies"] = args ? args.capacityProviderStrategies : undefined;
            resourceInputs["dnsPrfx"] = args ? args.dnsPrfx : undefined;
            resourceInputs["healthCheckGracePeriodSeconds"] = args ? args.healthCheckGracePeriodSeconds : undefined;
            resourceInputs["isTargetGroupOnly"] = args ? args.isTargetGroupOnly : undefined;
            resourceInputs["loadBalancers"] = args ? args.loadBalancers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oldTaskDefinitionBufferSize"] = args ? args.oldTaskDefinitionBufferSize : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["taskDefinition"] = args ? args.taskDefinition : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["waitUntilTargetsReady"] = args ? args.waitUntilTargetsReady : undefined;
            resourceInputs["index"] = undefined /*out*/;
            resourceInputs["targetGroupArns"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcsService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EcsService resources.
 */
export interface EcsServiceState {
    capacityProviderStrategies?: pulumi.Input<pulumi.Input<inputs.EcsServiceCapacityProviderStrategy>[]>;
    /**
     * The DNS prefix to assign to this service's load balancer.
     */
    dnsPrfx?: pulumi.Input<string>;
    healthCheckGracePeriodSeconds?: pulumi.Input<number>;
    /**
     * The index of the ecs service.
     */
    index?: pulumi.Input<number>;
    isTargetGroupOnly?: pulumi.Input<boolean>;
    /**
     * Zero or more load balancer configurations to associate with this service.
     */
    loadBalancers?: pulumi.Input<pulumi.Input<inputs.EcsServiceLoadBalancer>[]>;
    /**
     * The name of the service to create.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of older task definitions to retain in AWS.
     */
    oldTaskDefinitionBufferSize?: pulumi.Input<number>;
    /**
     * The number of container replicas to create.
     */
    replicas?: pulumi.Input<number>;
    targetGroupArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN of the task definition to use.
     */
    taskDefinition?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the service will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Whether or not to wait until all target groups are created for ecs service, after creation.
     */
    waitUntilTargetsReady?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a EcsService resource.
 */
export interface EcsServiceArgs {
    capacityProviderStrategies?: pulumi.Input<pulumi.Input<inputs.EcsServiceCapacityProviderStrategy>[]>;
    /**
     * The DNS prefix to assign to this service's load balancer.
     */
    dnsPrfx?: pulumi.Input<string>;
    healthCheckGracePeriodSeconds?: pulumi.Input<number>;
    isTargetGroupOnly?: pulumi.Input<boolean>;
    /**
     * Zero or more load balancer configurations to associate with this service.
     */
    loadBalancers?: pulumi.Input<pulumi.Input<inputs.EcsServiceLoadBalancer>[]>;
    /**
     * The name of the service to create.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of older task definitions to retain in AWS.
     */
    oldTaskDefinitionBufferSize?: pulumi.Input<number>;
    /**
     * The number of container replicas to create.
     */
    replicas: pulumi.Input<number>;
    /**
     * The ARN of the task definition to use.
     */
    taskDefinition: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the service will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Whether or not to wait until all target groups are created for ecs service, after creation.
     */
    waitUntilTargetsReady?: pulumi.Input<boolean>;
}
