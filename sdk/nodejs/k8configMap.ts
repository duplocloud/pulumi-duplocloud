// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.K8ConfigMap` manages a kubernetes configmap in a Duplo tenant.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const myappK8ConfigMap = new duplocloud.K8ConfigMap("myapp", {
 *     tenantId: myapp.tenantId,
 *     name: "myconfigmap",
 *     data: JSON.stringify({
 *         foo: "bar2",
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing kubernetes config map
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *NAME* is the config map name
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/k8ConfigMap:K8ConfigMap myapp v2/subscriptions/*TENANT_ID*&#47;K8ConfigMapApiV2/*NAME*
 * ```
 */
export class K8ConfigMap extends pulumi.CustomResource {
    /**
     * Get an existing K8ConfigMap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8ConfigMapState, opts?: pulumi.CustomResourceOptions): K8ConfigMap {
        return new K8ConfigMap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/k8ConfigMap:K8ConfigMap';

    /**
     * Returns true if the given object is an instance of K8ConfigMap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8ConfigMap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8ConfigMap.__pulumiType;
    }

    /**
     * A JSON encoded string representing the configmap data. You can use the `jsonencode()` function to build this from JSON.
     */
    public readonly data!: pulumi.Output<string>;
    /**
     * A JSON encoded string representing the configmap metadata. You can use the `jsondecode()` function to parse this, if needed.
     */
    public /*out*/ readonly metadata!: pulumi.Output<string>;
    /**
     * The name of the configmap.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the configmap will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a K8ConfigMap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8ConfigMapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8ConfigMapArgs | K8ConfigMapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8ConfigMapState | undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as K8ConfigMapArgs | undefined;
            if ((!args || args.data === undefined) && !opts.urn) {
                throw new Error("Missing required property 'data'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["metadata"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8ConfigMap.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering K8ConfigMap resources.
 */
export interface K8ConfigMapState {
    /**
     * A JSON encoded string representing the configmap data. You can use the `jsonencode()` function to build this from JSON.
     */
    data?: pulumi.Input<string>;
    /**
     * A JSON encoded string representing the configmap metadata. You can use the `jsondecode()` function to parse this, if needed.
     */
    metadata?: pulumi.Input<string>;
    /**
     * The name of the configmap.
     */
    name?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the configmap will be created in.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a K8ConfigMap resource.
 */
export interface K8ConfigMapArgs {
    /**
     * A JSON encoded string representing the configmap data. You can use the `jsonencode()` function to build this from JSON.
     */
    data: pulumi.Input<string>;
    /**
     * The name of the configmap.
     */
    name?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the configmap will be created in.
     */
    tenantId: pulumi.Input<string>;
}
