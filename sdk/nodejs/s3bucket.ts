// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### Create a S3 bucket named staticAssets
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.
 * const infra = new duplocloud.Infrastructure("infra", {
 *     infraName: "prod",
 *     cloud: 0,
 *     region: "us-west-2",
 *     enableK8Cluster: false,
 *     addressPrefix: "10.11.0.0/16",
 * });
 * // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "prod",
 *     planId: infra.infraName,
 * });
 * // Use the tenant_id from the duplocloud_tenant, which will be populated after the tenant resource is created, when setting up the S3 bucket.
 * const bucket = new duplocloud.S3Bucket("bucket", {
 *     tenantId: tenant.tenantId,
 *     name: "static_assets",
 *     allowPublicAccess: false,
 *     enableAccessLogs: true,
 *     enableVersioning: true,
 *     managedPolicies: ["ssl"],
 *     defaultEncryption: {
 *         method: "Sse",
 *     },
 * });
 * ```
 *
 * ### Provision an S3 bucket within the dev tenant
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Ensure the 'dev' tenant is already created before setting up the s3 bucket.
 * const tenant = duplocloud.getTenant({
 *     name: "dev",
 * });
 * const bucket = new duplocloud.S3Bucket("bucket", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "bucket",
 *     allowPublicAccess: false,
 *     enableAccessLogs: true,
 *     enableVersioning: true,
 *     managedPolicies: ["ssl"],
 *     defaultEncryption: {
 *         method: "Sse",
 *     },
 * });
 * ```
 *
 * ### Create an S3 bucket in the dev tenant, with public access enabled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Ensure the 'dev' tenant is already created before setting up the s3 bucket.
 * const tenant = duplocloud.getTenant({
 *     name: "dev",
 * });
 * const bucket = new duplocloud.S3Bucket("bucket", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "bucket",
 *     allowPublicAccess: true,
 *     enableAccessLogs: true,
 *     enableVersioning: true,
 *     managedPolicies: ["ssl"],
 *     defaultEncryption: {
 *         method: "Sse",
 *     },
 * });
 * ```
 *
 * ### Create an S3 bucket in the dev tenant within DuploCloud, with versioning disabled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const tenant = duplocloud.getTenant({
 *     name: "dev",
 * });
 * const bucket = new duplocloud.S3Bucket("bucket", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "bucket",
 *     allowPublicAccess: false,
 *     enableAccessLogs: true,
 *     enableVersioning: true,
 *     managedPolicies: ["ssl"],
 *     defaultEncryption: {
 *         method: "Sse",
 *     },
 * });
 * ```
 *
 * ### Setup an S3 bucket in the qa tenant, with access logs disabled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const tenant = duplocloud.getTenant({
 *     name: "qa",
 * });
 * const bucket = new duplocloud.S3Bucket("bucket", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "bucket",
 *     allowPublicAccess: false,
 *     enableAccessLogs: false,
 *     enableVersioning: true,
 *     managedPolicies: ["ssl"],
 *     defaultEncryption: {
 *         method: "Sse",
 *     },
 * });
 * ```
 *
 * ### Configure an S3 bucket in the QA tenant, enabling public access while disabling versioning and access logs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const tenant = duplocloud.getTenant({
 *     name: "qa",
 * });
 * const bucket = new duplocloud.S3Bucket("bucket", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "bucket",
 *     allowPublicAccess: true,
 *     enableAccessLogs: false,
 *     enableVersioning: false,
 *     managedPolicies: ["ssl"],
 *     defaultEncryption: {
 *         method: "Sse",
 *     },
 * });
 * ```
 *
 * ### Create an S3 bucket named data in the preprod tenant, with tenant kms enabled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const tenant = duplocloud.getTenant({
 *     name: "preprod",
 * });
 * const bucket = new duplocloud.S3Bucket("bucket", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "data",
 *     allowPublicAccess: false,
 *     enableAccessLogs: false,
 *     enableVersioning: true,
 *     managedPolicies: ["ssl"],
 *     defaultEncryption: {
 *         method: "TenantKms",
 *     },
 * });
 * ```
 *
 * ### Deploy an S3 bucket with hardened security settings
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const tenant = duplocloud.getTenant({
 *     name: "test",
 * });
 * const mydata = new duplocloud.S3Bucket("mydata", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "mydata",
 *     allowPublicAccess: false,
 *     enableAccessLogs: true,
 *     enableVersioning: true,
 *     managedPolicies: ["ssl"],
 *     defaultEncryption: {
 *         method: "Sse",
 *     },
 * });
 * ```
 *
 * ### Deploy a hardened S3 bucket suitable for public website hosting in test tenant
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const tenant = duplocloud.getTenant({
 *     name: "test",
 * });
 * const www = new duplocloud.S3Bucket("www", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "website",
 *     allowPublicAccess: true,
 *     enableAccessLogs: true,
 *     enableVersioning: true,
 *     managedPolicies: ["ssl"],
 *     defaultEncryption: {
 *         method: "Sse",
 *     },
 * });
 * ```
 *
 * ### Deploy an S3 bucket to us-east-1 region
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Ensure the 'test' tenant is already created before creating the s3 bucket.
 * const tenant = duplocloud.getTenant({
 *     name: "test",
 * });
 * const staticAssets = new duplocloud.S3Bucket("static_assets", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "static_assets",
 *     allowPublicAccess: false,
 *     enableAccessLogs: true,
 *     enableVersioning: true,
 *     managedPolicies: ["ssl"],
 *     defaultEncryption: {
 *         method: "Sse",
 *     },
 *     region: "us-east-1",
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing S3 bucket
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *SHORTNAME* is the short name of the S3 bucket (without the duploservices prefix)
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/s3Bucket:S3Bucket mybucket *TENANT_ID*&#47;*SHORTNAME*
 * ```
 */
export class S3Bucket extends pulumi.CustomResource {
    /**
     * Get an existing S3Bucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3BucketState, opts?: pulumi.CustomResourceOptions): S3Bucket {
        return new S3Bucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/s3Bucket:S3Bucket';

    /**
     * Returns true if the given object is an instance of S3Bucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3Bucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3Bucket.__pulumiType;
    }

    /**
     * Whether or not to remove the public access block from the bucket.
     */
    public readonly allowPublicAccess!: pulumi.Output<boolean>;
    /**
     * The ARN of the S3 bucket.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Default encryption settings for objects uploaded to the bucket.
     */
    public readonly defaultEncryption!: pulumi.Output<outputs.S3BucketDefaultEncryption>;
    /**
     * The domain name of the S3 bucket.
     */
    public /*out*/ readonly domainName!: pulumi.Output<string>;
    /**
     * Whether or not to enable access logs. When enabled, Duplo will send access logs to a centralized S3 bucket per plan.
     */
    public readonly enableAccessLogs!: pulumi.Output<boolean>;
    /**
     * Whether or not to enable versioning.
     */
    public readonly enableVersioning!: pulumi.Output<boolean>;
    /**
     * The full name of the S3 bucket.
     */
    public /*out*/ readonly fullname!: pulumi.Output<string>;
    /**
     * Duplo can manage your S3 bucket policy for you, based on simple list of policy keywords: - `"ssl"`: Require SSL / HTTPS
     * when accessing the bucket. - `"ignore"`: If this value is present, Duplo will not manage your bucket policy.
     */
    public readonly managedPolicies!: pulumi.Output<string[]>;
    /**
     * The short name of the S3 bucket. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
     * attribute.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The region of the S3 bucket.
     */
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly tags!: pulumi.Output<outputs.S3BucketTag[]>;
    /**
     * The GUID of the tenant that the S3 bucket will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a S3Bucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: S3BucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3BucketArgs | S3BucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3BucketState | undefined;
            resourceInputs["allowPublicAccess"] = state ? state.allowPublicAccess : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["defaultEncryption"] = state ? state.defaultEncryption : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["enableAccessLogs"] = state ? state.enableAccessLogs : undefined;
            resourceInputs["enableVersioning"] = state ? state.enableVersioning : undefined;
            resourceInputs["fullname"] = state ? state.fullname : undefined;
            resourceInputs["managedPolicies"] = state ? state.managedPolicies : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as S3BucketArgs | undefined;
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["allowPublicAccess"] = args ? args.allowPublicAccess : undefined;
            resourceInputs["defaultEncryption"] = args ? args.defaultEncryption : undefined;
            resourceInputs["enableAccessLogs"] = args ? args.enableAccessLogs : undefined;
            resourceInputs["enableVersioning"] = args ? args.enableVersioning : undefined;
            resourceInputs["managedPolicies"] = args ? args.managedPolicies : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["domainName"] = undefined /*out*/;
            resourceInputs["fullname"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(S3Bucket.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering S3Bucket resources.
 */
export interface S3BucketState {
    /**
     * Whether or not to remove the public access block from the bucket.
     */
    allowPublicAccess?: pulumi.Input<boolean>;
    /**
     * The ARN of the S3 bucket.
     */
    arn?: pulumi.Input<string>;
    /**
     * Default encryption settings for objects uploaded to the bucket.
     */
    defaultEncryption?: pulumi.Input<inputs.S3BucketDefaultEncryption>;
    /**
     * The domain name of the S3 bucket.
     */
    domainName?: pulumi.Input<string>;
    /**
     * Whether or not to enable access logs. When enabled, Duplo will send access logs to a centralized S3 bucket per plan.
     */
    enableAccessLogs?: pulumi.Input<boolean>;
    /**
     * Whether or not to enable versioning.
     */
    enableVersioning?: pulumi.Input<boolean>;
    /**
     * The full name of the S3 bucket.
     */
    fullname?: pulumi.Input<string>;
    /**
     * Duplo can manage your S3 bucket policy for you, based on simple list of policy keywords: - `"ssl"`: Require SSL / HTTPS
     * when accessing the bucket. - `"ignore"`: If this value is present, Duplo will not manage your bucket policy.
     */
    managedPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The short name of the S3 bucket. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
     * attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * The region of the S3 bucket.
     */
    region?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.S3BucketTag>[]>;
    /**
     * The GUID of the tenant that the S3 bucket will be created in.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a S3Bucket resource.
 */
export interface S3BucketArgs {
    /**
     * Whether or not to remove the public access block from the bucket.
     */
    allowPublicAccess?: pulumi.Input<boolean>;
    /**
     * Default encryption settings for objects uploaded to the bucket.
     */
    defaultEncryption?: pulumi.Input<inputs.S3BucketDefaultEncryption>;
    /**
     * Whether or not to enable access logs. When enabled, Duplo will send access logs to a centralized S3 bucket per plan.
     */
    enableAccessLogs?: pulumi.Input<boolean>;
    /**
     * Whether or not to enable versioning.
     */
    enableVersioning?: pulumi.Input<boolean>;
    /**
     * Duplo can manage your S3 bucket policy for you, based on simple list of policy keywords: - `"ssl"`: Require SSL / HTTPS
     * when accessing the bucket. - `"ignore"`: If this value is present, Duplo will not manage your bucket policy.
     */
    managedPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The short name of the S3 bucket. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
     * attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * The region of the S3 bucket.
     */
    region?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the S3 bucket will be created in.
     */
    tenantId: pulumi.Input<string>;
}
