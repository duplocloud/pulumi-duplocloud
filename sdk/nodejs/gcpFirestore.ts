// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.GcpFirestore` manages a GCP firestore in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const app = new duplocloud.GcpFirestore("app", {
 *     tenantId: myapp.tenantId,
 *     name: "firestore-tf-2",
 *     type: "FIRESTORE_NATIVE",
 *     locationId: "us-west2",
 *     enableDeleteProtection: false,
 *     enablePointInTimeRecovery: false,
 * });
 * const firestore_app = new duplocloud.GcpFirestore("firestore-app", {});
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing GCP Firestore
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *NAME* is the  name of the Firestore
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/gcpFirestore:GcpFirestore firestore-app *TENANT_ID*&#47;*NAME*
 * ```
 */
export class GcpFirestore extends pulumi.CustomResource {
    /**
     * Get an existing GcpFirestore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GcpFirestoreState, opts?: pulumi.CustomResourceOptions): GcpFirestore {
        return new GcpFirestore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/gcpFirestore:GcpFirestore';

    /**
     * Returns true if the given object is an instance of GcpFirestore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GcpFirestore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GcpFirestore.__pulumiType;
    }

    public /*out*/ readonly appEngineIntegrationMode!: pulumi.Output<string>;
    public /*out*/ readonly concurrencyMode!: pulumi.Output<string>;
    public /*out*/ readonly earliestVersionTime!: pulumi.Output<string>;
    /**
     * Delete protection prevents accidental deletion of firestore. Defaults to `false`.
     */
    public readonly enableDeleteProtection!: pulumi.Output<boolean | undefined>;
    /**
     * Restores data to a specific moment in time, enhancing data protection and recovery capabilities. Defaults to `false`.
     */
    public readonly enablePointInTimeRecovery!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The full name of the firestore.
     */
    public /*out*/ readonly fullname!: pulumi.Output<string>;
    /**
     * Location for firestore
     */
    public readonly locationId!: pulumi.Output<string>;
    /**
     * The short name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the firestore will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Firestore supports type `FIRESTORE_NATIVE` and `DATASTORE_MODE`
     */
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly uid!: pulumi.Output<string>;
    public /*out*/ readonly versionRetentionPeriod!: pulumi.Output<string>;

    /**
     * Create a GcpFirestore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GcpFirestoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GcpFirestoreArgs | GcpFirestoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GcpFirestoreState | undefined;
            resourceInputs["appEngineIntegrationMode"] = state ? state.appEngineIntegrationMode : undefined;
            resourceInputs["concurrencyMode"] = state ? state.concurrencyMode : undefined;
            resourceInputs["earliestVersionTime"] = state ? state.earliestVersionTime : undefined;
            resourceInputs["enableDeleteProtection"] = state ? state.enableDeleteProtection : undefined;
            resourceInputs["enablePointInTimeRecovery"] = state ? state.enablePointInTimeRecovery : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["fullname"] = state ? state.fullname : undefined;
            resourceInputs["locationId"] = state ? state.locationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["versionRetentionPeriod"] = state ? state.versionRetentionPeriod : undefined;
        } else {
            const args = argsOrState as GcpFirestoreArgs | undefined;
            if ((!args || args.locationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationId'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["enableDeleteProtection"] = args ? args.enableDeleteProtection : undefined;
            resourceInputs["enablePointInTimeRecovery"] = args ? args.enablePointInTimeRecovery : undefined;
            resourceInputs["locationId"] = args ? args.locationId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["appEngineIntegrationMode"] = undefined /*out*/;
            resourceInputs["concurrencyMode"] = undefined /*out*/;
            resourceInputs["earliestVersionTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["fullname"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["versionRetentionPeriod"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GcpFirestore.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GcpFirestore resources.
 */
export interface GcpFirestoreState {
    appEngineIntegrationMode?: pulumi.Input<string>;
    concurrencyMode?: pulumi.Input<string>;
    earliestVersionTime?: pulumi.Input<string>;
    /**
     * Delete protection prevents accidental deletion of firestore. Defaults to `false`.
     */
    enableDeleteProtection?: pulumi.Input<boolean>;
    /**
     * Restores data to a specific moment in time, enhancing data protection and recovery capabilities. Defaults to `false`.
     */
    enablePointInTimeRecovery?: pulumi.Input<boolean>;
    etag?: pulumi.Input<string>;
    /**
     * The full name of the firestore.
     */
    fullname?: pulumi.Input<string>;
    /**
     * Location for firestore
     */
    locationId?: pulumi.Input<string>;
    /**
     * The short name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the firestore will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Firestore supports type `FIRESTORE_NATIVE` and `DATASTORE_MODE`
     */
    type?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
    versionRetentionPeriod?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GcpFirestore resource.
 */
export interface GcpFirestoreArgs {
    /**
     * Delete protection prevents accidental deletion of firestore. Defaults to `false`.
     */
    enableDeleteProtection?: pulumi.Input<boolean>;
    /**
     * Restores data to a specific moment in time, enhancing data protection and recovery capabilities. Defaults to `false`.
     */
    enablePointInTimeRecovery?: pulumi.Input<boolean>;
    /**
     * Location for firestore
     */
    locationId: pulumi.Input<string>;
    /**
     * The short name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the firestore will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Firestore supports type `FIRESTORE_NATIVE` and `DATASTORE_MODE`
     */
    type: pulumi.Input<string>;
}
