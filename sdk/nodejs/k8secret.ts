// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.K8Secret` manages a kubernetes secret in a Duplo tenant.
 *
 * ## Import
 *
 * Example: Importing an existing kubernetes secret
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *NAME* is the config map name
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/k8Secret:K8Secret myapp v2/subscriptions/*TENANT_ID*&#47;K8SecretApiV2/*NAME*
 * ```
 */
export class K8Secret extends pulumi.CustomResource {
    /**
     * Get an existing K8Secret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8SecretState, opts?: pulumi.CustomResourceOptions): K8Secret {
        return new K8Secret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/k8Secret:K8Secret';

    /**
     * Returns true if the given object is an instance of K8Secret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8Secret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8Secret.__pulumiType;
    }

    public /*out*/ readonly clientSecretVersion!: pulumi.Output<string>;
    /**
     * Annotations for the secret
     */
    public readonly secretAnnotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * A JSON encoded string representing the secret metadata. You can use the `jsonencode()` function to convert map or object data, if needed. You can use the `jsondecode()` function to read data.
     */
    public readonly secretData!: pulumi.Output<string | undefined>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the secret
     */
    public readonly secretLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the secret.
     */
    public readonly secretName!: pulumi.Output<string>;
    /**
     * The type of the secret.  Usually `"Opaque"`.
     */
    public readonly secretType!: pulumi.Output<string>;
    public /*out*/ readonly secretVersion!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the secret will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a K8Secret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8SecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8SecretArgs | K8SecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8SecretState | undefined;
            resourceInputs["clientSecretVersion"] = state ? state.clientSecretVersion : undefined;
            resourceInputs["secretAnnotations"] = state ? state.secretAnnotations : undefined;
            resourceInputs["secretData"] = state ? state.secretData : undefined;
            resourceInputs["secretLabels"] = state ? state.secretLabels : undefined;
            resourceInputs["secretName"] = state ? state.secretName : undefined;
            resourceInputs["secretType"] = state ? state.secretType : undefined;
            resourceInputs["secretVersion"] = state ? state.secretVersion : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as K8SecretArgs | undefined;
            if ((!args || args.secretName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretName'");
            }
            if ((!args || args.secretType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretType'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["secretAnnotations"] = args ? args.secretAnnotations : undefined;
            resourceInputs["secretData"] = args?.secretData ? pulumi.secret(args.secretData) : undefined;
            resourceInputs["secretLabels"] = args ? args.secretLabels : undefined;
            resourceInputs["secretName"] = args ? args.secretName : undefined;
            resourceInputs["secretType"] = args ? args.secretType : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["clientSecretVersion"] = undefined /*out*/;
            resourceInputs["secretVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretData"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(K8Secret.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering K8Secret resources.
 */
export interface K8SecretState {
    clientSecretVersion?: pulumi.Input<string>;
    /**
     * Annotations for the secret
     */
    secretAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A JSON encoded string representing the secret metadata. You can use the `jsonencode()` function to convert map or object data, if needed. You can use the `jsondecode()` function to read data.
     */
    secretData?: pulumi.Input<string>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the secret
     */
    secretLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the secret.
     */
    secretName?: pulumi.Input<string>;
    /**
     * The type of the secret.  Usually `"Opaque"`.
     */
    secretType?: pulumi.Input<string>;
    secretVersion?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the secret will be created in.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a K8Secret resource.
 */
export interface K8SecretArgs {
    /**
     * Annotations for the secret
     */
    secretAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A JSON encoded string representing the secret metadata. You can use the `jsonencode()` function to convert map or object data, if needed. You can use the `jsondecode()` function to read data.
     */
    secretData?: pulumi.Input<string>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the secret
     */
    secretLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the secret.
     */
    secretName: pulumi.Input<string>;
    /**
     * The type of the secret.  Usually `"Opaque"`.
     */
    secretType: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the secret will be created in.
     */
    tenantId: pulumi.Input<string>;
}
