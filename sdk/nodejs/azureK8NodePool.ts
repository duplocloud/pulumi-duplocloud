// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.AzureK8NodePool` manages a Node Pool of Kubernetes Cluster in Duplo.
 *
 * ## Import
 *
 * Example: Importing an existing Azure K8S Node Pool
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *FRIENDLY_NAME* is the duplo generated name of the the Azure K8S Node Pool
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/azureK8NodePool:AzureK8NodePool node_pool *TENANT_ID*&#47;*FRIENDLY_NAME*
 * ```
 */
export class AzureK8NodePool extends pulumi.CustomResource {
    /**
     * Get an existing AzureK8NodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureK8NodePoolState, opts?: pulumi.CustomResourceOptions): AzureK8NodePool {
        return new AzureK8NodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/azureK8NodePool:AzureK8NodePool';

    /**
     * Returns true if the given object is an instance of AzureK8NodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureK8NodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureK8NodePool.__pulumiType;
    }

    /**
     * Allocation tags for this node pool.
     */
    public readonly allocationTag!: pulumi.Output<string>;
    /**
     * availability zones of node pool
     */
    public readonly availabilityZones!: pulumi.Output<string[]>;
    /**
     * The initial number of nodes which should exist within this Node.
     */
    public readonly desiredCapacity!: pulumi.Output<number>;
    /**
     * Whether to enable auto-scaler.
     */
    public readonly enableAutoScaling!: pulumi.Output<boolean>;
    /**
     * Node pool identifier. This field is deprecated, Please use `name` instead. identifier has been deprecated instead use name
     *
     * @deprecated identifier has been deprecated instead use name
     */
    public readonly identifier!: pulumi.Output<number>;
    /**
     * The maximum number of nodes which should exist within this Node Pool.
     */
    public readonly maxCapacity!: pulumi.Output<number>;
    /**
     * The minimum number of nodes which should exist within this Node Pool.
     */
    public readonly minCapacity!: pulumi.Output<number>;
    /**
     * The name of the node pool.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Kubernetes labels which should be applied to nodes in this Node Pool.
     */
    public readonly nodeLabels!: pulumi.Output<outputs.AzureK8NodePoolNodeLabel[]>;
    /**
     * A list of Kubernetes taints which should be applied to nodes in the agent pool.
     */
    public readonly nodeTaints!: pulumi.Output<string[]>;
    /**
     * The Agent Operating System disk size in GB.
     */
    public readonly osDiskSizeGb!: pulumi.Output<number>;
    /**
     * Specifies the OS SKU used by the agent pool. Possible values are `AzureLinux`, `Ubuntu`, `Windows2019` and `Windows2022`
     */
    public readonly osSku!: pulumi.Output<string>;
    /**
     * Specifies the OS used by the agent pool. Possible values are `Linux`, `Windows`. Defaults to `Linux`.
     */
    public readonly osType!: pulumi.Output<string | undefined>;
    /**
     * specify the priority for scaling operations,supported priority Regular or Spot
     */
    public readonly scalePriority!: pulumi.Output<outputs.AzureK8NodePoolScalePriority>;
    /**
     * The GUID of the tenant that the azure node pool will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this forces a new resource to be created.
     */
    public readonly vmSize!: pulumi.Output<string>;
    /**
     * Whether or not to wait until node pool to be ready, after creation. Defaults to `true`.
     */
    public readonly waitUntilReady!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AzureK8NodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureK8NodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureK8NodePoolArgs | AzureK8NodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureK8NodePoolState | undefined;
            resourceInputs["allocationTag"] = state ? state.allocationTag : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            resourceInputs["enableAutoScaling"] = state ? state.enableAutoScaling : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["maxCapacity"] = state ? state.maxCapacity : undefined;
            resourceInputs["minCapacity"] = state ? state.minCapacity : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeLabels"] = state ? state.nodeLabels : undefined;
            resourceInputs["nodeTaints"] = state ? state.nodeTaints : undefined;
            resourceInputs["osDiskSizeGb"] = state ? state.osDiskSizeGb : undefined;
            resourceInputs["osSku"] = state ? state.osSku : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["scalePriority"] = state ? state.scalePriority : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["vmSize"] = state ? state.vmSize : undefined;
            resourceInputs["waitUntilReady"] = state ? state.waitUntilReady : undefined;
        } else {
            const args = argsOrState as AzureK8NodePoolArgs | undefined;
            if ((!args || args.desiredCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'desiredCapacity'");
            }
            if ((!args || args.maxCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxCapacity'");
            }
            if ((!args || args.minCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minCapacity'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.vmSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmSize'");
            }
            resourceInputs["allocationTag"] = args ? args.allocationTag : undefined;
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            resourceInputs["enableAutoScaling"] = args ? args.enableAutoScaling : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["maxCapacity"] = args ? args.maxCapacity : undefined;
            resourceInputs["minCapacity"] = args ? args.minCapacity : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeLabels"] = args ? args.nodeLabels : undefined;
            resourceInputs["nodeTaints"] = args ? args.nodeTaints : undefined;
            resourceInputs["osDiskSizeGb"] = args ? args.osDiskSizeGb : undefined;
            resourceInputs["osSku"] = args ? args.osSku : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["scalePriority"] = args ? args.scalePriority : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["vmSize"] = args ? args.vmSize : undefined;
            resourceInputs["waitUntilReady"] = args ? args.waitUntilReady : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureK8NodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AzureK8NodePool resources.
 */
export interface AzureK8NodePoolState {
    /**
     * Allocation tags for this node pool.
     */
    allocationTag?: pulumi.Input<string>;
    /**
     * availability zones of node pool
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial number of nodes which should exist within this Node.
     */
    desiredCapacity?: pulumi.Input<number>;
    /**
     * Whether to enable auto-scaler.
     */
    enableAutoScaling?: pulumi.Input<boolean>;
    /**
     * Node pool identifier. This field is deprecated, Please use `name` instead. identifier has been deprecated instead use name
     *
     * @deprecated identifier has been deprecated instead use name
     */
    identifier?: pulumi.Input<number>;
    /**
     * The maximum number of nodes which should exist within this Node Pool.
     */
    maxCapacity?: pulumi.Input<number>;
    /**
     * The minimum number of nodes which should exist within this Node Pool.
     */
    minCapacity?: pulumi.Input<number>;
    /**
     * The name of the node pool.
     */
    name?: pulumi.Input<string>;
    /**
     * Kubernetes labels which should be applied to nodes in this Node Pool.
     */
    nodeLabels?: pulumi.Input<pulumi.Input<inputs.AzureK8NodePoolNodeLabel>[]>;
    /**
     * A list of Kubernetes taints which should be applied to nodes in the agent pool.
     */
    nodeTaints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Agent Operating System disk size in GB.
     */
    osDiskSizeGb?: pulumi.Input<number>;
    /**
     * Specifies the OS SKU used by the agent pool. Possible values are `AzureLinux`, `Ubuntu`, `Windows2019` and `Windows2022`
     */
    osSku?: pulumi.Input<string>;
    /**
     * Specifies the OS used by the agent pool. Possible values are `Linux`, `Windows`. Defaults to `Linux`.
     */
    osType?: pulumi.Input<string>;
    /**
     * specify the priority for scaling operations,supported priority Regular or Spot
     */
    scalePriority?: pulumi.Input<inputs.AzureK8NodePoolScalePriority>;
    /**
     * The GUID of the tenant that the azure node pool will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this forces a new resource to be created.
     */
    vmSize?: pulumi.Input<string>;
    /**
     * Whether or not to wait until node pool to be ready, after creation. Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AzureK8NodePool resource.
 */
export interface AzureK8NodePoolArgs {
    /**
     * Allocation tags for this node pool.
     */
    allocationTag?: pulumi.Input<string>;
    /**
     * availability zones of node pool
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial number of nodes which should exist within this Node.
     */
    desiredCapacity: pulumi.Input<number>;
    /**
     * Whether to enable auto-scaler.
     */
    enableAutoScaling?: pulumi.Input<boolean>;
    /**
     * Node pool identifier. This field is deprecated, Please use `name` instead. identifier has been deprecated instead use name
     *
     * @deprecated identifier has been deprecated instead use name
     */
    identifier?: pulumi.Input<number>;
    /**
     * The maximum number of nodes which should exist within this Node Pool.
     */
    maxCapacity: pulumi.Input<number>;
    /**
     * The minimum number of nodes which should exist within this Node Pool.
     */
    minCapacity: pulumi.Input<number>;
    /**
     * The name of the node pool.
     */
    name?: pulumi.Input<string>;
    /**
     * Kubernetes labels which should be applied to nodes in this Node Pool.
     */
    nodeLabels?: pulumi.Input<pulumi.Input<inputs.AzureK8NodePoolNodeLabel>[]>;
    /**
     * A list of Kubernetes taints which should be applied to nodes in the agent pool.
     */
    nodeTaints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Agent Operating System disk size in GB.
     */
    osDiskSizeGb?: pulumi.Input<number>;
    /**
     * Specifies the OS SKU used by the agent pool. Possible values are `AzureLinux`, `Ubuntu`, `Windows2019` and `Windows2022`
     */
    osSku?: pulumi.Input<string>;
    /**
     * Specifies the OS used by the agent pool. Possible values are `Linux`, `Windows`. Defaults to `Linux`.
     */
    osType?: pulumi.Input<string>;
    /**
     * specify the priority for scaling operations,supported priority Regular or Spot
     */
    scalePriority?: pulumi.Input<inputs.AzureK8NodePoolScalePriority>;
    /**
     * The GUID of the tenant that the azure node pool will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this forces a new resource to be created.
     */
    vmSize: pulumi.Input<string>;
    /**
     * Whether or not to wait until node pool to be ready, after creation. Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
}
