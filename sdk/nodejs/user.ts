// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.User` manages a user in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myuser = new duplocloud.User("myuser", {
 *     username: "me@abc.com",
 *     roles: [
 *         "User",
 *         "Administrator",
 *         "SignupUser",
 *         "SecurityAdmin",
 *     ],
 *     isReadonly: false,
 *     reallocateVpnAddress: false,
 *     regenerateVpnPassword: false,
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing duplo user
 *
 *  - *USERNAME* is the duplo username
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/user:User myuser *USERNAME*
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    public /*out*/ readonly currentSessionToken!: pulumi.Output<string>;
    public /*out*/ readonly isConfirmationEmailSent!: pulumi.Output<boolean>;
    /**
     * Defaults to `false`.
     */
    public readonly isReadonly!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly isVpnConfigCreated!: pulumi.Output<boolean>;
    /**
     * Defaults to `false`.
     */
    public readonly reallocateVpnAddress!: pulumi.Output<boolean | undefined>;
    /**
     * Defaults to `false`.
     */
    public readonly regenerateVpnPassword!: pulumi.Output<boolean | undefined>;
    /**
     * The list of roles to be assigned to thh created user. Valid values are - `User`, `Administrator`, `SignupUser`, `SecurityAdmin`.
     */
    public readonly roles!: pulumi.Output<string[]>;
    /**
     * The unique user name or the email.
     */
    public readonly username!: pulumi.Output<string>;
    public /*out*/ readonly vpnStaticIp!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["currentSessionToken"] = state ? state.currentSessionToken : undefined;
            resourceInputs["isConfirmationEmailSent"] = state ? state.isConfirmationEmailSent : undefined;
            resourceInputs["isReadonly"] = state ? state.isReadonly : undefined;
            resourceInputs["isVpnConfigCreated"] = state ? state.isVpnConfigCreated : undefined;
            resourceInputs["reallocateVpnAddress"] = state ? state.reallocateVpnAddress : undefined;
            resourceInputs["regenerateVpnPassword"] = state ? state.regenerateVpnPassword : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vpnStaticIp"] = state ? state.vpnStaticIp : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["isReadonly"] = args ? args.isReadonly : undefined;
            resourceInputs["reallocateVpnAddress"] = args ? args.reallocateVpnAddress : undefined;
            resourceInputs["regenerateVpnPassword"] = args ? args.regenerateVpnPassword : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["currentSessionToken"] = undefined /*out*/;
            resourceInputs["isConfirmationEmailSent"] = undefined /*out*/;
            resourceInputs["isVpnConfigCreated"] = undefined /*out*/;
            resourceInputs["vpnStaticIp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    currentSessionToken?: pulumi.Input<string>;
    isConfirmationEmailSent?: pulumi.Input<boolean>;
    /**
     * Defaults to `false`.
     */
    isReadonly?: pulumi.Input<boolean>;
    isVpnConfigCreated?: pulumi.Input<boolean>;
    /**
     * Defaults to `false`.
     */
    reallocateVpnAddress?: pulumi.Input<boolean>;
    /**
     * Defaults to `false`.
     */
    regenerateVpnPassword?: pulumi.Input<boolean>;
    /**
     * The list of roles to be assigned to thh created user. Valid values are - `User`, `Administrator`, `SignupUser`, `SecurityAdmin`.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique user name or the email.
     */
    username?: pulumi.Input<string>;
    vpnStaticIp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Defaults to `false`.
     */
    isReadonly?: pulumi.Input<boolean>;
    /**
     * Defaults to `false`.
     */
    reallocateVpnAddress?: pulumi.Input<boolean>;
    /**
     * Defaults to `false`.
     */
    regenerateVpnPassword?: pulumi.Input<boolean>;
    /**
     * The list of roles to be assigned to thh created user. Valid values are - `User`, `Administrator`, `SignupUser`, `SecurityAdmin`.
     */
    roles: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique user name or the email.
     */
    username: pulumi.Input<string>;
}
