// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.EcsTaskDefinition` manages a Amazon ECS task definition in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * // Create a task definition for NGINX using ECS
 * const myservice = new duplocloud.EcsTaskDefinition("myservice", {
 *     tenantId: myapp.tenantId,
 *     family: "duploservices-default-myservice",
 *     containerDefinitions: JSON.stringify([{
 *         Name: "default",
 *         Image: "nginx:latest",
 *         Environment: [{
 *             Name: "NGINX_HOST",
 *             Value: "foo",
 *         }],
 *         PortMappings: [{
 *             ContainerPort: "80",
 *             HostPort: "80",
 *             Protocol: {
 *                 Value: "tcp",
 *             },
 *         }],
 *     }]),
 *     cpu: "256",
 *     memory: "1024",
 *     requiresCompatibilities: ["FARGATE"],
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing ECS task definition
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *ARN* is the full ARN of the task definition
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/ecsTaskDefinition:EcsTaskDefinition myservice subscriptions/*TENANT_ID*&#47;EcsTaskDefinition/*ARN*
 * ```
 */
export class EcsTaskDefinition extends pulumi.CustomResource {
    /**
     * Get an existing EcsTaskDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsTaskDefinitionState, opts?: pulumi.CustomResourceOptions): EcsTaskDefinition {
        return new EcsTaskDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/ecsTaskDefinition:EcsTaskDefinition';

    /**
     * Returns true if the given object is an instance of EcsTaskDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsTaskDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsTaskDefinition.__pulumiType;
    }

    /**
     * The ARN of the task definition.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly containerDefinitions!: pulumi.Output<string>;
    /**
     * container_definitions updates in backend
     */
    public /*out*/ readonly containerDefinitionsUpdates!: pulumi.Output<string>;
    public readonly cpu!: pulumi.Output<string | undefined>;
    public /*out*/ readonly executionRoleArn!: pulumi.Output<string>;
    /**
     * The name of the task definition to create.
     */
    public readonly family!: pulumi.Output<string>;
    /**
     * The name of the task definition to create.
     */
    public /*out*/ readonly fullFamilyName!: pulumi.Output<string>;
    public readonly inferenceAccelerators!: pulumi.Output<outputs.EcsTaskDefinitionInferenceAccelerator[] | undefined>;
    public readonly ipcMode!: pulumi.Output<string | undefined>;
    public readonly memory!: pulumi.Output<string | undefined>;
    /**
     * Defaults to `awsvpc`.
     */
    public readonly networkMode!: pulumi.Output<string | undefined>;
    public readonly pidMode!: pulumi.Output<string | undefined>;
    public readonly placementConstraints!: pulumi.Output<outputs.EcsTaskDefinitionPlacementConstraint[] | undefined>;
    public readonly preventTfDestroy!: pulumi.Output<boolean | undefined>;
    public readonly proxyConfiguration!: pulumi.Output<outputs.EcsTaskDefinitionProxyConfiguration | undefined>;
    public readonly requiresAttributes!: pulumi.Output<outputs.EcsTaskDefinitionRequiresAttribute[]>;
    /**
     * Requires compatibilities for running jobs. Valid values are [FARGATE]
     */
    public readonly requiresCompatibilities!: pulumi.Output<string[]>;
    /**
     * The current revision of the task definition.
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.
     */
    public readonly runtimePlatform!: pulumi.Output<outputs.EcsTaskDefinitionRuntimePlatform>;
    /**
     * The status of the task definition.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly tags!: pulumi.Output<outputs.EcsTaskDefinitionTag[]>;
    public /*out*/ readonly taskRoleArn!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the task definition will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Defaults to `[]`.
     */
    public readonly volumes!: pulumi.Output<string | undefined>;

    /**
     * Create a EcsTaskDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcsTaskDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsTaskDefinitionArgs | EcsTaskDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsTaskDefinitionState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["containerDefinitions"] = state ? state.containerDefinitions : undefined;
            resourceInputs["containerDefinitionsUpdates"] = state ? state.containerDefinitionsUpdates : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["executionRoleArn"] = state ? state.executionRoleArn : undefined;
            resourceInputs["family"] = state ? state.family : undefined;
            resourceInputs["fullFamilyName"] = state ? state.fullFamilyName : undefined;
            resourceInputs["inferenceAccelerators"] = state ? state.inferenceAccelerators : undefined;
            resourceInputs["ipcMode"] = state ? state.ipcMode : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["networkMode"] = state ? state.networkMode : undefined;
            resourceInputs["pidMode"] = state ? state.pidMode : undefined;
            resourceInputs["placementConstraints"] = state ? state.placementConstraints : undefined;
            resourceInputs["preventTfDestroy"] = state ? state.preventTfDestroy : undefined;
            resourceInputs["proxyConfiguration"] = state ? state.proxyConfiguration : undefined;
            resourceInputs["requiresAttributes"] = state ? state.requiresAttributes : undefined;
            resourceInputs["requiresCompatibilities"] = state ? state.requiresCompatibilities : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["runtimePlatform"] = state ? state.runtimePlatform : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taskRoleArn"] = state ? state.taskRoleArn : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as EcsTaskDefinitionArgs | undefined;
            if ((!args || args.containerDefinitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerDefinitions'");
            }
            if ((!args || args.family === undefined) && !opts.urn) {
                throw new Error("Missing required property 'family'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["containerDefinitions"] = args ? args.containerDefinitions : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["family"] = args ? args.family : undefined;
            resourceInputs["inferenceAccelerators"] = args ? args.inferenceAccelerators : undefined;
            resourceInputs["ipcMode"] = args ? args.ipcMode : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["networkMode"] = args ? args.networkMode : undefined;
            resourceInputs["pidMode"] = args ? args.pidMode : undefined;
            resourceInputs["placementConstraints"] = args ? args.placementConstraints : undefined;
            resourceInputs["preventTfDestroy"] = args ? args.preventTfDestroy : undefined;
            resourceInputs["proxyConfiguration"] = args ? args.proxyConfiguration : undefined;
            resourceInputs["requiresAttributes"] = args ? args.requiresAttributes : undefined;
            resourceInputs["requiresCompatibilities"] = args ? args.requiresCompatibilities : undefined;
            resourceInputs["runtimePlatform"] = args ? args.runtimePlatform : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["containerDefinitionsUpdates"] = undefined /*out*/;
            resourceInputs["executionRoleArn"] = undefined /*out*/;
            resourceInputs["fullFamilyName"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["taskRoleArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcsTaskDefinition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EcsTaskDefinition resources.
 */
export interface EcsTaskDefinitionState {
    /**
     * The ARN of the task definition.
     */
    arn?: pulumi.Input<string>;
    containerDefinitions?: pulumi.Input<string>;
    /**
     * container_definitions updates in backend
     */
    containerDefinitionsUpdates?: pulumi.Input<string>;
    cpu?: pulumi.Input<string>;
    executionRoleArn?: pulumi.Input<string>;
    /**
     * The name of the task definition to create.
     */
    family?: pulumi.Input<string>;
    /**
     * The name of the task definition to create.
     */
    fullFamilyName?: pulumi.Input<string>;
    inferenceAccelerators?: pulumi.Input<pulumi.Input<inputs.EcsTaskDefinitionInferenceAccelerator>[]>;
    ipcMode?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
    /**
     * Defaults to `awsvpc`.
     */
    networkMode?: pulumi.Input<string>;
    pidMode?: pulumi.Input<string>;
    placementConstraints?: pulumi.Input<pulumi.Input<inputs.EcsTaskDefinitionPlacementConstraint>[]>;
    preventTfDestroy?: pulumi.Input<boolean>;
    proxyConfiguration?: pulumi.Input<inputs.EcsTaskDefinitionProxyConfiguration>;
    requiresAttributes?: pulumi.Input<pulumi.Input<inputs.EcsTaskDefinitionRequiresAttribute>[]>;
    /**
     * Requires compatibilities for running jobs. Valid values are [FARGATE]
     */
    requiresCompatibilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The current revision of the task definition.
     */
    revision?: pulumi.Input<number>;
    /**
     * Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.
     */
    runtimePlatform?: pulumi.Input<inputs.EcsTaskDefinitionRuntimePlatform>;
    /**
     * The status of the task definition.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.EcsTaskDefinitionTag>[]>;
    taskRoleArn?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the task definition will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Defaults to `[]`.
     */
    volumes?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EcsTaskDefinition resource.
 */
export interface EcsTaskDefinitionArgs {
    containerDefinitions: pulumi.Input<string>;
    cpu?: pulumi.Input<string>;
    /**
     * The name of the task definition to create.
     */
    family: pulumi.Input<string>;
    inferenceAccelerators?: pulumi.Input<pulumi.Input<inputs.EcsTaskDefinitionInferenceAccelerator>[]>;
    ipcMode?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
    /**
     * Defaults to `awsvpc`.
     */
    networkMode?: pulumi.Input<string>;
    pidMode?: pulumi.Input<string>;
    placementConstraints?: pulumi.Input<pulumi.Input<inputs.EcsTaskDefinitionPlacementConstraint>[]>;
    preventTfDestroy?: pulumi.Input<boolean>;
    proxyConfiguration?: pulumi.Input<inputs.EcsTaskDefinitionProxyConfiguration>;
    requiresAttributes?: pulumi.Input<pulumi.Input<inputs.EcsTaskDefinitionRequiresAttribute>[]>;
    /**
     * Requires compatibilities for running jobs. Valid values are [FARGATE]
     */
    requiresCompatibilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.
     */
    runtimePlatform?: pulumi.Input<inputs.EcsTaskDefinitionRuntimePlatform>;
    /**
     * The GUID of the tenant that the task definition will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Defaults to `[]`.
     */
    volumes?: pulumi.Input<string>;
}
