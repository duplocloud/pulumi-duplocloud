// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.InfrastructureOnprem` adds support to integrate on premise infra into duplocloud
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * //## Create a DuploCloud onpremise infrastructure named onprem with eks vendor
 * //## Solution:
 * const infra = new duplocloud.InfrastructureOnprem("infra", {
 *     infraName: "onprem",
 *     clusterName: "onprem",
 *     region: "us-west-2",
 *     azcount: 2,
 *     enableK8Cluster: true,
 *     vendor: 2,
 *     clusterEndpoint: "https://BB3C2589BAE34AD680060B5FDBA12BA1.gr7.us-west-2.eks.amazonaws.com",
 *     apiToken: "<api-token>",
 *     clusterCertificateAuthorityData: "<certificate-authority-data>",
 *     dataCenter: "us",
 *     eksConfig: {
 *         privateSubnets: [
 *             "subnet-06c1b3a338ace60ce",
 *             "subnet-09252308e1a093bda",
 *         ],
 *         publicSubnets: [
 *             "subnet-0d5b3c3a3ae9d129f",
 *             "subnet-065ab3e894092dd1c",
 *         ],
 *         ingressSecurityGroupIds: ["sg-0331e348b886ed796"],
 *         vpcId: "vpc-0961fc6b0903ad63f",
 *     },
 *     customDatas: [{
 *         key: "K8sVersion",
 *         value: "1.31",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing infrastructure
 *
 *  - *NAME* is the infrastructure name
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/infrastructureOnprem:InfrastructureOnprem myinfra v2/admin/Infrastructure/OnPremises/*NAME*
 * ```
 */
export class InfrastructureOnprem extends pulumi.CustomResource {
    /**
     * Get an existing InfrastructureOnprem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InfrastructureOnpremState, opts?: pulumi.CustomResourceOptions): InfrastructureOnprem {
        return new InfrastructureOnprem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/infrastructureOnprem:InfrastructureOnprem';

    /**
     * Returns true if the given object is an instance of InfrastructureOnprem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InfrastructureOnprem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InfrastructureOnprem.__pulumiType;
    }

    /**
     * The cloud account ID. Used with GCP cloud
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Token to access cluster API's
     */
    public readonly apiToken!: pulumi.Output<string>;
    /**
     * The number of availability zones.  Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.
     */
    public readonly azcount!: pulumi.Output<number | undefined>;
    /**
     * Required to validate API server certificates and kubelet client certificates
     */
    public readonly clusterCertificateAuthorityData!: pulumi.Output<string>;
    /**
     * Endpoint URL of K8 cluster
     */
    public readonly clusterEndpoint!: pulumi.Output<string>;
    /**
     * Name of the on premise k8 cluster
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * A list of configuration settings to apply on creation, expressed as key / value pairs.
     */
    public readonly customDatas!: pulumi.Output<outputs.InfrastructureOnpremCustomData[] | undefined>;
    /**
     * Datacenter name of the onpremise cluster
     */
    public readonly dataCenter!: pulumi.Output<string>;
    /**
     * EKS configuration for on premise infra if vendor is selected as 2
     */
    public readonly eksConfig!: pulumi.Output<outputs.InfrastructureOnpremEksConfig | undefined>;
    /**
     * Whether or not to provision a kubernetes cluster.
     */
    public readonly enableK8Cluster!: pulumi.Output<boolean>;
    /**
     * The name of the infrastructure.  Infrastructure names are globally unique and less than 13 characters.
     */
    public readonly infraName!: pulumi.Output<string>;
    /**
     * The cloud provider region.  The Duplo portal must have already been configured to support this region.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The status of the infrastructure.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Type of on premise vendor \n\n0 - Rancher\n\n1 - Generic\n\n2 - EKS\n\n
     */
    public readonly vendor!: pulumi.Output<number>;

    /**
     * Create a InfrastructureOnprem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InfrastructureOnpremArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InfrastructureOnpremArgs | InfrastructureOnpremState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InfrastructureOnpremState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["apiToken"] = state ? state.apiToken : undefined;
            resourceInputs["azcount"] = state ? state.azcount : undefined;
            resourceInputs["clusterCertificateAuthorityData"] = state ? state.clusterCertificateAuthorityData : undefined;
            resourceInputs["clusterEndpoint"] = state ? state.clusterEndpoint : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["customDatas"] = state ? state.customDatas : undefined;
            resourceInputs["dataCenter"] = state ? state.dataCenter : undefined;
            resourceInputs["eksConfig"] = state ? state.eksConfig : undefined;
            resourceInputs["enableK8Cluster"] = state ? state.enableK8Cluster : undefined;
            resourceInputs["infraName"] = state ? state.infraName : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vendor"] = state ? state.vendor : undefined;
        } else {
            const args = argsOrState as InfrastructureOnpremArgs | undefined;
            if ((!args || args.apiToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiToken'");
            }
            if ((!args || args.clusterCertificateAuthorityData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterCertificateAuthorityData'");
            }
            if ((!args || args.clusterEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterEndpoint'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.dataCenter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataCenter'");
            }
            if ((!args || args.enableK8Cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableK8Cluster'");
            }
            if ((!args || args.infraName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'infraName'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.vendor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vendor'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["apiToken"] = args ? args.apiToken : undefined;
            resourceInputs["azcount"] = args ? args.azcount : undefined;
            resourceInputs["clusterCertificateAuthorityData"] = args ? args.clusterCertificateAuthorityData : undefined;
            resourceInputs["clusterEndpoint"] = args ? args.clusterEndpoint : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["customDatas"] = args ? args.customDatas : undefined;
            resourceInputs["dataCenter"] = args ? args.dataCenter : undefined;
            resourceInputs["eksConfig"] = args ? args.eksConfig : undefined;
            resourceInputs["enableK8Cluster"] = args ? args.enableK8Cluster : undefined;
            resourceInputs["infraName"] = args ? args.infraName : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["vendor"] = args ? args.vendor : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InfrastructureOnprem.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InfrastructureOnprem resources.
 */
export interface InfrastructureOnpremState {
    /**
     * The cloud account ID. Used with GCP cloud
     */
    accountId?: pulumi.Input<string>;
    /**
     * Token to access cluster API's
     */
    apiToken?: pulumi.Input<string>;
    /**
     * The number of availability zones.  Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.
     */
    azcount?: pulumi.Input<number>;
    /**
     * Required to validate API server certificates and kubelet client certificates
     */
    clusterCertificateAuthorityData?: pulumi.Input<string>;
    /**
     * Endpoint URL of K8 cluster
     */
    clusterEndpoint?: pulumi.Input<string>;
    /**
     * Name of the on premise k8 cluster
     */
    clusterName?: pulumi.Input<string>;
    /**
     * A list of configuration settings to apply on creation, expressed as key / value pairs.
     */
    customDatas?: pulumi.Input<pulumi.Input<inputs.InfrastructureOnpremCustomData>[]>;
    /**
     * Datacenter name of the onpremise cluster
     */
    dataCenter?: pulumi.Input<string>;
    /**
     * EKS configuration for on premise infra if vendor is selected as 2
     */
    eksConfig?: pulumi.Input<inputs.InfrastructureOnpremEksConfig>;
    /**
     * Whether or not to provision a kubernetes cluster.
     */
    enableK8Cluster?: pulumi.Input<boolean>;
    /**
     * The name of the infrastructure.  Infrastructure names are globally unique and less than 13 characters.
     */
    infraName?: pulumi.Input<string>;
    /**
     * The cloud provider region.  The Duplo portal must have already been configured to support this region.
     */
    region?: pulumi.Input<string>;
    /**
     * The status of the infrastructure.
     */
    status?: pulumi.Input<string>;
    /**
     * Type of on premise vendor \n\n0 - Rancher\n\n1 - Generic\n\n2 - EKS\n\n
     */
    vendor?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a InfrastructureOnprem resource.
 */
export interface InfrastructureOnpremArgs {
    /**
     * The cloud account ID. Used with GCP cloud
     */
    accountId?: pulumi.Input<string>;
    /**
     * Token to access cluster API's
     */
    apiToken: pulumi.Input<string>;
    /**
     * The number of availability zones.  Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.
     */
    azcount?: pulumi.Input<number>;
    /**
     * Required to validate API server certificates and kubelet client certificates
     */
    clusterCertificateAuthorityData: pulumi.Input<string>;
    /**
     * Endpoint URL of K8 cluster
     */
    clusterEndpoint: pulumi.Input<string>;
    /**
     * Name of the on premise k8 cluster
     */
    clusterName: pulumi.Input<string>;
    /**
     * A list of configuration settings to apply on creation, expressed as key / value pairs.
     */
    customDatas?: pulumi.Input<pulumi.Input<inputs.InfrastructureOnpremCustomData>[]>;
    /**
     * Datacenter name of the onpremise cluster
     */
    dataCenter: pulumi.Input<string>;
    /**
     * EKS configuration for on premise infra if vendor is selected as 2
     */
    eksConfig?: pulumi.Input<inputs.InfrastructureOnpremEksConfig>;
    /**
     * Whether or not to provision a kubernetes cluster.
     */
    enableK8Cluster: pulumi.Input<boolean>;
    /**
     * The name of the infrastructure.  Infrastructure names are globally unique and less than 13 characters.
     */
    infraName: pulumi.Input<string>;
    /**
     * The cloud provider region.  The Duplo portal must have already been configured to support this region.
     */
    region: pulumi.Input<string>;
    /**
     * Type of on premise vendor \n\n0 - Rancher\n\n1 - Generic\n\n2 - EKS\n\n
     */
    vendor: pulumi.Input<number>;
}
