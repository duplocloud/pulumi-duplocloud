// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.AwsMwaaEnvironment` manages an AWS MWAA Environment resource in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const tenantKmsKey = duplocloud.getTenantAwsKmsKeyOutput({
 *     tenantId: myapp.tenantId,
 * });
 * const my_mwaa = new duplocloud.AwsMwaaEnvironment("my-mwaa", {
 *     tenantId: myapp.tenantId,
 *     name: "airflow-test",
 *     sourceBucketArn: "arn:aws:s3:::xxx-xxx-xx-xxxx",
 *     dagS3Path: "AirflowDags/dag",
 *     pluginsS3Path: "AirflowDags/plugins.zip",
 *     requirementsS3Path: "AirflowDags/requirements.txt",
 *     startupScriptS3Path: "AirflowDags/startup-script.sh",
 *     kmsKey: tenantKmsKey.apply(tenantKmsKey => tenantKmsKey.keyArn),
 *     schedulers: 2,
 *     maxWorkers: 10,
 *     minWorkers: 1,
 *     airflowVersion: "2.6.3",
 *     weeklyMaintenanceWindowStart: "SUN:23:30",
 *     environmentClass: "mw1.small",
 *     airflowConfigurationOptions: {
 *         "core.log_format": "[%%(asctime)s] {{%%(filename)s:%%(lineno)d}} %%(levelname)s - %%(message)s",
 *     },
 *     loggingConfiguration: {
 *         dagProcessingLogs: {
 *             enabled: false,
 *             logLevel: "INFO",
 *         },
 *         schedulerLogs: {
 *             enabled: false,
 *             logLevel: "INFO",
 *         },
 *         taskLogs: {
 *             enabled: false,
 *             logLevel: "INFO",
 *         },
 *         webserverLogs: {
 *             enabled: false,
 *             logLevel: "INFO",
 *         },
 *         workerLogs: {
 *             enabled: false,
 *             logLevel: "INFO",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing AWS MWAA Environment resource.
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *FULL_NAME* is the fullname of the AWS MWAA Environment resource
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/awsMwaaEnvironment:AwsMwaaEnvironment my-mwaa *TENANT_ID*&#47;*FULL_NAME*
 * ```
 */
export class AwsMwaaEnvironment extends pulumi.CustomResource {
    /**
     * Get an existing AwsMwaaEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsMwaaEnvironmentState, opts?: pulumi.CustomResourceOptions): AwsMwaaEnvironment {
        return new AwsMwaaEnvironment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/awsMwaaEnvironment:AwsMwaaEnvironment';

    /**
     * Returns true if the given object is an instance of AwsMwaaEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsMwaaEnvironment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsMwaaEnvironment.__pulumiType;
    }

    /**
     * The `airflowConfigurationOptions` parameter specifies airflow override options
     */
    public readonly airflowConfigurationOptions!: pulumi.Output<{[key: string]: string}>;
    /**
     * Airflow version of your environment, will be set by default to the latest version that MWAA supports.
     */
    public readonly airflowVersion!: pulumi.Output<string>;
    /**
     * The ARN of the Managed Workflows Apache Airflow.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The relative path to the DAG folder on your Amazon S3 storage bucket.
     */
    public readonly dagS3Path!: pulumi.Output<string>;
    /**
     * Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`, `mw1.xlarge`, `mw1.2xlarge`.
     */
    public readonly environmentClass!: pulumi.Output<string>;
    /**
     * The Execution Role ARN of the Amazon MWAA Environment
     */
    public readonly executionRoleArn!: pulumi.Output<string>;
    /**
     * The full name provided by duplo for Apache Airflow Environment.
     */
    public /*out*/ readonly fullname!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key aws/airflow by default.
     */
    public readonly kmsKey!: pulumi.Output<string | undefined>;
    public /*out*/ readonly lastUpdateds!: pulumi.Output<outputs.AwsMwaaEnvironmentLastUpdated[]>;
    public readonly loggingConfiguration!: pulumi.Output<outputs.AwsMwaaEnvironmentLoggingConfiguration>;
    /**
     * The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`.
     */
    public readonly maxWorkers!: pulumi.Output<number>;
    /**
     * The minimum number of workers that you want to run in your environment.
     */
    public readonly minWorkers!: pulumi.Output<number>;
    /**
     * The name of the Apache Airflow Environment.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The plugins.zip file version you want to use. If not set, latest s3 file version will be used.
     */
    public readonly pluginsS3ObjectVersion!: pulumi.Output<string>;
    /**
     * The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then `pluginsS3ObjectVersion` is required.
     */
    public readonly pluginsS3Path!: pulumi.Output<string>;
    /**
     * The requirements.txt file version you want to use. If not set, latest s3 file version will be used.
     */
    public readonly requirementsS3ObjectVersion!: pulumi.Output<string>;
    /**
     * The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements*s3*object_version is required.
     */
    public readonly requirementsS3Path!: pulumi.Output<string>;
    /**
     * The number of schedulers that you want to run in your environment.
     */
    public readonly schedulers!: pulumi.Output<number>;
    /**
     * The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
     */
    public readonly sourceBucketArn!: pulumi.Output<string>;
    /**
     * The startup script file version you want to use. If not set, latest s3 file version will be used.
     */
    public readonly startupScriptS3ObjectVersion!: pulumi.Output<string>;
    /**
     * The relative path to the startup script file on your Amazon S3 storage bucket. For example, startup_script.sh.
     */
    public readonly startupScriptS3Path!: pulumi.Output<string>;
    /**
     * The status of the Amazon MWAA Environment.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Tags.
     */
    public /*out*/ readonly tags!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the Managed Workflows Apache Airflow will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Whether or not to wait until Amazon MWAA Environment to be ready, after creation. Defaults to `true`.
     */
    public readonly waitUntilReady!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether the webserver should be accessible over the internet or via your specified VPC.  Defaults to `PUBLIC_ONLY`.
     */
    public readonly webserverAccessMode!: pulumi.Output<string | undefined>;
    /**
     * The webserver URL of the MWAA Environment.
     */
    public /*out*/ readonly webserverUrl!: pulumi.Output<string>;
    /**
     * Specifies the start date for the weekly maintenance window.
     */
    public readonly weeklyMaintenanceWindowStart!: pulumi.Output<string>;

    /**
     * Create a AwsMwaaEnvironment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsMwaaEnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsMwaaEnvironmentArgs | AwsMwaaEnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsMwaaEnvironmentState | undefined;
            resourceInputs["airflowConfigurationOptions"] = state ? state.airflowConfigurationOptions : undefined;
            resourceInputs["airflowVersion"] = state ? state.airflowVersion : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["dagS3Path"] = state ? state.dagS3Path : undefined;
            resourceInputs["environmentClass"] = state ? state.environmentClass : undefined;
            resourceInputs["executionRoleArn"] = state ? state.executionRoleArn : undefined;
            resourceInputs["fullname"] = state ? state.fullname : undefined;
            resourceInputs["kmsKey"] = state ? state.kmsKey : undefined;
            resourceInputs["lastUpdateds"] = state ? state.lastUpdateds : undefined;
            resourceInputs["loggingConfiguration"] = state ? state.loggingConfiguration : undefined;
            resourceInputs["maxWorkers"] = state ? state.maxWorkers : undefined;
            resourceInputs["minWorkers"] = state ? state.minWorkers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pluginsS3ObjectVersion"] = state ? state.pluginsS3ObjectVersion : undefined;
            resourceInputs["pluginsS3Path"] = state ? state.pluginsS3Path : undefined;
            resourceInputs["requirementsS3ObjectVersion"] = state ? state.requirementsS3ObjectVersion : undefined;
            resourceInputs["requirementsS3Path"] = state ? state.requirementsS3Path : undefined;
            resourceInputs["schedulers"] = state ? state.schedulers : undefined;
            resourceInputs["sourceBucketArn"] = state ? state.sourceBucketArn : undefined;
            resourceInputs["startupScriptS3ObjectVersion"] = state ? state.startupScriptS3ObjectVersion : undefined;
            resourceInputs["startupScriptS3Path"] = state ? state.startupScriptS3Path : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["waitUntilReady"] = state ? state.waitUntilReady : undefined;
            resourceInputs["webserverAccessMode"] = state ? state.webserverAccessMode : undefined;
            resourceInputs["webserverUrl"] = state ? state.webserverUrl : undefined;
            resourceInputs["weeklyMaintenanceWindowStart"] = state ? state.weeklyMaintenanceWindowStart : undefined;
        } else {
            const args = argsOrState as AwsMwaaEnvironmentArgs | undefined;
            if ((!args || args.dagS3Path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dagS3Path'");
            }
            if ((!args || args.sourceBucketArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceBucketArn'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["airflowConfigurationOptions"] = args?.airflowConfigurationOptions ? pulumi.secret(args.airflowConfigurationOptions) : undefined;
            resourceInputs["airflowVersion"] = args ? args.airflowVersion : undefined;
            resourceInputs["dagS3Path"] = args ? args.dagS3Path : undefined;
            resourceInputs["environmentClass"] = args ? args.environmentClass : undefined;
            resourceInputs["executionRoleArn"] = args ? args.executionRoleArn : undefined;
            resourceInputs["kmsKey"] = args ? args.kmsKey : undefined;
            resourceInputs["loggingConfiguration"] = args ? args.loggingConfiguration : undefined;
            resourceInputs["maxWorkers"] = args ? args.maxWorkers : undefined;
            resourceInputs["minWorkers"] = args ? args.minWorkers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pluginsS3ObjectVersion"] = args ? args.pluginsS3ObjectVersion : undefined;
            resourceInputs["pluginsS3Path"] = args ? args.pluginsS3Path : undefined;
            resourceInputs["requirementsS3ObjectVersion"] = args ? args.requirementsS3ObjectVersion : undefined;
            resourceInputs["requirementsS3Path"] = args ? args.requirementsS3Path : undefined;
            resourceInputs["schedulers"] = args ? args.schedulers : undefined;
            resourceInputs["sourceBucketArn"] = args ? args.sourceBucketArn : undefined;
            resourceInputs["startupScriptS3ObjectVersion"] = args ? args.startupScriptS3ObjectVersion : undefined;
            resourceInputs["startupScriptS3Path"] = args ? args.startupScriptS3Path : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["waitUntilReady"] = args ? args.waitUntilReady : undefined;
            resourceInputs["webserverAccessMode"] = args ? args.webserverAccessMode : undefined;
            resourceInputs["weeklyMaintenanceWindowStart"] = args ? args.weeklyMaintenanceWindowStart : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["fullname"] = undefined /*out*/;
            resourceInputs["lastUpdateds"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["webserverUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["airflowConfigurationOptions"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AwsMwaaEnvironment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsMwaaEnvironment resources.
 */
export interface AwsMwaaEnvironmentState {
    /**
     * The `airflowConfigurationOptions` parameter specifies airflow override options
     */
    airflowConfigurationOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Airflow version of your environment, will be set by default to the latest version that MWAA supports.
     */
    airflowVersion?: pulumi.Input<string>;
    /**
     * The ARN of the Managed Workflows Apache Airflow.
     */
    arn?: pulumi.Input<string>;
    /**
     * The relative path to the DAG folder on your Amazon S3 storage bucket.
     */
    dagS3Path?: pulumi.Input<string>;
    /**
     * Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`, `mw1.xlarge`, `mw1.2xlarge`.
     */
    environmentClass?: pulumi.Input<string>;
    /**
     * The Execution Role ARN of the Amazon MWAA Environment
     */
    executionRoleArn?: pulumi.Input<string>;
    /**
     * The full name provided by duplo for Apache Airflow Environment.
     */
    fullname?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key aws/airflow by default.
     */
    kmsKey?: pulumi.Input<string>;
    lastUpdateds?: pulumi.Input<pulumi.Input<inputs.AwsMwaaEnvironmentLastUpdated>[]>;
    loggingConfiguration?: pulumi.Input<inputs.AwsMwaaEnvironmentLoggingConfiguration>;
    /**
     * The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`.
     */
    maxWorkers?: pulumi.Input<number>;
    /**
     * The minimum number of workers that you want to run in your environment.
     */
    minWorkers?: pulumi.Input<number>;
    /**
     * The name of the Apache Airflow Environment.
     */
    name?: pulumi.Input<string>;
    /**
     * The plugins.zip file version you want to use. If not set, latest s3 file version will be used.
     */
    pluginsS3ObjectVersion?: pulumi.Input<string>;
    /**
     * The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then `pluginsS3ObjectVersion` is required.
     */
    pluginsS3Path?: pulumi.Input<string>;
    /**
     * The requirements.txt file version you want to use. If not set, latest s3 file version will be used.
     */
    requirementsS3ObjectVersion?: pulumi.Input<string>;
    /**
     * The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements*s3*object_version is required.
     */
    requirementsS3Path?: pulumi.Input<string>;
    /**
     * The number of schedulers that you want to run in your environment.
     */
    schedulers?: pulumi.Input<number>;
    /**
     * The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
     */
    sourceBucketArn?: pulumi.Input<string>;
    /**
     * The startup script file version you want to use. If not set, latest s3 file version will be used.
     */
    startupScriptS3ObjectVersion?: pulumi.Input<string>;
    /**
     * The relative path to the startup script file on your Amazon S3 storage bucket. For example, startup_script.sh.
     */
    startupScriptS3Path?: pulumi.Input<string>;
    /**
     * The status of the Amazon MWAA Environment.
     */
    status?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the Managed Workflows Apache Airflow will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Whether or not to wait until Amazon MWAA Environment to be ready, after creation. Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
    /**
     * Specifies whether the webserver should be accessible over the internet or via your specified VPC.  Defaults to `PUBLIC_ONLY`.
     */
    webserverAccessMode?: pulumi.Input<string>;
    /**
     * The webserver URL of the MWAA Environment.
     */
    webserverUrl?: pulumi.Input<string>;
    /**
     * Specifies the start date for the weekly maintenance window.
     */
    weeklyMaintenanceWindowStart?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsMwaaEnvironment resource.
 */
export interface AwsMwaaEnvironmentArgs {
    /**
     * The `airflowConfigurationOptions` parameter specifies airflow override options
     */
    airflowConfigurationOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Airflow version of your environment, will be set by default to the latest version that MWAA supports.
     */
    airflowVersion?: pulumi.Input<string>;
    /**
     * The relative path to the DAG folder on your Amazon S3 storage bucket.
     */
    dagS3Path: pulumi.Input<string>;
    /**
     * Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`, `mw1.xlarge`, `mw1.2xlarge`.
     */
    environmentClass?: pulumi.Input<string>;
    /**
     * The Execution Role ARN of the Amazon MWAA Environment
     */
    executionRoleArn?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key aws/airflow by default.
     */
    kmsKey?: pulumi.Input<string>;
    loggingConfiguration?: pulumi.Input<inputs.AwsMwaaEnvironmentLoggingConfiguration>;
    /**
     * The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`.
     */
    maxWorkers?: pulumi.Input<number>;
    /**
     * The minimum number of workers that you want to run in your environment.
     */
    minWorkers?: pulumi.Input<number>;
    /**
     * The name of the Apache Airflow Environment.
     */
    name?: pulumi.Input<string>;
    /**
     * The plugins.zip file version you want to use. If not set, latest s3 file version will be used.
     */
    pluginsS3ObjectVersion?: pulumi.Input<string>;
    /**
     * The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then `pluginsS3ObjectVersion` is required.
     */
    pluginsS3Path?: pulumi.Input<string>;
    /**
     * The requirements.txt file version you want to use. If not set, latest s3 file version will be used.
     */
    requirementsS3ObjectVersion?: pulumi.Input<string>;
    /**
     * The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements*s3*object_version is required.
     */
    requirementsS3Path?: pulumi.Input<string>;
    /**
     * The number of schedulers that you want to run in your environment.
     */
    schedulers?: pulumi.Input<number>;
    /**
     * The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
     */
    sourceBucketArn: pulumi.Input<string>;
    /**
     * The startup script file version you want to use. If not set, latest s3 file version will be used.
     */
    startupScriptS3ObjectVersion?: pulumi.Input<string>;
    /**
     * The relative path to the startup script file on your Amazon S3 storage bucket. For example, startup_script.sh.
     */
    startupScriptS3Path?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the Managed Workflows Apache Airflow will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Whether or not to wait until Amazon MWAA Environment to be ready, after creation. Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
    /**
     * Specifies whether the webserver should be accessible over the internet or via your specified VPC.  Defaults to `PUBLIC_ONLY`.
     */
    webserverAccessMode?: pulumi.Input<string>;
    /**
     * Specifies the start date for the weekly maintenance window.
     */
    weeklyMaintenanceWindowStart?: pulumi.Input<string>;
}
