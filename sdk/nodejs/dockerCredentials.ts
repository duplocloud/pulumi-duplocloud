// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.DockerCredentials` manages the docker credentials for the tenant in Duplo.
 *
 * This resource allows you take control of docker registry credentials for a specific tenant.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const duplo_app = new duplocloud.Tenant("duplo-app", {
 *     accountName: "duplo-app",
 *     planId: "default",
 *     allowDeletion: true,
 * });
 * const dockerCreds = new duplocloud.DockerCredentials("docker_creds", {
 *     tenantId: duplo_app.tenantId,
 *     userName: "myname",
 *     email: "abc@xyz.com",
 *     password: "p@assW0rd",
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing Docker Credentials
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/dockerCredentials:DockerCredentials myDockerCreds *TENANT_ID*
 * ```
 */
export class DockerCredentials extends pulumi.CustomResource {
    /**
     * Get an existing DockerCredentials resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DockerCredentialsState, opts?: pulumi.CustomResourceOptions): DockerCredentials {
        return new DockerCredentials(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/dockerCredentials:DockerCredentials';

    /**
     * Returns true if the given object is an instance of DockerCredentials.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DockerCredentials {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DockerCredentials.__pulumiType;
    }

    public readonly email!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly registry!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the docker credentials will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a DockerCredentials resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DockerCredentialsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DockerCredentialsArgs | DockerCredentialsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DockerCredentialsState | undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["registry"] = state ? state.registry : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as DockerCredentialsArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["registry"] = args ? args.registry : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DockerCredentials.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DockerCredentials resources.
 */
export interface DockerCredentialsState {
    email?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    registry?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the docker credentials will be created in.
     */
    tenantId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DockerCredentials resource.
 */
export interface DockerCredentialsArgs {
    email: pulumi.Input<string>;
    password: pulumi.Input<string>;
    registry?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the docker credentials will be created in.
     */
    tenantId: pulumi.Input<string>;
    userName: pulumi.Input<string>;
}
