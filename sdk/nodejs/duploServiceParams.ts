// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.DuploServiceLbconfigs` manages additional configuration for a container-based service in Duplo.
 *
 * NOTE: For Amazon ECS services, see the `duplocloud.EcsService` resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * // Deploy NGINX using Duplo's native container agent, and configure additional load balancer settings.
 * const myservice = new duplocloud.DuploService("myservice", {
 *     tenantId: myapp.tenantId,
 *     name: "myservice",
 *     agentPlatform: 0,
 *     dockerImage: "nginx:latest",
 *     replicas: 1,
 * });
 * const myserviceDuploServiceLbconfigs = new duplocloud.DuploServiceLbconfigs("myservice", {
 *     tenantId: myservice.tenantId,
 *     replicationControllerName: myservice.name,
 *     lbconfigs: [{
 *         externalPort: 80,
 *         healthCheckUrl: "/",
 *         isNative: false,
 *         lbType: 1,
 *         port: "80",
 *         protocol: "http",
 *     }],
 * });
 * const myserviceDuploServiceParams = new duplocloud.DuploServiceParams("myservice", {
 *     tenantId: myserviceDuploServiceLbconfigs.tenantId,
 *     replicationControllerName: myserviceDuploServiceLbconfigs.replicationControllerName,
 *     dnsPrfx: "myservice",
 *     dropInvalidHeaders: true,
 *     enableAccessLogs: true,
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing service's parameters
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *NAME* is the name of the service
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/duploServiceParams:DuploServiceParams myservice v2/subscriptions/*TENANT_ID*&#47;ReplicationControllerParamsV2/*NAME*
 * ```
 */
export class DuploServiceParams extends pulumi.CustomResource {
    /**
     * Get an existing DuploServiceParams resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DuploServiceParamsState, opts?: pulumi.CustomResourceOptions): DuploServiceParams {
        return new DuploServiceParams(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/duploServiceParams:DuploServiceParams';

    /**
     * Returns true if the given object is an instance of DuploServiceParams.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DuploServiceParams {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DuploServiceParams.__pulumiType;
    }

    /**
     * The DNS prefix to assign to this service's load balancer.
     */
    public readonly dnsPrfx!: pulumi.Output<string>;
    /**
     * Whether or not to drop invalid HTTP headers received by the load balancer.
     */
    public readonly dropInvalidHeaders!: pulumi.Output<boolean>;
    /**
     * Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan
     */
    public readonly enableAccessLogs!: pulumi.Output<boolean>;
    /**
     * Whether or not to enable http to https redirection.
     */
    public readonly httpToHttpsRedirect!: pulumi.Output<boolean>;
    /**
     * The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
     */
    public readonly idleTimeout!: pulumi.Output<number>;
    /**
     * The load balancer ARN.
     */
    public /*out*/ readonly loadBalancerArn!: pulumi.Output<string>;
    /**
     * The load balancer name.
     */
    public /*out*/ readonly loadBalancerName!: pulumi.Output<string>;
    /**
     * The name of the duplo service.
     */
    public readonly replicationControllerName!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that hosts the duplo service.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * The ARN of a web application firewall to associate this load balancer.
     */
    public readonly webaclid!: pulumi.Output<string>;

    /**
     * Create a DuploServiceParams resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DuploServiceParamsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DuploServiceParamsArgs | DuploServiceParamsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DuploServiceParamsState | undefined;
            resourceInputs["dnsPrfx"] = state ? state.dnsPrfx : undefined;
            resourceInputs["dropInvalidHeaders"] = state ? state.dropInvalidHeaders : undefined;
            resourceInputs["enableAccessLogs"] = state ? state.enableAccessLogs : undefined;
            resourceInputs["httpToHttpsRedirect"] = state ? state.httpToHttpsRedirect : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["loadBalancerArn"] = state ? state.loadBalancerArn : undefined;
            resourceInputs["loadBalancerName"] = state ? state.loadBalancerName : undefined;
            resourceInputs["replicationControllerName"] = state ? state.replicationControllerName : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["webaclid"] = state ? state.webaclid : undefined;
        } else {
            const args = argsOrState as DuploServiceParamsArgs | undefined;
            if ((!args || args.replicationControllerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationControllerName'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["dnsPrfx"] = args ? args.dnsPrfx : undefined;
            resourceInputs["dropInvalidHeaders"] = args ? args.dropInvalidHeaders : undefined;
            resourceInputs["enableAccessLogs"] = args ? args.enableAccessLogs : undefined;
            resourceInputs["httpToHttpsRedirect"] = args ? args.httpToHttpsRedirect : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["replicationControllerName"] = args ? args.replicationControllerName : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["webaclid"] = args ? args.webaclid : undefined;
            resourceInputs["loadBalancerArn"] = undefined /*out*/;
            resourceInputs["loadBalancerName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DuploServiceParams.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DuploServiceParams resources.
 */
export interface DuploServiceParamsState {
    /**
     * The DNS prefix to assign to this service's load balancer.
     */
    dnsPrfx?: pulumi.Input<string>;
    /**
     * Whether or not to drop invalid HTTP headers received by the load balancer.
     */
    dropInvalidHeaders?: pulumi.Input<boolean>;
    /**
     * Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan
     */
    enableAccessLogs?: pulumi.Input<boolean>;
    /**
     * Whether or not to enable http to https redirection.
     */
    httpToHttpsRedirect?: pulumi.Input<boolean>;
    /**
     * The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * The load balancer ARN.
     */
    loadBalancerArn?: pulumi.Input<string>;
    /**
     * The load balancer name.
     */
    loadBalancerName?: pulumi.Input<string>;
    /**
     * The name of the duplo service.
     */
    replicationControllerName?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that hosts the duplo service.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The ARN of a web application firewall to associate this load balancer.
     */
    webaclid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DuploServiceParams resource.
 */
export interface DuploServiceParamsArgs {
    /**
     * The DNS prefix to assign to this service's load balancer.
     */
    dnsPrfx?: pulumi.Input<string>;
    /**
     * Whether or not to drop invalid HTTP headers received by the load balancer.
     */
    dropInvalidHeaders?: pulumi.Input<boolean>;
    /**
     * Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan
     */
    enableAccessLogs?: pulumi.Input<boolean>;
    /**
     * Whether or not to enable http to https redirection.
     */
    httpToHttpsRedirect?: pulumi.Input<boolean>;
    /**
     * The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * The name of the duplo service.
     */
    replicationControllerName: pulumi.Input<string>;
    /**
     * The GUID of the tenant that hosts the duplo service.
     */
    tenantId: pulumi.Input<string>;
    /**
     * The ARN of a web application firewall to associate this load balancer.
     */
    webaclid?: pulumi.Input<string>;
}
