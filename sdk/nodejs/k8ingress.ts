// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.K8Ingress` manages a kubernetes Ingress in a Duplo tenant.
 *
 * ## Import
 *
 * Example: Importing an existing kubernetes ingress
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *NAME* is the ingress name
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/k8Ingress:K8Ingress ingress v3/subscriptions/*TENANT_ID*&#47;k8s/ingress/*NAME*
 * ```
 */
export class K8Ingress extends pulumi.CustomResource {
    /**
     * Get an existing K8Ingress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8IngressState, opts?: pulumi.CustomResourceOptions): K8Ingress {
        return new K8Ingress(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/k8Ingress:K8Ingress';

    /**
     * Returns true if the given object is an instance of K8Ingress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8Ingress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8Ingress.__pulumiType;
    }

    /**
     * An unstructured key value map stored with the ingress that may be used to store arbitrary metadata.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * The ingress class name references an IngressClass resource that contains additional configuration including the name of the controller that should implement the class.
     */
    public readonly ingressClassName!: pulumi.Output<string>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service. May match selectors of replication controllers and services.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The load balancer configuration. This is required when `ingressClassName` is set to `alb`.
     */
    public readonly lbconfig!: pulumi.Output<outputs.K8IngressLbconfig>;
    /**
     * The name of the Ingress.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of host rules used to configure the Ingress.
     */
    public readonly rules!: pulumi.Output<outputs.K8IngressRule[]>;
    /**
     * The GUID of the tenant that the Ingress will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Block represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI
     */
    public readonly tls!: pulumi.Output<outputs.K8IngressTl[] | undefined>;

    /**
     * Create a K8Ingress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8IngressArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8IngressArgs | K8IngressState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8IngressState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["ingressClassName"] = state ? state.ingressClassName : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lbconfig"] = state ? state.lbconfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["tls"] = state ? state.tls : undefined;
        } else {
            const args = argsOrState as K8IngressArgs | undefined;
            if ((!args || args.ingressClassName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ingressClassName'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["ingressClassName"] = args ? args.ingressClassName : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["lbconfig"] = args ? args.lbconfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["tls"] = args ? args.tls : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8Ingress.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering K8Ingress resources.
 */
export interface K8IngressState {
    /**
     * An unstructured key value map stored with the ingress that may be used to store arbitrary metadata.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ingress class name references an IngressClass resource that contains additional configuration including the name of the controller that should implement the class.
     */
    ingressClassName?: pulumi.Input<string>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service. May match selectors of replication controllers and services.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The load balancer configuration. This is required when `ingressClassName` is set to `alb`.
     */
    lbconfig?: pulumi.Input<inputs.K8IngressLbconfig>;
    /**
     * The name of the Ingress.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of host rules used to configure the Ingress.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.K8IngressRule>[]>;
    /**
     * The GUID of the tenant that the Ingress will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Block represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI
     */
    tls?: pulumi.Input<pulumi.Input<inputs.K8IngressTl>[]>;
}

/**
 * The set of arguments for constructing a K8Ingress resource.
 */
export interface K8IngressArgs {
    /**
     * An unstructured key value map stored with the ingress that may be used to store arbitrary metadata.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ingress class name references an IngressClass resource that contains additional configuration including the name of the controller that should implement the class.
     */
    ingressClassName: pulumi.Input<string>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service. May match selectors of replication controllers and services.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The load balancer configuration. This is required when `ingressClassName` is set to `alb`.
     */
    lbconfig?: pulumi.Input<inputs.K8IngressLbconfig>;
    /**
     * The name of the Ingress.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of host rules used to configure the Ingress.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.K8IngressRule>[]>;
    /**
     * The GUID of the tenant that the Ingress will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Block represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI
     */
    tls?: pulumi.Input<pulumi.Input<inputs.K8IngressTl>[]>;
}
