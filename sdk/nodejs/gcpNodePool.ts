// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloudGcpK8NodePools` manages a GCP Node Pool in Duplo.
 *
 * ## Import
 *
 * Example: Importing an existing GCP Node Pool
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *FULLNAME* is the  name of the Node Pool
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/gcpNodePool:GcpNodePool node_pool *TENANT_ID*&#47;*FULLNAME*
 * ```
 */
export class GcpNodePool extends pulumi.CustomResource {
    /**
     * Get an existing GcpNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GcpNodePoolState, opts?: pulumi.CustomResourceOptions): GcpNodePool {
        return new GcpNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/gcpNodePool:GcpNodePool';

    /**
     * Returns true if the given object is an instance of GcpNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GcpNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GcpNodePool.__pulumiType;
    }

    public readonly accelerators!: pulumi.Output<outputs.GcpNodePoolAccelerator[] | undefined>;
    /**
     * Whether the nodes will be automatically repaired.
     */
    public readonly autoRepair!: pulumi.Output<boolean>;
    /**
     * Whether the nodes will be automatically upgraded.
     */
    public readonly autoUpgrade!: pulumi.Output<boolean>;
    /**
     * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the
     * default disk size is 100GB.
     */
    public readonly discSizeGb!: pulumi.Output<number>;
    /**
     * Type of the disk attached to each node If unspecified, the default disk type is 'pd-standard'
     */
    public readonly discType!: pulumi.Output<string>;
    /**
     * The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
     * attribute.
     */
    public /*out*/ readonly fullname!: pulumi.Output<string>;
    /**
     * The image type to use for this node. Note that for a given image type, the latest version of it will be used
     */
    public readonly imageType!: pulumi.Output<string>;
    /**
     * The initial node count for the pool
     */
    public readonly initialNodeCount!: pulumi.Output<number | undefined>;
    /**
     * Is autoscaling enabled for this node pool.
     */
    public readonly isAutoscalingEnabled!: pulumi.Output<boolean>;
    /**
     * The map of Kubernetes labels (key/value pairs) to be applied to each node.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Parameters that can be configured on Linux nodes
     */
    public readonly linuxNodeConfig!: pulumi.Output<outputs.GcpNodePoolLinuxNodeConfig>;
    /**
     * Update strategy of the node pool.
     */
    public readonly locationPolicy!: pulumi.Output<string | undefined>;
    /**
     * The name of a Google Compute Engine machine type. If unspecified, the default machine type is e2-medium.
     */
    public readonly machineType!: pulumi.Output<string>;
    /**
     * Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
     */
    public readonly maxNodeCount!: pulumi.Output<number | undefined>;
    /**
     * The metadata key/value pairs assigned to instances in the cluster.
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
     */
    public readonly minNodeCount!: pulumi.Output<number | undefined>;
    /**
     * The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
     * attribute.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Logging configuration.
     */
    public readonly nodePoolLoggingConfig!: pulumi.Output<outputs.GcpNodePoolNodePoolLoggingConfig>;
    /**
     * The set of Google API scopes to be made available on all of the node VMs under the default service account.
     */
    public readonly oauthScopes!: pulumi.Output<string[]>;
    /**
     * Resource labels associated to node pool
     */
    public readonly resourceLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Spot flag for enabling Spot VM
     */
    public readonly spot!: pulumi.Output<boolean | undefined>;
    /**
     * The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls
     * and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
     */
    public readonly tags!: pulumi.Output<string[]>;
    public readonly taints!: pulumi.Output<outputs.GcpNodePoolTaint[] | undefined>;
    /**
     * The GUID of the tenant that the node pool will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
     */
    public readonly totalMaxNodeCount!: pulumi.Output<number | undefined>;
    /**
     * Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
     */
    public readonly totalMinNodeCount!: pulumi.Output<number | undefined>;
    /**
     * Upgrade settings control disruption and speed of the upgrade.
     */
    public readonly upgradeSettings!: pulumi.Output<outputs.GcpNodePoolUpgradeSetting[]>;
    /**
     * The list of Google Compute Engine zones in which the NodePool's nodes should be located.
     */
    public readonly zones!: pulumi.Output<string[]>;

    /**
     * Create a GcpNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GcpNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GcpNodePoolArgs | GcpNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GcpNodePoolState | undefined;
            resourceInputs["accelerators"] = state ? state.accelerators : undefined;
            resourceInputs["autoRepair"] = state ? state.autoRepair : undefined;
            resourceInputs["autoUpgrade"] = state ? state.autoUpgrade : undefined;
            resourceInputs["discSizeGb"] = state ? state.discSizeGb : undefined;
            resourceInputs["discType"] = state ? state.discType : undefined;
            resourceInputs["fullname"] = state ? state.fullname : undefined;
            resourceInputs["imageType"] = state ? state.imageType : undefined;
            resourceInputs["initialNodeCount"] = state ? state.initialNodeCount : undefined;
            resourceInputs["isAutoscalingEnabled"] = state ? state.isAutoscalingEnabled : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["linuxNodeConfig"] = state ? state.linuxNodeConfig : undefined;
            resourceInputs["locationPolicy"] = state ? state.locationPolicy : undefined;
            resourceInputs["machineType"] = state ? state.machineType : undefined;
            resourceInputs["maxNodeCount"] = state ? state.maxNodeCount : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["minNodeCount"] = state ? state.minNodeCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodePoolLoggingConfig"] = state ? state.nodePoolLoggingConfig : undefined;
            resourceInputs["oauthScopes"] = state ? state.oauthScopes : undefined;
            resourceInputs["resourceLabels"] = state ? state.resourceLabels : undefined;
            resourceInputs["spot"] = state ? state.spot : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["totalMaxNodeCount"] = state ? state.totalMaxNodeCount : undefined;
            resourceInputs["totalMinNodeCount"] = state ? state.totalMinNodeCount : undefined;
            resourceInputs["upgradeSettings"] = state ? state.upgradeSettings : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as GcpNodePoolArgs | undefined;
            if ((!args || args.imageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageType'");
            }
            if ((!args || args.machineType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machineType'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.zones === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zones'");
            }
            resourceInputs["accelerators"] = args ? args.accelerators : undefined;
            resourceInputs["autoRepair"] = args ? args.autoRepair : undefined;
            resourceInputs["autoUpgrade"] = args ? args.autoUpgrade : undefined;
            resourceInputs["discSizeGb"] = args ? args.discSizeGb : undefined;
            resourceInputs["discType"] = args ? args.discType : undefined;
            resourceInputs["imageType"] = args ? args.imageType : undefined;
            resourceInputs["initialNodeCount"] = args ? args.initialNodeCount : undefined;
            resourceInputs["isAutoscalingEnabled"] = args ? args.isAutoscalingEnabled : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["linuxNodeConfig"] = args ? args.linuxNodeConfig : undefined;
            resourceInputs["locationPolicy"] = args ? args.locationPolicy : undefined;
            resourceInputs["machineType"] = args ? args.machineType : undefined;
            resourceInputs["maxNodeCount"] = args ? args.maxNodeCount : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["minNodeCount"] = args ? args.minNodeCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodePoolLoggingConfig"] = args ? args.nodePoolLoggingConfig : undefined;
            resourceInputs["oauthScopes"] = args ? args.oauthScopes : undefined;
            resourceInputs["resourceLabels"] = args ? args.resourceLabels : undefined;
            resourceInputs["spot"] = args ? args.spot : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["totalMaxNodeCount"] = args ? args.totalMaxNodeCount : undefined;
            resourceInputs["totalMinNodeCount"] = args ? args.totalMinNodeCount : undefined;
            resourceInputs["upgradeSettings"] = args ? args.upgradeSettings : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
            resourceInputs["fullname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GcpNodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GcpNodePool resources.
 */
export interface GcpNodePoolState {
    accelerators?: pulumi.Input<pulumi.Input<inputs.GcpNodePoolAccelerator>[]>;
    /**
     * Whether the nodes will be automatically repaired.
     */
    autoRepair?: pulumi.Input<boolean>;
    /**
     * Whether the nodes will be automatically upgraded.
     */
    autoUpgrade?: pulumi.Input<boolean>;
    /**
     * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the
     * default disk size is 100GB.
     */
    discSizeGb?: pulumi.Input<number>;
    /**
     * Type of the disk attached to each node If unspecified, the default disk type is 'pd-standard'
     */
    discType?: pulumi.Input<string>;
    /**
     * The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
     * attribute.
     */
    fullname?: pulumi.Input<string>;
    /**
     * The image type to use for this node. Note that for a given image type, the latest version of it will be used
     */
    imageType?: pulumi.Input<string>;
    /**
     * The initial node count for the pool
     */
    initialNodeCount?: pulumi.Input<number>;
    /**
     * Is autoscaling enabled for this node pool.
     */
    isAutoscalingEnabled?: pulumi.Input<boolean>;
    /**
     * The map of Kubernetes labels (key/value pairs) to be applied to each node.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Parameters that can be configured on Linux nodes
     */
    linuxNodeConfig?: pulumi.Input<inputs.GcpNodePoolLinuxNodeConfig>;
    /**
     * Update strategy of the node pool.
     */
    locationPolicy?: pulumi.Input<string>;
    /**
     * The name of a Google Compute Engine machine type. If unspecified, the default machine type is e2-medium.
     */
    machineType?: pulumi.Input<string>;
    /**
     * Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
     */
    maxNodeCount?: pulumi.Input<number>;
    /**
     * The metadata key/value pairs assigned to instances in the cluster.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
     */
    minNodeCount?: pulumi.Input<number>;
    /**
     * The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
     * attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * Logging configuration.
     */
    nodePoolLoggingConfig?: pulumi.Input<inputs.GcpNodePoolNodePoolLoggingConfig>;
    /**
     * The set of Google API scopes to be made available on all of the node VMs under the default service account.
     */
    oauthScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Resource labels associated to node pool
     */
    resourceLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Spot flag for enabling Spot VM
     */
    spot?: pulumi.Input<boolean>;
    /**
     * The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls
     * and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    taints?: pulumi.Input<pulumi.Input<inputs.GcpNodePoolTaint>[]>;
    /**
     * The GUID of the tenant that the node pool will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
     */
    totalMaxNodeCount?: pulumi.Input<number>;
    /**
     * Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
     */
    totalMinNodeCount?: pulumi.Input<number>;
    /**
     * Upgrade settings control disruption and speed of the upgrade.
     */
    upgradeSettings?: pulumi.Input<pulumi.Input<inputs.GcpNodePoolUpgradeSetting>[]>;
    /**
     * The list of Google Compute Engine zones in which the NodePool's nodes should be located.
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a GcpNodePool resource.
 */
export interface GcpNodePoolArgs {
    accelerators?: pulumi.Input<pulumi.Input<inputs.GcpNodePoolAccelerator>[]>;
    /**
     * Whether the nodes will be automatically repaired.
     */
    autoRepair?: pulumi.Input<boolean>;
    /**
     * Whether the nodes will be automatically upgraded.
     */
    autoUpgrade?: pulumi.Input<boolean>;
    /**
     * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the
     * default disk size is 100GB.
     */
    discSizeGb?: pulumi.Input<number>;
    /**
     * Type of the disk attached to each node If unspecified, the default disk type is 'pd-standard'
     */
    discType?: pulumi.Input<string>;
    /**
     * The image type to use for this node. Note that for a given image type, the latest version of it will be used
     */
    imageType: pulumi.Input<string>;
    /**
     * The initial node count for the pool
     */
    initialNodeCount?: pulumi.Input<number>;
    /**
     * Is autoscaling enabled for this node pool.
     */
    isAutoscalingEnabled?: pulumi.Input<boolean>;
    /**
     * The map of Kubernetes labels (key/value pairs) to be applied to each node.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Parameters that can be configured on Linux nodes
     */
    linuxNodeConfig?: pulumi.Input<inputs.GcpNodePoolLinuxNodeConfig>;
    /**
     * Update strategy of the node pool.
     */
    locationPolicy?: pulumi.Input<string>;
    /**
     * The name of a Google Compute Engine machine type. If unspecified, the default machine type is e2-medium.
     */
    machineType: pulumi.Input<string>;
    /**
     * Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
     */
    maxNodeCount?: pulumi.Input<number>;
    /**
     * The metadata key/value pairs assigned to instances in the cluster.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
     */
    minNodeCount?: pulumi.Input<number>;
    /**
     * The short name of the node pool. Duplo will add a prefix to the name. You can retrieve the full name from the `fullname`
     * attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * Logging configuration.
     */
    nodePoolLoggingConfig?: pulumi.Input<inputs.GcpNodePoolNodePoolLoggingConfig>;
    /**
     * The set of Google API scopes to be made available on all of the node VMs under the default service account.
     */
    oauthScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Resource labels associated to node pool
     */
    resourceLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Spot flag for enabling Spot VM
     */
    spot?: pulumi.Input<boolean>;
    /**
     * The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls
     * and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    taints?: pulumi.Input<pulumi.Input<inputs.GcpNodePoolTaint>[]>;
    /**
     * The GUID of the tenant that the node pool will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
     */
    totalMaxNodeCount?: pulumi.Input<number>;
    /**
     * Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
     */
    totalMinNodeCount?: pulumi.Input<number>;
    /**
     * Upgrade settings control disruption and speed of the upgrade.
     */
    upgradeSettings?: pulumi.Input<pulumi.Input<inputs.GcpNodePoolUpgradeSetting>[]>;
    /**
     * The list of Google Compute Engine zones in which the NodePool's nodes should be located.
     */
    zones: pulumi.Input<pulumi.Input<string>[]>;
}
