// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const credential = duplocloud.getGkeCredentials({
 *     planId: "non-prod",
 * });
 * export const credentialValue = {
 *     caCertificateData: credential.then(credential => credential.caCertificateData),
 *     endpoint: credential.then(credential => credential.endpoint),
 *     name: credential.then(credential => credential.name),
 *     version: credential.then(credential => credential.version),
 *     region: credential.then(credential => credential.region),
 *     token: credential.then(credential => credential.token),
 * };
 * ```
 */
export function getGkeCredentials(args: GetGkeCredentialsArgs, opts?: pulumi.InvokeOptions): Promise<GetGkeCredentialsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("duplocloud:index/getGkeCredentials:getGkeCredentials", {
        "planId": args.planId,
    }, opts);
}

/**
 * A collection of arguments for invoking getGkeCredentials.
 */
export interface GetGkeCredentialsArgs {
    planId: string;
}

/**
 * A collection of values returned by getGkeCredentials.
 */
export interface GetGkeCredentialsResult {
    readonly caCertificateData: string;
    readonly endpoint: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly planId: string;
    readonly region: string;
    readonly token: string;
    readonly version: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const credential = duplocloud.getGkeCredentials({
 *     planId: "non-prod",
 * });
 * export const credentialValue = {
 *     caCertificateData: credential.then(credential => credential.caCertificateData),
 *     endpoint: credential.then(credential => credential.endpoint),
 *     name: credential.then(credential => credential.name),
 *     version: credential.then(credential => credential.version),
 *     region: credential.then(credential => credential.region),
 *     token: credential.then(credential => credential.token),
 * };
 * ```
 */
export function getGkeCredentialsOutput(args: GetGkeCredentialsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetGkeCredentialsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("duplocloud:index/getGkeCredentials:getGkeCredentials", {
        "planId": args.planId,
    }, opts);
}

/**
 * A collection of arguments for invoking getGkeCredentials.
 */
export interface GetGkeCredentialsOutputArgs {
    planId: pulumi.Input<string>;
}
