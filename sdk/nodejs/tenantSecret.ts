// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.TenantSecret` manages a tenant secret in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * // Example with plaintext data.
 * const mysecret1 = new duplocloud.TenantSecret("mysecret1", {
 *     tenantId: myapp.tenantId,
 *     nameSuffix: "mytext",
 *     data: "hi",
 * });
 * // Example with JSON data.
 * const mysecret2 = new duplocloud.TenantSecret("mysecret2", {
 *     tenantId: myapp.tenantId,
 *     nameSuffix: "myjson",
 *     data: JSON.stringify({
 *         foo: "bar",
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import duplocloud:index/tenantSecret:TenantSecret myapp TENANT_ID/SECRET_NAME
 * ```
 */
export class TenantSecret extends pulumi.CustomResource {
    /**
     * Get an existing TenantSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TenantSecretState, opts?: pulumi.CustomResourceOptions): TenantSecret {
        return new TenantSecret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/tenantSecret:TenantSecret';

    /**
     * Returns true if the given object is an instance of TenantSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TenantSecret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TenantSecret.__pulumiType;
    }

    /**
     * The ARN of the created secret.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The plaintext secret data. You can use the `jsonencode()` function to store JSON data in this field.
     */
    public readonly data!: pulumi.Output<string>;
    /**
     * The full name of the secret.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The short name of the secret. You can get the fullname from the `name` attribute after creation.
     */
    public readonly nameSuffix!: pulumi.Output<string>;
    /**
     * Whether or not rotation is enabled for this secret.
     */
    public /*out*/ readonly rotationEnabled!: pulumi.Output<boolean>;
    /**
     * A list of tags for this secret.
     */
    public /*out*/ readonly tags!: pulumi.Output<outputs.TenantSecretTag[]>;
    /**
     * The GUID of the tenant that the secret will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * The version ID of the secret.
     */
    public /*out*/ readonly versionId!: pulumi.Output<string>;

    /**
     * Create a TenantSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TenantSecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TenantSecretArgs | TenantSecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TenantSecretState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameSuffix"] = state ? state.nameSuffix : undefined;
            resourceInputs["rotationEnabled"] = state ? state.rotationEnabled : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
        } else {
            const args = argsOrState as TenantSecretArgs | undefined;
            if ((!args || args.data === undefined) && !opts.urn) {
                throw new Error("Missing required property 'data'");
            }
            if ((!args || args.nameSuffix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nameSuffix'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["data"] = args?.data ? pulumi.secret(args.data) : undefined;
            resourceInputs["nameSuffix"] = args ? args.nameSuffix : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["rotationEnabled"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["data"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(TenantSecret.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TenantSecret resources.
 */
export interface TenantSecretState {
    /**
     * The ARN of the created secret.
     */
    arn?: pulumi.Input<string>;
    /**
     * The plaintext secret data. You can use the `jsonencode()` function to store JSON data in this field.
     */
    data?: pulumi.Input<string>;
    /**
     * The full name of the secret.
     */
    name?: pulumi.Input<string>;
    /**
     * The short name of the secret. You can get the fullname from the `name` attribute after creation.
     */
    nameSuffix?: pulumi.Input<string>;
    /**
     * Whether or not rotation is enabled for this secret.
     */
    rotationEnabled?: pulumi.Input<boolean>;
    /**
     * A list of tags for this secret.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TenantSecretTag>[]>;
    /**
     * The GUID of the tenant that the secret will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The version ID of the secret.
     */
    versionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TenantSecret resource.
 */
export interface TenantSecretArgs {
    /**
     * The plaintext secret data. You can use the `jsonencode()` function to store JSON data in this field.
     */
    data: pulumi.Input<string>;
    /**
     * The short name of the secret. You can get the fullname from the `name` attribute after creation.
     */
    nameSuffix: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the secret will be created in.
     */
    tenantId: pulumi.Input<string>;
}
