// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const myappK8sJob = new duplocloud.K8sJob("myapp", {
 *     tenantId: myapp.tenantId,
 *     metadata: {
 *         name: "jobname",
 *     },
 *     specs: [{
 *         template: {
 *             spec: {
 *                 containers: [{
 *                     name: "containername",
 *                     image: "nginx:latest",
 *                 }],
 *             },
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing kubernetes job
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *NAME* is the k8s job name
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/k8sJob:K8sJob myapp v3/subscriptions/*TENANT_ID*&#47;k8s/job/*NAME*
 * ```
 */
export class K8sJob extends pulumi.CustomResource {
    /**
     * Get an existing K8sJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8sJobState, opts?: pulumi.CustomResourceOptions): K8sJob {
        return new K8sJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/k8sJob:K8sJob';

    /**
     * Returns true if the given object is an instance of K8sJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8sJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8sJob.__pulumiType;
    }

    /**
     * Defaults to `false`.
     */
    public readonly isAnyHostAllowed!: pulumi.Output<boolean | undefined>;
    /**
     * Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    public readonly metadata!: pulumi.Output<outputs.K8sJobMetadata>;
    /**
     * Spec of the job owned by the cluster
     */
    public readonly specs!: pulumi.Output<outputs.K8sJobSpec[] | undefined>;
    /**
     * The GUID of the tenant that the job will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    public readonly waitForCompletion!: pulumi.Output<boolean | undefined>;

    /**
     * Create a K8sJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8sJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8sJobArgs | K8sJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8sJobState | undefined;
            resourceInputs["isAnyHostAllowed"] = state ? state.isAnyHostAllowed : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["specs"] = state ? state.specs : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["waitForCompletion"] = state ? state.waitForCompletion : undefined;
        } else {
            const args = argsOrState as K8sJobArgs | undefined;
            if ((!args || args.metadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadata'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["isAnyHostAllowed"] = args ? args.isAnyHostAllowed : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["specs"] = args ? args.specs : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["waitForCompletion"] = args ? args.waitForCompletion : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8sJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering K8sJob resources.
 */
export interface K8sJobState {
    /**
     * Defaults to `false`.
     */
    isAnyHostAllowed?: pulumi.Input<boolean>;
    /**
     * Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata?: pulumi.Input<inputs.K8sJobMetadata>;
    /**
     * Spec of the job owned by the cluster
     */
    specs?: pulumi.Input<pulumi.Input<inputs.K8sJobSpec>[]>;
    /**
     * The GUID of the tenant that the job will be created in.
     */
    tenantId?: pulumi.Input<string>;
    waitForCompletion?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a K8sJob resource.
 */
export interface K8sJobArgs {
    /**
     * Defaults to `false`.
     */
    isAnyHostAllowed?: pulumi.Input<boolean>;
    /**
     * Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: pulumi.Input<inputs.K8sJobMetadata>;
    /**
     * Spec of the job owned by the cluster
     */
    specs?: pulumi.Input<pulumi.Input<inputs.K8sJobSpec>[]>;
    /**
     * The GUID of the tenant that the job will be created in.
     */
    tenantId: pulumi.Input<string>;
    waitForCompletion?: pulumi.Input<boolean>;
}
