// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.PlanWaf` manages the list of waf's avaialble to a plan in Duplo.
 *
 * This resource allows you take control of individual waf's for a specific plan.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myplan = new duplocloud.PlanWaf("myplan", {
 *     planId: "plan-name",
 *     wafName: "WebAcl name",
 *     wafArn: "WebAcl ARN",
 *     dashboardUrl: "dashboard url",
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing WAF instance
 *
 *  - *PLAN_ID* is the plan name
 *
 *  - *WAF_NAME* is the name of the WAF
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/planWaf:PlanWaf myplan *PLAN_ID*&#47;*WAF_NAME*
 * ```
 */
export class PlanWaf extends pulumi.CustomResource {
    /**
     * Get an existing PlanWaf resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlanWafState, opts?: pulumi.CustomResourceOptions): PlanWaf {
        return new PlanWaf(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/planWaf:PlanWaf';

    /**
     * Returns true if the given object is an instance of PlanWaf.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlanWaf {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlanWaf.__pulumiType;
    }

    public readonly dashboardUrl!: pulumi.Output<string>;
    /**
     * The ID of the plan for waf.
     */
    public readonly planId!: pulumi.Output<string>;
    public readonly wafArn!: pulumi.Output<string>;
    public readonly wafName!: pulumi.Output<string>;

    /**
     * Create a PlanWaf resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlanWafArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlanWafArgs | PlanWafState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlanWafState | undefined;
            resourceInputs["dashboardUrl"] = state ? state.dashboardUrl : undefined;
            resourceInputs["planId"] = state ? state.planId : undefined;
            resourceInputs["wafArn"] = state ? state.wafArn : undefined;
            resourceInputs["wafName"] = state ? state.wafName : undefined;
        } else {
            const args = argsOrState as PlanWafArgs | undefined;
            if ((!args || args.planId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'planId'");
            }
            if ((!args || args.wafArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'wafArn'");
            }
            if ((!args || args.wafName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'wafName'");
            }
            resourceInputs["dashboardUrl"] = args ? args.dashboardUrl : undefined;
            resourceInputs["planId"] = args ? args.planId : undefined;
            resourceInputs["wafArn"] = args ? args.wafArn : undefined;
            resourceInputs["wafName"] = args ? args.wafName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlanWaf.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PlanWaf resources.
 */
export interface PlanWafState {
    dashboardUrl?: pulumi.Input<string>;
    /**
     * The ID of the plan for waf.
     */
    planId?: pulumi.Input<string>;
    wafArn?: pulumi.Input<string>;
    wafName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PlanWaf resource.
 */
export interface PlanWafArgs {
    dashboardUrl?: pulumi.Input<string>;
    /**
     * The ID of the plan for waf.
     */
    planId: pulumi.Input<string>;
    wafArn: pulumi.Input<string>;
    wafName: pulumi.Input<string>;
}
