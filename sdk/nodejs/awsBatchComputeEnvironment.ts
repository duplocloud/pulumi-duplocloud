// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.AwsBatchComputeEnvironment` manages an aws batch compute environment in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const bce = new duplocloud.AwsBatchComputeEnvironment("bce", {
 *     tenantId: myapp.tenantId,
 *     name: "sample",
 *     computeResources: {
 *         ec2Configuration: {
 *             imageType: "ECS_AL2",
 *         },
 *         instanceTypes: ["optimal"],
 *         allocationStrategy: "BEST_FIT",
 *         maxVcpus: 8,
 *         minVcpus: 1,
 *         desiredVcpus: 2,
 *         bidPercentage: 100,
 *         type: "EC2",
 *     },
 *     type: "MANAGED",
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing AWS Batch Compute Environment
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *NAME* is the short name of compute environment
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/awsBatchComputeEnvironment:AwsBatchComputeEnvironment bce *TENANT_ID*&#47;*NAME*
 * ```
 */
export class AwsBatchComputeEnvironment extends pulumi.CustomResource {
    /**
     * Get an existing AwsBatchComputeEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsBatchComputeEnvironmentState, opts?: pulumi.CustomResourceOptions): AwsBatchComputeEnvironment {
        return new AwsBatchComputeEnvironment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/awsBatchComputeEnvironment:AwsBatchComputeEnvironment';

    /**
     * Returns true if the given object is an instance of AwsBatchComputeEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsBatchComputeEnvironment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsBatchComputeEnvironment.__pulumiType;
    }

    /**
     * The Amazon Resource Name of the compute environment.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments.
     */
    public readonly computeResources!: pulumi.Output<outputs.AwsBatchComputeEnvironmentComputeResources | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.
     */
    public /*out*/ readonly ecsClusterArn!: pulumi.Output<string>;
    /**
     * The full name of the compute environment.
     */
    public /*out*/ readonly fullname!: pulumi.Output<string>;
    /**
     * Specifies the name of the compute environment.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
     */
    public readonly serviceRole!: pulumi.Output<string>;
    /**
     * The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Compute environment must be created in `ENABLED` state. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * The current status of the compute environment (for example, CREATING or VALID).
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A short, human-readable string to provide additional details about the current status of the compute environment.
     */
    public /*out*/ readonly statusReason!: pulumi.Output<string>;
    /**
     * Key-value map of resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    /**
     * The GUID of the tenant that the aws batch compute environment will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * The type of the compute environment. Valid items are `MANAGED` or `UNMANAGED`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Defaults to `true`.
     */
    public readonly waitForDeployment!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AwsBatchComputeEnvironment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsBatchComputeEnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsBatchComputeEnvironmentArgs | AwsBatchComputeEnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsBatchComputeEnvironmentState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["computeResources"] = state ? state.computeResources : undefined;
            resourceInputs["ecsClusterArn"] = state ? state.ecsClusterArn : undefined;
            resourceInputs["fullname"] = state ? state.fullname : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serviceRole"] = state ? state.serviceRole : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusReason"] = state ? state.statusReason : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["waitForDeployment"] = state ? state.waitForDeployment : undefined;
        } else {
            const args = argsOrState as AwsBatchComputeEnvironmentArgs | undefined;
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["computeResources"] = args ? args.computeResources : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serviceRole"] = args ? args.serviceRole : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["waitForDeployment"] = args ? args.waitForDeployment : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["ecsClusterArn"] = undefined /*out*/;
            resourceInputs["fullname"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusReason"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsBatchComputeEnvironment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsBatchComputeEnvironment resources.
 */
export interface AwsBatchComputeEnvironmentState {
    /**
     * The Amazon Resource Name of the compute environment.
     */
    arn?: pulumi.Input<string>;
    /**
     * Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments.
     */
    computeResources?: pulumi.Input<inputs.AwsBatchComputeEnvironmentComputeResources>;
    /**
     * The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.
     */
    ecsClusterArn?: pulumi.Input<string>;
    /**
     * The full name of the compute environment.
     */
    fullname?: pulumi.Input<string>;
    /**
     * Specifies the name of the compute environment.
     */
    name?: pulumi.Input<string>;
    /**
     * The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
     */
    serviceRole?: pulumi.Input<string>;
    /**
     * The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Compute environment must be created in `ENABLED` state. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
     */
    state?: pulumi.Input<string>;
    /**
     * The current status of the compute environment (for example, CREATING or VALID).
     */
    status?: pulumi.Input<string>;
    /**
     * A short, human-readable string to provide additional details about the current status of the compute environment.
     */
    statusReason?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The GUID of the tenant that the aws batch compute environment will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The type of the compute environment. Valid items are `MANAGED` or `UNMANAGED`.
     */
    type?: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    waitForDeployment?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AwsBatchComputeEnvironment resource.
 */
export interface AwsBatchComputeEnvironmentArgs {
    /**
     * Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments.
     */
    computeResources?: pulumi.Input<inputs.AwsBatchComputeEnvironmentComputeResources>;
    /**
     * Specifies the name of the compute environment.
     */
    name?: pulumi.Input<string>;
    /**
     * The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
     */
    serviceRole?: pulumi.Input<string>;
    /**
     * The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Compute environment must be created in `ENABLED` state. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
     */
    state?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The GUID of the tenant that the aws batch compute environment will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * The type of the compute environment. Valid items are `MANAGED` or `UNMANAGED`.
     */
    type: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    waitForDeployment?: pulumi.Input<boolean>;
}
