// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.EmrCluster` manages an AWS emrCluster in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * // Example 1:  EMR cluster with auto-scaling.
 * const test = new duplocloud.EmrCluster("test", {
 *     tenantId: myapp.tenantId,
 *     name: "emrp1",
 *     releaseLabel: "emr-6.2.0",
 *     logUri: "s3://name-of-my-bucket",
 *     visibleToAllUsers: true,
 *     masterInstanceType: "m4.large",
 *     slaveInstanceType: "m4.large",
 *     instanceCount: 3,
 *     keepJobFlowAliveWhenNoSteps: true,
 *     applications: JSON.stringify([
 *         {
 *             Name: "Hadoop",
 *         },
 *         {
 *             Name: "JupyterHub",
 *         },
 *         {
 *             Name: "Spark",
 *         },
 *         {
 *             Name: "Hive",
 *         },
 *     ]),
 *     managedScalingPolicy: JSON.stringify({
 *         ComputeLimits: {
 *             UnitType: "Instances",
 *             MinimumCapacityUnits: 2,
 *             MaximumCapacityUnits: 5,
 *             MaximumOnDemandCapacityUnits: 5,
 *             MaximumCoreCapacityUnits: 3,
 *         },
 *     }),
 *     configurations: JSON.stringify([{
 *         Classification: "hive-site",
 *         Properties: {
 *             "hive.metastore.client.factory.class": "com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory",
 *             "spark.sql.catalog.my_catalog": "org.apache.iceberg.spark.SparkCatalog",
 *             "spark.sql.catalog.my_catalog.catalog-impl": "org.apache.iceberg.aws.glue.GlueCatalog",
 *             "spark.sql.catalog.my_catalog.io-impl": "org.apache.iceberg.aws.s3.S3FileIO",
 *             "spark.sql.catalog.my_catalog.lock-impl": "org.apache.iceberg.aws.glue.DynamoLockManager",
 *             "spark.sql.catalog.my_catalog.lock.table": "myGlueLockTable",
 *             "spark.sql.catalog.sampledb.warehouse": "s3://name-of-my-bucket/parquet5",
 *         },
 *     }]),
 *     bootstrapActions: JSON.stringify([{
 *         Name: "InstallApacheIceberg",
 *         ScriptBootstrapAction: {
 *             Args: [
 *                 "name",
 *                 "value",
 *             ],
 *             Path: "s3://name-of-my-bucket/bootstrap-iceberg.sh",
 *         },
 *     }]),
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing EMR cluster
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *JOB_FLOW_ID* is the EMR cluster job flow ID
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/emrCluster:EmrCluster mycluster *TENANT_ID*&#47;*JOB_FLOW_ID*
 * ```
 */
export class EmrCluster extends pulumi.CustomResource {
    /**
     * Get an existing EmrCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EmrClusterState, opts?: pulumi.CustomResourceOptions): EmrCluster {
        return new EmrCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/emrCluster:EmrCluster';

    /**
     * Returns true if the given object is an instance of EmrCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EmrCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EmrCluster.__pulumiType;
    }

    /**
     * Emr - additional_info.
     */
    public readonly additionalInfo!: pulumi.Output<string | undefined>;
    public /*out*/ readonly additionalInfoHash!: pulumi.Output<string>;
    /**
     * Emr - list of applications to be installed.
     */
    public readonly applications!: pulumi.Output<string | undefined>;
    public /*out*/ readonly applicationsHash!: pulumi.Output<string>;
    /**
     * The ARN of the emrCluster.
     */
    public readonly arn!: pulumi.Output<string>;
    /**
     * Emr - list of bootstrapActions to be installed.
     */
    public readonly bootstrapActions!: pulumi.Output<string | undefined>;
    public /*out*/ readonly bootstrapActionsHash!: pulumi.Output<string>;
    /**
     * Emr - list of application configurations to be updated.
     */
    public readonly configurations!: pulumi.Output<string | undefined>;
    public /*out*/ readonly configurationsHash!: pulumi.Output<string>;
    /**
     * EMR CustomAmiId.
     */
    public readonly customAmiId!: pulumi.Output<string | undefined>;
    /**
     * Emr Cluster Ec2 ebs*root*volume_size settings.
     */
    public readonly ebsRootVolumeSize!: pulumi.Output<number | undefined>;
    /**
     * full_name - Duplo will add a prefix to the name.
     */
    public readonly fullName!: pulumi.Output<string>;
    /**
     * Emr Instance Count.
     */
    public readonly instanceCount!: pulumi.Output<number | undefined>;
    /**
     * Emr - instance_fleets.
     */
    public readonly instanceFleets!: pulumi.Output<string | undefined>;
    public /*out*/ readonly instanceFleetsHash!: pulumi.Output<string>;
    /**
     * Emr - instance_groups.
     */
    public readonly instanceGroups!: pulumi.Output<string | undefined>;
    public /*out*/ readonly instanceGroupsHash!: pulumi.Output<string>;
    /**
     * job flow id.
     */
    public readonly jobFlowId!: pulumi.Output<string>;
    /**
     * Keep Job Flow Alive When No Steps. Emr Cluster will be terminated if true. Defaults to `true`.
     */
    public readonly keepJobFlowAliveWhenNoSteps!: pulumi.Output<boolean | undefined>;
    /**
     * S3 bucket path for logs.
     */
    public readonly logUri!: pulumi.Output<string | undefined>;
    /**
     * Emr - managed*scaling*policy.
     */
    public readonly managedScalingPolicy!: pulumi.Output<string | undefined>;
    public /*out*/ readonly managedScalingPolicyHash!: pulumi.Output<string>;
    /**
     * Emr MasterInstanceType. Supported InstanceTypes e.g. m4.large
     */
    public readonly masterInstanceType!: pulumi.Output<string | undefined>;
    /**
     * The short name of the emrCluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * EMR ReleaseLabel.
     */
    public readonly releaseLabel!: pulumi.Output<string>;
    /**
     * Emr scale*down*behavior. Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.
     */
    public readonly scaleDownBehavior!: pulumi.Output<string | undefined>;
    /**
     * Emr SlaveInstanceType. Supported InstanceTypes e.g. m4.large
     */
    public readonly slaveInstanceType!: pulumi.Output<string | undefined>;
    /**
     * The status of the emrCluster.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Emr Cluster step*concurrency*level settings. Defaults to `1`.
     */
    public readonly stepConcurrencyLevel!: pulumi.Output<number | undefined>;
    /**
     * Emr - list of steps to be run after cluster is ready.
     */
    public readonly steps!: pulumi.Output<string | undefined>;
    public /*out*/ readonly stepsHash!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the emrCluster will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Emr termination protection setting.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;
    /**
     * Emr Cluster visible to all users settings.
     */
    public readonly visibleToAllUsers!: pulumi.Output<boolean | undefined>;

    /**
     * Create a EmrCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EmrClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EmrClusterArgs | EmrClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EmrClusterState | undefined;
            resourceInputs["additionalInfo"] = state ? state.additionalInfo : undefined;
            resourceInputs["additionalInfoHash"] = state ? state.additionalInfoHash : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["applicationsHash"] = state ? state.applicationsHash : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["bootstrapActions"] = state ? state.bootstrapActions : undefined;
            resourceInputs["bootstrapActionsHash"] = state ? state.bootstrapActionsHash : undefined;
            resourceInputs["configurations"] = state ? state.configurations : undefined;
            resourceInputs["configurationsHash"] = state ? state.configurationsHash : undefined;
            resourceInputs["customAmiId"] = state ? state.customAmiId : undefined;
            resourceInputs["ebsRootVolumeSize"] = state ? state.ebsRootVolumeSize : undefined;
            resourceInputs["fullName"] = state ? state.fullName : undefined;
            resourceInputs["instanceCount"] = state ? state.instanceCount : undefined;
            resourceInputs["instanceFleets"] = state ? state.instanceFleets : undefined;
            resourceInputs["instanceFleetsHash"] = state ? state.instanceFleetsHash : undefined;
            resourceInputs["instanceGroups"] = state ? state.instanceGroups : undefined;
            resourceInputs["instanceGroupsHash"] = state ? state.instanceGroupsHash : undefined;
            resourceInputs["jobFlowId"] = state ? state.jobFlowId : undefined;
            resourceInputs["keepJobFlowAliveWhenNoSteps"] = state ? state.keepJobFlowAliveWhenNoSteps : undefined;
            resourceInputs["logUri"] = state ? state.logUri : undefined;
            resourceInputs["managedScalingPolicy"] = state ? state.managedScalingPolicy : undefined;
            resourceInputs["managedScalingPolicyHash"] = state ? state.managedScalingPolicyHash : undefined;
            resourceInputs["masterInstanceType"] = state ? state.masterInstanceType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["releaseLabel"] = state ? state.releaseLabel : undefined;
            resourceInputs["scaleDownBehavior"] = state ? state.scaleDownBehavior : undefined;
            resourceInputs["slaveInstanceType"] = state ? state.slaveInstanceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stepConcurrencyLevel"] = state ? state.stepConcurrencyLevel : undefined;
            resourceInputs["steps"] = state ? state.steps : undefined;
            resourceInputs["stepsHash"] = state ? state.stepsHash : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
            resourceInputs["visibleToAllUsers"] = state ? state.visibleToAllUsers : undefined;
        } else {
            const args = argsOrState as EmrClusterArgs | undefined;
            if ((!args || args.releaseLabel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'releaseLabel'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["additionalInfo"] = args ? args.additionalInfo : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["arn"] = args ? args.arn : undefined;
            resourceInputs["bootstrapActions"] = args ? args.bootstrapActions : undefined;
            resourceInputs["configurations"] = args ? args.configurations : undefined;
            resourceInputs["customAmiId"] = args ? args.customAmiId : undefined;
            resourceInputs["ebsRootVolumeSize"] = args ? args.ebsRootVolumeSize : undefined;
            resourceInputs["fullName"] = args ? args.fullName : undefined;
            resourceInputs["instanceCount"] = args ? args.instanceCount : undefined;
            resourceInputs["instanceFleets"] = args ? args.instanceFleets : undefined;
            resourceInputs["instanceGroups"] = args ? args.instanceGroups : undefined;
            resourceInputs["jobFlowId"] = args ? args.jobFlowId : undefined;
            resourceInputs["keepJobFlowAliveWhenNoSteps"] = args ? args.keepJobFlowAliveWhenNoSteps : undefined;
            resourceInputs["logUri"] = args ? args.logUri : undefined;
            resourceInputs["managedScalingPolicy"] = args ? args.managedScalingPolicy : undefined;
            resourceInputs["masterInstanceType"] = args ? args.masterInstanceType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["releaseLabel"] = args ? args.releaseLabel : undefined;
            resourceInputs["scaleDownBehavior"] = args ? args.scaleDownBehavior : undefined;
            resourceInputs["slaveInstanceType"] = args ? args.slaveInstanceType : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["stepConcurrencyLevel"] = args ? args.stepConcurrencyLevel : undefined;
            resourceInputs["steps"] = args ? args.steps : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["visibleToAllUsers"] = args ? args.visibleToAllUsers : undefined;
            resourceInputs["additionalInfoHash"] = undefined /*out*/;
            resourceInputs["applicationsHash"] = undefined /*out*/;
            resourceInputs["bootstrapActionsHash"] = undefined /*out*/;
            resourceInputs["configurationsHash"] = undefined /*out*/;
            resourceInputs["instanceFleetsHash"] = undefined /*out*/;
            resourceInputs["instanceGroupsHash"] = undefined /*out*/;
            resourceInputs["managedScalingPolicyHash"] = undefined /*out*/;
            resourceInputs["stepsHash"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EmrCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EmrCluster resources.
 */
export interface EmrClusterState {
    /**
     * Emr - additional_info.
     */
    additionalInfo?: pulumi.Input<string>;
    additionalInfoHash?: pulumi.Input<string>;
    /**
     * Emr - list of applications to be installed.
     */
    applications?: pulumi.Input<string>;
    applicationsHash?: pulumi.Input<string>;
    /**
     * The ARN of the emrCluster.
     */
    arn?: pulumi.Input<string>;
    /**
     * Emr - list of bootstrapActions to be installed.
     */
    bootstrapActions?: pulumi.Input<string>;
    bootstrapActionsHash?: pulumi.Input<string>;
    /**
     * Emr - list of application configurations to be updated.
     */
    configurations?: pulumi.Input<string>;
    configurationsHash?: pulumi.Input<string>;
    /**
     * EMR CustomAmiId.
     */
    customAmiId?: pulumi.Input<string>;
    /**
     * Emr Cluster Ec2 ebs*root*volume_size settings.
     */
    ebsRootVolumeSize?: pulumi.Input<number>;
    /**
     * full_name - Duplo will add a prefix to the name.
     */
    fullName?: pulumi.Input<string>;
    /**
     * Emr Instance Count.
     */
    instanceCount?: pulumi.Input<number>;
    /**
     * Emr - instance_fleets.
     */
    instanceFleets?: pulumi.Input<string>;
    instanceFleetsHash?: pulumi.Input<string>;
    /**
     * Emr - instance_groups.
     */
    instanceGroups?: pulumi.Input<string>;
    instanceGroupsHash?: pulumi.Input<string>;
    /**
     * job flow id.
     */
    jobFlowId?: pulumi.Input<string>;
    /**
     * Keep Job Flow Alive When No Steps. Emr Cluster will be terminated if true. Defaults to `true`.
     */
    keepJobFlowAliveWhenNoSteps?: pulumi.Input<boolean>;
    /**
     * S3 bucket path for logs.
     */
    logUri?: pulumi.Input<string>;
    /**
     * Emr - managed*scaling*policy.
     */
    managedScalingPolicy?: pulumi.Input<string>;
    managedScalingPolicyHash?: pulumi.Input<string>;
    /**
     * Emr MasterInstanceType. Supported InstanceTypes e.g. m4.large
     */
    masterInstanceType?: pulumi.Input<string>;
    /**
     * The short name of the emrCluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * EMR ReleaseLabel.
     */
    releaseLabel?: pulumi.Input<string>;
    /**
     * Emr scale*down*behavior. Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.
     */
    scaleDownBehavior?: pulumi.Input<string>;
    /**
     * Emr SlaveInstanceType. Supported InstanceTypes e.g. m4.large
     */
    slaveInstanceType?: pulumi.Input<string>;
    /**
     * The status of the emrCluster.
     */
    status?: pulumi.Input<string>;
    /**
     * Emr Cluster step*concurrency*level settings. Defaults to `1`.
     */
    stepConcurrencyLevel?: pulumi.Input<number>;
    /**
     * Emr - list of steps to be run after cluster is ready.
     */
    steps?: pulumi.Input<string>;
    stepsHash?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the emrCluster will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Emr termination protection setting.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * Emr Cluster visible to all users settings.
     */
    visibleToAllUsers?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a EmrCluster resource.
 */
export interface EmrClusterArgs {
    /**
     * Emr - additional_info.
     */
    additionalInfo?: pulumi.Input<string>;
    /**
     * Emr - list of applications to be installed.
     */
    applications?: pulumi.Input<string>;
    /**
     * The ARN of the emrCluster.
     */
    arn?: pulumi.Input<string>;
    /**
     * Emr - list of bootstrapActions to be installed.
     */
    bootstrapActions?: pulumi.Input<string>;
    /**
     * Emr - list of application configurations to be updated.
     */
    configurations?: pulumi.Input<string>;
    /**
     * EMR CustomAmiId.
     */
    customAmiId?: pulumi.Input<string>;
    /**
     * Emr Cluster Ec2 ebs*root*volume_size settings.
     */
    ebsRootVolumeSize?: pulumi.Input<number>;
    /**
     * full_name - Duplo will add a prefix to the name.
     */
    fullName?: pulumi.Input<string>;
    /**
     * Emr Instance Count.
     */
    instanceCount?: pulumi.Input<number>;
    /**
     * Emr - instance_fleets.
     */
    instanceFleets?: pulumi.Input<string>;
    /**
     * Emr - instance_groups.
     */
    instanceGroups?: pulumi.Input<string>;
    /**
     * job flow id.
     */
    jobFlowId?: pulumi.Input<string>;
    /**
     * Keep Job Flow Alive When No Steps. Emr Cluster will be terminated if true. Defaults to `true`.
     */
    keepJobFlowAliveWhenNoSteps?: pulumi.Input<boolean>;
    /**
     * S3 bucket path for logs.
     */
    logUri?: pulumi.Input<string>;
    /**
     * Emr - managed*scaling*policy.
     */
    managedScalingPolicy?: pulumi.Input<string>;
    /**
     * Emr MasterInstanceType. Supported InstanceTypes e.g. m4.large
     */
    masterInstanceType?: pulumi.Input<string>;
    /**
     * The short name of the emrCluster.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * EMR ReleaseLabel.
     */
    releaseLabel: pulumi.Input<string>;
    /**
     * Emr scale*down*behavior. Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.
     */
    scaleDownBehavior?: pulumi.Input<string>;
    /**
     * Emr SlaveInstanceType. Supported InstanceTypes e.g. m4.large
     */
    slaveInstanceType?: pulumi.Input<string>;
    /**
     * The status of the emrCluster.
     */
    status?: pulumi.Input<string>;
    /**
     * Emr Cluster step*concurrency*level settings. Defaults to `1`.
     */
    stepConcurrencyLevel?: pulumi.Input<number>;
    /**
     * Emr - list of steps to be run after cluster is ready.
     */
    steps?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the emrCluster will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Emr termination protection setting.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * Emr Cluster visible to all users settings.
     */
    visibleToAllUsers?: pulumi.Input<boolean>;
}
