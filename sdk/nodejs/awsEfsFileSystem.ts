// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.AwsEfsFileSystem` Provides an Elastic File System (EFS) File System resource in DuploCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const efs = new duplocloud.AwsEfsFileSystem("efs", {
 *     tenantId: myapp.tenantId,
 *     name: "efs-test",
 *     performanceMode: "generalPurpose",
 *     throughputMode: "bursting",
 *     backup: false,
 *     encrypted: false,
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing AWS EFS
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *EFS_ID* is the AWS EFS ID
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/awsEfsFileSystem:AwsEfsFileSystem efs *TENANT_ID*&#47;*EFS_ID*
 * ```
 */
export class AwsEfsFileSystem extends pulumi.CustomResource {
    /**
     * Get an existing AwsEfsFileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsEfsFileSystemState, opts?: pulumi.CustomResourceOptions): AwsEfsFileSystem {
        return new AwsEfsFileSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/awsEfsFileSystem:AwsEfsFileSystem';

    /**
     * Returns true if the given object is an instance of AwsEfsFileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsEfsFileSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsEfsFileSystem.__pulumiType;
    }

    /**
     * Specifies whether automatic backups are enabled on the file system that you are creating.
     */
    public readonly backup!: pulumi.Output<boolean>;
    /**
     * A unique name (a maximum of 64 characters are allowed) used as reference when creating the Elastic File System to ensure idempotent file system creation.
     */
    public readonly creationToken!: pulumi.Output<string>;
    /**
     * If true, the disk will be encrypted.
     */
    public readonly encrypted!: pulumi.Output<boolean>;
    /**
     * Amazon Resource Name of the file system.
     */
    public /*out*/ readonly fileSystemArn!: pulumi.Output<string>;
    /**
     * The ID that identifies the file system.
     */
    public /*out*/ readonly fileSystemId!: pulumi.Output<string>;
    /**
     * Duplo generated name of the EFS.
     */
    public /*out*/ readonly fullname!: pulumi.Output<string>;
    public readonly lifecyclePolicies!: pulumi.Output<outputs.AwsEfsFileSystemLifecyclePolicy[] | undefined>;
    public /*out*/ readonly mountTargets!: pulumi.Output<outputs.AwsEfsFileSystemMountTarget[]>;
    /**
     * The name of the EFS, this needs to be unique within a region.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The current number of mount targets that the file system has.
     */
    public /*out*/ readonly numberOfMountTargets!: pulumi.Output<number>;
    /**
     * The AWS account that created the file system.
     */
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    /**
     * The file system performance mode. Can be either `generalPurpose` or `maxIO`. Defaults to `generalPurpose`.
     */
    public readonly performanceMode!: pulumi.Output<string | undefined>;
    /**
     * The throughput, measured in MiB/s, that you want to provision for the file system. Only applicable with `throughputMode` set to `provisioned`.
     */
    public readonly provisionedThroughputInMibps!: pulumi.Output<number>;
    /**
     * The latest known metered size (in bytes) of data stored in the file system.
     */
    public /*out*/ readonly sizeInBytes!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<outputs.AwsEfsFileSystemTag[]>;
    /**
     * The GUID of the tenant that the efs file system will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Throughput mode for the file system. When using `provisioned`, also set `provisionedThroughputInMibps`. Defaults to `bursting`.
     */
    public readonly throughputMode!: pulumi.Output<string | undefined>;
    /**
     * Whether or not to wait until EFS to be available, after creation. Defaults to `true`.
     */
    public readonly waitUntilReady!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AwsEfsFileSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsEfsFileSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsEfsFileSystemArgs | AwsEfsFileSystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsEfsFileSystemState | undefined;
            resourceInputs["backup"] = state ? state.backup : undefined;
            resourceInputs["creationToken"] = state ? state.creationToken : undefined;
            resourceInputs["encrypted"] = state ? state.encrypted : undefined;
            resourceInputs["fileSystemArn"] = state ? state.fileSystemArn : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["fullname"] = state ? state.fullname : undefined;
            resourceInputs["lifecyclePolicies"] = state ? state.lifecyclePolicies : undefined;
            resourceInputs["mountTargets"] = state ? state.mountTargets : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfMountTargets"] = state ? state.numberOfMountTargets : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["performanceMode"] = state ? state.performanceMode : undefined;
            resourceInputs["provisionedThroughputInMibps"] = state ? state.provisionedThroughputInMibps : undefined;
            resourceInputs["sizeInBytes"] = state ? state.sizeInBytes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["throughputMode"] = state ? state.throughputMode : undefined;
            resourceInputs["waitUntilReady"] = state ? state.waitUntilReady : undefined;
        } else {
            const args = argsOrState as AwsEfsFileSystemArgs | undefined;
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["backup"] = args ? args.backup : undefined;
            resourceInputs["creationToken"] = args ? args.creationToken : undefined;
            resourceInputs["encrypted"] = args ? args.encrypted : undefined;
            resourceInputs["lifecyclePolicies"] = args ? args.lifecyclePolicies : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["performanceMode"] = args ? args.performanceMode : undefined;
            resourceInputs["provisionedThroughputInMibps"] = args ? args.provisionedThroughputInMibps : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["throughputMode"] = args ? args.throughputMode : undefined;
            resourceInputs["waitUntilReady"] = args ? args.waitUntilReady : undefined;
            resourceInputs["fileSystemArn"] = undefined /*out*/;
            resourceInputs["fileSystemId"] = undefined /*out*/;
            resourceInputs["fullname"] = undefined /*out*/;
            resourceInputs["mountTargets"] = undefined /*out*/;
            resourceInputs["numberOfMountTargets"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["sizeInBytes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsEfsFileSystem.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsEfsFileSystem resources.
 */
export interface AwsEfsFileSystemState {
    /**
     * Specifies whether automatic backups are enabled on the file system that you are creating.
     */
    backup?: pulumi.Input<boolean>;
    /**
     * A unique name (a maximum of 64 characters are allowed) used as reference when creating the Elastic File System to ensure idempotent file system creation.
     */
    creationToken?: pulumi.Input<string>;
    /**
     * If true, the disk will be encrypted.
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * Amazon Resource Name of the file system.
     */
    fileSystemArn?: pulumi.Input<string>;
    /**
     * The ID that identifies the file system.
     */
    fileSystemId?: pulumi.Input<string>;
    /**
     * Duplo generated name of the EFS.
     */
    fullname?: pulumi.Input<string>;
    lifecyclePolicies?: pulumi.Input<pulumi.Input<inputs.AwsEfsFileSystemLifecyclePolicy>[]>;
    mountTargets?: pulumi.Input<pulumi.Input<inputs.AwsEfsFileSystemMountTarget>[]>;
    /**
     * The name of the EFS, this needs to be unique within a region.
     */
    name?: pulumi.Input<string>;
    /**
     * The current number of mount targets that the file system has.
     */
    numberOfMountTargets?: pulumi.Input<number>;
    /**
     * The AWS account that created the file system.
     */
    ownerId?: pulumi.Input<string>;
    /**
     * The file system performance mode. Can be either `generalPurpose` or `maxIO`. Defaults to `generalPurpose`.
     */
    performanceMode?: pulumi.Input<string>;
    /**
     * The throughput, measured in MiB/s, that you want to provision for the file system. Only applicable with `throughputMode` set to `provisioned`.
     */
    provisionedThroughputInMibps?: pulumi.Input<number>;
    /**
     * The latest known metered size (in bytes) of data stored in the file system.
     */
    sizeInBytes?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.AwsEfsFileSystemTag>[]>;
    /**
     * The GUID of the tenant that the efs file system will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Throughput mode for the file system. When using `provisioned`, also set `provisionedThroughputInMibps`. Defaults to `bursting`.
     */
    throughputMode?: pulumi.Input<string>;
    /**
     * Whether or not to wait until EFS to be available, after creation. Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AwsEfsFileSystem resource.
 */
export interface AwsEfsFileSystemArgs {
    /**
     * Specifies whether automatic backups are enabled on the file system that you are creating.
     */
    backup?: pulumi.Input<boolean>;
    /**
     * A unique name (a maximum of 64 characters are allowed) used as reference when creating the Elastic File System to ensure idempotent file system creation.
     */
    creationToken?: pulumi.Input<string>;
    /**
     * If true, the disk will be encrypted.
     */
    encrypted?: pulumi.Input<boolean>;
    lifecyclePolicies?: pulumi.Input<pulumi.Input<inputs.AwsEfsFileSystemLifecyclePolicy>[]>;
    /**
     * The name of the EFS, this needs to be unique within a region.
     */
    name?: pulumi.Input<string>;
    /**
     * The file system performance mode. Can be either `generalPurpose` or `maxIO`. Defaults to `generalPurpose`.
     */
    performanceMode?: pulumi.Input<string>;
    /**
     * The throughput, measured in MiB/s, that you want to provision for the file system. Only applicable with `throughputMode` set to `provisioned`.
     */
    provisionedThroughputInMibps?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.AwsEfsFileSystemTag>[]>;
    /**
     * The GUID of the tenant that the efs file system will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Throughput mode for the file system. When using `provisioned`, also set `provisionedThroughputInMibps`. Defaults to `bursting`.
     */
    throughputMode?: pulumi.Input<string>;
    /**
     * Whether or not to wait until EFS to be available, after creation. Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
}
