// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.GcpSchedulerJob` manages a GCP scheduler job in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * // A simple scheduler job with an HTTPS target, running at 9 am daily.
 * const myjob = new duplocloud.GcpSchedulerJob("myjob", {
 *     tenantId: myapp.tenantId,
 *     name: "myjob",
 *     schedule: "* 9 * * *",
 *     timezone: "America/New_York",
 *     httpTarget: {
 *         method: "GET",
 *         uri: "https://www.google.com",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing GCP scheduler job
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *SHORT_NAME* is the short name of the GCP scheduler job
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/gcpSchedulerJob:GcpSchedulerJob myjob *TENANT_ID*&#47;*SHORT_NAME*
 * ```
 */
export class GcpSchedulerJob extends pulumi.CustomResource {
    /**
     * Get an existing GcpSchedulerJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GcpSchedulerJobState, opts?: pulumi.CustomResourceOptions): GcpSchedulerJob {
        return new GcpSchedulerJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/gcpSchedulerJob:GcpSchedulerJob';

    /**
     * Returns true if the given object is an instance of GcpSchedulerJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GcpSchedulerJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GcpSchedulerJob.__pulumiType;
    }

    /**
     * Specifies an App Engine target for the scheduler job.
     */
    public readonly appEngineTarget!: pulumi.Output<outputs.GcpSchedulerJobAppEngineTarget | undefined>;
    /**
     * The attempt deadline for the scheduler job.
     */
    public readonly attemptDeadline!: pulumi.Output<string>;
    /**
     * The description of the scheduler job.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The full name of the scheduler job.
     */
    public /*out*/ readonly fullname!: pulumi.Output<string>;
    /**
     * Specifies an HTTP target for the scheduler job.
     */
    public readonly httpTarget!: pulumi.Output<outputs.GcpSchedulerJobHttpTarget | undefined>;
    /**
     * The short name of the scheduler job.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies a pubsub target for the scheduler job.
     */
    public readonly pubsubTarget!: pulumi.Output<outputs.GcpSchedulerJobPubsubTarget | undefined>;
    /**
     * The desired schedule, in cron format.
     */
    public readonly schedule!: pulumi.Output<string>;
    /**
     * The SelfLink of the scheduler job.
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the scheduler job will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * The timezone used to determine the schedule, in UNIX format
     */
    public readonly timezone!: pulumi.Output<string>;

    /**
     * Create a GcpSchedulerJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GcpSchedulerJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GcpSchedulerJobArgs | GcpSchedulerJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GcpSchedulerJobState | undefined;
            resourceInputs["appEngineTarget"] = state ? state.appEngineTarget : undefined;
            resourceInputs["attemptDeadline"] = state ? state.attemptDeadline : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fullname"] = state ? state.fullname : undefined;
            resourceInputs["httpTarget"] = state ? state.httpTarget : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pubsubTarget"] = state ? state.pubsubTarget : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
        } else {
            const args = argsOrState as GcpSchedulerJobArgs | undefined;
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.timezone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timezone'");
            }
            resourceInputs["appEngineTarget"] = args ? args.appEngineTarget : undefined;
            resourceInputs["attemptDeadline"] = args ? args.attemptDeadline : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["httpTarget"] = args ? args.httpTarget : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pubsubTarget"] = args ? args.pubsubTarget : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["fullname"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GcpSchedulerJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GcpSchedulerJob resources.
 */
export interface GcpSchedulerJobState {
    /**
     * Specifies an App Engine target for the scheduler job.
     */
    appEngineTarget?: pulumi.Input<inputs.GcpSchedulerJobAppEngineTarget>;
    /**
     * The attempt deadline for the scheduler job.
     */
    attemptDeadline?: pulumi.Input<string>;
    /**
     * The description of the scheduler job.
     */
    description?: pulumi.Input<string>;
    /**
     * The full name of the scheduler job.
     */
    fullname?: pulumi.Input<string>;
    /**
     * Specifies an HTTP target for the scheduler job.
     */
    httpTarget?: pulumi.Input<inputs.GcpSchedulerJobHttpTarget>;
    /**
     * The short name of the scheduler job.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies a pubsub target for the scheduler job.
     */
    pubsubTarget?: pulumi.Input<inputs.GcpSchedulerJobPubsubTarget>;
    /**
     * The desired schedule, in cron format.
     */
    schedule?: pulumi.Input<string>;
    /**
     * The SelfLink of the scheduler job.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the scheduler job will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The timezone used to determine the schedule, in UNIX format
     */
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GcpSchedulerJob resource.
 */
export interface GcpSchedulerJobArgs {
    /**
     * Specifies an App Engine target for the scheduler job.
     */
    appEngineTarget?: pulumi.Input<inputs.GcpSchedulerJobAppEngineTarget>;
    /**
     * The attempt deadline for the scheduler job.
     */
    attemptDeadline?: pulumi.Input<string>;
    /**
     * The description of the scheduler job.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies an HTTP target for the scheduler job.
     */
    httpTarget?: pulumi.Input<inputs.GcpSchedulerJobHttpTarget>;
    /**
     * The short name of the scheduler job.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies a pubsub target for the scheduler job.
     */
    pubsubTarget?: pulumi.Input<inputs.GcpSchedulerJobPubsubTarget>;
    /**
     * The desired schedule, in cron format.
     */
    schedule: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the scheduler job will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * The timezone used to determine the schedule, in UNIX format
     */
    timezone: pulumi.Input<string>;
}
