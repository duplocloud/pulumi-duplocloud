// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The duplocloud.GcpHost used to manage or configure virtual machine at gcp
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const host = new duplocloud.GcpHost("host", {
 *     tenantId: myapp.tenantId,
 *     friendlyName: "tfnewhost",
 *     capacity: "e2-medium",
 *     zone: "us-west2-a",
 *     agentPlatform: 0,
 *     metadata: {
 *         OsDiskSize: "10",
 *         startup_script: "echo \"Hello from test startup script!\" > /test.txt\n",
 *     },
 *     tags: ["networktag"],
 *     imageId: "projects/{project}/global/images/{image}",
 *     labels: {
 *         resource: "label",
 *     },
 *     userAccount: "abc@xyz.com",
 *     allocatedPublicIp: true,
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing AWS host
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *INSTANCE_ID* is the GCP VM instance ID
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/gcpHost:GcpHost myhost v2/subscriptions/*TENANT_ID*&#47;gcpHost/*INSTANCE_ID*
 * ```
 */
export class GcpHost extends pulumi.CustomResource {
    /**
     * Get an existing GcpHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GcpHostState, opts?: pulumi.CustomResourceOptions): GcpHost {
        return new GcpHost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/gcpHost:GcpHost';

    /**
     * Returns true if the given object is an instance of GcpHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GcpHost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GcpHost.__pulumiType;
    }

    /**
     * The number of the guest accelerator cards exposed to this instance. Defaults to `0`.
     */
    public readonly acceleratorCount!: pulumi.Output<number | undefined>;
    /**
     * The accelerator type resource to expose to this instance
     */
    public readonly acceleratorType!: pulumi.Output<string>;
    /**
     * The numeric ID of the container agent pool that this host is added to. Defaults to `0`.
     */
    public readonly agentPlatform!: pulumi.Output<number | undefined>;
    /**
     * Whether or not to allocate a public IP. Defaults to `false`.
     */
    public readonly allocatedPublicIp!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly architecture!: pulumi.Output<string>;
    /**
     * The machine type to create
     */
    public readonly capacity!: pulumi.Output<string>;
    /**
     * The name of the vm.
     */
    public readonly friendlyName!: pulumi.Output<string>;
    /**
     * The full name of the vm.
     */
    public /*out*/ readonly fullname!: pulumi.Output<string>;
    public /*out*/ readonly identityRole!: pulumi.Output<string>;
    /**
     * The image from which to initialize this vm
     */
    public readonly imageId!: pulumi.Output<string>;
    public /*out*/ readonly instanceId!: pulumi.Output<string>;
    /**
     * A set of key/value label pairs assigned to the vm
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Configuration, metadata used when creating the host.\n\n*Note: To configure OS disk size OsDiskSize can be specified as Key and its size as value, size value should be atleast 10, Similarly to added start up script one can pass the key as startupScript and startup command as its value*
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly privateIpAddress!: pulumi.Output<string>;
    public /*out*/ readonly publicIpAddress!: pulumi.Output<string>;
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * List of network tags that can be added to the vm
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * The GUID of the tenant that the host will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * The email id of the user.
     */
    public readonly userAccount!: pulumi.Output<string>;
    /**
     * Defaults to `true`.
     */
    public readonly waitUntilReady!: pulumi.Output<boolean | undefined>;
    /**
     * The zone that the machine should be created in
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a GcpHost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GcpHostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GcpHostArgs | GcpHostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GcpHostState | undefined;
            resourceInputs["acceleratorCount"] = state ? state.acceleratorCount : undefined;
            resourceInputs["acceleratorType"] = state ? state.acceleratorType : undefined;
            resourceInputs["agentPlatform"] = state ? state.agentPlatform : undefined;
            resourceInputs["allocatedPublicIp"] = state ? state.allocatedPublicIp : undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["friendlyName"] = state ? state.friendlyName : undefined;
            resourceInputs["fullname"] = state ? state.fullname : undefined;
            resourceInputs["identityRole"] = state ? state.identityRole : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            resourceInputs["publicIpAddress"] = state ? state.publicIpAddress : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["userAccount"] = state ? state.userAccount : undefined;
            resourceInputs["waitUntilReady"] = state ? state.waitUntilReady : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as GcpHostArgs | undefined;
            if ((!args || args.capacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacity'");
            }
            if ((!args || args.friendlyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'friendlyName'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.userAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userAccount'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["acceleratorCount"] = args ? args.acceleratorCount : undefined;
            resourceInputs["acceleratorType"] = args ? args.acceleratorType : undefined;
            resourceInputs["agentPlatform"] = args ? args.agentPlatform : undefined;
            resourceInputs["allocatedPublicIp"] = args ? args.allocatedPublicIp : undefined;
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["userAccount"] = args ? args.userAccount : undefined;
            resourceInputs["waitUntilReady"] = args ? args.waitUntilReady : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["architecture"] = undefined /*out*/;
            resourceInputs["fullname"] = undefined /*out*/;
            resourceInputs["identityRole"] = undefined /*out*/;
            resourceInputs["instanceId"] = undefined /*out*/;
            resourceInputs["privateIpAddress"] = undefined /*out*/;
            resourceInputs["publicIpAddress"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GcpHost.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GcpHost resources.
 */
export interface GcpHostState {
    /**
     * The number of the guest accelerator cards exposed to this instance. Defaults to `0`.
     */
    acceleratorCount?: pulumi.Input<number>;
    /**
     * The accelerator type resource to expose to this instance
     */
    acceleratorType?: pulumi.Input<string>;
    /**
     * The numeric ID of the container agent pool that this host is added to. Defaults to `0`.
     */
    agentPlatform?: pulumi.Input<number>;
    /**
     * Whether or not to allocate a public IP. Defaults to `false`.
     */
    allocatedPublicIp?: pulumi.Input<boolean>;
    architecture?: pulumi.Input<string>;
    /**
     * The machine type to create
     */
    capacity?: pulumi.Input<string>;
    /**
     * The name of the vm.
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * The full name of the vm.
     */
    fullname?: pulumi.Input<string>;
    identityRole?: pulumi.Input<string>;
    /**
     * The image from which to initialize this vm
     */
    imageId?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs assigned to the vm
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configuration, metadata used when creating the host.\n\n*Note: To configure OS disk size OsDiskSize can be specified as Key and its size as value, size value should be atleast 10, Similarly to added start up script one can pass the key as startupScript and startup command as its value*
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    privateIpAddress?: pulumi.Input<string>;
    publicIpAddress?: pulumi.Input<string>;
    selfLink?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    /**
     * List of network tags that can be added to the vm
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The GUID of the tenant that the host will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The email id of the user.
     */
    userAccount?: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
    /**
     * The zone that the machine should be created in
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GcpHost resource.
 */
export interface GcpHostArgs {
    /**
     * The number of the guest accelerator cards exposed to this instance. Defaults to `0`.
     */
    acceleratorCount?: pulumi.Input<number>;
    /**
     * The accelerator type resource to expose to this instance
     */
    acceleratorType?: pulumi.Input<string>;
    /**
     * The numeric ID of the container agent pool that this host is added to. Defaults to `0`.
     */
    agentPlatform?: pulumi.Input<number>;
    /**
     * Whether or not to allocate a public IP. Defaults to `false`.
     */
    allocatedPublicIp?: pulumi.Input<boolean>;
    /**
     * The machine type to create
     */
    capacity: pulumi.Input<string>;
    /**
     * The name of the vm.
     */
    friendlyName: pulumi.Input<string>;
    /**
     * The image from which to initialize this vm
     */
    imageId: pulumi.Input<string>;
    /**
     * A set of key/value label pairs assigned to the vm
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configuration, metadata used when creating the host.\n\n*Note: To configure OS disk size OsDiskSize can be specified as Key and its size as value, size value should be atleast 10, Similarly to added start up script one can pass the key as startupScript and startup command as its value*
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of network tags that can be added to the vm
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The GUID of the tenant that the host will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * The email id of the user.
     */
    userAccount: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
    /**
     * The zone that the machine should be created in
     */
    zone: pulumi.Input<string>;
}
