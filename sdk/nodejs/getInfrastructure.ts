// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.Infrastructure` retrieves details of an infrastructure in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Example 1 - look up an infrastructure by tenant ID.
 * const myinfra1 = duplocloud.getInfrastructure({
 *     tenantId: tenantId,
 * });
 * // Example 2 - look up an infrastructure by name.
 * const myinfra2 = duplocloud.getInfrastructure({
 *     infraName: "myinfra",
 * });
 * // Example 3 - look up list of certificates by plan ID.
 * const certList = duplocloud.getPlanCertificates({
 *     planId: "default",
 * });
 * // Example 3 - look up plan certificates by plan ID and certificate name.
 * const singleCert = duplocloud.getPlanCertificate({
 *     planId: "default",
 *     name: "poc.duplocloud.net",
 * });
 * ```
 */
export function getInfrastructure(args?: GetInfrastructureArgs, opts?: pulumi.InvokeOptions): Promise<GetInfrastructureResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("duplocloud:index/getInfrastructure:getInfrastructure", {
        "infraName": args.infraName,
        "tenantId": args.tenantId,
    }, opts);
}

/**
 * A collection of arguments for invoking getInfrastructure.
 */
export interface GetInfrastructureArgs {
    infraName?: string;
    tenantId?: string;
}

/**
 * A collection of values returned by getInfrastructure.
 */
export interface GetInfrastructureResult {
    readonly accountId: string;
    readonly addressPrefix: string;
    readonly azcount: number;
    readonly cloud: number;
    readonly enableK8Cluster: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly infraName: string;
    readonly privateSubnets: outputs.GetInfrastructurePrivateSubnet[];
    readonly publicSubnets: outputs.GetInfrastructurePublicSubnet[];
    readonly region: string;
    readonly securityGroups: outputs.GetInfrastructureSecurityGroup[];
    readonly status: string;
    readonly subnetCidr: number;
    readonly tenantId?: string;
    readonly vpcId: string;
    readonly vpcName: string;
}
/**
 * `duplocloud.Infrastructure` retrieves details of an infrastructure in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Example 1 - look up an infrastructure by tenant ID.
 * const myinfra1 = duplocloud.getInfrastructure({
 *     tenantId: tenantId,
 * });
 * // Example 2 - look up an infrastructure by name.
 * const myinfra2 = duplocloud.getInfrastructure({
 *     infraName: "myinfra",
 * });
 * // Example 3 - look up list of certificates by plan ID.
 * const certList = duplocloud.getPlanCertificates({
 *     planId: "default",
 * });
 * // Example 3 - look up plan certificates by plan ID and certificate name.
 * const singleCert = duplocloud.getPlanCertificate({
 *     planId: "default",
 *     name: "poc.duplocloud.net",
 * });
 * ```
 */
export function getInfrastructureOutput(args?: GetInfrastructureOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetInfrastructureResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("duplocloud:index/getInfrastructure:getInfrastructure", {
        "infraName": args.infraName,
        "tenantId": args.tenantId,
    }, opts);
}

/**
 * A collection of arguments for invoking getInfrastructure.
 */
export interface GetInfrastructureOutputArgs {
    infraName?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
}
