// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.AzureTenantKeyVaultSecret` manages a azure Key Vault secret in DuploCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "test",
 *     planId: "test",
 * });
 * const kv = new duplocloud.AzureTenantKeyVault("kv", {
 *     tenantId: tenant.tenantId,
 *     name: "tst-kv001",
 *     skuName: "standard",
 *     purgeProtectionEnabled: true,
 *     softDeleteRetentionDays: 90,
 * });
 * const kvSecret = new duplocloud.AzureTenantKeyVaultSecret("kv_secret", {
 *     tenantId: tenant.tenantId,
 *     vaultName: kv.name,
 *     name: "Sec001",
 *     value: "SecVal001",
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing Azure Key Vault Secret
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *VAULT_NAME* is the name of the Azure Key Vault
 *
 *  - *SECRET_NAME* is the name of the Azure Key Vault Secret
 *
 * ```sh
 * $ pulumi import duplocloud:index/azureTenantKeyVaultSecret:AzureTenantKeyVaultSecret kv_secret *TENANT_ID*&#47;*VAULT_NAME*&#47;*SECRET_NAME*
 * ```
 */
export class AzureTenantKeyVaultSecret extends pulumi.CustomResource {
    /**
     * Get an existing AzureTenantKeyVaultSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureTenantKeyVaultSecretState, opts?: pulumi.CustomResourceOptions): AzureTenantKeyVaultSecret {
        return new AzureTenantKeyVaultSecret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/azureTenantKeyVaultSecret:AzureTenantKeyVaultSecret';

    /**
     * Returns true if the given object is an instance of AzureTenantKeyVaultSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureTenantKeyVaultSecret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureTenantKeyVaultSecret.__pulumiType;
    }

    /**
     * The azure ID of the Key Vault secret.
     */
    public /*out*/ readonly azureId!: pulumi.Output<string>;
    /**
     * Specifies the content type for the Key Vault Secret.
     */
    public readonly contentType!: pulumi.Output<string>;
    /**
     * Specifies the name of the Key Vault Secret.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Reflects the deletion recovery level currently in effect for secrets in the current vault.
     */
    public /*out*/ readonly recoveryLevel!: pulumi.Output<string>;
    /**
     * The GUID of the DuploCloud tenant that the key vault secret will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Specifies the value of the Key Vault Secret. Changing this will create a new version of the Key Vault Secret.
     */
    public readonly value!: pulumi.Output<string>;
    /**
     * Base URL of the Azure Key Vault
     */
    public /*out*/ readonly vaultBaseUrl!: pulumi.Output<string>;
    /**
     * Name of the Key Vault where the Secret should be created.
     */
    public readonly vaultName!: pulumi.Output<string>;
    /**
     * The current version of the Key Vault Secret.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a AzureTenantKeyVaultSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureTenantKeyVaultSecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureTenantKeyVaultSecretArgs | AzureTenantKeyVaultSecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureTenantKeyVaultSecretState | undefined;
            resourceInputs["azureId"] = state ? state.azureId : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recoveryLevel"] = state ? state.recoveryLevel : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["vaultBaseUrl"] = state ? state.vaultBaseUrl : undefined;
            resourceInputs["vaultName"] = state ? state.vaultName : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as AzureTenantKeyVaultSecretArgs | undefined;
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            if ((!args || args.vaultName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultName'");
            }
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["vaultName"] = args ? args.vaultName : undefined;
            resourceInputs["azureId"] = undefined /*out*/;
            resourceInputs["recoveryLevel"] = undefined /*out*/;
            resourceInputs["vaultBaseUrl"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureTenantKeyVaultSecret.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AzureTenantKeyVaultSecret resources.
 */
export interface AzureTenantKeyVaultSecretState {
    /**
     * The azure ID of the Key Vault secret.
     */
    azureId?: pulumi.Input<string>;
    /**
     * Specifies the content type for the Key Vault Secret.
     */
    contentType?: pulumi.Input<string>;
    /**
     * Specifies the name of the Key Vault Secret.
     */
    name?: pulumi.Input<string>;
    /**
     * Reflects the deletion recovery level currently in effect for secrets in the current vault.
     */
    recoveryLevel?: pulumi.Input<string>;
    /**
     * The GUID of the DuploCloud tenant that the key vault secret will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Specifies the value of the Key Vault Secret. Changing this will create a new version of the Key Vault Secret.
     */
    value?: pulumi.Input<string>;
    /**
     * Base URL of the Azure Key Vault
     */
    vaultBaseUrl?: pulumi.Input<string>;
    /**
     * Name of the Key Vault where the Secret should be created.
     */
    vaultName?: pulumi.Input<string>;
    /**
     * The current version of the Key Vault Secret.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AzureTenantKeyVaultSecret resource.
 */
export interface AzureTenantKeyVaultSecretArgs {
    /**
     * Specifies the content type for the Key Vault Secret.
     */
    contentType?: pulumi.Input<string>;
    /**
     * Specifies the name of the Key Vault Secret.
     */
    name?: pulumi.Input<string>;
    /**
     * The GUID of the DuploCloud tenant that the key vault secret will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Specifies the value of the Key Vault Secret. Changing this will create a new version of the Key Vault Secret.
     */
    value: pulumi.Input<string>;
    /**
     * Name of the Key Vault where the Secret should be created.
     */
    vaultName: pulumi.Input<string>;
}
