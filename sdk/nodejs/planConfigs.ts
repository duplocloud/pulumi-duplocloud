// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.PlanConfigs` manages the list of configs avaialble to a plan in Duplo.
 *
 * This resource allows you take control of individual configs for a specific plan.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import duplocloud:index/planConfigs:PlanConfigs myplan PLAN_ID
 * ```
 */
export class PlanConfigs extends pulumi.CustomResource {
    /**
     * Get an existing PlanConfigs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlanConfigsState, opts?: pulumi.CustomResourceOptions): PlanConfigs {
        return new PlanConfigs(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/planConfigs:PlanConfigs';

    /**
     * Returns true if the given object is an instance of PlanConfigs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlanConfigs {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlanConfigs.__pulumiType;
    }

    /**
     * A list of configs to manage.
     */
    public readonly config!: pulumi.Output<outputs.PlanConfigsConfig[] | undefined>;
    /**
     * A complete list of configs for this plan, even ones not being managed by this resource.
     */
    public /*out*/ readonly configs!: pulumi.Output<outputs.PlanConfigsConfig[]>;
    /**
     * Whether or not this resource should delete any configs not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
     */
    public readonly deleteUnspecifiedConfigs!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the plan to configure.
     */
    public readonly planId!: pulumi.Output<string>;
    /**
     * A list of config keys being managed by this resource.
     */
    public /*out*/ readonly specifiedConfigs!: pulumi.Output<string[]>;

    /**
     * Create a PlanConfigs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlanConfigsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlanConfigsArgs | PlanConfigsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlanConfigsState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["deleteUnspecifiedConfigs"] = state ? state.deleteUnspecifiedConfigs : undefined;
            resourceInputs["planId"] = state ? state.planId : undefined;
            resourceInputs["specifiedConfigs"] = state ? state.specifiedConfigs : undefined;
        } else {
            const args = argsOrState as PlanConfigsArgs | undefined;
            if ((!args || args.planId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'planId'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["deleteUnspecifiedConfigs"] = args ? args.deleteUnspecifiedConfigs : undefined;
            resourceInputs["planId"] = args ? args.planId : undefined;
            resourceInputs["configs"] = undefined /*out*/;
            resourceInputs["specifiedConfigs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlanConfigs.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PlanConfigs resources.
 */
export interface PlanConfigsState {
    /**
     * A list of configs to manage.
     */
    config?: pulumi.Input<pulumi.Input<inputs.PlanConfigsConfig>[]>;
    /**
     * A complete list of configs for this plan, even ones not being managed by this resource.
     */
    configs?: pulumi.Input<pulumi.Input<inputs.PlanConfigsConfig>[]>;
    /**
     * Whether or not this resource should delete any configs not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
     */
    deleteUnspecifiedConfigs?: pulumi.Input<boolean>;
    /**
     * The ID of the plan to configure.
     */
    planId?: pulumi.Input<string>;
    /**
     * A list of config keys being managed by this resource.
     */
    specifiedConfigs?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a PlanConfigs resource.
 */
export interface PlanConfigsArgs {
    /**
     * A list of configs to manage.
     */
    config?: pulumi.Input<pulumi.Input<inputs.PlanConfigsConfig>[]>;
    /**
     * Whether or not this resource should delete any configs not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
     */
    deleteUnspecifiedConfigs?: pulumi.Input<boolean>;
    /**
     * The ID of the plan to configure.
     */
    planId: pulumi.Input<string>;
}
