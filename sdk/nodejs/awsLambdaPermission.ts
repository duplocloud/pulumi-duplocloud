// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.AwsLambdaPermission` manages an AWS lambda permissions in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myfunction = new duplocloud.AwsLambdaFunction("myfunction", {
 *     tenantId: "mytenant",
 *     name: "myfunction",
 *     description: "A description of my function",
 *     runtime: "java11",
 *     handler: "com.example.MyFunction::handleRequest",
 *     s3Bucket: "my-bucket-name",
 *     s3Key: "my-function.zip",
 *     environment: {
 *         variables: {
 *             foo: "bar",
 *         },
 *     },
 *     timeout: 60,
 *     memorySize: 512,
 * });
 * const permission = new duplocloud.AwsLambdaPermission("permission", {
 *     statementId: "AllowExecutionFromAPIGateway",
 *     action: "lambda:InvokeFunction",
 *     functionName: myfunction.fullname,
 *     principal: "apigateway.amazonaws.com",
 *     sourceArn: "arn:aws:execute-api:region:accountId:aws_api_gateway_rest_api.api.id/*&#47;*&#47;*",
 *     tenantId: "mytenant",
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing AWS lambda function permission
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *SHORT_NAME* is the short name of the AWS lambda function
 *
 *  - *STATEMENT_ID* is the statement ID of the permission
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/awsLambdaPermission:AwsLambdaPermission permission *TENANT_ID*&#47;*SHORT_NAME*&#47;*STATEMENT_ID*
 * ```
 */
export class AwsLambdaPermission extends pulumi.CustomResource {
    /**
     * Get an existing AwsLambdaPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsLambdaPermissionState, opts?: pulumi.CustomResourceOptions): AwsLambdaPermission {
        return new AwsLambdaPermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/awsLambdaPermission:AwsLambdaPermission';

    /**
     * Returns true if the given object is an instance of AwsLambdaPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsLambdaPermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsLambdaPermission.__pulumiType;
    }

    /**
     * The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The Event Source Token to validate.
     */
    public readonly eventSourceToken!: pulumi.Output<string | undefined>;
    /**
     * Name of the Lambda function whose resource policy you are updating.
     */
    public readonly functionName!: pulumi.Output<string>;
    /**
     * The principal who is getting this permission.
     */
    public readonly principal!: pulumi.Output<string>;
    /**
     * Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN.
     */
    public readonly qualifier!: pulumi.Output<string | undefined>;
    /**
     * This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
     */
    public readonly sourceAccount!: pulumi.Output<string | undefined>;
    /**
     * When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
     */
    public readonly sourceArn!: pulumi.Output<string | undefined>;
    /**
     * A unique statement identifier.
     */
    public readonly statementId!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the lambda permission will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a AwsLambdaPermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsLambdaPermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsLambdaPermissionArgs | AwsLambdaPermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsLambdaPermissionState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["eventSourceToken"] = state ? state.eventSourceToken : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
            resourceInputs["qualifier"] = state ? state.qualifier : undefined;
            resourceInputs["sourceAccount"] = state ? state.sourceAccount : undefined;
            resourceInputs["sourceArn"] = state ? state.sourceArn : undefined;
            resourceInputs["statementId"] = state ? state.statementId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as AwsLambdaPermissionArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            if ((!args || args.statementId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'statementId'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["eventSourceToken"] = args ? args.eventSourceToken : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["qualifier"] = args ? args.qualifier : undefined;
            resourceInputs["sourceAccount"] = args ? args.sourceAccount : undefined;
            resourceInputs["sourceArn"] = args ? args.sourceArn : undefined;
            resourceInputs["statementId"] = args ? args.statementId : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsLambdaPermission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsLambdaPermission resources.
 */
export interface AwsLambdaPermissionState {
    /**
     * The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
     */
    action?: pulumi.Input<string>;
    /**
     * The Event Source Token to validate.
     */
    eventSourceToken?: pulumi.Input<string>;
    /**
     * Name of the Lambda function whose resource policy you are updating.
     */
    functionName?: pulumi.Input<string>;
    /**
     * The principal who is getting this permission.
     */
    principal?: pulumi.Input<string>;
    /**
     * Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN.
     */
    qualifier?: pulumi.Input<string>;
    /**
     * This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
     */
    sourceAccount?: pulumi.Input<string>;
    /**
     * When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
     */
    sourceArn?: pulumi.Input<string>;
    /**
     * A unique statement identifier.
     */
    statementId?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the lambda permission will be created in.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsLambdaPermission resource.
 */
export interface AwsLambdaPermissionArgs {
    /**
     * The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
     */
    action: pulumi.Input<string>;
    /**
     * The Event Source Token to validate.
     */
    eventSourceToken?: pulumi.Input<string>;
    /**
     * Name of the Lambda function whose resource policy you are updating.
     */
    functionName: pulumi.Input<string>;
    /**
     * The principal who is getting this permission.
     */
    principal: pulumi.Input<string>;
    /**
     * Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN.
     */
    qualifier?: pulumi.Input<string>;
    /**
     * This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
     */
    sourceAccount?: pulumi.Input<string>;
    /**
     * When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
     */
    sourceArn?: pulumi.Input<string>;
    /**
     * A unique statement identifier.
     */
    statementId: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the lambda permission will be created in.
     */
    tenantId: pulumi.Input<string>;
}
