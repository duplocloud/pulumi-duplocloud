// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.AzureSqlVirtualNetworkRule` allows you to add, update, or remove an Azure SQL server to a subnet of a virtual network.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const sqlVnetRule = new duplocloud.AzureSqlVirtualNetworkRule("sql_vnet_rule", {
 *     tenantId: myapp.tenantId,
 *     name: "test-rule",
 *     serverName: "test-server",
 *     subnetId: "/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default",
 *     ignoreMissingVnetServiceEndpoint: false,
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing Azure SQL server Vnet Rule
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *SERVER_NAME* is the name of the Azure Sql server
 *
 *  - *RULE_NAME* is the name of the Azure Sql server Vnet Rule
 *
 * ```sh
 * $ pulumi import duplocloud:index/azureSqlVirtualNetworkRule:AzureSqlVirtualNetworkRule sql_vnet_rule *TENANT_ID*&#47;*SERVER_NAME*&#47;*RULE_NAME*
 * ```
 */
export class AzureSqlVirtualNetworkRule extends pulumi.CustomResource {
    /**
     * Get an existing AzureSqlVirtualNetworkRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureSqlVirtualNetworkRuleState, opts?: pulumi.CustomResourceOptions): AzureSqlVirtualNetworkRule {
        return new AzureSqlVirtualNetworkRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/azureSqlVirtualNetworkRule:AzureSqlVirtualNetworkRule';

    /**
     * Returns true if the given object is an instance of AzureSqlVirtualNetworkRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureSqlVirtualNetworkRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureSqlVirtualNetworkRule.__pulumiType;
    }

    /**
     * The ID of the SQL virtual network rule.
     */
    public /*out*/ readonly azureId!: pulumi.Output<string>;
    /**
     * Create the virtual network rule before the subnet has the virtual network service endpoint enabled.
     */
    public readonly ignoreMissingVnetServiceEndpoint!: pulumi.Output<boolean>;
    /**
     * The name of the SQL virtual network rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the SQL Server to which this SQL virtual network rule will be applied to.
     */
    public readonly serverName!: pulumi.Output<string>;
    /**
     * The ID of the subnet that the SQL server will be connected to.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the sql virtual network rule will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
     */
    public readonly waitUntilReady!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AzureSqlVirtualNetworkRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureSqlVirtualNetworkRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureSqlVirtualNetworkRuleArgs | AzureSqlVirtualNetworkRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureSqlVirtualNetworkRuleState | undefined;
            resourceInputs["azureId"] = state ? state.azureId : undefined;
            resourceInputs["ignoreMissingVnetServiceEndpoint"] = state ? state.ignoreMissingVnetServiceEndpoint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["waitUntilReady"] = state ? state.waitUntilReady : undefined;
        } else {
            const args = argsOrState as AzureSqlVirtualNetworkRuleArgs | undefined;
            if ((!args || args.serverName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverName'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["ignoreMissingVnetServiceEndpoint"] = args ? args.ignoreMissingVnetServiceEndpoint : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["waitUntilReady"] = args ? args.waitUntilReady : undefined;
            resourceInputs["azureId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureSqlVirtualNetworkRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AzureSqlVirtualNetworkRule resources.
 */
export interface AzureSqlVirtualNetworkRuleState {
    /**
     * The ID of the SQL virtual network rule.
     */
    azureId?: pulumi.Input<string>;
    /**
     * Create the virtual network rule before the subnet has the virtual network service endpoint enabled.
     */
    ignoreMissingVnetServiceEndpoint?: pulumi.Input<boolean>;
    /**
     * The name of the SQL virtual network rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the SQL Server to which this SQL virtual network rule will be applied to.
     */
    serverName?: pulumi.Input<string>;
    /**
     * The ID of the subnet that the SQL server will be connected to.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the sql virtual network rule will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AzureSqlVirtualNetworkRule resource.
 */
export interface AzureSqlVirtualNetworkRuleArgs {
    /**
     * Create the virtual network rule before the subnet has the virtual network service endpoint enabled.
     */
    ignoreMissingVnetServiceEndpoint?: pulumi.Input<boolean>;
    /**
     * The name of the SQL virtual network rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the SQL Server to which this SQL virtual network rule will be applied to.
     */
    serverName: pulumi.Input<string>;
    /**
     * The ID of the subnet that the SQL server will be connected to.
     */
    subnetId: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the sql virtual network rule will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
}
