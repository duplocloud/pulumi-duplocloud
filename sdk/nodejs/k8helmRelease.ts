// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloudHelmRelease` manages helm release at duplocloud
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const release = new duplocloud.K8HelmRelease("release", {
 *     tenantId: myapp.tenantId,
 *     name: "helm-release-name",
 *     interval: "05m00s",
 *     releaseName: "helm-release-1",
 *     charts: [{
 *         name: "chart-name",
 *         version: "v1",
 *         reconcileStrategy: "ChartVersion",
 *         sourceType: "HelmRepository",
 *         sourceName: repo.name,
 *     }],
 *     values: JSON.stringify({
 *         replicaCount: 2,
 *         serviceAccount: {
 *             create: false,
 *         },
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing helm release
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *NAME* is the helm release name
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/k8HelmRelease:K8HelmRelease release *TENANT_ID*&#47;helm-release/*NAME*
 * ```
 */
export class K8HelmRelease extends pulumi.CustomResource {
    /**
     * Get an existing K8HelmRelease resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8HelmReleaseState, opts?: pulumi.CustomResourceOptions): K8HelmRelease {
        return new K8HelmRelease(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/k8HelmRelease:K8HelmRelease';

    /**
     * Returns true if the given object is an instance of K8HelmRelease.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8HelmRelease {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8HelmRelease.__pulumiType;
    }

    /**
     * Helm chart
     */
    public readonly charts!: pulumi.Output<outputs.K8HelmReleaseChart[]>;
    /**
     * Interval related to helm release Defaults to `5m0s`.
     */
    public readonly interval!: pulumi.Output<string | undefined>;
    /**
     * The name of the helm chart
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Provide release name to identify specific deployment of helm chart.
     */
    public readonly releaseName!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the storage bucket will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Customise an helm chart.
     */
    public readonly values!: pulumi.Output<string | undefined>;

    /**
     * Create a K8HelmRelease resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8HelmReleaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8HelmReleaseArgs | K8HelmReleaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8HelmReleaseState | undefined;
            resourceInputs["charts"] = state ? state.charts : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["releaseName"] = state ? state.releaseName : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
        } else {
            const args = argsOrState as K8HelmReleaseArgs | undefined;
            if ((!args || args.releaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'releaseName'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["charts"] = args ? args.charts : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["releaseName"] = args ? args.releaseName : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8HelmRelease.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering K8HelmRelease resources.
 */
export interface K8HelmReleaseState {
    /**
     * Helm chart
     */
    charts?: pulumi.Input<pulumi.Input<inputs.K8HelmReleaseChart>[]>;
    /**
     * Interval related to helm release Defaults to `5m0s`.
     */
    interval?: pulumi.Input<string>;
    /**
     * The name of the helm chart
     */
    name?: pulumi.Input<string>;
    /**
     * Provide release name to identify specific deployment of helm chart.
     */
    releaseName?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the storage bucket will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Customise an helm chart.
     */
    values?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a K8HelmRelease resource.
 */
export interface K8HelmReleaseArgs {
    /**
     * Helm chart
     */
    charts?: pulumi.Input<pulumi.Input<inputs.K8HelmReleaseChart>[]>;
    /**
     * Interval related to helm release Defaults to `5m0s`.
     */
    interval?: pulumi.Input<string>;
    /**
     * The name of the helm chart
     */
    name?: pulumi.Input<string>;
    /**
     * Provide release name to identify specific deployment of helm chart.
     */
    releaseName: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the storage bucket will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Customise an helm chart.
     */
    values?: pulumi.Input<string>;
}
