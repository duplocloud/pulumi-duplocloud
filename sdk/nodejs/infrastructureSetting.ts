// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.InfrastructureSetting` manages a infrastructure's configuration in Duplo.
 *
 * Infrastructure settings are initially populated by Duplo when an infrastructure is created.  This resource allows you take control of individual configuration settings for a specific infrastructure.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myinfra = new duplocloud.Infrastructure("myinfra", {
 *     infraName: "myinfra",
 *     cloud: 0,
 *     region: "us-east-1",
 *     azcount: 2,
 *     enableK8Cluster: true,
 *     addressPrefix: "10.34.0.0/16",
 *     subnetCidr: 24,
 * });
 * const settings = new duplocloud.InfrastructureSetting("settings", {
 *     infraName: myinfra.name,
 *     settings: [
 *         {
 *             key: "EnableSecretCsiDriver",
 *             value: "true",
 *         },
 *         {
 *             key: "EnableAWSEfsVolumes",
 *             value: "true",
 *         },
 *         {
 *             key: "EnableAwsAlbIngress",
 *             value: "true",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing infrastructure setting
 *
 *  - *NAME* is the infrastructure name
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/infrastructureSetting:InfrastructureSetting settings *NAME*
 * ```
 */
export class InfrastructureSetting extends pulumi.CustomResource {
    /**
     * Get an existing InfrastructureSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InfrastructureSettingState, opts?: pulumi.CustomResourceOptions): InfrastructureSetting {
        return new InfrastructureSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/infrastructureSetting:InfrastructureSetting';

    /**
     * Returns true if the given object is an instance of InfrastructureSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InfrastructureSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InfrastructureSetting.__pulumiType;
    }

    /**
     * A complete list of configuration settings for this infrastructure, even ones not being managed by this resource. The custom*data argument is only applied on creation, and is deprecated in favor of the settings argument.
     *
     * @deprecated The customData argument is only applied on creation, and is deprecated in favor of the settings argument.
     */
    public readonly customDatas!: pulumi.Output<outputs.InfrastructureSettingCustomData[] | undefined>;
    /**
     * Whether or not this resource should delete any settings not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
     */
    public readonly deleteUnspecifiedSettings!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the infrastructure to configure.
     */
    public readonly infraName!: pulumi.Output<string>;
    /**
     * A list of configuration settings to manage, expressed as key / value pairs.
     */
    public readonly settings!: pulumi.Output<outputs.InfrastructureSettingSetting[] | undefined>;
    /**
     * A list of configuration setting key being managed by this resource.
     */
    public /*out*/ readonly specifiedSettings!: pulumi.Output<string[]>;

    /**
     * Create a InfrastructureSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InfrastructureSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InfrastructureSettingArgs | InfrastructureSettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InfrastructureSettingState | undefined;
            resourceInputs["customDatas"] = state ? state.customDatas : undefined;
            resourceInputs["deleteUnspecifiedSettings"] = state ? state.deleteUnspecifiedSettings : undefined;
            resourceInputs["infraName"] = state ? state.infraName : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["specifiedSettings"] = state ? state.specifiedSettings : undefined;
        } else {
            const args = argsOrState as InfrastructureSettingArgs | undefined;
            if ((!args || args.infraName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'infraName'");
            }
            resourceInputs["customDatas"] = args ? args.customDatas : undefined;
            resourceInputs["deleteUnspecifiedSettings"] = args ? args.deleteUnspecifiedSettings : undefined;
            resourceInputs["infraName"] = args ? args.infraName : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["specifiedSettings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InfrastructureSetting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InfrastructureSetting resources.
 */
export interface InfrastructureSettingState {
    /**
     * A complete list of configuration settings for this infrastructure, even ones not being managed by this resource. The custom*data argument is only applied on creation, and is deprecated in favor of the settings argument.
     *
     * @deprecated The customData argument is only applied on creation, and is deprecated in favor of the settings argument.
     */
    customDatas?: pulumi.Input<pulumi.Input<inputs.InfrastructureSettingCustomData>[]>;
    /**
     * Whether or not this resource should delete any settings not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
     */
    deleteUnspecifiedSettings?: pulumi.Input<boolean>;
    /**
     * The name of the infrastructure to configure.
     */
    infraName?: pulumi.Input<string>;
    /**
     * A list of configuration settings to manage, expressed as key / value pairs.
     */
    settings?: pulumi.Input<pulumi.Input<inputs.InfrastructureSettingSetting>[]>;
    /**
     * A list of configuration setting key being managed by this resource.
     */
    specifiedSettings?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a InfrastructureSetting resource.
 */
export interface InfrastructureSettingArgs {
    /**
     * A complete list of configuration settings for this infrastructure, even ones not being managed by this resource. The custom*data argument is only applied on creation, and is deprecated in favor of the settings argument.
     *
     * @deprecated The customData argument is only applied on creation, and is deprecated in favor of the settings argument.
     */
    customDatas?: pulumi.Input<pulumi.Input<inputs.InfrastructureSettingCustomData>[]>;
    /**
     * Whether or not this resource should delete any settings not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
     */
    deleteUnspecifiedSettings?: pulumi.Input<boolean>;
    /**
     * The name of the infrastructure to configure.
     */
    infraName: pulumi.Input<string>;
    /**
     * A list of configuration settings to manage, expressed as key / value pairs.
     */
    settings?: pulumi.Input<pulumi.Input<inputs.InfrastructureSettingSetting>[]>;
}
