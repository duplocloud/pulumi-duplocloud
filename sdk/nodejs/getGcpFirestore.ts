// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const app = duplocloud.getGcpFirestore({
 *     tenantId: "tenant_id",
 *     name: "name",
 * });
 * export const out = {
 *     name: app.then(app => app.name),
 *     type: app.then(app => app.type),
 *     locationId: app.then(app => app.locationId),
 *     enableDeleteProtection: app.then(app => app.enableDeleteProtection),
 *     enablePointInTimeRecovery: app.then(app => app.enablePointInTimeRecovery),
 *     etag: app.then(app => app.etag),
 *     uid: app.then(app => app.uid),
 *     versionRetentionPeriod: app.then(app => app.versionRetentionPeriod),
 *     earliestVersionTime: app.then(app => app.earliestVersionTime),
 *     concurrencyMode: app.then(app => app.concurrencyMode),
 *     appEngineIntegrationMode: app.then(app => app.appEngineIntegrationMode),
 * };
 * ```
 */
export function getGcpFirestore(args: GetGcpFirestoreArgs, opts?: pulumi.InvokeOptions): Promise<GetGcpFirestoreResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("duplocloud:index/getGcpFirestore:getGcpFirestore", {
        "name": args.name,
        "tenantId": args.tenantId,
    }, opts);
}

/**
 * A collection of arguments for invoking getGcpFirestore.
 */
export interface GetGcpFirestoreArgs {
    /**
     * The full name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
     */
    name: string;
    /**
     * The GUID of the tenant that the firestore will be created in.
     */
    tenantId: string;
}

/**
 * A collection of values returned by getGcpFirestore.
 */
export interface GetGcpFirestoreResult {
    readonly appEngineIntegrationMode: string;
    readonly concurrencyMode: string;
    readonly earliestVersionTime: string;
    /**
     * Delete protection prevents accidental deletion of firestore.
     */
    readonly enableDeleteProtection: boolean;
    /**
     * Restores data to a specific moment in time, enhancing data protection and recovery capabilities.
     */
    readonly enablePointInTimeRecovery: boolean;
    readonly etag: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Location for firestore
     */
    readonly locationId: string;
    /**
     * The full name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
     */
    readonly name: string;
    /**
     * The GUID of the tenant that the firestore will be created in.
     */
    readonly tenantId: string;
    /**
     * Firestore type
     */
    readonly type: string;
    readonly uid: string;
    readonly versionRetentionPeriod: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const app = duplocloud.getGcpFirestore({
 *     tenantId: "tenant_id",
 *     name: "name",
 * });
 * export const out = {
 *     name: app.then(app => app.name),
 *     type: app.then(app => app.type),
 *     locationId: app.then(app => app.locationId),
 *     enableDeleteProtection: app.then(app => app.enableDeleteProtection),
 *     enablePointInTimeRecovery: app.then(app => app.enablePointInTimeRecovery),
 *     etag: app.then(app => app.etag),
 *     uid: app.then(app => app.uid),
 *     versionRetentionPeriod: app.then(app => app.versionRetentionPeriod),
 *     earliestVersionTime: app.then(app => app.earliestVersionTime),
 *     concurrencyMode: app.then(app => app.concurrencyMode),
 *     appEngineIntegrationMode: app.then(app => app.appEngineIntegrationMode),
 * };
 * ```
 */
export function getGcpFirestoreOutput(args: GetGcpFirestoreOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetGcpFirestoreResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("duplocloud:index/getGcpFirestore:getGcpFirestore", {
        "name": args.name,
        "tenantId": args.tenantId,
    }, opts);
}

/**
 * A collection of arguments for invoking getGcpFirestore.
 */
export interface GetGcpFirestoreOutputArgs {
    /**
     * The full name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
     */
    name: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the firestore will be created in.
     */
    tenantId: pulumi.Input<string>;
}
