// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### Provision an RDS instance using the PostgreSQL engine named dev-db in DuploCloud platform.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 * import * as random from "@pulumi/random";
 *
 * // Before creating an RDS instance, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.
 * const infra = new duplocloud.Infrastructure("infra", {
 *     infraName: "dev",
 *     cloud: 0,
 *     region: "us-east-1",
 *     enableK8Cluster: false,
 *     addressPrefix: "10.13.0.0/16",
 * });
 * // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "dev",
 *     planId: infra.infraName,
 * });
 * // Generate a random password for the RDS instance.
 * const password = new random.index.Password("password", {
 *     length: 16,
 *     special: false,
 * });
 * // Create an RDS instance.
 * const dev_db = new duplocloud.RdsInstance("dev-db", {
 *     tenantId: tenant.tenantId,
 *     name: "dev-db",
 *     engine: 1,
 *     engineVersion: "15.2",
 *     size: "db.t3.medium",
 *     masterUsername: "postgres",
 *     masterPassword: password.result,
 *     encryptStorage: true,
 *     backupRetentionPeriod: 7,
 * });
 * ```
 *
 * ### Provision an RDS instance using the PostgreSQL engine named dev-db with deletion protection enabled and multi-az enabled.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 * import * as random from "@pulumi/random";
 *
 * // Ensure the 'dev' tenant is already created before creating the RDS instance.
 * const tenant = duplocloud.getTenant({
 *     name: "dev",
 * });
 * // Generate a random password for the RDS instance.
 * const mypassword = new random.index.Password("mypassword", {
 *     length: 16,
 *     special: false,
 * });
 * const dev_db = new duplocloud.RdsInstance("dev-db", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "dev-db",
 *     engine: 1,
 *     engineVersion: "15.2",
 *     size: "db.t3.medium",
 *     deletionProtection: true,
 *     multiAz: true,
 *     masterUsername: "postgres",
 *     masterPassword: mypassword.result,
 *     encryptStorage: true,
 *     backupRetentionPeriod: 7,
 * });
 * ```
 *
 * ### Create an RDS instance using the Aurora-PostgreSQL engine named aurora-postgres-db with instance class db.m5.large.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 * import * as random from "@pulumi/random";
 *
 * // Ensure the 'dev' tenant is already created before creating the RDS instance.
 * const tenant = duplocloud.getTenant({
 *     name: "dev",
 * });
 * // Generate a random password for the RDS instance.
 * const mypassword = new random.index.Password("mypassword", {
 *     length: 16,
 *     special: false,
 * });
 * const aurora_postgres_db = new duplocloud.RdsInstance("aurora-postgres-db", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "aurora-postgres-db",
 *     engine: 9,
 *     engineVersion: "15.2",
 *     size: "db.m5.large",
 *     masterUsername: "postgres",
 *     masterPassword: mypassword.result,
 *     encryptStorage: true,
 *     backupRetentionPeriod: 7,
 * });
 * ```
 *
 * ### Create an Aurora serverless RDS instance using the PostgreSQL engine named aurora-postgres with engine version 15.5, minimum capacity of 0.5, maximum capacity of 2, with deletion protection enabled and store the DB credentials in AWS secrets manager. Also create a read replica for this database.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 * import * as random from "@pulumi/random";
 *
 * // Ensure the 'dev' tenant is already created before creating the RDS instance.
 * const tenant = duplocloud.getTenant({
 *     name: "dev",
 * });
 * // Generate a random password for the RDS instance.
 * const mypassword = new random.index.Password("mypassword", {
 *     length: 16,
 *     special: false,
 * });
 * const aurora_serverless = new duplocloud.RdsInstance("aurora-serverless", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "aurora-postgres",
 *     engine: 9,
 *     engineVersion: "15.5",
 *     size: "db.serverless",
 *     masterUsername: "postgres",
 *     masterPassword: mypassword.result,
 *     encryptStorage: true,
 *     backupRetentionPeriod: 7,
 *     v2ScalingConfiguration: {
 *         minCapacity: 0.5,
 *         maxCapacity: 2,
 *     },
 *     storeDetailsInSecretManager: true,
 *     deletionProtection: true,
 * });
 * const read_replica = new duplocloud.RdsReadReplica("read-replica", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "aurora-postgres-read-replica",
 *     size: "db.serverless",
 *     clusterIdentifier: aurora_serverless.clusterIdentifier,
 * }, {
 *     dependsOn: [aurora_serverless],
 * });
 * ```
 *
 * ### Provision an RDS instance using the MySQL engine named dev-db, with username mysqlUser1 in DuploCloud platform.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 * import * as random from "@pulumi/random";
 *
 * // Ensure the 'dev' tenant is already created before creating the RDS instance.
 * const tenant = duplocloud.getTenant({
 *     name: "dev",
 * });
 * // Generate a random password for the RDS instance.
 * const mypassword = new random.index.Password("mypassword", {
 *     length: 16,
 *     special: false,
 * });
 * // Create an RDS instance.
 * const dev_db = new duplocloud.RdsInstance("dev-db", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "dev-db",
 *     engine: 0,
 *     engineVersion: "8.0.32",
 *     size: "db.t3.medium",
 *     masterUsername: "mysql_user1",
 *     masterPassword: mypassword.result,
 *     encryptStorage: true,
 *     backupRetentionPeriod: 7,
 * });
 * ```
 *
 * ### Provision an RDS instance using the MySQL engine named dev-db with engine version 5.7, allocated storage 50 GB and enable IAM auth and logging for this DB.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 * import * as random from "@pulumi/random";
 *
 * // Ensure the 'dev' tenant is already created before creating the RDS instance.
 * const tenant = duplocloud.getTenant({
 *     name: "dev",
 * });
 * // Generate a random password for the RDS instance.
 * const mypassword = new random.index.Password("mypassword", {
 *     length: 16,
 *     special: false,
 * });
 * // Create an RDS instance.
 * const dev_db = new duplocloud.RdsInstance("dev-db", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "dev-db",
 *     engine: 0,
 *     engineVersion: "5.7.44",
 *     size: "db.t3.medium",
 *     masterUsername: "mysql_user1",
 *     masterPassword: mypassword.result,
 *     encryptStorage: true,
 *     backupRetentionPeriod: 7,
 *     allocatedStorage: 50,
 *     enableIamAuth: true,
 *     enableLogging: true,
 * });
 * ```
 *
 * ### Create an RDS instance using the Aurora MySQL engine named mysql-db with engine version 5.7, allocated storage 100 GB and storage type io1 with number of iops 6000. It should skip the final snapshot and store the credentials in secrets manager.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 * import * as random from "@pulumi/random";
 *
 * // Ensure the 'dev' tenant is already created before creating the RDS instance.
 * const tenant = duplocloud.getTenant({
 *     name: "dev",
 * });
 * // Generate a random password for the RDS instance.
 * const mypassword = new random.index.Password("mypassword", {
 *     length: 16,
 *     special: false,
 * });
 * // Create an RDS instance.
 * const mysql_db = new duplocloud.RdsInstance("mysql-db", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     name: "mysql-db",
 *     engine: 8,
 *     engineVersion: "5.7.mysql_aurora.2.11.6",
 *     size: "db.t3.medium",
 *     masterUsername: "mysql_user1",
 *     masterPassword: mypassword.result,
 *     encryptStorage: true,
 *     backupRetentionPeriod: 7,
 *     allocatedStorage: 100,
 *     storageType: "io1",
 *     iops: 6000,
 *     skipFinalSnapshot: true,
 *     storeDetailsInSecretManager: true,
 * });
 * ```
 *
 * # Example for enabling performance insights in a RDS instance
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const mydb = new duplocloud.RdsInstance("mydb", {
 *     tenantId: tenant.id,
 *     name: "mydb1psql",
 *     engine: 1,
 *     engineVersion: "14.11",
 *     size: "db.t3.micro",
 *     masterUsername: "myuser",
 *     masterPassword: "Qaazwedd#1",
 *     encryptStorage: true,
 *     storeDetailsInSecretManager: true,
 *     enhancedMonitoring: 0,
 *     storageType: "gp2",
 *     performanceInsights: {
 *         enabled: true,
 *         retentionPeriod: 7,
 *     },
 * });
 * ```
 *
 * # Example for enabling performance insights in a RDS cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const mydb = new duplocloud.RdsInstance("mydb", {
 *     tenantId: tenant.id,
 *     name: "clust",
 *     engine: 8,
 *     engineVersion: "8.0.mysql_aurora.3.07.1",
 *     size: "db.r5.large",
 *     masterUsername: "myuser",
 *     masterPassword: "Qaazwedd#1",
 *     encryptStorage: true,
 *     storeDetailsInSecretManager: true,
 *     enhancedMonitoring: 0,
 *     performanceInsights: {
 *         enabled: true,
 *         retentionPeriod: 7,
 *     },
 * });
 * ```
 *
 * # Example for enabling performance insights in a Document DB
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const mydb = new duplocloud.RdsInstance("mydb", {
 *     tenantId: tenant.id,
 *     name: "doc",
 *     engine: 13,
 *     engineVersion: "3.6.0",
 *     size: "db.t3.medium",
 *     masterUsername: "myuser",
 *     masterPassword: "Qaazwedd#1",
 *     encryptStorage: true,
 *     storeDetailsInSecretManager: true,
 *     enhancedMonitoring: 0,
 *     performanceInsights: {
 *         enabled: true,
 *         retentionPeriod: 7,
 *     },
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Example for creating db using snapshot
 * const mydb = new duplocloud.RdsInstance("mydb", {
 *     tenantId: tenant.id,
 *     name: "mydbpsql",
 *     engine: 0,
 *     engineVersion: "5.7.44",
 *     size: "db.t3.medium",
 *     snapshotId: "rds:duplotest-snapdb-2024-12-17-07-00",
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing RDS instance
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *SHORTNAME* is the short name of the database (without the duplo prefix)
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/rdsInstance:RdsInstance mydb v2/subscriptions/*TENANT_ID*&#47;RDSDBInstance/*SHORTNAME*
 * ```
 *
 * Example to showcase use of parameter group in writer and read replica for aurora cluster instance
 *
 * resource "random_password" "mypassword" {
 *
 *   length  = 16
 *
 *   special = false
 *
 * }
 *
 * resource "duplocloud_rds_instance" "app" {
 *
 *   tenant_id      = data.duplocloud_tenant.tenant.id
 *
 *   name           = "writer1-sqlnew"
 *
 *   engine         = 8
 *
 *   engine_version = "5.7.mysql_aurora.2.11.5"
 *
 *   size           = "db.r5.large"
 *
 *   master_username              = "myuser"
 *
 *   master_password              = random_password.mypassword.result
 *
 *   encrypt_storage         = true
 *
 *   backup_retention_period = 10
 *
 *   db_name         =  "auroradb"
 *
 *   skip_final_snapshot = true
 *
 *   store_details_in_secret_manager = false
 *
 *   enhanced_monitoring = 0
 *
 *   availability_zone = "us-west-2b"
 *
 *   storage_type                    = "aurora"
 *
 *   cluster_parameter_group_name = "c-aurora-mysql"
 *
 *   parameter_group_name = "aurora-mysql-dbparam"
 *
 * }
 *
 * resource "duplocloud_rds_read_replica" "replica1" {
 *
 *   tenant_id          = duplocloud_rds_instance.app.tenant_id
 *
 *   name               = "aurora-replica-new"
 *
 *   size               = "db.r5.large"
 *
 *   cluster_identifier = duplocloud_rds_instance.app.cluster_identifier
 *
 *   availability_zone = "us-west-2a"
 *
 *   parameter_group_name = "aurora-mysql-dbparam"
 *
 *   engine_type=duplocloud_rds_instance.app.engine
 *
 * }
 *
 * Example to showcase use of parameter group in writer and read replica for standalone instance
 *
 * resource "duplocloud_rds_instance" "mydb" {
 *
 *   tenant_id      = data.duplocloud_tenant.tenant.id
 *
 *   name           = "tf-postgresql1"
 *
 *   engine         = 1// PostgreSQL
 *
 *   engine_version = "13.11"
 *
 *   size           = "db.t3.medium"
 *
 *   master_username = "myuser"
 *
 *   master_password = "Qaazwedd#1"
 *
 *   parameter_group_name = "psql13dbparam"
 *
 *   encrypt_storage                 = false
 *
 *   store_details_in_secret_manager = false
 *
 *   enhanced_monitoring             = 0
 *
 *   storage_type                    = "gp2"
 *
 * }
 *
 * resource "duplocloud_rds_read_replica" "replica" {
 *
 *   tenant_id          = duplocloud_rds_instance.mydb.tenant_id
 *
 *   name               = "postgresql-rep1"
 *
 *   size               = "db.t3.medium"
 *
 *   cluster_identifier = duplocloud_rds_instance.mydb.cluster_identifier
 *
 *   #availability_zone = "us-east-1b"
 *
 *   performance_insights {
 *
 *     enabled          = true
 *     
 *     retention_period = 31
 *
 *   }
 *
 *   engine_type=duplocloud_rds_instance.mydb.engine
 *
 *   parameter_group_name=duplocloud_rds_instance.mydb.parameter_group_name
 *
 * }
 */
export class RdsInstance extends pulumi.CustomResource {
    /**
     * Get an existing RdsInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdsInstanceState, opts?: pulumi.CustomResourceOptions): RdsInstance {
        return new RdsInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/rdsInstance:RdsInstance';

    /**
     * Returns true if the given object is an instance of RdsInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdsInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdsInstance.__pulumiType;
    }

    /**
     * (Required unless a `snapshotId` is provided) The allocated storage in gigabytes.
     */
    public readonly allocatedStorage!: pulumi.Output<number>;
    /**
     * The ARN of the RDS instance.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Specify a valid Availability Zone for the RDS primary instance (when Multi-AZ is disabled) or for the Aurora writer
     * instance. e.g. us-west-2a
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Specifies backup retention period between 1 and 35 day(s). Default backup retention period is 1 day.
     */
    public readonly backupRetentionPeriod!: pulumi.Output<number | undefined>;
    /**
     * The RDS Cluster Identifier
     */
    public /*out*/ readonly clusterIdentifier!: pulumi.Output<string>;
    /**
     * Parameter group associated with this instance's DB Cluster.
     */
    public readonly clusterParameterGroupName!: pulumi.Output<string>;
    /**
     * The name of the database to create when the DB instance is created. This is not applicable for update.
     */
    public readonly dbName!: pulumi.Output<string>;
    /**
     * Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group.
     */
    public readonly dbSubnetGroupName!: pulumi.Output<string>;
    /**
     * If the DB instance should have deletion protection enabled.The database can't be deleted when this value is set to
     * `true`. This setting is not applicable for document db cluster instance.
     */
    public readonly deletionProtection!: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not to enable the RDS IAM authentication.
     */
    public readonly enableIamAuth!: pulumi.Output<boolean>;
    /**
     * Whether or not to enable the RDS instance logging. This setting is not applicable for document db cluster instance.
     */
    public readonly enableLogging!: pulumi.Output<boolean>;
    /**
     * Whether or not to encrypt the RDS instance storage.
     */
    public readonly encryptStorage!: pulumi.Output<boolean | undefined>;
    /**
     * The endpoint of the RDS instance.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * The numerical index of database engine to use the for the RDS instance. Should be one of: - `0` : MySQL - `1` :
     * PostgreSQL - `2` : MsftSQL-Express - `3` : MsftSQL-Standard - `8` : Aurora-MySQL - `9` : Aurora-PostgreSQL - `10` :
     * MsftSQL-Web - `13` : DocumentDB - `14` : MariaDB - `16` : Aurora
     */
    public readonly engine!: pulumi.Output<number>;
    /**
     * The database engine version to use the for the RDS instance. If you don't know the available engine versions for your
     * RDS instance, you can use the [AWS
     * CLI](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-engine-versions.html) to retrieve a list.
     */
    public readonly engineVersion!: pulumi.Output<string>;
    /**
     * Interval to capture metrics in real time for the operating system (OS) that your Amazon RDS DB instance runs on.
     */
    public readonly enhancedMonitoring!: pulumi.Output<number | undefined>;
    /**
     * The DNS hostname of the RDS instance.
     */
    public /*out*/ readonly host!: pulumi.Output<string>;
    /**
     * The full name of the RDS instance.
     */
    public /*out*/ readonly identifier!: pulumi.Output<string>;
    /**
     * The current status of the RDS instance.
     */
    public /*out*/ readonly instanceStatus!: pulumi.Output<string>;
    /**
     * The IOPS (Input/Output Operations Per Second) value. Should be specified only if `storageType` is either io1 or gp3.
     */
    public readonly iops!: pulumi.Output<number>;
    /**
     * The globally unique identifier for the key.
     */
    public readonly kmsKeyId!: pulumi.Output<string>;
    /**
     * The master password of the RDS instance.
     */
    public readonly masterPassword!: pulumi.Output<string | undefined>;
    /**
     * The master username of the RDS instance.
     */
    public readonly masterUsername!: pulumi.Output<string>;
    /**
     * Specifies if the RDS instance is multi-AZ.
     */
    public readonly multiAz!: pulumi.Output<boolean>;
    /**
     * The short name of the RDS instance. Duplo will add a prefix to the name. You can retrieve the full name from the
     * `identifier` attribute.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A RDS parameter group name to apply to the RDS instance.
     */
    public readonly parameterGroupName!: pulumi.Output<string>;
    /**
     * Amazon RDS Performance Insights is a database performance tuning and monitoring feature that helps you quickly assess
     * the load on your database, and determine when and where to take action. Perfomance Insights get apply when enable is set
     * to true.
     */
    public readonly performanceInsights!: pulumi.Output<outputs.RdsInstancePerformanceInsights | undefined>;
    /**
     * The listening port of the RDS instance.
     */
    public /*out*/ readonly port!: pulumi.Output<number>;
    /**
     * The instance type of the RDS instance. See AWS documentation for the [available instance
     * types](https://aws.amazon.com/rds/instance-types/).
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * If the final snapshot should be taken. When set to true, the final snapshot will not be taken when the resource is
     * deleted.
     */
    public readonly skipFinalSnapshot!: pulumi.Output<boolean | undefined>;
    /**
     * A database snapshot to initialize the RDS instance from, at launch.
     */
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    /**
     * Storage type to be used for RDS instance storage. |Storage Type | Performance | Throughput | Descritpion |
     * |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
     * | | gp2 | 3 IOPS/GB, up to 16K IOPS | Up to 250 MB/s | General-purpose databases, small to medium workloads. 'gp2'
     * provides SSD-based storage with burstable IOPS | | gp3 | 3K to 16K IOPS | Up to 1,000 MB/s | Cost-effective,
     * customizable performance for a wide range of workloads. gp3 offers a more advanced and cost-effective version of gp2.
     * You can provision IOPS and throughput independently of storage size. | | io1 | Up to 256K IOPS | Up to 1,000 MB/s |
     * Mission-critical applications with high IOPS requirements. io1 provides provisioned IOPS, meaning you can define and
     * guarantee IOPS performance levels independently of storage capacity. | | standard | Variable, low IOPS | Low and
     * unpredictable | Low-cost, infrequent access, small databases, or test environments. Magnetic storage is the oldest and
     * least performant storage option. It is mainly used for low-cost applications with low performance demands. | | aurora |
     * Automatic scaling, up to 200K IOPS | Varies | High-performance, fault-tolerant, distributed storage for Amazon Aurora
     * databases. Aurora uses a unique distributed, fault-tolerant storage system that automatically replicates data across
     * multiple Availability Zones. | | aurora-iopt1 | Provisioned IOPS, similar to io1 | Varies | Aurora databases needing
     * guaranteed, high-performance IOPS. Aurora I/O-Optimized storage offers provisioned IOPS for Aurora clusters that require
     * consistently high performance for critical workloads. |
     */
    public readonly storageType!: pulumi.Output<string>;
    /**
     * Whether or not to store RDS details in the AWS secrets manager.
     */
    public readonly storeDetailsInSecretManager!: pulumi.Output<boolean | undefined>;
    /**
     * The GUID of the tenant that the RDS instance will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Serverless v2ScalingConfiguration min and max scalling capacity.
     */
    public readonly v2ScalingConfiguration!: pulumi.Output<outputs.RdsInstanceV2ScalingConfiguration | undefined>;

    /**
     * Create a RdsInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdsInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdsInstanceArgs | RdsInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdsInstanceState | undefined;
            resourceInputs["allocatedStorage"] = state ? state.allocatedStorage : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["backupRetentionPeriod"] = state ? state.backupRetentionPeriod : undefined;
            resourceInputs["clusterIdentifier"] = state ? state.clusterIdentifier : undefined;
            resourceInputs["clusterParameterGroupName"] = state ? state.clusterParameterGroupName : undefined;
            resourceInputs["dbName"] = state ? state.dbName : undefined;
            resourceInputs["dbSubnetGroupName"] = state ? state.dbSubnetGroupName : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["enableIamAuth"] = state ? state.enableIamAuth : undefined;
            resourceInputs["enableLogging"] = state ? state.enableLogging : undefined;
            resourceInputs["encryptStorage"] = state ? state.encryptStorage : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["enhancedMonitoring"] = state ? state.enhancedMonitoring : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["instanceStatus"] = state ? state.instanceStatus : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["masterPassword"] = state ? state.masterPassword : undefined;
            resourceInputs["masterUsername"] = state ? state.masterUsername : undefined;
            resourceInputs["multiAz"] = state ? state.multiAz : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            resourceInputs["performanceInsights"] = state ? state.performanceInsights : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["skipFinalSnapshot"] = state ? state.skipFinalSnapshot : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["storeDetailsInSecretManager"] = state ? state.storeDetailsInSecretManager : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["v2ScalingConfiguration"] = state ? state.v2ScalingConfiguration : undefined;
        } else {
            const args = argsOrState as RdsInstanceArgs | undefined;
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["allocatedStorage"] = args ? args.allocatedStorage : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["backupRetentionPeriod"] = args ? args.backupRetentionPeriod : undefined;
            resourceInputs["clusterParameterGroupName"] = args ? args.clusterParameterGroupName : undefined;
            resourceInputs["dbName"] = args ? args.dbName : undefined;
            resourceInputs["dbSubnetGroupName"] = args ? args.dbSubnetGroupName : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["enableIamAuth"] = args ? args.enableIamAuth : undefined;
            resourceInputs["enableLogging"] = args ? args.enableLogging : undefined;
            resourceInputs["encryptStorage"] = args ? args.encryptStorage : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["enhancedMonitoring"] = args ? args.enhancedMonitoring : undefined;
            resourceInputs["iops"] = args ? args.iops : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["masterPassword"] = args?.masterPassword ? pulumi.secret(args.masterPassword) : undefined;
            resourceInputs["masterUsername"] = args ? args.masterUsername : undefined;
            resourceInputs["multiAz"] = args ? args.multiAz : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            resourceInputs["performanceInsights"] = args ? args.performanceInsights : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["skipFinalSnapshot"] = args ? args.skipFinalSnapshot : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["storeDetailsInSecretManager"] = args ? args.storeDetailsInSecretManager : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["v2ScalingConfiguration"] = args ? args.v2ScalingConfiguration : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["clusterIdentifier"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["identifier"] = undefined /*out*/;
            resourceInputs["instanceStatus"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["masterPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RdsInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RdsInstance resources.
 */
export interface RdsInstanceState {
    /**
     * (Required unless a `snapshotId` is provided) The allocated storage in gigabytes.
     */
    allocatedStorage?: pulumi.Input<number>;
    /**
     * The ARN of the RDS instance.
     */
    arn?: pulumi.Input<string>;
    /**
     * Specify a valid Availability Zone for the RDS primary instance (when Multi-AZ is disabled) or for the Aurora writer
     * instance. e.g. us-west-2a
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specifies backup retention period between 1 and 35 day(s). Default backup retention period is 1 day.
     */
    backupRetentionPeriod?: pulumi.Input<number>;
    /**
     * The RDS Cluster Identifier
     */
    clusterIdentifier?: pulumi.Input<string>;
    /**
     * Parameter group associated with this instance's DB Cluster.
     */
    clusterParameterGroupName?: pulumi.Input<string>;
    /**
     * The name of the database to create when the DB instance is created. This is not applicable for update.
     */
    dbName?: pulumi.Input<string>;
    /**
     * Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group.
     */
    dbSubnetGroupName?: pulumi.Input<string>;
    /**
     * If the DB instance should have deletion protection enabled.The database can't be deleted when this value is set to
     * `true`. This setting is not applicable for document db cluster instance.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Whether or not to enable the RDS IAM authentication.
     */
    enableIamAuth?: pulumi.Input<boolean>;
    /**
     * Whether or not to enable the RDS instance logging. This setting is not applicable for document db cluster instance.
     */
    enableLogging?: pulumi.Input<boolean>;
    /**
     * Whether or not to encrypt the RDS instance storage.
     */
    encryptStorage?: pulumi.Input<boolean>;
    /**
     * The endpoint of the RDS instance.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The numerical index of database engine to use the for the RDS instance. Should be one of: - `0` : MySQL - `1` :
     * PostgreSQL - `2` : MsftSQL-Express - `3` : MsftSQL-Standard - `8` : Aurora-MySQL - `9` : Aurora-PostgreSQL - `10` :
     * MsftSQL-Web - `13` : DocumentDB - `14` : MariaDB - `16` : Aurora
     */
    engine?: pulumi.Input<number>;
    /**
     * The database engine version to use the for the RDS instance. If you don't know the available engine versions for your
     * RDS instance, you can use the [AWS
     * CLI](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-engine-versions.html) to retrieve a list.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * Interval to capture metrics in real time for the operating system (OS) that your Amazon RDS DB instance runs on.
     */
    enhancedMonitoring?: pulumi.Input<number>;
    /**
     * The DNS hostname of the RDS instance.
     */
    host?: pulumi.Input<string>;
    /**
     * The full name of the RDS instance.
     */
    identifier?: pulumi.Input<string>;
    /**
     * The current status of the RDS instance.
     */
    instanceStatus?: pulumi.Input<string>;
    /**
     * The IOPS (Input/Output Operations Per Second) value. Should be specified only if `storageType` is either io1 or gp3.
     */
    iops?: pulumi.Input<number>;
    /**
     * The globally unique identifier for the key.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The master password of the RDS instance.
     */
    masterPassword?: pulumi.Input<string>;
    /**
     * The master username of the RDS instance.
     */
    masterUsername?: pulumi.Input<string>;
    /**
     * Specifies if the RDS instance is multi-AZ.
     */
    multiAz?: pulumi.Input<boolean>;
    /**
     * The short name of the RDS instance. Duplo will add a prefix to the name. You can retrieve the full name from the
     * `identifier` attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * A RDS parameter group name to apply to the RDS instance.
     */
    parameterGroupName?: pulumi.Input<string>;
    /**
     * Amazon RDS Performance Insights is a database performance tuning and monitoring feature that helps you quickly assess
     * the load on your database, and determine when and where to take action. Perfomance Insights get apply when enable is set
     * to true.
     */
    performanceInsights?: pulumi.Input<inputs.RdsInstancePerformanceInsights>;
    /**
     * The listening port of the RDS instance.
     */
    port?: pulumi.Input<number>;
    /**
     * The instance type of the RDS instance. See AWS documentation for the [available instance
     * types](https://aws.amazon.com/rds/instance-types/).
     */
    size?: pulumi.Input<string>;
    /**
     * If the final snapshot should be taken. When set to true, the final snapshot will not be taken when the resource is
     * deleted.
     */
    skipFinalSnapshot?: pulumi.Input<boolean>;
    /**
     * A database snapshot to initialize the RDS instance from, at launch.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * Storage type to be used for RDS instance storage. |Storage Type | Performance | Throughput | Descritpion |
     * |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
     * | | gp2 | 3 IOPS/GB, up to 16K IOPS | Up to 250 MB/s | General-purpose databases, small to medium workloads. 'gp2'
     * provides SSD-based storage with burstable IOPS | | gp3 | 3K to 16K IOPS | Up to 1,000 MB/s | Cost-effective,
     * customizable performance for a wide range of workloads. gp3 offers a more advanced and cost-effective version of gp2.
     * You can provision IOPS and throughput independently of storage size. | | io1 | Up to 256K IOPS | Up to 1,000 MB/s |
     * Mission-critical applications with high IOPS requirements. io1 provides provisioned IOPS, meaning you can define and
     * guarantee IOPS performance levels independently of storage capacity. | | standard | Variable, low IOPS | Low and
     * unpredictable | Low-cost, infrequent access, small databases, or test environments. Magnetic storage is the oldest and
     * least performant storage option. It is mainly used for low-cost applications with low performance demands. | | aurora |
     * Automatic scaling, up to 200K IOPS | Varies | High-performance, fault-tolerant, distributed storage for Amazon Aurora
     * databases. Aurora uses a unique distributed, fault-tolerant storage system that automatically replicates data across
     * multiple Availability Zones. | | aurora-iopt1 | Provisioned IOPS, similar to io1 | Varies | Aurora databases needing
     * guaranteed, high-performance IOPS. Aurora I/O-Optimized storage offers provisioned IOPS for Aurora clusters that require
     * consistently high performance for critical workloads. |
     */
    storageType?: pulumi.Input<string>;
    /**
     * Whether or not to store RDS details in the AWS secrets manager.
     */
    storeDetailsInSecretManager?: pulumi.Input<boolean>;
    /**
     * The GUID of the tenant that the RDS instance will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Serverless v2ScalingConfiguration min and max scalling capacity.
     */
    v2ScalingConfiguration?: pulumi.Input<inputs.RdsInstanceV2ScalingConfiguration>;
}

/**
 * The set of arguments for constructing a RdsInstance resource.
 */
export interface RdsInstanceArgs {
    /**
     * (Required unless a `snapshotId` is provided) The allocated storage in gigabytes.
     */
    allocatedStorage?: pulumi.Input<number>;
    /**
     * Specify a valid Availability Zone for the RDS primary instance (when Multi-AZ is disabled) or for the Aurora writer
     * instance. e.g. us-west-2a
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specifies backup retention period between 1 and 35 day(s). Default backup retention period is 1 day.
     */
    backupRetentionPeriod?: pulumi.Input<number>;
    /**
     * Parameter group associated with this instance's DB Cluster.
     */
    clusterParameterGroupName?: pulumi.Input<string>;
    /**
     * The name of the database to create when the DB instance is created. This is not applicable for update.
     */
    dbName?: pulumi.Input<string>;
    /**
     * Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group.
     */
    dbSubnetGroupName?: pulumi.Input<string>;
    /**
     * If the DB instance should have deletion protection enabled.The database can't be deleted when this value is set to
     * `true`. This setting is not applicable for document db cluster instance.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Whether or not to enable the RDS IAM authentication.
     */
    enableIamAuth?: pulumi.Input<boolean>;
    /**
     * Whether or not to enable the RDS instance logging. This setting is not applicable for document db cluster instance.
     */
    enableLogging?: pulumi.Input<boolean>;
    /**
     * Whether or not to encrypt the RDS instance storage.
     */
    encryptStorage?: pulumi.Input<boolean>;
    /**
     * The numerical index of database engine to use the for the RDS instance. Should be one of: - `0` : MySQL - `1` :
     * PostgreSQL - `2` : MsftSQL-Express - `3` : MsftSQL-Standard - `8` : Aurora-MySQL - `9` : Aurora-PostgreSQL - `10` :
     * MsftSQL-Web - `13` : DocumentDB - `14` : MariaDB - `16` : Aurora
     */
    engine: pulumi.Input<number>;
    /**
     * The database engine version to use the for the RDS instance. If you don't know the available engine versions for your
     * RDS instance, you can use the [AWS
     * CLI](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-engine-versions.html) to retrieve a list.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * Interval to capture metrics in real time for the operating system (OS) that your Amazon RDS DB instance runs on.
     */
    enhancedMonitoring?: pulumi.Input<number>;
    /**
     * The IOPS (Input/Output Operations Per Second) value. Should be specified only if `storageType` is either io1 or gp3.
     */
    iops?: pulumi.Input<number>;
    /**
     * The globally unique identifier for the key.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The master password of the RDS instance.
     */
    masterPassword?: pulumi.Input<string>;
    /**
     * The master username of the RDS instance.
     */
    masterUsername?: pulumi.Input<string>;
    /**
     * Specifies if the RDS instance is multi-AZ.
     */
    multiAz?: pulumi.Input<boolean>;
    /**
     * The short name of the RDS instance. Duplo will add a prefix to the name. You can retrieve the full name from the
     * `identifier` attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * A RDS parameter group name to apply to the RDS instance.
     */
    parameterGroupName?: pulumi.Input<string>;
    /**
     * Amazon RDS Performance Insights is a database performance tuning and monitoring feature that helps you quickly assess
     * the load on your database, and determine when and where to take action. Perfomance Insights get apply when enable is set
     * to true.
     */
    performanceInsights?: pulumi.Input<inputs.RdsInstancePerformanceInsights>;
    /**
     * The instance type of the RDS instance. See AWS documentation for the [available instance
     * types](https://aws.amazon.com/rds/instance-types/).
     */
    size: pulumi.Input<string>;
    /**
     * If the final snapshot should be taken. When set to true, the final snapshot will not be taken when the resource is
     * deleted.
     */
    skipFinalSnapshot?: pulumi.Input<boolean>;
    /**
     * A database snapshot to initialize the RDS instance from, at launch.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * Storage type to be used for RDS instance storage. |Storage Type | Performance | Throughput | Descritpion |
     * |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
     * | | gp2 | 3 IOPS/GB, up to 16K IOPS | Up to 250 MB/s | General-purpose databases, small to medium workloads. 'gp2'
     * provides SSD-based storage with burstable IOPS | | gp3 | 3K to 16K IOPS | Up to 1,000 MB/s | Cost-effective,
     * customizable performance for a wide range of workloads. gp3 offers a more advanced and cost-effective version of gp2.
     * You can provision IOPS and throughput independently of storage size. | | io1 | Up to 256K IOPS | Up to 1,000 MB/s |
     * Mission-critical applications with high IOPS requirements. io1 provides provisioned IOPS, meaning you can define and
     * guarantee IOPS performance levels independently of storage capacity. | | standard | Variable, low IOPS | Low and
     * unpredictable | Low-cost, infrequent access, small databases, or test environments. Magnetic storage is the oldest and
     * least performant storage option. It is mainly used for low-cost applications with low performance demands. | | aurora |
     * Automatic scaling, up to 200K IOPS | Varies | High-performance, fault-tolerant, distributed storage for Amazon Aurora
     * databases. Aurora uses a unique distributed, fault-tolerant storage system that automatically replicates data across
     * multiple Availability Zones. | | aurora-iopt1 | Provisioned IOPS, similar to io1 | Varies | Aurora databases needing
     * guaranteed, high-performance IOPS. Aurora I/O-Optimized storage offers provisioned IOPS for Aurora clusters that require
     * consistently high performance for critical workloads. |
     */
    storageType?: pulumi.Input<string>;
    /**
     * Whether or not to store RDS details in the AWS secrets manager.
     */
    storeDetailsInSecretManager?: pulumi.Input<boolean>;
    /**
     * The GUID of the tenant that the RDS instance will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Serverless v2ScalingConfiguration min and max scalling capacity.
     */
    v2ScalingConfiguration?: pulumi.Input<inputs.RdsInstanceV2ScalingConfiguration>;
}
