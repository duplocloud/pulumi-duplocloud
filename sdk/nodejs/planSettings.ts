// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.PlanSettings` manages an plan settings in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myplanSettings = new duplocloud.PlanSettings("myplanSettings", {
 *     planId: "myplan",
 *     unrestrictedExtLb: true,
 *     dnsSetting: {
 *         domainId: "Z02791752705G9GHH8CYF",
 *         internalDnsSuffix: ".test.duplocloud.net",
 *         externalDnsSuffix: ".test.duplocloud.net",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import duplocloud:index/planSettings:PlanSettings myplanSettings PLAN_ID
 * ```
 */
export class PlanSettings extends pulumi.CustomResource {
    /**
     * Get an existing PlanSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlanSettingsState, opts?: pulumi.CustomResourceOptions): PlanSettings {
        return new PlanSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/planSettings:PlanSettings';

    /**
     * Returns true if the given object is an instance of PlanSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlanSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlanSettings.__pulumiType;
    }

    /**
     * A complete list of metadata for this plan, even ones not being managed by this resource.
     */
    public /*out*/ readonly allMetadatas!: pulumi.Output<outputs.PlanSettingsAllMetadata[]>;
    public readonly dnsSetting!: pulumi.Output<outputs.PlanSettingsDnsSetting>;
    /**
     * A list of metadata for the plan to manage.
     */
    public readonly metadatas!: pulumi.Output<outputs.PlanSettingsMetadata[] | undefined>;
    /**
     * The ID of the plan to configure.
     */
    public readonly planId!: pulumi.Output<string>;
    /**
     * A list of metadata being managed by this resource.
     */
    public readonly specifiedMetadatas!: pulumi.Output<string[]>;
    public readonly unrestrictedExtLb!: pulumi.Output<boolean>;

    /**
     * Create a PlanSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlanSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlanSettingsArgs | PlanSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlanSettingsState | undefined;
            resourceInputs["allMetadatas"] = state ? state.allMetadatas : undefined;
            resourceInputs["dnsSetting"] = state ? state.dnsSetting : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["planId"] = state ? state.planId : undefined;
            resourceInputs["specifiedMetadatas"] = state ? state.specifiedMetadatas : undefined;
            resourceInputs["unrestrictedExtLb"] = state ? state.unrestrictedExtLb : undefined;
        } else {
            const args = argsOrState as PlanSettingsArgs | undefined;
            if ((!args || args.planId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'planId'");
            }
            resourceInputs["dnsSetting"] = args ? args.dnsSetting : undefined;
            resourceInputs["metadatas"] = args ? args.metadatas : undefined;
            resourceInputs["planId"] = args ? args.planId : undefined;
            resourceInputs["specifiedMetadatas"] = args ? args.specifiedMetadatas : undefined;
            resourceInputs["unrestrictedExtLb"] = args ? args.unrestrictedExtLb : undefined;
            resourceInputs["allMetadatas"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlanSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PlanSettings resources.
 */
export interface PlanSettingsState {
    /**
     * A complete list of metadata for this plan, even ones not being managed by this resource.
     */
    allMetadatas?: pulumi.Input<pulumi.Input<inputs.PlanSettingsAllMetadata>[]>;
    dnsSetting?: pulumi.Input<inputs.PlanSettingsDnsSetting>;
    /**
     * A list of metadata for the plan to manage.
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.PlanSettingsMetadata>[]>;
    /**
     * The ID of the plan to configure.
     */
    planId?: pulumi.Input<string>;
    /**
     * A list of metadata being managed by this resource.
     */
    specifiedMetadatas?: pulumi.Input<pulumi.Input<string>[]>;
    unrestrictedExtLb?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PlanSettings resource.
 */
export interface PlanSettingsArgs {
    dnsSetting?: pulumi.Input<inputs.PlanSettingsDnsSetting>;
    /**
     * A list of metadata for the plan to manage.
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.PlanSettingsMetadata>[]>;
    /**
     * The ID of the plan to configure.
     */
    planId: pulumi.Input<string>;
    /**
     * A list of metadata being managed by this resource.
     */
    specifiedMetadatas?: pulumi.Input<pulumi.Input<string>[]>;
    unrestrictedExtLb?: pulumi.Input<boolean>;
}
