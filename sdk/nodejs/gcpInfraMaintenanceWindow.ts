// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.GcpInfraMaintenanceWindow` applies maintenance window to an gcp infrastructure
 *
 * ## Import
 *
 * Example: Importing an existing gcp infra maintenace window resource
 *
 *  - *INFRANAME* Name of the infrastructure
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/gcpInfraMaintenanceWindow:GcpInfraMaintenanceWindow infra maintenance-window/*INFRANAME*
 * ```
 */
export class GcpInfraMaintenanceWindow extends pulumi.CustomResource {
    /**
     * Get an existing GcpInfraMaintenanceWindow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GcpInfraMaintenanceWindowState, opts?: pulumi.CustomResourceOptions): GcpInfraMaintenanceWindow {
        return new GcpInfraMaintenanceWindow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/gcpInfraMaintenanceWindow:GcpInfraMaintenanceWindow';

    /**
     * Returns true if the given object is an instance of GcpInfraMaintenanceWindow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GcpInfraMaintenanceWindow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GcpInfraMaintenanceWindow.__pulumiType;
    }

    /**
     * Time window specified for daily maintenance operations. Specify 'start_time 'in RFC3339 format HH:MM, where HH : [00-23] and MM : [00-59] GMT
     */
    public readonly dailyMaintenanceStartTime!: pulumi.Output<string | undefined>;
    /**
     * Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows. A cluster can have up to 20 maintenance exclusions at a time
     */
    public readonly exclusions!: pulumi.Output<outputs.GcpInfraMaintenanceWindowExclusion[] | undefined>;
    /**
     * The name of the infrastructure where maintenance windows need to be scheduled.
     */
    public readonly infraName!: pulumi.Output<string>;
    public readonly recurringWindow!: pulumi.Output<outputs.GcpInfraMaintenanceWindowRecurringWindow | undefined>;

    /**
     * Create a GcpInfraMaintenanceWindow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GcpInfraMaintenanceWindowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GcpInfraMaintenanceWindowArgs | GcpInfraMaintenanceWindowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GcpInfraMaintenanceWindowState | undefined;
            resourceInputs["dailyMaintenanceStartTime"] = state ? state.dailyMaintenanceStartTime : undefined;
            resourceInputs["exclusions"] = state ? state.exclusions : undefined;
            resourceInputs["infraName"] = state ? state.infraName : undefined;
            resourceInputs["recurringWindow"] = state ? state.recurringWindow : undefined;
        } else {
            const args = argsOrState as GcpInfraMaintenanceWindowArgs | undefined;
            if ((!args || args.infraName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'infraName'");
            }
            resourceInputs["dailyMaintenanceStartTime"] = args ? args.dailyMaintenanceStartTime : undefined;
            resourceInputs["exclusions"] = args ? args.exclusions : undefined;
            resourceInputs["infraName"] = args ? args.infraName : undefined;
            resourceInputs["recurringWindow"] = args ? args.recurringWindow : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GcpInfraMaintenanceWindow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GcpInfraMaintenanceWindow resources.
 */
export interface GcpInfraMaintenanceWindowState {
    /**
     * Time window specified for daily maintenance operations. Specify 'start_time 'in RFC3339 format HH:MM, where HH : [00-23] and MM : [00-59] GMT
     */
    dailyMaintenanceStartTime?: pulumi.Input<string>;
    /**
     * Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows. A cluster can have up to 20 maintenance exclusions at a time
     */
    exclusions?: pulumi.Input<pulumi.Input<inputs.GcpInfraMaintenanceWindowExclusion>[]>;
    /**
     * The name of the infrastructure where maintenance windows need to be scheduled.
     */
    infraName?: pulumi.Input<string>;
    recurringWindow?: pulumi.Input<inputs.GcpInfraMaintenanceWindowRecurringWindow>;
}

/**
 * The set of arguments for constructing a GcpInfraMaintenanceWindow resource.
 */
export interface GcpInfraMaintenanceWindowArgs {
    /**
     * Time window specified for daily maintenance operations. Specify 'start_time 'in RFC3339 format HH:MM, where HH : [00-23] and MM : [00-59] GMT
     */
    dailyMaintenanceStartTime?: pulumi.Input<string>;
    /**
     * Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows. A cluster can have up to 20 maintenance exclusions at a time
     */
    exclusions?: pulumi.Input<pulumi.Input<inputs.GcpInfraMaintenanceWindowExclusion>[]>;
    /**
     * The name of the infrastructure where maintenance windows need to be scheduled.
     */
    infraName: pulumi.Input<string>;
    recurringWindow?: pulumi.Input<inputs.GcpInfraMaintenanceWindowRecurringWindow>;
}
