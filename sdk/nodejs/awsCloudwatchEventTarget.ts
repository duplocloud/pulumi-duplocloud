// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.AwsCloudwatchEventTarget` manages an AWS cloudwatch event target in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const duplo_app = new duplocloud.Tenant("duplo-app", {
 *     accountName: "duplo-app",
 *     planId: "default",
 * });
 * const cwErule = new duplocloud.AwsCloudwatchEventRule("cw_erule", {
 *     tenantId: duplo_app.tenantId,
 *     name: "cw_erule",
 *     description: "this is a test cloudwatch event rule.",
 *     scheduleExpression: "rate(10 minutes)",
 *     state: "DISABLED",
 *     tags: [
 *         {
 *             key: "CreatedBy",
 *             value: "Duplo",
 *         },
 *         {
 *             key: "CreatedFrom",
 *             value: "Duplo",
 *         },
 *     ],
 * });
 * const cwEtarget1 = new duplocloud.AwsCloudwatchEventTarget("cw_etarget1", {
 *     tenantId: duplo_app.tenantId,
 *     ruleName: cwErule.fullname,
 *     targetArn: "arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag",
 *     targetId: "lamda-tst1",
 * });
 * const cwEtarget2 = new duplocloud.AwsCloudwatchEventTarget("cw_etarget2", {
 *     tenantId: duplo_app.tenantId,
 *     ruleName: cwErule.fullname,
 *     targetArn: "arn:aws:lambda:us-west-2:294468937448:function:orphan-resource-tag",
 *     targetId: "lamda-tst2",
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing AWS cloudwatch event target
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *FRIENDLY_NAME* is the duploservices-<account_name>-<name_of_event_rule>
 *
 *  - *TARGET_ID* The unique target assignment ID.
 *
 * ```sh
 * $ pulumi import duplocloud:index/awsCloudwatchEventTarget:AwsCloudwatchEventTarget myEventTarget *TENANT_ID*&#47;*FRIENDLY_NAME*&#47;*TARGET_ID*
 * ```
 */
export class AwsCloudwatchEventTarget extends pulumi.CustomResource {
    /**
     * Get an existing AwsCloudwatchEventTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsCloudwatchEventTargetState, opts?: pulumi.CustomResourceOptions): AwsCloudwatchEventTarget {
        return new AwsCloudwatchEventTarget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/awsCloudwatchEventTarget:AwsCloudwatchEventTarget';

    /**
     * Returns true if the given object is an instance of AwsCloudwatchEventTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsCloudwatchEventTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsCloudwatchEventTarget.__pulumiType;
    }

    /**
     * The event bus to associate with the rule. If you omit this, the default event bus is used.
     */
    public readonly eventBusName!: pulumi.Output<string>;
    /**
     * Valid JSON text passed to the target.
     */
    public readonly input!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) associated with the role that is used for target invocation.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * The name of the rule you want to add targets to.
     */
    public readonly ruleName!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the target.
     */
    public readonly targetArn!: pulumi.Output<string>;
    /**
     * The unique target assignment ID.
     */
    public readonly targetId!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the cloudwatch event target will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a AwsCloudwatchEventTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsCloudwatchEventTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsCloudwatchEventTargetArgs | AwsCloudwatchEventTargetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsCloudwatchEventTargetState | undefined;
            resourceInputs["eventBusName"] = state ? state.eventBusName : undefined;
            resourceInputs["input"] = state ? state.input : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["targetArn"] = state ? state.targetArn : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as AwsCloudwatchEventTargetArgs | undefined;
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            if ((!args || args.targetArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetArn'");
            }
            if ((!args || args.targetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["eventBusName"] = args ? args.eventBusName : undefined;
            resourceInputs["input"] = args ? args.input : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["targetArn"] = args ? args.targetArn : undefined;
            resourceInputs["targetId"] = args ? args.targetId : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsCloudwatchEventTarget.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsCloudwatchEventTarget resources.
 */
export interface AwsCloudwatchEventTargetState {
    /**
     * The event bus to associate with the rule. If you omit this, the default event bus is used.
     */
    eventBusName?: pulumi.Input<string>;
    /**
     * Valid JSON text passed to the target.
     */
    input?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) associated with the role that is used for target invocation.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The name of the rule you want to add targets to.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the target.
     */
    targetArn?: pulumi.Input<string>;
    /**
     * The unique target assignment ID.
     */
    targetId?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the cloudwatch event target will be created in.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsCloudwatchEventTarget resource.
 */
export interface AwsCloudwatchEventTargetArgs {
    /**
     * The event bus to associate with the rule. If you omit this, the default event bus is used.
     */
    eventBusName?: pulumi.Input<string>;
    /**
     * Valid JSON text passed to the target.
     */
    input?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) associated with the role that is used for target invocation.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The name of the rule you want to add targets to.
     */
    ruleName: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the target.
     */
    targetArn: pulumi.Input<string>;
    /**
     * The unique target assignment ID.
     */
    targetId: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the cloudwatch event target will be created in.
     */
    tenantId: pulumi.Input<string>;
}
