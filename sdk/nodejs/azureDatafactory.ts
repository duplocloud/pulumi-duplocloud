// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.AzureDatafactory` manages datafactory in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const df = new duplocloud.AzureDatafactory("df", {
 *     tenantId: myapp.tenantId,
 *     name: "tf-dft2",
 *     publicAccess: true,
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing Azure Datafactory
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *NAME* is the name of the the Azure Datafactory
 *
 * # 
 *
 * import duplocloud_azure_datafactory.df *TENANT_ID*&#47;datafactory/*NAME*
 */
export class AzureDatafactory extends pulumi.CustomResource {
    /**
     * Get an existing AzureDatafactory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureDatafactoryState, opts?: pulumi.CustomResourceOptions): AzureDatafactory {
        return new AzureDatafactory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/azureDatafactory:AzureDatafactory';

    /**
     * Returns true if the given object is an instance of AzureDatafactory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureDatafactory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureDatafactory.__pulumiType;
    }

    public /*out*/ readonly etag!: pulumi.Output<string>;
    public /*out*/ readonly location!: pulumi.Output<string>;
    /**
     * The name of the datafactory
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable or disable public access to datafactory Defaults to `false`.
     */
    public readonly publicAccess!: pulumi.Output<boolean | undefined>;
    /**
     * The GUID of the tenant that the azure node pool will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a AzureDatafactory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureDatafactoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureDatafactoryArgs | AzureDatafactoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureDatafactoryState | undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicAccess"] = state ? state.publicAccess : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as AzureDatafactoryArgs | undefined;
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicAccess"] = args ? args.publicAccess : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureDatafactory.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AzureDatafactory resources.
 */
export interface AzureDatafactoryState {
    etag?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * The name of the datafactory
     */
    name?: pulumi.Input<string>;
    /**
     * Enable or disable public access to datafactory Defaults to `false`.
     */
    publicAccess?: pulumi.Input<boolean>;
    /**
     * The GUID of the tenant that the azure node pool will be created in.
     */
    tenantId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AzureDatafactory resource.
 */
export interface AzureDatafactoryArgs {
    /**
     * The name of the datafactory
     */
    name?: pulumi.Input<string>;
    /**
     * Enable or disable public access to datafactory Defaults to `false`.
     */
    publicAccess?: pulumi.Input<boolean>;
    /**
     * The GUID of the tenant that the azure node pool will be created in.
     */
    tenantId: pulumi.Input<string>;
}
