// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.DuploServiceLbconfigs` manages load balancer configuration(s) for a container-based service in Duplo.
 *
 * NOTE: For Amazon ECS services, see the `duplocloud.EcsService` resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * // Deploy NGINX using Duplo's native container agent, and configure a load balancer.
 * const myservice = new duplocloud.DuploService("myservice", {
 *     tenantId: myapp.tenantId,
 *     name: "myservice",
 *     agentPlatform: 0,
 *     dockerImage: "nginx:latest",
 *     replicas: 1,
 * });
 * const myserviceDuploServiceLbconfigs = new duplocloud.DuploServiceLbconfigs("myservice", {
 *     tenantId: myservice.tenantId,
 *     replicationControllerName: myservice.name,
 *     lbconfigs: [{
 *         externalPort: 80,
 *         healthCheckUrl: "/",
 *         isNative: false,
 *         lbType: 1,
 *         port: "80",
 *         protocol: "http",
 *         healthCheck: {
 *             healthyThreshold: 4,
 *             unhealthyThreshold: 4,
 *             timeout: 50,
 *             interval: 30,
 *             httpSuccessCodes: "200-399",
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing service's load balancer configurations
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *NAME* is the name of the service
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/duploServiceLbconfigs:DuploServiceLbconfigs myservice v2/subscriptions/*TENANT_ID*&#47;ServiceLBConfigsV2/*NAME*
 * ```
 */
export class DuploServiceLbconfigs extends pulumi.CustomResource {
    /**
     * Get an existing DuploServiceLbconfigs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DuploServiceLbconfigsState, opts?: pulumi.CustomResourceOptions): DuploServiceLbconfigs {
        return new DuploServiceLbconfigs(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/duploServiceLbconfigs:DuploServiceLbconfigs';

    /**
     * Returns true if the given object is an instance of DuploServiceLbconfigs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DuploServiceLbconfigs {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DuploServiceLbconfigs.__pulumiType;
    }

    /**
     * The load balancer ARN.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly lbconfigs!: pulumi.Output<outputs.DuploServiceLbconfigsLbconfig[]>;
    /**
     * The name of the duplo service.
     */
    public readonly replicationControllerName!: pulumi.Output<string>;
    /**
     * The load balancer's current status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that hosts the duplo service.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Whether or not to wait until Duplo considers all of the load balancers ready
     */
    public readonly waitUntilReady!: pulumi.Output<boolean | undefined>;

    /**
     * Create a DuploServiceLbconfigs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DuploServiceLbconfigsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DuploServiceLbconfigsArgs | DuploServiceLbconfigsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DuploServiceLbconfigsState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["lbconfigs"] = state ? state.lbconfigs : undefined;
            resourceInputs["replicationControllerName"] = state ? state.replicationControllerName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["waitUntilReady"] = state ? state.waitUntilReady : undefined;
        } else {
            const args = argsOrState as DuploServiceLbconfigsArgs | undefined;
            if ((!args || args.lbconfigs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lbconfigs'");
            }
            if ((!args || args.replicationControllerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationControllerName'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["lbconfigs"] = args ? args.lbconfigs : undefined;
            resourceInputs["replicationControllerName"] = args ? args.replicationControllerName : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["waitUntilReady"] = args ? args.waitUntilReady : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DuploServiceLbconfigs.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DuploServiceLbconfigs resources.
 */
export interface DuploServiceLbconfigsState {
    /**
     * The load balancer ARN.
     */
    arn?: pulumi.Input<string>;
    lbconfigs?: pulumi.Input<pulumi.Input<inputs.DuploServiceLbconfigsLbconfig>[]>;
    /**
     * The name of the duplo service.
     */
    replicationControllerName?: pulumi.Input<string>;
    /**
     * The load balancer's current status.
     */
    status?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that hosts the duplo service.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Whether or not to wait until Duplo considers all of the load balancers ready
     */
    waitUntilReady?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DuploServiceLbconfigs resource.
 */
export interface DuploServiceLbconfigsArgs {
    lbconfigs: pulumi.Input<pulumi.Input<inputs.DuploServiceLbconfigsLbconfig>[]>;
    /**
     * The name of the duplo service.
     */
    replicationControllerName: pulumi.Input<string>;
    /**
     * The GUID of the tenant that hosts the duplo service.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Whether or not to wait until Duplo considers all of the load balancers ready
     */
    waitUntilReady?: pulumi.Input<boolean>;
}
