// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### Create a DuploCloud tenant named 'prod'.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Before creating a tenant, you must first set up the infrastructure. Below is the resource for creating the infrastructure.
 * const infra = new duplocloud.Infrastructure("infra", {
 *     infraName: "prod",
 *     cloud: 0,
 *     region: "us-west-2",
 *     enableK8Cluster: false,
 *     addressPrefix: "10.11.0.0/16",
 * });
 * // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "prod",
 *     planId: infra.infraName,
 * });
 * ```
 *
 * ### Create a DuploCloud tenant named 'prod' inside the following prod infra.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const infra = new duplocloud.Infrastructure("infra", {
 *     infraName: "prod",
 *     cloud: 0,
 *     region: "us-west-2",
 *     enableK8Cluster: false,
 *     addressPrefix: "10.11.0.0/16",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource.
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "prod",
 *     planId: infra.infraName,
 * });
 * ```
 *
 * ### Create a DuploCloud tenant named 'dev' within the 'nonprod' infrastructure.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Ensure the 'nonprod' infrastructure is already created before setting up the tenant.
 * const infra = duplocloud.getInfrastructure({
 *     infraName: "nonprod",
 * });
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "dev",
 *     planId: infra.then(infra => infra.infraName),
 * });
 * ```
 *
 * ### Create a DuploCloud tenant named 'dev' with infra name variable and tenant id as output.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const config = new pulumi.Config();
 * const infraName = config.get("infraName") || "nonprod";
 * // Ensure the 'nonprod' infrastructure is already created before setting up the tenant.
 * const infra = duplocloud.getInfrastructure({
 *     infraName: "nonprod",
 * });
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "dev",
 *     planId: infra.then(infra => infra.infraName),
 * });
 * export const tenantId = tenant.tenantId;
 * ```
 *
 * ### Create a duplocloud tenant named dev with AWS Cognito power user access in the nonprod infrastructure.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.
 * const infra = duplocloud.getInfrastructure({
 *     infraName: "nonprod",
 * });
 * // Here’s how to create a tenant by providing the infrastructure name for the plan_id field.
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "dev",
 *     planId: infra.then(infra => infra.infraName),
 * });
 * // Attaches a managed IAM policy to an IAM role.
 * const amazonCognitoPowerUser = new aws.index.IamRolePolicyAttachment("AmazonCognitoPowerUser", {
 *     role: `duploservices-${tenant.accountName}`,
 *     policyArn: "arn:aws:iam::aws:policy/AmazonCognitoPowerUser",
 * });
 * ```
 *
 * ### Create a DuploCloud tenant named 'qa' with full access to invoke AWS API Gateway in the nonprod infrastructure.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // A prerequisite for creating a tenant is having an existing infrastructure. Here’s how you can reference an existing infrastructure.
 * const infra = duplocloud.getInfrastructure({
 *     infraName: "nonprod",
 * });
 * // Here’s how to create a tenant by providing the infrastructure name for the plan_id field.
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "qa",
 *     planId: infra.then(infra => infra.infraName),
 * });
 * // Attaches a managed IAM policy to an IAM role.
 * const amazonAPIGatewayInvokeFullAccess = new aws.index.IamRolePolicyAttachment("AmazonAPIGatewayInvokeFullAccess", {
 *     role: `duploservices-${tenant.accountName}`,
 *     policyArn: "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess",
 * });
 * ```
 *
 * ### Create duplocloud tenant named dev with security group rule to allow access from 10.220.0.0/16 on port 5432 in nonprod infra’
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const infra = duplocloud.getInfrastructure({
 *     infraName: "nonprod",
 * });
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "dev",
 *     planId: infra.then(infra => infra.infraName),
 * });
 * // Allow communication on port 5432 for the PostgreSQL database from the 10.220.0.0/16 subnet
 * const allowFromVpn = new duplocloud.TenantNetworkSecurityRule("allow_from_vpn", {
 *     tenantId: tenant.tenantId,
 *     sourceAddress: "10.220.0.0/16",
 *     protocol: "tcp",
 *     fromPort: 5432,
 *     toPort: 5432,
 *     description: "Allow communication from 10.220.0.0/16 on port 5432.",
 * });
 * ```
 *
 * ### Setup duplocloud tenant named dev with security group rule to allow access from 10.220.0.0/16 on port 22 in nonprod infra’
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const infra = duplocloud.getInfrastructure({
 *     infraName: "nonprod",
 * });
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "dev",
 *     planId: infra.then(infra => infra.infraName),
 * });
 * // Allow communication on port 22 from the 10.220.0.0/16 subnet.
 * const allowFromVpn = new duplocloud.TenantNetworkSecurityRule("allow_from_vpn", {
 *     tenantId: tenant.tenantId,
 *     sourceAddress: "10.220.0.0/16",
 *     protocol: "tcp",
 *     fromPort: 22,
 *     toPort: 22,
 *     description: "Allow communication from 10.220.0.0/16 on port 22.",
 * });
 * ```
 *
 * ### Provision a tenant named 'myapp' within the infrastructure 'myinfra' and disable deletion protection.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const infra = duplocloud.getInfrastructure({
 *     infraName: "myinfra",
 * });
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "myapp",
 *     planId: infra.then(infra => infra.infraName),
 *     allowDeletion: true,
 * });
 * // Reference the tenant_id field from the duplocloud_tenant resource.
 * const tenantConfig = new duplocloud.TenantConfig("tenant_config", {
 *     tenantId: tenant.tenantId,
 *     settings: [{
 *         key: "delete_protection",
 *         value: "false",
 *     }],
 * });
 * ```
 *
 * ### Provision a tenant named 'myapp' within the infrastructure 'myinfra', and ensure that the S3 bucket has public access blocked and SSL enforcement enabled in the S3 bucket policy.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const infra = duplocloud.getInfrastructure({
 *     infraName: "myinfra",
 * });
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "myapp",
 *     planId: infra.then(infra => infra.infraName),
 *     allowDeletion: true,
 * });
 * // Reference the tenant_id field from the duplocloud_tenant resource.
 * const tenantConfig = new duplocloud.TenantConfig("tenant_config", {
 *     tenantId: tenant.tenantId,
 *     settings: [
 *         {
 *             key: "block_public_access_to_s3",
 *             value: "true",
 *         },
 *         {
 *             key: "enforce_ssl_for_s3",
 *             value: "true",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import duplocloud:index/tenant:Tenant myapp v2/admin/TenantV2/*TENANT_ID*
 * ```
 */
export class Tenant extends pulumi.CustomResource {
    /**
     * Get an existing Tenant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TenantState, opts?: pulumi.CustomResourceOptions): Tenant {
        return new Tenant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/tenant:Tenant';

    /**
     * Returns true if the given object is an instance of Tenant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tenant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tenant.__pulumiType;
    }

    /**
     * The name of the tenant. Tenant names are globally unique, and cannot be a prefix of any other tenant name.
     */
    public readonly accountName!: pulumi.Output<string>;
    /**
     * Whether or not to even try and delete the tenant. *NOTE: This only works if you have disabled deletion protection for the tenant.* Defaults to `false`.
     */
    public readonly allowDeletion!: pulumi.Output<boolean | undefined>;
    /**
     * Existing kubernetes namespace to use by the tenant. *NOTE: This is an advanced feature, please contact your DuploCloud administrator for help if you want to use this field.*
     */
    public readonly existingK8sNamespace!: pulumi.Output<string>;
    public /*out*/ readonly infraOwner!: pulumi.Output<string>;
    /**
     * The name of the plan under which the tenant will be created.
     */
    public readonly planId!: pulumi.Output<string>;
    public /*out*/ readonly policies!: pulumi.Output<outputs.TenantPolicy[]>;
    public /*out*/ readonly tags!: pulumi.Output<outputs.TenantTag[]>;
    /**
     * A GUID identifying the tenant. This is automatically generated by Duplo.
     */
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    /**
     * Whether or not to wait until Duplo has created the tenant. Defaults to `true`.
     */
    public readonly waitUntilCreated!: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not to wait until Duplo has destroyed the tenant. Defaults to `false`.
     */
    public readonly waitUntilDeleted!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Tenant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TenantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TenantArgs | TenantState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TenantState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["allowDeletion"] = state ? state.allowDeletion : undefined;
            resourceInputs["existingK8sNamespace"] = state ? state.existingK8sNamespace : undefined;
            resourceInputs["infraOwner"] = state ? state.infraOwner : undefined;
            resourceInputs["planId"] = state ? state.planId : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["waitUntilCreated"] = state ? state.waitUntilCreated : undefined;
            resourceInputs["waitUntilDeleted"] = state ? state.waitUntilDeleted : undefined;
        } else {
            const args = argsOrState as TenantArgs | undefined;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.planId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'planId'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["allowDeletion"] = args ? args.allowDeletion : undefined;
            resourceInputs["existingK8sNamespace"] = args ? args.existingK8sNamespace : undefined;
            resourceInputs["planId"] = args ? args.planId : undefined;
            resourceInputs["waitUntilCreated"] = args ? args.waitUntilCreated : undefined;
            resourceInputs["waitUntilDeleted"] = args ? args.waitUntilDeleted : undefined;
            resourceInputs["infraOwner"] = undefined /*out*/;
            resourceInputs["policies"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Tenant.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Tenant resources.
 */
export interface TenantState {
    /**
     * The name of the tenant. Tenant names are globally unique, and cannot be a prefix of any other tenant name.
     */
    accountName?: pulumi.Input<string>;
    /**
     * Whether or not to even try and delete the tenant. *NOTE: This only works if you have disabled deletion protection for the tenant.* Defaults to `false`.
     */
    allowDeletion?: pulumi.Input<boolean>;
    /**
     * Existing kubernetes namespace to use by the tenant. *NOTE: This is an advanced feature, please contact your DuploCloud administrator for help if you want to use this field.*
     */
    existingK8sNamespace?: pulumi.Input<string>;
    infraOwner?: pulumi.Input<string>;
    /**
     * The name of the plan under which the tenant will be created.
     */
    planId?: pulumi.Input<string>;
    policies?: pulumi.Input<pulumi.Input<inputs.TenantPolicy>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.TenantTag>[]>;
    /**
     * A GUID identifying the tenant. This is automatically generated by Duplo.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Whether or not to wait until Duplo has created the tenant. Defaults to `true`.
     */
    waitUntilCreated?: pulumi.Input<boolean>;
    /**
     * Whether or not to wait until Duplo has destroyed the tenant. Defaults to `false`.
     */
    waitUntilDeleted?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Tenant resource.
 */
export interface TenantArgs {
    /**
     * The name of the tenant. Tenant names are globally unique, and cannot be a prefix of any other tenant name.
     */
    accountName: pulumi.Input<string>;
    /**
     * Whether or not to even try and delete the tenant. *NOTE: This only works if you have disabled deletion protection for the tenant.* Defaults to `false`.
     */
    allowDeletion?: pulumi.Input<boolean>;
    /**
     * Existing kubernetes namespace to use by the tenant. *NOTE: This is an advanced feature, please contact your DuploCloud administrator for help if you want to use this field.*
     */
    existingK8sNamespace?: pulumi.Input<string>;
    /**
     * The name of the plan under which the tenant will be created.
     */
    planId: pulumi.Input<string>;
    /**
     * Whether or not to wait until Duplo has created the tenant. Defaults to `true`.
     */
    waitUntilCreated?: pulumi.Input<boolean>;
    /**
     * Whether or not to wait until Duplo has destroyed the tenant. Defaults to `false`.
     */
    waitUntilDeleted?: pulumi.Input<boolean>;
}
