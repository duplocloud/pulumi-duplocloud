// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.K8SecretProviderClass` manages a kubernetes Secret Provider Class in a Duplo tenant.
 *
 * ## Import
 *
 * Example: Importing an existing kubernetes secret provider class
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *NAME* is the secret provider class name
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/k8SecretProviderClass:K8SecretProviderClass spc v3/subscriptions/*TENANT_ID*&#47;k8s/secretproviderclass/*NAME*
 * ```
 */
export class K8SecretProviderClass extends pulumi.CustomResource {
    /**
     * Get an existing K8SecretProviderClass resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8SecretProviderClassState, opts?: pulumi.CustomResourceOptions): K8SecretProviderClass {
        return new K8SecretProviderClass(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/k8SecretProviderClass:K8SecretProviderClass';

    /**
     * Returns true if the given object is an instance of K8SecretProviderClass.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8SecretProviderClass {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8SecretProviderClass.__pulumiType;
    }

    /**
     * An unstructured key value map stored with the secret provider class that may be used to store arbitrary metadata.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the Secret Provider Class.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The parameters section contains the details of the mount request.
     */
    public readonly parameters!: pulumi.Output<string>;
    /**
     * You may want to create a Kubernetes Secret to mirror the mounted content. Use the optional secretObjects field to define the desired state of the synced Kubernetes secret objects
     */
    public readonly secretObjects!: pulumi.Output<outputs.K8SecretProviderClassSecretObject[]>;
    /**
     * Provider to be used.
     */
    public readonly secretProvider!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the Secret Provider Class will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a K8SecretProviderClass resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8SecretProviderClassArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8SecretProviderClassArgs | K8SecretProviderClassState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8SecretProviderClassState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["secretObjects"] = state ? state.secretObjects : undefined;
            resourceInputs["secretProvider"] = state ? state.secretProvider : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as K8SecretProviderClassArgs | undefined;
            if ((!args || args.secretProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretProvider'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["secretObjects"] = args ? args.secretObjects : undefined;
            resourceInputs["secretProvider"] = args ? args.secretProvider : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8SecretProviderClass.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering K8SecretProviderClass resources.
 */
export interface K8SecretProviderClassState {
    /**
     * An unstructured key value map stored with the secret provider class that may be used to store arbitrary metadata.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the Secret Provider Class.
     */
    name?: pulumi.Input<string>;
    /**
     * The parameters section contains the details of the mount request.
     */
    parameters?: pulumi.Input<string>;
    /**
     * You may want to create a Kubernetes Secret to mirror the mounted content. Use the optional secretObjects field to define the desired state of the synced Kubernetes secret objects
     */
    secretObjects?: pulumi.Input<pulumi.Input<inputs.K8SecretProviderClassSecretObject>[]>;
    /**
     * Provider to be used.
     */
    secretProvider?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the Secret Provider Class will be created in.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a K8SecretProviderClass resource.
 */
export interface K8SecretProviderClassArgs {
    /**
     * An unstructured key value map stored with the secret provider class that may be used to store arbitrary metadata.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the Secret Provider Class.
     */
    name?: pulumi.Input<string>;
    /**
     * The parameters section contains the details of the mount request.
     */
    parameters?: pulumi.Input<string>;
    /**
     * You may want to create a Kubernetes Secret to mirror the mounted content. Use the optional secretObjects field to define the desired state of the synced Kubernetes secret objects
     */
    secretObjects?: pulumi.Input<pulumi.Input<inputs.K8SecretProviderClassSecretObject>[]>;
    /**
     * Provider to be used.
     */
    secretProvider: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the Secret Provider Class will be created in.
     */
    tenantId: pulumi.Input<string>;
}
