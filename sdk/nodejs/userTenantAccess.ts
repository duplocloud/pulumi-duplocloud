// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.UserTenantAccess` manages a user tenant access in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * // Simple Example 1:  Grant access of tenant to user
 * const access = new duplocloud.UserTenantAccess("access", {
 *     username: "user@domain",
 *     tenantId: myapp.tenantId,
 *     isReadonly: false,
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing service
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *USERNAME* is the unique user name or email id of the user to which TENANT_ID access has been given
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/userTenantAccess:UserTenantAccess access *USERNAME*&#47;*TENANT_ID*
 * ```
 */
export class UserTenantAccess extends pulumi.CustomResource {
    /**
     * Get an existing UserTenantAccess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserTenantAccessState, opts?: pulumi.CustomResourceOptions): UserTenantAccess {
        return new UserTenantAccess(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/userTenantAccess:UserTenantAccess';

    /**
     * Returns true if the given object is an instance of UserTenantAccess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserTenantAccess {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserTenantAccess.__pulumiType;
    }

    /**
     * Specifiy readonly policy related to tenant Defaults to `false`.
     */
    public readonly isReadonly!: pulumi.Output<boolean | undefined>;
    /**
     * Tenant Id to which user need to get access
     */
    public readonly tenantId!: pulumi.Output<string>;
    public /*out*/ readonly tenantName!: pulumi.Output<string>;
    /**
     * The unique user name or the email.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a UserTenantAccess resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserTenantAccessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserTenantAccessArgs | UserTenantAccessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserTenantAccessState | undefined;
            resourceInputs["isReadonly"] = state ? state.isReadonly : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["tenantName"] = state ? state.tenantName : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as UserTenantAccessArgs | undefined;
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["isReadonly"] = args ? args.isReadonly : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["tenantName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserTenantAccess.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserTenantAccess resources.
 */
export interface UserTenantAccessState {
    /**
     * Specifiy readonly policy related to tenant Defaults to `false`.
     */
    isReadonly?: pulumi.Input<boolean>;
    /**
     * Tenant Id to which user need to get access
     */
    tenantId?: pulumi.Input<string>;
    tenantName?: pulumi.Input<string>;
    /**
     * The unique user name or the email.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserTenantAccess resource.
 */
export interface UserTenantAccessArgs {
    /**
     * Specifiy readonly policy related to tenant Defaults to `false`.
     */
    isReadonly?: pulumi.Input<boolean>;
    /**
     * Tenant Id to which user need to get access
     */
    tenantId: pulumi.Input<string>;
    /**
     * The unique user name or the email.
     */
    username: pulumi.Input<string>;
}
