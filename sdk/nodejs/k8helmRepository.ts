// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloudHelmRepository` manages helm repository in duplocloud
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const repo = new duplocloud.index.HelmRepository("repo", {
 *     tenantId: myapp.tenantId,
 *     name: "repo-name",
 *     interval: "06m00s",
 *     url: "https://helm.github.com",
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing helm repository
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *NAME* is the helm repository name
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/k8HelmRepository:K8HelmRepository repo *TENANT_ID*&#47;helm-repository/*NAME*
 * ```
 */
export class K8HelmRepository extends pulumi.CustomResource {
    /**
     * Get an existing K8HelmRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8HelmRepositoryState, opts?: pulumi.CustomResourceOptions): K8HelmRepository {
        return new K8HelmRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/k8HelmRepository:K8HelmRepository';

    /**
     * Returns true if the given object is an instance of K8HelmRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8HelmRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8HelmRepository.__pulumiType;
    }

    /**
     * The interval associated to helm repository Defaults to `5m0s`.
     */
    public readonly interval!: pulumi.Output<string | undefined>;
    /**
     * The identifier name for the helm repository in duplocloud
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the storage bucket will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * The url of helm repository to be attached
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a K8HelmRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8HelmRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8HelmRepositoryArgs | K8HelmRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8HelmRepositoryState | undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as K8HelmRepositoryArgs | undefined;
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8HelmRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering K8HelmRepository resources.
 */
export interface K8HelmRepositoryState {
    /**
     * The interval associated to helm repository Defaults to `5m0s`.
     */
    interval?: pulumi.Input<string>;
    /**
     * The identifier name for the helm repository in duplocloud
     */
    name?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the storage bucket will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The url of helm repository to be attached
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a K8HelmRepository resource.
 */
export interface K8HelmRepositoryArgs {
    /**
     * The interval associated to helm repository Defaults to `5m0s`.
     */
    interval?: pulumi.Input<string>;
    /**
     * The identifier name for the helm repository in duplocloud
     */
    name?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the storage bucket will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * The url of helm repository to be attached
     */
    url: pulumi.Input<string>;
}
