// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.PlanKms` manages the list of kms avaialble to a plan in Duplo.
 *
 * This resource allows you take control of individual plan kms for a specific plan.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myplan = new duplocloud.PlanKms("myplan", {
 *     planId: "plan-name",
 *     kmsId: "kms-id",
 *     kmsArn: "kms-arn",
 *     kmsName: "kms-name",
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing WAF instance
 *
 *  - *PLAN_ID* is the plan name
 *
 *  - *KMS_NAME* is the name of the KMS
 *
 * ```sh
 * $ pulumi import duplocloud:index/planKms:PlanKms myplan *PLAN_ID*&#47;kms/*KMS_NAME*
 * ```
 */
export class PlanKms extends pulumi.CustomResource {
    /**
     * Get an existing PlanKms resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlanKmsState, opts?: pulumi.CustomResourceOptions): PlanKms {
        return new PlanKms(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/planKms:PlanKms';

    /**
     * Returns true if the given object is an instance of PlanKms.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlanKms {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlanKms.__pulumiType;
    }

    public readonly kmsArn!: pulumi.Output<string>;
    public readonly kmsId!: pulumi.Output<string>;
    public readonly kmsName!: pulumi.Output<string>;
    /**
     * The ID of the plan to configure.
     */
    public readonly planId!: pulumi.Output<string>;

    /**
     * Create a PlanKms resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlanKmsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlanKmsArgs | PlanKmsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlanKmsState | undefined;
            resourceInputs["kmsArn"] = state ? state.kmsArn : undefined;
            resourceInputs["kmsId"] = state ? state.kmsId : undefined;
            resourceInputs["kmsName"] = state ? state.kmsName : undefined;
            resourceInputs["planId"] = state ? state.planId : undefined;
        } else {
            const args = argsOrState as PlanKmsArgs | undefined;
            if ((!args || args.kmsArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kmsArn'");
            }
            if ((!args || args.kmsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kmsId'");
            }
            if ((!args || args.kmsName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kmsName'");
            }
            if ((!args || args.planId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'planId'");
            }
            resourceInputs["kmsArn"] = args ? args.kmsArn : undefined;
            resourceInputs["kmsId"] = args ? args.kmsId : undefined;
            resourceInputs["kmsName"] = args ? args.kmsName : undefined;
            resourceInputs["planId"] = args ? args.planId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlanKms.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PlanKms resources.
 */
export interface PlanKmsState {
    kmsArn?: pulumi.Input<string>;
    kmsId?: pulumi.Input<string>;
    kmsName?: pulumi.Input<string>;
    /**
     * The ID of the plan to configure.
     */
    planId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PlanKms resource.
 */
export interface PlanKmsArgs {
    kmsArn: pulumi.Input<string>;
    kmsId: pulumi.Input<string>;
    kmsName: pulumi.Input<string>;
    /**
     * The ID of the plan to configure.
     */
    planId: pulumi.Input<string>;
}
