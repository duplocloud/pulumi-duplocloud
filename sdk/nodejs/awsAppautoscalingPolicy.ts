// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.AwsAppautoscalingPolicy` manages an aws autoscaling policy in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const duplo_app = new duplocloud.Tenant("duplo-app", {
 *     accountName: "duplo-app",
 *     planId: "default",
 * });
 * //ECS Service Autoscaling
 * const asg_target = new duplocloud.AwsAppautoscalingTarget("asg-target", {
 *     tenantId: duplo_app.tenantId,
 *     maxCapacity: 4,
 *     minCapacity: 2,
 *     resourceId: "duploservices-duplo-app-ecs-service",
 *     scalableDimension: "ecs:service:DesiredCount",
 *     serviceNamespace: "ecs",
 * });
 * const asg_app_policy = new duplocloud.AwsAppautoscalingPolicy("asg-app-policy", {
 *     tenantId: duplo_app.tenantId,
 *     name: "avg-cpu-utilization",
 *     policyType: "TargetTrackingScaling",
 *     resourceId: asg_target.resourceId,
 *     scalableDimension: asg_target.scalableDimension,
 *     serviceNamespace: asg_target.serviceNamespace,
 *     targetTrackingScalingPolicyConfiguration: {
 *         predefinedMetricSpecification: {
 *             predefinedMetricType: "ECSServiceAverageCPUUtilization",
 *         },
 *         targetValue: 40,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing Autoscaling Policy
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *SERVICE_NAMESPACE* The AWS service namespace of the scalable target
 *
 *  - *SCALABLE_DIMENSION*  The scalable dimension of the scalable target.
 *
 *  - *RESOURCE_ID* is the duploservices-<account_name>-<resource_name>
 *
 *  - *POLICY_NAME* is the name of policy
 *
 * ```sh
 * $ pulumi import duplocloud:index/awsAppautoscalingPolicy:AwsAppautoscalingPolicy asgAppPolicy *TENANT_ID*&#47;*SERVICE_NAMESPACE*&#47;*SCALABLE_DIMENSION*&#47;*RESOURCE_ID*&#47;*POLICY_NAME*
 * ```
 */
export class AwsAppautoscalingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AwsAppautoscalingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsAppautoscalingPolicyState, opts?: pulumi.CustomResourceOptions): AwsAppautoscalingPolicy {
        return new AwsAppautoscalingPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/awsAppautoscalingPolicy:AwsAppautoscalingPolicy';

    /**
     * Returns true if the given object is an instance of AwsAppautoscalingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsAppautoscalingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsAppautoscalingPolicy.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The resource type and unique identifier string for the resource associated with the scaling policy.
     */
    public /*out*/ readonly fullResourceId!: pulumi.Output<string>;
    /**
     * The name of the policy. Must be between 1 and 255 characters in length.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The policy type. Valid values are `StepScaling` and `TargetTrackingScaling`. Defaults to `StepScaling`.
     */
    public readonly policyType!: pulumi.Output<string | undefined>;
    /**
     * The resource type and unique identifier string for the resource associated with the scaling policy.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * The scalable dimension of the scalable target.
     */
    public readonly scalableDimension!: pulumi.Output<string>;
    /**
     * The AWS service namespace of the scalable target.
     */
    public readonly serviceNamespace!: pulumi.Output<string>;
    /**
     * Step scaling policy configuration, requires `policyType = "StepScaling"`
     */
    public readonly stepScalingPolicyConfiguration!: pulumi.Output<outputs.AwsAppautoscalingPolicyStepScalingPolicyConfiguration | undefined>;
    /**
     * A target tracking policy, requires `policyType = "TargetTrackingScaling"`
     */
    public readonly targetTrackingScalingPolicyConfiguration!: pulumi.Output<outputs.AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfiguration | undefined>;
    /**
     * The GUID of the tenant that the aws autoscaling policy will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a AwsAppautoscalingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsAppautoscalingPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsAppautoscalingPolicyArgs | AwsAppautoscalingPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsAppautoscalingPolicyState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["fullResourceId"] = state ? state.fullResourceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["scalableDimension"] = state ? state.scalableDimension : undefined;
            resourceInputs["serviceNamespace"] = state ? state.serviceNamespace : undefined;
            resourceInputs["stepScalingPolicyConfiguration"] = state ? state.stepScalingPolicyConfiguration : undefined;
            resourceInputs["targetTrackingScalingPolicyConfiguration"] = state ? state.targetTrackingScalingPolicyConfiguration : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as AwsAppautoscalingPolicyArgs | undefined;
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.scalableDimension === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalableDimension'");
            }
            if ((!args || args.serviceNamespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceNamespace'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyType"] = args ? args.policyType : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["scalableDimension"] = args ? args.scalableDimension : undefined;
            resourceInputs["serviceNamespace"] = args ? args.serviceNamespace : undefined;
            resourceInputs["stepScalingPolicyConfiguration"] = args ? args.stepScalingPolicyConfiguration : undefined;
            resourceInputs["targetTrackingScalingPolicyConfiguration"] = args ? args.targetTrackingScalingPolicyConfiguration : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["fullResourceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsAppautoscalingPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsAppautoscalingPolicy resources.
 */
export interface AwsAppautoscalingPolicyState {
    arn?: pulumi.Input<string>;
    /**
     * The resource type and unique identifier string for the resource associated with the scaling policy.
     */
    fullResourceId?: pulumi.Input<string>;
    /**
     * The name of the policy. Must be between 1 and 255 characters in length.
     */
    name?: pulumi.Input<string>;
    /**
     * The policy type. Valid values are `StepScaling` and `TargetTrackingScaling`. Defaults to `StepScaling`.
     */
    policyType?: pulumi.Input<string>;
    /**
     * The resource type and unique identifier string for the resource associated with the scaling policy.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The scalable dimension of the scalable target.
     */
    scalableDimension?: pulumi.Input<string>;
    /**
     * The AWS service namespace of the scalable target.
     */
    serviceNamespace?: pulumi.Input<string>;
    /**
     * Step scaling policy configuration, requires `policyType = "StepScaling"`
     */
    stepScalingPolicyConfiguration?: pulumi.Input<inputs.AwsAppautoscalingPolicyStepScalingPolicyConfiguration>;
    /**
     * A target tracking policy, requires `policyType = "TargetTrackingScaling"`
     */
    targetTrackingScalingPolicyConfiguration?: pulumi.Input<inputs.AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfiguration>;
    /**
     * The GUID of the tenant that the aws autoscaling policy will be created in.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsAppautoscalingPolicy resource.
 */
export interface AwsAppautoscalingPolicyArgs {
    /**
     * The name of the policy. Must be between 1 and 255 characters in length.
     */
    name?: pulumi.Input<string>;
    /**
     * The policy type. Valid values are `StepScaling` and `TargetTrackingScaling`. Defaults to `StepScaling`.
     */
    policyType?: pulumi.Input<string>;
    /**
     * The resource type and unique identifier string for the resource associated with the scaling policy.
     */
    resourceId: pulumi.Input<string>;
    /**
     * The scalable dimension of the scalable target.
     */
    scalableDimension: pulumi.Input<string>;
    /**
     * The AWS service namespace of the scalable target.
     */
    serviceNamespace: pulumi.Input<string>;
    /**
     * Step scaling policy configuration, requires `policyType = "StepScaling"`
     */
    stepScalingPolicyConfiguration?: pulumi.Input<inputs.AwsAppautoscalingPolicyStepScalingPolicyConfiguration>;
    /**
     * A target tracking policy, requires `policyType = "TargetTrackingScaling"`
     */
    targetTrackingScalingPolicyConfiguration?: pulumi.Input<inputs.AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfiguration>;
    /**
     * The GUID of the tenant that the aws autoscaling policy will be created in.
     */
    tenantId: pulumi.Input<string>;
}
