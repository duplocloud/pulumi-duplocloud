// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.AwsTargetGroupAttributes` manages an aws target group attributes in Duplo.
 *
 * ## Import
 *
 * Example: Importing an existing AWS target group attributes.
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *TARGET_GROUP_ARN* is the ARN of target group.
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/awsTargetGroupAttributes:AwsTargetGroupAttributes tgAttrs *TENANT_ID*&#47;*TARGET_GROUP_ARN*
 * ```
 */
export class AwsTargetGroupAttributes extends pulumi.CustomResource {
    /**
     * Get an existing AwsTargetGroupAttributes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsTargetGroupAttributesState, opts?: pulumi.CustomResourceOptions): AwsTargetGroupAttributes {
        return new AwsTargetGroupAttributes(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/awsTargetGroupAttributes:AwsTargetGroupAttributes';

    /**
     * Returns true if the given object is an instance of AwsTargetGroupAttributes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsTargetGroupAttributes {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsTargetGroupAttributes.__pulumiType;
    }

    public readonly attributes!: pulumi.Output<outputs.AwsTargetGroupAttributesAttribute[]>;
    /**
     * Whether or not to look up the LB via an ECS service name instead of replication controller name.
     */
    public readonly isEcsLb!: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not to look up the LB via the LB name instead of replication controller name.
     */
    public readonly isPassthroughLb!: pulumi.Output<boolean | undefined>;
    /**
     * Port used to connect with the target.
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Name of the ecs service or replication controller.
     */
    public readonly roleName!: pulumi.Output<string | undefined>;
    /**
     * ARN of the Target Group.
     */
    public readonly targetGroupArn!: pulumi.Output<string | undefined>;
    /**
     * The GUID of the tenant that the aws target group attributes will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a AwsTargetGroupAttributes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsTargetGroupAttributesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsTargetGroupAttributesArgs | AwsTargetGroupAttributesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsTargetGroupAttributesState | undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["isEcsLb"] = state ? state.isEcsLb : undefined;
            resourceInputs["isPassthroughLb"] = state ? state.isPassthroughLb : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["targetGroupArn"] = state ? state.targetGroupArn : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as AwsTargetGroupAttributesArgs | undefined;
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["isEcsLb"] = args ? args.isEcsLb : undefined;
            resourceInputs["isPassthroughLb"] = args ? args.isPassthroughLb : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
            resourceInputs["targetGroupArn"] = args ? args.targetGroupArn : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsTargetGroupAttributes.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsTargetGroupAttributes resources.
 */
export interface AwsTargetGroupAttributesState {
    attributes?: pulumi.Input<pulumi.Input<inputs.AwsTargetGroupAttributesAttribute>[]>;
    /**
     * Whether or not to look up the LB via an ECS service name instead of replication controller name.
     */
    isEcsLb?: pulumi.Input<boolean>;
    /**
     * Whether or not to look up the LB via the LB name instead of replication controller name.
     */
    isPassthroughLb?: pulumi.Input<boolean>;
    /**
     * Port used to connect with the target.
     */
    port?: pulumi.Input<number>;
    /**
     * Name of the ecs service or replication controller.
     */
    roleName?: pulumi.Input<string>;
    /**
     * ARN of the Target Group.
     */
    targetGroupArn?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the aws target group attributes will be created in.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsTargetGroupAttributes resource.
 */
export interface AwsTargetGroupAttributesArgs {
    attributes?: pulumi.Input<pulumi.Input<inputs.AwsTargetGroupAttributesAttribute>[]>;
    /**
     * Whether or not to look up the LB via an ECS service name instead of replication controller name.
     */
    isEcsLb?: pulumi.Input<boolean>;
    /**
     * Whether or not to look up the LB via the LB name instead of replication controller name.
     */
    isPassthroughLb?: pulumi.Input<boolean>;
    /**
     * Port used to connect with the target.
     */
    port?: pulumi.Input<number>;
    /**
     * Name of the ecs service or replication controller.
     */
    roleName?: pulumi.Input<string>;
    /**
     * ARN of the Target Group.
     */
    targetGroupArn?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the aws target group attributes will be created in.
     */
    tenantId: pulumi.Input<string>;
}
