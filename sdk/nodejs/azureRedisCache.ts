// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.AzureRedisCache` manages an Azure redis cache in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const myCache = new duplocloud.AzureRedisCache("myCache", {
 *     tenantId: myapp.tenantId,
 *     name: "cache-test",
 *     capacity: 1,
 *     family: "p",
 *     skuName: "Premium",
 *     subnetId: "/subscriptions/0c84b91e-95f5-409e-9cff-6c2e60affbb3/resourceGroups/duploinfra-demo/providers/Microsoft.Network/virtualNetworks/demo/subnets/duploinfra-default",
 *     enableNonSslPort: false,
 *     shardCount: 1,
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing Azure Redis Cache
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *SHORT_NAME* is the short name of the Azure Redis Cache
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/azureRedisCache:AzureRedisCache myRedisCache *TENANT_ID*&#47;*SHORT_NAME*
 * ```
 */
export class AzureRedisCache extends pulumi.CustomResource {
    /**
     * Get an existing AzureRedisCache resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureRedisCacheState, opts?: pulumi.CustomResourceOptions): AzureRedisCache {
        return new AzureRedisCache(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/azureRedisCache:AzureRedisCache';

    /**
     * Returns true if the given object is an instance of AzureRedisCache.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureRedisCache {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureRedisCache.__pulumiType;
    }

    /**
     * The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`
     */
    public readonly capacity!: pulumi.Output<number>;
    /**
     * Enable the non-SSL port (6379) Defaults to `false`.
     */
    public readonly enableNonSslPort!: pulumi.Output<boolean | undefined>;
    /**
     * The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
     */
    public readonly family!: pulumi.Output<string>;
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * The minimum TLS version.
     */
    public readonly minimumTlsVersion!: pulumi.Output<string | undefined>;
    /**
     * The name of the Redis instance. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly port!: pulumi.Output<number>;
    /**
     * Redis version. Only major version needed. Valid values: `4`, `6`.
     */
    public readonly redisVersion!: pulumi.Output<string>;
    /**
     * Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.
     */
    public readonly shardCount!: pulumi.Output<number | undefined>;
    /**
     * The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
     */
    public readonly skuName!: pulumi.Output<string>;
    public /*out*/ readonly sslPort!: pulumi.Output<number>;
    /**
     * Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed.
     */
    public readonly subnetId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly tags!: pulumi.Output<{[key: string]: string}>;
    /**
     * The GUID of the tenant that the azure redis cache will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
     */
    public readonly waitUntilReady!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AzureRedisCache resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureRedisCacheArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureRedisCacheArgs | AzureRedisCacheState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureRedisCacheState | undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["enableNonSslPort"] = state ? state.enableNonSslPort : undefined;
            resourceInputs["family"] = state ? state.family : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["minimumTlsVersion"] = state ? state.minimumTlsVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["redisVersion"] = state ? state.redisVersion : undefined;
            resourceInputs["shardCount"] = state ? state.shardCount : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["sslPort"] = state ? state.sslPort : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["waitUntilReady"] = state ? state.waitUntilReady : undefined;
        } else {
            const args = argsOrState as AzureRedisCacheArgs | undefined;
            if ((!args || args.capacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacity'");
            }
            if ((!args || args.family === undefined) && !opts.urn) {
                throw new Error("Missing required property 'family'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["enableNonSslPort"] = args ? args.enableNonSslPort : undefined;
            resourceInputs["family"] = args ? args.family : undefined;
            resourceInputs["minimumTlsVersion"] = args ? args.minimumTlsVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["redisVersion"] = args ? args.redisVersion : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["waitUntilReady"] = args ? args.waitUntilReady : undefined;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["sslPort"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureRedisCache.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AzureRedisCache resources.
 */
export interface AzureRedisCacheState {
    /**
     * The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`
     */
    capacity?: pulumi.Input<number>;
    /**
     * Enable the non-SSL port (6379) Defaults to `false`.
     */
    enableNonSslPort?: pulumi.Input<boolean>;
    /**
     * The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
     */
    family?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    /**
     * The minimum TLS version.
     */
    minimumTlsVersion?: pulumi.Input<string>;
    /**
     * The name of the Redis instance. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    /**
     * Redis version. Only major version needed. Valid values: `4`, `6`.
     */
    redisVersion?: pulumi.Input<string>;
    /**
     * Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.
     */
    shardCount?: pulumi.Input<number>;
    /**
     * The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
     */
    skuName?: pulumi.Input<string>;
    sslPort?: pulumi.Input<number>;
    /**
     * Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed.
     */
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The GUID of the tenant that the azure redis cache will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AzureRedisCache resource.
 */
export interface AzureRedisCacheArgs {
    /**
     * The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`
     */
    capacity: pulumi.Input<number>;
    /**
     * Enable the non-SSL port (6379) Defaults to `false`.
     */
    enableNonSslPort?: pulumi.Input<boolean>;
    /**
     * The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
     */
    family: pulumi.Input<string>;
    /**
     * The minimum TLS version.
     */
    minimumTlsVersion?: pulumi.Input<string>;
    /**
     * The name of the Redis instance. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Redis version. Only major version needed. Valid values: `4`, `6`.
     */
    redisVersion?: pulumi.Input<string>;
    /**
     * Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.
     */
    shardCount?: pulumi.Input<number>;
    /**
     * The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
     */
    skuName: pulumi.Input<string>;
    /**
     * Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the azure redis cache will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Whether or not to wait until Redis cache instance to be ready, after creation. Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
}
