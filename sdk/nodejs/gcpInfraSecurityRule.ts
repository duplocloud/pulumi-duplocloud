// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.GcpInfraSecurityRule` applies gcp security rule to  infra
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const irule = new duplocloud.GcpInfraSecurityRule("irule", {
 *     infraName: "test",
 *     name: "test-infra-r14",
 *     description: "test rule for infra test",
 *     portsAndProtocols: [
 *         {
 *             ports: [
 *                 "24",
 *                 "23-89",
 *             ],
 *             serviceProtocol: "tcp",
 *         },
 *         {
 *             ports: ["100"],
 *             serviceProtocol: "udp",
 *         },
 *     ],
 *     sourceRanges: ["0.0.0.0/32"],
 *     ruleType: "ALLOW",
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing S3 bucket
 *
 *  - *INFRA_NAME* is the name of infrastructure
 *
 *  - *RULE_NAME* is the  name of the security rule
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/gcpInfraSecurityRule:GcpInfraSecurityRule irule *INFRA_NAME/security-rule/*RULE_NAME*
 * ```
 */
export class GcpInfraSecurityRule extends pulumi.CustomResource {
    /**
     * Get an existing GcpInfraSecurityRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GcpInfraSecurityRuleState, opts?: pulumi.CustomResourceOptions): GcpInfraSecurityRule {
        return new GcpInfraSecurityRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/gcpInfraSecurityRule:GcpInfraSecurityRule';

    /**
     * Returns true if the given object is an instance of GcpInfraSecurityRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GcpInfraSecurityRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GcpInfraSecurityRule.__pulumiType;
    }

    /**
     * The description related to the rule
     */
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly direction!: pulumi.Output<string>;
    /**
     * Duplocloud prefixed rule name
     */
    public /*out*/ readonly fullname!: pulumi.Output<string>;
    /**
     * The name of the infrastructure where rule gets applied
     */
    public readonly infraName!: pulumi.Output<string>;
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * Specify rule name
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly network!: pulumi.Output<string>;
    public readonly portsAndProtocols!: pulumi.Output<outputs.GcpInfraSecurityRulePortsAndProtocol[]>;
    public /*out*/ readonly priority!: pulumi.Output<number>;
    /**
     * Specify type of access rule (ALLOW , DENY)
     */
    public readonly ruleType!: pulumi.Output<string>;
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * The lists of IPv4 or IPv6 addresses in CIDR format that specify the source of traffic for a firewall rule
     */
    public readonly sourceRanges!: pulumi.Output<string[]>;
    public /*out*/ readonly sourceTags!: pulumi.Output<string[]>;

    /**
     * Create a GcpInfraSecurityRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GcpInfraSecurityRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GcpInfraSecurityRuleArgs | GcpInfraSecurityRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GcpInfraSecurityRuleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["fullname"] = state ? state.fullname : undefined;
            resourceInputs["infraName"] = state ? state.infraName : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["portsAndProtocols"] = state ? state.portsAndProtocols : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["ruleType"] = state ? state.ruleType : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["sourceRanges"] = state ? state.sourceRanges : undefined;
            resourceInputs["sourceTags"] = state ? state.sourceTags : undefined;
        } else {
            const args = argsOrState as GcpInfraSecurityRuleArgs | undefined;
            if ((!args || args.infraName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'infraName'");
            }
            if ((!args || args.portsAndProtocols === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portsAndProtocols'");
            }
            if ((!args || args.ruleType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleType'");
            }
            if ((!args || args.sourceRanges === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceRanges'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["infraName"] = args ? args.infraName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["portsAndProtocols"] = args ? args.portsAndProtocols : undefined;
            resourceInputs["ruleType"] = args ? args.ruleType : undefined;
            resourceInputs["sourceRanges"] = args ? args.sourceRanges : undefined;
            resourceInputs["direction"] = undefined /*out*/;
            resourceInputs["fullname"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["network"] = undefined /*out*/;
            resourceInputs["priority"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["sourceTags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GcpInfraSecurityRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GcpInfraSecurityRule resources.
 */
export interface GcpInfraSecurityRuleState {
    /**
     * The description related to the rule
     */
    description?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    /**
     * Duplocloud prefixed rule name
     */
    fullname?: pulumi.Input<string>;
    /**
     * The name of the infrastructure where rule gets applied
     */
    infraName?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    /**
     * Specify rule name
     */
    name?: pulumi.Input<string>;
    network?: pulumi.Input<string>;
    portsAndProtocols?: pulumi.Input<pulumi.Input<inputs.GcpInfraSecurityRulePortsAndProtocol>[]>;
    priority?: pulumi.Input<number>;
    /**
     * Specify type of access rule (ALLOW , DENY)
     */
    ruleType?: pulumi.Input<string>;
    selfLink?: pulumi.Input<string>;
    /**
     * The lists of IPv4 or IPv6 addresses in CIDR format that specify the source of traffic for a firewall rule
     */
    sourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
    sourceTags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a GcpInfraSecurityRule resource.
 */
export interface GcpInfraSecurityRuleArgs {
    /**
     * The description related to the rule
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the infrastructure where rule gets applied
     */
    infraName: pulumi.Input<string>;
    /**
     * Specify rule name
     */
    name?: pulumi.Input<string>;
    portsAndProtocols: pulumi.Input<pulumi.Input<inputs.GcpInfraSecurityRulePortsAndProtocol>[]>;
    /**
     * Specify type of access rule (ALLOW , DENY)
     */
    ruleType: pulumi.Input<string>;
    /**
     * The lists of IPv4 or IPv6 addresses in CIDR format that specify the source of traffic for a firewall rule
     */
    sourceRanges: pulumi.Input<pulumi.Input<string>[]>;
}
