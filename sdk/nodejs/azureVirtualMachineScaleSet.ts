// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.AzureVirtualMachineScaleSet` manages an azure virtual machine scale set in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const vmss = new duplocloud.AzureVirtualMachineScaleSet("vmss", {
 *     tenantId: myapp.tenantId,
 *     name: "tstvmss",
 *     sku: {
 *         tier: "Standard",
 *         name: "Standard_D1_v2",
 *         capacity: 2,
 *     },
 *     osProfile: {
 *         adminPassword: "DuploTest007",
 *         adminUsername: "duploadmin",
 *         computerNamePrefix: "tst",
 *     },
 *     storageProfileImageReference: {
 *         sku: "2016-Datacenter",
 *         publisher: "MicrosoftWindowsServer",
 *         offer: "WindowsServer",
 *         version: "latest",
 *     },
 *     networkProfiles: [{
 *         name: "tstvmss",
 *         primary: true,
 *         ipConfigurations: [{
 *             name: "tstvmss",
 *             subnetId: "/subscriptions/143ffc59-9394-4ec6-8f5a-c408a238be62/resourceGroups/duploinfra-testdb/providers/Microsoft.Network/virtualNetworks/testdb/subnets/duploinfra-sub01",
 *         }],
 *         ipForwarding: true,
 *     }],
 *     upgradePolicyMode: "Manual",
 *     overprovision: true,
 *     singlePlacementGroup: true,
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing Azure Virtual Machine Scale Set
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *SHORT_NAME* is the short name of the Azure Virtual Machine Scale Set
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/azureVirtualMachineScaleSet:AzureVirtualMachineScaleSet myvmss *TENANT_ID*&#47;*SHORT_NAME*
 * ```
 */
export class AzureVirtualMachineScaleSet extends pulumi.CustomResource {
    /**
     * Get an existing AzureVirtualMachineScaleSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureVirtualMachineScaleSetState, opts?: pulumi.CustomResourceOptions): AzureVirtualMachineScaleSet {
        return new AzureVirtualMachineScaleSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/azureVirtualMachineScaleSet:AzureVirtualMachineScaleSet';

    /**
     * Returns true if the given object is an instance of AzureVirtualMachineScaleSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureVirtualMachineScaleSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureVirtualMachineScaleSet.__pulumiType;
    }

    /**
     * The numeric ID of the container agent pool that this VM is added to. Defaults to `0`.
     */
    public readonly agentPlatform!: pulumi.Output<number | undefined>;
    public readonly allocationTags!: pulumi.Output<string | undefined>;
    /**
     * Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
     */
    public readonly automaticOsUpgrade!: pulumi.Output<boolean | undefined>;
    public readonly bootDiagnostics!: pulumi.Output<outputs.AzureVirtualMachineScaleSetBootDiagnostics | undefined>;
    /**
     * Specifies the eviction policy for Virtual Machines in this Scale Set.
     */
    public readonly evictionPolicy!: pulumi.Output<string | undefined>;
    public readonly extensions!: pulumi.Output<outputs.AzureVirtualMachineScaleSetExtension[] | undefined>;
    /**
     * Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`
     */
    public readonly healthProbeId!: pulumi.Output<string | undefined>;
    public readonly identity!: pulumi.Output<outputs.AzureVirtualMachineScaleSetIdentity>;
    /**
     * Defaults to `false`.
     */
    public readonly isMinion!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
     */
    public readonly licenseType!: pulumi.Output<string>;
    public /*out*/ readonly location!: pulumi.Output<string>;
    /**
     * Specifies the name of the virtual machine scale set resource.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly networkProfiles!: pulumi.Output<outputs.AzureVirtualMachineScaleSetNetworkProfile[]>;
    public readonly osProfile!: pulumi.Output<outputs.AzureVirtualMachineScaleSetOsProfile>;
    public readonly osProfileLinuxConfig!: pulumi.Output<outputs.AzureVirtualMachineScaleSetOsProfileLinuxConfig>;
    public readonly osProfileSecrets!: pulumi.Output<outputs.AzureVirtualMachineScaleSetOsProfileSecret[] | undefined>;
    public readonly osProfileWindowsConfig!: pulumi.Output<outputs.AzureVirtualMachineScaleSetOsProfileWindowsConfig>;
    /**
     * Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
     */
    public readonly overprovision!: pulumi.Output<boolean | undefined>;
    public readonly plan!: pulumi.Output<outputs.AzureVirtualMachineScaleSetPlan | undefined>;
    /**
     * Specifies the priority for the Virtual Machines in the Scale Set. Defaults to `Regular`.
     */
    public readonly priority!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Proximity Placement Group to which this Virtual Machine should be assigned.
     */
    public readonly proximityPlacementGroupId!: pulumi.Output<string | undefined>;
    public readonly rollingUpgradePolicy!: pulumi.Output<outputs.AzureVirtualMachineScaleSetRollingUpgradePolicy | undefined>;
    /**
     * Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Defaults to `true`.
     */
    public readonly singlePlacementGroup!: pulumi.Output<boolean | undefined>;
    public readonly sku!: pulumi.Output<outputs.AzureVirtualMachineScaleSetSku>;
    public readonly storageProfileDataDisks!: pulumi.Output<outputs.AzureVirtualMachineScaleSetStorageProfileDataDisk[] | undefined>;
    public readonly storageProfileImageReference!: pulumi.Output<outputs.AzureVirtualMachineScaleSetStorageProfileImageReference>;
    public readonly storageProfileOsDisk!: pulumi.Output<outputs.AzureVirtualMachineScaleSetStorageProfileOsDisk>;
    /**
     * The GUID of the tenant that the azure virtual machine scale set will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing Rolling, you will need to set a health probe.
     */
    public readonly upgradePolicyMode!: pulumi.Output<string>;
    /**
     * Whether or not to wait until virtual machine scale set to be ready, after creation. Defaults to `true`.
     */
    public readonly waitUntilReady!: pulumi.Output<boolean | undefined>;
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a AzureVirtualMachineScaleSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureVirtualMachineScaleSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureVirtualMachineScaleSetArgs | AzureVirtualMachineScaleSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureVirtualMachineScaleSetState | undefined;
            resourceInputs["agentPlatform"] = state ? state.agentPlatform : undefined;
            resourceInputs["allocationTags"] = state ? state.allocationTags : undefined;
            resourceInputs["automaticOsUpgrade"] = state ? state.automaticOsUpgrade : undefined;
            resourceInputs["bootDiagnostics"] = state ? state.bootDiagnostics : undefined;
            resourceInputs["evictionPolicy"] = state ? state.evictionPolicy : undefined;
            resourceInputs["extensions"] = state ? state.extensions : undefined;
            resourceInputs["healthProbeId"] = state ? state.healthProbeId : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["isMinion"] = state ? state.isMinion : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkProfiles"] = state ? state.networkProfiles : undefined;
            resourceInputs["osProfile"] = state ? state.osProfile : undefined;
            resourceInputs["osProfileLinuxConfig"] = state ? state.osProfileLinuxConfig : undefined;
            resourceInputs["osProfileSecrets"] = state ? state.osProfileSecrets : undefined;
            resourceInputs["osProfileWindowsConfig"] = state ? state.osProfileWindowsConfig : undefined;
            resourceInputs["overprovision"] = state ? state.overprovision : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["proximityPlacementGroupId"] = state ? state.proximityPlacementGroupId : undefined;
            resourceInputs["rollingUpgradePolicy"] = state ? state.rollingUpgradePolicy : undefined;
            resourceInputs["singlePlacementGroup"] = state ? state.singlePlacementGroup : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["storageProfileDataDisks"] = state ? state.storageProfileDataDisks : undefined;
            resourceInputs["storageProfileImageReference"] = state ? state.storageProfileImageReference : undefined;
            resourceInputs["storageProfileOsDisk"] = state ? state.storageProfileOsDisk : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["upgradePolicyMode"] = state ? state.upgradePolicyMode : undefined;
            resourceInputs["waitUntilReady"] = state ? state.waitUntilReady : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as AzureVirtualMachineScaleSetArgs | undefined;
            if ((!args || args.networkProfiles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkProfiles'");
            }
            if ((!args || args.osProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osProfile'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.upgradePolicyMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'upgradePolicyMode'");
            }
            resourceInputs["agentPlatform"] = args ? args.agentPlatform : undefined;
            resourceInputs["allocationTags"] = args ? args.allocationTags : undefined;
            resourceInputs["automaticOsUpgrade"] = args ? args.automaticOsUpgrade : undefined;
            resourceInputs["bootDiagnostics"] = args ? args.bootDiagnostics : undefined;
            resourceInputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            resourceInputs["extensions"] = args ? args.extensions : undefined;
            resourceInputs["healthProbeId"] = args ? args.healthProbeId : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["isMinion"] = args ? args.isMinion : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkProfiles"] = args ? args.networkProfiles : undefined;
            resourceInputs["osProfile"] = args ? args.osProfile : undefined;
            resourceInputs["osProfileLinuxConfig"] = args ? args.osProfileLinuxConfig : undefined;
            resourceInputs["osProfileSecrets"] = args ? args.osProfileSecrets : undefined;
            resourceInputs["osProfileWindowsConfig"] = args ? args.osProfileWindowsConfig : undefined;
            resourceInputs["overprovision"] = args ? args.overprovision : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["proximityPlacementGroupId"] = args ? args.proximityPlacementGroupId : undefined;
            resourceInputs["rollingUpgradePolicy"] = args ? args.rollingUpgradePolicy : undefined;
            resourceInputs["singlePlacementGroup"] = args ? args.singlePlacementGroup : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["storageProfileDataDisks"] = args ? args.storageProfileDataDisks : undefined;
            resourceInputs["storageProfileImageReference"] = args ? args.storageProfileImageReference : undefined;
            resourceInputs["storageProfileOsDisk"] = args ? args.storageProfileOsDisk : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["upgradePolicyMode"] = args ? args.upgradePolicyMode : undefined;
            resourceInputs["waitUntilReady"] = args ? args.waitUntilReady : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
            resourceInputs["location"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureVirtualMachineScaleSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AzureVirtualMachineScaleSet resources.
 */
export interface AzureVirtualMachineScaleSetState {
    /**
     * The numeric ID of the container agent pool that this VM is added to. Defaults to `0`.
     */
    agentPlatform?: pulumi.Input<number>;
    allocationTags?: pulumi.Input<string>;
    /**
     * Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
     */
    automaticOsUpgrade?: pulumi.Input<boolean>;
    bootDiagnostics?: pulumi.Input<inputs.AzureVirtualMachineScaleSetBootDiagnostics>;
    /**
     * Specifies the eviction policy for Virtual Machines in this Scale Set.
     */
    evictionPolicy?: pulumi.Input<string>;
    extensions?: pulumi.Input<pulumi.Input<inputs.AzureVirtualMachineScaleSetExtension>[]>;
    /**
     * Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`
     */
    healthProbeId?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.AzureVirtualMachineScaleSetIdentity>;
    /**
     * Defaults to `false`.
     */
    isMinion?: pulumi.Input<boolean>;
    /**
     * Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
     */
    licenseType?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the virtual machine scale set resource.
     */
    name?: pulumi.Input<string>;
    networkProfiles?: pulumi.Input<pulumi.Input<inputs.AzureVirtualMachineScaleSetNetworkProfile>[]>;
    osProfile?: pulumi.Input<inputs.AzureVirtualMachineScaleSetOsProfile>;
    osProfileLinuxConfig?: pulumi.Input<inputs.AzureVirtualMachineScaleSetOsProfileLinuxConfig>;
    osProfileSecrets?: pulumi.Input<pulumi.Input<inputs.AzureVirtualMachineScaleSetOsProfileSecret>[]>;
    osProfileWindowsConfig?: pulumi.Input<inputs.AzureVirtualMachineScaleSetOsProfileWindowsConfig>;
    /**
     * Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
     */
    overprovision?: pulumi.Input<boolean>;
    plan?: pulumi.Input<inputs.AzureVirtualMachineScaleSetPlan>;
    /**
     * Specifies the priority for the Virtual Machines in the Scale Set. Defaults to `Regular`.
     */
    priority?: pulumi.Input<string>;
    /**
     * The ID of the Proximity Placement Group to which this Virtual Machine should be assigned.
     */
    proximityPlacementGroupId?: pulumi.Input<string>;
    rollingUpgradePolicy?: pulumi.Input<inputs.AzureVirtualMachineScaleSetRollingUpgradePolicy>;
    /**
     * Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Defaults to `true`.
     */
    singlePlacementGroup?: pulumi.Input<boolean>;
    sku?: pulumi.Input<inputs.AzureVirtualMachineScaleSetSku>;
    storageProfileDataDisks?: pulumi.Input<pulumi.Input<inputs.AzureVirtualMachineScaleSetStorageProfileDataDisk>[]>;
    storageProfileImageReference?: pulumi.Input<inputs.AzureVirtualMachineScaleSetStorageProfileImageReference>;
    storageProfileOsDisk?: pulumi.Input<inputs.AzureVirtualMachineScaleSetStorageProfileOsDisk>;
    /**
     * The GUID of the tenant that the azure virtual machine scale set will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing Rolling, you will need to set a health probe.
     */
    upgradePolicyMode?: pulumi.Input<string>;
    /**
     * Whether or not to wait until virtual machine scale set to be ready, after creation. Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AzureVirtualMachineScaleSet resource.
 */
export interface AzureVirtualMachineScaleSetArgs {
    /**
     * The numeric ID of the container agent pool that this VM is added to. Defaults to `0`.
     */
    agentPlatform?: pulumi.Input<number>;
    allocationTags?: pulumi.Input<string>;
    /**
     * Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
     */
    automaticOsUpgrade?: pulumi.Input<boolean>;
    bootDiagnostics?: pulumi.Input<inputs.AzureVirtualMachineScaleSetBootDiagnostics>;
    /**
     * Specifies the eviction policy for Virtual Machines in this Scale Set.
     */
    evictionPolicy?: pulumi.Input<string>;
    extensions?: pulumi.Input<pulumi.Input<inputs.AzureVirtualMachineScaleSetExtension>[]>;
    /**
     * Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`
     */
    healthProbeId?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.AzureVirtualMachineScaleSetIdentity>;
    /**
     * Defaults to `false`.
     */
    isMinion?: pulumi.Input<boolean>;
    /**
     * Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * Specifies the name of the virtual machine scale set resource.
     */
    name?: pulumi.Input<string>;
    networkProfiles: pulumi.Input<pulumi.Input<inputs.AzureVirtualMachineScaleSetNetworkProfile>[]>;
    osProfile: pulumi.Input<inputs.AzureVirtualMachineScaleSetOsProfile>;
    osProfileLinuxConfig?: pulumi.Input<inputs.AzureVirtualMachineScaleSetOsProfileLinuxConfig>;
    osProfileSecrets?: pulumi.Input<pulumi.Input<inputs.AzureVirtualMachineScaleSetOsProfileSecret>[]>;
    osProfileWindowsConfig?: pulumi.Input<inputs.AzureVirtualMachineScaleSetOsProfileWindowsConfig>;
    /**
     * Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
     */
    overprovision?: pulumi.Input<boolean>;
    plan?: pulumi.Input<inputs.AzureVirtualMachineScaleSetPlan>;
    /**
     * Specifies the priority for the Virtual Machines in the Scale Set. Defaults to `Regular`.
     */
    priority?: pulumi.Input<string>;
    /**
     * The ID of the Proximity Placement Group to which this Virtual Machine should be assigned.
     */
    proximityPlacementGroupId?: pulumi.Input<string>;
    rollingUpgradePolicy?: pulumi.Input<inputs.AzureVirtualMachineScaleSetRollingUpgradePolicy>;
    /**
     * Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Defaults to `true`.
     */
    singlePlacementGroup?: pulumi.Input<boolean>;
    sku: pulumi.Input<inputs.AzureVirtualMachineScaleSetSku>;
    storageProfileDataDisks?: pulumi.Input<pulumi.Input<inputs.AzureVirtualMachineScaleSetStorageProfileDataDisk>[]>;
    storageProfileImageReference?: pulumi.Input<inputs.AzureVirtualMachineScaleSetStorageProfileImageReference>;
    storageProfileOsDisk?: pulumi.Input<inputs.AzureVirtualMachineScaleSetStorageProfileOsDisk>;
    /**
     * The GUID of the tenant that the azure virtual machine scale set will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing Rolling, you will need to set a health probe.
     */
    upgradePolicyMode: pulumi.Input<string>;
    /**
     * Whether or not to wait until virtual machine scale set to be ready, after creation. Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
