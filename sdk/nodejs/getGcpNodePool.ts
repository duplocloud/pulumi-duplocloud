// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.GcpNodePool` retrieves a node pool in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const pool = duplocloud.getGcpNodePool({
 *     tenantId: "tenantid",
 *     name: "nodepool-name",
 * });
 * export const nodepoolOutput = {
 *     name: pool.then(pool => pool.name),
 *     machineType: pool.then(pool => pool.machineType),
 *     zones: pool.then(pool => pool.zones),
 *     discSizeGb: pool.then(pool => pool.discSizeGb),
 *     discType: pool.then(pool => pool.discType),
 *     upgradeSettings: pool.then(pool => pool.upgradeSettings),
 * };
 * ```
 */
export function getGcpNodePool(args: GetGcpNodePoolArgs, opts?: pulumi.InvokeOptions): Promise<GetGcpNodePoolResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("duplocloud:index/getGcpNodePool:getGcpNodePool", {
        "accelerators": args.accelerators,
        "name": args.name,
        "taints": args.taints,
        "tenantId": args.tenantId,
    }, opts);
}

/**
 * A collection of arguments for invoking getGcpNodePool.
 */
export interface GetGcpNodePoolArgs {
    accelerators?: inputs.GetGcpNodePoolAccelerator[];
    /**
     * The short name of the node pool.
     */
    name: string;
    taints?: inputs.GetGcpNodePoolTaint[];
    /**
     * The GUID of the tenant that the node pool will be associated with.
     */
    tenantId: string;
}

/**
 * A collection of values returned by getGcpNodePool.
 */
export interface GetGcpNodePoolResult {
    readonly accelerators?: outputs.GetGcpNodePoolAccelerator[];
    /**
     * Whether the nodes will be automatically repaired.
     */
    readonly autoRepair: boolean;
    /**
     * Whether the nodes will be automatically upgraded.
     */
    readonly autoUpgrade: boolean;
    /**
     * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
     * 			If unspecified, the default disk size is 100GB.
     */
    readonly discSizeGb: number;
    /**
     * Type of the disk attached to each node
     * 			If unspecified, the default disk type is 'pd-standard'
     */
    readonly discType: string;
    /**
     * The full name of the node pool.
     */
    readonly fullname: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The image type to use for this node. Note that for a given image type, the latest version of it will be used
     */
    readonly imageType: string;
    /**
     * The initial node count for the pool
     */
    readonly initialNodeCount: number;
    /**
     * Is autoscaling enabled for this node pool.
     */
    readonly isAutoscalingEnabled: boolean;
    /**
     * The map of Kubernetes labels (key/value pairs) to be applied to each node.
     */
    readonly labels: {[key: string]: string};
    /**
     * Parameters that can be configured on Linux nodes
     */
    readonly linuxNodeConfigs: outputs.GetGcpNodePoolLinuxNodeConfig[];
    /**
     * Update strategy of the node pool.
     */
    readonly locationPolicy: string;
    /**
     * The name of a Google Compute Engine machine type.
     * 			If unspecified, the default machine type is e2-medium.
     */
    readonly machineType: string;
    /**
     * Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
     */
    readonly maxNodeCount: number;
    /**
     * The metadata key/value pairs assigned to instances in the cluster.
     */
    readonly metadata: {[key: string]: string};
    /**
     * Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
     */
    readonly minNodeCount: number;
    /**
     * The short name of the node pool.
     */
    readonly name: string;
    /**
     * Logging configuration.
     */
    readonly nodePoolLoggingConfigs: outputs.GetGcpNodePoolNodePoolLoggingConfig[];
    /**
     * The set of Google API scopes to be made available on all of the node VMs under the default service account.
     */
    readonly oauthScopes: string[];
    /**
     * Resource labels associated to node pool
     */
    readonly resourceLabels: {[key: string]: string};
    /**
     * Spot flag for enabling Spot VM
     */
    readonly spot: boolean;
    /**
     * The list of instance tags applied to all nodes.
     * 			Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation.
     * 			Each tag within the list must comply with RFC1035.
     */
    readonly tags: string[];
    readonly taints?: outputs.GetGcpNodePoolTaint[];
    /**
     * The GUID of the tenant that the node pool will be associated with.
     */
    readonly tenantId: string;
    /**
     * Maximum number of nodes for one location in the NodePool. Must be >= minNodeCount.
     */
    readonly totalMaxNodeCount: number;
    /**
     * Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= maxNodeCount.
     */
    readonly totalMinNodeCount: number;
    /**
     * Upgrade settings control disruption and speed of the upgrade.
     */
    readonly upgradeSettings: outputs.GetGcpNodePoolUpgradeSetting[];
    /**
     * The list of Google Compute Engine zones in which the NodePool's nodes should be located.
     */
    readonly zones: string[];
}
/**
 * `duplocloud.GcpNodePool` retrieves a node pool in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const pool = duplocloud.getGcpNodePool({
 *     tenantId: "tenantid",
 *     name: "nodepool-name",
 * });
 * export const nodepoolOutput = {
 *     name: pool.then(pool => pool.name),
 *     machineType: pool.then(pool => pool.machineType),
 *     zones: pool.then(pool => pool.zones),
 *     discSizeGb: pool.then(pool => pool.discSizeGb),
 *     discType: pool.then(pool => pool.discType),
 *     upgradeSettings: pool.then(pool => pool.upgradeSettings),
 * };
 * ```
 */
export function getGcpNodePoolOutput(args: GetGcpNodePoolOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetGcpNodePoolResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("duplocloud:index/getGcpNodePool:getGcpNodePool", {
        "accelerators": args.accelerators,
        "name": args.name,
        "taints": args.taints,
        "tenantId": args.tenantId,
    }, opts);
}

/**
 * A collection of arguments for invoking getGcpNodePool.
 */
export interface GetGcpNodePoolOutputArgs {
    accelerators?: pulumi.Input<pulumi.Input<inputs.GetGcpNodePoolAcceleratorArgs>[]>;
    /**
     * The short name of the node pool.
     */
    name: pulumi.Input<string>;
    taints?: pulumi.Input<pulumi.Input<inputs.GetGcpNodePoolTaintArgs>[]>;
    /**
     * The GUID of the tenant that the node pool will be associated with.
     */
    tenantId: pulumi.Input<string>;
}
