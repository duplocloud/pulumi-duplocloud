// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.AzureTenantKeyVault` manages a azure Key Vault in DuploCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "test",
 *     planId: "test",
 * });
 * const kv = new duplocloud.AzureTenantKeyVault("kv", {
 *     tenantId: tenant.tenantId,
 *     name: "tst-kv001",
 *     skuName: "standard",
 *     purgeProtectionEnabled: true,
 *     softDeleteRetentionDays: 90,
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing Azure Tenant Key Vault
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *VAULT_NAME* is the short name of the Azure Tenant Key Vault
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/azureTenantKeyVault:AzureTenantKeyVault kv *TENANT_ID*&#47;*VAULT_NAME*
 * ```
 */
export class AzureTenantKeyVault extends pulumi.CustomResource {
    /**
     * Get an existing AzureTenantKeyVault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureTenantKeyVaultState, opts?: pulumi.CustomResourceOptions): AzureTenantKeyVault {
        return new AzureTenantKeyVault(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/azureTenantKeyVault:AzureTenantKeyVault';

    /**
     * Returns true if the given object is an instance of AzureTenantKeyVault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureTenantKeyVault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureTenantKeyVault.__pulumiType;
    }

    /**
     * The azure ID of the Key Vault.
     */
    public /*out*/ readonly azureId!: pulumi.Output<string>;
    /**
     * Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
     */
    public /*out*/ readonly enabledForDiskEncryption!: pulumi.Output<boolean>;
    /**
     * Specifies the name of the Key Vault.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Is Purge Protection enabled for this Key Vault?
     */
    public readonly purgeProtectionEnabled!: pulumi.Output<boolean>;
    /**
     * The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
     */
    public readonly skuName!: pulumi.Output<string>;
    /**
     * The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days. Defaults to `90`.
     */
    public readonly softDeleteRetentionDays!: pulumi.Output<number | undefined>;
    /**
     * The GUID of the DuploCloud tenant that the key vault will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * The URI of the Key Vault, used for performing operations on keys and secrets.
     */
    public /*out*/ readonly vaultUri!: pulumi.Output<string>;

    /**
     * Create a AzureTenantKeyVault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureTenantKeyVaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureTenantKeyVaultArgs | AzureTenantKeyVaultState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureTenantKeyVaultState | undefined;
            resourceInputs["azureId"] = state ? state.azureId : undefined;
            resourceInputs["enabledForDiskEncryption"] = state ? state.enabledForDiskEncryption : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["purgeProtectionEnabled"] = state ? state.purgeProtectionEnabled : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["softDeleteRetentionDays"] = state ? state.softDeleteRetentionDays : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["vaultUri"] = state ? state.vaultUri : undefined;
        } else {
            const args = argsOrState as AzureTenantKeyVaultArgs | undefined;
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["purgeProtectionEnabled"] = args ? args.purgeProtectionEnabled : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["softDeleteRetentionDays"] = args ? args.softDeleteRetentionDays : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["azureId"] = undefined /*out*/;
            resourceInputs["enabledForDiskEncryption"] = undefined /*out*/;
            resourceInputs["vaultUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureTenantKeyVault.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AzureTenantKeyVault resources.
 */
export interface AzureTenantKeyVaultState {
    /**
     * The azure ID of the Key Vault.
     */
    azureId?: pulumi.Input<string>;
    /**
     * Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
     */
    enabledForDiskEncryption?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the Key Vault.
     */
    name?: pulumi.Input<string>;
    /**
     * Is Purge Protection enabled for this Key Vault?
     */
    purgeProtectionEnabled?: pulumi.Input<boolean>;
    /**
     * The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
     */
    skuName?: pulumi.Input<string>;
    /**
     * The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days. Defaults to `90`.
     */
    softDeleteRetentionDays?: pulumi.Input<number>;
    /**
     * The GUID of the DuploCloud tenant that the key vault will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The URI of the Key Vault, used for performing operations on keys and secrets.
     */
    vaultUri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AzureTenantKeyVault resource.
 */
export interface AzureTenantKeyVaultArgs {
    /**
     * Specifies the name of the Key Vault.
     */
    name?: pulumi.Input<string>;
    /**
     * Is Purge Protection enabled for this Key Vault?
     */
    purgeProtectionEnabled?: pulumi.Input<boolean>;
    /**
     * The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
     */
    skuName: pulumi.Input<string>;
    /**
     * The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days. Defaults to `90`.
     */
    softDeleteRetentionDays?: pulumi.Input<number>;
    /**
     * The GUID of the DuploCloud tenant that the key vault will be created in.
     */
    tenantId: pulumi.Input<string>;
}
