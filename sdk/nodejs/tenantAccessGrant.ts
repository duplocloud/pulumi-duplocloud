// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.TenantAccessGrant` manages a tenant access grant in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const grantor = duplocloud.getTenant({
 *     name: "tenant1",
 * });
 * const grantee = duplocloud.getTenant({
 *     name: "tenant2",
 * });
 * const dynamodbGrant = new duplocloud.TenantAccessGrant("dynamodbGrant", {
 *     granteeTenantId: grantee.then(grantee => grantee.id),
 *     grantorTenantId: grantor.then(grantor => grantor.id),
 *     grantArea: "dynamodb",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import duplocloud:index/tenantAccessGrant:TenantAccessGrant dynamodbGrant *GRANEE_TENANT_ID*&#47;*GRANTOR_TENANT_ID*&#47;*GRANTED_AREA*
 * ```
 */
export class TenantAccessGrant extends pulumi.CustomResource {
    /**
     * Get an existing TenantAccessGrant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TenantAccessGrantState, opts?: pulumi.CustomResourceOptions): TenantAccessGrant {
        return new TenantAccessGrant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/tenantAccessGrant:TenantAccessGrant';

    /**
     * Returns true if the given object is an instance of TenantAccessGrant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TenantAccessGrant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TenantAccessGrant.__pulumiType;
    }

    /**
     * The area the grant allows access to. Currently supported: ['s3', 'dynamodb', 'kms']
     */
    public readonly grantArea!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that will receive the granted access.
     */
    public readonly granteeTenantId!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that will grant the access.
     */
    public readonly grantorTenantId!: pulumi.Output<string>;

    /**
     * Create a TenantAccessGrant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TenantAccessGrantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TenantAccessGrantArgs | TenantAccessGrantState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TenantAccessGrantState | undefined;
            resourceInputs["grantArea"] = state ? state.grantArea : undefined;
            resourceInputs["granteeTenantId"] = state ? state.granteeTenantId : undefined;
            resourceInputs["grantorTenantId"] = state ? state.grantorTenantId : undefined;
        } else {
            const args = argsOrState as TenantAccessGrantArgs | undefined;
            if ((!args || args.grantArea === undefined) && !opts.urn) {
                throw new Error("Missing required property 'grantArea'");
            }
            if ((!args || args.granteeTenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'granteeTenantId'");
            }
            if ((!args || args.grantorTenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'grantorTenantId'");
            }
            resourceInputs["grantArea"] = args ? args.grantArea : undefined;
            resourceInputs["granteeTenantId"] = args ? args.granteeTenantId : undefined;
            resourceInputs["grantorTenantId"] = args ? args.grantorTenantId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TenantAccessGrant.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TenantAccessGrant resources.
 */
export interface TenantAccessGrantState {
    /**
     * The area the grant allows access to. Currently supported: ['s3', 'dynamodb', 'kms']
     */
    grantArea?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that will receive the granted access.
     */
    granteeTenantId?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that will grant the access.
     */
    grantorTenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TenantAccessGrant resource.
 */
export interface TenantAccessGrantArgs {
    /**
     * The area the grant allows access to. Currently supported: ['s3', 'dynamodb', 'kms']
     */
    grantArea: pulumi.Input<string>;
    /**
     * The GUID of the tenant that will receive the granted access.
     */
    granteeTenantId: pulumi.Input<string>;
    /**
     * The GUID of the tenant that will grant the access.
     */
    grantorTenantId: pulumi.Input<string>;
}
