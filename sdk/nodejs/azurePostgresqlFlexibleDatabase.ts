// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.AzurePostgresqlFlexibleDatabase` manages an azure postgresql flexible  database in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const db = new duplocloud.AzurePostgresqlFlexibleDatabase("db", {
 *     tenantId: myapp.tenantId,
 *     name: "psqlflex",
 *     serviceTier: "Burstable",
 *     hardware: "Standard_B2ms",
 *     highAvailability: "Disabled",
 *     storageGb: 64,
 *     version: "16",
 *     subnet: "subnet",
 *     administratorLogin: "tftry",
 *     administratorLoginPassword: "trynew#1",
 *     backupRetentionDays: 7,
 *     geoRedundantBackup: "Enabled",
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing Azure PostgreSQL Database
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *SHORT_NAME* is the short name of the Azure PostgreSQL Database
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/azurePostgresqlFlexibleDatabase:AzurePostgresqlFlexibleDatabase myPostgreSQLDatabase *TENANT_ID*&#47;*SHORT_NAME*
 * ```
 */
export class AzurePostgresqlFlexibleDatabase extends pulumi.CustomResource {
    /**
     * Get an existing AzurePostgresqlFlexibleDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzurePostgresqlFlexibleDatabaseState, opts?: pulumi.CustomResourceOptions): AzurePostgresqlFlexibleDatabase {
        return new AzurePostgresqlFlexibleDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/azurePostgresqlFlexibleDatabase:AzurePostgresqlFlexibleDatabase';

    /**
     * Returns true if the given object is an instance of AzurePostgresqlFlexibleDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzurePostgresqlFlexibleDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzurePostgresqlFlexibleDatabase.__pulumiType;
    }

    /**
     * The Administrator Login for the PostgreSQL Server.
     */
    public readonly administratorLogin!: pulumi.Output<string>;
    /**
     * The Password associated with the `administratorLogin` for the PostgreSQL Server.
     */
    public readonly administratorLoginPassword!: pulumi.Output<string>;
    /**
     * Backup retention days for the server, supported values are between `7` and `35` days. Note: Updation allowed on updating with higher retention days value from current
     */
    public readonly backupRetentionDays!: pulumi.Output<number>;
    /**
     * Turn Geo-redundant server backups Enabled/Disabled. To enable or disable geo*redundant*backup resource need to be recreated
     */
    public readonly geoRedundantBackup!: pulumi.Output<string>;
    /**
     * Specify compute based on service tier by prepending Standard_ keyword from following document https://azure.microsoft.com/en-in/pricing/details/postgresql/flexible-server
     */
    public readonly hardware!: pulumi.Output<string>;
    /**
     * High availability options— Disabled, SameZone, and ZoneRedundant — are applicable if the service tier is set to GeneralPurpose or MemoryOptimized. Defaults to `Disabled`.
     */
    public readonly highAvailability!: pulumi.Output<string | undefined>;
    public /*out*/ readonly location!: pulumi.Output<string>;
    /**
     * Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specify service*tier among `Burstable`, `GeneralPurpose` or `MemoryOptimized`. Note: should disable high*availability before updating to Burstable
     */
    public readonly serviceTier!: pulumi.Output<string>;
    /**
     * Max storage allowed for a server. Possible values are `32`,`64`,`128`,`256`,`512`,`1024`,`2048`,`4096`,`8192`,`16384`,`32768` GB. Note: Updation allowed on updating with higher storage size from current
     */
    public readonly storageGb!: pulumi.Output<number>;
    public readonly subnet!: pulumi.Output<string>;
    public /*out*/ readonly tags!: pulumi.Output<{[key: string]: string}>;
    /**
     * The GUID of the tenant that the azure postgresql database will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Specifies the version of PostgreSQL Flexible DB to use. Valid values are `16`,`15`,`14`,`13`,`12`,`11`. Changing this forces a new resource to be created.
     */
    public readonly version!: pulumi.Output<string>;
    /**
     * Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.
     */
    public readonly waitUntilReady!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AzurePostgresqlFlexibleDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzurePostgresqlFlexibleDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzurePostgresqlFlexibleDatabaseArgs | AzurePostgresqlFlexibleDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzurePostgresqlFlexibleDatabaseState | undefined;
            resourceInputs["administratorLogin"] = state ? state.administratorLogin : undefined;
            resourceInputs["administratorLoginPassword"] = state ? state.administratorLoginPassword : undefined;
            resourceInputs["backupRetentionDays"] = state ? state.backupRetentionDays : undefined;
            resourceInputs["geoRedundantBackup"] = state ? state.geoRedundantBackup : undefined;
            resourceInputs["hardware"] = state ? state.hardware : undefined;
            resourceInputs["highAvailability"] = state ? state.highAvailability : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serviceTier"] = state ? state.serviceTier : undefined;
            resourceInputs["storageGb"] = state ? state.storageGb : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["waitUntilReady"] = state ? state.waitUntilReady : undefined;
        } else {
            const args = argsOrState as AzurePostgresqlFlexibleDatabaseArgs | undefined;
            if ((!args || args.administratorLogin === undefined) && !opts.urn) {
                throw new Error("Missing required property 'administratorLogin'");
            }
            if ((!args || args.administratorLoginPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'administratorLoginPassword'");
            }
            if ((!args || args.hardware === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hardware'");
            }
            if ((!args || args.serviceTier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceTier'");
            }
            if ((!args || args.subnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnet'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["administratorLogin"] = args ? args.administratorLogin : undefined;
            resourceInputs["administratorLoginPassword"] = args?.administratorLoginPassword ? pulumi.secret(args.administratorLoginPassword) : undefined;
            resourceInputs["backupRetentionDays"] = args ? args.backupRetentionDays : undefined;
            resourceInputs["geoRedundantBackup"] = args ? args.geoRedundantBackup : undefined;
            resourceInputs["hardware"] = args ? args.hardware : undefined;
            resourceInputs["highAvailability"] = args ? args.highAvailability : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serviceTier"] = args ? args.serviceTier : undefined;
            resourceInputs["storageGb"] = args ? args.storageGb : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["waitUntilReady"] = args ? args.waitUntilReady : undefined;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["administratorLoginPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AzurePostgresqlFlexibleDatabase.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AzurePostgresqlFlexibleDatabase resources.
 */
export interface AzurePostgresqlFlexibleDatabaseState {
    /**
     * The Administrator Login for the PostgreSQL Server.
     */
    administratorLogin?: pulumi.Input<string>;
    /**
     * The Password associated with the `administratorLogin` for the PostgreSQL Server.
     */
    administratorLoginPassword?: pulumi.Input<string>;
    /**
     * Backup retention days for the server, supported values are between `7` and `35` days. Note: Updation allowed on updating with higher retention days value from current
     */
    backupRetentionDays?: pulumi.Input<number>;
    /**
     * Turn Geo-redundant server backups Enabled/Disabled. To enable or disable geo*redundant*backup resource need to be recreated
     */
    geoRedundantBackup?: pulumi.Input<string>;
    /**
     * Specify compute based on service tier by prepending Standard_ keyword from following document https://azure.microsoft.com/en-in/pricing/details/postgresql/flexible-server
     */
    hardware?: pulumi.Input<string>;
    /**
     * High availability options— Disabled, SameZone, and ZoneRedundant — are applicable if the service tier is set to GeneralPurpose or MemoryOptimized. Defaults to `Disabled`.
     */
    highAvailability?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.
     */
    name?: pulumi.Input<string>;
    /**
     * Specify service*tier among `Burstable`, `GeneralPurpose` or `MemoryOptimized`. Note: should disable high*availability before updating to Burstable
     */
    serviceTier?: pulumi.Input<string>;
    /**
     * Max storage allowed for a server. Possible values are `32`,`64`,`128`,`256`,`512`,`1024`,`2048`,`4096`,`8192`,`16384`,`32768` GB. Note: Updation allowed on updating with higher storage size from current
     */
    storageGb?: pulumi.Input<number>;
    subnet?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The GUID of the tenant that the azure postgresql database will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Specifies the version of PostgreSQL Flexible DB to use. Valid values are `16`,`15`,`14`,`13`,`12`,`11`. Changing this forces a new resource to be created.
     */
    version?: pulumi.Input<string>;
    /**
     * Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AzurePostgresqlFlexibleDatabase resource.
 */
export interface AzurePostgresqlFlexibleDatabaseArgs {
    /**
     * The Administrator Login for the PostgreSQL Server.
     */
    administratorLogin: pulumi.Input<string>;
    /**
     * The Password associated with the `administratorLogin` for the PostgreSQL Server.
     */
    administratorLoginPassword: pulumi.Input<string>;
    /**
     * Backup retention days for the server, supported values are between `7` and `35` days. Note: Updation allowed on updating with higher retention days value from current
     */
    backupRetentionDays?: pulumi.Input<number>;
    /**
     * Turn Geo-redundant server backups Enabled/Disabled. To enable or disable geo*redundant*backup resource need to be recreated
     */
    geoRedundantBackup?: pulumi.Input<string>;
    /**
     * Specify compute based on service tier by prepending Standard_ keyword from following document https://azure.microsoft.com/en-in/pricing/details/postgresql/flexible-server
     */
    hardware: pulumi.Input<string>;
    /**
     * High availability options— Disabled, SameZone, and ZoneRedundant — are applicable if the service tier is set to GeneralPurpose or MemoryOptimized. Defaults to `Disabled`.
     */
    highAvailability?: pulumi.Input<string>;
    /**
     * Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created. This needs to be globally unique within Azure.
     */
    name?: pulumi.Input<string>;
    /**
     * Specify service*tier among `Burstable`, `GeneralPurpose` or `MemoryOptimized`. Note: should disable high*availability before updating to Burstable
     */
    serviceTier: pulumi.Input<string>;
    /**
     * Max storage allowed for a server. Possible values are `32`,`64`,`128`,`256`,`512`,`1024`,`2048`,`4096`,`8192`,`16384`,`32768` GB. Note: Updation allowed on updating with higher storage size from current
     */
    storageGb?: pulumi.Input<number>;
    subnet: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the azure postgresql database will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Specifies the version of PostgreSQL Flexible DB to use. Valid values are `16`,`15`,`14`,`13`,`12`,`11`. Changing this forces a new resource to be created.
     */
    version: pulumi.Input<string>;
    /**
     * Whether or not to wait until PostgreSQL Server instance to be ready, after creation. Defaults to `true`.
     */
    waitUntilReady?: pulumi.Input<boolean>;
}
