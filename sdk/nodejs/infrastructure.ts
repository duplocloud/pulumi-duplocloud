// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### Create a DuploCloud infrastructure named nonprod
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const infra = new duplocloud.Infrastructure("infra", {
 *     infraName: "nonprod",
 *     cloud: 0,
 *     region: "us-west-2",
 *     enableK8Cluster: true,
 *     addressPrefix: "10.11.0.0/16",
 * });
 * ```
 *
 * ### Create a DuploCloud infrastructure named nonprod with cidr 10.34.0.0/16 in us-west-2 region
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const infra = new duplocloud.Infrastructure("infra", {
 *     infraName: "nonprod",
 *     cloud: 0,
 *     region: "us-west-2",
 *     enableK8Cluster: true,
 *     addressPrefix: "10.34.0.0/16",
 * });
 * ```
 *
 * ### Create a DuploCloud infrastructure named nonprod with cidr 10.30.0.0/16 in us-east-1 region with EKS cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const infra = new duplocloud.Infrastructure("infra", {
 *     infraName: "nonprod",
 *     cloud: 0,
 *     region: "us-east-1",
 *     azcount: 2,
 *     enableK8Cluster: true,
 *     addressPrefix: "10.30.0.0/16",
 * });
 * ```
 *
 * ### Create a DuploCloud infrastructure named 'prod' in the us-east-2 region, with a VPC CIDR of 10.30.0.0/16, a subnet mask of 24, and EKS cluster enabled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const infra = new duplocloud.Infrastructure("infra", {
 *     infraName: "prod",
 *     cloud: 0,
 *     region: "us-east-2",
 *     azcount: 2,
 *     enableK8Cluster: true,
 *     addressPrefix: "10.30.0.0/16",
 *     subnetCidr: 24,
 * });
 * ```
 *
 * ### Create a DuploCloud infrastructure named 'prod' in the us-east-2 region, with a VPC CIDR of 10.30.0.0/16, a subnet mask of 24, and an EKS cluster disabled with an ingress controller
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const prodInfra = new duplocloud.Infrastructure("prod_infra", {
 *     infraName: "prod",
 *     cloud: 0,
 *     region: "us-east-2",
 *     azcount: 2,
 *     enableK8Cluster: false,
 *     addressPrefix: "10.30.0.0/16",
 *     subnetCidr: 24,
 * });
 * const settings = new duplocloud.InfrastructureSetting("settings", {
 *     infraName: prodInfra.infraName,
 *     settings: [{
 *         key: "EnableAwsAlbIngress",
 *         value: "true",
 *     }],
 * });
 * ```
 *
 * ### Create a DuploCloud infrastructure named 'nonprod' in the us-west-2 region, with a VPC CIDR of 10.60.0.0/16, a subnet mask of 24, and an EKS cluster enabled with an autoscaler
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const nonprodInfra = new duplocloud.Infrastructure("nonprod_infra", {
 *     infraName: "nonprod",
 *     cloud: 0,
 *     region: "us-west-2",
 *     azcount: 2,
 *     enableK8Cluster: true,
 *     addressPrefix: "10.60.0.0/16",
 *     subnetCidr: 24,
 * });
 * const nonprodSettings = new duplocloud.InfrastructureSetting("nonprod_settings", {
 *     infraName: nonprodInfra.infraName,
 *     settings: [{
 *         key: "EnableClusterAutoscaler",
 *         value: "true",
 *     }],
 * });
 * ```
 *
 * ### Create a DuploCloud infrastructure named 'nonprod' in the us-west-2 region, with a VPC CIDR of 10.60.0.0/16, a subnet mask of 24, and an EKS cluster enabled with an autoscaler, ingress controller, and Secrets Store CSI Driver
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const nonprodInfra = new duplocloud.Infrastructure("nonprod_infra", {
 *     infraName: "nonprod",
 *     cloud: 0,
 *     region: "us-west-2",
 *     azcount: 2,
 *     enableK8Cluster: true,
 *     addressPrefix: "10.60.0.0/16",
 *     subnetCidr: 24,
 * });
 * const nonprodSettings = new duplocloud.InfrastructureSetting("nonprod_settings", {
 *     infraName: nonprodInfra.infraName,
 *     settings: [
 *         {
 *             key: "EnableClusterAutoscaler",
 *             value: "true",
 *         },
 *         {
 *             key: "EnableAwsAlbIngress",
 *             value: "true",
 *         },
 *         {
 *             key: "EnableSecretCsiDriver",
 *             value: "true",
 *         },
 *     ],
 * });
 * ```
 *
 * ### Create a DuploCloud infrastructure named 'prod' in the us-east-2 region, with a VPC CIDR of 10.50.0.0/16, a subnet mask of 22, and ECS cluster enabled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const infra = new duplocloud.Infrastructure("infra", {
 *     infraName: "prod",
 *     cloud: 0,
 *     region: "us-east-2",
 *     azcount: 2,
 *     enableEcsCluster: true,
 *     addressPrefix: "10.50.0.0/16",
 *     subnetCidr: 22,
 * });
 * ```
 *
 * ### Create a DuploCloud infrastructure named 'prod' in the us-east-2 region, with a VPC CIDR of 10.49.0.0/16, a subnet mask of 24, and EKS, ECS cluster enabled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const infra = new duplocloud.Infrastructure("infra", {
 *     infraName: "prod",
 *     cloud: 0,
 *     region: "us-east-2",
 *     azcount: 2,
 *     enableK8Cluster: true,
 *     enableEcsCluster: true,
 *     addressPrefix: "10.49.0.0/16",
 *     subnetCidr: 24,
 * });
 * ```
 *
 * ### Set up a DuploCloud infrastructure named 'nonprod' in the us-west-2 region, with a VPC CIDR of 10.60.0.0/16, a subnet mask of 24, and an EKS cluster configured with an autoscaler, ingress controller, and Secrets Store CSI Driver using variables and dynamic blocks.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const config = new pulumi.Config();
 * const infraSettings = config.getObject<Array<{key?: string, value?: string}>>("infraSettings") || [
 *     {
 *         key: "EnableAwsAlbIngress",
 *         value: "true",
 *     },
 *     {
 *         key: "EnableClusterAutoscaler",
 *         value: "true",
 *     },
 *     {
 *         key: "EnableSecretCsiDriver",
 *         value: "true",
 *     },
 * ];
 * const nonprodInfra = new duplocloud.Infrastructure("nonprod_infra", {
 *     infraName: "nonprod",
 *     cloud: 0,
 *     region: "us-west-2",
 *     azcount: 2,
 *     enableK8Cluster: true,
 *     addressPrefix: "10.60.0.0/16",
 *     subnetCidr: 22,
 * });
 * const nonprodSettings = new duplocloud.InfrastructureSetting("nonprod_settings", {
 *     settings: infraSettings.map((v, k) => ({key: k, value: v})).map(entry => ({
 *         key: entry.value.key,
 *         value: entry.value.value,
 *     })),
 *     infraName: nonprodInfra.infraName,
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing infrastructure
 *
 *  - *NAME* is the infrastructure name
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/infrastructure:Infrastructure myinfra v2/admin/InfrastructureV2/*NAME*
 * ```
 */
export class Infrastructure extends pulumi.CustomResource {
    /**
     * Get an existing Infrastructure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InfrastructureState, opts?: pulumi.CustomResourceOptions): Infrastructure {
        return new Infrastructure(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/infrastructure:Infrastructure';

    /**
     * Returns true if the given object is an instance of Infrastructure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Infrastructure {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Infrastructure.__pulumiType;
    }

    /**
     * The cloud account ID.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * The CIDR to use for the VPC or VNet.
     */
    public readonly addressPrefix!: pulumi.Output<string>;
    /**
     * A complete list of configuration settings for this infrastructure, even ones not being managed by this resource.
     */
    public /*out*/ readonly allSettings!: pulumi.Output<outputs.InfrastructureAllSetting[]>;
    /**
     * The number of availability zones. Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.
     */
    public readonly azcount!: pulumi.Output<number | undefined>;
    /**
     * The numerical index of cloud provider to use for the infrastructure. Should be one of: - `0` : AWS - `2` : Azure - `3` :
     * Google
     */
    public readonly cloud!: pulumi.Output<number | undefined>;
    /**
     * cluster IP CIDR defines a private IP address range used for internal Kubernetes services.
     */
    public readonly clusterIpCidr!: pulumi.Output<string>;
    /**
     * A list of configuration settings to apply on creation, expressed as key / value pairs.
     *
     * @deprecated The customData argument is only applied on creation, and is deprecated in favor of the settings argument.
     */
    public readonly customDatas!: pulumi.Output<outputs.InfrastructureCustomData[] | undefined>;
    /**
     * Whether or not this resource should delete any settings not specified by this resource. **WARNING:** It is not
     * recommended to change the default value of `false`.
     */
    public readonly deleteUnspecifiedSettings!: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not to enable container insights for an ECS cluster.
     */
    public readonly enableContainerInsights!: pulumi.Output<boolean>;
    /**
     * Whether or not to provision an ECS cluster.
     */
    public readonly enableEcsCluster!: pulumi.Output<boolean>;
    /**
     * Whether or not to provision a kubernetes cluster.
     */
    public readonly enableK8Cluster!: pulumi.Output<boolean>;
    /**
     * The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.
     */
    public readonly infraName!: pulumi.Output<string>;
    /**
     * Whether or not to make GKE with autopilot.
     */
    public readonly isServerlessKubernetes!: pulumi.Output<boolean>;
    /**
     * The private subnets for the VPC or VNet.
     */
    public /*out*/ readonly privateSubnets!: pulumi.Output<outputs.InfrastructurePrivateSubnet[]>;
    /**
     * The public subnets for the VPC or VNet.
     */
    public /*out*/ readonly publicSubnets!: pulumi.Output<outputs.InfrastructurePublicSubnet[]>;
    /**
     * The cloud provider region. The Duplo portal must have already been configured to support this region.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The security groups for the VPC or VNet.
     */
    public /*out*/ readonly securityGroups!: pulumi.Output<outputs.InfrastructureSecurityGroup[]>;
    /**
     * A list of configuration settings to manage, expressed as key / value pairs.
     */
    public readonly settings!: pulumi.Output<outputs.InfrastructureSetting[] | undefined>;
    /**
     * A list of configuration setting key being managed by this resource.
     */
    public /*out*/ readonly specifiedSettings!: pulumi.Output<string[]>;
    /**
     * The status of the infrastructure.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The address prefixe to use for the subnet. This is applicable only for Azure
     */
    public readonly subnetAddressPrefix!: pulumi.Output<string>;
    /**
     * The CIDR subnet size (in bits) for the automatically created subnets. This is applicable only for AWS.
     */
    public readonly subnetCidr!: pulumi.Output<number | undefined>;
    /**
     * The full name of the subnet. This is applicable only for Azure.
     */
    public /*out*/ readonly subnetFullname!: pulumi.Output<string>;
    /**
     * The name of the subnet. This is applicable only for Azure.
     */
    public readonly subnetName!: pulumi.Output<string>;
    /**
     * The VPC or VNet ID.
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    /**
     * The VPC or VNet name.
     */
    public /*out*/ readonly vpcName!: pulumi.Output<string>;
    /**
     * Whether or not to wait until Duplo has destroyed the infrastructure.
     */
    public readonly waitUntilDeleted!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Infrastructure resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InfrastructureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InfrastructureArgs | InfrastructureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InfrastructureState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["addressPrefix"] = state ? state.addressPrefix : undefined;
            resourceInputs["allSettings"] = state ? state.allSettings : undefined;
            resourceInputs["azcount"] = state ? state.azcount : undefined;
            resourceInputs["cloud"] = state ? state.cloud : undefined;
            resourceInputs["clusterIpCidr"] = state ? state.clusterIpCidr : undefined;
            resourceInputs["customDatas"] = state ? state.customDatas : undefined;
            resourceInputs["deleteUnspecifiedSettings"] = state ? state.deleteUnspecifiedSettings : undefined;
            resourceInputs["enableContainerInsights"] = state ? state.enableContainerInsights : undefined;
            resourceInputs["enableEcsCluster"] = state ? state.enableEcsCluster : undefined;
            resourceInputs["enableK8Cluster"] = state ? state.enableK8Cluster : undefined;
            resourceInputs["infraName"] = state ? state.infraName : undefined;
            resourceInputs["isServerlessKubernetes"] = state ? state.isServerlessKubernetes : undefined;
            resourceInputs["privateSubnets"] = state ? state.privateSubnets : undefined;
            resourceInputs["publicSubnets"] = state ? state.publicSubnets : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["specifiedSettings"] = state ? state.specifiedSettings : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetAddressPrefix"] = state ? state.subnetAddressPrefix : undefined;
            resourceInputs["subnetCidr"] = state ? state.subnetCidr : undefined;
            resourceInputs["subnetFullname"] = state ? state.subnetFullname : undefined;
            resourceInputs["subnetName"] = state ? state.subnetName : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vpcName"] = state ? state.vpcName : undefined;
            resourceInputs["waitUntilDeleted"] = state ? state.waitUntilDeleted : undefined;
        } else {
            const args = argsOrState as InfrastructureArgs | undefined;
            if ((!args || args.addressPrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'addressPrefix'");
            }
            if ((!args || args.enableK8Cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableK8Cluster'");
            }
            if ((!args || args.infraName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'infraName'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["addressPrefix"] = args ? args.addressPrefix : undefined;
            resourceInputs["azcount"] = args ? args.azcount : undefined;
            resourceInputs["cloud"] = args ? args.cloud : undefined;
            resourceInputs["clusterIpCidr"] = args ? args.clusterIpCidr : undefined;
            resourceInputs["customDatas"] = args ? args.customDatas : undefined;
            resourceInputs["deleteUnspecifiedSettings"] = args ? args.deleteUnspecifiedSettings : undefined;
            resourceInputs["enableContainerInsights"] = args ? args.enableContainerInsights : undefined;
            resourceInputs["enableEcsCluster"] = args ? args.enableEcsCluster : undefined;
            resourceInputs["enableK8Cluster"] = args ? args.enableK8Cluster : undefined;
            resourceInputs["infraName"] = args ? args.infraName : undefined;
            resourceInputs["isServerlessKubernetes"] = args ? args.isServerlessKubernetes : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["subnetAddressPrefix"] = args ? args.subnetAddressPrefix : undefined;
            resourceInputs["subnetCidr"] = args ? args.subnetCidr : undefined;
            resourceInputs["subnetName"] = args ? args.subnetName : undefined;
            resourceInputs["waitUntilDeleted"] = args ? args.waitUntilDeleted : undefined;
            resourceInputs["allSettings"] = undefined /*out*/;
            resourceInputs["privateSubnets"] = undefined /*out*/;
            resourceInputs["publicSubnets"] = undefined /*out*/;
            resourceInputs["securityGroups"] = undefined /*out*/;
            resourceInputs["specifiedSettings"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subnetFullname"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
            resourceInputs["vpcName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Infrastructure.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Infrastructure resources.
 */
export interface InfrastructureState {
    /**
     * The cloud account ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The CIDR to use for the VPC or VNet.
     */
    addressPrefix?: pulumi.Input<string>;
    /**
     * A complete list of configuration settings for this infrastructure, even ones not being managed by this resource.
     */
    allSettings?: pulumi.Input<pulumi.Input<inputs.InfrastructureAllSetting>[]>;
    /**
     * The number of availability zones. Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.
     */
    azcount?: pulumi.Input<number>;
    /**
     * The numerical index of cloud provider to use for the infrastructure. Should be one of: - `0` : AWS - `2` : Azure - `3` :
     * Google
     */
    cloud?: pulumi.Input<number>;
    /**
     * cluster IP CIDR defines a private IP address range used for internal Kubernetes services.
     */
    clusterIpCidr?: pulumi.Input<string>;
    /**
     * A list of configuration settings to apply on creation, expressed as key / value pairs.
     *
     * @deprecated The customData argument is only applied on creation, and is deprecated in favor of the settings argument.
     */
    customDatas?: pulumi.Input<pulumi.Input<inputs.InfrastructureCustomData>[]>;
    /**
     * Whether or not this resource should delete any settings not specified by this resource. **WARNING:** It is not
     * recommended to change the default value of `false`.
     */
    deleteUnspecifiedSettings?: pulumi.Input<boolean>;
    /**
     * Whether or not to enable container insights for an ECS cluster.
     */
    enableContainerInsights?: pulumi.Input<boolean>;
    /**
     * Whether or not to provision an ECS cluster.
     */
    enableEcsCluster?: pulumi.Input<boolean>;
    /**
     * Whether or not to provision a kubernetes cluster.
     */
    enableK8Cluster?: pulumi.Input<boolean>;
    /**
     * The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.
     */
    infraName?: pulumi.Input<string>;
    /**
     * Whether or not to make GKE with autopilot.
     */
    isServerlessKubernetes?: pulumi.Input<boolean>;
    /**
     * The private subnets for the VPC or VNet.
     */
    privateSubnets?: pulumi.Input<pulumi.Input<inputs.InfrastructurePrivateSubnet>[]>;
    /**
     * The public subnets for the VPC or VNet.
     */
    publicSubnets?: pulumi.Input<pulumi.Input<inputs.InfrastructurePublicSubnet>[]>;
    /**
     * The cloud provider region. The Duplo portal must have already been configured to support this region.
     */
    region?: pulumi.Input<string>;
    /**
     * The security groups for the VPC or VNet.
     */
    securityGroups?: pulumi.Input<pulumi.Input<inputs.InfrastructureSecurityGroup>[]>;
    /**
     * A list of configuration settings to manage, expressed as key / value pairs.
     */
    settings?: pulumi.Input<pulumi.Input<inputs.InfrastructureSetting>[]>;
    /**
     * A list of configuration setting key being managed by this resource.
     */
    specifiedSettings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status of the infrastructure.
     */
    status?: pulumi.Input<string>;
    /**
     * The address prefixe to use for the subnet. This is applicable only for Azure
     */
    subnetAddressPrefix?: pulumi.Input<string>;
    /**
     * The CIDR subnet size (in bits) for the automatically created subnets. This is applicable only for AWS.
     */
    subnetCidr?: pulumi.Input<number>;
    /**
     * The full name of the subnet. This is applicable only for Azure.
     */
    subnetFullname?: pulumi.Input<string>;
    /**
     * The name of the subnet. This is applicable only for Azure.
     */
    subnetName?: pulumi.Input<string>;
    /**
     * The VPC or VNet ID.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The VPC or VNet name.
     */
    vpcName?: pulumi.Input<string>;
    /**
     * Whether or not to wait until Duplo has destroyed the infrastructure.
     */
    waitUntilDeleted?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Infrastructure resource.
 */
export interface InfrastructureArgs {
    /**
     * The cloud account ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The CIDR to use for the VPC or VNet.
     */
    addressPrefix: pulumi.Input<string>;
    /**
     * The number of availability zones. Must be one of: `2`, `3`, or `4`. This is applicable only for AWS.
     */
    azcount?: pulumi.Input<number>;
    /**
     * The numerical index of cloud provider to use for the infrastructure. Should be one of: - `0` : AWS - `2` : Azure - `3` :
     * Google
     */
    cloud?: pulumi.Input<number>;
    /**
     * cluster IP CIDR defines a private IP address range used for internal Kubernetes services.
     */
    clusterIpCidr?: pulumi.Input<string>;
    /**
     * A list of configuration settings to apply on creation, expressed as key / value pairs.
     *
     * @deprecated The customData argument is only applied on creation, and is deprecated in favor of the settings argument.
     */
    customDatas?: pulumi.Input<pulumi.Input<inputs.InfrastructureCustomData>[]>;
    /**
     * Whether or not this resource should delete any settings not specified by this resource. **WARNING:** It is not
     * recommended to change the default value of `false`.
     */
    deleteUnspecifiedSettings?: pulumi.Input<boolean>;
    /**
     * Whether or not to enable container insights for an ECS cluster.
     */
    enableContainerInsights?: pulumi.Input<boolean>;
    /**
     * Whether or not to provision an ECS cluster.
     */
    enableEcsCluster?: pulumi.Input<boolean>;
    /**
     * Whether or not to provision a kubernetes cluster.
     */
    enableK8Cluster: pulumi.Input<boolean>;
    /**
     * The name of the infrastructure. Infrastructure names are globally unique and less than 13 characters.
     */
    infraName: pulumi.Input<string>;
    /**
     * Whether or not to make GKE with autopilot.
     */
    isServerlessKubernetes?: pulumi.Input<boolean>;
    /**
     * The cloud provider region. The Duplo portal must have already been configured to support this region.
     */
    region: pulumi.Input<string>;
    /**
     * A list of configuration settings to manage, expressed as key / value pairs.
     */
    settings?: pulumi.Input<pulumi.Input<inputs.InfrastructureSetting>[]>;
    /**
     * The address prefixe to use for the subnet. This is applicable only for Azure
     */
    subnetAddressPrefix?: pulumi.Input<string>;
    /**
     * The CIDR subnet size (in bits) for the automatically created subnets. This is applicable only for AWS.
     */
    subnetCidr?: pulumi.Input<number>;
    /**
     * The name of the subnet. This is applicable only for Azure.
     */
    subnetName?: pulumi.Input<string>;
    /**
     * Whether or not to wait until Duplo has destroyed the infrastructure.
     */
    waitUntilDeleted?: pulumi.Input<boolean>;
}
