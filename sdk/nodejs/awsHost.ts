// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### Deploy a host which will be used for DuploCloud platform's native container agent to deploy native containers
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Before creating a host, you must first set up the infrastructure without an eks cluster. Then, you must create a tenant inside the infra. Below is the resource for creating the infrastructure.
 * const infra = new duplocloud.Infrastructure("infra", {
 *     infraName: "dev",
 *     cloud: 0,
 *     region: "us-east-1",
 *     enableK8Cluster: false,
 *     addressPrefix: "10.13.0.0/16",
 * });
 * // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "dev",
 *     planId: infra.infraName,
 * });
 * // Create a data source to retrieve the Machine Image ID to be used by the host
 * const image = duplocloud.getNativeHostImageOutput({
 *     tenantId: tenant.tenantId,
 *     isKubernetes: false,
 * });
 * const native = new duplocloud.AwsHost("native", {
 *     tenantId: tenant.tenantId,
 *     friendlyName: "host01",
 *     imageId: image.apply(image => image.imageId),
 *     capacity: "t3a.medium",
 *     agentPlatform: 0,
 *     zone: 0,
 *     userAccount: tenant.accountName,
 *     metadatas: [{
 *         key: "OsDiskSize",
 *         value: "20",
 *     }],
 * });
 * ```
 *
 * ### Create an EKS worker node for deployment of the Kubernetes applications
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Before creating the EKS worker node, you must first set up the infrastructure with EKS cluster enabled and a tenant. Below is the resource for creating the infrastructure.
 * const infra = new duplocloud.Infrastructure("infra", {
 *     infraName: "dev",
 *     cloud: 0,
 *     region: "us-east-1",
 *     enableK8Cluster: true,
 *     addressPrefix: "10.13.0.0/16",
 * });
 * // Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.
 * const tenant = new duplocloud.Tenant("tenant", {
 *     accountName: "dev",
 *     planId: infra.infraName,
 * });
 * // Create a data source to retrieve the Machine Image ID to be used by the host
 * const image = duplocloud.getNativeHostImageOutput({
 *     tenantId: tenant.tenantId,
 *     isKubernetes: true,
 * });
 * const host = new duplocloud.AwsHost("host", {
 *     tenantId: tenant.tenantId,
 *     friendlyName: "host02",
 *     imageId: image.apply(image => image.imageId),
 *     capacity: "t3a.small",
 *     agentPlatform: 7,
 *     zone: 0,
 *     userAccount: tenant.accountName,
 *     keypairType: 1,
 * });
 * ```
 *
 * ### Create an EKS worker node inside the 'dev' tenant for deployment of the Kubernetes applications, with instance metadata service
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * // Ensure the 'dev' tenant is already created before setting up the EKS worker node.
 * const tenant = duplocloud.getTenant({
 *     name: "dev",
 * });
 * const image = tenant.then(tenant => duplocloud.getNativeHostImage({
 *     tenantId: tenant.id,
 *     isKubernetes: true,
 * }));
 * const host = new duplocloud.AwsHost("host", {
 *     tenantId: tenant.then(tenant => tenant.id),
 *     friendlyName: "host03",
 *     imageId: image.then(image => image.imageId),
 *     capacity: "t3.small",
 *     agentPlatform: 7,
 *     zone: 0,
 *     userAccount: tenant.then(tenant => tenant.name),
 *     keypairType: 1,
 *     metadatas: [
 *         {
 *             key: "OsDiskSize",
 *             value: "20",
 *         },
 *         {
 *             key: "MetadataServiceOption",
 *             value: "enabled_v2_only",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing AWS host
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *INSTANCE_ID* is the AWS EC2 instance ID
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/awsHost:AwsHost myhost v2/subscriptions/*TENANT_ID*&#47;NativeHostV2/*INSTANCE_ID*
 * ```
 */
export class AwsHost extends pulumi.CustomResource {
    /**
     * Get an existing AwsHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsHostState, opts?: pulumi.CustomResourceOptions): AwsHost {
        return new AwsHost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/awsHost:AwsHost';

    /**
     * Returns true if the given object is an instance of AwsHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsHost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsHost.__pulumiType;
    }

    /**
     * The numeric ID of the container agent pool that this host is added to.
     */
    public readonly agentPlatform!: pulumi.Output<number | undefined>;
    /**
     * Whether or not to allocate a public IP.
     */
    public readonly allocatedPublicIp!: pulumi.Output<boolean | undefined>;
    /**
     * Base64 encoded EC2 user data to associated with the host.
     */
    public readonly base64UserData!: pulumi.Output<string>;
    /**
     * The AWS EC2 instance type.
     */
    public readonly capacity!: pulumi.Output<string>;
    /**
     * The numeric ID of the cloud provider to launch the host in.
     */
    public readonly cloud!: pulumi.Output<number | undefined>;
    /**
     * Specify the labels to attach to the nodes.
     */
    public readonly customNodeLabels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The short name of the host.
     */
    public readonly friendlyName!: pulumi.Output<string>;
    /**
     * The name of the IAM role associated with this host.
     */
    public /*out*/ readonly identityRole!: pulumi.Output<string>;
    /**
     * The AMI ID to use.
     */
    public readonly imageId!: pulumi.Output<string>;
    public /*out*/ readonly initialBase64UserData!: pulumi.Output<string>;
    /**
     * The AWS EC2 instance ID of the host.
     */
    public /*out*/ readonly instanceId!: pulumi.Output<string>;
    public readonly isEbsOptimized!: pulumi.Output<boolean | undefined>;
    public readonly isMinion!: pulumi.Output<boolean | undefined>;
    /**
     * The numeric ID of the keypair type being used.Should be one of: - `0` : Default - `1` : ED25519 - `2` : RSA (deprecated
     * - some operating systems no longer support it)
     */
    public readonly keypairType!: pulumi.Output<number>;
    /**
     * Configuration metadata used when creating the host.<br>*Note: To configure OS disk size OsDiskSize can be specified as
     * Key and its size as value, size value should be atleast 10*
     */
    public readonly metadatas!: pulumi.Output<outputs.AwsHostMetadata[]>;
    /**
     * A map of tags to assign to the resource. Example - `AllocationTags` can be passed as tag key with any value.
     */
    public readonly minionTags!: pulumi.Output<outputs.AwsHostMinionTag[]>;
    /**
     * An optional list of custom network interface configurations to use when creating the host.
     */
    public readonly networkInterfaces!: pulumi.Output<outputs.AwsHostNetworkInterface[]>;
    /**
     * Bootstrap an EKS host with Duplo's user data, prepending it to custom user data if also provided.
     */
    public readonly prependUserData!: pulumi.Output<boolean | undefined>;
    /**
     * The primary private IP address assigned to the host.
     */
    public /*out*/ readonly privateIpAddress!: pulumi.Output<string>;
    /**
     * The primary public IP address assigned to the host.
     */
    public /*out*/ readonly publicIpAddress!: pulumi.Output<string>;
    /**
     * The current status of the host.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.AwsHostTag[]>;
    /**
     * Specify taints to attach to the nodes, to repel other nodes with different toleration
     */
    public readonly taints!: pulumi.Output<outputs.AwsHostTaint[] | undefined>;
    /**
     * The GUID of the tenant that the host will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * The name of the tenant that the host will be created in.
     */
    public readonly userAccount!: pulumi.Output<string>;
    /**
     * Block to specify additional or secondary volume beyond the root device
     */
    public readonly volumes!: pulumi.Output<outputs.AwsHostVolume[]>;
    /**
     * Whether or not to wait until Duplo can connect to the host, after creation.
     */
    public readonly waitUntilConnected!: pulumi.Output<boolean | undefined>;
    /**
     * The availability zone to launch the host in, expressed as a number and starting at 0.
     */
    public readonly zone!: pulumi.Output<number | undefined>;

    /**
     * Create a AwsHost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsHostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsHostArgs | AwsHostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsHostState | undefined;
            resourceInputs["agentPlatform"] = state ? state.agentPlatform : undefined;
            resourceInputs["allocatedPublicIp"] = state ? state.allocatedPublicIp : undefined;
            resourceInputs["base64UserData"] = state ? state.base64UserData : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["cloud"] = state ? state.cloud : undefined;
            resourceInputs["customNodeLabels"] = state ? state.customNodeLabels : undefined;
            resourceInputs["friendlyName"] = state ? state.friendlyName : undefined;
            resourceInputs["identityRole"] = state ? state.identityRole : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["initialBase64UserData"] = state ? state.initialBase64UserData : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["isEbsOptimized"] = state ? state.isEbsOptimized : undefined;
            resourceInputs["isMinion"] = state ? state.isMinion : undefined;
            resourceInputs["keypairType"] = state ? state.keypairType : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["minionTags"] = state ? state.minionTags : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["prependUserData"] = state ? state.prependUserData : undefined;
            resourceInputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            resourceInputs["publicIpAddress"] = state ? state.publicIpAddress : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["userAccount"] = state ? state.userAccount : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
            resourceInputs["waitUntilConnected"] = state ? state.waitUntilConnected : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as AwsHostArgs | undefined;
            if ((!args || args.capacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacity'");
            }
            if ((!args || args.friendlyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'friendlyName'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["agentPlatform"] = args ? args.agentPlatform : undefined;
            resourceInputs["allocatedPublicIp"] = args ? args.allocatedPublicIp : undefined;
            resourceInputs["base64UserData"] = args ? args.base64UserData : undefined;
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["cloud"] = args ? args.cloud : undefined;
            resourceInputs["customNodeLabels"] = args ? args.customNodeLabels : undefined;
            resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["isEbsOptimized"] = args ? args.isEbsOptimized : undefined;
            resourceInputs["isMinion"] = args ? args.isMinion : undefined;
            resourceInputs["keypairType"] = args ? args.keypairType : undefined;
            resourceInputs["metadatas"] = args ? args.metadatas : undefined;
            resourceInputs["minionTags"] = args ? args.minionTags : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["prependUserData"] = args ? args.prependUserData : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["userAccount"] = args ? args.userAccount : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["waitUntilConnected"] = args ? args.waitUntilConnected : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["identityRole"] = undefined /*out*/;
            resourceInputs["initialBase64UserData"] = undefined /*out*/;
            resourceInputs["instanceId"] = undefined /*out*/;
            resourceInputs["privateIpAddress"] = undefined /*out*/;
            resourceInputs["publicIpAddress"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsHost.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsHost resources.
 */
export interface AwsHostState {
    /**
     * The numeric ID of the container agent pool that this host is added to.
     */
    agentPlatform?: pulumi.Input<number>;
    /**
     * Whether or not to allocate a public IP.
     */
    allocatedPublicIp?: pulumi.Input<boolean>;
    /**
     * Base64 encoded EC2 user data to associated with the host.
     */
    base64UserData?: pulumi.Input<string>;
    /**
     * The AWS EC2 instance type.
     */
    capacity?: pulumi.Input<string>;
    /**
     * The numeric ID of the cloud provider to launch the host in.
     */
    cloud?: pulumi.Input<number>;
    /**
     * Specify the labels to attach to the nodes.
     */
    customNodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The short name of the host.
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * The name of the IAM role associated with this host.
     */
    identityRole?: pulumi.Input<string>;
    /**
     * The AMI ID to use.
     */
    imageId?: pulumi.Input<string>;
    initialBase64UserData?: pulumi.Input<string>;
    /**
     * The AWS EC2 instance ID of the host.
     */
    instanceId?: pulumi.Input<string>;
    isEbsOptimized?: pulumi.Input<boolean>;
    isMinion?: pulumi.Input<boolean>;
    /**
     * The numeric ID of the keypair type being used.Should be one of: - `0` : Default - `1` : ED25519 - `2` : RSA (deprecated
     * - some operating systems no longer support it)
     */
    keypairType?: pulumi.Input<number>;
    /**
     * Configuration metadata used when creating the host.<br>*Note: To configure OS disk size OsDiskSize can be specified as
     * Key and its size as value, size value should be atleast 10*
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.AwsHostMetadata>[]>;
    /**
     * A map of tags to assign to the resource. Example - `AllocationTags` can be passed as tag key with any value.
     */
    minionTags?: pulumi.Input<pulumi.Input<inputs.AwsHostMinionTag>[]>;
    /**
     * An optional list of custom network interface configurations to use when creating the host.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.AwsHostNetworkInterface>[]>;
    /**
     * Bootstrap an EKS host with Duplo's user data, prepending it to custom user data if also provided.
     */
    prependUserData?: pulumi.Input<boolean>;
    /**
     * The primary private IP address assigned to the host.
     */
    privateIpAddress?: pulumi.Input<string>;
    /**
     * The primary public IP address assigned to the host.
     */
    publicIpAddress?: pulumi.Input<string>;
    /**
     * The current status of the host.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.AwsHostTag>[]>;
    /**
     * Specify taints to attach to the nodes, to repel other nodes with different toleration
     */
    taints?: pulumi.Input<pulumi.Input<inputs.AwsHostTaint>[]>;
    /**
     * The GUID of the tenant that the host will be created in.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The name of the tenant that the host will be created in.
     */
    userAccount?: pulumi.Input<string>;
    /**
     * Block to specify additional or secondary volume beyond the root device
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.AwsHostVolume>[]>;
    /**
     * Whether or not to wait until Duplo can connect to the host, after creation.
     */
    waitUntilConnected?: pulumi.Input<boolean>;
    /**
     * The availability zone to launch the host in, expressed as a number and starting at 0.
     */
    zone?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AwsHost resource.
 */
export interface AwsHostArgs {
    /**
     * The numeric ID of the container agent pool that this host is added to.
     */
    agentPlatform?: pulumi.Input<number>;
    /**
     * Whether or not to allocate a public IP.
     */
    allocatedPublicIp?: pulumi.Input<boolean>;
    /**
     * Base64 encoded EC2 user data to associated with the host.
     */
    base64UserData?: pulumi.Input<string>;
    /**
     * The AWS EC2 instance type.
     */
    capacity: pulumi.Input<string>;
    /**
     * The numeric ID of the cloud provider to launch the host in.
     */
    cloud?: pulumi.Input<number>;
    /**
     * Specify the labels to attach to the nodes.
     */
    customNodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The short name of the host.
     */
    friendlyName: pulumi.Input<string>;
    /**
     * The AMI ID to use.
     */
    imageId: pulumi.Input<string>;
    isEbsOptimized?: pulumi.Input<boolean>;
    isMinion?: pulumi.Input<boolean>;
    /**
     * The numeric ID of the keypair type being used.Should be one of: - `0` : Default - `1` : ED25519 - `2` : RSA (deprecated
     * - some operating systems no longer support it)
     */
    keypairType?: pulumi.Input<number>;
    /**
     * Configuration metadata used when creating the host.<br>*Note: To configure OS disk size OsDiskSize can be specified as
     * Key and its size as value, size value should be atleast 10*
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.AwsHostMetadata>[]>;
    /**
     * A map of tags to assign to the resource. Example - `AllocationTags` can be passed as tag key with any value.
     */
    minionTags?: pulumi.Input<pulumi.Input<inputs.AwsHostMinionTag>[]>;
    /**
     * An optional list of custom network interface configurations to use when creating the host.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.AwsHostNetworkInterface>[]>;
    /**
     * Bootstrap an EKS host with Duplo's user data, prepending it to custom user data if also provided.
     */
    prependUserData?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.AwsHostTag>[]>;
    /**
     * Specify taints to attach to the nodes, to repel other nodes with different toleration
     */
    taints?: pulumi.Input<pulumi.Input<inputs.AwsHostTaint>[]>;
    /**
     * The GUID of the tenant that the host will be created in.
     */
    tenantId: pulumi.Input<string>;
    /**
     * The name of the tenant that the host will be created in.
     */
    userAccount?: pulumi.Input<string>;
    /**
     * Block to specify additional or secondary volume beyond the root device
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.AwsHostVolume>[]>;
    /**
     * Whether or not to wait until Duplo can connect to the host, after creation.
     */
    waitUntilConnected?: pulumi.Input<boolean>;
    /**
     * The availability zone to launch the host in, expressed as a number and starting at 0.
     */
    zone?: pulumi.Input<number>;
}
