// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * `duplocloud.PlanKmsV2` manages the list of kms avaialble to a plan in Duplo.
 *
 * This resource allows you take control of individual plan kms for a specific plan.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myplan = new duplocloud.PlanKmsV2("myplan", {
 *     planId: "plan-name",
 *     kms: [{
 *         id: "kms-id",
 *         arn: "kms-arn",
 *         name: "kms-name",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing WAF instance
 *
 *  - *PLAN_ID* is the plan name
 *
 * ```sh
 * $ pulumi import duplocloud:index/planKmsV2:PlanKmsV2 myplan *PLAN_ID*&#47;kms*
 * ```
 */
export class PlanKmsV2 extends pulumi.CustomResource {
    /**
     * Get an existing PlanKmsV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlanKmsV2State, opts?: pulumi.CustomResourceOptions): PlanKmsV2 {
        return new PlanKmsV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/planKmsV2:PlanKmsV2';

    /**
     * Returns true if the given object is an instance of PlanKmsV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlanKmsV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlanKmsV2.__pulumiType;
    }

    /**
     * Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
     */
    public readonly deleteUnspecifiedKmsKeys!: pulumi.Output<boolean | undefined>;
    /**
     * A list of KMS key to manage.
     */
    public readonly kms!: pulumi.Output<outputs.PlanKmsV2Km[] | undefined>;
    /**
     * A list of KMS key to manage.
     */
    public /*out*/ readonly kmsKeys!: pulumi.Output<outputs.PlanKmsV2KmsKey[]>;
    /**
     * The ID of the plan to configure.
     */
    public readonly planId!: pulumi.Output<string>;
    /**
     * A list of certificate names being managed by this resource.
     */
    public /*out*/ readonly specifiedKmsKeys!: pulumi.Output<string[]>;

    /**
     * Create a PlanKmsV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlanKmsV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlanKmsV2Args | PlanKmsV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlanKmsV2State | undefined;
            resourceInputs["deleteUnspecifiedKmsKeys"] = state ? state.deleteUnspecifiedKmsKeys : undefined;
            resourceInputs["kms"] = state ? state.kms : undefined;
            resourceInputs["kmsKeys"] = state ? state.kmsKeys : undefined;
            resourceInputs["planId"] = state ? state.planId : undefined;
            resourceInputs["specifiedKmsKeys"] = state ? state.specifiedKmsKeys : undefined;
        } else {
            const args = argsOrState as PlanKmsV2Args | undefined;
            if ((!args || args.planId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'planId'");
            }
            resourceInputs["deleteUnspecifiedKmsKeys"] = args ? args.deleteUnspecifiedKmsKeys : undefined;
            resourceInputs["kms"] = args ? args.kms : undefined;
            resourceInputs["planId"] = args ? args.planId : undefined;
            resourceInputs["kmsKeys"] = undefined /*out*/;
            resourceInputs["specifiedKmsKeys"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlanKmsV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PlanKmsV2 resources.
 */
export interface PlanKmsV2State {
    /**
     * Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
     */
    deleteUnspecifiedKmsKeys?: pulumi.Input<boolean>;
    /**
     * A list of KMS key to manage.
     */
    kms?: pulumi.Input<pulumi.Input<inputs.PlanKmsV2Km>[]>;
    /**
     * A list of KMS key to manage.
     */
    kmsKeys?: pulumi.Input<pulumi.Input<inputs.PlanKmsV2KmsKey>[]>;
    /**
     * The ID of the plan to configure.
     */
    planId?: pulumi.Input<string>;
    /**
     * A list of certificate names being managed by this resource.
     */
    specifiedKmsKeys?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a PlanKmsV2 resource.
 */
export interface PlanKmsV2Args {
    /**
     * Whether or not this resource should delete any certificates not specified by this resource. **WARNING:**  It is not recommended to change the default value of `false`. Defaults to `false`.
     */
    deleteUnspecifiedKmsKeys?: pulumi.Input<boolean>;
    /**
     * A list of KMS key to manage.
     */
    kms?: pulumi.Input<pulumi.Input<inputs.PlanKmsV2Km>[]>;
    /**
     * The ID of the plan to configure.
     */
    planId: pulumi.Input<string>;
}
