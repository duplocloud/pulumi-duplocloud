// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `duplocloud.GcpStorageBucket` manages a GCP storage bucket in Duplo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as duplocloud from "@pulumi/duplocloud";
 *
 * const myapp = new duplocloud.Tenant("myapp", {
 *     accountName: "myapp",
 *     planId: "default",
 * });
 * const mybucket = new duplocloud.GcpStorageBucket("mybucket", {
 *     tenantId: myapp.tenantId,
 *     name: "mybucket",
 *     enableVersioning: false,
 * });
 * ```
 *
 * ## Import
 *
 * Example: Importing an existing GCP storage bucket
 *
 *  - *TENANT_ID* is the tenant GUID
 *
 *  - *SHORT_NAME* is the short name of the GCP storage bucket
 *
 * # 
 *
 * ```sh
 * $ pulumi import duplocloud:index/gcpStorageBucket:GcpStorageBucket mybucket *TENANT_ID*&#47;*SHORT_NAME*
 * ```
 */
export class GcpStorageBucket extends pulumi.CustomResource {
    /**
     * Get an existing GcpStorageBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GcpStorageBucketState, opts?: pulumi.CustomResourceOptions): GcpStorageBucket {
        return new GcpStorageBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'duplocloud:index/gcpStorageBucket:GcpStorageBucket';

    /**
     * Returns true if the given object is an instance of GcpStorageBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GcpStorageBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GcpStorageBucket.__pulumiType;
    }

    /**
     * Whether or not public access might be allowed for the storage bucket. Defaults to `false`.
     */
    public readonly allowPublicAccess!: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not versioning is enabled for the storage bucket. Defaults to `false`.
     */
    public readonly enableVersioning!: pulumi.Output<boolean | undefined>;
    /**
     * The full name of the storage bucket.
     */
    public /*out*/ readonly fullname!: pulumi.Output<string>;
    /**
     * The labels assigned to this storage bucket.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The short name of the storage bucket.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The SelfLink of the storage bucket.
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * The GUID of the tenant that the storage bucket will be created in.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a GcpStorageBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GcpStorageBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GcpStorageBucketArgs | GcpStorageBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GcpStorageBucketState | undefined;
            resourceInputs["allowPublicAccess"] = state ? state.allowPublicAccess : undefined;
            resourceInputs["enableVersioning"] = state ? state.enableVersioning : undefined;
            resourceInputs["fullname"] = state ? state.fullname : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as GcpStorageBucketArgs | undefined;
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["allowPublicAccess"] = args ? args.allowPublicAccess : undefined;
            resourceInputs["enableVersioning"] = args ? args.enableVersioning : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["fullname"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GcpStorageBucket.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GcpStorageBucket resources.
 */
export interface GcpStorageBucketState {
    /**
     * Whether or not public access might be allowed for the storage bucket. Defaults to `false`.
     */
    allowPublicAccess?: pulumi.Input<boolean>;
    /**
     * Whether or not versioning is enabled for the storage bucket. Defaults to `false`.
     */
    enableVersioning?: pulumi.Input<boolean>;
    /**
     * The full name of the storage bucket.
     */
    fullname?: pulumi.Input<string>;
    /**
     * The labels assigned to this storage bucket.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The short name of the storage bucket.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * The SelfLink of the storage bucket.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the storage bucket will be created in.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GcpStorageBucket resource.
 */
export interface GcpStorageBucketArgs {
    /**
     * Whether or not public access might be allowed for the storage bucket. Defaults to `false`.
     */
    allowPublicAccess?: pulumi.Input<boolean>;
    /**
     * Whether or not versioning is enabled for the storage bucket. Defaults to `false`.
     */
    enableVersioning?: pulumi.Input<boolean>;
    /**
     * The labels assigned to this storage bucket.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The short name of the storage bucket.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * The GUID of the tenant that the storage bucket will be created in.
     */
    tenantId: pulumi.Input<string>;
}
